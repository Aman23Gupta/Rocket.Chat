{"version":3,"sources":["meteor://ðŸ’»app/client/components/connectionStatus/ConnectionStatusBar.js"],"names":["_slicedToArray","module","link","default","v","Icon","React","useEffect","useRef","useState","useConnectionStatus","useTranslation","getReconnectCountdown","retryTime","timeDiff","Date","now","Math","round","useReconnectCountdown","status","reconnectionTimerRef","reconnectCountdown","setReconnectCountdown","current","setInterval","clearInterval","ConnectionStatusBar","connected","reconnect","t","handleRetryClick","event","preventDefault","context","count","includes","exportDefault"],"mappings":"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","file":"dynamic/client/components/connectionStatus/ConnectionStatusBar.js","sourcesContent":["import { Icon } from '@rocket.chat/fuselage';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useConnectionStatus } from '../../contexts/ConnectionStatusContext';\nimport { useTranslation } from '../../contexts/TranslationContext';\nimport './ConnectionStatusBar.css';\n\nconst getReconnectCountdown = (retryTime) => {\n\tconst timeDiff = retryTime - Date.now();\n\treturn (timeDiff > 0 && Math.round(timeDiff / 1000)) || 0;\n};\n\nconst useReconnectCountdown = (retryTime, status) => {\n\tconst reconnectionTimerRef = useRef();\n\tconst [reconnectCountdown, setReconnectCountdown] = useState(() => getReconnectCountdown(retryTime));\n\n\tuseEffect(() => {\n\t\tif (status === 'waiting') {\n\t\t\tif (reconnectionTimerRef.current) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treconnectionTimerRef.current = setInterval(() => {\n\t\t\t\tsetReconnectCountdown(getReconnectCountdown(retryTime));\n\t\t\t}, 500);\n\t\t\treturn;\n\t\t}\n\n\t\tclearInterval(reconnectionTimerRef.current);\n\t\treconnectionTimerRef.current = null;\n\t}, [retryTime, status]);\n\n\tuseEffect(\n\t\t() => () => {\n\t\t\tclearInterval(reconnectionTimerRef.current);\n\t\t},\n\t\t[],\n\t);\n\n\treturn reconnectCountdown;\n};\n\nfunction ConnectionStatusBar() {\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();\n\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst t = useTranslation();\n\n\tif (connected) {\n\t\treturn null;\n\t}\n\n\tconst handleRetryClick = (event) => {\n\t\tevent.preventDefault();\n\t\treconnect && reconnect();\n\t};\n\n\treturn (\n\t\t<div className='ConnectionStatusBar' role='alert'>\n\t\t\t<strong>\n\t\t\t\t<Icon name='warning' /> {t('meteor_status', { context: status })}\n\t\t\t</strong>\n\n\t\t\t{status === 'waiting' && <> {t('meteor_status_reconnect_in', { count: reconnectCountdown })}</>}\n\n\t\t\t{['waiting', 'offline'].includes(status) && (\n\t\t\t\t<>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<a className='ConnectionStatusBar__retry-link' href='#' onClick={handleRetryClick}>\n\t\t\t\t\t\t{t('meteor_status_try_now', { context: status })}\n\t\t\t\t\t</a>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default ConnectionStatusBar;\n"]}