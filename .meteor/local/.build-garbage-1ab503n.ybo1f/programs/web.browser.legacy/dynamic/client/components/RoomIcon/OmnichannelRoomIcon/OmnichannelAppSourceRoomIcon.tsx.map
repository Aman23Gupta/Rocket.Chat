{"version":3,"sources":["meteor://ðŸ’»app/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelAppSourceRoomIcon.tsx"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAa;AAAE,QAAK,cAAM;AAAA;AAAA,GAAb;AAAa,8BAAwB;AAAA;AAAA;AAArC,CAAb;AAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3C,IAAM,MAAM,GAAG;AACrB,MAAI,EAAE,YADe;AAErB,MAAI,EAAE,aAFe;AAGrB,QAAM,EAAE,aAHa;AAIrB,SAAO,EAAE;AAJY,CAAf;;AAOP,IAAM,sBAAsB,GAAG,UAAC,OAAD,EAAyD;AACvF,UAAQ,OAAR;AACC,SAAK,KAAL;AAAY;AACX,eAAO,EAAP;AACA;;AACD,SAAK,KAAL;AAAY;AACX,eAAO,EAAP;AACA;;AACD,SAAK,KAAL;AACA;AAAS;AACR,eAAO,EAAP;AACA;AAVF;AAYA,CAbD;;AAeO,IAAM,4BAA4B,GAAG,gBAQzB;AAAA,MAPlB,IAOkB,QAPlB,IAOkB;AAAA,uBANlB,IAMkB;AAAA,MANlB,IAMkB,0BANX,EAMW;AAAA,4BALlB,SAKkB;AAAA,MALlB,SAKkB,+BALN,SAKM;AAClB,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAL,CAAO,MAAP,IAAiB,SAAlB,CAApB;AACA,MAAM,IAAI,GAAI,SAAS,KAAK,SAAd,IAA2B,IAAI,CAAC,MAAL,CAAY,WAAxC,IAAwD,IAAI,CAAC,MAAL,CAAY,WAAjF;;AACA,8BAAyB,sBAAsB,CAAC,IAAI,CAAC,MAAL,CAAY,EAAb,EAAiB,IAAI,IAAI,EAAzB,CAA/C;AAAA,MAAQ,KAAR,yBAAQ,KAAR;AAAA,MAAe,KAAf,yBAAe,KAAf;;AACA,MAAM,QAAQ,GAAG,sBAAsB,CAAC,IAAD,CAAvC;;AACA,MAAI,CAAC,eAAe,CAAC,QAAjB,EAA2B,eAAe,CAAC,OAA3C,EAAoD,QAApD,CAA6D,KAA7D,CAAJ,EAAyE;AACxE,wBAAO,oBAAC,IAAD;AAAM,UAAI,EAAC,SAAX;AAAqB,UAAI,EAAE,IAA3B;AAAiC,WAAK,EAAE;AAAxC,MAAP;AACA;;AACD,sBACC,oBAAC,GAAD;AAAK,QAAI,EAAE,QAAX;AAAqB,SAAK,EAAE;AAA5B,kBACC,oBAAC,GAAD;AAAK,MAAE,EAAC,KAAR;AAAc,QAAI,EAAE,QAApB;AAA8B,mBAAY;AAA1C,kBACC,oBAAC,GAAD;AAAK,MAAE,EAAC,KAAR;AAAc,QAAI,QAAM;AAAxB,IADD,CADD,CADD;AAOA,CAvBM,C","file":"dynamic/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelAppSourceRoomIcon.tsx","sourcesContent":["import { Icon, Box } from '@rocket.chat/fuselage';\nimport React, { ComponentProps, ReactElement } from 'react';\n\nimport { IOmnichannelRoomFromAppSource } from '../../../../definition/IRoom';\nimport { AsyncStatePhase } from '../../../lib/asyncState/AsyncStatePhase';\nimport { useOmnichannelRoomIcon } from './context/OmnichannelRoomIconContext';\n\nexport const colors = {\n\tbusy: 'danger-500',\n\taway: 'warning-600',\n\tonline: 'success-500',\n\toffline: 'neutral-600',\n};\n\nconst convertBoxSizeToNumber = (boxSize: ComponentProps<typeof Icon>['size']): number => {\n\tswitch (boxSize) {\n\t\tcase 'x20': {\n\t\t\treturn 20;\n\t\t}\n\t\tcase 'x24': {\n\t\t\treturn 24;\n\t\t}\n\t\tcase 'x16':\n\t\tdefault: {\n\t\t\treturn 16;\n\t\t}\n\t}\n};\n\nexport const OmnichannelAppSourceRoomIcon = ({\n\troom,\n\tsize = 16,\n\tplacement = 'default',\n}: {\n\troom: IOmnichannelRoomFromAppSource;\n\tsize: ComponentProps<typeof Icon>['size'];\n\tplacement: 'sidebar' | 'default';\n}): ReactElement => {\n\tconst color = colors[room.v.status || 'offline'];\n\tconst icon = (placement === 'sidebar' && room.source.sidebarIcon) || room.source.defaultIcon;\n\tconst { phase, value } = useOmnichannelRoomIcon(room.source.id, icon || '');\n\tconst fontSize = convertBoxSizeToNumber(size);\n\tif ([AsyncStatePhase.REJECTED, AsyncStatePhase.LOADING].includes(phase)) {\n\t\treturn <Icon name='headset' size={size} color={color} />;\n\t}\n\treturn (\n\t\t<Box size={fontSize} color={color}>\n\t\t\t<Box is='svg' size={fontSize} aria-hidden='true'>\n\t\t\t\t<Box is='use' href={`#${value}`} />\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n"]}