{"version":3,"sources":["meteor://ðŸ’»app/client/components/RoomAutoComplete/hooks/useRoomsList.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAsB,MAAQ,KAAR,CAAU,4BAAV,EAAwB;AAAA;AAAA;AAAA;AAAA,CAAxB,EAAwB,CAAxB;;AAAwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9C,OAAO,MAAP,CAAS;AAAA,cAAa,cAAgB;AAAA,WAAQ,YAAR;AAAQ;AAArC,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYvC,IAAM,YAAY,GAAG,UAC3B,OAD2B,EAOxB;AACH,kBAAkC,QAAQ,CAAC;AAAA,WAAM,IAAI,UAAJ,EAAN;AAAA,GAAD,CAA1C;AAAA;AAAA,MAAO,SAAP;AAAA,MAAkB,YAAlB;;AACA,MAAM,MAAM,GAAG,WAAW,CAAC;AAAA,WAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAlB;AAAA,GAAD,EAA8C,EAA9C,CAA1B;AACA,MAAM,QAAQ,GAAG,qDAAjB;AAEA,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAD,EAAQ,QAAR,CAA5B;AAEA,uBAAqB,CAAC,YAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,MAAM,SAAS,GAAG,WAAW;AAC5B,qBAAO,KAAP,EAAc,GAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACuC,QAAQ,CAAC;AAC9C,0BAAQ,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,wBAAI,EAAE,OAAO,CAAC,IAAR,IAAgB;AAAxB,mBAAf,CADoC;AAE9C,wBAAM,EAAE,KAFsC;AAG9C,uBAAK,EAAE,KAAK,GAAG,GAH+B;AAI9C,sBAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,wBAAI,EAAE;AAAR,mBAAf;AAJwC,iBAAD,CAD/C;;AAAA;AAAA;AACgB,qBADhB,mBACS,KADT;AACuB,qBADvB,mBACuB,KADvB;AAQO,qBARP,GAQe,KAAK,CAAC,GAAN,CAAU,UAAC,IAAD,EAAc;AACrC,sBAAI,CAAC,UAAL,GAAkB,IAAI,IAAJ,CAAS,IAAI,CAAC,UAAd,CAAlB;AACA,sBAAI,CAAC,KAAL,GAAa,IAAI,CAAC,IAAlB;AACA,sBAAI,CAAC,KAAL,GAAa,IAAI,CAAC,IAAlB;AACA,yBAAO,IAAP;AACA,iBALa,CARf;AAAA,iDAeQ;AACN,uBAAK,EAAL,KADM;AAEN,2BAAS,EAAE;AAFL,iBAfR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAD4B;AAAA,OAqB5B,CAAC,QAAD,EAAW,OAAO,CAAC,IAAnB,CArB4B,CAA7B;;AAwBA,8BAA4C,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAAA,MAAQ,aAAR,yBAAQ,aAAR;AAAA,MAAuB,gBAAvB,yBAAuB,gBAAvB;;AAEA,SAAO;AACN,UAAM,EAAN,MADM;AAEN,aAAS,EAAT,SAFM;AAGN,iBAAa,EAAb,aAHM;AAIN,oBAAgB,EAAhB;AAJM,GAAP;AAMA,CAlDM,C","file":"dynamic/client/components/RoomAutoComplete/hooks/useRoomsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { IRoom } from '../../../../definition/IRoom';\nimport { useEndpoint } from '../../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../lib/lists/RecordList';\n\ntype RoomListOptions = {\n\ttext: string;\n};\n\nexport const useRoomsList = (\n\toptions: RoomListOptions,\n): {\n\titemsList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoom>()), []);\n\tconst endpoint = 'rooms.autocomplete.channelAndPrivate.withPagination';\n\n\tconst getRooms = useEndpoint('GET', endpoint);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\t\tselector: JSON.stringify({ name: options.text || '' }),\n\t\t\t\toffset: start,\n\t\t\t\tcount: start + end,\n\t\t\t\tsort: JSON.stringify({ name: 1 }),\n\t\t\t});\n\n\t\t\tconst items = rooms.map((room: any) => {\n\t\t\t\troom._updatedAt = new Date(room._updatedAt);\n\t\t\t\troom.label = room.name;\n\t\t\t\troom.value = room.name;\n\t\t\t\treturn room;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getRooms, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}