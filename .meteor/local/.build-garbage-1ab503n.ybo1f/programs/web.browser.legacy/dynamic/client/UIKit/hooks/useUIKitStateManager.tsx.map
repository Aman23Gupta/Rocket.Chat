{"version":3,"sources":["meteor://ðŸ’»app/client/UIKit/hooks/useUIKitStateManager.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAA0B,8DAA8B;AAAA;AAAA;AAAA;AAAA,CAA9B,EAA8B,CAA9B;;AAA8B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxD,OAAO,MAAP,CAAS;AAAA,sBAAiB;AAAA;AAA8B;AAA/C,CAAT;AAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMxD,IAAM,oBAAoB,GAAG,UAAyB,YAAzB,EAA+C;AAC3E,mBAA0B,SAAS,CAAC,QAAQ,CAAI,YAAJ,CAAT,CAAnC;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AAEA,MAAQ,MAAR,GAAmB,KAAnB,CAAQ,MAAR;AAEA,WAAS,CAAC,YAAK;AACd,QAAM,YAAY,GAAG,gBAAkD;AAAA,UAA5C,IAA4C;;AACtE,UAAI,WAAW,CAAC,IAAD,CAAf,EAAuB;AACtB,YAAQ,MAAR,GAAmB,IAAnB,CAAQ,MAAR;AACA,gBAAQ,CAAC,UAAC,KAAD;AAAA,iDAAiB,KAAjB;AAAwB,kBAAM,EAAN;AAAxB;AAAA,SAAD,CAAR;AACA;AACA,OALqE,CAMtE;;;AACA,UAAQ,IAAR,GAA0B,IAA1B,CAAQ,IAAR;AAAA,UAAiB,IAAjB,4BAA0B,IAA1B;;AACA,cAAQ,CAAC,IAAD,CAAR;AACA,KATD;;AAWA,iBAAa,CAAC,EAAd,CAAiB,MAAjB,EAAyB,YAAzB;AAEA,WAAO,YAAW;AACjB,mBAAa,CAAC,GAAd,CAAkB,MAAlB,EAA0B,YAA1B;AACA,KAFD;AAGA,GAjBQ,EAiBN,CAAC,QAAD,EAAW,MAAX,CAjBM,CAAT;AAmBA,SAAO,KAAP;AACA,CAzBD,C","file":"dynamic/client/UIKit/hooks/useUIKitStateManager.tsx","sourcesContent":["import { useSafely } from '@rocket.chat/fuselage-hooks';\nimport { useEffect, useState } from 'react';\n\nimport * as ActionManager from '../../../app/ui-message/client/ActionManager';\nimport { isErrorType, UIKitUserInteractionResult, UiKitPayload } from '../../../definition/UIKit';\n\nconst useUIKitStateManager = <S extends UiKitPayload>(initialState: S): S => {\n\tconst [state, setState] = useSafely(useState<S>(initialState));\n\n\tconst { viewId } = state;\n\n\tuseEffect(() => {\n\t\tconst handleUpdate = ({ ...data }: UIKitUserInteractionResult): void => {\n\t\t\tif (isErrorType(data)) {\n\t\t\t\tconst { errors } = data;\n\t\t\t\tsetState((state) => ({ ...state, errors }));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst { type, ...rest } = data;\n\t\t\tsetState(rest as any);\n\t\t};\n\n\t\tActionManager.on(viewId, handleUpdate);\n\n\t\treturn (): void => {\n\t\t\tActionManager.off(viewId, handleUpdate);\n\t\t};\n\t}, [setState, viewId]);\n\n\treturn state;\n};\n\nexport { useUIKitStateManager };\n"]}