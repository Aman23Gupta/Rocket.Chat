{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/import/PrepareChannels.tsx"],"names":[],"mappings":"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","file":"dynamic/client/views/admin/import/PrepareChannels.tsx","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport { CheckBox, Table, Tag, Pagination } from '@rocket.chat/fuselage';\nimport React, { useState, useCallback, FC, Dispatch, SetStateAction, ChangeEvent } from 'react';\n\nimport { useTranslation } from '../../../contexts/TranslationContext';\n\ntype ChannelDescriptor = {\n\tchannel_id: string;\n\tname: string;\n\tis_archived: boolean;\n\tdo_import: boolean;\n};\n\ntype PrepareChannelsProps = {\n\tchannelsCount: number;\n\tchannels: ChannelDescriptor[];\n\tsetChannels: Dispatch<SetStateAction<ChannelDescriptor[]>>;\n};\n\nconst PrepareChannels: FC<PrepareChannelsProps> = ({ channels, channelsCount, setChannels }) => {\n\tconst t = useTranslation();\n\tconst [current, setCurrent] = useState(0);\n\tconst [itemsPerPage, setItemsPerPage] = useState<25 | 50 | 100>(25);\n\tconst showingResultsLabel = useCallback(\n\t\t({ count, current, itemsPerPage }) => t('Showing_results_of', current + 1, Math.min(current + itemsPerPage, count), count),\n\t\t[t],\n\t);\n\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\n\n\tif (!channels.length) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Table>\n\t\t\t\t<Table.Head>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.Cell width='x36'>\n\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\tchecked={channelsCount > 0}\n\t\t\t\t\t\t\t\tindeterminate={channelsCount > 0 && channelsCount !== channels.length}\n\t\t\t\t\t\t\t\tonChange={(): void => {\n\t\t\t\t\t\t\t\t\tsetChannels((channels) => {\n\t\t\t\t\t\t\t\t\t\tconst hasCheckedArchivedChannels = channels.some(({ is_archived, do_import }) => is_archived && do_import);\n\t\t\t\t\t\t\t\t\t\tconst isChecking = channelsCount === 0;\n\n\t\t\t\t\t\t\t\t\t\tif (isChecking) {\n\t\t\t\t\t\t\t\t\t\t\treturn channels.map((channel) => ({ ...channel, do_import: true }));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (hasCheckedArchivedChannels) {\n\t\t\t\t\t\t\t\t\t\t\treturn channels.map((channel) => (channel.is_archived ? { ...channel, do_import: false } : channel));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn channels.map((channel) => ({ ...channel, do_import: false }));\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell is='th'>{t('Name')}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell is='th' align='end'></Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Head>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{channels.slice(current, current + itemsPerPage).map((channel) => (\n\t\t\t\t\t\t<Table.Row key={channel.channel_id}>\n\t\t\t\t\t\t\t<Table.Cell width='x36'>\n\t\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\t\tchecked={channel.do_import}\n\t\t\t\t\t\t\t\t\tonChange={(event: ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\t\t\tconst { checked } = event.currentTarget;\n\t\t\t\t\t\t\t\t\t\tsetChannels((channels) =>\n\t\t\t\t\t\t\t\t\t\t\tchannels.map((_channel) => (_channel === channel ? { ..._channel, do_import: checked } : _channel)),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell>{channel.name}</Table.Cell>\n\t\t\t\t\t\t\t<Table.Cell align='end'>{channel.is_archived && <Tag variant='danger'>{t('Importer_Archived')}</Tag>}</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t))}\n\t\t\t\t</Table.Body>\n\t\t\t</Table>\n\t\t\t<Pagination\n\t\t\t\tcurrent={current}\n\t\t\t\titemsPerPage={itemsPerPage}\n\t\t\t\titemsPerPageLabel={itemsPerPageLabel}\n\t\t\t\tshowingResultsLabel={showingResultsLabel}\n\t\t\t\tcount={channels.length || 0}\n\t\t\t\tonSetItemsPerPage={setItemsPerPage}\n\t\t\t\tonSetCurrent={setCurrent}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default PrepareChannels;\n"]}