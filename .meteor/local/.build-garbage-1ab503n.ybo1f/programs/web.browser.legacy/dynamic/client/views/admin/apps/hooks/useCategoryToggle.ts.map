{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/apps/hooks/useCategoryToggle.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAgD,MAAM,KAAN,CAAa,0CAAb,EAAc;AAAA;AAAA;AAAA;AAAA,CAAd,EAAc,CAAd;AAAhD,OAAO,MAAP,CAAmC;AAAA,mBAAmB,cAAQ;AAAA;AAAA;AAA3B,CAAnC;AAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIvD,IAAM,iBAAiB,GAAG,UAChC,OADgC,EAEY;AAC5C,MAAM,UAAU,GAAG,WAAW,CAC7B,UAAC,IAAD;AAAA,WACC,OAAO,CAAC,UAAC,IAAD,EAAS;AAChB,UAAM,UAAU,GAAG,IAAI,CAAC,OAAL,CAAa,UAAC,KAAD;AAAA,eAAW,KAAK,CAAC,KAAjB;AAAA,OAAb,CAAnB;AAEA,UAAM,oBAAoB,GAAG,UAAU,CAAC,MAAX,CAAkB;AAAA,YAAG,EAAH,QAAG,EAAH;AAAA,eAAY,EAAE,KAAK,KAAnB;AAAA,OAAlB,CAA7B;AACA,UAAM,mBAAmB,GAAG,UAAU,CAAC,IAAX,CAAgB;AAAA,YAAG,EAAH,SAAG,EAAH;AAAA,eAAY,EAAE,KAAK,KAAnB;AAAA,OAAhB,CAA5B;AACA,UAAM,eAAe,GAAG,UAAU,CAAC,IAAX,CAAgB;AAAA,YAAG,EAAH,SAAG,EAAH;AAAA,eAAY,EAAE,KAAK,IAAI,CAAC,EAAxB;AAAA,OAAhB,CAAxB;AAEA,UAAM,sBAAsB,GAAG,IAAI,CAAC,EAAL,KAAY,KAA3C;;AACA,UAAI,sBAAJ,EAA4B;AAC3B,4BAAoB,CAAC,OAArB,CAA6B,UAAC,WAAD,EAAgB;AAC5C,qBAAW,CAAC,OAAZ,GAAsB,CAAC,IAAI,CAAC,OAA5B;AACA,SAFD;AAGA;;AAED,UAAI,eAAJ,EAAqB;AACpB,uBAAe,CAAC,OAAhB,GAA0B,CAAC,eAAe,CAAC,OAA3C;AACA;;AAED,UAAI,mBAAmB,IAAI,oBAAoB,CAAC,IAArB,CAA0B,UAAC,eAAD;AAAA,eAAqB,eAAe,CAAC,OAAhB,KAA4B,KAAjD;AAAA,OAA1B,CAA3B,EAA8G;AAC7G,2BAAmB,CAAC,OAApB,GAA8B,KAA9B;AACA;;AAED,gCAAW,IAAX;AACA,KAvBM,CADR;AAAA,GAD6B,EA0B7B,CAAC,OAAD,CA1B6B,CAA9B;AA6BA,SAAO,UAAP;AACA,CAjCM,C","file":"dynamic/client/views/admin/apps/hooks/useCategoryToggle.ts","sourcesContent":["import { Dispatch, SetStateAction, useCallback } from 'react';\n\nimport { CategoryDropdownItem, CategoryDropDownListProps } from '../definitions/CategoryDropdownDefinitions';\n\nexport const useCategoryToggle = (\n\tsetData: Dispatch<SetStateAction<CategoryDropDownListProps['groups']>>,\n): CategoryDropDownListProps['onSelected'] => {\n\tconst onSelected = useCallback(\n\t\t(item: CategoryDropdownItem) =>\n\t\t\tsetData((prev) => {\n\t\t\t\tconst categories = prev.flatMap((group) => group.items);\n\n\t\t\t\tconst categoriesWithoutAll = categories.filter(({ id }) => id !== 'all');\n\t\t\t\tconst allCategoriesOption = categories.find(({ id }) => id === 'all');\n\t\t\t\tconst toggledCategory = categories.find(({ id }) => id === item.id);\n\n\t\t\t\tconst isAllCategoriesToggled = item.id === 'all';\n\t\t\t\tif (isAllCategoriesToggled) {\n\t\t\t\t\tcategoriesWithoutAll.forEach((currentItem) => {\n\t\t\t\t\t\tcurrentItem.checked = !item.checked;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (toggledCategory) {\n\t\t\t\t\ttoggledCategory.checked = !toggledCategory.checked;\n\t\t\t\t}\n\n\t\t\t\tif (allCategoriesOption && categoriesWithoutAll.some((currentCategory) => currentCategory.checked === false)) {\n\t\t\t\t\tallCategoriesOption.checked = false;\n\t\t\t\t}\n\n\t\t\t\treturn [...prev];\n\t\t\t}),\n\t\t[setData],\n\t);\n\n\treturn onSelected;\n};\n"]}