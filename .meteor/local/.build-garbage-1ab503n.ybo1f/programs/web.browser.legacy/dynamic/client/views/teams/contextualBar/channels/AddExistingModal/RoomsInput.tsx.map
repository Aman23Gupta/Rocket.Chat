{"version":3,"sources":["meteor://ðŸ’»app/client/views/teams/contextualBar/channels/AddExistingModal/RoomsInput.tsx"],"names":[],"mappings":"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","file":"dynamic/client/views/teams/contextualBar/channels/AddExistingModal/RoomsInput.tsx","sourcesContent":["import { AutoComplete, Box, Icon, Option, Options, Chip, AutoCompleteProps } from '@rocket.chat/fuselage';\nimport { useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport React, { FC, memo, useCallback, useMemo, useState } from 'react';\n\nimport { roomTypes } from '../../../../../../app/utils/client';\nimport { IRoom } from '../../../../../../definition/IRoom';\nimport { Serialized } from '../../../../../../definition/Serialized';\nimport RoomAvatar from '../../../../../components/avatar/RoomAvatar';\nimport { useEndpointData } from '../../../../../hooks/useEndpointData';\n\ntype RoomsInputProps = {\n\tvalue: Serialized<IRoom>[];\n\tonChange: (value: Serialized<IRoom>, action: 'remove' | undefined) => void;\n};\n\n// TODO: Make AutoComplete accept arbitrary kinds of values\nconst useRoomsAutoComplete = (\n\tname: string,\n): {\n\trooms: Record<IRoom['_id'], Serialized<IRoom>>;\n\toptions: AutoCompleteProps['options'];\n} => {\n\tconst params = useMemo(\n\t\t() => ({\n\t\t\tname,\n\t\t}),\n\t\t[name],\n\t);\n\tconst { value: data } = useEndpointData('rooms.autocomplete.availableForTeams', params);\n\n\tconst options = useMemo<AutoCompleteProps['options']>(() => {\n\t\tif (!data) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn data.items.map((room: Serialized<IRoom>) => ({\n\t\t\tlabel: roomTypes.getRoomName(room.t, room),\n\t\t\tvalue: room._id,\n\t\t}));\n\t}, [data]);\n\n\tconst rooms = useMemo<Record<IRoom['_id'], Serialized<IRoom>>>(\n\t\t() =>\n\t\t\tdata?.items.reduce((obj, room) => {\n\t\t\t\tobj[room._id] = room;\n\t\t\t\treturn obj;\n\t\t\t}, {} as Record<IRoom['_id'], Serialized<IRoom>>) ?? {},\n\t\t[data],\n\t);\n\n\treturn {\n\t\toptions,\n\t\trooms,\n\t};\n};\n\nconst RoomsInput: FC<RoomsInputProps> = ({ onChange, ...props }) => {\n\tconst [filter, setFilter] = useState('');\n\tconst { rooms, options } = useRoomsAutoComplete(useDebouncedValue(filter, 1000));\n\n\tconst onClickSelected = useCallback(\n\t\t(e) => {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\n\t\t\tonChange(rooms[e.currentTarget.value], 'remove');\n\t\t},\n\t\t[onChange, rooms],\n\t);\n\n\tconst handleChange = useCallback<AutoCompleteProps['onChange']>(\n\t\t(value, action: 'remove' | undefined) => {\n\t\t\tonChange(rooms[value as string], action);\n\t\t},\n\t\t[onChange, rooms],\n\t);\n\n\tconst renderSelected = useCallback<FC<{ value?: IRoom[] }>>(\n\t\t({ value: selected }) => (\n\t\t\t<>\n\t\t\t\t{selected?.map((room) => (\n\t\t\t\t\t<Chip key={room._id} height='x20' value={room._id} onClick={onClickSelected} mie='x4'>\n\t\t\t\t\t\t<Icon name={room.t === 'c' ? 'hash' : 'hashtag-lock'} size='x12' />\n\t\t\t\t\t\t<Box is='span' margin='none' mis='x4'>\n\t\t\t\t\t\t\t{room.name}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Chip>\n\t\t\t\t))}\n\t\t\t</>\n\t\t),\n\t\t[onClickSelected],\n\t);\n\n\tconst renderItem = useCallback<FC<{ value: IRoom['_id'] }>>(\n\t\t({ value: rid, ...props }) => (\n\t\t\t<Option key={rooms[rid]._id} {...props} avatar={<RoomAvatar room={rooms[rid]} size={Options.AvatarSize} />} />\n\t\t),\n\t\t[rooms],\n\t);\n\n\treturn (\n\t\t<AutoComplete\n\t\t\t{...props}\n\t\t\tfilter={filter}\n\t\t\toptions={options}\n\t\t\trenderSelected={renderSelected}\n\t\t\trenderItem={renderItem}\n\t\t\tsetFilter={setFilter}\n\t\t\tonChange={handleChange}\n\t\t/>\n\t);\n};\n\nexport default memo(RoomsInput);\n"]}