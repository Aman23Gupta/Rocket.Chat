{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/UserInfo/UserWebRTC/UserWebRTCButtons.tsx"],"names":[],"mappings":";;;;;;;;AAAA,YAAS,WAAT,EAAiB,IAAjB;AAA4B,MAAM,KAAN,CAAQ,uBAAR,EAAc;AAAuB,QAAC;AAAA;AAAA,GAAxB;AAAwB;AAAA;AAAA,GAAxB;AAAwB;AAAA;AAAA;AAAxB,CAAd,EAAsC,CAAtC;AAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMlE,IAAM,iBAAiB,GAAG,gBAAiE;AAAA,MAA9D,UAA8D,QAA9D,UAA8D;AAC1F,MAAM,CAAC,GAAG,cAAc,EAAxB;AAEA,MACC,cADD,GAUI,UAVJ,CACC,cADD;AAAA,MAEC,oBAFD,GAUI,UAVJ,CAEC,oBAFD;AAAA,MAGC,iBAHD,GAUI,UAVJ,CAGC,iBAHD;AAAA,MAIC,aAJD,GAUI,UAVJ,CAIC,aAJD;AAAA,MAKC,WALD,GAUI,UAVJ,CAKC,WALD;AAAA,MAMC,WAND,GAUI,UAVJ,CAMC,WAND;AAAA,MAOC,YAPD,GAUI,UAVJ,CAOC,YAPD;AAAA,MAQC,YARD,GAUI,UAVJ,CAQC,YARD;AAAA,MASC,cATD,GAUI,UAVJ,CASC,cATD;AAYA,sBACC,oBAAC,WAAD;AAAa,SAAK,EAAC;AAAnB,kBACC,oBAAC,MAAD;AAAQ,WAAO,MAAf;AAAgB,UAAM,MAAtB;AAAuB,WAAO,EAAE,cAAhC;AAAgD,SAAK,EAAE,CAAC,CAAC,WAAD;AAAxD,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,KAAX;AAAiB,QAAI,EAAC;AAAtB,IADD,CADD,eAKC,oBAAC,MAAD;AAAQ,WAAO,EAAE,WAAjB;AAA8B,SAAK,EAAE,YAAY,GAAG,CAAC,CAAC,MAAD,CAAJ,GAAe,CAAC,CAAC,QAAD;AAAjE,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,KAAX;AAAiB,QAAI,QAAK,YAAY,GAAG,KAAH,GAAW,SAA5B;AAArB,IADD,CALD,eASC,oBAAC,MAAD;AAAQ,WAAO,EAAE,WAAjB;AAA8B,SAAK,EAAE,YAAY,GAAG,CAAC,CAAC,YAAD,CAAJ,GAAqB,CAAC,CAAC,YAAD;AAAvE,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,KAAX;AAAiB,QAAI,QAAK,YAAY,GAAG,KAAH,GAAW,SAA5B;AAArB,IADD,CATD,EAaE,oBAAoB,iBACpB,oBAAC,MAAD;AAAQ,WAAO,EAAE,iBAAjB;AAAoC,SAAK,EAAE,CAAC,CAAC,cAAD;AAA5C,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,KAAX;AAAiB,QAAI,EAAC;AAAtB,IADD,CAdF,eAmBC,oBAAC,MAAD;AAAQ,WAAO,EAAE,aAAjB;AAAgC,SAAK,EAAE,cAAc,GAAG,CAAC,CAAC,UAAD,CAAJ,GAAmB,CAAC,CAAC,QAAD;AAAzE,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,KAAX;AAAiB,QAAI,QAAK,cAAc,GAAG,gBAAH,GAAsB,cAAzC;AAArB,IADD,CAnBD,CADD;AAyBA,CAxCD;;AANA,OAAO,aAAP,CAgDe,iBAhDf,E","file":"dynamic/client/views/room/contextualBar/UserInfo/UserWebRTC/UserWebRTCButtons.tsx","sourcesContent":["import { Button, ButtonGroup, Icon } from '@rocket.chat/fuselage';\nimport React, { ReactElement } from 'react';\n\nimport { useTranslation } from '../../../../../contexts/TranslationContext';\nimport { useWebRTCProps } from '../../../hooks/useWebRTC';\n\nconst UserWebRTCButtons = ({ webRTCData }: { webRTCData: useWebRTCProps }): ReactElement => {\n\tconst t = useTranslation();\n\n\tconst {\n\t\thandleStopCall,\n\t\tscreenShareAvailable,\n\t\ttoggleScreenShare,\n\t\ttoggleOverlay,\n\t\ttoggleVideo,\n\t\ttoggleAudio,\n\t\taudioEnabled,\n\t\tvideoEnabled,\n\t\toverlayEnabled,\n\t} = webRTCData;\n\n\treturn (\n\t\t<ButtonGroup align='center'>\n\t\t\t<Button primary danger onClick={handleStopCall} title={t('Stop_call')}>\n\t\t\t\t<Icon size='x20' name='phone-off' />\n\t\t\t</Button>\n\n\t\t\t<Button onClick={toggleAudio} title={audioEnabled ? t('Mute') : t('Unmute')}>\n\t\t\t\t<Icon size='x20' name={`${audioEnabled ? 'mic' : 'mic-off'}`} />\n\t\t\t</Button>\n\n\t\t\t<Button onClick={toggleVideo} title={videoEnabled ? t('Hide_video') : t('Show_video')}>\n\t\t\t\t<Icon size='x20' name={`${videoEnabled ? 'eye' : 'eye-off'}`} />\n\t\t\t</Button>\n\n\t\t\t{screenShareAvailable && (\n\t\t\t\t<Button onClick={toggleScreenShare} title={t('Share_screen')}>\n\t\t\t\t\t<Icon size='x20' name='desktop' />\n\t\t\t\t</Button>\n\t\t\t)}\n\n\t\t\t<Button onClick={toggleOverlay} title={overlayEnabled ? t('Collapse') : t('Expand')}>\n\t\t\t\t<Icon size='x20' name={`${overlayEnabled ? 'arrow-collapse' : 'arrow-expand'}`} />\n\t\t\t</Button>\n\t\t</ButtonGroup>\n\t);\n};\n\nexport default UserWebRTCButtons;\n"]}