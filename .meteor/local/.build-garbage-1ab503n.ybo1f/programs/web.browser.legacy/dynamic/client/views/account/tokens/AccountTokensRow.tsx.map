{"version":3,"sources":["meteor://ðŸ’»app/client/views/account/tokens/AccountTokensRow.tsx"],"names":[],"mappings":";;;;;;;;AAAA,YAAS,WAAT,EAAiB,IAAjB,EAA4B,KAA5B;AAAkC,MAAE,CAAK,IAAP,CAAS,uBAAT,EAAe;AAAA,QAAwB;AAAA;AAAA,GAAxB;AAAwB;AAAA;AAAA,GAAxB;AAAwB;AAAA;AAAA,GAAxB;AAAwB;AAAA;AAAA;AAAxB,CAAf,EAAuC,CAAvC;AAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBzE,IAAM,gBAAgB,GAA8B,gBAQ/C;AAAA,MAPJ,eAOI,QAPJ,eAOI;AAAA,MANJ,SAMI,QANJ,SAMI;AAAA,MALJ,QAKI,QALJ,QAKI;AAAA,MAJJ,aAII,QAJJ,aAII;AAAA,MAHJ,IAGI,QAHJ,IAGI;AAAA,MAFJ,YAEI,QAFJ,YAEI;AAAA,MADJ,QACI,QADJ,QACI;AACJ,MAAM,CAAC,GAAG,cAAc,EAAxB;AACA,MAAM,iBAAiB,GAAG,oBAAoB,EAA9C;AACA,MAAM,gBAAgB,GAAG,WAAW,CAAC;AAAA,WAAM,YAAY,CAAC,IAAD,CAAlB;AAAA,GAAD,EAA2B,CAAC,IAAD,EAAO,YAAP,CAA3B,CAApC;AACA,MAAM,YAAY,GAAG,WAAW,CAAC;AAAA,WAAM,QAAQ,CAAC,IAAD,CAAd;AAAA,GAAD,EAAuB,CAAC,IAAD,EAAO,QAAP,CAAvB,CAAhC;AAEA,sBACC,oBAAC,KAAD,CAAO,GAAP;AAAW,OAAG,EAAE,IAAhB;AAAsB,YAAQ,EAAE,CAAhC;AAAmC,QAAI,EAAC,MAAxC;AAA+C,UAAM,MAArD;AAAsD,qBAAe;AAArE,kBACC,oBAAC,KAAD,CAAO,IAAP;AAAY,qBAAiB,MAA7B;AAA8B,SAAK,EAAC,SAApC;AAA8C,aAAS,EAAC;AAAxD,KACE,IADF,CADD,EAIE,QAAQ,iBAAI,oBAAC,KAAD,CAAO,IAAP;AAAY,qBAAiB;AAA7B,KAA+B,iBAAiB,CAAC,SAAD,CAAhD,CAJd,eAKC,oBAAC,KAAD,CAAO,IAAP;AAAY,qBAAiB;AAA7B,YAAkC,aAAlC,CALD,eAMC,oBAAC,KAAD,CAAO,IAAP;AAAY,qBAAiB;AAA7B,KAA+B,eAAe,GAAG,CAAC,CAAC,QAAD,CAAJ,GAAiB,CAAC,CAAC,SAAD,CAAhE,CAND,eAOC,oBAAC,KAAD,CAAO,IAAP;AAAY,qBAAiB;AAA7B,kBACC,oBAAC,WAAD,qBACC,oBAAC,MAAD;AAAQ,WAAO,EAAE,gBAAjB;AAAmC,SAAK;AAAxC,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,SAAX;AAAqB,QAAI,EAAC;AAA1B,IADD,CADD,eAIC,oBAAC,MAAD;AAAQ,WAAO,EAAE,YAAjB;AAA+B,SAAK;AAApC,kBACC,oBAAC,IAAD;AAAM,QAAI,EAAC,OAAX;AAAmB,QAAI,EAAC;AAAxB,IADD,CAJD,CADD,CAPD,CADD;AAoBA,CAlCD;;AAhBA,OAAO,aAAP,CAoDe,gBApDf,E","file":"dynamic/client/views/account/tokens/AccountTokensRow.tsx","sourcesContent":["import { Button, ButtonGroup, Icon, Table } from '@rocket.chat/fuselage';\nimport React, { useCallback, FC } from 'react';\n\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { useFormatDateAndTime } from '../../../hooks/useFormatDateAndTime';\n\ntype AccountTokensRowProps = {\n\tbypassTwoFactor: unknown;\n\tcreatedAt: unknown;\n\tisMedium: boolean;\n\tlastTokenPart: string;\n\tname: string;\n\tonRegenerate: (name: string) => void;\n\tonRemove: (name: string) => void;\n};\n\nconst AccountTokensRow: FC<AccountTokensRowProps> = ({\n\tbypassTwoFactor,\n\tcreatedAt,\n\tisMedium,\n\tlastTokenPart,\n\tname,\n\tonRegenerate,\n\tonRemove,\n}) => {\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst handleRegenerate = useCallback(() => onRegenerate(name), [name, onRegenerate]);\n\tconst handleRemove = useCallback(() => onRemove(name), [name, onRemove]);\n\n\treturn (\n\t\t<Table.Row key={name} tabIndex={0} role='link' action qa-token-name={name}>\n\t\t\t<Table.Cell withTruncatedText color='default' fontScale='p2m'>\n\t\t\t\t{name}\n\t\t\t</Table.Cell>\n\t\t\t{isMedium && <Table.Cell withTruncatedText>{formatDateAndTime(createdAt)}</Table.Cell>}\n\t\t\t<Table.Cell withTruncatedText>...{lastTokenPart}</Table.Cell>\n\t\t\t<Table.Cell withTruncatedText>{bypassTwoFactor ? t('Ignore') : t('Require')}</Table.Cell>\n\t\t\t<Table.Cell withTruncatedText>\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<Button onClick={handleRegenerate} small>\n\t\t\t\t\t\t<Icon name='refresh' size='x16' />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={handleRemove} small>\n\t\t\t\t\t\t<Icon name='trash' size='x16' />\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonGroup>\n\t\t\t</Table.Cell>\n\t\t</Table.Row>\n\t);\n};\n\nexport default AccountTokensRow;\n"]}