{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx"],"names":[],"mappings":"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","file":"dynamic/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","sourcesContent":["import { Box } from '@rocket.chat/fuselage';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\n\nimport { useTranslation } from '../../../../../../contexts/TranslationContext';\nimport { SectionStatus } from '../Section';\nimport { DNSRecordItem } from './DNSRecordItem';\nimport { DNSText } from './DNSText';\nimport { DNSRecord, DNSRecordName, DNSRecordType, ResolvedDNS, TXTRecordValue } from './Types';\n\nexport const DNSRecords: FC<{\n\tfederationSubdomain: string;\n\trocketChatProtocol: string;\n\tfederationPublicKey: string;\n\trocketChatDomain: string;\n\trocketChatPort: string;\n\tresolvedEntries: ResolvedDNS;\n\tlegacy?: boolean;\n}> = ({ federationSubdomain, rocketChatProtocol, federationPublicKey, rocketChatDomain, rocketChatPort, resolvedEntries, legacy }) => {\n\tconst t = useTranslation();\n\n\tfunction buildDNSRecord(\n\t\ttype: DNSRecordType,\n\t\tname: DNSRecordName | TXTRecordValue,\n\t\texpectedValue: string,\n\t\toptions: {\n\t\t\trootLevelEntry: boolean;\n\t\t\tlongValueTitle?: string;\n\t\t\ttitle?: string;\n\t\t} = {\n\t\t\trootLevelEntry: false,\n\t\t},\n\t): DNSRecord {\n\t\tconst { rootLevelEntry, longValueTitle } = options || {};\n\t\tlet { title } = options || {};\n\n\t\tif (type === DNSRecordType.TXT && !rootLevelEntry && !title) {\n\t\t\ttitle = 'Value';\n\t\t}\n\n\t\tconst dnsRecord: DNSRecord = {\n\t\t\tstatus: SectionStatus.UNKNOWN,\n\t\t\ttitle: title || _.capitalize(name.toString()),\n\t\t\texpectedValue,\n\t\t};\n\n\t\tif (rootLevelEntry) {\n\t\t\tdnsRecord.value = dnsRecord.expectedValue;\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\tconst value = resolvedEntries[type][name as DNSRecordName];\n\n\t\t\t\tif (value) {\n\t\t\t\t\tdnsRecord.value = value.toString();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\tif (!rootLevelEntry) {\n\t\t\t\t\tdnsRecord.value = resolvedEntries[type][name as TXTRecordValue];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Check the status\n\n\t\t// If this is a root level entry, it will always fail if we can't find a resolved entry\n\t\tif (rootLevelEntry) {\n\t\t\tswitch (type) {\n\t\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\t\tdnsRecord.status = Object.keys(resolvedEntries[type]).length > 0 ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\t\tdnsRecord.status = resolvedEntries[type][name as TXTRecordValue] ? SectionStatus.SUCCESS : SectionStatus.UNKNOWN;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the entry is not failed, check the value\n\t\tif (dnsRecord.status !== SectionStatus.FAILED) {\n\t\t\tdnsRecord.status = dnsRecord.value === expectedValue ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t}\n\n\t\t// If the entry has a long value, hide it\n\t\tif (longValueTitle) {\n\t\t\tdnsRecord.expectedValue = longValueTitle;\n\t\t\tdnsRecord.value = `${dnsRecord.value?.substr(0, 40)}...`;\n\t\t}\n\n\t\t// If this is a root level entry, we hide the error string\n\t\tdnsRecord.hideErrorString = rootLevelEntry;\n\n\t\treturn dnsRecord;\n\t}\n\n\tconst srvDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.SERVICE, '_rocketchat', {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PROTOCOL, legacy ? '_tcp' : `_${rocketChatProtocol}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.NAME, federationSubdomain, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TARGET, rocketChatDomain),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PORT, rocketChatPort),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.WEIGHT, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PRIORITY, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TTL, '1', {\n\t\t\trootLevelEntry: true,\n\t\t\ttitle: 'TTL',\n\t\t}),\n\t];\n\n\tconst txtDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.TXT, DNSRecordName.HOST, `rocketchat-public-key${federationSubdomain ? `.${federationSubdomain}` : ''}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PUBLIC_KEY, federationPublicKey, {\n\t\t\trootLevelEntry: false,\n\t\t\tlongValueTitle: '<my-public-key>',\n\t\t}),\n\t];\n\n\tlet legacyTxtDNSRecords: DNSRecord[] = [];\n\n\tif (legacy) {\n\t\tlegacyTxtDNSRecords = [\n\t\t\tbuildDNSRecord(\n\t\t\t\tDNSRecordType.TXT,\n\t\t\t\tDNSRecordName.PROTOCOL,\n\t\t\t\t`rocketchat-tcp-protocol${federationSubdomain ? `.${federationSubdomain}` : ''}`,\n\t\t\t\t{\n\t\t\t\t\trootLevelEntry: true,\n\t\t\t\t},\n\t\t\t),\n\t\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PROTOCOL, rocketChatProtocol),\n\t\t];\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<DNSText text={t('Federation_Must_add_records')} />\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_SRV_records_200')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{srvDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_Public_key_TXT_record')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{txtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t{!legacy && (\n\t\t\t\t<Box mbs='x16' p='x16' bg='disabled' fontSize='x12'>\n\t\t\t\t\t<Box fontWeight='c2'>{t('Federation_HTTP_instead_HTTPS')}</Box>\n\t\t\t\t\t{t('Federation_HTTP_instead_HTTPS_details')}\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t\t{legacy && (\n\t\t\t\t<Box mbs='x16'>\n\t\t\t\t\t<DNSText text={t('Federation_Protocol_TXT_record')} />\n\t\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t\t{legacyTxtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t</>\n\t);\n};\n"]}