{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/apps/lib/getManifestFromZippedApp.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAoB,MAAS,CAAE,IAAX,CAAW,4BAAX,EAA0B;AAAA;AAAA;AAAA;AAAA,CAA1B,EAA0B,CAA1B;AAApB,OAAO,MAAP,CAAS;AAAA,0BAA4B,cAAS;AAAA;AAAA;AAArC,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK9C,SAAe,gBAAf,CAAgC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQ,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACtC,kBAAM,UAAU,GAAG,IAAI,UAAJ,EAAnB;;AACA,wBAAU,CAAC,MAAX,GAAoB,UAAC,CAAD;AAAA,uBAAa,OAAO,CAAC,IAAI,UAAJ,CAAgB,CAAC,CAAC,MAAF,CAAiB,MAAjC,CAAD,CAApB;AAAA,eAApB;;AACA,wBAAU,CAAC,OAAX,GAAqB,UAAC,CAAD;AAAA,uBAAa,MAAM,CAAC,CAAD,CAAnB;AAAA,eAArB;;AACA,wBAAU,CAAC,iBAAX,CAA6B,IAA7B;AACA,aALM,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AASA,SAAS,cAAT,CAAwB,eAAxB,EAAmD;AAClD,SAAO,SAAS,CAAC,eAAD,CAAhB;AACA;;AAED,SAAS,cAAT,CAAwB,iBAAxB,EAA2D;AAC1D,MAAI,CAAC,iBAAiB,CAAC,UAAD,CAAtB,EAAoC;AACnC,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACA;;AAED,MAAI;AACH,WAAO,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,iBAAiB,CAAC,UAAD,CAAlB,CAApB,CAAP;AACA,GAFD,CAEE,OAAO,CAAP,EAAU;AACX,UAAM,IAAI,KAAJ,gCAAuC,CAAC,CAAC,OAAzC,CAAN;AACA;AACD;;AAED,SAAe,cAAf,CAA8B,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEM,SAAS,YAAY,IAF3B;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAGqB,gBAAgB,CAAC,SAAD,CAHrC;;AAAA;AAGG,qBAHH;;AAAA;AAAA,8CAMS,cAAc,CAAC,SAAD,CANvB;;AAAA;AAAA;AAAA;AAQE,mBAAO,CAAC,KAAR;AARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAaO,SAAe,wBAAf,CAAwC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACuB,cAAc,CAAC,SAAD,CADrC;;AAAA;AACA,0BADA;AAAA,8CAEC,cAAc,CAAC,cAAD,CAFf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,C","file":"dynamic/client/views/admin/apps/lib/getManifestFromZippedApp.ts","sourcesContent":["import { unzipSync, strFromU8 } from 'fflate';\n\ntype Uint8ArrayObject = { [fileName: string]: Uint8Array };\ntype AppManifestSchema = { [key: string]: string };\n\nasync function fileToUint8Array(file: File): Promise<Uint8Array> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = (e): void => resolve(new Uint8Array((e.target as any).result as Uint8Array));\n\t\tfileReader.onerror = (e): void => reject(e);\n\t\tfileReader.readAsArrayBuffer(file);\n\t});\n}\n\nfunction unzipAppBuffer(zippedAppBuffer: Uint8Array): Uint8ArrayObject {\n\treturn unzipSync(zippedAppBuffer);\n}\n\nfunction getAppManifest(unzippedAppBuffer: Uint8ArrayObject): AppManifestSchema {\n\tif (!unzippedAppBuffer['app.json']) {\n\t\tthrow new Error('No app.json file found in the zip');\n\t}\n\n\ttry {\n\t\treturn JSON.parse(strFromU8(unzippedAppBuffer['app.json']));\n\t} catch (e) {\n\t\tthrow new Error(`Failed to parse app.json: ${e.message}`);\n\t}\n}\n\nasync function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\n\ttry {\n\t\tif (zippedApp instanceof File) {\n\t\t\tzippedApp = await fileToUint8Array(zippedApp);\n\t\t}\n\n\t\treturn unzipAppBuffer(zippedApp);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\tthrow e;\n\t}\n}\n\nexport async function getManifestFromZippedApp(zippedApp: File): Promise<AppManifestSchema> {\n\tconst unzippedBuffer = await unzipZippedApp(zippedApp);\n\treturn getAppManifest(unzippedBuffer);\n}\n"]}