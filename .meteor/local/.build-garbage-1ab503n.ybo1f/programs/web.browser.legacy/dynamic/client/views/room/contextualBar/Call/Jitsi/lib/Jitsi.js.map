{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/Call/Jitsi/lib/Jitsi.js"],"names":["_slicedToArray","module","link","default","v","export","JitsiMeetExternalAPI","postis","MIN_WIDTH","MIN_HEIGHT","id","commands","displayName","toggleAudio","toggleVideo","toggleFilmStrip","toggleChat","toggleContactList","toggleShareScreen","events","incomingMessage","outgoingMessage","displayNameChange","participantJoined","participantLeft","videoConferenceJoined","videoConferenceLeft","sendMessage","object","send","changeEventStatus","event","status","console","error","method","params","type","name","value","domain","room_name","width","height","parentNode","configOverwrite","interfaceConfigOverwrite","noSsl","token","scriptTag","document","scripts","length","iframeHolder","appendChild","createElement","style","frameName","url","key","hasOwnProperty","frame","src","setAttribute","window","contentWindow","scope","eventHandlers","prototype","executeCommand","argumentsList","argumentsArray","executeCommands","Object","entries","forEach","addEventListeners","addEventListener","listener","listen","data","call","removeEventListener","removeEventListeners","i","dispose","destroy","getElementById","self","setTimeout","removeChild"],"mappings":"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","file":"dynamic/client/views/room/contextualBar/Call/Jitsi/lib/Jitsi.js","sourcesContent":["/**\n * Implements API class that embeds Jitsi Meet in external applications.\n */\n\nimport postis from 'postis';\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_WIDTH = 200;\n// var MIN_WIDTH = 790;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_HEIGHT = 300;\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n\tdisplayName: 'display-name',\n\ttoggleAudio: 'toggle-audio',\n\ttoggleVideo: 'toggle-video',\n\ttoggleFilmStrip: 'toggle-film-strip',\n\ttoggleChat: 'toggle-chat',\n\ttoggleContactList: 'toggle-contact-list',\n\ttoggleShareScreen: 'toggle-share-screen',\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n\tincomingMessage: 'incoming-message',\n\toutgoingMessage: 'outgoing-message',\n\tdisplayNameChange: 'display-name-change',\n\tparticipantJoined: 'participant-joined',\n\tparticipantLeft: 'participant-left',\n\tvideoConferenceJoined: 'video-conference-joined',\n\tvideoConferenceLeft: 'video-conference-left',\n};\n\n/**\n * Sends the passed object to Jitsi Meet\n * @param postis {Postis object} the postis instance that is going to be used\n * to send the message\n * @param object the object to be sent\n * - method {sting}\n * - params {object}\n */\nfunction sendMessage(postis, object) {\n\tpostis.send(object);\n}\n\n/**\n * Sends message for event enable/disable status change.\n * @param postis {Postis object} the postis instance that is going to be used.\n * @param event {string} the name of the event\n * @param status {boolean} true - enabled; false - disabled;\n */\nfunction changeEventStatus(postis, event, status) {\n\tif (!(event in events)) {\n\t\tconsole.error('Not supported event name.');\n\t\treturn;\n\t}\n\tsendMessage(postis, {\n\t\tmethod: 'jitsiSystemMessage',\n\t\tparams: { type: 'eventStatus', name: events[event], value: status },\n\t});\n}\n\n/**\n * Constructs new API instance. Creates iframe element that loads\n * Jitsi Meet.\n * @param domain the domain name of the server that hosts the conference\n * @param room_name the name of the room to join\n * @param width width of the iframe\n * @param height height of the iframe\n * @param parent_node the node that will contain the iframe\n * @param filmStripOnly if the value is true only the small videos will be\n * visible.\n * @param noSsl if the value is true https won't be used\n * @param token if you need token authentication, then pass the token\n * @constructor\n */\nexport function JitsiMeetExternalAPI(\n\tdomain,\n\troom_name,\n\twidth,\n\theight,\n\tparentNode,\n\tconfigOverwrite,\n\tinterfaceConfigOverwrite,\n\tnoSsl,\n\ttoken,\n) {\n\tif (!width || width < MIN_WIDTH) {\n\t\twidth = MIN_WIDTH;\n\t}\n\tif (!height || height < MIN_HEIGHT) {\n\t\theight = MIN_HEIGHT;\n\t}\n\n\tthis.parentNode = null;\n\tif (parentNode) {\n\t\tthis.parentNode = parentNode;\n\t} else {\n\t\tconst scriptTag = document.scripts[document.scripts.length - 1];\n\t\tthis.parentNode = scriptTag.parentNode;\n\t}\n\n\tthis.iframeHolder = this.parentNode.appendChild(document.createElement('div'));\n\tthis.iframeHolder.id = `jitsiConference${id}`;\n\tif (width) {\n\t\tthis.iframeHolder.style.width = `${width}px`;\n\t}\n\tif (height) {\n\t\tthis.iframeHolder.style.height = `${height}px`;\n\t}\n\tthis.frameName = `jitsiConferenceFrame${id}`;\n\tthis.url = `${noSsl ? 'http' : 'https'}://${domain}/`;\n\tif (room_name) {\n\t\tthis.url += room_name;\n\t}\n\tif (token) {\n\t\tthis.url += `?jwt=${token}`;\n\t}\n\tthis.url += `#jitsi_meet_external_api_id=${id}`;\n\n\tlet key;\n\tif (configOverwrite) {\n\t\tfor (key in configOverwrite) {\n\t\t\tif (!configOverwrite.hasOwnProperty(key) || typeof key !== 'string') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.url += `&config.${key}=${configOverwrite[key]}`;\n\t\t}\n\t}\n\n\tif (interfaceConfigOverwrite) {\n\t\tfor (key in interfaceConfigOverwrite) {\n\t\t\tif (!interfaceConfigOverwrite.hasOwnProperty(key) || typeof key !== 'string') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.url += `&interfaceConfig.${key}=${interfaceConfigOverwrite[key]}`;\n\t\t}\n\t}\n\n\tthis.frame = document.createElement('iframe');\n\tthis.frame.src = this.url;\n\tthis.frame.name = this.frameName;\n\tthis.frame.id = this.frameName;\n\tthis.frame.width = '100%';\n\tthis.frame.height = '100%';\n\tthis.frame.setAttribute('allowFullScreen', 'true');\n\tthis.frame.setAttribute('allow', 'microphone; camera');\n\tthis.frame = this.iframeHolder.appendChild(this.frame);\n\tthis.postis = postis({\n\t\twindow: this.frame.contentWindow,\n\t\tscope: `jitsi_meet_external_api_${id}`,\n\t});\n\n\tthis.eventHandlers = {};\n\n\tid++;\n}\n\n/**\n * Executes command. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio with no arguments\n * toggleVideo - mutes / unmutes video with no arguments\n * filmStrip - hides / shows the film strip with no arguments\n * If the command doesn't require any arguments the parameter should be set\n * to empty array or it may be omitted.\n * @param name the name of the command\n * @param arguments array of arguments\n */\nJitsiMeetExternalAPI.prototype.executeCommand = function (name, argumentsList) {\n\tif (!(name in commands)) {\n\t\tconsole.error('Not supported command name.');\n\t\treturn;\n\t}\n\tlet argumentsArray = argumentsList;\n\tif (!argumentsArray) {\n\t\targumentsArray = [];\n\t}\n\tsendMessage(this.postis, { method: commands[name], params: argumentsArray });\n};\n\n/**\n * Executes commands. The available commands are:\n * displayName - sets the display name of the local participant to the value\n * passed in the arguments array.\n * toggleAudio - mutes / unmutes audio. no arguments\n * toggleVideo - mutes / unmutes video. no arguments\n * filmStrip - hides / shows the film strip. no arguments\n * toggleChat - hides / shows chat. no arguments.\n * toggleContactList - hides / shows contact list. no arguments.\n * toggleShareScreen - starts / stops screen sharing. no arguments.\n * @param object the object with commands to be executed. The keys of the\n * object are the commands that will be executed and the values are the\n * arguments for the command.\n */\nJitsiMeetExternalAPI.prototype.executeCommands = function (object) {\n\tObject.entries(object).forEach(([key, value]) => this.executeCommand(key, value));\n};\n\n/**\n * Adds event listeners to Meet Jitsi. The object key should be the name of\n * the event and value - the listener.\n * Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about the participant that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications about the local user\n * has successfully joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications about the local user\n * has left the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * @param object\n */\nJitsiMeetExternalAPI.prototype.addEventListeners = function (object) {\n\tObject.entries(object).forEach(([key, value]) => this.addEventListener(key, value));\n};\n\n/**\n * Adds event listeners to Meet Jitsi. Currently we support the following\n * events:\n * incomingMessage - receives event notifications about incoming\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"from\": from,//JID of the user that sent the message\n *  \"nick\": nick,//the nickname of the user that sent the message\n *  \"message\": txt//the text of the message\n * }}\n * outgoingMessage - receives event notifications about outgoing\n * messages. The listener will receive object with the following structure:\n * {{\n *  \"message\": txt//the text of the message\n * }}\n * displayNameChanged - receives event notifications about display name\n * change. The listener will receive object with the following structure:\n * {{\n * jid: jid,//the JID of the participant that changed his display name\n * displayname: displayName //the new display name\n * }}\n * participantJoined - receives event notifications about new participant.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * participantLeft - receives event notifications about participant the that\n * left the room.\n * The listener will receive object with the following structure:\n * {{\n * jid: jid //the jid of the participant\n * }}\n * video-conference-joined - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * video-conference-left - receives event notifications fired when the local\n * user has joined the video conference.\n * The listener will receive object with the following structure:\n * {{\n * roomName: room //the room name of the conference\n * }}\n * @param event the name of the event\n * @param listener the listener\n */\nJitsiMeetExternalAPI.prototype.addEventListener = function (event, listener) {\n\tif (!(event in events)) {\n\t\tconsole.error('Not supported event name.');\n\t\treturn;\n\t}\n\t// We cannot remove listeners from postis that's why we are handling the\n\t// callback that way.\n\tif (!(event in this.eventHandlers)) {\n\t\tthis.postis.listen(events[event], (data) => {\n\t\t\tif (event in this.eventHandlers && typeof this.eventHandlers[event] === 'function') {\n\t\t\t\tthis.eventHandlers[event].call(null, data);\n\t\t\t}\n\t\t});\n\t}\n\tthis.eventHandlers[event] = listener;\n\tchangeEventStatus(this.postis, event, true);\n};\n\n/**\n * Removes event listener.\n * @param event the name of the event.\n */\nJitsiMeetExternalAPI.prototype.removeEventListener = function (event) {\n\tif (!(event in this.eventHandlers)) {\n\t\tconsole.error(`The event ${event} is not registered.`);\n\t\treturn;\n\t}\n\tdelete this.eventHandlers[event];\n\tchangeEventStatus(this.postis, event, false);\n};\n\n/**\n * Removes event listeners.\n * @param events array with the names of the events.\n */\nJitsiMeetExternalAPI.prototype.removeEventListeners = function (events) {\n\tfor (let i = 0; i < events.length; i++) {\n\t\tthis.removeEventListener(events[i]);\n\t}\n};\n\n/**\n * Removes the listeners and removes the Jitsi Meet frame.\n */\nJitsiMeetExternalAPI.prototype.dispose = function () {\n\tthis.postis.destroy();\n\tconst frame = document.getElementById(this.frameName);\n\tif (frame) {\n\t\tframe.src = 'about:blank';\n\t}\n\tconst self = this;\n\twindow.setTimeout(() => {\n\t\tself.iframeHolder.removeChild(self.frame);\n\t\tself.iframeHolder.parentNode.removeChild(self.iframeHolder);\n\t}, 10);\n};\n"]}