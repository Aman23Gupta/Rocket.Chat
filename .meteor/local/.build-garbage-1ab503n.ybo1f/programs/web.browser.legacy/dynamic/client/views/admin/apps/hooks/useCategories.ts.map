{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/apps/hooks/useCategories.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAsB,OAAS,IAAT,CAAW,4BAAX,EAA2C;AAAC;AAAA;AAAA;AAAD,CAA3C,EAA4C,CAA5C;;AAA4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlE,OAAO,MAAP,CAAS;AAAA,eAAa,cAAW;AAAO,WAAE,aAAF;AAAkB;AAAjD,CAAT;AAA0D,IAAQ,WAAR,EAAQ,SAAR,EAAQ,OAAR,EAAQ,QAAR;AAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiB3D,IAAM,aAAa,GAAG,YAKzB;AACH,MAAM,CAAC,GAAG,cAAc,EAAxB;;AACA,kBAAoC,QAAQ,CAAsC,EAAtC,CAA5C;AAAA;AAAA,MAAO,UAAP;AAAA,MAAmB,aAAnB;;AAEA,MAAM,eAAe,GAAG,WAAW;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAEF,IAAI,CAAC,aAAL,EAFE;;AAAA;AAE5B,iCAF4B;AAI5B,gCAJ4B,GAIT,iBAAiB,CAAC,GAAlB,CAAsB,UAAC,eAAD;AAAA,yBAAgC;AAC9E,sBAAE,EAAE,eAAe,CAAC,EAD0D;AAE9E,yBAAK,EAAE,eAAe,CAAC,KAFuD;AAG9E,2BAAO,EAAE;AAHqE,mBAAhC;AAAA,iBAAtB,CAJS;AAUlC,6BAAa,CAAC,CACb;AACC,uBAAK,EAAE,CACN;AACC,sBAAE,EAAE,KADL;AAEC,yBAAK,EAAE,CAAC,CAAC,gBAAD;AAFT,mBADM;AADR,iBADa,EASb;AACC,uBAAK,EAAE,CAAC,CAAC,oBAAD,CADT;AAEC,uBAAK,EAAE;AAFR,iBATa,CAAD,CAAb;AAVkC;AAAA;;AAAA;AAAA;AAAA;AAyBlC,8BAAc,aAAd;;AAzBkC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAD;AAAA,OA2BhC,CAAC,CAAD,CA3BgC,CAAnC;AA6BA,WAAS,CAAC,YAAK;AACd,QAAM,sBAAsB;AAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACxB,eAAe,EADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAH;AAAA,OAA5B;;AAIA,0BAAsB;AACtB,GANQ,EAMN,CAAC,eAAD,CANM,CAAT;AAQA,MAAM,UAAU,GAAG,iBAAiB,CAAC,aAAD,CAApC;AACA,MAAM,cAAc,GAAG,mBAAmB,CAAC,UAAD,CAA1C;AACA,MAAM,YAAY,GAAG,mBAAmB,CAAC,UAAD,CAAnB,CAAgC,MAArD;AAEA,MAAM,kBAAkB,GAAG,OAAO,CACjC;AAAA,WAAM,cAAc,CAAC,MAAf,CAAsB,UAAC,QAAD;AAAA,aAAc,OAAO,CAAC,QAAQ,CAAC,OAAV,CAArB;AAAA,KAAtB,CAAN;AAAA,GADiC,EAEjC,CAAC,cAAD,CAFiC,CAAlC;AAIA,SAAO,CAAC,UAAD,EAAa,kBAAb,EAAiC,YAAY,KAAK,kBAAkB,CAAC,MAApC,GAA6C,EAA7C,GAAkD,kBAAnF,EAAuG,UAAvG,CAAP;AACA,CAvDM,C","file":"dynamic/client/views/admin/apps/hooks/useCategories.ts","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Apps } from '../../../../../app/apps/client/orchestrator';\nimport { useTranslation } from '../../../../contexts/TranslationContext';\nimport { CategoryDropdownItem, CategoryDropDownListProps } from '../definitions/CategoryDropdownDefinitions';\nimport { handleAPIError } from '../helpers';\nimport { useCategoryFlatList } from './useCategoryFlatList';\nimport { useCategoryToggle } from './useCategoryToggle';\n\ntype Category = {\n\tid: string;\n\ttitle: string;\n\tdescription: string;\n\tcreatedDate: string;\n\tmodifiedDate: string;\n};\n\nexport const useCategories = (): [\n\tCategoryDropDownListProps['groups'],\n\t(CategoryDropdownItem & { checked: true })[],\n\t(CategoryDropdownItem & { checked: true })[],\n\tCategoryDropDownListProps['onSelected'],\n] => {\n\tconst t = useTranslation();\n\tconst [categories, setCategories] = useState<CategoryDropDownListProps['groups']>([]);\n\n\tconst fetchCategories = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst fetchedCategories = await Apps.getCategories();\n\n\t\t\tconst mappedCategories = fetchedCategories.map((currentCategory: Category) => ({\n\t\t\t\tid: currentCategory.id,\n\t\t\t\tlabel: currentCategory.title,\n\t\t\t\tchecked: false,\n\t\t\t}));\n\n\t\t\tsetCategories([\n\t\t\t\t{\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'all',\n\t\t\t\t\t\t\tlabel: t('All_categories'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t('Filter_by_category'),\n\t\t\t\t\titems: mappedCategories,\n\t\t\t\t},\n\t\t\t]);\n\t\t} catch (e) {\n\t\t\thandleAPIError(e);\n\t\t}\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tconst fetchCategoriesWrapper = async (): Promise<void> => {\n\t\t\tawait fetchCategories();\n\t\t};\n\n\t\tfetchCategoriesWrapper();\n\t}, [fetchCategories]);\n\n\tconst onSelected = useCategoryToggle(setCategories);\n\tconst flatCategories = useCategoryFlatList(categories);\n\tconst originalSize = useCategoryFlatList(categories).length;\n\n\tconst selectedCategories = useMemo(\n\t\t() => flatCategories.filter((category) => Boolean(category.checked)),\n\t\t[flatCategories],\n\t) as (CategoryDropdownItem & { checked: true })[];\n\treturn [categories, selectedCategories, originalSize === selectedCategories.length ? [] : selectedCategories, onSelected];\n};\n"]}