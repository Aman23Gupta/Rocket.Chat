{"version":3,"sources":["meteor://ðŸ’»app/client/views/hooks/useMonitorsList.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAsB,MAAQ,KAAR,CAAU,4BAAV,EAAwB;AAAA;AAAA;AAAA;AAAA,CAAxB,EAAwB,CAAxB;;AAAwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9C,OAAO,MAAP,CAAS;AAAA,iBAAqB,cAAQ;AAAA,WAAQ,eAAR;AAAQ;AAArC,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYvC,IAAM,eAAe,GAAG,UAC9B,OAD8B,EAO3B;AACH,kBAAkC,QAAQ,CAAC;AAAA,WAAM,IAAI,UAAJ,EAAN;AAAA,GAAD,CAA1C;AAAA;AAAA,MAAO,SAAP;AAAA,MAAkB,YAAlB;;AACA,MAAM,MAAM,GAAG,WAAW,CAAC;AAAA,WAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAlB;AAAA,GAAD,EAA+D,EAA/D,CAA1B;AAEA,MAAM,QAAQ,GAAG,wBAAjB;AAEA,MAAM,WAAW,GAAG,WAAW,CAAC,KAAD,EAAQ,QAAR,CAA/B;AAEA,uBAAqB,CAAC,YAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,MAAM,SAAS,GAAG,WAAW;AAC5B,qBAAO,KAAP,EAAc,GAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACmC,WAAW,CAAC;AAC7C,sBAAI,EAAE,OAAO,CAAC,MAD+B;AAE7C,wBAAM,EAAE,KAFqC;AAG7C,uBAAK,EAAE,GAAG,GAAG;AAHgC,iBAAD,CAD9C;;AAAA;AAAA;AACS,wBADT,sBACS,QADT;AACmB,qBADnB,sBACmB,KADnB;AAAA,iDAOQ;AACN,uBAAK,EAAE,QAAQ,CAAC,GAAT,CAAa,UAAC,OAAD,EAAiB;AACpC,2BAAO,CAAC,UAAR,GAAqB,IAAI,IAAJ,CAAS,OAAO,CAAC,UAAjB,CAArB;AACA,2BAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,QAAxB;AACA,2BAAO,CAAC,KAAR,GAAgB;AAAE,2BAAK,EAAE,OAAO,CAAC,GAAjB;AAAsB,2BAAK,EAAE,OAAO,CAAC;AAArC,qBAAhB;AACA,2BAAO,OAAP;AACA,mBALM,CADD;AAON,2BAAS,EAAE;AAPL,iBAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAD4B;AAAA,OAkB5B,CAAC,WAAD,EAAc,OAAO,CAAC,MAAtB,CAlB4B,CAA7B;;AAqBA,8BAA4C,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAAA,MAAQ,aAAR,yBAAQ,aAAR;AAAA,MAAuB,gBAAvB,yBAAuB,gBAAvB;;AACA,SAAO;AACN,UAAM,EAAN,MADM;AAEN,aAAS,EAAT,SAFM;AAGN,iBAAa,EAAb,aAHM;AAIN,oBAAgB,EAAhB;AAJM,GAAP;AAMA,CA/CM,C","file":"dynamic/client/views/hooks/useMonitorsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { ILivechatMonitorRecord } from '../../../definition/ILivechatMonitorRecord';\nimport { useEndpoint } from '../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../lib/lists/RecordList';\n\ntype MonitorsListOptions = {\n\tfilter: string;\n};\n\nexport const useMonitorsList = (\n\toptions: MonitorsListOptions,\n): {\n\titemsList: RecordList<ILivechatMonitorRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatMonitorRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatMonitorRecord>()), []);\n\n\tconst endpoint = 'livechat/monitors.list';\n\n\tconst getMonitors = useEndpoint('GET', endpoint);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { monitors, total } = await getMonitors({\n\t\t\t\ttext: options.filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: monitors.map((members: any) => {\n\t\t\t\t\tmembers._updatedAt = new Date(members._updatedAt);\n\t\t\t\t\tmembers.label = members.username;\n\t\t\t\t\tmembers.value = { value: members._id, label: members.username };\n\t\t\t\t\treturn members;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getMonitors, options.filter],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}