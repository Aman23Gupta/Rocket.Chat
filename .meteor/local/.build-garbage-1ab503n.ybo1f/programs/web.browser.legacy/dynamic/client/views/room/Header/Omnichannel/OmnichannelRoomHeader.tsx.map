{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/Header/Omnichannel/OmnichannelRoomHeader.tsx"],"names":[],"mappings":";;;;;;;;AAAA;;AAA2B,MAAE,KAAF,CAAQ,0CAAR,EAAgB;AAAA;AAAA;AAAA;AAAA,CAAhB,EAAgB,CAAhB;;AAAgB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA3C,WAAO,OAAP;AAAoB,MAAO,CAAE,IAAT,CAAS,OAAT,EAAsB;AAAC;AAAA;AAAA,GAAD;AAAC;AAAA;AAAA;AAAD,CAAtB,EAAuB,CAAvB;AAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAc3C,IAAM,qBAAqB,GAAwB,gBAA0B;AAAA,MAAhB,UAAgB,QAAvB,KAAuB;;AAC5E,yBAAe,eAAe,EAA9B;AAAA;AAAA,MAAO,IAAP;;AACA,mBAAqB,SAAS,EAA9B;AAAA,MAAQ,QAAR,cAAQ,QAAR;;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;;AACA,yBAAsC,eAAe,CAAC,IAAD,CAArD;AAAA,MAAQ,cAAR,oBAAQ,cAAR;AAAA,MAAwB,SAAxB,oBAAwB,SAAxB;;AACA,MAAM,OAAO,GAAG,iBAAiB,EAAjC;AAEA,MAAM,KAAK,GAAG,OAAO,CACpB;AAAA,2CACI,UADJ;AAEC,WAAK,EAAE,CAAC,CAAC,CAAC,QAAF,IAAc,IAAI,KAAK,uBAAxB,kBACN,oBAAC,cAAD,CAAgB,OAAhB,QACE,QAAQ,iBAAI,oBAAC,UAAD,OADd,EAEE,IAAI,KAAK,uBAAT,iBAAoC,oBAAC,UAAD,OAFtC;AAHF,OAQK,CAAC,QAAD,IAAa;AAAE,mBAAa,eAAE,oBAAC,YAAD;AAAc,YAAI,EAAE;AAApB;AAAjB,KARlB;AAAA,GADoB,EAWpB,CAAC,QAAD,EAAW,IAAX,EAAiB,UAAjB,EAA6B,IAA7B,CAXoB,CAArB;AAaA,sBACC,oBAAC,cAAD,CAAgB,QAAhB;AACC,SAAK,EAAE,OAAO,CACb;AAAA,6CACI,OADJ;AAEC,eAAO,EAAE,IAAI,GAAJ,8BACJ,QAAQ,GACR,cAAc,CAAC,GAAf,CAAmB,UAAC,MAAD;AAAA,iBAAY,CAChC,MAAM,CAAC,EADyB,kCAG5B,MAH4B;AAI/B,kBAAM,EAAE;AAAA,qBAAe,SAAS,CAAC,MAAM,CAAC,EAAR,CAAxB;AAAA,aAJuB;AAK/B,iBAAK,EAAE,CAAC,MAAM,CAAC,KAAP,IAAgB,CAAjB,IAAsB;AALE,aAAZ;AAAA,SAAnB,CADQ,GAST,EAVK,sBAWJ,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,OAAR,CAAgB,OAAhB,EAAX,CAXI;AAFV;AAAA,KADa,EAiBb,CAAC,OAAD,EAAU,QAAV,EAAoB,cAApB,EAAoC,SAApC,CAjBa;AADf,kBAqBC,oBAAC,UAAD;AAAY,SAAK,EAAE,KAAnB;AAA0B,QAAI,EAAE;AAAhC,IArBD,CADD;AAyBA,CA7CD;;AAdA,OAAO,aAAP,CA6De,qBA7Df,E","file":"dynamic/client/views/room/Header/Omnichannel/OmnichannelRoomHeader.tsx","sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport BurgerMenu from '../../../../components/BurgerMenu';\nimport TemplateHeader from '../../../../components/Header';\nimport { useLayout } from '../../../../contexts/LayoutContext';\nimport { useCurrentRoute } from '../../../../contexts/RouterContext';\nimport { useOmnichannelRoom } from '../../contexts/RoomContext';\nimport { ToolboxActionConfig } from '../../lib/Toolbox';\nimport { ToolboxContext, useToolboxContext } from '../../lib/Toolbox/ToolboxContext';\nimport RoomHeader, { RoomHeaderProps } from '../RoomHeader';\nimport BackButton from './BackButton';\nimport QuickActions from './QuickActions';\nimport { useQuickActions } from './QuickActions/hooks/useQuickActions';\n\nconst OmnichannelRoomHeader: FC<RoomHeaderProps> = ({ slots: parentSlot }) => {\n\tconst [name] = useCurrentRoute();\n\tconst { isMobile } = useLayout();\n\tconst room = useOmnichannelRoom();\n\tconst { visibleActions, getAction } = useQuickActions(room);\n\tconst context = useToolboxContext();\n\n\tconst slots = useMemo(\n\t\t() => ({\n\t\t\t...parentSlot,\n\t\t\tstart: (!!isMobile || name === 'omnichannel-directory') && (\n\t\t\t\t<TemplateHeader.ToolBox>\n\t\t\t\t\t{isMobile && <BurgerMenu />}\n\t\t\t\t\t{name === 'omnichannel-directory' && <BackButton />}\n\t\t\t\t</TemplateHeader.ToolBox>\n\t\t\t),\n\t\t\t...(!isMobile && { insideContent: <QuickActions room={room} /> }),\n\t\t}),\n\t\t[isMobile, name, parentSlot, room],\n\t);\n\treturn (\n\t\t<ToolboxContext.Provider\n\t\t\tvalue={useMemo(\n\t\t\t\t() => ({\n\t\t\t\t\t...context,\n\t\t\t\t\tactions: new Map([\n\t\t\t\t\t\t...(isMobile\n\t\t\t\t\t\t\t? (visibleActions.map((action) => [\n\t\t\t\t\t\t\t\t\taction.id,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t...action,\n\t\t\t\t\t\t\t\t\t\taction: (): unknown => getAction(action.id),\n\t\t\t\t\t\t\t\t\t\torder: (action.order || 0) - 10,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]) as [string, ToolboxActionConfig][])\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t\t...(Array.from(context.actions.entries()) as [string, ToolboxActionConfig][]),\n\t\t\t\t\t]),\n\t\t\t\t}),\n\t\t\t\t[context, isMobile, visibleActions, getAction],\n\t\t\t)}\n\t\t>\n\t\t\t<RoomHeader slots={slots} room={room} />\n\t\t</ToolboxContext.Provider>\n\t);\n};\n\nexport default OmnichannelRoomHeader;\n"]}