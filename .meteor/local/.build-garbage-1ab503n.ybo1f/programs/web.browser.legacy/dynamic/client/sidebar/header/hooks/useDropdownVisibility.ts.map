{"version":3,"sources":["meteor://ðŸ’»app/client/sidebar/header/hooks/useDropdownVisibility.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAkB,MAAE,KAAF,CAAE,sCAAF,EAAyB;AAAA,SAA8B;AAAA;AAAA;AAA9B,CAAzB,EAAuD,CAAvD;AAAlB,OAAO,MAAP,CAAS;AAAA,uBAA0B,EAAE,YAAM;AAAA;AAA8B;AAAhE,CAAT;AAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAelE,IAAM,qBAAqB,GAAG,gBASjC;AAAA,MARH,SAQG,QARH,SAQG;AAAA,MAPH,MAOG,QAPH,MAOG;;AACH,mBAA4B,SAAS,CAAC,KAAD,CAArC;AAAA;AAAA,MAAO,SAAP;AAAA,MAAkB,MAAlB;;AAEA,iBAAe,CACd,CAAC,MAAD,EAAS,SAAT,CADc,EAEd,WAAW,CAAC;AAAA,WAAM,MAAM,CAAC,KAAD,CAAZ;AAAA,GAAD,EAAsB,CAAC,MAAD,CAAtB,CAFG,CAAf;AAKA,SAAO;AACN,aAAS,EAAT,SADM;AAEN,UAAM,EAAN;AAFM,GAAP;AAIA,CArBM,C","file":"dynamic/client/sidebar/header/hooks/useDropdownVisibility.ts","sourcesContent":["import { useToggle, useOutsideClick } from '@rocket.chat/fuselage-hooks';\nimport { RefObject, useCallback } from 'react';\n\n/**\n * useDropdownVisibility\n * is used to control the visibility of a dropdown\n * also checks if the user clicked outside the dropdown, but ignores if the click was on the anchor\n * @param {Object} props\n * @param {Object} props.reference - The reference where the dropdown will be attached to\n * @param {Object} props.target - The target, the dropdown itself\n * @returns {Object}\n * @returns {Boolean} isVisible - The visibility of the dropdown\n * @returns {Function} toggle - The function to toggle the dropdown\n */\n\nexport const useDropdownVisibility = <T extends HTMLElement>({\n\treference,\n\ttarget,\n}: {\n\treference: RefObject<T>;\n\ttarget: RefObject<T>;\n}): {\n\tisVisible: boolean;\n\ttoggle: (state?: boolean) => void;\n} => {\n\tconst [isVisible, toggle] = useToggle(false);\n\n\tuseOutsideClick(\n\t\t[target, reference],\n\t\tuseCallback(() => toggle(false), [toggle]),\n\t);\n\n\treturn {\n\t\tisVisible,\n\t\ttoggle,\n\t};\n};\n"]}