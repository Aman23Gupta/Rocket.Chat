{"version":3,"sources":["meteor://ðŸ’»app/client/providers/RouterProvider.tsx"],"names":[],"mappings":"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","file":"dynamic/client/providers/RouterProvider.tsx","sourcesContent":["import { FlowRouter } from 'meteor/kadira:flow-router';\nimport { Tracker } from 'meteor/tracker';\nimport React, { FC } from 'react';\nimport { Subscription, Unsubscribe } from 'use-subscription';\n\nimport { RouterContext, RouterContextValue } from '../contexts/RouterContext';\n\nconst createSubscription = function <T>(getValue: () => T): Subscription<T> {\n\tlet currentValue = Tracker.nonreactive(getValue);\n\treturn {\n\t\tgetCurrentValue: (): T => currentValue,\n\t\tsubscribe: (callback: () => void): Unsubscribe => {\n\t\t\tconst computation = Tracker.autorun(() => {\n\t\t\t\tcurrentValue = getValue();\n\t\t\t\tcallback();\n\t\t\t});\n\n\t\t\treturn (): void => {\n\t\t\t\tcomputation.stop();\n\t\t\t};\n\t\t},\n\t};\n};\n\nconst queryRoutePath = (\n\tname: Parameters<RouterContextValue['queryRoutePath']>[0],\n\tparameters: Parameters<RouterContextValue['queryRoutePath']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['queryRoutePath']>[2],\n): ReturnType<RouterContextValue['queryRoutePath']> => createSubscription(() => FlowRouter.path(name, parameters, queryStringParameters));\n\nconst queryRouteUrl = (\n\tname: Parameters<RouterContextValue['queryRouteUrl']>[0],\n\tparameters: Parameters<RouterContextValue['queryRouteUrl']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['queryRouteUrl']>[2],\n): ReturnType<RouterContextValue['queryRouteUrl']> => createSubscription(() => FlowRouter.url(name, parameters, queryStringParameters));\n\nconst pushRoute = (\n\tname: Parameters<RouterContextValue['pushRoute']>[0],\n\tparameters: Parameters<RouterContextValue['pushRoute']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['pushRoute']>[2],\n): ReturnType<RouterContextValue['pushRoute']> => {\n\tFlowRouter.go(name, parameters, queryStringParameters);\n};\n\nconst replaceRoute = (\n\tname: Parameters<RouterContextValue['replaceRoute']>[0],\n\tparameters: Parameters<RouterContextValue['replaceRoute']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['replaceRoute']>[2],\n): ReturnType<RouterContextValue['replaceRoute']> => {\n\tFlowRouter.withReplaceState(() => {\n\t\tFlowRouter.go(name, parameters, queryStringParameters);\n\t});\n};\n\nconst queryRouteParameter = (\n\tname: Parameters<RouterContextValue['replaceRoute']>[0],\n): ReturnType<RouterContextValue['queryRouteParameter']> => createSubscription(() => FlowRouter.getParam(name));\n\nconst queryQueryStringParameter = (\n\tname: Parameters<RouterContextValue['queryQueryStringParameter']>[0],\n): ReturnType<RouterContextValue['queryQueryStringParameter']> => createSubscription(() => FlowRouter.getQueryParam(name));\n\nconst queryCurrentRoute = (): ReturnType<RouterContextValue['queryCurrentRoute']> =>\n\tcreateSubscription(() => {\n\t\tFlowRouter.watchPathChange();\n\t\tconst { route, params, queryParams } = FlowRouter.current();\n\t\treturn [route?.name, params, queryParams, route?.group?.name];\n\t});\n\nconst contextValue = {\n\tqueryRoutePath,\n\tqueryRouteUrl,\n\tpushRoute,\n\treplaceRoute,\n\tqueryRouteParameter,\n\tqueryQueryStringParameter,\n\tqueryCurrentRoute,\n};\n\nconst RouterProvider: FC = ({ children }) => <RouterContext.Provider children={children} value={contextValue} />;\n\nexport default RouterProvider;\n"]}