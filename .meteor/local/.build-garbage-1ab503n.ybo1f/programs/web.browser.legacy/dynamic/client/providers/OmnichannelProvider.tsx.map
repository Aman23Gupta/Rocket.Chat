{"version":3,"sources":["meteor://ðŸ’»app/client/providers/OmnichannelProvider.tsx"],"names":[],"mappings":"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","file":"dynamic/client/providers/OmnichannelProvider.tsx","sourcesContent":["import React, { useState, useEffect, FC, useMemo, useCallback, memo } from 'react';\n\nimport { LivechatInquiry } from '../../app/livechat/client/collections/LivechatInquiry';\nimport { initializeLivechatInquiryStream } from '../../app/livechat/client/lib/stream/queueManager';\nimport { Notifications } from '../../app/notifications/client';\nimport { IOmnichannelAgent } from '../../definition/IOmnichannelAgent';\nimport { IRoom } from '../../definition/IRoom';\nimport { OmichannelRoutingConfig } from '../../definition/OmichannelRoutingConfig';\nimport { usePermission } from '../contexts/AuthorizationContext';\nimport { OmnichannelContext, OmnichannelContextValue } from '../contexts/OmnichannelContext';\nimport { useMethod } from '../contexts/ServerContext';\nimport { useSetting } from '../contexts/SettingsContext';\nimport { useUser } from '../contexts/UserContext';\nimport { useReactiveValue } from '../hooks/useReactiveValue';\n\nconst emptyContextValue: OmnichannelContextValue = {\n\tinquiries: { enabled: false },\n\tenabled: false,\n\tagentAvailable: false,\n\tshowOmnichannelQueueLink: false,\n};\n\nconst OmnichannelProvider: FC = ({ children }) => {\n\tconst omniChannelEnabled = useSetting('Livechat_enabled') as boolean;\n\tconst omnichannelRouting = useSetting('Livechat_Routing_Method');\n\tconst showOmnichannelQueueLink = useSetting('Livechat_show_queue_list_link') as boolean;\n\tconst omnichannelPoolMaxIncoming = useSetting('Livechat_guest_pool_max_number_incoming_livechats_displayed') as number;\n\n\tconst hasAccess = usePermission('view-l-room');\n\tconst canViewOmnichannelQueue = usePermission('view-livechat-queue');\n\n\tconst user = useUser() as IOmnichannelAgent;\n\n\tconst agentAvailable = user?.statusLivechat === 'available';\n\n\tconst getRoutingConfig = useMethod('livechat:getRoutingConfig');\n\n\tconst [routeConfig, setRouteConfig] = useState<OmichannelRoutingConfig | undefined>(undefined);\n\n\tconst accessible = hasAccess && omniChannelEnabled;\n\n\tuseEffect(() => {\n\t\tif (!accessible) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst update = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst routeConfig = await getRoutingConfig();\n\t\t\t\tsetRouteConfig(routeConfig);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\n\t\tif (omnichannelRouting || !omnichannelRouting) {\n\t\t\tupdate();\n\t\t}\n\t}, [accessible, getRoutingConfig, omnichannelRouting]);\n\n\tconst enabled = accessible && !!user && !!routeConfig;\n\tconst manuallySelected =\n\t\tenabled && canViewOmnichannelQueue && !!routeConfig && routeConfig.showQueue && !routeConfig.autoAssignAgent && agentAvailable;\n\n\tuseEffect(() => {\n\t\tif (!manuallySelected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst handleDepartmentAgentData = (): void => {\n\t\t\tinitializeLivechatInquiryStream(user?._id);\n\t\t};\n\n\t\tinitializeLivechatInquiryStream(user?._id);\n\t\tNotifications.onUser('departmentAgentData', handleDepartmentAgentData);\n\n\t\treturn (): void => {\n\t\t\tNotifications.unUser('departmentAgentData', handleDepartmentAgentData);\n\t\t};\n\t}, [manuallySelected, user?._id]);\n\n\tconst queue = useReactiveValue<IRoom[] | undefined>(\n\t\tuseCallback(() => {\n\t\t\tif (!manuallySelected) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn LivechatInquiry.find(\n\t\t\t\t{\n\t\t\t\t\tstatus: 'queued',\n\t\t\t\t\t$or: [{ defaultAgent: { $exists: false } }, { 'defaultAgent.agentId': user?._id }],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tqueueOrder: 1,\n\t\t\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\t\t\testimatedServiceTimeAt: 1,\n\t\t\t\t\t},\n\t\t\t\t\tlimit: omnichannelPoolMaxIncoming,\n\t\t\t\t},\n\t\t\t).fetch();\n\t\t}, [manuallySelected, omnichannelPoolMaxIncoming, user?._id]),\n\t);\n\n\tconst contextValue = useMemo<OmnichannelContextValue>(() => {\n\t\tif (!enabled) {\n\t\t\treturn emptyContextValue;\n\t\t}\n\n\t\tif (!manuallySelected) {\n\t\t\treturn {\n\t\t\t\t...emptyContextValue,\n\t\t\t\tenabled: true,\n\t\t\t\tagentAvailable,\n\t\t\t\trouteConfig,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t...emptyContextValue,\n\t\t\tenabled: true,\n\t\t\tagentAvailable,\n\t\t\trouteConfig,\n\t\t\tinquiries: queue\n\t\t\t\t? {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tqueue,\n\t\t\t\t  }\n\t\t\t\t: { enabled: false },\n\t\t\tshowOmnichannelQueueLink: showOmnichannelQueueLink && !!agentAvailable,\n\t\t};\n\t}, [agentAvailable, enabled, manuallySelected, queue, routeConfig, showOmnichannelQueueLink]);\n\n\treturn <OmnichannelContext.Provider children={children} value={contextValue} />;\n};\n\nexport default memo<typeof OmnichannelProvider>(OmnichannelProvider);\n"]}