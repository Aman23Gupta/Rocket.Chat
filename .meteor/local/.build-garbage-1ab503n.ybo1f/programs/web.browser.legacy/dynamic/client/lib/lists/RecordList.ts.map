{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/RecordList.ts"],"names":[],"mappings":"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","file":"dynamic/client/lib/lists/RecordList.ts","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport { AsyncStatePhase } from '../asyncState';\n\nexport type RecordListBatchChanges<T> = {\n\titems?: T[];\n\titemCount?: number;\n};\n\nexport class RecordList<T extends IRocketChatRecord> extends Emitter {\n\t#hasChanges = false;\n\n\t#index = new Map<T['_id'], T>();\n\n\t#phase: AsyncStatePhase.LOADING | AsyncStatePhase.UPDATING | AsyncStatePhase.RESOLVED = AsyncStatePhase.LOADING;\n\n\t#items: T[] | undefined = undefined;\n\n\t#itemCount: number | undefined = undefined;\n\n\tprotected filter(_item: T): boolean {\n\t\treturn true;\n\t}\n\n\tprotected compare(a: T, b: T): number {\n\t\treturn a._updatedAt.getTime() - b._updatedAt.getTime();\n\t}\n\n\tpublic get phase(): AsyncStatePhase {\n\t\treturn this.#phase;\n\t}\n\n\tpublic get items(): T[] {\n\t\tif (!this.#items) {\n\t\t\tthis.#items = Array.from(this.#index.values()).sort(this.compare);\n\t\t}\n\n\t\treturn this.#items;\n\t}\n\n\tpublic get itemCount(): number {\n\t\treturn this.#itemCount ?? this.#index.size;\n\t}\n\n\tprivate insert(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/inserted`, item);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount++;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate update(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/updated`, item);\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate delete(_id: T['_id']): void {\n\t\tthis.#index.delete(_id);\n\t\tthis.emit(`${_id}/deleted`);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount--;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate push(item: T): void {\n\t\tconst exists = this.#index.has(item._id);\n\t\tconst valid = this.filter(item);\n\n\t\tif (exists && !valid) {\n\t\t\tthis.delete(item._id);\n\t\t\treturn;\n\t\t}\n\n\t\tif (exists && valid) {\n\t\t\tthis.update(item);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exists && valid) {\n\t\t\tthis.insert(item);\n\t\t}\n\t}\n\n\t#pedingMutation: Promise<void> = Promise.resolve();\n\n\tprotected async mutate(mutation: () => void | Promise<void>): Promise<void> {\n\t\ttry {\n\t\t\tif (this.#phase === AsyncStatePhase.RESOLVED) {\n\t\t\t\tthis.#phase = AsyncStatePhase.UPDATING;\n\t\t\t\tthis.emit('mutating');\n\t\t\t}\n\n\t\t\tthis.#pedingMutation = this.#pedingMutation.then(mutation);\n\t\t\tawait this.#pedingMutation;\n\t\t} catch (error) {\n\t\t\tthis.emit('errored', error);\n\t\t} finally {\n\t\t\tconst hasChanged = this.#hasChanges;\n\t\t\tthis.#phase = AsyncStatePhase.RESOLVED;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.#items = undefined;\n\t\t\t\tthis.#hasChanges = false;\n\t\t\t}\n\t\t\tthis.emit('mutated', hasChanged);\n\t\t}\n\t}\n\n\tpublic batchHandle(getInfo: () => Promise<RecordListBatchChanges<T>>): Promise<void> {\n\t\treturn this.mutate(async () => {\n\t\t\tconst info = await getInfo();\n\n\t\t\tif (info.items) {\n\t\t\t\tfor (const item of info.items) {\n\t\t\t\t\tthis.push(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (info.itemCount) {\n\t\t\t\tthis.#itemCount = info.itemCount;\n\t\t\t\tthis.#hasChanges = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prune(matchCriteria: (item: T) => boolean): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tfor (const item of this.#index.values()) {\n\t\t\t\tif (matchCriteria(item)) {\n\t\t\t\t\tthis.delete(item._id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handle(item: T): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tthis.push(item);\n\t\t});\n\t}\n\n\tpublic remove(_id: T['_id']): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (!this.#index.has(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.delete(_id);\n\t\t});\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (this.#index.size === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#index.clear();\n\t\t\tthis.#items = undefined;\n\t\t\tthis.#itemCount = undefined;\n\t\t\tthis.#hasChanges = true;\n\t\t\tthis.emit('cleared');\n\t\t});\n\t}\n}\n"]}