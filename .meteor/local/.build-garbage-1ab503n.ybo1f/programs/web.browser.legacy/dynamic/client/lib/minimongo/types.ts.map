{"version":3,"sources":["meteor://ðŸ’»app/client/lib/minimongo/types.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAN,OAAkB;AAAA,UAyBjB;AAAA;AAAA;AAzBiB,CAAlB;AAAA,IAAkB,QAAlB;;AAAA,WAAkB,QAAlB,EAA0B;AACzB;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBD,EAAkB,QAAQ,sBAAR,QAAQ,oBAA1B,E","file":"dynamic/client/lib/minimongo/types.ts","sourcesContent":["export const enum BSONType {\n\tDouble = 1,\n\tString,\n\tObject,\n\tArray,\n\tBinData,\n\t/** @deprecated */\n\tUndefined,\n\tObjectId,\n\tBoolean,\n\tDate,\n\tNull,\n\tRegex,\n\t/** @deprecated */\n\tDBPointer,\n\tJavaScript,\n\t/** @deprecated */\n\tSymbol,\n\tJavaScriptWithScope,\n\tInt,\n\tTimestamp,\n\tLong,\n\tDecimal,\n\tMinKey = -1,\n\tMaxKey = 127,\n}\n\nexport type FieldExpression<T> = {\n\t$eq?: T;\n\t$gt?: T;\n\t$gte?: T;\n\t$lt?: T;\n\t$lte?: T;\n\t$in?: T[];\n\t$nin?: T[];\n\t$ne?: T;\n\t$exists?: boolean;\n\t$type?: BSONType[] | BSONType;\n\t$not?: FieldExpression<T>;\n\t$expr?: FieldExpression<T>;\n\t$jsonSchema?: unknown;\n\t$mod?: number[];\n\t$regex?: RegExp | string;\n\t$options?: string;\n\t$text?: {\n\t\t$search: string;\n\t\t$language?: string;\n\t\t$caseSensitive?: boolean;\n\t\t$diacriticSensitive?: boolean;\n\t};\n\t$where?: string | Function;\n\t$geoIntersects?: unknown;\n\t$geoWithin?: unknown;\n\t$near?: unknown;\n\t$nearSphere?: unknown;\n\t$all?: T[];\n\t$elemMatch?: T extends {} ? Query<T> : FieldExpression<T>;\n\t$size?: number;\n\t$bitsAllClear?: unknown;\n\t$bitsAllSet?: unknown;\n\t$bitsAnyClear?: unknown;\n\t$bitsAnySet?: unknown;\n\t$comment?: string;\n};\n\nexport type Flatten<T> = T extends unknown[] ? T[0] : T;\n\nexport type Query<T> = {\n\t[P in keyof T]?: Flatten<T[P]> | RegExp | FieldExpression<Flatten<T[P]>>;\n} & {\n\t$or?: Query<T>[];\n\t$and?: Query<T>[];\n\t$nor?: Query<T>[];\n} & Record<string, FieldExpression<unknown>>;\n\nexport type Sort =\n\t| (string | [string, 'asc' | 'desc'])[]\n\t| {\n\t\t\t[key: string]: -1 | 1;\n\t  };\n"]}