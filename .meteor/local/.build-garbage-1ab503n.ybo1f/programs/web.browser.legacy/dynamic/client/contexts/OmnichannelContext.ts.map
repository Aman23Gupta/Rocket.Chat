{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/OmnichannelContext.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,oBAAe,EAAU,YAAQ;AAAA,WAAQ,kBAAR;AAAQ,GAAzC;AAAyC;AAAA;AAAA,GAAzC;AAAyC;AAAA;AAAA,GAAzC;AAAyC;AAAA;AAAA,GAAzC;AAAyC;AAAA;AAAA,GAAzC;AAAyC;AAAA;AAAA,GAAzC;AAAyC;AAAA;AAAA;AAAzC,CAAT;AAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY3C,IAAM,kBAAkB,gBAAG,aAAa,CAA0B;AACxE,WAAS,EAAE;AAAE,WAAO,EAAE;AAAX,GAD6D;AAExE,SAAO,EAAE,KAF+D;AAGxE,gBAAc,EAAE,KAHwD;AAIxE,0BAAwB,EAAE;AAJ8C,CAA1B,CAAxC;;AAOA,IAAM,cAAc,GAAG;AAAA,SAA+B,UAAU,CAAC,kBAAD,CAAzC;AAAA,CAAvB;;AACA,IAAM,2BAA2B,GAAG;AAAA,SAAe,cAAc,GAAG,wBAAhC;AAAA,CAApC;;AACA,IAAM,yBAAyB,GAAG;AAAA,SAA2C,cAAc,GAAG,WAA5D;AAAA,CAAlC;;AACA,IAAM,4BAA4B,GAAG;AAAA,SAAe,cAAc,GAAG,cAAhC;AAAA,CAArC;;AACA,IAAM,kBAAkB,GAAG;AAAA,SAAiB,cAAc,GAAG,SAAlC;AAAA,CAA3B;;AACA,IAAM,qBAAqB,GAAG;AAAA,SAAe,cAAc,GAAG,OAAhC;AAAA,CAA9B,C","file":"dynamic/client/contexts/OmnichannelContext.ts","sourcesContent":["import { createContext, useContext } from 'react';\n\nimport { OmichannelRoutingConfig, Inquiries } from '../../definition/OmichannelRoutingConfig';\n\nexport type OmnichannelContextValue = {\n\tinquiries: Inquiries;\n\tenabled: boolean;\n\tagentAvailable: boolean;\n\trouteConfig?: OmichannelRoutingConfig;\n\tshowOmnichannelQueueLink: boolean;\n};\n\nexport const OmnichannelContext = createContext<OmnichannelContextValue>({\n\tinquiries: { enabled: false },\n\tenabled: false,\n\tagentAvailable: false,\n\tshowOmnichannelQueueLink: false,\n});\n\nexport const useOmnichannel = (): OmnichannelContextValue => useContext(OmnichannelContext);\nexport const useOmnichannelShowQueueLink = (): boolean => useOmnichannel().showOmnichannelQueueLink;\nexport const useOmnichannelRouteConfig = (): OmichannelRoutingConfig | undefined => useOmnichannel().routeConfig;\nexport const useOmnichannelAgentAvailable = (): boolean => useOmnichannel().agentAvailable;\nexport const useQueuedInquiries = (): Inquiries => useOmnichannel().inquiries;\nexport const useOmnichannelEnabled = (): boolean => useOmnichannel().enabled;\n"]}