{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/EditableSettingsContext.ts"],"names":[],"mappings":"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","file":"dynamic/client/contexts/EditableSettingsContext.ts","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { ISettingBase, SectionName, SettingId, GroupId, TabId } from '../../definition/ISetting';\nimport { SettingsContextQuery } from './SettingsContext';\n\nexport interface IEditableSetting extends ISettingBase {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n}\n\nexport type EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (_id: SettingId) => Subscription<IEditableSetting | undefined>;\n\treadonly queryEditableSettings: (query: EditableSettingsContextQuery) => Subscription<IEditableSetting[]>;\n\treadonly queryGroupSections: (_id: GroupId, tab?: TabId) => Subscription<SectionName[]>;\n\treadonly queryGroupTabs: (_id: GroupId) => Subscription<TabId[]>;\n\treadonly dispatch: (changes: Partial<IEditableSetting>[]) => void;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => ({\n\t\tgetCurrentValue: (): undefined => undefined,\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryEditableSettings: () => ({\n\t\tgetCurrentValue: (): IEditableSetting[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupSections: () => ({\n\t\tgetCurrentValue: (): SectionName[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupTabs: () => ({\n\t\tgetCurrentValue: (): TabId[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tdispatch: () => undefined,\n});\n\nexport const useEditableSetting = (_id: SettingId): IEditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): IEditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst subscription = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<IEditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n"]}