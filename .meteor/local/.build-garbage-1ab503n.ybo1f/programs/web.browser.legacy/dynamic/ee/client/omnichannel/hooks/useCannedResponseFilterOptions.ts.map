{"version":3,"sources":["meteor://ðŸ’»app/ee/client/omnichannel/hooks/useCannedResponseFilterOptions.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAoB,MAAS,KAAT,CAAS,4BAAT,EAAiC;AAAA;AAAA;AAAA;AAAA,CAAjC,EAAiC,CAAjC;;AAAiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAArD,OAAO,MAAP,CAAS;AAAA,gCAAoC,cAAQ;AAAA;AAAA;AAA5C,CAAT;AAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK9C,IAAM,8BAA8B,GAAG,YAAiB;AAC9D,MAAM,CAAC,GAAG,cAAc,EAAxB;AACA,MAAM,cAAc,GAAG,WAAW,CAAC,KAAD,EAAQ,qBAAR,CAAlC;AAEA,MAAM,cAAc,GAAG,OAAO,CAC7B;AAAA,WAAM,CACL,CAAC,KAAD,EAAQ,CAAC,CAAC,KAAD,CAAT,CADK,EAEL,CAAC,QAAD,EAAW,CAAC,CAAC,QAAD,CAAZ,CAFK,EAGL,CAAC,MAAD,EAAS,CAAC,CAAC,SAAD,CAAV,CAHK,CAAN;AAAA,GAD6B,EAM7B,CAAC,CAAD,CAN6B,CAA9B;;AASA,kBAA8B,QAAQ,CAAC,cAAD,CAAtC;AAAA;AAAA,MAAO,OAAP;AAAA,MAAgB,UAAhB;;AAEA,WAAS,CAAC,YAAK;AACd,QAAM,SAAS;AAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACa,cAAc,CAAC;AAAE,wBAAI,EAAE;AAAR,mBAAD,CAD3B;;AAAA;AAAA;AACT,6BADS,yBACT,WADS;AAGX,4BAHW,GAGE,WAAW,CAAC,GAAZ,CAAgB,UAAC,UAAD;AAAA,2BAAqB,CAAC,UAAU,CAAC,GAAZ,EAAiB,UAAU,CAAC,IAA5B,CAArB;AAAA,mBAAhB,CAHF;AAKjB,4BAAU,CAAC,cAAc,CAAC,MAAf,CAAsB,UAAtB,CAAD,CAAV;;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAH;AAAA,OAAf;;AAQA,aAAS;AACT,GAVQ,EAUN,CAAC,cAAD,EAAiB,cAAjB,CAVM,CAAT;AAYA,SAAO,OAAP;AACA,CA5BM,C","file":"dynamic/ee/client/omnichannel/hooks/useCannedResponseFilterOptions.ts","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n\nimport { useEndpoint } from '../../../../client/contexts/ServerContext';\nimport { useTranslation } from '../../../../client/contexts/TranslationContext';\n\nexport const useCannedResponseFilterOptions = (): string[][] => {\n\tconst t = useTranslation();\n\tconst getDepartments = useEndpoint('GET', 'livechat/department');\n\n\tconst defaultOptions = useMemo(\n\t\t() => [\n\t\t\t['all', t('All')],\n\t\t\t['global', t('Public')],\n\t\t\t['user', t('Private')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst [options, setOptions] = useState(defaultOptions);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async (): Promise<void> => {\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\n\t\t\tconst newOptions = departments.map((department: any) => [department._id, department.name]);\n\n\t\t\tsetOptions(defaultOptions.concat(newOptions));\n\t\t};\n\n\t\tfetchData();\n\t}, [defaultOptions, getDepartments]);\n\n\treturn options;\n};\n"]}