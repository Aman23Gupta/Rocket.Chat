{"version":3,"sources":["meteor://ðŸ’»app/ee/client/hooks/useTagsList.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAsB,MAAQ,KAAR,CAAU,4BAAV,EAAwB;AAAA;AAAA;AAAA;AAAA,CAAxB,EAAwB,CAAxB;;AAAwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9C,OAAO,MAAP,CAAS;AAAA,aAAa,cAAU;AAAM,WAAO,WAAP;AAAQ;AAArC,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYvC,IAAM,WAAW,GAAG,UAC1B,OAD0B,EAOvB;AACH,kBAAkC,QAAQ,CAAC;AAAA,WAAM,IAAI,UAAJ,EAAN;AAAA,GAAD,CAA1C;AAAA;AAAA,MAAO,SAAP;AAAA,MAAkB,YAAlB;;AACA,MAAM,MAAM,GAAG,WAAW,CAAC;AAAA,WAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAlB;AAAA,GAAD,EAA2D,EAA3D,CAA1B;AAEA,MAAM,OAAO,GAAG,WAAW,CAAC,KAAD,EAAQ,oBAAR,CAA3B;AAEA,uBAAqB,CAAC,YAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,MAAM,SAAS,GAAG,WAAW;AAC5B,qBAAO,KAAP,EAAc,GAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAC+B,OAAO,CAAC;AACrC,sBAAI,EAAE,OAAO,CAAC,MADuB;AAErC,wBAAM,EAAE,KAF6B;AAGrC,uBAAK,EAAE,GAAG,GAAG;AAHwB,iBAAD,CADtC;;AAAA;AAAA;AACS,oBADT,kBACS,IADT;AACe,qBADf,kBACe,KADf;AAAA,iDAMQ;AACN,uBAAK,EAAE,IAAI,CAAC,GAAL,CAAS,UAAC,GAAD,EAAa;AAC5B,uBAAG,CAAC,UAAJ,GAAiB,IAAI,IAAJ,CAAS,GAAG,CAAC,UAAb,CAAjB;AACA,uBAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,IAAhB;AACA,uBAAG,CAAC,KAAJ,GAAY;AAAE,2BAAK,EAAE,GAAG,CAAC,GAAb;AAAkB,2BAAK,EAAE,GAAG,CAAC;AAA7B,qBAAZ;AACA,2BAAO,GAAP;AACA,mBALM,CADD;AAON,2BAAS,EAAE;AAPL,iBANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAD4B;AAAA,OAiB5B,CAAC,OAAD,EAAU,OAAO,CAAC,MAAlB,CAjB4B,CAA7B;;AAoBA,8BAA4C,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAAA,MAAQ,aAAR,yBAAQ,aAAR;AAAA,MAAuB,gBAAvB,yBAAuB,gBAAvB;;AAEA,SAAO;AACN,UAAM,EAAN,MADM;AAEN,aAAS,EAAT,SAFM;AAGN,iBAAa,EAAb,aAHM;AAIN,oBAAgB,EAAhB;AAJM,GAAP;AAMA,CA7CM,C","file":"dynamic/ee/client/hooks/useTagsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { useEndpoint } from '../../../client/contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../client/hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../client/lib/lists/RecordList';\nimport { ILivechatTagRecord } from '../../../definition/ILivechatTagRecord';\n\ntype TagsListOptions = {\n\tfilter: string;\n};\n\nexport const useTagsList = (\n\toptions: TagsListOptions,\n): {\n\titemsList: RecordList<ILivechatTagRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatTagRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatTagRecord>()), []);\n\n\tconst getTags = useEndpoint('GET', 'livechat/tags.list');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { tags, total } = await getTags({\n\t\t\t\ttext: options.filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\t\t\treturn {\n\t\t\t\titems: tags.map((tag: any) => {\n\t\t\t\t\ttag._updatedAt = new Date(tag._updatedAt);\n\t\t\t\t\ttag.label = tag.name;\n\t\t\t\t\ttag.value = { value: tag._id, label: tag.name };\n\t\t\t\t\treturn tag;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getTags, options.filter],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}