{"version":3,"sources":["meteor://ðŸ’»app/ee/client/audit/RoomAutoComplete/RoomAutoComplete.js"],"names":["_extends","module","link","default","v","_objectWithoutProperties","_objectSpread","_slicedToArray","AutoComplete","Option","React","memo","useMemo","useState","useEndpointData","Avatar","query","name","selector","JSON","stringify","RoomAutoComplete","props","filter","setFilter","data","value","options","items","map","_id","fname","avatarETag","t","label","type","exportDefault"],"mappings":"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","file":"dynamic/ee/client/audit/RoomAutoComplete/RoomAutoComplete.js","sourcesContent":["import { AutoComplete, Option } from '@rocket.chat/fuselage';\nimport React, { memo, useMemo, useState } from 'react';\n\nimport { useEndpointData } from '../../../../client/hooks/useEndpointData';\nimport Avatar from './Avatar';\n\nconst query = (name = '') => ({ selector: JSON.stringify({ name }) });\n\nconst RoomAutoComplete = (props) => {\n\tconst [filter, setFilter] = useState('');\n\tconst { value: data } = useEndpointData(\n\t\t'rooms.autocomplete.adminRooms',\n\t\tuseMemo(() => query(filter), [filter]),\n\t);\n\tconst options = useMemo(\n\t\t() =>\n\t\t\t(data &&\n\t\t\t\tdata.items.map(({ name, _id, fname, avatarETag, t }) => ({\n\t\t\t\t\tvalue: _id,\n\t\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },\n\t\t\t\t}))) ||\n\t\t\t[],\n\t\t[data],\n\t);\n\n\treturn (\n\t\t<AutoComplete\n\t\t\t{...props}\n\t\t\tfilter={filter}\n\t\t\tsetFilter={setFilter}\n\t\t\trenderSelected={({ value, label }) => <Option label={label.name} avatar={<Avatar value={value} room={{ _id: value, ...label }} />} />}\n\t\t\trenderItem={({ value, label, ...props }) => (\n\t\t\t\t<Option key={value} {...props} label={label.name} avatar={<Avatar value={value} {...label} />} />\n\t\t\t)}\n\t\t\toptions={options}\n\t\t/>\n\t);\n};\n\nexport default memo(RoomAutoComplete);\n"]}