{"version":3,"sources":["meteor://ðŸ’»app/app/katex/client/index.js"],"names":["_toConsumableArray","module","link","default","v","export","createKatexMessageRendering","Random","katex","unescapeHTML","escapeHTML","Boundary","length","end","start","extract","str","substr","Katex","dollarSyntax","parenthesisSyntax","renderLatex","latex","displayMode","renderToString","macros","message","renderMessage","render","html","trim","tokens","token","id","push","text","delimitersMap","opener","closer","enabled","findOpeningDelimiter","matches","filter","options","map","pos","indexOf","positions","minPos","Math","min","matchIndex","findIndex","match","getLatexBoundaries","closerIndex","inner","outer","findLatex","openingDelimiterMatch","extractLatex","before","after","renderFunction","result","parts","rendered","instance"],"mappings":";;;;;;;;AAAA,IAAIA,kBAAJ;;AAAuBC,MAAM,CAACC,IAAP,CAAY,0CAAZ,EAAuD;AAACC,SAAO,EAAC,UAASC,CAAT,EAAW;AAACJ,sBAAkB,GAACI,CAAnB;AAAqB;AAA1C,CAAvD,EAAmG,CAAnG;AAAvBH,MAAM,CAACI,MAAP,CAAc;AAACC,6BAA2B,EAAC,YAAU;AAAC,WAAOA,2BAAP;AAAmC;AAA3E,CAAd;AAA4F,IAAIC,MAAJ;AAAWN,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACK,QAAM,EAAC,UAASH,CAAT,EAAW;AAACG,UAAM,GAACH,CAAP;AAAS;AAA7B,CAA5B,EAA2D,CAA3D;AAA8D,IAAII,KAAJ;AAAUP,MAAM,CAACC,IAAP,CAAY,OAAZ,EAAoB;AAAC,aAAQ,UAASE,CAAT,EAAW;AAACI,SAAK,GAACJ,CAAN;AAAQ;AAA7B,CAApB,EAAmD,CAAnD;AAAsD,IAAIK,YAAJ,EAAiBC,UAAjB;AAA4BT,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACO,cAAY,EAAC,UAASL,CAAT,EAAW;AAACK,gBAAY,GAACL,CAAb;AAAe,GAAzC;AAA0CM,YAAU,EAAC,UAASN,CAAT,EAAW;AAACM,cAAU,GAACN,CAAX;AAAa;AAA9E,CAA1C,EAA0H,CAA1H;AAA6HH,MAAM,CAACC,IAAP,CAAY,0BAAZ;AAAwCD,MAAM,CAACC,IAAP,CAAY,aAAZ;;IAOhaS,Q;;;;;SACLC,M;AAAA,sBAAS;AACR,aAAO,KAAKC,GAAL,GAAW,KAAKC,KAAvB;AACA;;;;;SAEDC,O;AAAA,qBAAQC,GAAR,EAAa;AACZ,aAAOA,GAAG,CAACC,MAAJ,CAAW,KAAKH,KAAhB,EAAuB,KAAKF,MAAL,EAAvB,CAAP;AACA;;;;;;;;IAGIM,K;AACL,iBAAYV,KAAZ,QAAwD;AAAA;;AAAA,QAAnCW,YAAmC,QAAnCA,YAAmC;AAAA,QAArBC,iBAAqB,QAArBA,iBAAqB;;AAAA,SA2GxDC,WA3GwD,GA2G1C,UAACC,KAAD,EAAQC,WAAR,EAAwB;AACrC,UAAI;AACH,eAAO,KAAI,CAACf,KAAL,CAAWgB,cAAX,CAA0BF,KAA1B,EAAiC;AACvCC,qBAAW,EAAXA,WADuC;AAEvCE,gBAAM,EAAE;AACP,sBAAU;AADH;AAF+B,SAAjC,CAAP;AAMA,OAPD,CAOE,cAAoB;AAAA,YAAXC,OAAW,SAAXA,OAAW;AACrB,oDAAwCH,WAAW,GAAG,OAAH,GAAa,QAAhE,kBAAmFb,UAAU,CAACgB,OAAD,CAA7F;AACA;AACD,KAtHuD;;AAAA,SA2IxDC,aA3IwD,GA2IxC,UAACD,OAAD,EAAa;AAAA;;AAC5B,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAChC,eAAO,KAAI,CAACE,MAAL,CAAYF,OAAZ,EAAqB,KAAI,CAACL,WAA1B,CAAP;AACA;;AAED,UAAI,mBAACK,OAAO,CAACG,IAAT,0CAAC,cAAcC,IAAd,EAAD,CAAJ,EAA2B;AAC1B,eAAOJ,OAAP;AACA;;AAED,UAAI,CAACA,OAAO,CAACK,MAAb,EAAqB;AACpBL,eAAO,CAACK,MAAR,GAAiB,EAAjB;AACA;;AAEDL,aAAO,CAACG,IAAR,GAAe,KAAI,CAACD,MAAL,CAAYF,OAAO,CAACG,IAApB,EAA0B,UAACP,KAAD,EAAQC,WAAR,EAAwB;AAChE,YAAMS,KAAK,WAASzB,MAAM,CAAC0B,EAAP,EAAT,QAAX;AACAP,eAAO,CAACK,MAAR,CAAeG,IAAf,CAAoB;AACnBF,eAAK,EAALA,KADmB;AAEnBG,cAAI,EAAE,KAAI,CAACd,WAAL,CAAiBC,KAAjB,EAAwBC,WAAxB;AAFa,SAApB;AAIA,eAAOS,KAAP;AACA,OAPc,CAAf;AASA,aAAON,OAAP;AACA,KAlKuD;;AACvD,SAAKlB,KAAL,GAAaA,KAAb;AACA,SAAK4B,aAAL,GAAqB,CACpB;AACCC,YAAM,EAAE,KADT;AAECC,YAAM,EAAE,KAFT;AAGCf,iBAAW,EAAE,IAHd;AAICgB,aAAO,EAAE;AAAA,eAAMnB,iBAAN;AAAA;AAJV,KADoB,EAOpB;AACCiB,YAAM,EAAE,KADT;AAECC,YAAM,EAAE,KAFT;AAGCf,iBAAW,EAAE,KAHd;AAICgB,aAAO,EAAE;AAAA,eAAMnB,iBAAN;AAAA;AAJV,KAPoB,EAapB;AACCiB,YAAM,EAAE,IADT;AAECC,YAAM,EAAE,IAFT;AAGCf,iBAAW,EAAE,IAHd;AAICgB,aAAO,EAAE;AAAA,eAAMpB,YAAN;AAAA;AAJV,KAboB,EAmBpB;AACCkB,YAAM,EAAE,GADT;AAECC,YAAM,EAAE,GAFT;AAGCf,iBAAW,EAAE,KAHd;AAICgB,aAAO,EAAE;AAAA,eAAMpB,YAAN;AAAA;AAJV,KAnBoB,CAArB;AA0BA;;;;UAEDqB,oB;AAAA,kCAAqBxB,GAArB,EAA0BF,KAA1B,EAAiC;AAChC,UAAM2B,OAAO,GAAG,KAAKL,aAAL,CACdM,MADc,CACP,UAACC,OAAD;AAAA,eAAaA,OAAO,CAACJ,OAAR,EAAb;AAAA,OADO,EAEdK,GAFc,CAEV,UAACD,OAAD;AAAA,eAAc;AAClBA,iBAAO,EAAPA,OADkB;AAElBE,aAAG,EAAE7B,GAAG,CAAC8B,OAAJ,CAAYH,OAAO,CAACN,MAApB,EAA4BvB,KAA5B;AAFa,SAAd;AAAA,OAFU,CAAhB;AAOA,UAAMiC,SAAS,GAAGN,OAAO,CAACC,MAAR,CAAe;AAAA,YAAGG,GAAH,SAAGA,GAAH;AAAA,eAAaA,GAAG,IAAI,CAApB;AAAA,OAAf,EAAsCD,GAAtC,CAA0C;AAAA,YAAGC,GAAH,SAAGA,GAAH;AAAA,eAAaA,GAAb;AAAA,OAA1C,CAAlB,CARgC,CAUhC;;AACA,UAAIE,SAAS,CAACnC,MAAV,KAAqB,CAAzB,EAA4B;AAC3B,eAAO,IAAP;AACA,OAb+B,CAehC;;;AACA,UAAMoC,MAAM,GAAGC,IAAI,CAACC,GAAL,OAAAD,IAAI,qBAAQF,SAAR,EAAnB;AAEA,UAAMI,UAAU,GAAGV,OAAO,CAACW,SAAR,CAAkB;AAAA,YAAGP,GAAH,SAAGA,GAAH;AAAA,eAAaA,GAAG,KAAKG,MAArB;AAAA,OAAlB,CAAnB;AAEA,UAAMK,KAAK,GAAGZ,OAAO,CAACU,UAAD,CAArB;AACA,aAAOE,KAAP;AACA;;;;;UAEDC,kB;AAAA,gCAAmBtC,GAAnB,SAAsD;AAAA,UAAjBsB,MAAiB,SAA5BK,OAA4B,CAAjBL,MAAiB;AAAA,UAAPO,GAAO,SAAPA,GAAO;AACrD,UAAMU,WAAW,GAAGvC,GAAG,CAACC,MAAJ,CAAW4B,GAAG,GAAGP,MAAM,CAAC1B,MAAxB,EAAgCkC,OAAhC,CAAwCR,MAAxC,CAApB;;AACA,UAAIiB,WAAW,GAAG,CAAlB,EAAqB;AACpB,eAAO,IAAP;AACA;;AAED,UAAMC,KAAK,GAAG,IAAI7C,QAAJ,EAAd;AACA,UAAM8C,KAAK,GAAG,IAAI9C,QAAJ,EAAd;AAEA6C,WAAK,CAAC1C,KAAN,GAAc+B,GAAG,GAAGP,MAAM,CAAC1B,MAA3B;AACA4C,WAAK,CAAC3C,GAAN,GAAY2C,KAAK,CAAC1C,KAAN,GAAcyC,WAA1B;AAEAE,WAAK,CAAC3C,KAAN,GAAc+B,GAAd;AACAY,WAAK,CAAC5C,GAAN,GAAY2C,KAAK,CAAC3C,GAAN,GAAYyB,MAAM,CAAC1B,MAA/B;AAEA,aAAO;AACN6C,aAAK,EAALA,KADM;AAEND,aAAK,EAALA;AAFM,OAAP;AAIA;;;MAED;;;UACAE,S;AAAA,uBAAU1C,GAAV,EAAe;AACd,UAAIF,KAAK,GAAG,CAAZ;AACA,UAAI6C,qBAAJ;;AAEA,aAAO,CAACA,qBAAqB,GAAG,KAAKnB,oBAAL,CAA0BxB,GAA1B,EAA+BF,KAAK,EAApC,CAAzB,KAAqE,IAA5E,EAAkF;AACjF,YAAMuC,KAAK,GAAG,KAAKC,kBAAL,CAAwBtC,GAAxB,EAA6B2C,qBAA7B,CAAd;;AACA,YAAIN,KAAK,IAAIA,KAAK,CAACG,KAAN,CAAYzC,OAAZ,CAAoBC,GAApB,EAAyBc,IAAzB,GAAgClB,MAA7C,EAAqD;AACpDyC,eAAK,CAACV,OAAN,GAAgBgB,qBAAqB,CAAChB,OAAtC;AACA,iBAAOU,KAAP;AACA;AACD;;AAED,aAAO,IAAP;AACA;;;MAED;AACA;;;UACAO,Y;AAAA,0BAAa5C,GAAb,EAAkBqC,KAAlB,EAAyB;AACxB,UAAMQ,MAAM,GAAG7C,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcoC,KAAK,CAACI,KAAN,CAAY3C,KAA1B,CAAf;AACA,UAAMgD,KAAK,GAAG9C,GAAG,CAACC,MAAJ,CAAWoC,KAAK,CAACI,KAAN,CAAY5C,GAAvB,CAAd;AACA,UAAIS,KAAK,GAAG+B,KAAK,CAACG,KAAN,CAAYzC,OAAZ,CAAoBC,GAApB,CAAZ;AACAM,WAAK,GAAGb,YAAY,CAACa,KAAD,CAApB;AACA,aAAO;AACNuC,cAAM,EAANA,MADM;AAENvC,aAAK,EAALA,KAFM;AAGNwC,aAAK,EAALA;AAHM,OAAP;AAKA;;;MAED;AACA;;;AAcA;UACAlC,M;AAAA,oBAAOZ,GAAP,EAAY+C,cAAZ,EAA4B;AAC3B,UAAIC,MAAM,GAAG,EAAb;;AACA,aAAO,KAAKN,SAAL,CAAe1C,GAAf,KAAuB,IAA9B,EAAoC;AACnC;AACA,YAAMqC,KAAK,GAAG,KAAKK,SAAL,CAAe1C,GAAf,CAAd;AACA,YAAMiD,KAAK,GAAG,KAAKL,YAAL,CAAkB5C,GAAlB,EAAuBqC,KAAvB,CAAd,CAHmC,CAKnC;AACA;;AACA,YAAMa,QAAQ,GAAGH,cAAc,CAACE,KAAK,CAAC3C,KAAP,EAAc+B,KAAK,CAACV,OAAN,CAAcpB,WAA5B,CAA/B;AACAyC,cAAM,IAAIC,KAAK,CAACJ,MAAN,GAAeK,QAAzB,CARmC,CASnC;;AACAlD,WAAG,GAAGiD,KAAK,CAACH,KAAZ;AACA;;AACDE,YAAM,IAAIhD,GAAV;AACA,aAAOgD,MAAP;AACA;;;;;;;;AA4BK,IAAM1D,2BAA2B,GAAG,UAACqC,OAAD,EAAa;AACvD,MAAMwB,QAAQ,GAAG,IAAIjD,KAAJ,CAAUV,KAAV,EAAiBmC,OAAjB,CAAjB;AACA,SAAO,UAACjB,OAAD;AAAA,WAAayC,QAAQ,CAACxC,aAAT,CAAuBD,OAAvB,CAAb;AAAA,GAAP;AACA,CAHM,C","file":"dynamic/app/katex/client/index.js","sourcesContent":["import { Random } from 'meteor/random';\nimport katex from 'katex';\nimport { unescapeHTML, escapeHTML } from '@rocket.chat/string-helpers';\n\nimport 'katex/dist/katex.min.css';\nimport './style.css';\n\nclass Boundary {\n\tlength() {\n\t\treturn this.end - this.start;\n\t}\n\n\textract(str) {\n\t\treturn str.substr(this.start, this.length());\n\t}\n}\n\nclass Katex {\n\tconstructor(katex, { dollarSyntax, parenthesisSyntax }) {\n\t\tthis.katex = katex;\n\t\tthis.delimitersMap = [\n\t\t\t{\n\t\t\t\topener: '\\\\[',\n\t\t\t\tcloser: '\\\\]',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '\\\\(',\n\t\t\t\tcloser: '\\\\)',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$$',\n\t\t\t\tcloser: '$$',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$',\n\t\t\t\tcloser: '$',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOpeningDelimiter(str, start) {\n\t\tconst matches = this.delimitersMap\n\t\t\t.filter((options) => options.enabled())\n\t\t\t.map((options) => ({\n\t\t\t\toptions,\n\t\t\t\tpos: str.indexOf(options.opener, start),\n\t\t\t}));\n\n\t\tconst positions = matches.filter(({ pos }) => pos >= 0).map(({ pos }) => pos);\n\n\t\t// No opening delimiters were found\n\t\tif (positions.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Take the first delimiter found\n\t\tconst minPos = Math.min(...positions);\n\n\t\tconst matchIndex = matches.findIndex(({ pos }) => pos === minPos);\n\n\t\tconst match = matches[matchIndex];\n\t\treturn match;\n\t}\n\n\tgetLatexBoundaries(str, { options: { closer }, pos }) {\n\t\tconst closerIndex = str.substr(pos + closer.length).indexOf(closer);\n\t\tif (closerIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst inner = new Boundary();\n\t\tconst outer = new Boundary();\n\n\t\tinner.start = pos + closer.length;\n\t\tinner.end = inner.start + closerIndex;\n\n\t\touter.start = pos;\n\t\touter.end = inner.end + closer.length;\n\n\t\treturn {\n\t\t\touter,\n\t\t\tinner,\n\t\t};\n\t}\n\n\t// Searches for the first latex block in the given string\n\tfindLatex(str) {\n\t\tlet start = 0;\n\t\tlet openingDelimiterMatch;\n\n\t\twhile ((openingDelimiterMatch = this.findOpeningDelimiter(str, start++)) != null) {\n\t\t\tconst match = this.getLatexBoundaries(str, openingDelimiterMatch);\n\t\t\tif (match && match.inner.extract(str).trim().length) {\n\t\t\t\tmatch.options = openingDelimiterMatch.options;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Breaks a message to what comes before, after and to the content of a\n\t// matched latex block\n\textractLatex(str, match) {\n\t\tconst before = str.substr(0, match.outer.start);\n\t\tconst after = str.substr(match.outer.end);\n\t\tlet latex = match.inner.extract(str);\n\t\tlatex = unescapeHTML(latex);\n\t\treturn {\n\t\t\tbefore,\n\t\t\tlatex,\n\t\t\tafter,\n\t\t};\n\t}\n\n\t// Takes a latex math string and the desired display mode and renders it\n\t// to HTML using the KaTeX library\n\trenderLatex = (latex, displayMode) => {\n\t\ttry {\n\t\t\treturn this.katex.renderToString(latex, {\n\t\t\t\tdisplayMode,\n\t\t\t\tmacros: {\n\t\t\t\t\t'\\\\href': '\\\\@secondoftwo',\n\t\t\t\t},\n\t\t\t});\n\t\t} catch ({ message }) {\n\t\t\treturn `<div class=\"katex-error katex-${displayMode ? 'block' : 'inline'}-error\">${escapeHTML(message)}</div>`;\n\t\t}\n\t};\n\n\t// Takes a string and renders all latex blocks inside it\n\trender(str, renderFunction) {\n\t\tlet result = '';\n\t\twhile (this.findLatex(str) != null) {\n\t\t\t// Find the first latex block in the string\n\t\t\tconst match = this.findLatex(str);\n\t\t\tconst parts = this.extractLatex(str, match);\n\n\t\t\t// Add to the reuslt what comes before the latex block as well as\n\t\t\t// the rendered latex content\n\t\t\tconst rendered = renderFunction(parts.latex, match.options.displayMode);\n\t\t\tresult += parts.before + rendered;\n\t\t\t// Set what comes after the latex block to be examined next\n\t\t\tstr = parts.after;\n\t\t}\n\t\tresult += str;\n\t\treturn result;\n\t}\n\n\trenderMessage = (message) => {\n\t\tif (typeof message === 'string') {\n\t\t\treturn this.render(message, this.renderLatex);\n\t\t}\n\n\t\tif (!message.html?.trim()) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.tokens) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\n\t\tmessage.html = this.render(message.html, (latex, displayMode) => {\n\t\t\tconst token = `=!=${Random.id()}=!=`;\n\t\t\tmessage.tokens.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: this.renderLatex(latex, displayMode),\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t};\n}\n\nexport const createKatexMessageRendering = (options) => {\n\tconst instance = new Katex(katex, options);\n\treturn (message) => instance.renderMessage(message);\n};\n"]}