{"version":3,"sources":["meteor://ðŸ’»app/ee/client/omnichannel/hooks/useCannedResponseList.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAS,MAAa,KAAb,CAAa,sCAAb,EAAgD;AAAA;AAAA;AAAA;;AAAA,CAAhD,EAAgD,CAAhD;AAAT,OAAO,MAAP,CAAS;AAAA,uBAAwB,QAAQ;AAAhC,CAAT;AAAyD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAOlD,MAAM,qBAAqB,GACjC,OADoC,IAOjC;AACH,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAQ,CAAC,MAAM,IAAI,kBAAJ,CAAuB,OAAvB,CAAP,CAA5C;AACA,QAAM,MAAM,GAAG,WAAW,CAAC,MAAM,aAAa,CAAC,IAAI,kBAAJ,CAAuB,OAAvB,CAAD,CAApB,EAAuD,CAAC,OAAD,CAAvD,CAA1B;AAEA,uBAAqB,CAAC,MAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,WAAS,CAAC,MAAK;AACd,QAAI,UAAU,CAAC,OAAX,KAAuB,OAA3B,EAAoC;AACnC,gBAAU,CAAC,aAAX,CAAyB,OAAzB;AACA;AACD,GAJQ,EAIN,CAAC,UAAD,EAAa,OAAb,CAJM,CAAT;AAMA,QAAM,kBAAkB,GAAG,WAAW,CAAC,KAAD,EAAQ,kBAAR,CAAtC;AACA,QAAM,cAAc,GAAG,WAAW,CAAC,KAAD,EAAQ,qBAAR,CAAlC;AAEA,QAAM,SAAS,GAAG,WAAW,CAC5B,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,qBAAF;AAAmB;AAAnB,QAA6B,MAAM,kBAAkB,6DACtD,OAAO,CAAC,MAAR,IAAkB;AAAE,UAAI,EAAE,OAAO,CAAC;AAAhB,KADoC,GAEtD,OAAO,CAAC,IAAR,IAAgB,CAAC,QAAD,EAAW,MAAX,EAAmB,IAAnB,CAAyB,MAAD,IAAY,MAAM,KAAK,OAAO,CAAC,IAAvD,CAAhB,IAAgF;AAAE,WAAK,EAAE,OAAO,CAAC;AAAjB,KAF1B,GAGtD,OAAO,CAAC,IAAR,IACH,CAAC,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,EAA0B,IAA1B,CAAgC,MAAD,IAAY,MAAM,KAAK,OAAO,CAAC,IAA9D,CADE,IACqE;AACvE,WAAK,EAAE,YADgE;AAEvE,kBAAY,EAAE,OAAO,CAAC;AAFiD,KAJf;AAQ1D,YAAM,EAAE,KARkD;AAS1D,WAAK,EAAE,GAAG,GAAG;AAT6C,OAA3D;AAYA,UAAM;AAAE;AAAF,QAAkB,MAAM,cAAc,CAAC;AAAE,UAAI,EAAE;AAAR,KAAD,CAA5C;AAEA,WAAO;AACN,WAAK,EAAE,eAAe,CAAC,GAAhB,CAAqB,cAAD,IAAwB;AAClD,YAAI,cAAc,CAAC,YAAnB,EAAiC;AAChC,qBAAW,CAAC,OAAZ,CAAqB,UAAD,IAAoB;AACvC,gBAAI,cAAc,CAAC,YAAf,KAAgC,UAAU,CAAC,GAA/C,EAAoD;AACnD,4BAAc,CAAC,cAAf,GAAgC,UAAU,CAAC,IAA3C;AACA;AACD,WAJD;AAKA;;AACD,sBAAc,CAAC,UAAf,GAA4B,IAAI,IAAJ,CAAS,cAAc,CAAC,UAAxB,CAA5B;AACA,sBAAc,CAAC,UAAf,GAA4B,IAAI,IAAJ,CAAS,cAAc,CAAC,UAAxB,CAA5B;AACA,eAAO,cAAP;AACA,OAXM,CADD;AAaN,eAAS,EAAE;AAbL,KAAP;AAeA,GA/B2B,EAgC5B,CAAC,kBAAD,EAAqB,cAArB,EAAqC,OAAO,CAAC,MAA7C,EAAqD,OAAO,CAAC,IAA7D,CAhC4B,CAA7B;AAmCA,QAAM;AAAE,iBAAF;AAAiB;AAAjB,MAAsC,uBAAuB,CAAC,UAAD,EAAa,SAAb,CAAnE;AAEA,SAAO;AACN,UADM;AAEN,cAFM;AAGN,iBAHM;AAIN;AAJM,GAAP;AAMA,CAnEM,C","file":"dynamic/ee/client/omnichannel/hooks/useCannedResponseList.ts","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { useEndpoint } from '../../../../client/contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../client/hooks/useComponentDidUpdate';\nimport { CannedResponseList } from '../../../../client/lib/lists/CannedResponseList';\n\nexport const useCannedResponseList = (\n\toptions: any,\n): {\n\treload: () => void;\n\tcannedList: CannedResponseList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [cannedList, setCannedList] = useState(() => new CannedResponseList(options));\n\tconst reload = useCallback(() => setCannedList(new CannedResponseList(options)), [options]);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tuseEffect(() => {\n\t\tif (cannedList.options !== options) {\n\t\t\tcannedList.updateFilters(options);\n\t\t}\n\t}, [cannedList, options]);\n\n\tconst getCannedResponses = useEndpoint('GET', 'canned-responses');\n\tconst getDepartments = useEndpoint('GET', 'livechat/department');\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\t\t...(options.filter && { text: options.filter }),\n\t\t\t\t...(options.type && ['global', 'user'].find((option) => option === options.type) && { scope: options.type }),\n\t\t\t\t...(options.type &&\n\t\t\t\t\t!['global', 'user', 'all'].find((option) => option === options.type) && {\n\t\t\t\t\t\tscope: 'department',\n\t\t\t\t\t\tdepartmentId: options.type,\n\t\t\t\t\t}),\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\n\t\t\treturn {\n\t\t\t\titems: cannedResponses.map((cannedResponse: any) => {\n\t\t\t\t\tif (cannedResponse.departmentId) {\n\t\t\t\t\t\tdepartments.forEach((department: any) => {\n\t\t\t\t\t\t\tif (cannedResponse.departmentId === department._id) {\n\t\t\t\t\t\t\t\tcannedResponse.departmentName = department.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tcannedResponse._updatedAt = new Date(cannedResponse._updatedAt);\n\t\t\t\t\tcannedResponse._createdAt = new Date(cannedResponse._createdAt);\n\t\t\t\t\treturn cannedResponse;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getCannedResponses, getDepartments, options.filter, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(cannedList, fetchData);\n\n\treturn {\n\t\treload,\n\t\tcannedList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}