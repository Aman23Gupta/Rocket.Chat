{"version":3,"sources":["meteor://ðŸ’»app/ee/client/hooks/useTagsList.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,aAAa,QAAQ;AAArB,CAAT;AAA6C,IAAC,WAAD,EAAC,QAAD;AAAC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAYvC,MAAM,WAAW,GACvB,OAD0B,IAOvB;AACH,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,MAAM,IAAI,UAAJ,EAAP,CAA1C;AACA,QAAM,MAAM,GAAG,WAAW,CAAC,MAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAnB,EAA2D,EAA3D,CAA1B;AAEA,QAAM,OAAO,GAAG,WAAW,CAAC,KAAD,EAAQ,oBAAR,CAA3B;AAEA,uBAAqB,CAAC,MAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,QAAM,SAAS,GAAG,WAAW,CAC5B,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,UAAF;AAAQ;AAAR,QAAkB,MAAM,OAAO,CAAC;AACrC,UAAI,EAAE,OAAO,CAAC,MADuB;AAErC,YAAM,EAAE,KAF6B;AAGrC,WAAK,EAAE,GAAG,GAAG;AAHwB,KAAD,CAArC;AAKA,WAAO;AACN,WAAK,EAAE,IAAI,CAAC,GAAL,CAAU,GAAD,IAAa;AAC5B,WAAG,CAAC,UAAJ,GAAiB,IAAI,IAAJ,CAAS,GAAG,CAAC,UAAb,CAAjB;AACA,WAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,IAAhB;AACA,WAAG,CAAC,KAAJ,GAAY;AAAE,eAAK,EAAE,GAAG,CAAC,GAAb;AAAkB,eAAK,EAAE,GAAG,CAAC;AAA7B,SAAZ;AACA,eAAO,GAAP;AACA,OALM,CADD;AAON,eAAS,EAAE;AAPL,KAAP;AASA,GAhB2B,EAiB5B,CAAC,OAAD,EAAU,OAAO,CAAC,MAAlB,CAjB4B,CAA7B;AAoBA,QAAM;AAAE,iBAAF;AAAiB;AAAjB,MAAsC,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAEA,SAAO;AACN,UADM;AAEN,aAFM;AAGN,iBAHM;AAIN;AAJM,GAAP;AAMA,CA7CM,C","file":"dynamic/ee/client/hooks/useTagsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { useEndpoint } from '../../../client/contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../client/hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../client/lib/lists/RecordList';\nimport { ILivechatTagRecord } from '../../../definition/ILivechatTagRecord';\n\ntype TagsListOptions = {\n\tfilter: string;\n};\n\nexport const useTagsList = (\n\toptions: TagsListOptions,\n): {\n\titemsList: RecordList<ILivechatTagRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatTagRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatTagRecord>()), []);\n\n\tconst getTags = useEndpoint('GET', 'livechat/tags.list');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { tags, total } = await getTags({\n\t\t\t\ttext: options.filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\t\t\treturn {\n\t\t\t\titems: tags.map((tag: any) => {\n\t\t\t\t\ttag._updatedAt = new Date(tag._updatedAt);\n\t\t\t\t\ttag.label = tag.name;\n\t\t\t\t\ttag.value = { value: tag._id, label: tag.name };\n\t\t\t\t\treturn tag;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getTags, options.filter],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}