{"version":3,"sources":["meteor://ðŸ’»app/ee/app/ecdh/Session.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,SAAY;AAAZ,CAAT;AAAoC,IAAoC,UAApC,EAA0C,eAA1C;AAAwD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAE5F,IAAI,MAAJ;;AAEM,MAAO,OAAP,CAAc;AAAA;AAAA,SAEA,eAFA,GAEkC,QAFlC;AAAA,SAKA,yBALA,GAK4C,QAL5C;AAAA,SAQA,mBARA,GAQsC,QARtC;AAAA,SAUT,UAVS;AAAA,SAYT,UAZS;AAAA,SAcT,SAdS;AAAA,SAgBZ,SAhBY;AAAA;;AAkBP,QAAN,MAAM;AACX,WAAO,MAAM,IAAI,UAAU,CAAC,IAAX,EAAjB;AACA;;AAEkB,MAAf,eAAe;AAClB,WAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,eAA7B,CAAP;AACA;;AAED,qBAAmB,CAAC,IAAD,EAAa;AAC/B,WAAO,IAAI,eAAJ,CAAoB,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,KAAK,eAAvB,CAApB,CAAP;AACA;;AAEoB,QAAf,eAAe,CAAC,SAAD,EAA2B;AAC/C,UAAM,MAAM,GAAG,MAAM,KAAK,MAAL,EAArB;AACA,UAAM,KAAK,GAAG,MAAM,MAAM,CAAC,eAAP,CAAuB,EAAvB,CAApB;AAEA,UAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gBAAP,CAAwB,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,QAAvB,CAAgC,KAAK,mBAArC,CAAxB,EAAmF,KAAnF,EAA0F,KAAK,UAA/F,CAAzB;AAEA,WAAO,MAAM,CAAC,MAAP,CAAc,CAAC,KAAD,EAAQ,UAAR,CAAd,CAAP;AACA;;AAEY,QAAP,OAAO,CAAC,SAAD,EAA2B;AACvC,UAAM,MAAM,GAAG,MAAM,KAAK,eAAL,CAAqB,SAArB,CAArB;AACA,WAAO,MAAM,CAAC,QAAP,CAAgB,KAAK,yBAArB,CAAP;AACA;;AAEoB,QAAf,eAAe,CAAC,IAAD,EAAsB;AAC1C,UAAM,MAAM,GAAG,MAAM,KAAK,MAAL,EAArB;AACA,UAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,QAAP,CAAgB,IAAhB,IAAwB,IAAI,CAAC,QAAL,EAAxB,GAA0C,IAAtD,EAA4D,KAAK,yBAAjE,CAAf;AAEA,UAAM,SAAS,GAAG,MAAM,MAAM,CAAC,qBAAP,CAA6B,MAAM,CAAC,KAAP,CAAa,EAAb,CAA7B,EAA+C,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAA/C,EAAoE,KAAK,UAAzE,CAAxB;AAEA,WAAO,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,QAAV,EAAZ,EAAkC,KAAK,mBAAvC,CAAP;AACA;;AAEY,QAAP,OAAO,CAAC,IAAD,EAAsB;AAClC,UAAM,MAAM,GAAG,MAAM,KAAK,eAAL,CAAqB,IAArB,CAArB;AACA,WAAO,MAAM,CAAC,QAAP,EAAP;AACA;;AAxDkB,C","file":"dynamic/ee/app/ecdh/Session.ts","sourcesContent":["import { SodiumPlus, X25519PublicKey, X25519SecretKey, CryptographyKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"]}