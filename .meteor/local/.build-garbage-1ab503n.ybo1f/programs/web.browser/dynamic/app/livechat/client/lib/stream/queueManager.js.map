{"version":3,"sources":["meteor://ðŸ’»app/app/livechat/client/lib/stream/queueManager.js"],"names":["_objectSpread","module","link","default","v","export","initializeLivechatInquiryStream","Meteor","APIClient","LivechatInquiry","inquiryDataStream","callWithErrorHandling","getUserPreference","CustomSounds","departments","Set","newInquirySound","userId","audioVolume","newRoomNotification","play","volume","Number","toPrecision","events","added","inquiry","type","has","department","insert","alert","_updatedAt","Date","changed","status","remove","_id","saveResult","upsert","insertedId","removed","updateCollection","getInquiriesFromAPI","inquiries","v1","get","removeListenerOfDepartment","departmentId","removeListener","delete","appendListenerToDepartment","add","on","addListenerForeachDepartment","cleanupFunctions","map","forEach","cleanup","updateInquiries","getAgentsDepartments","removeGlobalListener","addGlobalListener","subscribe","config","autoAssignAgent","agentDepartments","cleanUp","length","clear"],"mappings":"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","file":"dynamic/app/livechat/client/lib/stream/queueManager.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { APIClient } from '../../../../utils/client';\nimport { LivechatInquiry } from '../../collections/LivechatInquiry';\nimport { inquiryDataStream } from './inquiry';\nimport { callWithErrorHandling } from '../../../../../client/lib/utils/callWithErrorHandling';\nimport { getUserPreference } from '../../../../utils';\nimport { CustomSounds } from '../../../../custom-sounds/client/lib/CustomSounds';\n\nconst departments = new Set();\n\nconst newInquirySound = () => {\n\tconst userId = Meteor.userId();\n\tconst audioVolume = getUserPreference(userId, 'notificationsSoundVolume');\n\tconst newRoomNotification = getUserPreference(userId, 'newRoomNotification');\n\n\tif (newRoomNotification !== 'none') {\n\t\tCustomSounds.play(newRoomNotification, {\n\t\t\tvolume: Number((audioVolume / 100).toPrecision(2)),\n\t\t});\n\t}\n};\n\nconst events = {\n\tadded: (inquiry) => {\n\t\tdelete inquiry.type;\n\t\tdepartments.has(inquiry.department) && LivechatInquiry.insert({ ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tnewInquirySound();\n\t},\n\tchanged: (inquiry) => {\n\t\tif (inquiry.status !== 'queued' || (inquiry.department && !departments.has(inquiry.department))) {\n\t\t\treturn LivechatInquiry.remove(inquiry._id);\n\t\t}\n\t\tdelete inquiry.type;\n\t\tconst saveResult = LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tif (saveResult?.insertedId) {\n\t\t\tnewInquirySound();\n\t\t}\n\t},\n\tremoved: (inquiry) => LivechatInquiry.remove(inquiry._id),\n};\n\nconst updateCollection = (inquiry) => {\n\tevents[inquiry.type](inquiry);\n};\n\nconst getInquiriesFromAPI = async () => {\n\tconst { inquiries } = await APIClient.v1.get('livechat/inquiries.queued?sort={\"ts\": 1}');\n\treturn inquiries;\n};\n\nconst removeListenerOfDepartment = (departmentId) => {\n\tinquiryDataStream.removeListener(`department/${departmentId}`, updateCollection);\n\tdepartments.delete(departmentId);\n};\n\nconst appendListenerToDepartment = (departmentId) => {\n\tdepartments.add(departmentId);\n\tinquiryDataStream.on(`department/${departmentId}`, updateCollection);\n\treturn () => removeListenerOfDepartment(departmentId);\n};\nconst addListenerForeachDepartment = async (departments = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));\n\nconst getAgentsDepartments = async (userId) => {\n\tconst { departments } = await APIClient.v1.get(`livechat/agents/${userId}/departments?enabledDepartmentsOnly=true`);\n\treturn departments;\n};\n\nconst removeGlobalListener = () => inquiryDataStream.removeListener('public', updateCollection);\n\nconst addGlobalListener = () => {\n\tinquiryDataStream.on('public', updateCollection);\n\treturn removeGlobalListener;\n};\n\nconst subscribe = async (userId) => {\n\tconst config = await callWithErrorHandling('livechat:getRoutingConfig');\n\tif (config && config.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tconst agentDepartments = (await getAgentsDepartments(userId)).map((department) => department.departmentId);\n\n\tconst cleanUp = agentDepartments.length ? await addListenerForeachDepartment(agentDepartments) : addGlobalListener();\n\n\tupdateInquiries(await getInquiriesFromAPI());\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});\n\t\tremoveGlobalListener();\n\t\tcleanUp && cleanUp();\n\t\tdepartments.clear();\n\t};\n};\n\nexport const initializeLivechatInquiryStream = (() => {\n\tlet cleanUp;\n\n\treturn async (...args) => {\n\t\tcleanUp && cleanUp();\n\t\tcleanUp = await subscribe(...args);\n\t};\n})();\n"]}