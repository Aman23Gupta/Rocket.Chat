{"version":3,"sources":["meteor://ðŸ’»app/client/views/setupWizard/steps/AdminInfoStep.tsx"],"names":[],"mappings":";;;;;;;;AAAA;;AAAS,MAAe,KAAf,CAAqB,sCAArB,EAAkD;AAAA;AAAA;AAAA;;AAAA,CAAlD,EAAkD,CAAlD;AAAT;AAAS,MAAe,KAAf,CAAqB,4BAArB,EAAkD;AAAA;AAAA;AAAA;;AAAA,CAAlD,EAAkD,CAAlD;AAAkD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAO3D,MAAM,aAAa,GAAG,MAAmB;AACxC,QAAM,CAAC,GAAG,cAAc,EAAxB;AACA,QAAM,2BAA2B,GAAG,UAAU,CAAC,4BAAD,CAA9C;AACA,QAAM,cAAc,GAAG,IAAI,MAAJ,YAAe,2BAAf,OAAvB;AAEA,QAAM;AACL,mBAAe,EAAE;AAAE;AAAF,KADZ;AAEL,sBAFK;AAGL,gBAHK;AAIL,eAJK;AAKL;AALK,MAMF,qBAAqB,EANzB,CALwC,CAaxC;;AACA,QAAM,gBAAgB,GAAI,QAAD,IAAuC;AAC/D,QAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,QAApB,CAAL,EAAoC;AACnC,aAAO,CAAC,CAAC,kBAAD,CAAR;AACA;;AAED,WAAO,IAAP;AACA,GAND;;AAQA,QAAM,YAAY,GAAqD,MAAO,IAAP,IAAe;AACrF,sBAAkB,CAAE,SAAD,oCAAqB,SAArB;AAAgC,eAAS,EAAE;AAA3C,MAAD,CAAlB;AACA,gBAAY;AACZ,GAHD;;AAKA,sBACC,oBAAC,aAAD;AACC,oBAAgB,EAAG,QAAD,IAAuB,QAAQ,CAAC,MAAT,GAAkB,CAD5D;AAEC,qBAAiB,EAAE,EAFpB;AAGC,oBAAgB,EAAE,gBAHnB;AAIC,iBAAa,EAAE,aAJhB;AAKC,eAAW,EAAE,WALd;AAMC,iBAAa,EAAE,SANhB;AAOC,aAAS,EAAE,CAPZ;AAQC,YAAQ,EAAE;AARX,IADD;AAYA,CAvCD;;AAPA,OAAO,aAAP,CAgDe,aAhDf,E","file":"dynamic/client/views/setupWizard/steps/AdminInfoStep.tsx","sourcesContent":["import { AdminInfoPage } from '@rocket.chat/onboarding-ui';\nimport React, { ReactElement, ComponentProps } from 'react';\n\nimport { useSetting } from '../../../contexts/SettingsContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { useSetupWizardContext } from '../contexts/SetupWizardContext';\n\nconst AdminInfoStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst regexpForUsernameValidation = useSetting('UTF8_User_Names_Validation');\n\tconst usernameRegExp = new RegExp(`^${regexpForUsernameValidation}$`);\n\n\tconst {\n\t\tsetupWizardData: { adminData },\n\t\tsetSetupWizardData,\n\t\tgoToNextStep,\n\t\tcurrentStep,\n\t\tvalidateEmail,\n\t} = useSetupWizardContext();\n\n\t// TODO: check if username exists\n\tconst validateUsername = (username: string): boolean | string => {\n\t\tif (!usernameRegExp.test(username)) {\n\t\t\treturn t('Invalid_username');\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst handleSubmit: ComponentProps<typeof AdminInfoPage>['onSubmit'] = async (data) => {\n\t\tsetSetupWizardData((prevState) => ({ ...prevState, adminData: data }));\n\t\tgoToNextStep();\n\t};\n\n\treturn (\n\t\t<AdminInfoPage\n\t\t\tvalidatePassword={(password): boolean => password.length > 0}\n\t\t\tpasswordRulesHint={''}\n\t\t\tvalidateUsername={validateUsername}\n\t\t\tvalidateEmail={validateEmail}\n\t\t\tcurrentStep={currentStep}\n\t\t\tinitialValues={adminData}\n\t\t\tstepCount={4}\n\t\t\tonSubmit={handleSubmit}\n\t\t/>\n\t);\n};\n\nexport default AdminInfoStep;\n"]}