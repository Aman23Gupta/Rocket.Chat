{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/Call/Jitsi/lib/JitsiBridge.js"],"names":["module","export","JitsiBridge","Emitter","link","v","JitsiMeetExternalAPI","constructor","heartbeat","openNewWindow","ssl","domain","jitsiRoomName","accessToken","desktopSharingChromeExtId","name","window","undefined","needsStart","start","domTarget","heartbeatTimer","setInterval","emit","once","clearTimeout","protocol","configOverwrite","interfaceConfigOverwrite","queryString","newWindow","open","timer","closed","dispose","focus","width","height","api","executeCommand","clearInterval"],"mappings":"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","file":"dynamic/client/views/room/contextualBar/Call/Jitsi/lib/JitsiBridge.js","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport { JitsiMeetExternalAPI } from './Jitsi';\n\nexport class JitsiBridge extends Emitter {\n\tconstructor({ openNewWindow, ssl, domain, jitsiRoomName, accessToken, desktopSharingChromeExtId, name }, heartbeat) {\n\t\tsuper();\n\n\t\tthis.openNewWindow = openNewWindow;\n\t\tthis.ssl = ssl;\n\t\tthis.domain = domain;\n\t\tthis.jitsiRoomName = jitsiRoomName;\n\t\tthis.accessToken = accessToken;\n\t\tthis.desktopSharingChromeExtId = desktopSharingChromeExtId;\n\t\tthis.name = name;\n\t\tthis.heartbeat = heartbeat;\n\t\tthis.window = undefined;\n\t\tthis.needsStart = false;\n\t}\n\n\tstart(domTarget) {\n\t\tif (!this.needsStart) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.needsStart = false;\n\n\t\tconst heartbeatTimer = setInterval(() => this.emit('HEARTBEAT', true), this.heartbeat);\n\t\tthis.once('dispose', () => clearTimeout(heartbeatTimer));\n\n\t\tconst { openNewWindow, ssl, domain, jitsiRoomName, accessToken, desktopSharingChromeExtId, name } = this;\n\n\t\tconst protocol = ssl ? 'https://' : 'http://';\n\n\t\tconst configOverwrite = {\n\t\t\tdesktopSharingChromeExtId,\n\t\t};\n\n\t\tconst interfaceConfigOverwrite = {};\n\n\t\tif (openNewWindow) {\n\t\t\tconst queryString = accessToken ? `?jwt=${accessToken}` : '';\n\t\t\tconst newWindow = window.open(`${protocol + domain}/${jitsiRoomName}${queryString}`, jitsiRoomName);\n\n\t\t\tif (!newWindow) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst timer = setInterval(() => {\n\t\t\t\tif (newWindow.closed) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}, 1000);\n\n\t\t\tthis.once('dispose', () => clearTimeout(timer));\n\t\t\tthis.window = newWindow;\n\t\t\treturn newWindow.focus();\n\t\t}\n\n\t\tconst width = 'auto';\n\t\tconst height = 500;\n\n\t\tconst api = new JitsiMeetExternalAPI(\n\t\t\tdomain,\n\t\t\tjitsiRoomName,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tdomTarget,\n\t\t\tconfigOverwrite,\n\t\t\tinterfaceConfigOverwrite,\n\t\t\t!ssl,\n\t\t\taccessToken,\n\t\t); // eslint-disable-line no-undef\n\t\tapi.executeCommand('displayName', [name]);\n\t\tthis.once('dispose', () => api.dispose());\n\t}\n\n\tdispose() {\n\t\tclearInterval(this.timer);\n\t\tthis.emit('dispose', true);\n\t}\n}\n"]}