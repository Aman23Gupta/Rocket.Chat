{"version":3,"sources":["meteor://ðŸ’»app/client/views/setupWizard/steps/CloudAccountConfirmation.tsx"],"names":[],"mappings":";;;;;;;;AAAA;AAAS,MAA0B,KAA1B,CAAgC,4BAAhC,EAA6D;AAAA;AAAA;AAAA;;AAAA,CAA7D,EAA6D,CAA7D;AAA6D;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAStE,MAAM,eAAe,GAAI,QAAD,IAAgC,QAAQ,GAAG,QAAQ,GAAG,IAAd,GAAqB,CAArF;;AAEA,MAAM,wBAAwB,GAAG,MAAmB;AACnD,QAAM;AACL,kBADK;AAEL,YAFK;AAGL,mBAAe,EAAE;AAAE;AAAF,KAHZ;AAIL;AAJK,MAKF,qBAAqB,EALzB;AAMA,QAAM,kBAAkB,GAAG,kBAAkB,CAAC,mBAAD,CAA7C;AACA,QAAM,qBAAqB,GAAG,WAAW,CAAC,KAAD,EAAQ,wBAAR,CAAzC;AACA,QAAM,oBAAoB,GAAG,uBAAuB,EAApD;AACA,QAAM,CAAC,GAAG,cAAc,EAAxB;AAEA,QAAM,eAAe,GAAG,WAAW,CAAC,YAAW;AAC9C,QAAI;AACH,YAAM;AAAE;AAAF,UAAe,MAAM,qBAAqB,CAAC;AAChD,kBAAU,EAAE,gBAAgB,CAAC;AADmB,OAAD,CAAhD;;AAIA,UAAI,gBAAgB,QAAhB,IAA4B,QAAQ,CAAC,UAAzC,EAAqD;AACpD,cAAM,iBAAiB,EAAvB;AACA,4BAAoB,CAAC;AAAE,cAAI,EAAE,SAAR;AAAmB,iBAAO,EAAE,CAAC,CAAC,yBAAD;AAA7B,SAAD,CAApB;AACA,eAAO,kBAAkB,CAAC,WAAD,CAAzB;AACA;AACD,KAVD,CAUE,OAAO,KAAP,EAAc;AACf,0BAAoB,CAAC;AAAE,YAAI,EAAE,OAAR;AAAiB,eAAO,EAAE;AAA1B,OAAD,CAApB;AACA;AACD,GAdkC,EAchC,CAAC,qBAAD,EAAwB,gBAAgB,CAAC,WAAzC,EAAsD,kBAAtD,EAA0E,iBAA1E,EAA6F,oBAA7F,EAAmH,CAAnH,CAdgC,CAAnC;AAgBA,WAAS,CAAC,MAAK;AACd,UAAM,YAAY,GAAG,WAAW,CAAC,MAAM,eAAe,EAAtB,EAA0B,eAAe,CAAC,gBAAgB,CAAC,QAAlB,CAAzC,CAAhC;AAEA,WAAO,MAAY,aAAa,CAAC,YAAD,CAAhC;AACA,GAJQ,EAIN,CAAC,eAAD,EAAkB,gBAAgB,CAAC,QAAnC,CAJM,CAAT;AAMA,sBACC,oBAAC,wBAAD;AACC,gBAAY,EAAE,gBAAgB,CAAC,UADhC;AAEC,gBAAY,EAAE,gBAAgB,CAAC,SAFhC;AAGC,wBAAoB,EAAE,MAAqB,cAAc,CAAC;AAAE,WAAK,EAAE,gBAAgB,CAAC,UAA1B;AAAsC,YAAM,EAAE;AAA9C,KAAD,CAH1D;AAIC,wBAAoB,EAAE,MAAY,QAAQ,CAAC,CAAD;AAJ3C,IADD;AAQA,CA1CD;;AAXA,OAAO,aAAP,CAuDe,wBAvDf,E","file":"dynamic/client/views/setupWizard/steps/CloudAccountConfirmation.tsx","sourcesContent":["import { AwaitingConfirmationPage } from '@rocket.chat/onboarding-ui';\nimport React, { ReactElement, useEffect, useCallback } from 'react';\n\nimport { useEndpoint } from '../../../contexts/ServerContext';\nimport { useSettingSetValue } from '../../../contexts/SettingsContext';\nimport { useToastMessageDispatch } from '../../../contexts/ToastMessagesContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { useSetupWizardContext } from '../contexts/SetupWizardContext';\n\nconst setIntervalTime = (interval?: number): number => (interval ? interval * 1000 : 0);\n\nconst CloudAccountConfirmation = (): ReactElement => {\n\tconst {\n\t\tregisterServer,\n\t\tgoToStep,\n\t\tsetupWizardData: { registrationData },\n\t\tsaveWorkspaceData,\n\t} = useSetupWizardContext();\n\tconst setShowSetupWizard = useSettingSetValue('Show_Setup_Wizard');\n\tconst cloudConfirmationPoll = useEndpoint('GET', 'cloud.confirmationPoll');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\n\tconst getConfirmation = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\tdeviceCode: registrationData.device_code,\n\t\t\t});\n\n\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\tawait saveWorkspaceData();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Your_workspace_is_ready') });\n\t\t\t\treturn setShowSetupWizard('completed');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t}, [cloudConfirmationPoll, registrationData.device_code, setShowSetupWizard, saveWorkspaceData, dispatchToastMessage, t]);\n\n\tuseEffect(() => {\n\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(registrationData.interval));\n\n\t\treturn (): void => clearInterval(pollInterval);\n\t}, [getConfirmation, registrationData.interval]);\n\n\treturn (\n\t\t<AwaitingConfirmationPage\n\t\t\temailAddress={registrationData.cloudEmail}\n\t\t\tsecurityCode={registrationData.user_code}\n\t\t\tonResendEmailRequest={(): Promise<void> => registerServer({ email: registrationData.cloudEmail, resend: true })}\n\t\t\tonChangeEmailRequest={(): void => goToStep(3)}\n\t\t/>\n\t);\n};\n\nexport default CloudAccountConfirmation;\n"]}