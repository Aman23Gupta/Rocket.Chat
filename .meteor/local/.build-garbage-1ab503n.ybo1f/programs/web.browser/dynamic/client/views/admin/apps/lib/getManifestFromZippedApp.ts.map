{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/apps/lib/getManifestFromZippedApp.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,0BAA4B;AAA5B,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAK9C,eAAe,gBAAf,CAAgC,IAAhC,EAA0C;AACzC,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACtC,UAAM,UAAU,GAAG,IAAI,UAAJ,EAAnB;;AACA,cAAU,CAAC,MAAX,GAAqB,CAAD,IAAa,OAAO,CAAC,IAAI,UAAJ,CAAgB,CAAC,CAAC,MAAF,CAAiB,MAAjC,CAAD,CAAxC;;AACA,cAAU,CAAC,OAAX,GAAsB,CAAD,IAAa,MAAM,CAAC,CAAD,CAAxC;;AACA,cAAU,CAAC,iBAAX,CAA6B,IAA7B;AACA,GALM,CAAP;AAMA;;AAED,SAAS,cAAT,CAAwB,eAAxB,EAAmD;AAClD,SAAO,SAAS,CAAC,eAAD,CAAhB;AACA;;AAED,SAAS,cAAT,CAAwB,iBAAxB,EAA2D;AAC1D,MAAI,CAAC,iBAAiB,CAAC,UAAD,CAAtB,EAAoC;AACnC,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACA;;AAED,MAAI;AACH,WAAO,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,iBAAiB,CAAC,UAAD,CAAlB,CAApB,CAAP;AACA,GAFD,CAEE,OAAO,CAAP,EAAU;AACX,UAAM,IAAI,KAAJ,qCAAuC,CAAC,CAAC,OAAzC,EAAN;AACA;AACD;;AAED,eAAe,cAAf,CAA8B,SAA9B,EAA0D;AACzD,MAAI;AACH,QAAI,SAAS,YAAY,IAAzB,EAA+B;AAC9B,eAAS,GAAG,MAAM,gBAAgB,CAAC,SAAD,CAAlC;AACA;;AAED,WAAO,cAAc,CAAC,SAAD,CAArB;AACA,GAND,CAME,OAAO,CAAP,EAAU;AACX,WAAO,CAAC,KAAR,CAAc,CAAd;AACA,UAAM,CAAN;AACA;AACD;;AAEM,eAAe,wBAAf,CAAwC,SAAxC,EAAuD;AAC7D,QAAM,cAAc,GAAG,MAAM,cAAc,CAAC,SAAD,CAA3C;AACA,SAAO,cAAc,CAAC,cAAD,CAArB;AACA,C","file":"dynamic/client/views/admin/apps/lib/getManifestFromZippedApp.ts","sourcesContent":["import { unzipSync, strFromU8 } from 'fflate';\n\ntype Uint8ArrayObject = { [fileName: string]: Uint8Array };\ntype AppManifestSchema = { [key: string]: string };\n\nasync function fileToUint8Array(file: File): Promise<Uint8Array> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = (e): void => resolve(new Uint8Array((e.target as any).result as Uint8Array));\n\t\tfileReader.onerror = (e): void => reject(e);\n\t\tfileReader.readAsArrayBuffer(file);\n\t});\n}\n\nfunction unzipAppBuffer(zippedAppBuffer: Uint8Array): Uint8ArrayObject {\n\treturn unzipSync(zippedAppBuffer);\n}\n\nfunction getAppManifest(unzippedAppBuffer: Uint8ArrayObject): AppManifestSchema {\n\tif (!unzippedAppBuffer['app.json']) {\n\t\tthrow new Error('No app.json file found in the zip');\n\t}\n\n\ttry {\n\t\treturn JSON.parse(strFromU8(unzippedAppBuffer['app.json']));\n\t} catch (e) {\n\t\tthrow new Error(`Failed to parse app.json: ${e.message}`);\n\t}\n}\n\nasync function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\n\ttry {\n\t\tif (zippedApp instanceof File) {\n\t\t\tzippedApp = await fileToUint8Array(zippedApp);\n\t\t}\n\n\t\treturn unzipAppBuffer(zippedApp);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\tthrow e;\n\t}\n}\n\nexport async function getManifestFromZippedApp(zippedApp: File): Promise<AppManifestSchema> {\n\tconst unzippedBuffer = await unzipZippedApp(zippedApp);\n\treturn getAppManifest(unzippedBuffer);\n}\n"]}