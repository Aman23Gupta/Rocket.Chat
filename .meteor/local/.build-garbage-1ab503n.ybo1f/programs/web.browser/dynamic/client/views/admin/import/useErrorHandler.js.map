{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/import/useErrorHandler.js"],"names":["module","export","useErrorHandler","useMutableCallback","link","v","useToastMessageDispatch","useTranslation","t","dispatchToastMessage","error","defaultMessage","console","type","message","errorType","xhr","responseJSON","has"],"mappings":";;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,iBAAe,EAAC,MAAIA;AAArB,CAAd;AAAqD,IAAIC,kBAAJ;AAAuBH,MAAM,CAACI,IAAP,CAAY,6BAAZ,EAA0C;AAACD,oBAAkB,CAACE,CAAD,EAAG;AAACF,sBAAkB,GAACE,CAAnB;AAAqB;;AAA5C,CAA1C,EAAwF,CAAxF;AAA2F,IAAIC,uBAAJ;AAA4BN,MAAM,CAACI,IAAP,CAAY,wCAAZ,EAAqD;AAACE,yBAAuB,CAACD,CAAD,EAAG;AAACC,2BAAuB,GAACD,CAAxB;AAA0B;;AAAtD,CAArD,EAA6G,CAA7G;AAAgH,IAAIE,cAAJ;AAAmBP,MAAM,CAACI,IAAP,CAAY,sCAAZ,EAAmD;AAACG,gBAAc,CAACF,CAAD,EAAG;AAACE,kBAAc,GAACF,CAAf;AAAiB;;AAApC,CAAnD,EAAyF,CAAzF;;AAK/T,MAAMH,eAAe,GAAG,MAAM;AACpC,QAAMM,CAAC,GAAGD,cAAc,EAAxB;AACA,QAAME,oBAAoB,GAAGH,uBAAuB,EAApD;AAEA,SAAOH,kBAAkB,CAAC,CAACO,KAAD,EAAQC,cAAR,KAA2B;AAAA;;AACpDC,WAAO,CAACF,KAAR,CAAcA,KAAd;;AAEA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9BD,0BAAoB,CAAC;AAAEI,YAAI,EAAE,OAAR;AAAiBC,eAAO,EAAEJ;AAA1B,OAAD,CAApB;AACA;AACA;;AAED,UAAMK,SAAS,GAAGL,KAAH,aAAGA,KAAH,qCAAGA,KAAK,CAAEM,GAAV,wEAAG,WAAYC,YAAf,0DAAG,sBAA0BF,SAA5C;;AAEA,QAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCP,CAAC,CAACU,GAAF,CAAMH,SAAN,CAArC,EAAuD;AACtDN,0BAAoB,CAAC;AAAEI,YAAI,EAAE,OAAR;AAAiBC,eAAO,EAAEN,CAAC,CAACO,SAAD;AAA3B,OAAD,CAApB;AACA;AACA;;AAED,QAAI,QAAOA,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEL,KAAlB,MAA4B,QAA5B,IAAwCF,CAAC,CAACU,GAAF,CAAMH,SAAS,CAACL,KAAhB,CAA5C,EAAoE;AACnED,0BAAoB,CAAC;AAAEI,YAAI,EAAE,OAAR;AAAiBC,eAAO,EAAEN,CAAC,CAACO,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEL,KAAZ;AAA3B,OAAD,CAApB;AACA;AACA;;AAED,QAAIC,cAAJ,EAAoB;AACnBF,0BAAoB,CAAC;AAAEI,YAAI,EAAE,OAAR;AAAiBC,eAAO,EAAEH;AAA1B,OAAD,CAApB;AACA;AACD,GAvBwB,CAAzB;AAwBA,CA5BM,C","file":"dynamic/client/views/admin/import/useErrorHandler.js","sourcesContent":["import { useMutableCallback } from '@rocket.chat/fuselage-hooks';\n\nimport { useToastMessageDispatch } from '../../../contexts/ToastMessagesContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\n\nexport const useErrorHandler = () => {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutableCallback((error, defaultMessage) => {\n\t\tconsole.error(error);\n\n\t\tif (typeof error === 'string') {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\treturn;\n\t\t}\n\n\t\tconst errorType = error?.xhr?.responseJSON?.errorType;\n\n\t\tif (typeof errorType === 'string' && t.has(errorType)) {\n\t\t\tdispatchToastMessage({ type: 'error', message: t(errorType) });\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof errorType?.error === 'string' && t.has(errorType.error)) {\n\t\t\tdispatchToastMessage({ type: 'error', message: t(errorType?.error) });\n\t\t\treturn;\n\t\t}\n\n\t\tif (defaultMessage) {\n\t\t\tdispatchToastMessage({ type: 'error', message: defaultMessage });\n\t\t}\n\t});\n};\n"]}