{"version":3,"sources":["meteor://ðŸ’»app/client/views/omnichannel/sidebar/OmnichannelSidebar.tsx"],"names":[],"mappings":";;;;;;;;AAAA,WAAO,WAAP,EAAgB,SAAhB,EAA6B,IAA7B;AAA6B,MAAe,CAAI,IAAnB,CAAqB,OAArB,EAA2B;AAAA,SAAQ;AAAA;AAAA,GAAR;;AAAQ;AAAA;AAAA,GAAR;;AAAQ;AAAA;AAAA,GAAR;;AAAQ;AAAA;AAAA;;AAAR,CAA3B,EAAmC,CAAnC;AAAmC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAWhE,MAAM,kBAAkB,GAAO,MAAK;AACnC,QAAM,KAAK,GAAG,eAAe,CAAC,iBAAD,CAA7B;AACA,QAAM,CAAC,GAAG,cAAc,EAAxB;AAEA,QAAM,oBAAoB,GAAG,WAAW,CAAC,MAAK;AAC7C,QAAI,gBAAgB,EAApB,EAAwB;AACvB,UAAI,CAAC,KAAL;AACA;AACA;;AAED,WAAO,CAAC,SAAR;AACA,GAPuC,EAOrC,EAPqC,CAAxC;AASA,QAAM,YAAY,GAAG,eAAe,EAApC;AACA,QAAM,CAAC,gBAAD,EAAmB,kBAAnB,EAAuC,wBAAvC,EAAiE,qBAAjE,IAA0F,YAAhG;AACA,QAAM,WAAW,GAAG,YAAY,CAAC,gBAAD,aAAC,gBAAD,cAAC,gBAAD,GAAqB,EAArB,EAAyB,kBAAzB,EAA6C,wBAA7C,CAAhC;AAEA,WAAS,CAAC,MAAK;AACd,QAAI,qBAAqB,KAAK,aAA9B,EAA6C;AAC5C,aAAO,CAAC,SAAR;AACA;AACD,GAJQ,EAIN,CAAC,qBAAD,CAJM,CAAT;AAMA,sBACC,oBAAC,gBAAD;AAAkB,cAAU;AAA5B,kBACC,oBAAC,OAAD,qBACC,oBAAC,OAAD,CAAS,MAAT;AAAgB,WAAO,EAAE,oBAAzB;AAA+C,SAAK,eAAE,0CAAG,CAAC,CAAC,aAAD,CAAJ;AAAtD,IADD,eAEC,oBAAC,OAAD,CAAS,OAAT,qBACC,oBAAC,OAAD,CAAS,cAAT;AAAwB,SAAK,EAAE,KAA/B;AAAsC,eAAW,EAAE;AAAnD,IADD,CAFD,CADD,CADD;AAUA,CAjCD;;AAXA,OAAO,aAAP,eA8Ce,IAAI,CAAC,kBAAD,CA9CnB,E","file":"dynamic/client/views/omnichannel/sidebar/OmnichannelSidebar.tsx","sourcesContent":["import React, { useCallback, useEffect, FC, memo } from 'react';\nimport { useSubscription } from 'use-subscription';\n\nimport { menu, SideNav } from '../../../../app/ui-utils/client';\nimport Sidebar from '../../../components/Sidebar';\nimport { useRoutePath, useCurrentRoute } from '../../../contexts/RouterContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { isLayoutEmbedded } from '../../../lib/utils/isLayoutEmbedded';\nimport SettingsProvider from '../../../providers/SettingsProvider';\nimport { itemsSubscription } from '../sidebarItems';\n\nconst OmnichannelSidebar: FC = () => {\n\tconst items = useSubscription(itemsSubscription);\n\tconst t = useTranslation();\n\n\tconst closeOmnichannelFlex = useCallback(() => {\n\t\tif (isLayoutEmbedded()) {\n\t\t\tmenu.close();\n\t\t\treturn;\n\t\t}\n\n\t\tSideNav.closeFlex();\n\t}, []);\n\n\tconst currentRoute = useCurrentRoute();\n\tconst [currentRouteName, currentRouteParams, currentQueryStringParams, currentRouteGroupName] = currentRoute;\n\tconst currentPath = useRoutePath(currentRouteName ?? '', currentRouteParams, currentQueryStringParams);\n\n\tuseEffect(() => {\n\t\tif (currentRouteGroupName !== 'omnichannel') {\n\t\t\tSideNav.closeFlex();\n\t\t}\n\t}, [currentRouteGroupName]);\n\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={closeOmnichannelFlex} title={<>{t('Omnichannel')}</>} />\n\t\t\t\t<Sidebar.Content>\n\t\t\t\t\t<Sidebar.ItemsAssembler items={items} currentPath={currentPath} />\n\t\t\t\t</Sidebar.Content>\n\t\t\t</Sidebar>\n\t\t</SettingsProvider>\n\t);\n};\n\nexport default memo(OmnichannelSidebar);\n"]}