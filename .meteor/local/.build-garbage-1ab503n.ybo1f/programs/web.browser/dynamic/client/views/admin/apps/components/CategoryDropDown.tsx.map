{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/apps/components/CategoryDropDown.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAAS,MAAS,CAAE,IAAX,CAAW,gCAAX,EAA+C;AAAA;AAAA;AAAA;;AAAA,CAA/C,EAA+C,CAA/C;;AAA+C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAxD;AAAS,MAAW,KAAX,CAAiB,6BAAjB,EAA+C;AAAA;AAAA;AAAA;;AAAA,CAA/C,EAA+C,CAA/C;AAA+C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAQxD,MAAM,gBAAgB,GAKlB,QAAmC;AAAA,MAAlC;AAAE,QAAF;AAAQ;AAAR,GAAkC;AAAA,MAAX,KAAW;;AACtC,QAAM,SAAS,GAAG,MAAM,CAAc,IAAd,CAAxB;AACA,QAAM,CAAC,SAAD,EAAY,eAAZ,IAA+B,SAAS,CAAC,KAAD,CAA9C;AAEA,QAAM,OAAO,GAAG,WAAW,CACzB,CAAD,IAAM;AAAA;;AACL,QAAI,CAAC,CAAC,MAAF,KAAa,SAAS,CAAC,OAAvB,IAAkC,wBAAC,SAAS,CAAC,OAAX,+CAAC,mBAAmB,QAAnB,CAA4B,CAAC,CAAC,MAA9B,CAAD,CAAtC,EAA8E;AAC7E,qBAAe,CAAC,KAAD,CAAf;AACA;AACA;;AACD,KAAC,CAAC,cAAF;AACA,KAAC,CAAC,eAAF;AACA,KAAC,CAAC,wBAAF;AACA,WAAO,KAAP;AACA,GAVyB,EAW1B,CAAC,eAAD,CAX0B,CAA3B;AAcA,sBACC,uDACC,oBAAC,sBAAD;AAAwB,OAAG,EAAE,SAA7B;AAAwC,WAAO,EAAE;AAAjD,KAA6E,KAA7E,EADD,EAEE,SAAS,iBACT,oBAAC,2BAAD;AAA6B,OAAG,EAAE,SAAlC;AAA6C,WAAO,EAAE;AAAtD,kBACC,oBAAC,oBAAD;AAAsB,UAAM,EAAE,IAA9B;AAAoC,cAAU,EAAE;AAAhD,IADD,CAHF,CADD;AAUA,CAjCD;;AARA,OAAO,aAAP,CA2Ce,gBA3Cf,E","file":"dynamic/client/views/admin/apps/components/CategoryDropDown.tsx","sourcesContent":["import { useToggle } from '@rocket.chat/fuselage-hooks';\nimport React, { useRef, FC, useCallback, ComponentProps } from 'react';\n\nimport { CategoryDropDownListProps } from '../definitions/CategoryDropdownDefinitions';\nimport CategoryDropDownAnchor from './CategoryDropDownAnchor';\nimport CategoryDropDownList from './CategoryDropDownList';\nimport CategoryDropDownListWrapper from './CategoryDropDownListWrapper';\n\nconst CategoryDropDown: FC<\n\t{\n\t\tdata: CategoryDropDownListProps['groups'];\n\t\tonSelected: CategoryDropDownListProps['onSelected'];\n\t} & Partial<Pick<ComponentProps<typeof CategoryDropDownAnchor>, 'small' | 'mini'>>\n> = ({ data, onSelected, ...props }) => {\n\tconst reference = useRef<HTMLElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (e.target !== reference.current && !reference.current?.contains(e.target)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\te.stopImmediatePropagation();\n\t\t\treturn false;\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<CategoryDropDownAnchor ref={reference} onClick={toggleCollapsed as any} {...props} />\n\t\t\t{collapsed && (\n\t\t\t\t<CategoryDropDownListWrapper ref={reference} onClose={onClose}>\n\t\t\t\t\t<CategoryDropDownList groups={data} onSelected={onSelected} />\n\t\t\t\t</CategoryDropDownListWrapper>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default CategoryDropDown;\n"]}