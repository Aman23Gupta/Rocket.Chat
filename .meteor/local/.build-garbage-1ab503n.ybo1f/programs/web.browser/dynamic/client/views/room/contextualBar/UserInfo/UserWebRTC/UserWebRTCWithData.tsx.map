{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/UserInfo/UserWebRTC/UserWebRTCWithData.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAAY,MAAE,CAAM,IAAR,CAAQ,gCAAR,EAAiC;AAAA;AAAA;AAAA;;AAAA,CAAjC,EAAiC,CAAjC;;AAAiC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA7C;AAAO,MAAO,KAAP,CAAa,wBAAb,EAAsC;AAAA;AAAA;AAAA;;AAAA,CAAtC,EAAsC,CAAtC;AAAsC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAc7C,MAAM,kBAAkB,GAAI,KAAD,IAA4E;AACtG,QAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,GAAP,CAA5B;AACA,QAAM;AAAE;AAAF,MAAqB,UAA3B;AAEA,QAAM,YAAY,GAAG,GAAH,qUAcG,MAAM,CAAC,KAdV,CAAlB;;AAiBA,MAAI,cAAJ,EAAoB;AACnB,wBAAO,YAAY,eAClB,oBAAC,GAAD;AAAK,eAAS,EAAE;AAAhB,oBACC,oBAAC,UAAD,eAAgB,KAAhB;AAAuB,gBAAU,EAAE;AAAnC,OADD,EAEE,UAAU,CAAC,aAAX,mBAA8B,oBAAC,iBAAD;AAAmB,gBAAU,EAAE;AAA/B,MAFhC,CADkB,EAKlB,YAAY,CAAC,cAAD,CALM,CAAnB;AAOA;;AAED,sBACC,uDACC,oBAAC,WAAD,CAAa,iBAAb,qBACC,oBAAC,UAAD,eAAgB,KAAhB;AAAuB,cAAU,EAAE;AAAnC,KADD,CADD,EAIE,UAAU,CAAC,aAAX,mBACA,oBAAC,WAAD,CAAa,MAAb,qBACC,oBAAC,iBAAD;AAAmB,cAAU,EAAE;AAA/B,IADD,CALF,CADD;AAYA,CA3CD;;AAdA,OAAO,aAAP,CA2De,kBA3Df,E","file":"dynamic/client/views/room/contextualBar/UserInfo/UserWebRTC/UserWebRTCWithData.tsx","sourcesContent":["import { css } from '@rocket.chat/css-in-js';\nimport { Box } from '@rocket.chat/fuselage';\nimport colors from '@rocket.chat/fuselage-tokens/colors.json';\nimport React, { ReactElement } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { IRoom } from '../../../../../../definition/IRoom';\nimport { IUser } from '../../../../../../definition/IUser';\nimport VerticalBar from '../../../../../components/VerticalBar';\nimport { createAnchor } from '../../../../../lib/utils/createAnchor';\nimport { useWebRTC } from '../../../hooks/useWebRTC';\nimport UserWebRTC from './UserWebRTC';\nimport UserWebRTCButtons from './UserWebRTCButtons';\n\nconst UserWebRTCWithData = (props: { rid: IRoom['_id']; peerName: IUser['username'] }): ReactElement => {\n\tconst webRTCData = useWebRTC(props.rid);\n\tconst { overlayEnabled } = webRTCData;\n\n\tconst videoOverlay = css`\n\t\tposition: fixed;\n\t\tz-index: 1000;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\n\t\tdisplay: flex;\n\t\toverflow-y: auto;\n\t\tflex-direction: column;\n\n\t\tpadding: var(--default-small-padding);\n\n\t\tbackground-color: ${colors.white};\n\t`;\n\n\tif (overlayEnabled) {\n\t\treturn createPortal(\n\t\t\t<Box className={videoOverlay}>\n\t\t\t\t<UserWebRTC {...props} webRTCData={webRTCData} />\n\t\t\t\t{webRTCData.isVideoActive() && <UserWebRTCButtons webRTCData={webRTCData} />}\n\t\t\t</Box>,\n\t\t\tcreateAnchor('react-webrtc'),\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<VerticalBar.ScrollableContent>\n\t\t\t\t<UserWebRTC {...props} webRTCData={webRTCData} />\n\t\t\t</VerticalBar.ScrollableContent>\n\t\t\t{webRTCData.isVideoActive() && (\n\t\t\t\t<VerticalBar.Footer>\n\t\t\t\t\t<UserWebRTCButtons webRTCData={webRTCData} />\n\t\t\t\t</VerticalBar.Footer>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default UserWebRTCWithData;\n"]}