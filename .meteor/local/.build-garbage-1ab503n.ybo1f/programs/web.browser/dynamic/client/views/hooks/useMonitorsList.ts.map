{"version":3,"sources":["meteor://ðŸ’»app/client/views/hooks/useMonitorsList.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,iBAAqB,QAAE;AAAvB,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAYvC,MAAM,eAAe,GAC3B,OAD8B,IAO3B;AACH,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,MAAM,IAAI,UAAJ,EAAP,CAA1C;AACA,QAAM,MAAM,GAAG,WAAW,CAAC,MAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAnB,EAA+D,EAA/D,CAA1B;AAEA,QAAM,QAAQ,GAAG,wBAAjB;AAEA,QAAM,WAAW,GAAG,WAAW,CAAC,KAAD,EAAQ,QAAR,CAA/B;AAEA,uBAAqB,CAAC,MAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,QAAM,SAAS,GAAG,WAAW,CAC5B,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,cAAF;AAAY;AAAZ,QAAsB,MAAM,WAAW,CAAC;AAC7C,UAAI,EAAE,OAAO,CAAC,MAD+B;AAE7C,YAAM,EAAE,KAFqC;AAG7C,WAAK,EAAE,GAAG,GAAG;AAHgC,KAAD,CAA7C;AAMA,WAAO;AACN,WAAK,EAAE,QAAQ,CAAC,GAAT,CAAc,OAAD,IAAiB;AACpC,eAAO,CAAC,UAAR,GAAqB,IAAI,IAAJ,CAAS,OAAO,CAAC,UAAjB,CAArB;AACA,eAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,QAAxB;AACA,eAAO,CAAC,KAAR,GAAgB;AAAE,eAAK,EAAE,OAAO,CAAC,GAAjB;AAAsB,eAAK,EAAE,OAAO,CAAC;AAArC,SAAhB;AACA,eAAO,OAAP;AACA,OALM,CADD;AAON,eAAS,EAAE;AAPL,KAAP;AASA,GAjB2B,EAkB5B,CAAC,WAAD,EAAc,OAAO,CAAC,MAAtB,CAlB4B,CAA7B;AAqBA,QAAM;AAAE,iBAAF;AAAiB;AAAjB,MAAsC,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AACA,SAAO;AACN,UADM;AAEN,aAFM;AAGN,iBAHM;AAIN;AAJM,GAAP;AAMA,CA/CM,C","file":"dynamic/client/views/hooks/useMonitorsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { ILivechatMonitorRecord } from '../../../definition/ILivechatMonitorRecord';\nimport { useEndpoint } from '../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../lib/lists/RecordList';\n\ntype MonitorsListOptions = {\n\tfilter: string;\n};\n\nexport const useMonitorsList = (\n\toptions: MonitorsListOptions,\n): {\n\titemsList: RecordList<ILivechatMonitorRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatMonitorRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatMonitorRecord>()), []);\n\n\tconst endpoint = 'livechat/monitors.list';\n\n\tconst getMonitors = useEndpoint('GET', endpoint);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { monitors, total } = await getMonitors({\n\t\t\t\ttext: options.filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: monitors.map((members: any) => {\n\t\t\t\t\tmembers._updatedAt = new Date(members._updatedAt);\n\t\t\t\t\tmembers.label = members.username;\n\t\t\t\t\tmembers.value = { value: members._id, label: members.username };\n\t\t\t\t\treturn members;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getMonitors, options.filter],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}