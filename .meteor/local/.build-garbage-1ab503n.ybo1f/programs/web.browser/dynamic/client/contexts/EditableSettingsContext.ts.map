{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/EditableSettingsContext.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,yBAA2B,QAAO,uBAAlC;AAAkD,8CAAlD;AAAkD,gDAAlD;AAAkD,0EAAlD;AAAkD,kEAAlD;AAAkD;AAAlD,CAAT;AAA2D;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAwBpD,MAAM,uBAAuB,gBAAG,aAAa,CAA+B;AAClF,sBAAoB,EAAE,OAAO;AAC5B,mBAAe,EAAE,MAAiB,SADN;AAE5B,aAAS,EAAE,MAAmB,MAAY;AAFd,GAAP,CAD4D;AAKlF,uBAAqB,EAAE,OAAO;AAC7B,mBAAe,EAAE,MAA0B,EADd;AAE7B,aAAS,EAAE,MAAmB,MAAY;AAFb,GAAP,CAL2D;AASlF,oBAAkB,EAAE,OAAO;AAC1B,mBAAe,EAAE,MAAqB,EADZ;AAE1B,aAAS,EAAE,MAAmB,MAAY;AAFhB,GAAP,CAT8D;AAalF,gBAAc,EAAE,OAAO;AACtB,mBAAe,EAAE,MAAe,EADV;AAEtB,aAAS,EAAE,MAAmB,MAAY;AAFpB,GAAP,CAbkE;AAiBlF,UAAQ,EAAE,MAAM;AAjBkE,CAA/B,CAA7C;;AAoBA,MAAM,kBAAkB,GAAI,GAAD,IAAiD;AAClF,QAAM;AAAE;AAAF,MAA2B,UAAU,CAAC,uBAAD,CAA3C;AAEA,QAAM,YAAY,GAAG,OAAO,CAAC,MAAM,oBAAoB,CAAC,GAAD,CAA3B,EAAkC,CAAC,oBAAD,EAAuB,GAAvB,CAAlC,CAA5B;AACA,SAAO,eAAe,CAAC,YAAD,CAAtB;AACA,CALM;;AAOA,MAAM,mBAAmB,GAAI,KAAD,IAA6D;AAC/F,QAAM;AAAE;AAAF,MAA4B,UAAU,CAAC,uBAAD,CAA5C;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,MAAM,qBAAqB,CAAC,KAAD,aAAC,KAAD,cAAC,KAAD,GAAU,EAAV,CAA5B,EAA2C,CAAC,qBAAD,EAAwB,KAAxB,CAA3C,CAA5B;AACA,SAAO,eAAe,CAAC,YAAD,CAAtB;AACA,CAJM;;AAMA,MAAM,gCAAgC,GAAG,CAAC,GAAD,EAAiB,GAAjB,KAA+C;AAC9F,QAAM;AAAE;AAAF,MAAyB,UAAU,CAAC,uBAAD,CAAzC;AAEA,QAAM,YAAY,GAAG,OAAO,CAAC,MAAM,kBAAkB,CAAC,GAAD,EAAM,GAAN,CAAzB,EAAqC,CAAC,kBAAD,EAAqB,GAArB,EAA0B,GAA1B,CAArC,CAA5B;AACA,SAAO,eAAe,CAAC,YAAD,CAAtB;AACA,CALM;;AAOA,MAAM,4BAA4B,GAAI,GAAD,IAA4B;AACvE,QAAM;AAAE;AAAF,MAAqB,UAAU,CAAC,uBAAD,CAArC;AAEA,QAAM,YAAY,GAAG,OAAO,CAAC,MAAM,cAAc,CAAC,GAAD,CAArB,EAA4B,CAAC,cAAD,EAAiB,GAAjB,CAA5B,CAA5B;AACA,SAAO,eAAe,CAAC,YAAD,CAAtB;AACA,CALM;;AAOA,MAAM,2BAA2B,GAAG,MAC1C,UAAU,CAAC,uBAAD,CAAV,CAAoC,QAD9B,C","file":"dynamic/client/contexts/EditableSettingsContext.ts","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { ISettingBase, SectionName, SettingId, GroupId, TabId } from '../../definition/ISetting';\nimport { SettingsContextQuery } from './SettingsContext';\n\nexport interface IEditableSetting extends ISettingBase {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n}\n\nexport type EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (_id: SettingId) => Subscription<IEditableSetting | undefined>;\n\treadonly queryEditableSettings: (query: EditableSettingsContextQuery) => Subscription<IEditableSetting[]>;\n\treadonly queryGroupSections: (_id: GroupId, tab?: TabId) => Subscription<SectionName[]>;\n\treadonly queryGroupTabs: (_id: GroupId) => Subscription<TabId[]>;\n\treadonly dispatch: (changes: Partial<IEditableSetting>[]) => void;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => ({\n\t\tgetCurrentValue: (): undefined => undefined,\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryEditableSettings: () => ({\n\t\tgetCurrentValue: (): IEditableSetting[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupSections: () => ({\n\t\tgetCurrentValue: (): SectionName[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupTabs: () => ({\n\t\tgetCurrentValue: (): TabId[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tdispatch: () => undefined,\n});\n\nexport const useEditableSetting = (_id: SettingId): IEditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): IEditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst subscription = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<IEditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n"]}