{"version":3,"sources":["meteor://ðŸ’»app/client/hooks/lists/useStreamUpdatesForMessageList.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,gCAAyB;AAAzB,CAAT;AAAkC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAqBlC,MAAM,oBAAoB,GAAI,MAAD,IAAkF;AAC9G,QAAM,KAAK,GAAoB;AAAE,MAAE,EAAE,MAAM,CAAC;AAAb,GAA/B;;AAEA,MAAI,MAAM,CAAC,aAAX,EAA0B;AACzB,SAAK,CAAC,MAAN,GAAe;AAAE,SAAG,EAAE;AAAP,KAAf;AACA;;AAED,MAAI,MAAM,CAAC,gBAAX,EAA6B;AAC5B,SAAK,CAAC,IAAN,GAAa;AAAE,aAAO,EAAE;AAAX,KAAb;AACA;;AACD,MAAI,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,KAAP,CAAa,MAAjC,EAAyC;AACxC,SAAK,CAAC,YAAD,CAAL,GAAsB;AAAE,SAAG,EAAE,MAAM,CAAC;AAAd,KAAtB;AACA;;AAED,SAAO,qBAAqB,CAAW,KAAX,CAA5B;AACA,CAfD;;AAiBO,MAAM,8BAA8B,GAAG,CAAC,WAAD,EAA2B,GAA3B,EAAqD,GAArD,KAAuF;AACpI,QAAM,uBAAuB,GAAG,SAAS,CAAC,eAAD,CAAzC;AACA,QAAM,qBAAqB,GAAG,SAAS,CAAC,aAAD,CAAvC;AAEA,WAAS,CAAC,MAAK;AACd,QAAI,CAAC,GAAD,IAAQ,CAAC,GAAb,EAAkB;AACjB,iBAAW,CAAC,KAAZ;AACA;AACA;;AAED,UAAM,2BAA2B,GAAG,uBAAuB,CAAuB,GAAvB,EAA6B,OAAD,IAAY;AAClG,iBAAW,CAAC,MAAZ,CAAmB,OAAnB;AACA,KAF0D,CAA3D;AAIA,UAAM,4BAA4B,GAAG,qBAAqB,WAAqC,GAArC,qBAA0D,QAAiB;AAAA,UAAhB;AAAE,WAAG,EAAE;AAAP,OAAgB;AACpI,iBAAW,CAAC,MAAZ,CAAmB,GAAnB;AACA,KAFyD,CAA1D;AAIA,UAAM,gCAAgC,GAAG,qBAAqB,WAC1D,GAD0D,yBAE5D,MAAD,IAAW;AACV,YAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAD,CAAhD;AACA,iBAAW,CAAC,KAAZ,CAAkB,mBAAlB;AACA,KAL4D,CAA9D;AAQA,WAAO,MAAW;AACjB,iCAA2B;AAC3B,kCAA4B;AAC5B,sCAAgC;AAChC,KAJD;AAKA,GA3BQ,EA2BN,CAAC,uBAAD,EAA0B,qBAA1B,EAAiD,GAAjD,EAAsD,GAAtD,EAA2D,WAA3D,CA3BM,CAAT;AA4BA,CAhCM,C","file":"dynamic/client/hooks/lists/useStreamUpdatesForMessageList.ts","sourcesContent":["import { useEffect } from 'react';\n\nimport { IMessage } from '../../../definition/IMessage';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IUser } from '../../../definition/IUser';\nimport { useStream } from '../../contexts/ServerContext';\nimport { MessageList } from '../../lib/lists/MessageList';\nimport { createFilterFromQuery, FieldExpression, Query } from '../../lib/minimongo';\n\ntype RoomMessagesRidEvent = IMessage;\n\ntype NotifyRoomRidDeleteMessageEvent = { _id: IMessage['_id'] };\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users && params.users.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nexport const useStreamUpdatesForMessageList = (messageList: MessageList, uid: IUser['_id'] | null, rid: IRoom['_id'] | null): void => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\tuseEffect(() => {\n\t\tif (!uid || !rid) {\n\t\t\tmessageList.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages<RoomMessagesRidEvent>(rid, (message) => {\n\t\t\tmessageList.handle(message);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageEvent>(`${rid}/deleteMessage`, ({ _id: mid }) => {\n\t\t\tmessageList.remove(mid);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageBulkEvent>(\n\t\t\t`${rid}/deleteMessageBulk`,\n\t\t\t(params) => {\n\t\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\t\tmessageList.prune(matchDeleteCriteria);\n\t\t\t},\n\t\t);\n\n\t\treturn (): void => {\n\t\t\tunsubscribeFromRoomMessages();\n\t\t\tunsubscribeFromDeleteMessage();\n\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t};\n\t}, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};\n"]}