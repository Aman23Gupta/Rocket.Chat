{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/ThreadsList.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,aAAc,QAAM;AAApB,CAAT;AAA6B;AAA8B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AA0B3D,MAAM,qBAAqB,GAAG,CAAC,OAAD,EAAoB,GAApB,KAC7B,OAAO,CAAC,GAAR,KAAgB,GAAhB,IAAuB,OAAQ,OAAyB,CAAC,MAAlC,KAA6C,QADrE;;AAGA,MAAM,sBAAsB,GAAG,CAAC,aAAD,EAA+B,GAA/B;AAAA;;AAAA,4DAA8D,aAAa,CAAC,OAA5E,2DAA8D,uBAAuB,QAAvB,CAAgC,GAAhC,CAA9D,yEAAsG,KAAtG;AAAA,CAA/B;;AAEA,MAAM,cAAc,GAAG,CAAC,aAAD,EAA+B,OAA/B,KACtB,OAAO,CAAC,OAAD,aAAC,OAAD,uBAAC,OAAO,CAAE,QAAT,CAAkB,aAAa,CAAC,GAAhC,CAAD,CADR;;AAGA,MAAM,oBAAoB,GAAG,CAAC,aAAD,EAA+B,KAA/B,KAA0D,KAAK,CAAC,IAAN,CAAW,aAAa,CAAC,GAAzB,CAAvF;;AAEM,MAAO,WAAP,SAA2B,WAA3B,CAAsC;AAC3C,cAA2B,QAA3B,EAAuD;AACtD;AADsD,SAA5B,QAA4B;AAA5B;AAE1B;;AAEiB,MAAP,OAAO;AACjB,WAAO,KAAK,QAAZ;AACA;;AAEM,eAAa,CAAC,OAAD,EAA4B;AAC/C,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,KAAL;AACA;;AAES,QAAM,CAAC,OAAD,EAAkB;AACjC,UAAM;AAAE;AAAF,QAAU,KAAK,QAArB;;AAEA,QAAI,CAAC,qBAAqB,CAAC,OAAD,EAAU,GAAV,CAA1B,EAA0C;AACzC,aAAO,KAAP;AACA;;AAED,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,WAA3B,EAAwC;AACvC,YAAM;AAAE;AAAF,UAAU,KAAK,QAArB;;AACA,UAAI,CAAC,sBAAsB,CAAC,OAAD,EAAU,GAAV,CAA3B,EAA2C;AAC1C,eAAO,KAAP;AACA;AACD;;AAED,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,QAA3B,EAAqC;AACpC,YAAM;AAAE;AAAF,UAAc,KAAK,QAAzB;;AACA,UAAI,CAAC,cAAc,CAAC,OAAD,EAAU,OAAV,CAAnB,EAAuC;AACtC,eAAO,KAAP;AACA;AACD;;AAED,QAAI,KAAK,QAAL,CAAc,IAAlB,EAAwB;AACvB,YAAM,KAAK,GAAG,IAAI,MAAJ,CAAW,YAAY,CAAC,KAAK,QAAL,CAAc,IAAf,CAAvB,EAA6C,GAA7C,CAAd;;AACA,UAAI,CAAC,oBAAoB,CAAC,OAAD,EAAU,KAAV,CAAzB,EAA2C;AAC1C,eAAO,KAAP;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAES,SAAO,CAAC,CAAD,EAAc,CAAd,EAAyB;AAAA;;AACzC,WAAO,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,KAA4B,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,EAAnC;AACA;;AA/C0C,C","file":"dynamic/client/lib/lists/ThreadsList.ts","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport type { IMessage } from '../../../definition/IMessage';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { IUser } from '../../../definition/IUser';\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: 'all';\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"]}