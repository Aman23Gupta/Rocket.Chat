{"version":3,"sources":["meteor://ðŸ’»app/client/lib/minimongo/sort.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,aAAiB,QAAE;AAAnB,CAAT;AAA2C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAK3C,MAAM,mBAAmB,GACxB,IAD2B,IAKtB;AACL,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACxB,WAAO,IAAI,CAAC,GAAL,CAAU,KAAD,IAAU;AACzB,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,eAAO;AACN,gBAAM,EAAE,oBAAoB,CAAI,KAAJ,CADtB;AAEN,mBAAS,EAAE;AAFL,SAAP;AAIA;;AAED,aAAO;AACN,cAAM,EAAE,oBAAoB,CAAI,KAAK,CAAC,CAAD,CAAT,CADtB;AAEN,iBAAS,EAAE,KAAK,CAAC,CAAD,CAAL,KAAa;AAFlB,OAAP;AAIA,KAZM,CAAP;AAaA;;AAED,SAAO,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,GAArB,CAAyB;AAAA,QAAC,CAAC,GAAD,EAAM,KAAN,CAAD;AAAA,WAAmB;AAClD,YAAM,EAAE,oBAAoB,CAAI,GAAJ,CADsB;AAElD,eAAS,EAAE,KAAK,IAAI;AAF8B,KAAnB;AAAA,GAAzB,CAAP;AAIA,CA1BD;;AA4BA,MAAM,WAAW,GAAG,CAAC,YAAD,EAA0B,SAA1B,KAClB,GACC,MADD,CAEC,GAAG,YAAY,CAAC,GAAb,CAA6B,WAAD,IAAgB;AAC9C,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,WAAd,CAAL,EAAiC;AAChC,WAAO,CAAC,WAAD,CAAP;AACA;;AAED,MAAI,YAAY,CAAC,WAAD,CAAhB,EAA+B;AAC9B,WAAO,CAAC,SAAD,CAAP;AACA;;AAED,SAAO,WAAP;AACA,CAVE,CAFJ,EAcC,MAdD,CAcQ,CAAC,OAAD,EAAU,KAAV,KAAmB;AAC1B,QAAM,GAAG,GAAG,iBAAiB,CAAC,OAAD,EAAU,KAAV,CAA7B;;AACA,MAAK,SAAS,IAAI,GAAG,GAAG,CAApB,IAA2B,CAAC,SAAD,IAAc,GAAG,GAAG,CAAnD,EAAuD;AACtD,WAAO,KAAP;AACA;;AAED,SAAO,OAAP;AACA,CArBD,CADF;;AAwBO,MAAM,WAAW,GAAI,IAAD,IAAqD;AAC/E,QAAM,aAAa,GAAG,mBAAmB,CAAC,IAAD,CAAzC;;AAEA,MAAI,aAAa,CAAC,MAAd,KAAyB,CAA7B,EAAgC;AAC/B,WAAO,MAAc,CAArB;AACA;;AAED,SAAO,CAAC,CAAD,EAAa,CAAb,KAAmC;AACzC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,EAAE,CAA5C,EAA+C;AAC9C,YAAM,QAAQ,GAAG,aAAa,CAAC,CAAD,CAA9B;AACA,YAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAD,EAAqB,QAAQ,CAAC,SAA9B,CAA1B;AACA,YAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAD,EAAqB,QAAQ,CAAC,SAA9B,CAA1B;AACA,YAAM,OAAO,GAAG,iBAAiB,CAAC,MAAD,EAAS,MAAT,CAAjC;;AAEA,UAAI,OAAO,KAAK,CAAhB,EAAmB;AAClB,eAAO,QAAQ,CAAC,SAAT,GAAqB,OAArB,GAA+B,CAAC,OAAvC;AACA;AACD;;AAED,WAAO,CAAP;AACA,GAbD;AAcA,CArBM,C","file":"dynamic/client/lib/minimongo/sort.ts","sourcesContent":["import { compareBSONValues } from './bson';\nimport { isEmptyArray } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport { Sort } from './types';\n\nconst createSortSpecParts = <T>(\n\tspec: Sort,\n): {\n\tlookup: (doc: T) => unknown[];\n\tascending: boolean;\n}[] => {\n\tif (Array.isArray(spec)) {\n\t\treturn spec.map((value) => {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturn {\n\t\t\t\t\tlookup: createLookupFunction<T>(value),\n\t\t\t\t\tascending: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlookup: createLookupFunction<T>(value[0]),\n\t\t\t\tascending: value[1] !== 'desc',\n\t\t\t};\n\t\t});\n\t}\n\n\treturn Object.entries(spec).map(([key, value]) => ({\n\t\tlookup: createLookupFunction<T>(key),\n\t\tascending: value >= 0,\n\t}));\n};\n\nconst reduceValue = (branchValues: unknown[], ascending: boolean): unknown =>\n\t([] as unknown[])\n\t\t.concat(\n\t\t\t...branchValues.map<unknown[]>((branchValue) => {\n\t\t\t\tif (!Array.isArray(branchValue)) {\n\t\t\t\t\treturn [branchValue];\n\t\t\t\t}\n\n\t\t\t\tif (isEmptyArray(branchValue)) {\n\t\t\t\t\treturn [undefined];\n\t\t\t\t}\n\n\t\t\t\treturn branchValue;\n\t\t\t}),\n\t\t)\n\t\t.reduce((reduced, value) => {\n\t\t\tconst cmp = compareBSONValues(reduced, value);\n\t\t\tif ((ascending && cmp > 0) || (!ascending && cmp < 0)) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn reduced;\n\t\t});\n\nexport const compileSort = (spec: Sort): ((a: unknown, b: unknown) => number) => {\n\tconst sortSpecParts = createSortSpecParts(spec);\n\n\tif (sortSpecParts.length === 0) {\n\t\treturn (): number => 0;\n\t}\n\n\treturn (a: unknown, b: unknown): number => {\n\t\tfor (let i = 0; i < sortSpecParts.length; ++i) {\n\t\t\tconst specPart = sortSpecParts[i];\n\t\t\tconst aValue = reduceValue(specPart.lookup(a), specPart.ascending);\n\t\t\tconst bValue = reduceValue(specPart.lookup(b), specPart.ascending);\n\t\t\tconst compare = compareBSONValues(aValue, bValue);\n\n\t\t\tif (compare !== 0) {\n\t\t\t\treturn specPart.ascending ? compare : -compare;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n};\n"]}