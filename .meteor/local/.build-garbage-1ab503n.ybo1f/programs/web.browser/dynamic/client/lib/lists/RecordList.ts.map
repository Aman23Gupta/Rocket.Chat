{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/RecordList.ts"],"names":[],"mappings":"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","file":"dynamic/client/lib/lists/RecordList.ts","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport { AsyncStatePhase } from '../asyncState';\n\nexport type RecordListBatchChanges<T> = {\n\titems?: T[];\n\titemCount?: number;\n};\n\nexport class RecordList<T extends IRocketChatRecord> extends Emitter {\n\t#hasChanges = false;\n\n\t#index = new Map<T['_id'], T>();\n\n\t#phase: AsyncStatePhase.LOADING | AsyncStatePhase.UPDATING | AsyncStatePhase.RESOLVED = AsyncStatePhase.LOADING;\n\n\t#items: T[] | undefined = undefined;\n\n\t#itemCount: number | undefined = undefined;\n\n\tprotected filter(_item: T): boolean {\n\t\treturn true;\n\t}\n\n\tprotected compare(a: T, b: T): number {\n\t\treturn a._updatedAt.getTime() - b._updatedAt.getTime();\n\t}\n\n\tpublic get phase(): AsyncStatePhase {\n\t\treturn this.#phase;\n\t}\n\n\tpublic get items(): T[] {\n\t\tif (!this.#items) {\n\t\t\tthis.#items = Array.from(this.#index.values()).sort(this.compare);\n\t\t}\n\n\t\treturn this.#items;\n\t}\n\n\tpublic get itemCount(): number {\n\t\treturn this.#itemCount ?? this.#index.size;\n\t}\n\n\tprivate insert(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/inserted`, item);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount++;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate update(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/updated`, item);\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate delete(_id: T['_id']): void {\n\t\tthis.#index.delete(_id);\n\t\tthis.emit(`${_id}/deleted`);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount--;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate push(item: T): void {\n\t\tconst exists = this.#index.has(item._id);\n\t\tconst valid = this.filter(item);\n\n\t\tif (exists && !valid) {\n\t\t\tthis.delete(item._id);\n\t\t\treturn;\n\t\t}\n\n\t\tif (exists && valid) {\n\t\t\tthis.update(item);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exists && valid) {\n\t\t\tthis.insert(item);\n\t\t}\n\t}\n\n\t#pedingMutation: Promise<void> = Promise.resolve();\n\n\tprotected async mutate(mutation: () => void | Promise<void>): Promise<void> {\n\t\ttry {\n\t\t\tif (this.#phase === AsyncStatePhase.RESOLVED) {\n\t\t\t\tthis.#phase = AsyncStatePhase.UPDATING;\n\t\t\t\tthis.emit('mutating');\n\t\t\t}\n\n\t\t\tthis.#pedingMutation = this.#pedingMutation.then(mutation);\n\t\t\tawait this.#pedingMutation;\n\t\t} catch (error) {\n\t\t\tthis.emit('errored', error);\n\t\t} finally {\n\t\t\tconst hasChanged = this.#hasChanges;\n\t\t\tthis.#phase = AsyncStatePhase.RESOLVED;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.#items = undefined;\n\t\t\t\tthis.#hasChanges = false;\n\t\t\t}\n\t\t\tthis.emit('mutated', hasChanged);\n\t\t}\n\t}\n\n\tpublic batchHandle(getInfo: () => Promise<RecordListBatchChanges<T>>): Promise<void> {\n\t\treturn this.mutate(async () => {\n\t\t\tconst info = await getInfo();\n\n\t\t\tif (info.items) {\n\t\t\t\tfor (const item of info.items) {\n\t\t\t\t\tthis.push(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (info.itemCount) {\n\t\t\t\tthis.#itemCount = info.itemCount;\n\t\t\t\tthis.#hasChanges = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prune(matchCriteria: (item: T) => boolean): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tfor (const item of this.#index.values()) {\n\t\t\t\tif (matchCriteria(item)) {\n\t\t\t\t\tthis.delete(item._id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handle(item: T): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tthis.push(item);\n\t\t});\n\t}\n\n\tpublic remove(_id: T['_id']): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (!this.#index.has(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.delete(_id);\n\t\t});\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (this.#index.size === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#index.clear();\n\t\t\tthis.#items = undefined;\n\t\t\tthis.#itemCount = undefined;\n\t\t\tthis.#hasChanges = true;\n\t\t\tthis.emit('cleared');\n\t\t});\n\t}\n}\n"]}