{"version":3,"sources":["meteor://ðŸ’»app/client/providers/RouterProvider.tsx"],"names":[],"mappings":";;;;;;;;AAAA;AAAS,MAAY,KAAZ,CAAkB,2BAAlB,EAA8C;AAAA;AAAA;AAAA;;AAAA,CAA9C,EAA8C,CAA9C;AAA8C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAOvD,MAAM,kBAAkB,GAAG,UAAa,QAAb,EAA8B;AACxD,MAAI,YAAY,GAAG,OAAO,CAAC,WAAR,CAAoB,QAApB,CAAnB;AACA,SAAO;AACN,mBAAe,EAAE,MAAS,YADpB;AAEN,aAAS,EAAG,QAAD,IAAsC;AAChD,YAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,MAAK;AACxC,oBAAY,GAAG,QAAQ,EAAvB;AACA,gBAAQ;AACR,OAHmB,CAApB;AAKA,aAAO,MAAW;AACjB,mBAAW,CAAC,IAAZ;AACA,OAFD;AAGA;AAXK,GAAP;AAaA,CAfD;;AAiBA,MAAM,cAAc,GAAG,CACtB,IADsB,EAEtB,UAFsB,EAGtB,qBAHsB,KAIgC,kBAAkB,CAAC,MAAM,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,UAAtB,EAAkC,qBAAlC,CAAP,CAJzE;;AAMA,MAAM,aAAa,GAAG,CACrB,IADqB,EAErB,UAFqB,EAGrB,qBAHqB,KAIgC,kBAAkB,CAAC,MAAM,UAAU,CAAC,GAAX,CAAe,IAAf,EAAqB,UAArB,EAAiC,qBAAjC,CAAP,CAJxE;;AAMA,MAAM,SAAS,GAAG,CACjB,IADiB,EAEjB,UAFiB,EAGjB,qBAHiB,KAI+B;AAChD,YAAU,CAAC,EAAX,CAAc,IAAd,EAAoB,UAApB,EAAgC,qBAAhC;AACA,CAND;;AAQA,MAAM,YAAY,GAAG,CACpB,IADoB,EAEpB,UAFoB,EAGpB,qBAHoB,KAI+B;AACnD,YAAU,CAAC,gBAAX,CAA4B,MAAK;AAChC,cAAU,CAAC,EAAX,CAAc,IAAd,EAAoB,UAApB,EAAgC,qBAAhC;AACA,GAFD;AAGA,CARD;;AAUA,MAAM,mBAAmB,GACxB,IAD2B,IAEgC,kBAAkB,CAAC,MAAM,UAAU,CAAC,QAAX,CAAoB,IAApB,CAAP,CAF9E;;AAIA,MAAM,yBAAyB,GAC9B,IADiC,IAEgC,kBAAkB,CAAC,MAAM,UAAU,CAAC,aAAX,CAAyB,IAAzB,CAAP,CAFpF;;AAIA,MAAM,iBAAiB,GAAG,MACzB,kBAAkB,CAAC,MAAK;AAAA;;AACvB,YAAU,CAAC,eAAX;AACA,QAAM;AAAE,SAAF;AAAS,UAAT;AAAiB;AAAjB,MAAiC,UAAU,CAAC,OAAX,EAAvC;AACA,SAAO,CAAC,KAAD,aAAC,KAAD,uBAAC,KAAK,CAAE,IAAR,EAAc,MAAd,EAAsB,WAAtB,EAAmC,KAAnC,aAAmC,KAAnC,uCAAmC,KAAK,CAAE,KAA1C,iDAAmC,aAAc,IAAjD,CAAP;AACA,CAJiB,CADnB;;AAOA,MAAM,YAAY,GAAG;AACpB,gBADoB;AAEpB,eAFoB;AAGpB,WAHoB;AAIpB,cAJoB;AAKpB,qBALoB;AAMpB,2BANoB;AAOpB;AAPoB,CAArB;;AAUA,MAAM,cAAc,GAAO;AAAA,MAAC;AAAE;AAAF,GAAD;AAAA,sBAAkB,oBAAC,aAAD,CAAe,QAAf;AAAwB,YAAQ,EAAE,QAAlC;AAA4C,SAAK,EAAE;AAAnD,IAAlB;AAAA,CAA3B;;AA/EA,OAAO,aAAP,CAiFe,cAjFf,E","file":"dynamic/client/providers/RouterProvider.tsx","sourcesContent":["import { FlowRouter } from 'meteor/kadira:flow-router';\nimport { Tracker } from 'meteor/tracker';\nimport React, { FC } from 'react';\nimport { Subscription, Unsubscribe } from 'use-subscription';\n\nimport { RouterContext, RouterContextValue } from '../contexts/RouterContext';\n\nconst createSubscription = function <T>(getValue: () => T): Subscription<T> {\n\tlet currentValue = Tracker.nonreactive(getValue);\n\treturn {\n\t\tgetCurrentValue: (): T => currentValue,\n\t\tsubscribe: (callback: () => void): Unsubscribe => {\n\t\t\tconst computation = Tracker.autorun(() => {\n\t\t\t\tcurrentValue = getValue();\n\t\t\t\tcallback();\n\t\t\t});\n\n\t\t\treturn (): void => {\n\t\t\t\tcomputation.stop();\n\t\t\t};\n\t\t},\n\t};\n};\n\nconst queryRoutePath = (\n\tname: Parameters<RouterContextValue['queryRoutePath']>[0],\n\tparameters: Parameters<RouterContextValue['queryRoutePath']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['queryRoutePath']>[2],\n): ReturnType<RouterContextValue['queryRoutePath']> => createSubscription(() => FlowRouter.path(name, parameters, queryStringParameters));\n\nconst queryRouteUrl = (\n\tname: Parameters<RouterContextValue['queryRouteUrl']>[0],\n\tparameters: Parameters<RouterContextValue['queryRouteUrl']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['queryRouteUrl']>[2],\n): ReturnType<RouterContextValue['queryRouteUrl']> => createSubscription(() => FlowRouter.url(name, parameters, queryStringParameters));\n\nconst pushRoute = (\n\tname: Parameters<RouterContextValue['pushRoute']>[0],\n\tparameters: Parameters<RouterContextValue['pushRoute']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['pushRoute']>[2],\n): ReturnType<RouterContextValue['pushRoute']> => {\n\tFlowRouter.go(name, parameters, queryStringParameters);\n};\n\nconst replaceRoute = (\n\tname: Parameters<RouterContextValue['replaceRoute']>[0],\n\tparameters: Parameters<RouterContextValue['replaceRoute']>[1],\n\tqueryStringParameters: Parameters<RouterContextValue['replaceRoute']>[2],\n): ReturnType<RouterContextValue['replaceRoute']> => {\n\tFlowRouter.withReplaceState(() => {\n\t\tFlowRouter.go(name, parameters, queryStringParameters);\n\t});\n};\n\nconst queryRouteParameter = (\n\tname: Parameters<RouterContextValue['replaceRoute']>[0],\n): ReturnType<RouterContextValue['queryRouteParameter']> => createSubscription(() => FlowRouter.getParam(name));\n\nconst queryQueryStringParameter = (\n\tname: Parameters<RouterContextValue['queryQueryStringParameter']>[0],\n): ReturnType<RouterContextValue['queryQueryStringParameter']> => createSubscription(() => FlowRouter.getQueryParam(name));\n\nconst queryCurrentRoute = (): ReturnType<RouterContextValue['queryCurrentRoute']> =>\n\tcreateSubscription(() => {\n\t\tFlowRouter.watchPathChange();\n\t\tconst { route, params, queryParams } = FlowRouter.current();\n\t\treturn [route?.name, params, queryParams, route?.group?.name];\n\t});\n\nconst contextValue = {\n\tqueryRoutePath,\n\tqueryRouteUrl,\n\tpushRoute,\n\treplaceRoute,\n\tqueryRouteParameter,\n\tqueryQueryStringParameter,\n\tqueryCurrentRoute,\n};\n\nconst RouterProvider: FC = ({ children }) => <RouterContext.Provider children={children} value={contextValue} />;\n\nexport default RouterProvider;\n"]}