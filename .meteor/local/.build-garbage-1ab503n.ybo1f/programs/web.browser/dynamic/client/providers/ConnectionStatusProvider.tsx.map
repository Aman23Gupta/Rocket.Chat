{"version":3,"sources":["meteor://ðŸ’»app/client/providers/ConnectionStatusProvider.tsx"],"names":[],"mappings":";;;;;;;;AAAA;;AAAiB,MAAM,KAAN,CAAM,sCAAN,EAAsB;AAAA;AAAA;AAAA;;AAAA,CAAtB,EAAsB,CAAtB;AAAjB;AAAS,MAAQ,KAAR,CAAc,eAAd,EAA8B;AAAA;AAAA;AAAA;;AAAA,CAA9B,EAA8B,CAA9B;AAA8B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAMvC,MAAM,QAAQ,GAAG,sCACb,MAAM,CAAC,MAAP,EADa;AAEhB,WAAS,EAAE,MAAM,CAAC;AAFF,EAAjB;;AAKA,MAAM,wBAAwB,GAAO,QAAiB;AAAA,MAAhB;AAAE;AAAF,GAAgB;AACrD,QAAM,MAAM,GAAG,gBAAgB,CAAC,QAAD,CAA/B;AAEA,sBAAO,oBAAC,uBAAD,CAAyB,QAAzB;AAAkC,YAAQ,EAAE,QAA5C;AAAsD,SAAK,EAAE;AAA7D,IAAP;AACA,CAJD;;AAXA,OAAO,aAAP,CAiBe,wBAjBf,E","file":"dynamic/client/providers/ConnectionStatusProvider.tsx","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React, { FC } from 'react';\n\nimport { ConnectionStatusContext, ConnectionStatusContextValue } from '../contexts/ConnectionStatusContext';\nimport { useReactiveValue } from '../hooks/useReactiveValue';\n\nconst getValue = (): ConnectionStatusContextValue => ({\n\t...Meteor.status(),\n\treconnect: Meteor.reconnect,\n});\n\nconst ConnectionStatusProvider: FC = ({ children }) => {\n\tconst status = useReactiveValue(getValue);\n\n\treturn <ConnectionStatusContext.Provider children={children} value={status} />;\n};\n\nexport default ConnectionStatusProvider;\n"]}