{"version":3,"sources":["meteor://ðŸ’»app/client/providers/UserProvider.tsx"],"names":[],"mappings":";;;;;;;;AAAA;AAAS,MAAQ,KAAR,CAAc,eAAd,EAA8B;AAAA;AAAA;AAAA;;AAAA,CAA9B,EAA8B,CAA9B;AAA8B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAavC,MAAM,SAAS,GAAG,MAAqB,MAAM,CAAC,MAAP,EAAvC;;AAEA,MAAM,OAAO,GAAG,MAAoB,MAAM,CAAC,IAAP,EAApC;;AAEA,MAAM,iBAAiB,GAAG,CAAC,IAAD,EAAwB,QAAxB,KACzB,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC/B,QAAM,CAAC,iBAAP,CAAyB,IAAzB,EAA+B,QAA/B,EAA0C,KAAD,IAAgE;AACxG,QAAI,KAAJ,EAAW;AACV,YAAM,CAAC,KAAD,CAAN;AACA;AACA;;AAED,WAAO;AACP,GAPD;AAQA,CATD,CADD;;AAYA,MAAM,MAAM,GAAG,MACd,IAAI,OAAJ,CAAa,OAAD,IAAY;AACvB,QAAM,IAAI,GAAG,OAAO,EAApB;;AAEA,MAAI,CAAC,IAAL,EAAW;AACV,WAAO,OAAO,EAAd;AACA;;AAED,QAAM,CAAC,MAAP,CAAc,MAAK;AAClB,aAAS,CAAC,GAAV,CAAc,oBAAd,EAAoC,IAApC;AACA,UAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,IAA7B,EAAmC,OAAnC;AACA,GAHD;AAIA,CAXD,CADD;;AAcA,MAAM,YAAY,GAAO,QAAiB;AAAA,MAAhB;AAAE;AAAF,GAAgB;AACzC,QAAM,MAAM,GAAG,gBAAgB,CAAC,SAAD,CAA/B;AACA,QAAM,IAAI,GAAG,gBAAgB,CAAC,OAAD,CAA7B;AACA,QAAM,YAAY,GAAG,OAAO,CAC3B,OAAO;AACN,UADM;AAEN,QAFM;AAGN,qBAHM;AAIN,UAJM;AAKN,mBAAe,EAAE,iCAAiC,CAAC,CAAC,GAAD,EAAM,YAAN,KAAuB,iBAAiB,CAAC,MAAD,EAAS,GAAT,EAAc,YAAd,CAAzC,CAL5C;AAMN,qBAAiB,EAAE,iCAAiC,CAA4B,CAAC,KAAD,EAAQ,MAAR,KAC/E,aAAa,CAAC,OAAd,CAAsB,KAAtB,EAA6B;AAAE;AAAF,KAA7B,CADmD,CAN9C;AASN,aAAS,EAAE,iCAAiC,CAAoB,CAAC,KAAD,EAAQ,MAAR,KAAmB,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB;AAAE;AAAF,KAArB,CAAvC,CATtC;AAUN,sBAAkB,EAAE,iCAAiC,CAA4B,CAAC,KAAD,EAAQ,OAAR,KAChF,CAAC,MAAM,GAAG,aAAH,GAAmB,KAA1B,EAAiC,IAAjC,CAAsC,KAAtC,EAA6C,OAA7C,EAAsD,KAAtD,EADoD;AAV/C,GAAP,CAD2B,EAe3B,CAAC,MAAD,EAAS,IAAT,CAf2B,CAA5B;AAkBA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,YAAQ,EAAE,QAAhC;AAA0C,SAAK,EAAE;AAAjD,IAAP;AACA,CAtBD;;AA3CA,OAAO,aAAP,CAmEe,YAnEf,E","file":"dynamic/client/providers/UserProvider.tsx","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React, { useMemo, FC } from 'react';\n\nimport { Subscriptions, Rooms } from '../../app/models/client';\nimport { getUserPreference } from '../../app/utils/client';\nimport { IRoom } from '../../definition/IRoom';\nimport { ISubscription } from '../../definition/ISubscription';\nimport { IUser } from '../../definition/IUser';\nimport { callbacks } from '../../lib/callbacks';\nimport { UserContext } from '../contexts/UserContext';\nimport { useReactiveValue } from '../hooks/useReactiveValue';\nimport { createReactiveSubscriptionFactory } from './createReactiveSubscriptionFactory';\n\nconst getUserId = (): string | null => Meteor.userId();\n\nconst getUser = (): IUser | null => Meteor.user() as IUser | null;\n\nconst loginWithPassword = (user: string | object, password: string): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\tMeteor.loginWithPassword(user, password, (error: Error | Meteor.Error | Meteor.TypedError | undefined) => {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t});\n\nconst logout = (): Promise<void> =>\n\tnew Promise((resolve) => {\n\t\tconst user = getUser();\n\n\t\tif (!user) {\n\t\t\treturn resolve();\n\t\t}\n\n\t\tMeteor.logout(() => {\n\t\t\tcallbacks.run('afterLogoutCleanUp', user);\n\t\t\tMeteor.call('logoutCleanUp', user, resolve);\n\t\t});\n\t});\n\nconst UserProvider: FC = ({ children }) => {\n\tconst userId = useReactiveValue(getUserId);\n\tconst user = useReactiveValue(getUser);\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tuserId,\n\t\t\tuser,\n\t\t\tloginWithPassword,\n\t\t\tlogout,\n\t\t\tqueryPreference: createReactiveSubscriptionFactory((key, defaultValue) => getUserPreference(userId, key, defaultValue)),\n\t\t\tquerySubscription: createReactiveSubscriptionFactory<ISubscription | undefined>((query, fields) =>\n\t\t\t\tSubscriptions.findOne(query, { fields }),\n\t\t\t),\n\t\t\tqueryRoom: createReactiveSubscriptionFactory<IRoom | undefined>((query, fields) => Rooms.findOne(query, { fields })),\n\t\t\tquerySubscriptions: createReactiveSubscriptionFactory<Array<ISubscription> | []>((query, options) =>\n\t\t\t\t(userId ? Subscriptions : Rooms).find(query, options).fetch(),\n\t\t\t),\n\t\t}),\n\t\t[userId, user],\n\t);\n\n\treturn <UserContext.Provider children={children} value={contextValue} />;\n};\n\nexport default UserProvider;\n"]}