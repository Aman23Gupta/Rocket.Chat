{"version":3,"sources":["meteor://ðŸ’»app/client/sidebar/header/UserAvatarButton.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAAoB,4DAAyB;AAAA;AAAA;AAAA;;AAAA,CAAzB,EAAyB,CAAzB;AAApB;AAAO,MAAO,KAAP,CAAa,wBAAb,EAAsC;AAAA;AAAA;AAAA;;AAAA,CAAtC,EAAsC,CAAtC;AAAsC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAY7C,MAAM,gBAAgB,GAAG,SAAS,gBAAT,GAAyB;AACjD,QAAM,IAAI,GAAG,OAAO,EAApB;AACA,QAAM;AACL,UAAM,GAAG,CAAC,IAAD,GAAQ,QAAR,GAAmB,SADvB;AAEL,YAFK;AAGL,cAHK;AAIL;AAJK,MAKF,IAAI,IAAI;AACX,OAAG,EAAE,EADM;AAEX,YAAQ,EAAE,WAFC;AAGX,UAAM,EAAE,QAHG;AAIX,cAAU,EAAE;AAJD,GALZ,CAFiD,CAcjD;;AAEA,QAAM,SAAS,GAAG,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,MAAM,GAAG,MAAM,CAAC,IAAD,CAArB;AACA,QAAM;AAAE,aAAF;AAAa;AAAb,MAAwB,qBAAqB,CAAC;AAAE,aAAF;AAAa;AAAb,GAAD,CAAnD;AAEA,sBACC,uDACC,oBAAC,GAAD;AACC,YAAQ,EAAC,UADV;AAEC,OAAG,EAAE,SAFN;AAGC,WAAO,EAAE,MAAY,MAAM,EAH5B;AAIC,aAAS,EAAE,GAAF,2GAJV;AAOC,eAAQ;AAPT,kBASC,oBAAC,UAAD;AAAY,QAAI,EAAC,KAAjB;AAAuB,YAAQ,EAAE,QAAjC;AAA2C,QAAI,EAAE;AAAjD,IATD,eAUC,oBAAC,GAAD;AACC,aAAS,EAAE,GAAF,kIADV;AAKC,kBAAc,EAAC,QALhB;AAMC,cAAU,EAAC,QANZ;AAOC,WAAO,EAAC,MAPT;AAQC,YAAQ,EAAC,QARV;AASC,QAAI,EAAE,EATP;AAUC,eAAW,EAAC,IAVb;AAWC,YAAQ,EAAC,UAXV;AAYC,MAAE,EAAC,aAZJ;AAaC,eAAW,EAAC,aAbb;AAcC,gBAAY,EAAC,MAdd;AAeC,OAAG,EAAC,QAfL;AAgBC,OAAG,EAAC;AAhBL,kBAkBC,oBAAC,UAAD;AAAY,SAAK,MAAjB;AAAkB,UAAM,EAAE,MAA1B;AAAkC,cAAU,EAAE;AAA9C,IAlBD,CAVD,CADD,EAgCE,IAAI,IACJ,SADA,iBAEA,YAAY,eACX,oBAAC,QAAD;AAAU,aAAS,EAAE,SAArB;AAAgC,OAAG,EAAE;AAArC,kBACC,oBAAC,YAAD;AAAc,QAAI,EAAE,IAApB;AAA0B,WAAO,EAAE,MAAY,MAAM,CAAC,KAAD;AAArD,IADD,CADW,EAIX,QAAQ,CAAC,IAJE,CAlCd,CADD;AA2CA,CA/DD;;AAZA,OAAO,aAAP,eA6Ee,IAAI,CAAC,gBAAD,CA7EnB,E","file":"dynamic/client/sidebar/header/UserAvatarButton.tsx","sourcesContent":["import { css } from '@rocket.chat/css-in-js';\nimport { Box, Dropdown } from '@rocket.chat/fuselage';\nimport React, { memo, useRef, ReactElement } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { IUser } from '../../../definition/IUser';\nimport { UserStatus } from '../../components/UserStatus';\nimport UserAvatar from '../../components/avatar/UserAvatar';\nimport { useUser } from '../../contexts/UserContext';\nimport UserDropdown from './UserDropdown';\nimport { useDropdownVisibility } from './hooks/useDropdownVisibility';\n\nconst UserAvatarButton = function UserAvatarButton(): ReactElement {\n\tconst user = useUser() as Required<IUser> | undefined;\n\tconst {\n\t\tstatus = !user ? 'online' : 'offline',\n\t\tusername,\n\t\tavatarETag,\n\t\tstatusText,\n\t} = user || {\n\t\t_id: '',\n\t\tusername: 'Anonymous',\n\t\tstatus: 'online',\n\t\tstatusText: '',\n\t};\n\n\t// const allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\n\tconst reference = useRef(null);\n\tconst target = useRef(null);\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });\n\n\treturn (\n\t\t<>\n\t\t\t<Box\n\t\t\t\tposition='relative'\n\t\t\t\tref={reference}\n\t\t\t\tonClick={(): void => toggle()}\n\t\t\t\tclassName={css`\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t`}\n\t\t\t\tdata-qa='sidebar-avatar-button'\n\t\t\t>\n\t\t\t\t<UserAvatar size='x24' username={username} etag={avatarETag} />\n\t\t\t\t<Box\n\t\t\t\t\tclassName={css`\n\t\t\t\t\t\tbottom: 0;\n\t\t\t\t\t\tright: 0;\n\t\t\t\t\t`}\n\t\t\t\t\tjustifyContent='center'\n\t\t\t\t\talignItems='center'\n\t\t\t\t\tdisplay='flex'\n\t\t\t\t\toverflow='hidden'\n\t\t\t\t\tsize={12}\n\t\t\t\t\tborderWidth='x2'\n\t\t\t\t\tposition='absolute'\n\t\t\t\t\tbg='neutral-200'\n\t\t\t\t\tborderColor='neutral-200'\n\t\t\t\t\tborderRadius='full'\n\t\t\t\t\tmie='neg-x2'\n\t\t\t\t\tmbe='neg-x2'\n\t\t\t\t>\n\t\t\t\t\t<UserStatus small status={status} statusText={statusText} />\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t{user &&\n\t\t\t\tisVisible &&\n\t\t\t\tcreatePortal(\n\t\t\t\t\t<Dropdown reference={reference} ref={target}>\n\t\t\t\t\t\t<UserDropdown user={user} onClose={(): void => toggle(false)} />\n\t\t\t\t\t</Dropdown>,\n\t\t\t\t\tdocument.body,\n\t\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default memo(UserAvatarButton);\n"]}