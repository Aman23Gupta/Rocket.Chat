{"version":3,"sources":["meteor://ðŸ’»app/client/UIKit/hooks/useUIKitHandleClose.tsx"],"names":[],"mappings":";;;;;;;;AACA;;AAAA,YAA4B,sCAA5B,EAA4B;AAAA;AAAA;AAAA;;AAAA,CAA5B,EAA4B,CAA5B;AAAA;AAAA,qBAA4B;AAA5B;AAA4B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAY5B;AACA,MAAM,OAAO,GAAG,CAAC,MAAD,EAAc,OAAd,KAA6D,SAA7E;;AAEA,MAAM,mBAAmB,GAAG,UAAyB,KAAzB,EAAiG;AAAA,MAA9D,EAA8D,uEAAzD,OAAyD;AAC5H,QAAM,oBAAoB,GAAG,uBAAuB,EAApD;AACA,SAAO,kBAAkB,CAAC,MACzB,aAAa,CAAC,aAAd,CAA4B;AAC3B,SAAK,EAAE,KAAK,CAAC,KADc;AAE3B,UAAM,EAAE,KAAK,CAAC,MAFa;AAG3B,QAAI,kCACA,KADA;AAEH,QAAE,EAAE,KAAK,CAAC,MAFP,CAGH;;AAHG,MAHuB;AAQ3B,aAAS,EAAE;AARgB,GAA5B,EAUE,IAVF,CAUQ,MAAD,IAAY,EAAE,CAAC,SAAD,EAAY,MAAZ,CAVrB,EAWE,KAXF,CAWS,KAAD,IAAU;AAChB,wBAAoB,CAAC;AAAE,UAAI,EAAE,OAAR;AAAiB,aAAO,EAAE;AAA1B,KAAD,CAApB;AACA,MAAE,CAAC,KAAD,EAAQ,SAAR,CAAF;AACA,WAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACA,GAfF,CADwB,CAAzB;AAkBA,CApBD,C","file":"dynamic/client/UIKit/hooks/useUIKitHandleClose.tsx","sourcesContent":["import { UIKitInteractionType } from '@rocket.chat/apps-engine/definition/uikit';\n/* eslint-disable new-cap */\n// import { Banner, Icon } from '@rocket.chat/fuselage';\n// import { kitContext, UiKitBanner as renderUiKitBannerBlocks } from '@rocket.chat/fuselage-ui-kit';\n// import React, { Context, FC, useMemo } from 'react';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\n// import { UIKitIncomingInteractionContainerType } from '@rocket.chat/apps-engine/definition/uikit/UIKitIncomingInteractionContainer';\n\n// import { useEndpoint } from '../../contexts/ServerContext';\nimport * as ActionManager from '../../../app/ui-message/client/ActionManager';\nimport { UiKitPayload } from '../../../definition/UIKit';\nimport { useToastMessageDispatch } from '../../contexts/ToastMessagesContext';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emptyFn = (_error: any, _result: UIKitInteractionType | void): void => undefined;\n\nconst useUIKitHandleClose = <S extends UiKitPayload>(state: S, fn = emptyFn): (() => Promise<void | UIKitInteractionType>) => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\treturn useMutableCallback(() =>\n\t\tActionManager.triggerCancel({\n\t\t\tappId: state.appId,\n\t\t\tviewId: state.viewId,\n\t\t\tview: {\n\t\t\t\t...state,\n\t\t\t\tid: state.viewId,\n\t\t\t\t// state: groupStateByBlockId(values),\n\t\t\t},\n\t\t\tisCleared: true,\n\t\t})\n\t\t\t.then((result) => fn(undefined, result))\n\t\t\t.catch((error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t\tfn(error, undefined);\n\t\t\t\treturn Promise.reject(error);\n\t\t\t}),\n\t);\n};\n\nexport { useUIKitHandleClose };\n"]}