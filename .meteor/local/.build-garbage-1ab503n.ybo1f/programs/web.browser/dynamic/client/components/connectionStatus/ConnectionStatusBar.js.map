{"version":3,"sources":["meteor://ðŸ’»app/client/components/connectionStatus/ConnectionStatusBar.js"],"names":["Icon","module","link","v","React","useEffect","useRef","useState","default","useConnectionStatus","useTranslation","getReconnectCountdown","retryTime","timeDiff","Date","now","Math","round","useReconnectCountdown","status","reconnectionTimerRef","reconnectCountdown","setReconnectCountdown","current","setInterval","clearInterval","ConnectionStatusBar","connected","reconnect","t","handleRetryClick","event","preventDefault","context","count","includes","exportDefault"],"mappings":"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","file":"dynamic/client/components/connectionStatus/ConnectionStatusBar.js","sourcesContent":["import { Icon } from '@rocket.chat/fuselage';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useConnectionStatus } from '../../contexts/ConnectionStatusContext';\nimport { useTranslation } from '../../contexts/TranslationContext';\nimport './ConnectionStatusBar.css';\n\nconst getReconnectCountdown = (retryTime) => {\n\tconst timeDiff = retryTime - Date.now();\n\treturn (timeDiff > 0 && Math.round(timeDiff / 1000)) || 0;\n};\n\nconst useReconnectCountdown = (retryTime, status) => {\n\tconst reconnectionTimerRef = useRef();\n\tconst [reconnectCountdown, setReconnectCountdown] = useState(() => getReconnectCountdown(retryTime));\n\n\tuseEffect(() => {\n\t\tif (status === 'waiting') {\n\t\t\tif (reconnectionTimerRef.current) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treconnectionTimerRef.current = setInterval(() => {\n\t\t\t\tsetReconnectCountdown(getReconnectCountdown(retryTime));\n\t\t\t}, 500);\n\t\t\treturn;\n\t\t}\n\n\t\tclearInterval(reconnectionTimerRef.current);\n\t\treconnectionTimerRef.current = null;\n\t}, [retryTime, status]);\n\n\tuseEffect(\n\t\t() => () => {\n\t\t\tclearInterval(reconnectionTimerRef.current);\n\t\t},\n\t\t[],\n\t);\n\n\treturn reconnectCountdown;\n};\n\nfunction ConnectionStatusBar() {\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();\n\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst t = useTranslation();\n\n\tif (connected) {\n\t\treturn null;\n\t}\n\n\tconst handleRetryClick = (event) => {\n\t\tevent.preventDefault();\n\t\treconnect && reconnect();\n\t};\n\n\treturn (\n\t\t<div className='ConnectionStatusBar' role='alert'>\n\t\t\t<strong>\n\t\t\t\t<Icon name='warning' /> {t('meteor_status', { context: status })}\n\t\t\t</strong>\n\n\t\t\t{status === 'waiting' && <> {t('meteor_status_reconnect_in', { count: reconnectCountdown })}</>}\n\n\t\t\t{['waiting', 'offline'].includes(status) && (\n\t\t\t\t<>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<a className='ConnectionStatusBar__retry-link' href='#' onClick={handleRetryClick}>\n\t\t\t\t\t\t{t('meteor_status_try_now', { context: status })}\n\t\t\t\t\t</a>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default ConnectionStatusBar;\n"]}