{"version":3,"sources":["meteor://ðŸ’»app/client/components/Message/Body/Code.tsx"],"names":[],"mappings":";;;;;;;;AACA,WAAO,SAAP,EAAoB,QAApB;AAA+B,MAAQ,KAAR,CAAU,OAAV,EAAgB;AAAO,SAAC;AAAA;AAAA,GAAR;;AAAQ;AAAA;AAAA,GAAR;;AAAQ;AAAA;AAAA;;AAAR,CAAhB,EAAwB,CAAxB;AAAwB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAWvD,MAAM,YAAY,GAAI,MAAD,IAAuC,MAAvC,aAAuC,MAAvC,uBAAuC,MAAM,CAAE,KAApE;;AAEA,MAAM,IAAI,GAAgB,QAA6B;AAAA,MAA5B;AAAE,SAAK,GAAG,EAAV;AAAc;AAAd,GAA4B;AACtD,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAQ,CAA8D,MAC7F,KAAK,CAAC,GAAN,CAAU,CAAC,KAAD,EAAQ,KAAR,KAAiB;AAC1B,YAAQ,KAAK,CAAC,IAAd;AACC,WAAK,WAAL;AACC,4BAAO,oBAAC,QAAD;AAAU,aAAG,EAAE,KAAf;AAAsB,eAAK,EAAE,KAAK,CAAC;AAAnC,UAAP;;AACD;AACC,eAAO,IAAP;AAJF;AAMA,GAPD,CAD+B,CAAhC;AAUA,WAAS,CAAC,MAAK;AACd,KAAC,QAAD,IAAa,QAAQ,KAAK,MAA1B,GACG,OAAO,CAAC,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,GAAN,CAAW,IAAD,IAAU,IAAI,CAAC,KAAL,CAAW,KAA/B,EAAsC,IAAtC,CAA2C,IAA3C,CAAnB,CAAD,CADV,GAEG,QAAQ,CAAC,QAAD,CAAR,CAAmB,IAAnB,CAAwB,MAAK;AAC7B,aAAO,CAAC,IAAI,CAAC,SAAL,CAAe,QAAf,EAAyB,KAAK,CAAC,GAAN,CAAW,IAAD,IAAU,IAAI,CAAC,KAAL,CAAW,KAA/B,EAAsC,IAAtC,CAA2C,IAA3C,CAAzB,CAAD,CAAP;AACC,KAFD,CAFH;AAKA,GANQ,EAMN,CAAC,QAAD,EAAW,KAAX,CANM,CAAT;AAQA,sBACC;AAAM,aAAS,6BAAsB,QAAtB;AAAf,kBACC;AAAM,aAAS,EAAC;AAAhB,+BAEC,+BAFD,CADD,EAKE,YAAY,CAAC,IAAD,CAAZ,gBAAqB;AAAK,2BAAuB,EAAE;AAAE,YAAM,EAAE,IAAI,CAAC,IAAL,IAAa,IAAI,CAAC;AAA5B;AAA9B,IAArB,GAA6F,IAL/F,eAMC;AAAM,aAAS,EAAC;AAAhB,kBACC,+BADD,cAND,CADD;AAaA,CAhCD;;AAbA,OAAO,aAAP,CA+Ce,IA/Cf,E","file":"dynamic/client/components/Message/Body/Code.tsx","sourcesContent":["import { Code as ASTCode } from '@rocket.chat/message-parser';\nimport React, { FC, useEffect, useState } from 'react';\n\nimport hljs, { register } from '../../../../app/markdown/lib/hljs';\nimport CodeLine from './CodeLine';\n\ntype hljsResult = {\n\tlanguage: string;\n\tcode: string;\n\tvalue: string;\n};\n\nconst isHljsResult = (result: any): result is hljsResult => result?.value;\n\nconst Code: FC<ASTCode> = ({ value = [], language }) => {\n\tconst [code, setCode] = useState<(JSX.Element | null)[] | { language: string; code: string }>(() =>\n\t\tvalue.map((block, index) => {\n\t\t\tswitch (block.type) {\n\t\t\t\tcase 'CODE_LINE':\n\t\t\t\t\treturn <CodeLine key={index} value={block.value} />;\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}),\n\t);\n\tuseEffect(() => {\n\t\t!language || language === 'none'\n\t\t\t? setCode(hljs.highlightAuto(value.map((line) => line.value.value).join('\\n')))\n\t\t\t: register(language).then(() => {\n\t\t\t\t\tsetCode(hljs.highlight(language, value.map((line) => line.value.value).join('\\n')));\n\t\t\t  });\n\t}, [language, value]);\n\n\treturn (\n\t\t<code className={`code-colors hljs ${language}`}>\n\t\t\t<span className='copyonly'>\n\t\t\t\t\\`\\`\\`\n\t\t\t\t<br />\n\t\t\t</span>\n\t\t\t{isHljsResult(code) ? <div dangerouslySetInnerHTML={{ __html: code.code || code.value }} /> : code}\n\t\t\t<span className='copyonly'>\n\t\t\t\t<br />\n\t\t\t\t\\`\\`\\`\n\t\t\t</span>\n\t\t</code>\n\t);\n};\n\nexport default Code;\n"]}