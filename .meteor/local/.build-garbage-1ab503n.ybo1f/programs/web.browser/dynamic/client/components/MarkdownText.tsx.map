{"version":3,"sources":["meteor://ðŸ’»app/client/components/MarkdownText.tsx"],"names":[],"mappings":"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","file":"dynamic/client/components/MarkdownText.tsx","sourcesContent":["import { Box } from '@rocket.chat/fuselage';\nimport dompurify from 'dompurify';\nimport marked from 'marked';\nimport React, { ComponentProps, FC, useMemo } from 'react';\n\nimport { renderMessageEmoji } from '../lib/utils/renderMessageEmoji';\n\ntype MarkdownTextParams = {\n\tcontent: string;\n\tvariant: 'inline' | 'inlineWithoutBreaks' | 'document';\n\tpreserveHtml: boolean;\n\tparseEmoji: boolean;\n\twithTruncatedText: boolean;\n} & ComponentProps<typeof Box>;\n\nconst documentRenderer = new marked.Renderer();\nconst inlineRenderer = new marked.Renderer();\nconst inlineWithoutBreaks = new marked.Renderer();\n\nmarked.InlineLexer.rules.gfm = {\n\t...marked.InlineLexer.rules.gfm,\n\tstrong: /^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n\tem: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n};\n\nconst linkMarked = (href: string | null, _title: string | null, text: string): string =>\n\t`<a href=\"${href}\" target=\"_blank\" rel=\"nofollow\">${text}</a> `;\nconst paragraphMarked = (text: string): string => text;\nconst brMarked = (): string => ' ';\nconst listItemMarked = (text: string): string => {\n\tconst cleanText = text.replace(/<p.*?>|<\\/p>/gi, '');\n\treturn `<li>${cleanText}</li>`;\n};\nconst horizontalRuleMarked = (): string => '';\n\ndocumentRenderer.link = linkMarked;\ndocumentRenderer.listitem = listItemMarked;\n\ninlineRenderer.link = linkMarked;\ninlineRenderer.paragraph = paragraphMarked;\ninlineRenderer.listitem = listItemMarked;\ninlineRenderer.hr = horizontalRuleMarked;\n\ninlineWithoutBreaks.link = linkMarked;\ninlineWithoutBreaks.paragraph = paragraphMarked;\ninlineWithoutBreaks.br = brMarked;\ninlineWithoutBreaks.listitem = listItemMarked;\ninlineWithoutBreaks.hr = horizontalRuleMarked;\n\nconst defaultOptions = {\n\tgfm: true,\n\theaderIds: false,\n};\n\nconst options = {\n\t...defaultOptions,\n\trenderer: documentRenderer,\n};\n\nconst inlineOptions = {\n\t...defaultOptions,\n\trenderer: inlineRenderer,\n};\n\nconst inlineWithoutBreaksOptions = {\n\t...defaultOptions,\n\trenderer: inlineWithoutBreaks,\n};\n\nconst MarkdownText: FC<Partial<MarkdownTextParams>> = ({\n\tcontent,\n\tvariant = 'document',\n\twithTruncatedText = false,\n\tpreserveHtml = false,\n\tparseEmoji = false,\n\t...props\n}) => {\n\tconst sanitizer = dompurify.sanitize;\n\n\tlet markedOptions: {};\n\n\tconst withRichContent = variant;\n\tswitch (variant) {\n\t\tcase 'inline':\n\t\t\tmarkedOptions = inlineOptions;\n\t\t\tbreak;\n\t\tcase 'inlineWithoutBreaks':\n\t\t\tmarkedOptions = inlineWithoutBreaksOptions;\n\t\t\tbreak;\n\t\tcase 'document':\n\t\tdefault:\n\t\t\tmarkedOptions = options;\n\t}\n\n\tconst __html = useMemo(() => {\n\t\tconst html = ((): any => {\n\t\t\tif (content && typeof content === 'string') {\n\t\t\t\tconst markedHtml = marked(new Option(content).innerHTML, markedOptions);\n\n\t\t\t\tif (parseEmoji) {\n\t\t\t\t\t// We are using the old emoji parser here. This could come\n\t\t\t\t\t// with additional processing use, but is the workaround available right now.\n\t\t\t\t\t// Should be replaced in the future with the new parser.\n\t\t\t\t\treturn renderMessageEmoji({ html: markedHtml });\n\t\t\t\t}\n\n\t\t\t\treturn markedHtml;\n\t\t\t}\n\t\t})();\n\n\t\treturn preserveHtml ? html : html && sanitizer(html, { ADD_ATTR: ['target'] });\n\t}, [content, preserveHtml, sanitizer, markedOptions, parseEmoji]);\n\n\treturn __html ? (\n\t\t<Box dangerouslySetInnerHTML={{ __html }} withTruncatedText={withTruncatedText} withRichContent={withRichContent} {...props} />\n\t) : null;\n};\n\nexport default MarkdownText;\n"]}