{"version":3,"sources":["meteor://ðŸ’»app/client/components/Omnichannel/hooks/useAgentsList.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAAS,MAAa,KAAb,CAAqB,sCAArB,EAAqC;AAAA;AAAA;AAAA;;AAAA,CAArC,EAAqC,CAArC;AAAT,OAAO,MAAP,CAAS;AAAA,eAAa,QAAU;AAAvB,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAcvC,MAAM,aAAa,GACzB,OAD4B,IAOzB;AACH,QAAM,CAAC,GAAG,cAAc,EAAxB;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,MAAM,IAAI,UAAJ,EAAP,CAA1C;AACA,QAAM,MAAM,GAAG,WAAW,CAAC,MAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAnB,EAA6D,EAA7D,CAA1B;AACA,QAAM,QAAQ,GAAG,sBAAjB;AAEA,QAAM,SAAS,GAAG,WAAW,CAAC,KAAD,EAAQ,QAAR,CAA7B;AAEA,uBAAqB,CAAC,MAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,QAAM,SAAS,GAAG,WAAW,CAC5B,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,WAAK,EAAE,MAAT;AAAiB;AAAjB,QAA2B,MAAM,SAAS,iCAC3C,OAAO,CAAC,IAAR,IAAgB;AAAE,UAAI,EAAE,OAAO,CAAC;AAAhB,KAD2B;AAE/C,YAAM,EAAE,KAFuC;AAG/C,WAAK,EAAE,GAAG,GAAG,KAHkC;AAI/C,UAAI;AAJ2C,OAAhD;AAOA,UAAM,KAAK,GAAG,MAAM,CAAC,GAAP,CAAY,KAAD,IAAe;AACvC,WAAK,CAAC,UAAN,GAAmB,IAAI,IAAJ,CAAS,KAAK,CAAC,UAAf,CAAnB;AACA,WAAK,CAAC,KAAN,GAAc,KAAK,CAAC,QAApB;AACA,WAAK,CAAC,KAAN,GAAc,KAAK,CAAC,GAApB;AACA,aAAO,KAAP;AACA,KALa,CAAd;AAOA,WAAO,CAAC,OAAR,IACC,KAAK,CAAC,OAAN,CAAc;AACb,WAAK,EAAE,CAAC,CAAC,KAAD,CADK;AAEb,WAAK,EAAE,KAFM;AAGb,gBAAU,EAAE,IAAI,IAAJ;AAHC,KAAd,CADD;AAOA,WAAO;AACN,WADM;AAEN,eAAS,EAAE,KAAK,GAAG;AAFb,KAAP;AAIA,GA3B2B,EA4B5B,CAAC,SAAD,EAAY,OAAO,CAAC,OAApB,EAA6B,OAAO,CAAC,IAArC,EAA2C,CAA3C,CA5B4B,CAA7B;AA+BA,QAAM;AAAE,iBAAF;AAAiB;AAAjB,MAAsC,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAEA,SAAO;AACN,UADM;AAEN,aAFM;AAGN,iBAHM;AAIN;AAJM,GAAP;AAMA,CA1DM,C","file":"dynamic/client/components/Omnichannel/hooks/useAgentsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { ILivechatAgentRecord } from '../../../../definition/ILivechatAgentRecord';\nimport { useEndpoint } from '../../../contexts/ServerContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { useScrollableRecordList } from '../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../lib/lists/RecordList';\n\ntype AgentsListOptions = {\n\ttext: string;\n\thaveAll: boolean;\n};\n\nexport const useAgentsList = (\n\toptions: AgentsListOptions,\n): {\n\titemsList: RecordList<ILivechatAgentRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst t = useTranslation();\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgentRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgentRecord>()), []);\n\tconst endpoint = 'livechat/users/agent';\n\n\tconst getAgents = useEndpoint('GET', endpoint);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { users: agents, total } = await getAgents({\n\t\t\t\t...(options.text && { text: options.text }),\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t\tsort: `{ \"name\": 1 }`,\n\t\t\t});\n\n\t\t\tconst items = agents.map((agent: any) => {\n\t\t\t\tagent._updatedAt = new Date(agent._updatedAt);\n\t\t\t\tagent.label = agent.username;\n\t\t\t\tagent.value = agent._id;\n\t\t\t\treturn agent;\n\t\t\t});\n\n\t\t\toptions.haveAll &&\n\t\t\t\titems.unshift({\n\t\t\t\t\tlabel: t('All'),\n\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total + 1,\n\t\t\t};\n\t\t},\n\t\t[getAgents, options.haveAll, options.text, t],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}