{"version":3,"sources":["meteor://ðŸ’»app/client/components/Message/Metrics/Thread.tsx"],"names":[],"mappings":"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","file":"dynamic/client/components/Message/Metrics/Thread.tsx","sourcesContent":["import React, { useCallback, FC } from 'react';\n\nimport { useEndpoint } from '../../../contexts/ServerContext';\nimport { useTranslation } from '../../../contexts/TranslationContext';\nimport { useTimeAgo } from '../../../hooks/useTimeAgo';\nimport * as NotificationStatus from '../NotificationStatus';\nimport { followStyle, anchor } from '../helpers/followSyle';\nimport { useBlockRendered } from '../hooks/useBlockRendered';\nimport Content from './Content';\nimport Reply from './Reply';\nimport Metrics from './index';\n\ntype ThreadReplyOptions = {\n\tunread: boolean;\n\tmention: boolean;\n\tall: boolean;\n\tlm: Date;\n\tmid: string;\n\trid: string;\n\tcounter: number;\n\tparticipants: number;\n\tfollowing: boolean;\n\topenThread: () => any;\n};\n\nconst ThreadMetric: FC<ThreadReplyOptions> = ({ unread, mention, all, rid, mid, counter, participants, following, lm, openThread }) => {\n\tconst t = useTranslation();\n\n\tconst { className, ref } = useBlockRendered();\n\n\tconst followMessage = useEndpoint('POST', 'chat.followMessage');\n\tconst unfollowMessage = useEndpoint('POST', 'chat.unfollowMessage');\n\tconst format = useTimeAgo();\n\n\tconst handleFollow = useCallback(\n\t\t() => (following ? unfollowMessage({ mid }) : followMessage({ mid })),\n\t\t[followMessage, following, mid, unfollowMessage],\n\t);\n\n\treturn (\n\t\t<Content className={followStyle}>\n\t\t\t<div className={className} ref={ref as any} />\n\t\t\t<Reply data-rid={rid} data-mid={mid} onClick={openThread}>\n\t\t\t\t{t('Reply')}\n\t\t\t</Reply>\n\t\t\t<Metrics>\n\t\t\t\t<Metrics.Item title={t('Replies')}>\n\t\t\t\t\t<Metrics.Item.Icon name='thread' />\n\t\t\t\t\t<Metrics.Item.Label>{counter}</Metrics.Item.Label>\n\t\t\t\t</Metrics.Item>\n\t\t\t\t{participants && (\n\t\t\t\t\t<Metrics.Item title={t('Participants')}>\n\t\t\t\t\t\t<Metrics.Item.Icon name='user' />\n\t\t\t\t\t\t<Metrics.Item.Label>{participants}</Metrics.Item.Label>\n\t\t\t\t\t</Metrics.Item>\n\t\t\t\t)}\n\t\t\t\t<Metrics.Item title={lm?.toLocaleString()}>\n\t\t\t\t\t<Metrics.Item.Icon name='clock' />\n\t\t\t\t\t<Metrics.Item.Label>{format(lm)}</Metrics.Item.Label>\n\t\t\t\t</Metrics.Item>\n\t\t\t\t<Metrics.Item\n\t\t\t\t\tclassName={!following ? anchor : undefined}\n\t\t\t\t\ttitle={t(following ? 'Following' : 'Not_following')}\n\t\t\t\t\tdata-rid={rid}\n\t\t\t\t\tonClick={handleFollow}\n\t\t\t\t>\n\t\t\t\t\t<Metrics.Following name={following ? 'bell' : 'bell-off'} />\n\t\t\t\t\t<Metrics.Item.Label>\n\t\t\t\t\t\t{(mention && <NotificationStatus.Me t={t} />) ||\n\t\t\t\t\t\t\t(all && <NotificationStatus.All t={t} />) ||\n\t\t\t\t\t\t\t(unread && <NotificationStatus.Unread t={t} />)}\n\t\t\t\t\t</Metrics.Item.Label>\n\t\t\t\t</Metrics.Item>\n\t\t\t</Metrics>\n\t\t</Content>\n\t);\n};\n\nexport default ThreadMetric;\n"]}