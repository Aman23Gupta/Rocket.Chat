{"version":3,"sources":["meteor://ðŸ’»app/client/components/RoomAutoComplete/hooks/useRoomsList.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,MAAP,CAAS;AAAA,cAAa,QAAU;AAAvB,CAAT;AAA8C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAYvC,MAAM,YAAY,GACxB,OAD2B,IAOxB;AACH,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,MAAM,IAAI,UAAJ,EAAP,CAA1C;AACA,QAAM,MAAM,GAAG,WAAW,CAAC,MAAM,YAAY,CAAC,IAAI,UAAJ,EAAD,CAAnB,EAA8C,EAA9C,CAA1B;AACA,QAAM,QAAQ,GAAG,qDAAjB;AAEA,QAAM,QAAQ,GAAG,WAAW,CAAC,KAAD,EAAQ,QAAR,CAA5B;AAEA,uBAAqB,CAAC,MAAK;AAC1B,WAAO,IAAI,MAAM,EAAjB;AACA,GAFoB,EAElB,CAAC,OAAD,EAAU,MAAV,CAFkB,CAArB;AAIA,QAAM,SAAS,GAAG,WAAW,CAC5B,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,WAAK,EAAE,KAAT;AAAgB;AAAhB,QAA0B,MAAM,QAAQ,CAAC;AAC9C,cAAQ,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,YAAI,EAAE,OAAO,CAAC,IAAR,IAAgB;AAAxB,OAAf,CADoC;AAE9C,YAAM,EAAE,KAFsC;AAG9C,WAAK,EAAE,KAAK,GAAG,GAH+B;AAI9C,UAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,YAAI,EAAE;AAAR,OAAf;AAJwC,KAAD,CAA9C;AAOA,UAAM,KAAK,GAAG,KAAK,CAAC,GAAN,CAAW,IAAD,IAAc;AACrC,UAAI,CAAC,UAAL,GAAkB,IAAI,IAAJ,CAAS,IAAI,CAAC,UAAd,CAAlB;AACA,UAAI,CAAC,KAAL,GAAa,IAAI,CAAC,IAAlB;AACA,UAAI,CAAC,KAAL,GAAa,IAAI,CAAC,IAAlB;AACA,aAAO,IAAP;AACA,KALa,CAAd;AAOA,WAAO;AACN,WADM;AAEN,eAAS,EAAE;AAFL,KAAP;AAIA,GApB2B,EAqB5B,CAAC,QAAD,EAAW,OAAO,CAAC,IAAnB,CArB4B,CAA7B;AAwBA,QAAM;AAAE,iBAAF;AAAiB;AAAjB,MAAsC,uBAAuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,EAAvB,CAAnE;AAEA,SAAO;AACN,UADM;AAEN,aAFM;AAGN,iBAHM;AAIN;AAJM,GAAP;AAMA,CAlDM,C","file":"dynamic/client/components/RoomAutoComplete/hooks/useRoomsList.ts","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { IRoom } from '../../../../definition/IRoom';\nimport { useEndpoint } from '../../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../lib/lists/RecordList';\n\ntype RoomListOptions = {\n\ttext: string;\n};\n\nexport const useRoomsList = (\n\toptions: RoomListOptions,\n): {\n\titemsList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoom>()), []);\n\tconst endpoint = 'rooms.autocomplete.channelAndPrivate.withPagination';\n\n\tconst getRooms = useEndpoint('GET', endpoint);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\t\tselector: JSON.stringify({ name: options.text || '' }),\n\t\t\t\toffset: start,\n\t\t\t\tcount: start + end,\n\t\t\t\tsort: JSON.stringify({ name: 1 }),\n\t\t\t});\n\n\t\t\tconst items = rooms.map((room: any) => {\n\t\t\t\troom._updatedAt = new Date(room._updatedAt);\n\t\t\t\troom.label = room.name;\n\t\t\t\troom.value = room.name;\n\t\t\t\treturn room;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getRooms, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}