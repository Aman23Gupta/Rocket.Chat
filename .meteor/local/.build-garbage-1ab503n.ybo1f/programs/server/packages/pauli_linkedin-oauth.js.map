{"version":3,"sources":["meteor://ðŸ’»app/packages/pauli:linkedin-oauth/linkedin-server.js"],"names":["_objectSpread","module","link","default","v","export","Linkedin","HTTP","OAuth","ServiceConfiguration","getImage","profilePicture","image","undefined","element","elements","identifier","identifiers","push","displayImage","identifiersUrl","getEmails","accessToken","url","encodeURI","response","get","data","emails","emailAddress","isJSON","str","JSON","parse","e","getTokenResponse","query","config","configurations","findOne","service","ConfigError","responseContent","post","params","grant_type","client_id","clientId","client_secret","openSecret","secret","code","redirect_uri","_redirectUri","content","err","Error","message","parsedResponse","access_token","expiresIn","expires_in","getIdentity","registerService","identity","id","firstName","lastName","fields","linkedinId","length","primaryEmail","email","serviceData","expiresAt","Date","options","profile","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/pauli_linkedin-oauth.js","sourcesContent":["import { HTTP } from 'meteor/http';\nimport { OAuth } from 'meteor/oauth';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\n\nexport const Linkedin = {};\n\nconst getImage = (profilePicture) => {\n\tconst image = [];\n\tif (profilePicture !== undefined) {\n\t\tfor (const element of profilePicture['displayImage~'].elements) {\n\t\t\tfor (const identifier of element.identifiers) {\n\t\t\t\timage.push(identifier.identifier);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tdisplayImage: profilePicture ? profilePicture.displayImage : null,\n\t\tidentifiersUrl: image,\n\t};\n};\n\n// Request for email, returns array\nconst getEmails = function (accessToken) {\n\tconst url = encodeURI(\n\t\t`https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))&oauth2_access_token=${accessToken}`,\n\t);\n\tconst response = HTTP.get(url).data;\n\tconst emails = [];\n\tfor (const element of response.elements) {\n\t\temails.push(element['handle~'].emailAddress);\n\t}\n\treturn emails;\n};\n\n// checks whether a string parses as JSON\nconst isJSON = function (str) {\n\ttry {\n\t\tJSON.parse(str);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nconst getTokenResponse = function (query) {\n\tconst config = ServiceConfiguration.configurations.findOne({ service: 'linkedin' });\n\tif (!config) throw new ServiceConfiguration.ConfigError('Service not configured');\n\n\tlet responseContent;\n\ttry {\n\t\t// Request an access token\n\t\tresponseContent = HTTP.post('https://api.linkedin.com/uas/oauth2/accessToken', {\n\t\t\tparams: {\n\t\t\t\tgrant_type: 'authorization_code',\n\t\t\t\tclient_id: config.clientId,\n\t\t\t\tclient_secret: OAuth.openSecret(config.secret),\n\t\t\t\tcode: query.code,\n\t\t\t\tredirect_uri: OAuth._redirectUri('linkedin', config),\n\t\t\t},\n\t\t}).content;\n\t} catch (err) {\n\t\tthrow new Error(`Failed to complete OAuth handshake with Linkedin. ${err.message}`);\n\t}\n\n\t// If 'responseContent' does not parse as JSON, it is an error.\n\tif (!isJSON(responseContent)) {\n\t\tthrow new Error(`Failed to complete OAuth handshake with Linkedin. ${responseContent}`);\n\t}\n\n\t// Success! Extract access token and expiration\n\tconst parsedResponse = JSON.parse(responseContent);\n\tconst accessToken = parsedResponse.access_token;\n\tconst expiresIn = parsedResponse.expires_in;\n\n\tif (!accessToken) {\n\t\tthrow new Error(`Failed to complete OAuth handshake with Linkedin -- can't find access token in HTTP response. ${responseContent}`);\n\t}\n\n\treturn {\n\t\taccessToken,\n\t\texpiresIn,\n\t};\n};\n\n// Request available fields from r_liteprofile\nconst getIdentity = function (accessToken) {\n\ttry {\n\t\tconst url = encodeURI(\n\t\t\t`https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,profilePicture(displayImage~:playableStreams))&oauth2_access_token=${accessToken}`,\n\t\t);\n\t\treturn HTTP.get(url).data;\n\t} catch (err) {\n\t\tthrow new Error(`Failed to fetch identity from Linkedin. ${err.message}`);\n\t}\n};\n\nOAuth.registerService('linkedin', 2, null, (query) => {\n\tconst response = getTokenResponse(query);\n\tconst { accessToken } = response;\n\tconst identity = getIdentity(accessToken);\n\n\tconst { id, firstName, lastName, profilePicture } = identity;\n\n\tif (!id) {\n\t\tthrow new Error('Linkedin did not provide an id');\n\t}\n\n\tconst emails = getEmails(accessToken);\n\n\tconst fields = {\n\t\tlinkedinId: id,\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture: getImage(profilePicture),\n\t\temails,\n\t};\n\n\tif (emails.length) {\n\t\tconst primaryEmail = emails[0];\n\t\tfields.emailAddress = primaryEmail; // for backward compatibility with previous versions of this package\n\t\tfields.email = primaryEmail;\n\t}\n\n\tconst serviceData = {\n\t\tid,\n\t\taccessToken,\n\t\texpiresAt: +new Date() + 1000 * response.expiresIn,\n\t\t...fields,\n\t};\n\n\treturn {\n\t\tserviceData,\n\t\toptions: {\n\t\t\tprofile: fields,\n\t\t},\n\t};\n});\n\nLinkedin.retrieveCredential = function (credentialToken, credentialSecret) {\n\treturn OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n"]}