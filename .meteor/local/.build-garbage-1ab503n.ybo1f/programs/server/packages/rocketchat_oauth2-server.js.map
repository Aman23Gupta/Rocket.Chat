{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_oauth2-server/model.coffee","meteor://ðŸ’»app/model.coffee","meteor://ðŸ’»app/packages/rocketchat_oauth2-server/oauth.coffee","meteor://ðŸ’»app/oauth.coffee"],"names":["AccessTokens","AuthCodes","Clients","Model","RefreshTokens","debug","constructor","config","accessTokensCollectionName","refreshTokensCollectionName","clientsCollectionName","authCodesCollectionName","accessTokensCollection","Meteor","Collection","refreshTokensCollection","clientsCollection","authCodesCollection","grantTypeAllowed","clientId","grantType","callback","console","log","prototype","getAccessToken","bindEnvironment","bearerToken","e","token","findOne","accessToken","error","getClient","clientSecret","client","active","saveAccessToken","expires","user","tokenId","insert","userId","id","getAuthCode","authCode","code","saveAuthCode","codeId","upsert","saveRefreshToken","refreshToken","getRefreshToken","call","express","oauthserver","Npm","require","OAuth2Server","app","routes","model","oauth","grants","publishAuhorizedClients","initRoutes","publish","ready","users","find","_id","fields","debugMiddleware","self","transformRequestsNotUsingFormUrlencodedType","req","res","next","method","url","is","headers","body","Object","assign","query","all","grant","get","client_id","redirect","concat","redirectUri","includes","redirect_uri","post","sendStatus","send","Accounts","_hashLoginToken","authCodeGrant","allow","update","$addToSet","use","errorHandler"],"mappings":"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","file":"/packages/rocketchat_oauth2-server.js","sourcesContent":["AccessTokens = undefined\nRefreshTokens = undefined\nClients = undefined\nAuthCodes = undefined\ndebug = undefined\n\n@Model = class Model\n\tconstructor: (config={}) ->\n\t\tconfig.accessTokensCollectionName ?= 'oauth_access_tokens'\n\t\tconfig.refreshTokensCollectionName ?= 'oauth_refresh_tokens'\n\t\tconfig.clientsCollectionName ?= 'oauth_clients'\n\t\tconfig.authCodesCollectionName ?= 'oauth_auth_codes'\n\n\t\t@debug = debug = config.debug\n\n\t\t@AccessTokens = AccessTokens = config.accessTokensCollection or new Meteor.Collection config.accessTokensCollectionName\n\t\t@RefreshTokens = RefreshTokens = config.refreshTokensCollection or new Meteor.Collection config.refreshTokensCollectionName\n\t\t@Clients = Clients = config.clientsCollection or new Meteor.Collection config.clientsCollectionName\n\t\t@AuthCodes = AuthCodes = config.authCodesCollection or new Meteor.Collection config.authCodesCollectionName\n\n\n\tgetAccessToken: Meteor.bindEnvironment (bearerToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')'\n\n\t\ttry\n\t\t\ttoken = AccessTokens.findOne accessToken: bearerToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetClient: Meteor.bindEnvironment (clientId, clientSecret, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')'\n\n\t\ttry\n\t\t\tif not clientSecret?\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId }\n\t\t\telse\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId, clientSecret: clientSecret }\n\t\t\tcallback null, client\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgrantTypeAllowed: (clientId, grantType, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')'\n\n\t\treturn callback(false, grantType in ['authorization_code', 'refresh_token'])\n\n\n\tsaveAccessToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = AccessTokens.insert\n\t\t\t\taccessToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetAuthCode: Meteor.bindEnvironment (authCode, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')'\n\n\t\ttry\n\t\t\tcode = AuthCodes.findOne authCode: authCode\n\t\t\tcallback null, code\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveAuthCode: Meteor.bindEnvironment (code, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')'\n\n\t\ttry\n\t\t\tcodeId = AuthCodes.upsert\n\t\t\t\tauthCode: code\n\t\t\t,\n\t\t\t\tauthCode: code\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, codeId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveRefreshToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = RefreshTokens.insert\n\t\t\t\trefreshToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetRefreshToken: Meteor.bindEnvironment (refreshToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')'\n\n\t\ttry\n\t\t\ttoken = RefreshTokens.findOne refreshToken: refreshToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n","var AccessTokens, AuthCodes, Clients, Model, RefreshTokens, debug;\n\nAccessTokens = void 0;\n\nRefreshTokens = void 0;\n\nClients = void 0;\n\nAuthCodes = void 0;\n\ndebug = void 0;\n\nthis.Model = Model = (function() {\n  class Model {\n    constructor(config = {}) {\n      if (config.accessTokensCollectionName == null) {\n        config.accessTokensCollectionName = 'oauth_access_tokens';\n      }\n      if (config.refreshTokensCollectionName == null) {\n        config.refreshTokensCollectionName = 'oauth_refresh_tokens';\n      }\n      if (config.clientsCollectionName == null) {\n        config.clientsCollectionName = 'oauth_clients';\n      }\n      if (config.authCodesCollectionName == null) {\n        config.authCodesCollectionName = 'oauth_auth_codes';\n      }\n      this.debug = debug = config.debug;\n      this.AccessTokens = AccessTokens = config.accessTokensCollection || new Meteor.Collection(config.accessTokensCollectionName);\n      this.RefreshTokens = RefreshTokens = config.refreshTokensCollection || new Meteor.Collection(config.refreshTokensCollectionName);\n      this.Clients = Clients = config.clientsCollection || new Meteor.Collection(config.clientsCollectionName);\n      this.AuthCodes = AuthCodes = config.authCodesCollection || new Meteor.Collection(config.authCodesCollectionName);\n    }\n\n    grantTypeAllowed(clientId, grantType, callback) {\n      if (debug === true) {\n        console.log('[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')');\n      }\n      return callback(false, grantType === 'authorization_code' || grantType === 'refresh_token');\n    }\n\n  };\n\n  Model.prototype.getAccessToken = Meteor.bindEnvironment(function(bearerToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')');\n    }\n    try {\n      token = AccessTokens.findOne({\n        accessToken: bearerToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getClient = Meteor.bindEnvironment(function(clientId, clientSecret, callback) {\n    var client, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')');\n    }\n    try {\n      if (clientSecret == null) {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId\n        });\n      } else {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId,\n          clientSecret: clientSecret\n        });\n      }\n      return callback(null, client);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAccessToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      tokenId = AccessTokens.insert({\n        accessToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, tokenId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getAuthCode = Meteor.bindEnvironment(function(authCode, callback) {\n    var code, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')');\n    }\n    try {\n      code = AuthCodes.findOne({\n        authCode: authCode\n      });\n      return callback(null, code);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAuthCode = Meteor.bindEnvironment(function(code, clientId, expires, user, callback) {\n    var codeId, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')');\n    }\n    try {\n      codeId = AuthCodes.upsert({\n        authCode: code\n      }, {\n        authCode: code,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, codeId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveRefreshToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      return tokenId = RefreshTokens.insert({\n        refreshToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      }, callback(null, tokenId));\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getRefreshToken = Meteor.bindEnvironment(function(refreshToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')');\n    }\n    try {\n      token = RefreshTokens.findOne({\n        refreshToken: refreshToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  return Model;\n\n}).call(this);\n","oauthserver = Npm.require('oauth2-server')\nexpress = Npm.require('express')\n\n# WebApp.rawConnectHandlers.use app\n# JsonRoutes.Middleware.use app\n\n\nclass OAuth2Server\n\tconstructor: (@config={}) ->\n\t\t@app = express()\n\n\t\t@routes = express()\n\n\t\t@model = new Model(@config)\n\n\t\t@oauth = oauthserver\n\t\t\tmodel: @model\n\t\t\tgrants: ['authorization_code', 'refresh_token']\n\t\t\tdebug: @config.debug\n\n\t\t@publishAuhorizedClients()\n\t\t@initRoutes()\n\n\t\treturn @\n\n\n\tpublishAuhorizedClients: ->\n\t\tMeteor.publish 'authorizedOAuth', ->\n\t\t\t\tif not @userId?\n\t\t\t\t\treturn @ready()\n\n\t\t\t\treturn Meteor.users.find\n\t\t\t\t\t_id: @userId\n\t\t\t\t,\n\t\t\t\t\tfields:\n\t\t\t\t\t\t'oauth.authorizedClients': 1\n\n\t\t\t\treturn user?\n\n\n\tinitRoutes: ->\n\t\tself = @\n\t\tdebugMiddleware = (req, res, next) ->\n\t\t\tif self.config.debug is true\n\t\t\t\tconsole.log '[OAuth2Server]', req.method, req.url\n\t\t\tnext()\n\n\t\t# Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n\t\t# and they pass the required information as query strings\n\t\ttransformRequestsNotUsingFormUrlencodedType = (req, res, next) ->\n\t\t\tif not req.is('application/x-www-form-urlencoded') and req.method is 'POST'\n\t\t\t\tif self.config.debug is true\n\t\t\t\t\tconsole.log '[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.'\n\t\t\t\treq.headers['content-type'] = 'application/x-www-form-urlencoded'\n\t\t\t\treq.body = Object.assign {}, req.body, req.query\n\t\t\tnext()\n\n\t\t@app.all '/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, @oauth.grant()\n\n\t\t@app.get '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tclient = self.model.Clients.findOne({ active: true, clientId: req.query.client_id })\n\t\t\tif not client?\n\t\t\t\treturn res.redirect '/oauth/error/404'\n\n\t\t\tif not [].concat(client.redirectUri).includes(req.query.redirect_uri)\n\t\t\t\treturn res.redirect '/oauth/error/invalid_redirect_uri'\n\n\t\t\tnext()\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tif not req.body.token?\n\t\t\t\treturn res.sendStatus(401).send('No token')\n\n\t\t\tuser = Meteor.users.findOne\n\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken req.body.token\n\n\t\t\tif not user?\n\t\t\t\treturn res.sendStatus(401).send('Invalid token')\n\n\t\t\treq.user =\n\t\t\t\tid: user._id\n\n\t\t\tnext()\n\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, @oauth.authCodeGrant (req, next) ->\n\t\t\tif req.body.allow is 'yes'\n\t\t\t\tMeteor.users.update req.user.id, {$addToSet: {'oauth.authorizedClients': @clientId}}\n\n\t\t\tnext(null, req.body.allow is 'yes', req.user)\n\n\t\t@app.use @routes\n\n\t\t@app.all '/oauth/*', @oauth.errorHandler()\n","var express, oauthserver;              \n\noauthserver = Npm.require('oauth2-server');\n\nexpress = Npm.require('express');\n\n// WebApp.rawConnectHandlers.use app\n// JsonRoutes.Middleware.use app\nOAuth2Server = class OAuth2Server {\n  constructor(config = {}) {\n    this.config = config;\n    this.app = express();\n    this.routes = express();\n    this.model = new Model(this.config);\n    this.oauth = oauthserver({\n      model: this.model,\n      grants: ['authorization_code', 'refresh_token'],\n      debug: this.config.debug\n    });\n    this.publishAuhorizedClients();\n    this.initRoutes();\n    return this;\n  }\n\n  publishAuhorizedClients() {\n    return Meteor.publish('authorizedOAuth', function() {\n      if (this.userId == null) {\n        return this.ready();\n      }\n      return Meteor.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          'oauth.authorizedClients': 1\n        }\n      });\n      return typeof user !== \"undefined\" && user !== null;\n    });\n  }\n\n  initRoutes() {\n    var debugMiddleware, self, transformRequestsNotUsingFormUrlencodedType;\n    self = this;\n    debugMiddleware = function(req, res, next) {\n      if (self.config.debug === true) {\n        console.log('[OAuth2Server]', req.method, req.url);\n      }\n      return next();\n    };\n    // Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n    // and they pass the required information as query strings\n    transformRequestsNotUsingFormUrlencodedType = function(req, res, next) {\n      if (!req.is('application/x-www-form-urlencoded') && req.method === 'POST') {\n        if (self.config.debug === true) {\n          console.log('[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.');\n        }\n        req.headers['content-type'] = 'application/x-www-form-urlencoded';\n        req.body = Object.assign({}, req.body, req.query);\n      }\n      return next();\n    };\n    this.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, this.oauth.grant());\n    this.app.get('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var client;\n      client = self.model.Clients.findOne({\n        active: true,\n        clientId: req.query.client_id\n      });\n      if (client == null) {\n        return res.redirect('/oauth/error/404');\n      }\n      if (![].concat(client.redirectUri).includes(req.query.redirect_uri)) {\n        return res.redirect('/oauth/error/invalid_redirect_uri');\n      }\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var user;\n      if (req.body.token == null) {\n        return res.sendStatus(401).send('No token');\n      }\n      user = Meteor.users.findOne({\n        'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.token)\n      });\n      if (user == null) {\n        return res.sendStatus(401).send('Invalid token');\n      }\n      req.user = {\n        id: user._id\n      };\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, this.oauth.authCodeGrant(function(req, next) {\n      if (req.body.allow === 'yes') {\n        Meteor.users.update(req.user.id, {\n          $addToSet: {\n            'oauth.authorizedClients': this.clientId\n          }\n        });\n      }\n      return next(null, req.body.allow === 'yes', req.user);\n    }));\n    this.app.use(this.routes);\n    return this.app.all('/oauth/*', this.oauth.errorHandler());\n  }\n\n};\n"]}