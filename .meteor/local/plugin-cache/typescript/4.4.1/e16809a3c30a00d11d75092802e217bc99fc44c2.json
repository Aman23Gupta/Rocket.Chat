{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/ldap.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/ldap.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/ldap.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/ldap.ts","sourceRoot":"","sources":["app/api/server/v1/ldap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAC;AACpE,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAE9C,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,qBAAqB,EACrB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACxC;QAED,IAAI,QAAQ,CAAC,GAAG,CAAU,aAAa,CAAC,KAAK,IAAI,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QAED,IAAI;YACH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;SAC5B;QAAC,OAAO,KAAK,EAAE;YACf,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACrC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,OAAO,EAAE,oBAA6B;SACtC,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CACJ,IAAI,CAAC,UAAU,EACf,KAAK,CAAC,eAAe,CAAC;YACrB,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACxC;QAED,IAAI,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QAED,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEhD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,OAAO,EAAE,iBAA0B;SACnC,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { hasRole } from '../../../authorization/server';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { LDAP } from '../../../../server/sdk';\n\nAPI.v1.addRoute(\n\t'ldap.testConnection',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.userId) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tif (!hasRole(this.userId, 'admin')) {\n\t\t\t\tthrow new Error('error-not-authorized');\n\t\t\t}\n\n\t\t\tif (settings.get<boolean>('LDAP_Enable') !== true) {\n\t\t\t\tthrow new Error('LDAP_disabled');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait LDAP.testConnection();\n\t\t\t} catch (error) {\n\t\t\t\tSystemLogger.error(error);\n\t\t\t\tthrow new Error('Connection_failed');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: 'Connection_success' as const,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'ldap.testSearch',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (!this.userId) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tif (!hasRole(this.userId, 'admin')) {\n\t\t\t\tthrow new Error('error-not-authorized');\n\t\t\t}\n\n\t\t\tif (settings.get('LDAP_Enable') !== true) {\n\t\t\t\tthrow new Error('LDAP_disabled');\n\t\t\t}\n\n\t\t\tawait LDAP.testSearch(this.bodyParams.username);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: 'LDAP_User_Found' as const,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/ldap.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/ldap.ts"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet hasRole;\nmodule.link(\"../../../authorization/server\", {\n  hasRole(v) {\n    hasRole = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 3);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 4);\nlet LDAP;\nmodule.link(\"../../../../server/sdk\", {\n  LDAP(v) {\n    LDAP = v;\n  }\n\n}, 5);\nAPI.v1.addRoute('ldap.testConnection', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!this.userId) {\n        throw new Error('error-invalid-user');\n      }\n\n      if (!hasRole(this.userId, 'admin')) {\n        throw new Error('error-not-authorized');\n      }\n\n      if (settings.get('LDAP_Enable') !== true) {\n        throw new Error('LDAP_disabled');\n      }\n\n      try {\n        Promise.await(LDAP.testConnection());\n      } catch (error) {\n        SystemLogger.error(error);\n        throw new Error('Connection_failed');\n      }\n\n      return API.v1.success({\n        message: 'Connection_success'\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('ldap.testSearch', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.bodyParams, Match.ObjectIncluding({\n        username: String\n      }));\n\n      if (!this.userId) {\n        throw new Error('error-invalid-user');\n      }\n\n      if (!hasRole(this.userId, 'admin')) {\n        throw new Error('error-not-authorized');\n      }\n\n      if (settings.get('LDAP_Enable') !== true) {\n        throw new Error('LDAP_disabled');\n      }\n\n      Promise.await(LDAP.testSearch(this.bodyParams.username));\n      return API.v1.success({\n        message: 'LDAP_User_Found'\n      });\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/ldap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { hasRole } from '../../../authorization/server';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { LDAP } from '../../../../server/sdk';\n\nAPI.v1.addRoute(\n\t'ldap.testConnection',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.userId) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tif (!hasRole(this.userId, 'admin')) {\n\t\t\t\tthrow new Error('error-not-authorized');\n\t\t\t}\n\n\t\t\tif (settings.get<boolean>('LDAP_Enable') !== true) {\n\t\t\t\tthrow new Error('LDAP_disabled');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait LDAP.testConnection();\n\t\t\t} catch (error) {\n\t\t\t\tSystemLogger.error(error);\n\t\t\t\tthrow new Error('Connection_failed');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: 'Connection_success' as const,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'ldap.testSearch',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (!this.userId) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tif (!hasRole(this.userId, 'admin')) {\n\t\t\t\tthrow new Error('error-not-authorized');\n\t\t\t}\n\n\t\t\tif (settings.get('LDAP_Enable') !== true) {\n\t\t\t\tthrow new Error('LDAP_disabled');\n\t\t\t}\n\n\t\t\tawait LDAP.testSearch(this.bodyParams.username);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: 'LDAP_User_Found' as const,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"e16809a3c30a00d11d75092802e217bc99fc44c2"}
