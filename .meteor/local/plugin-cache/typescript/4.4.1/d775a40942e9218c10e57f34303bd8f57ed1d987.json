{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/messages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/engagementDashboard/messages.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/messages.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/messages.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { roomTypes } from '../../../../app/utils/server';\nimport { Messages, Analytics } from '../../../../app/models/server/raw';\nimport { convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems } from './date';\nimport { IDirectMessageRoom, IRoom } from '../../../../definition/IRoom';\nimport { IMessage } from '../../../../definition/IMessage';\n\nexport const handleMessagesSent = (message: IMessage, room?: IRoom): IMessage => {\n\tconst roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveMessageSent({\n\t\t\tdate: convertDateToInt(message.ts),\n\t\t\troom,\n\t\t}),\n\t);\n\treturn message;\n};\n\nexport const handleMessagesDeleted = (message: IMessage, room?: IRoom): IMessage => {\n\tconst roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveMessageDeleted({\n\t\t\tdate: convertDateToInt(message.ts),\n\t\t\troom,\n\t\t}),\n\t);\n\treturn message;\n};\n\nexport const fillFirstDaysOfMessagesIfNeeded = async (date: Date): Promise<void> => {\n\tconst messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'messages',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!messagesFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst messages = await Messages.getTotalOfMessagesSentByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tawait Promise.all(\n\t\t\tmessages.map((message) =>\n\t\t\t\tAnalytics.insertOne({\n\t\t\t\t\t...message,\n\t\t\t\t\tdate: parseInt(message.date),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n};\n\nexport const findWeeklyMessagesSentData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; messages: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayMessages = (currentPeriodMessages.find((item) => item._id === yesterday) || {}).messages || 0;\n\tconst todayMessages = (currentPeriodMessages.find((item) => item._id === today) || {}).messages || 0;\n\tconst currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n\tconst lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n\treturn {\n\t\tdays: currentPeriodMessages.map((day) => ({\n\t\t\tday: convertIntToDate(day._id),\n\t\t\tmessages: day.messages,\n\t\t})),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalOfMessages,\n\t\t\tvariation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayMessages,\n\t\t\tvariation: todayMessages - yesterdayMessages,\n\t\t},\n\t};\n};\n\nexport const findMessagesSentOrigin = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\torigins: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}[];\n}> => {\n\tconst origins = await Analytics.getMessagesOrigin({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t}).toArray();\n\tconst roomTypesToShow: IRoom['t'][] = roomTypes.getTypesToShowOnDashboard() as IRoom['t'][];\n\tconst responseTypes = origins.map((origin) => origin.t);\n\tconst missingTypes = roomTypesToShow.filter((type): type is IRoom['t'] => !responseTypes.includes(type));\n\tif (missingTypes.length) {\n\t\tmissingTypes.forEach((type) => origins.push({ messages: 0, t: type }));\n\t}\n\n\treturn { origins };\n};\n\nexport const findTopFivePopularChannelsByMessageSentQuantity = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tchannels: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t\tname: IRoom['name'] | IRoom['fname'];\n\t\tusernames?: IDirectMessageRoom['usernames'];\n\t}[];\n}> => {\n\tconst channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: 5, sort: { messages: -1 } },\n\t}).toArray();\n\treturn { channels };\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/messages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/engagementDashboard/messages.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  handleMessagesSent: () => handleMessagesSent,\n  handleMessagesDeleted: () => handleMessagesDeleted,\n  fillFirstDaysOfMessagesIfNeeded: () => fillFirstDaysOfMessagesIfNeeded,\n  findWeeklyMessagesSentData: () => findWeeklyMessagesSentData,\n  findMessagesSentOrigin: () => findMessagesSentOrigin,\n  findTopFivePopularChannelsByMessageSentQuantity: () => findTopFivePopularChannelsByMessageSentQuantity\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet roomTypes;\nmodule.link(\"../../../../app/utils/server\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 1);\nlet Messages, Analytics;\nmodule.link(\"../../../../app/models/server/raw\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Analytics(v) {\n    Analytics = v;\n  }\n\n}, 2);\nlet convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems;\nmodule.link(\"./date\", {\n  convertDateToInt(v) {\n    convertDateToInt = v;\n  },\n\n  diffBetweenDaysInclusive(v) {\n    diffBetweenDaysInclusive = v;\n  },\n\n  convertIntToDate(v) {\n    convertIntToDate = v;\n  },\n\n  getTotalOfWeekItems(v) {\n    getTotalOfWeekItems = v;\n  }\n\n}, 3);\n\nconst handleMessagesSent = (message, room) => {\n  const roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\n  if (!room || !roomTypesToShow.includes(room.t)) {\n    return message;\n  }\n\n  Promise.await(Analytics.saveMessageSent({\n    date: convertDateToInt(message.ts),\n    room\n  }));\n  return message;\n};\n\nconst handleMessagesDeleted = (message, room) => {\n  const roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\n  if (!room || !roomTypesToShow.includes(room.t)) {\n    return message;\n  }\n\n  Promise.await(Analytics.saveMessageDeleted({\n    date: convertDateToInt(message.ts),\n    room\n  }));\n  return message;\n};\n\nconst fillFirstDaysOfMessagesIfNeeded = date => Promise.asyncApply(() => {\n  const messagesFromAnalytics = Promise.await(Analytics.findByTypeBeforeDate({\n    type: 'messages',\n    date: convertDateToInt(date)\n  }).toArray());\n\n  if (!messagesFromAnalytics.length) {\n    const startOfPeriod = moment(date).subtract(90, 'days').toDate();\n    const messages = Promise.await(Messages.getTotalOfMessagesSentByDate({\n      start: startOfPeriod,\n      end: date\n    }));\n    Promise.await(Promise.all(messages.map(message => Analytics.insertOne(_objectSpread(_objectSpread({}, message), {}, {\n      date: parseInt(message.date)\n    })))));\n  }\n});\n\nconst findWeeklyMessagesSentData = _ref => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref;\n  const daysBetweenDates = diffBetweenDaysInclusive(end, start);\n  const endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n  const startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n  const today = convertDateToInt(end);\n  const yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n  const currentPeriodMessages = Promise.await(Analytics.getMessagesSentTotalByDate({\n    start: convertDateToInt(start),\n    end: convertDateToInt(end),\n    options: {\n      count: daysBetweenDates,\n      sort: {\n        _id: -1\n      }\n    }\n  }).toArray());\n  const lastPeriodMessages = Promise.await(Analytics.getMessagesSentTotalByDate({\n    start: convertDateToInt(startOfLastWeek),\n    end: convertDateToInt(endOfLastWeek),\n    options: {\n      count: daysBetweenDates,\n      sort: {\n        _id: -1\n      }\n    }\n  }).toArray());\n  const yesterdayMessages = (currentPeriodMessages.find(item => item._id === yesterday) || {}).messages || 0;\n  const todayMessages = (currentPeriodMessages.find(item => item._id === today) || {}).messages || 0;\n  const currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n  const lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n  return {\n    days: currentPeriodMessages.map(day => ({\n      day: convertIntToDate(day._id),\n      messages: day.messages\n    })),\n    period: {\n      count: currentPeriodTotalOfMessages,\n      variation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages\n    },\n    yesterday: {\n      count: yesterdayMessages,\n      variation: todayMessages - yesterdayMessages\n    }\n  };\n});\n\nconst findMessagesSentOrigin = _ref2 => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref2;\n  const origins = Promise.await(Analytics.getMessagesOrigin({\n    start: convertDateToInt(start),\n    end: convertDateToInt(end)\n  }).toArray());\n  const roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n  const responseTypes = origins.map(origin => origin.t);\n  const missingTypes = roomTypesToShow.filter(type => !responseTypes.includes(type));\n\n  if (missingTypes.length) {\n    missingTypes.forEach(type => origins.push({\n      messages: 0,\n      t: type\n    }));\n  }\n\n  return {\n    origins\n  };\n});\n\nconst findTopFivePopularChannelsByMessageSentQuantity = _ref3 => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref3;\n  const channels = Promise.await(Analytics.getMostPopularChannelsByMessagesSentQuantity({\n    start: convertDateToInt(start),\n    end: convertDateToInt(end),\n    options: {\n      count: 5,\n      sort: {\n        messages: -1\n      }\n    }\n  }).toArray());\n  return {\n    channels\n  };\n});","map":{"version":3,"sources":["ee/server/lib/engagementDashboard/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { roomTypes } from '../../../../app/utils/server';\nimport { Messages, Analytics } from '../../../../app/models/server/raw';\nimport { convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems } from './date';\nimport { IDirectMessageRoom, IRoom } from '../../../../definition/IRoom';\nimport { IMessage } from '../../../../definition/IMessage';\n\nexport const handleMessagesSent = (message: IMessage, room?: IRoom): IMessage => {\n\tconst roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveMessageSent({\n\t\t\tdate: convertDateToInt(message.ts),\n\t\t\troom,\n\t\t}),\n\t);\n\treturn message;\n};\n\nexport const handleMessagesDeleted = (message: IMessage, room?: IRoom): IMessage => {\n\tconst roomTypesToShow = roomTypes.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveMessageDeleted({\n\t\t\tdate: convertDateToInt(message.ts),\n\t\t\troom,\n\t\t}),\n\t);\n\treturn message;\n};\n\nexport const fillFirstDaysOfMessagesIfNeeded = async (date: Date): Promise<void> => {\n\tconst messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'messages',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!messagesFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst messages = await Messages.getTotalOfMessagesSentByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tawait Promise.all(\n\t\t\tmessages.map((message) =>\n\t\t\t\tAnalytics.insertOne({\n\t\t\t\t\t...message,\n\t\t\t\t\tdate: parseInt(message.date),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n};\n\nexport const findWeeklyMessagesSentData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; messages: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayMessages = (currentPeriodMessages.find((item) => item._id === yesterday) || {}).messages || 0;\n\tconst todayMessages = (currentPeriodMessages.find((item) => item._id === today) || {}).messages || 0;\n\tconst currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n\tconst lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n\treturn {\n\t\tdays: currentPeriodMessages.map((day) => ({\n\t\t\tday: convertIntToDate(day._id),\n\t\t\tmessages: day.messages,\n\t\t})),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalOfMessages,\n\t\t\tvariation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayMessages,\n\t\t\tvariation: todayMessages - yesterdayMessages,\n\t\t},\n\t};\n};\n\nexport const findMessagesSentOrigin = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\torigins: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}[];\n}> => {\n\tconst origins = await Analytics.getMessagesOrigin({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t}).toArray();\n\tconst roomTypesToShow: IRoom['t'][] = roomTypes.getTypesToShowOnDashboard() as IRoom['t'][];\n\tconst responseTypes = origins.map((origin) => origin.t);\n\tconst missingTypes = roomTypesToShow.filter((type): type is IRoom['t'] => !responseTypes.includes(type));\n\tif (missingTypes.length) {\n\t\tmissingTypes.forEach((type) => origins.push({ messages: 0, t: type }));\n\t}\n\n\treturn { origins };\n};\n\nexport const findTopFivePopularChannelsByMessageSentQuantity = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tchannels: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t\tname: IRoom['name'] | IRoom['fname'];\n\t\tusernames?: IDirectMessageRoom['usernames'];\n\t}[];\n}> => {\n\tconst channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: 5, sort: { messages: -1 } },\n\t}).toArray();\n\treturn { channels };\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"d775a40942e9218c10e57f34303bd8f57ed1d987"}
