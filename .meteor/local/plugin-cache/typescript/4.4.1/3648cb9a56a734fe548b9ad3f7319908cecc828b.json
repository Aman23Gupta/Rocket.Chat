{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/banners.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/banners.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/banners.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/banners.ts","sourceRoot":"","sources":["app/api/server/v1/banners.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../api';\nimport { Banner } from '../../../../server/sdk';\nimport { BannerPlatform } from '../../../../definition/IBanner';\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.getNew',\n\t{ authRequired: true },\n\t{\n\t\t// deprecated\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t\tbid: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform, bid: bannerId } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, bannerId ?? undefined);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners/:id',\n\t{ authRequired: true },\n\t{\n\t\t// TODO: move to users/:id/banners\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tid: Match.Where((id: unknown): id is string => typeof id === 'string' && Boolean(id.trim())),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform } = this.queryParams;\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, id);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.dismiss',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tbannerId: Match.Where((id: unknown): id is string => typeof id === 'string' && Boolean(id.trim())),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { bannerId } = this.bodyParams;\n\n\t\t\tawait Banner.dismiss(this.userId, bannerId);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/banners.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/banners.ts"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 1);\nlet Banner;\nmodule.link(\"../../../../server/sdk\", {\n  Banner(v) {\n    Banner = v;\n  }\n\n}, 2);\nlet BannerPlatform;\nmodule.link(\"../../../../definition/IBanner\", {\n  BannerPlatform(v) {\n    BannerPlatform = v;\n  }\n\n}, 3);\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute('banners.getNew', {\n  authRequired: true\n}, {\n  // deprecated\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.ObjectIncluding({\n        platform: Match.OneOf(...Object.values(BannerPlatform)),\n        bid: Match.Maybe(String)\n      }));\n      const {\n        platform,\n        bid: bannerId\n      } = this.queryParams;\n      const banners = Promise.await(Banner.getBannersForUser(this.userId, platform, bannerId !== null && bannerId !== void 0 ? bannerId : undefined));\n      return API.v1.success({\n        banners\n      });\n    });\n  }\n\n});\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('banners/:id', {\n  authRequired: true\n}, {\n  // TODO: move to users/:id/banners\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.urlParams, Match.ObjectIncluding({\n        id: Match.Where(id => typeof id === 'string' && Boolean(id.trim()))\n      }));\n      check(this.queryParams, Match.ObjectIncluding({\n        platform: Match.OneOf(...Object.values(BannerPlatform))\n      }));\n      const {\n        platform\n      } = this.queryParams;\n      const {\n        id\n      } = this.urlParams;\n      const banners = Promise.await(Banner.getBannersForUser(this.userId, platform, id));\n      return API.v1.success({\n        banners\n      });\n    });\n  }\n\n});\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('banners', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.ObjectIncluding({\n        platform: Match.OneOf(...Object.values(BannerPlatform))\n      }));\n      const {\n        platform\n      } = this.queryParams;\n      const banners = Promise.await(Banner.getBannersForUser(this.userId, platform));\n      return API.v1.success({\n        banners\n      });\n    });\n  }\n\n});\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('banners.dismiss', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.bodyParams, Match.ObjectIncluding({\n        bannerId: Match.Where(id => typeof id === 'string' && Boolean(id.trim()))\n      }));\n      const {\n        bannerId\n      } = this.bodyParams;\n      Promise.await(Banner.dismiss(this.userId, bannerId));\n      return API.v1.success();\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/banners.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../api';\nimport { Banner } from '../../../../server/sdk';\nimport { BannerPlatform } from '../../../../definition/IBanner';\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.getNew',\n\t{ authRequired: true },\n\t{\n\t\t// deprecated\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t\tbid: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform, bid: bannerId } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, bannerId ?? undefined);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners/:id',\n\t{ authRequired: true },\n\t{\n\t\t// TODO: move to users/:id/banners\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tid: Match.Where((id: unknown): id is string => typeof id === 'string' && Boolean(id.trim())),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform } = this.queryParams;\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, id);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tplatform: Match.OneOf(...Object.values(BannerPlatform)),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { platform } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.dismiss',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tbannerId: Match.Where((id: unknown): id is string => typeof id === 'string' && Boolean(id.trim())),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { bannerId } = this.bodyParams;\n\n\t\t\tawait Banner.dismiss(this.userId, bannerId);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"3648cb9a56a734fe548b9ad3f7319908cecc828b"}
