{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/users.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/engagementDashboard/users.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/users.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/users.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/users.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { Users, Analytics, Sessions } from '../../../../app/models/server/raw';\nimport { convertDateToInt, diffBetweenDaysInclusive, getTotalOfWeekItems, convertIntToDate } from './date';\nimport { IUser } from '../../../../definition/IUser';\n\nexport const handleUserCreated = (user: IUser): IUser => {\n\tif (user.roles?.includes('anonymous')) {\n\t\treturn user;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveUserData({\n\t\t\tdate: convertDateToInt(user.createdAt),\n\t\t}),\n\t);\n\n\treturn user;\n};\n\nexport const fillFirstDaysOfUsersIfNeeded = async (date: Date): Promise<void> => {\n\tconst usersFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'users',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!usersFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst users = await Users.getTotalOfRegisteredUsersByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tusers.forEach((user) =>\n\t\t\tAnalytics.insertOne({\n\t\t\t\t...user,\n\t\t\t\tdate: parseInt(user.date),\n\t\t\t}),\n\t\t);\n\t}\n};\n\nexport const findWeeklyUsersRegisteredData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; users: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodUsers = await Analytics.getTotalOfRegisteredUsersByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodUsers = await Analytics.getTotalOfRegisteredUsersByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayUsers = (currentPeriodUsers.find((item) => item._id === yesterday) || {}).users || 0;\n\tconst todayUsers = (currentPeriodUsers.find((item) => item._id === today) || {}).users || 0;\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\treturn {\n\t\tdays: currentPeriodUsers.map((day) => ({ day: convertIntToDate(day._id), users: day.users })),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalUsers,\n\t\t\tvariation: currentPeriodTotalUsers - lastPeriodTotalUsers,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayUsers,\n\t\t\tvariation: todayUsers - yesterdayUsers,\n\t\t},\n\t};\n};\n\nconst createDestructuredDate = (\n\tinput: moment.MomentInput,\n): {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n} => {\n\tconst date = moment(input);\n\n\treturn {\n\t\tyear: date.year(),\n\t\tmonth: date.month() + 1,\n\t\tday: date.date(),\n\t};\n};\n\nexport const findActiveUsersMonthlyData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tmonth: {\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusersList: IUser['_id'][];\n\t\tusers: number;\n\t}[];\n}> => ({\n\tmonth: await Sessions.getActiveUsersOfPeriodByDayBetweenDates({\n\t\tstart: createDestructuredDate(start),\n\t\tend: createDestructuredDate(end),\n\t}),\n});\n\nexport const findBusiestsChatsInADayByHours = async ({\n\tstart,\n}: {\n\tstart: Date;\n}): Promise<{\n\thours: {\n\t\thour: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\thours: await Sessions.getBusiestTimeWithinHoursPeriod({\n\t\tstart: moment(start).subtract(24, 'hours').toDate(),\n\t\tend: start,\n\t\tgroupSize: 2,\n\t}),\n});\n\nexport const findBusiestsChatsWithinAWeek = async ({\n\tstart,\n}: {\n\tstart: Date;\n}): Promise<{\n\tmonth: {\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\tmonth: await Sessions.getTotalOfSessionsByDayBetweenDates({\n\t\tstart: createDestructuredDate(moment(start).subtract(7, 'days')),\n\t\tend: createDestructuredDate(start),\n\t}),\n});\n\nexport const findUserSessionsByHourWithinAWeek = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tweek: {\n\t\thour: number;\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\tweek: await Sessions.getTotalOfSessionByHourAndDayBetweenDates({\n\t\tstart,\n\t\tend,\n\t}),\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/engagementDashboard/users.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/engagementDashboard/users.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  handleUserCreated: () => handleUserCreated,\n  fillFirstDaysOfUsersIfNeeded: () => fillFirstDaysOfUsersIfNeeded,\n  findWeeklyUsersRegisteredData: () => findWeeklyUsersRegisteredData,\n  findActiveUsersMonthlyData: () => findActiveUsersMonthlyData,\n  findBusiestsChatsInADayByHours: () => findBusiestsChatsInADayByHours,\n  findBusiestsChatsWithinAWeek: () => findBusiestsChatsWithinAWeek,\n  findUserSessionsByHourWithinAWeek: () => findUserSessionsByHourWithinAWeek\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet Users, Analytics, Sessions;\nmodule.link(\"../../../../app/models/server/raw\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Analytics(v) {\n    Analytics = v;\n  },\n\n  Sessions(v) {\n    Sessions = v;\n  }\n\n}, 1);\nlet convertDateToInt, diffBetweenDaysInclusive, getTotalOfWeekItems, convertIntToDate;\nmodule.link(\"./date\", {\n  convertDateToInt(v) {\n    convertDateToInt = v;\n  },\n\n  diffBetweenDaysInclusive(v) {\n    diffBetweenDaysInclusive = v;\n  },\n\n  getTotalOfWeekItems(v) {\n    getTotalOfWeekItems = v;\n  },\n\n  convertIntToDate(v) {\n    convertIntToDate = v;\n  }\n\n}, 2);\n\nconst handleUserCreated = user => {\n  var _user$roles;\n\n  if ((_user$roles = user.roles) !== null && _user$roles !== void 0 && _user$roles.includes('anonymous')) {\n    return user;\n  }\n\n  Promise.await(Analytics.saveUserData({\n    date: convertDateToInt(user.createdAt)\n  }));\n  return user;\n};\n\nconst fillFirstDaysOfUsersIfNeeded = date => Promise.asyncApply(() => {\n  const usersFromAnalytics = Promise.await(Analytics.findByTypeBeforeDate({\n    type: 'users',\n    date: convertDateToInt(date)\n  }).toArray());\n\n  if (!usersFromAnalytics.length) {\n    const startOfPeriod = moment(date).subtract(90, 'days').toDate();\n    const users = Promise.await(Users.getTotalOfRegisteredUsersByDate({\n      start: startOfPeriod,\n      end: date\n    }));\n    users.forEach(user => Analytics.insertOne(_objectSpread(_objectSpread({}, user), {}, {\n      date: parseInt(user.date)\n    })));\n  }\n});\n\nconst findWeeklyUsersRegisteredData = _ref => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref;\n  const daysBetweenDates = diffBetweenDaysInclusive(end, start);\n  const endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n  const startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n  const today = convertDateToInt(end);\n  const yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n  const currentPeriodUsers = Promise.await(Analytics.getTotalOfRegisteredUsersByDate({\n    start: convertDateToInt(start),\n    end: convertDateToInt(end),\n    options: {\n      count: daysBetweenDates,\n      sort: {\n        _id: -1\n      }\n    }\n  }).toArray());\n  const lastPeriodUsers = Promise.await(Analytics.getTotalOfRegisteredUsersByDate({\n    start: convertDateToInt(startOfLastWeek),\n    end: convertDateToInt(endOfLastWeek),\n    options: {\n      count: daysBetweenDates,\n      sort: {\n        _id: -1\n      }\n    }\n  }).toArray());\n  const yesterdayUsers = (currentPeriodUsers.find(item => item._id === yesterday) || {}).users || 0;\n  const todayUsers = (currentPeriodUsers.find(item => item._id === today) || {}).users || 0;\n  const currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n  const lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n  return {\n    days: currentPeriodUsers.map(day => ({\n      day: convertIntToDate(day._id),\n      users: day.users\n    })),\n    period: {\n      count: currentPeriodTotalUsers,\n      variation: currentPeriodTotalUsers - lastPeriodTotalUsers\n    },\n    yesterday: {\n      count: yesterdayUsers,\n      variation: todayUsers - yesterdayUsers\n    }\n  };\n});\n\nconst createDestructuredDate = input => {\n  const date = moment(input);\n  return {\n    year: date.year(),\n    month: date.month() + 1,\n    day: date.date()\n  };\n};\n\nconst findActiveUsersMonthlyData = _ref2 => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref2;\n  return {\n    month: Promise.await(Sessions.getActiveUsersOfPeriodByDayBetweenDates({\n      start: createDestructuredDate(start),\n      end: createDestructuredDate(end)\n    }))\n  };\n});\n\nconst findBusiestsChatsInADayByHours = _ref3 => Promise.asyncApply(() => {\n  let {\n    start\n  } = _ref3;\n  return {\n    hours: Promise.await(Sessions.getBusiestTimeWithinHoursPeriod({\n      start: moment(start).subtract(24, 'hours').toDate(),\n      end: start,\n      groupSize: 2\n    }))\n  };\n});\n\nconst findBusiestsChatsWithinAWeek = _ref4 => Promise.asyncApply(() => {\n  let {\n    start\n  } = _ref4;\n  return {\n    month: Promise.await(Sessions.getTotalOfSessionsByDayBetweenDates({\n      start: createDestructuredDate(moment(start).subtract(7, 'days')),\n      end: createDestructuredDate(start)\n    }))\n  };\n});\n\nconst findUserSessionsByHourWithinAWeek = _ref5 => Promise.asyncApply(() => {\n  let {\n    start,\n    end\n  } = _ref5;\n  return {\n    week: Promise.await(Sessions.getTotalOfSessionByHourAndDayBetweenDates({\n      start,\n      end\n    }))\n  };\n});","map":{"version":3,"sources":["ee/server/lib/engagementDashboard/users.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { Users, Analytics, Sessions } from '../../../../app/models/server/raw';\nimport { convertDateToInt, diffBetweenDaysInclusive, getTotalOfWeekItems, convertIntToDate } from './date';\nimport { IUser } from '../../../../definition/IUser';\n\nexport const handleUserCreated = (user: IUser): IUser => {\n\tif (user.roles?.includes('anonymous')) {\n\t\treturn user;\n\t}\n\n\tPromise.await(\n\t\tAnalytics.saveUserData({\n\t\t\tdate: convertDateToInt(user.createdAt),\n\t\t}),\n\t);\n\n\treturn user;\n};\n\nexport const fillFirstDaysOfUsersIfNeeded = async (date: Date): Promise<void> => {\n\tconst usersFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'users',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!usersFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst users = await Users.getTotalOfRegisteredUsersByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tusers.forEach((user) =>\n\t\t\tAnalytics.insertOne({\n\t\t\t\t...user,\n\t\t\t\tdate: parseInt(user.date),\n\t\t\t}),\n\t\t);\n\t}\n};\n\nexport const findWeeklyUsersRegisteredData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; users: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodUsers = await Analytics.getTotalOfRegisteredUsersByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodUsers = await Analytics.getTotalOfRegisteredUsersByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayUsers = (currentPeriodUsers.find((item) => item._id === yesterday) || {}).users || 0;\n\tconst todayUsers = (currentPeriodUsers.find((item) => item._id === today) || {}).users || 0;\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\treturn {\n\t\tdays: currentPeriodUsers.map((day) => ({ day: convertIntToDate(day._id), users: day.users })),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalUsers,\n\t\t\tvariation: currentPeriodTotalUsers - lastPeriodTotalUsers,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayUsers,\n\t\t\tvariation: todayUsers - yesterdayUsers,\n\t\t},\n\t};\n};\n\nconst createDestructuredDate = (\n\tinput: moment.MomentInput,\n): {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n} => {\n\tconst date = moment(input);\n\n\treturn {\n\t\tyear: date.year(),\n\t\tmonth: date.month() + 1,\n\t\tday: date.date(),\n\t};\n};\n\nexport const findActiveUsersMonthlyData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tmonth: {\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusersList: IUser['_id'][];\n\t\tusers: number;\n\t}[];\n}> => ({\n\tmonth: await Sessions.getActiveUsersOfPeriodByDayBetweenDates({\n\t\tstart: createDestructuredDate(start),\n\t\tend: createDestructuredDate(end),\n\t}),\n});\n\nexport const findBusiestsChatsInADayByHours = async ({\n\tstart,\n}: {\n\tstart: Date;\n}): Promise<{\n\thours: {\n\t\thour: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\thours: await Sessions.getBusiestTimeWithinHoursPeriod({\n\t\tstart: moment(start).subtract(24, 'hours').toDate(),\n\t\tend: start,\n\t\tgroupSize: 2,\n\t}),\n});\n\nexport const findBusiestsChatsWithinAWeek = async ({\n\tstart,\n}: {\n\tstart: Date;\n}): Promise<{\n\tmonth: {\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\tmonth: await Sessions.getTotalOfSessionsByDayBetweenDates({\n\t\tstart: createDestructuredDate(moment(start).subtract(7, 'days')),\n\t\tend: createDestructuredDate(start),\n\t}),\n});\n\nexport const findUserSessionsByHourWithinAWeek = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tweek: {\n\t\thour: number;\n\t\tday: number;\n\t\tmonth: number;\n\t\tyear: number;\n\t\tusers: number;\n\t}[];\n}> => ({\n\tweek: await Sessions.getTotalOfSessionByHourAndDayBetweenDates({\n\t\tstart,\n\t\tend,\n\t}),\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"fbdba97663ff8e1262e06ab9342e8d682fcaeb68"}
