{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/migrations.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/migrations.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/migrations.ts","inputSourceMap":{"version":3,"file":"server/lib/migrations.ts","sourceRoot":"","sources":["server/lib/migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport { Info } from '../../app/utils/server';\nimport { Logger } from './logger/Logger';\nimport { showErrorBox } from './logger/showBox';\n\ntype IControl = {\n\tversion: number;\n\tlocked: boolean;\n};\n\nexport type IMigration = {\n\tname?: string;\n\tversion: number;\n\tup: Function;\n\tdown?: Function;\n};\n\nconst log = new Logger('Migrations');\n\nconst migrations = new Set<IMigration>();\n\nconst collection = new Mongo.Collection('migrations');\n\n// sets the control record\nfunction setControl(control: IControl): IControl {\n\tcollection.update(\n\t\t{\n\t\t\t_id: 'control',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tversion: control.version,\n\t\t\t\tlocked: control.locked,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\treturn control;\n}\n\n// gets the current control record, optionally creating it if non-existant\nexport function getControl(): IControl {\n\tconst control = collection.findOne({\n\t\t_id: 'control',\n\t}) as IControl;\n\n\treturn (\n\t\tcontrol ||\n\t\tsetControl({\n\t\t\tversion: 0,\n\t\t\tlocked: false,\n\t\t})\n\t);\n}\n\n// Returns true if lock was acquired.\nfunction lock(): boolean {\n\tconst date = new Date();\n\tconst dateMinusInterval = new Date();\n\tdateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n\n\tconst build = Info ? Info.build.date : date;\n\n\t// This is atomic. The selector ensures only one caller at a time will see\n\t// the unlocked control, and locking occurs in the same update's modifier.\n\t// All other simultaneous callers will get false back from the update.\n\treturn (\n\t\tcollection.update(\n\t\t\t{\n\t\t\t\t_id: 'control',\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t$lt: dateMinusInterval,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tbuildAt: {\n\t\t\t\t\t\t\t$ne: build,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tlockedAt: date,\n\t\t\t\t\tbuildAt: build,\n\t\t\t\t},\n\t\t\t},\n\t\t) === 1\n\t);\n}\n\nexport function addMigration(migration: IMigration): void {\n\tif (!migration?.version) {\n\t\tthrow new Error('Migration version is required');\n\t}\n\tif (!migration?.up) {\n\t\tthrow new Error('Migration up() is required');\n\t}\n\tmigrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version: number): void {\n\tsetControl({\n\t\tlocked: false,\n\t\tversion,\n\t});\n}\n\nfunction getOrderedMigrations(): IMigration[] {\n\treturn Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version: number, control: IControl, e: any): void {\n\tshowErrorBox(\n\t\t'ERROR! SERVER STOPPED',\n\t\t[\n\t\t\t'Your database migration failed:',\n\t\t\te.message,\n\t\t\t'',\n\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t'If the problem persists, please contact support.',\n\t\t\t'',\n\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t`Database target version: ${version}`,\n\t\t\t'',\n\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t].join('\\n'),\n\t);\n}\n\n// run the actual migration\nfunction migrate(direction: 'up' | 'down', migration: IMigration): void {\n\tif (typeof migration[direction] !== 'function') {\n\t\tthrow new Error(`Cannot migrate ${direction} on version ${migration.version}`);\n\t}\n\n\tlog.startup(`Running ${direction}() on version ${migration.version}${migration.name ? `(${migration.name})` : ''}`);\n\n\tPromise.await(migration[direction]?.(migration));\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nexport function migrateDatabase(targetVersion: 'latest' | number, subcommands?: string[]): boolean {\n\tconst control = getControl();\n\tconst currentVersion = control.version;\n\n\tconst orderedMigrations = getOrderedMigrations();\n\n\tif (orderedMigrations.length === 0) {\n\t\tlog.startup('No migrations to run');\n\t\treturn true;\n\t}\n\n\t// version 0 means it is a fresh database, just set the control to latest known version and skip\n\tif (currentVersion === 0) {\n\t\tsetControl({\n\t\t\tlocked: false,\n\t\t\tversion: orderedMigrations[orderedMigrations.length - 1].version,\n\t\t});\n\t\treturn true;\n\t}\n\n\tconst version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n\n\t// get latest version\n\t// const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n\tif (!lock()) {\n\t\tconst msg = `Not migrating, control is locked. Attempt ${currentAttempt}/${maxAttempts}`;\n\t\tif (currentAttempt <= maxAttempts) {\n\t\t\tlog.warn(`${msg}. Trying again in ${retryInterval} seconds.`);\n\n\t\t\t(Meteor as unknown as any)._sleepForMs(retryInterval * 1000);\n\n\t\t\tcurrentAttempt++;\n\t\t\treturn migrateDatabase(targetVersion, subcommands);\n\t\t}\n\t\tconst control = getControl(); // Side effect: upserts control document.\n\t\tshowErrorBox(\n\t\t\t'ERROR! SERVER STOPPED',\n\t\t\t[\n\t\t\t\t'Your database migration control is locked.',\n\t\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t\t'If the problem persists, please contact support.',\n\t\t\t\t'',\n\t\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t\t`Database target version: ${version}`,\n\t\t\t\t'',\n\t\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t\t].join('\\n'),\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (subcommands?.includes('rerun')) {\n\t\tlog.startup(`Rerunning version ${targetVersion}`);\n\t\tconst migration = orderedMigrations.find((migration) => migration.version === targetVersion);\n\n\t\tif (!migration) {\n\t\t\tthrow new Error(`Cannot rerun migration ${targetVersion}`);\n\t\t}\n\n\t\ttry {\n\t\t\tmigrate('up', migration);\n\t\t} catch (e) {\n\t\t\tshowError(version, control, e);\n\t\t\tlog.error({ err: e });\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tlog.startup('Finished migrating.');\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tif (currentVersion === version) {\n\t\tlog.startup(`Not migrating, already at version ${version}`);\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tconst startIdx = orderedMigrations.findIndex((migration) => migration.version === currentVersion);\n\tif (startIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${currentVersion}`);\n\t}\n\n\tconst endIdx = orderedMigrations.findIndex((migration) => migration.version === version);\n\tif (endIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${version}`);\n\t}\n\n\tlog.startup(`Migrating from version ${orderedMigrations[startIdx].version} -> ${orderedMigrations[endIdx].version}`);\n\n\ttry {\n\t\tif (currentVersion < version) {\n\t\t\tfor (let i = startIdx; i < endIdx; i++) {\n\t\t\t\tmigrate('up', orderedMigrations[i + 1]);\n\t\t\t\tsetControl({\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tversion: orderedMigrations[i + 1].version,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = startIdx; i > endIdx; i--) {\n\t\t\t\tmigrate('down', orderedMigrations[i]);\n\t\t\t\tsetControl({\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tversion: orderedMigrations[i - 1].version,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tshowError(version, control, e);\n\t\tlog.error({ err: e });\n\t\tprocess.exit(1);\n\t}\n\n\tunlock(orderedMigrations[endIdx].version);\n\tlog.startup('Finished migrating.');\n\n\t// remember to run meteor with --once otherwise it will restart\n\tif (subcommands?.includes('exit')) {\n\t\tprocess.exit(0);\n\t}\n\n\treturn true;\n}\n\nexport const onFreshInstall =\n\tgetControl().version !== 0\n\t\t? (): void => {\n\t\t\t\t/* noop */\n\t\t  }\n\t\t: (fn: () => unknown): unknown => fn();\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/migrations.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/migrations.ts"}},"code":"module.export({\n  getControl: () => getControl,\n  addMigration: () => addMigration,\n  migrateDatabase: () => migrateDatabase,\n  onFreshInstall: () => onFreshInstall\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet Info;\nmodule.link(\"../../app/utils/server\", {\n  Info(v) {\n    Info = v;\n  }\n\n}, 2);\nlet Logger;\nmodule.link(\"./logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nlet showErrorBox;\nmodule.link(\"./logger/showBox\", {\n  showErrorBox(v) {\n    showErrorBox = v;\n  }\n\n}, 4);\nconst log = new Logger('Migrations');\nconst migrations = new Set();\nconst collection = new Mongo.Collection('migrations'); // sets the control record\n\nfunction setControl(control) {\n  collection.update({\n    _id: 'control'\n  }, {\n    $set: {\n      version: control.version,\n      locked: control.locked\n    }\n  }, {\n    upsert: true\n  });\n  return control;\n} // gets the current control record, optionally creating it if non-existant\n\n\nfunction getControl() {\n  const control = collection.findOne({\n    _id: 'control'\n  });\n  return control || setControl({\n    version: 0,\n    locked: false\n  });\n}\n\n// Returns true if lock was acquired.\nfunction lock() {\n  const date = new Date();\n  const dateMinusInterval = new Date();\n  dateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n  const build = Info ? Info.build.date : date; // This is atomic. The selector ensures only one caller at a time will see\n  // the unlocked control, and locking occurs in the same update's modifier.\n  // All other simultaneous callers will get false back from the update.\n\n  return collection.update({\n    _id: 'control',\n    $or: [{\n      locked: false\n    }, {\n      lockedAt: {\n        $lt: dateMinusInterval\n      }\n    }, {\n      buildAt: {\n        $ne: build\n      }\n    }]\n  }, {\n    $set: {\n      locked: true,\n      lockedAt: date,\n      buildAt: build\n    }\n  }) === 1;\n}\n\nfunction addMigration(migration) {\n  if (!(migration !== null && migration !== void 0 && migration.version)) {\n    throw new Error('Migration version is required');\n  }\n\n  if (!(migration !== null && migration !== void 0 && migration.up)) {\n    throw new Error('Migration up() is required');\n  }\n\n  migrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version) {\n  setControl({\n    locked: false,\n    version\n  });\n}\n\nfunction getOrderedMigrations() {\n  return Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version, control, e) {\n  showErrorBox('ERROR! SERVER STOPPED', ['Your database migration failed:', e.message, '', 'Please make sure you are running the latest version and try again.', 'If the problem persists, please contact support.', '', \"This Rocket.Chat version: \".concat(Info.version), \"Database locked at version: \".concat(control.version), \"Database target version: \".concat(version), '', \"Commit: \".concat(Info.commit.hash), \"Date: \".concat(Info.commit.date), \"Branch: \".concat(Info.commit.branch), \"Tag: \".concat(Info.commit.tag)].join('\\n'));\n} // run the actual migration\n\n\nfunction migrate(direction, migration) {\n  var _migration$direction;\n\n  if (typeof migration[direction] !== 'function') {\n    throw new Error(\"Cannot migrate \".concat(direction, \" on version \").concat(migration.version));\n  }\n\n  log.startup(\"Running \".concat(direction, \"() on version \").concat(migration.version).concat(migration.name ? \"(\".concat(migration.name, \")\") : ''));\n  Promise.await((_migration$direction = migration[direction]) === null || _migration$direction === void 0 ? void 0 : _migration$direction.call(migration, migration));\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nfunction migrateDatabase(targetVersion, subcommands) {\n  const control = getControl();\n  const currentVersion = control.version;\n  const orderedMigrations = getOrderedMigrations();\n\n  if (orderedMigrations.length === 0) {\n    log.startup('No migrations to run');\n    return true;\n  } // version 0 means it is a fresh database, just set the control to latest known version and skip\n\n\n  if (currentVersion === 0) {\n    setControl({\n      locked: false,\n      version: orderedMigrations[orderedMigrations.length - 1].version\n    });\n    return true;\n  }\n\n  const version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion; // get latest version\n  // const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n  if (!lock()) {\n    const msg = \"Not migrating, control is locked. Attempt \".concat(currentAttempt, \"/\").concat(maxAttempts);\n\n    if (currentAttempt <= maxAttempts) {\n      log.warn(\"\".concat(msg, \". Trying again in \").concat(retryInterval, \" seconds.\"));\n\n      Meteor._sleepForMs(retryInterval * 1000);\n\n      currentAttempt++;\n      return migrateDatabase(targetVersion, subcommands);\n    }\n\n    const control = getControl(); // Side effect: upserts control document.\n\n    showErrorBox('ERROR! SERVER STOPPED', ['Your database migration control is locked.', 'Please make sure you are running the latest version and try again.', 'If the problem persists, please contact support.', '', \"This Rocket.Chat version: \".concat(Info.version), \"Database locked at version: \".concat(control.version), \"Database target version: \".concat(version), '', \"Commit: \".concat(Info.commit.hash), \"Date: \".concat(Info.commit.date), \"Branch: \".concat(Info.commit.branch), \"Tag: \".concat(Info.commit.tag)].join('\\n'));\n    process.exit(1);\n  }\n\n  if (subcommands !== null && subcommands !== void 0 && subcommands.includes('rerun')) {\n    log.startup(\"Rerunning version \".concat(targetVersion));\n    const migration = orderedMigrations.find(migration => migration.version === targetVersion);\n\n    if (!migration) {\n      throw new Error(\"Cannot rerun migration \".concat(targetVersion));\n    }\n\n    try {\n      migrate('up', migration);\n    } catch (e) {\n      showError(version, control, e);\n      log.error({\n        err: e\n      });\n      process.exit(1);\n    }\n\n    log.startup('Finished migrating.');\n    unlock(currentVersion);\n    return true;\n  }\n\n  if (currentVersion === version) {\n    log.startup(\"Not migrating, already at version \".concat(version));\n    unlock(currentVersion);\n    return true;\n  }\n\n  const startIdx = orderedMigrations.findIndex(migration => migration.version === currentVersion);\n\n  if (startIdx === -1) {\n    throw new Error(\"Can't find migration version \".concat(currentVersion));\n  }\n\n  const endIdx = orderedMigrations.findIndex(migration => migration.version === version);\n\n  if (endIdx === -1) {\n    throw new Error(\"Can't find migration version \".concat(version));\n  }\n\n  log.startup(\"Migrating from version \".concat(orderedMigrations[startIdx].version, \" -> \").concat(orderedMigrations[endIdx].version));\n\n  try {\n    if (currentVersion < version) {\n      for (let i = startIdx; i < endIdx; i++) {\n        migrate('up', orderedMigrations[i + 1]);\n        setControl({\n          locked: true,\n          version: orderedMigrations[i + 1].version\n        });\n      }\n    } else {\n      for (let i = startIdx; i > endIdx; i--) {\n        migrate('down', orderedMigrations[i]);\n        setControl({\n          locked: true,\n          version: orderedMigrations[i - 1].version\n        });\n      }\n    }\n  } catch (e) {\n    showError(version, control, e);\n    log.error({\n      err: e\n    });\n    process.exit(1);\n  }\n\n  unlock(orderedMigrations[endIdx].version);\n  log.startup('Finished migrating.'); // remember to run meteor with --once otherwise it will restart\n\n  if (subcommands !== null && subcommands !== void 0 && subcommands.includes('exit')) {\n    process.exit(0);\n  }\n\n  return true;\n}\n\nconst onFreshInstall = getControl().version !== 0 ? () => {\n  /* noop */\n} : fn => fn();","map":{"version":3,"sources":["server/lib/migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport { Info } from '../../app/utils/server';\nimport { Logger } from './logger/Logger';\nimport { showErrorBox } from './logger/showBox';\n\ntype IControl = {\n\tversion: number;\n\tlocked: boolean;\n};\n\nexport type IMigration = {\n\tname?: string;\n\tversion: number;\n\tup: Function;\n\tdown?: Function;\n};\n\nconst log = new Logger('Migrations');\n\nconst migrations = new Set<IMigration>();\n\nconst collection = new Mongo.Collection('migrations');\n\n// sets the control record\nfunction setControl(control: IControl): IControl {\n\tcollection.update(\n\t\t{\n\t\t\t_id: 'control',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tversion: control.version,\n\t\t\t\tlocked: control.locked,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\treturn control;\n}\n\n// gets the current control record, optionally creating it if non-existant\nexport function getControl(): IControl {\n\tconst control = collection.findOne({\n\t\t_id: 'control',\n\t}) as IControl;\n\n\treturn (\n\t\tcontrol ||\n\t\tsetControl({\n\t\t\tversion: 0,\n\t\t\tlocked: false,\n\t\t})\n\t);\n}\n\n// Returns true if lock was acquired.\nfunction lock(): boolean {\n\tconst date = new Date();\n\tconst dateMinusInterval = new Date();\n\tdateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n\n\tconst build = Info ? Info.build.date : date;\n\n\t// This is atomic. The selector ensures only one caller at a time will see\n\t// the unlocked control, and locking occurs in the same update's modifier.\n\t// All other simultaneous callers will get false back from the update.\n\treturn (\n\t\tcollection.update(\n\t\t\t{\n\t\t\t\t_id: 'control',\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t$lt: dateMinusInterval,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tbuildAt: {\n\t\t\t\t\t\t\t$ne: build,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tlockedAt: date,\n\t\t\t\t\tbuildAt: build,\n\t\t\t\t},\n\t\t\t},\n\t\t) === 1\n\t);\n}\n\nexport function addMigration(migration: IMigration): void {\n\tif (!migration?.version) {\n\t\tthrow new Error('Migration version is required');\n\t}\n\tif (!migration?.up) {\n\t\tthrow new Error('Migration up() is required');\n\t}\n\tmigrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version: number): void {\n\tsetControl({\n\t\tlocked: false,\n\t\tversion,\n\t});\n}\n\nfunction getOrderedMigrations(): IMigration[] {\n\treturn Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version: number, control: IControl, e: any): void {\n\tshowErrorBox(\n\t\t'ERROR! SERVER STOPPED',\n\t\t[\n\t\t\t'Your database migration failed:',\n\t\t\te.message,\n\t\t\t'',\n\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t'If the problem persists, please contact support.',\n\t\t\t'',\n\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t`Database target version: ${version}`,\n\t\t\t'',\n\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t].join('\\n'),\n\t);\n}\n\n// run the actual migration\nfunction migrate(direction: 'up' | 'down', migration: IMigration): void {\n\tif (typeof migration[direction] !== 'function') {\n\t\tthrow new Error(`Cannot migrate ${direction} on version ${migration.version}`);\n\t}\n\n\tlog.startup(`Running ${direction}() on version ${migration.version}${migration.name ? `(${migration.name})` : ''}`);\n\n\tPromise.await(migration[direction]?.(migration));\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nexport function migrateDatabase(targetVersion: 'latest' | number, subcommands?: string[]): boolean {\n\tconst control = getControl();\n\tconst currentVersion = control.version;\n\n\tconst orderedMigrations = getOrderedMigrations();\n\n\tif (orderedMigrations.length === 0) {\n\t\tlog.startup('No migrations to run');\n\t\treturn true;\n\t}\n\n\t// version 0 means it is a fresh database, just set the control to latest known version and skip\n\tif (currentVersion === 0) {\n\t\tsetControl({\n\t\t\tlocked: false,\n\t\t\tversion: orderedMigrations[orderedMigrations.length - 1].version,\n\t\t});\n\t\treturn true;\n\t}\n\n\tconst version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n\n\t// get latest version\n\t// const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n\tif (!lock()) {\n\t\tconst msg = `Not migrating, control is locked. Attempt ${currentAttempt}/${maxAttempts}`;\n\t\tif (currentAttempt <= maxAttempts) {\n\t\t\tlog.warn(`${msg}. Trying again in ${retryInterval} seconds.`);\n\n\t\t\t(Meteor as unknown as any)._sleepForMs(retryInterval * 1000);\n\n\t\t\tcurrentAttempt++;\n\t\t\treturn migrateDatabase(targetVersion, subcommands);\n\t\t}\n\t\tconst control = getControl(); // Side effect: upserts control document.\n\t\tshowErrorBox(\n\t\t\t'ERROR! SERVER STOPPED',\n\t\t\t[\n\t\t\t\t'Your database migration control is locked.',\n\t\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t\t'If the problem persists, please contact support.',\n\t\t\t\t'',\n\t\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t\t`Database target version: ${version}`,\n\t\t\t\t'',\n\t\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t\t].join('\\n'),\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (subcommands?.includes('rerun')) {\n\t\tlog.startup(`Rerunning version ${targetVersion}`);\n\t\tconst migration = orderedMigrations.find((migration) => migration.version === targetVersion);\n\n\t\tif (!migration) {\n\t\t\tthrow new Error(`Cannot rerun migration ${targetVersion}`);\n\t\t}\n\n\t\ttry {\n\t\t\tmigrate('up', migration);\n\t\t} catch (e) {\n\t\t\tshowError(version, control, e);\n\t\t\tlog.error({ err: e });\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tlog.startup('Finished migrating.');\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tif (currentVersion === version) {\n\t\tlog.startup(`Not migrating, already at version ${version}`);\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tconst startIdx = orderedMigrations.findIndex((migration) => migration.version === currentVersion);\n\tif (startIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${currentVersion}`);\n\t}\n\n\tconst endIdx = orderedMigrations.findIndex((migration) => migration.version === version);\n\tif (endIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${version}`);\n\t}\n\n\tlog.startup(`Migrating from version ${orderedMigrations[startIdx].version} -> ${orderedMigrations[endIdx].version}`);\n\n\ttry {\n\t\tif (currentVersion < version) {\n\t\t\tfor (let i = startIdx; i < endIdx; i++) {\n\t\t\t\tmigrate('up', orderedMigrations[i + 1]);\n\t\t\t\tsetControl({\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tversion: orderedMigrations[i + 1].version,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = startIdx; i > endIdx; i--) {\n\t\t\t\tmigrate('down', orderedMigrations[i]);\n\t\t\t\tsetControl({\n\t\t\t\t\tlocked: true,\n\t\t\t\t\tversion: orderedMigrations[i - 1].version,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tshowError(version, control, e);\n\t\tlog.error({ err: e });\n\t\tprocess.exit(1);\n\t}\n\n\tunlock(orderedMigrations[endIdx].version);\n\tlog.startup('Finished migrating.');\n\n\t// remember to run meteor with --once otherwise it will restart\n\tif (subcommands?.includes('exit')) {\n\t\tprocess.exit(0);\n\t}\n\n\treturn true;\n}\n\nexport const onFreshInstall =\n\tgetControl().version !== 0\n\t\t? (): void => {\n\t\t\t\t/* noop */\n\t\t  }\n\t\t: (fn: () => unknown): unknown => fn();\n"],"sourceRoot":""},"sourceType":"module","hash":"23234299959943d0b90fce3fafb239e241a92f9e"}
