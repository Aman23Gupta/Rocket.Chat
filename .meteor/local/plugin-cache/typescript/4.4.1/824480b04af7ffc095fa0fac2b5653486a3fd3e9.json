{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/oauth/Manager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/oauth/Manager.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/oauth/Manager.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/oauth/Manager.ts","sourceRoot":"","sources":["ee/server/lib/oauth/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { addUserRoles, removeUserFromRoles } from '../../../../app/authorization/server';\nimport { Rooms } from '../../../../app/models/server';\nimport { addUserToRoom, createRoom } from '../../../../app/lib/server/functions';\nimport { Logger } from '../../../../app/logger/server';\nimport { Roles } from '../../../../app/models/server/raw';\n\nexport const logger = new Logger('OAuth');\n\nexport class OAuthEEManager {\n\tstatic mapSSOGroupsToChannels(\n\t\tuser: Record<string, any>,\n\t\tidentity: Record<string, any>,\n\t\tgroupClaimName: string,\n\t\tchannelsMap: Record<string, any> | undefined,\n\t\tchannelsAdmin: string,\n\t): void {\n\t\tif (user && identity && groupClaimName) {\n\t\t\tconst groupsFromSSO = identity[groupClaimName] || [];\n\n\t\t\tfor (const ssoGroup in channelsMap) {\n\t\t\t\tif (typeof ssoGroup === 'string') {\n\t\t\t\t\tlet channels = channelsMap[ssoGroup];\n\t\t\t\t\tif (!Array.isArray(channels)) {\n\t\t\t\t\t\tchannels = [channels];\n\t\t\t\t\t}\n\t\t\t\t\tfor (const channel of channels) {\n\t\t\t\t\t\tlet room = Rooms.findOneByNonValidatedName(channel);\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\troom = createRoom('c', channel, channelsAdmin, [], false);\n\t\t\t\t\t\t\tif (!room || !room.rid) {\n\t\t\t\t\t\t\t\tlogger.error(`could not create channel ${channel}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n\t\t\t\t\t\t\taddUserToRoom(room._id, user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic updateRolesFromSSO(user: Record<string, any>, identity: Record<string, any>, roleClaimName: string, rolesToSync: string[]): void {\n\t\tif (user && identity && roleClaimName) {\n\t\t\tconst rolesFromSSO = this.mapRolesFromSSO(identity, roleClaimName);\n\n\t\t\tif (!Array.isArray(user.roles)) {\n\t\t\t\tuser.roles = [];\n\t\t\t}\n\n\t\t\tconst toRemove = user.roles.filter((val: any) => !rolesFromSSO.includes(val) && rolesToSync.includes(val));\n\n\t\t\t// remove all roles that the user has, but sso doesnt\n\t\t\tremoveUserFromRoles(user._id, toRemove);\n\n\t\t\tconst toAdd = rolesFromSSO.filter((val: any) => !user.roles.includes(val) && (!rolesToSync.length || rolesToSync.includes(val)));\n\n\t\t\t// add all roles that sso has, but the user doesnt\n\t\t\taddUserRoles(user._id, toAdd);\n\t\t}\n\t}\n\n\t// Returns list of roles from SSO identity\n\tstatic mapRolesFromSSO(identity: Record<string, any>, roleClaimName: string): string[] {\n\t\tlet roles: string[] = [];\n\t\tif (identity && roleClaimName) {\n\t\t\t// Adding roles\n\t\t\tif (identity[roleClaimName] && Array.isArray(identity[roleClaimName])) {\n\t\t\t\troles = identity[roleClaimName].filter(\n\t\t\t\t\t(val: string) => val !== 'offline_access' && val !== 'uma_authorization' && Promise.await(Roles.findOneByIdOrName(val)),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn roles;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/lib/oauth/Manager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/oauth/Manager.ts"}},"code":"module.export({\n  logger: () => logger,\n  OAuthEEManager: () => OAuthEEManager\n});\nlet addUserRoles, removeUserFromRoles;\nmodule.link(\"../../../../app/authorization/server\", {\n  addUserRoles(v) {\n    addUserRoles = v;\n  },\n\n  removeUserFromRoles(v) {\n    removeUserFromRoles = v;\n  }\n\n}, 0);\nlet Rooms;\nmodule.link(\"../../../../app/models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 1);\nlet addUserToRoom, createRoom;\nmodule.link(\"../../../../app/lib/server/functions\", {\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  },\n\n  createRoom(v) {\n    createRoom = v;\n  }\n\n}, 2);\nlet Logger;\nmodule.link(\"../../../../app/logger/server\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 3);\nlet Roles;\nmodule.link(\"../../../../app/models/server/raw\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 4);\nconst logger = new Logger('OAuth');\n\nclass OAuthEEManager {\n  static mapSSOGroupsToChannels(user, identity, groupClaimName, channelsMap, channelsAdmin) {\n    if (user && identity && groupClaimName) {\n      const groupsFromSSO = identity[groupClaimName] || [];\n\n      for (const ssoGroup in channelsMap) {\n        if (typeof ssoGroup === 'string') {\n          let channels = channelsMap[ssoGroup];\n\n          if (!Array.isArray(channels)) {\n            channels = [channels];\n          }\n\n          for (const channel of channels) {\n            let room = Rooms.findOneByNonValidatedName(channel);\n\n            if (!room) {\n              room = createRoom('c', channel, channelsAdmin, [], false);\n\n              if (!room || !room.rid) {\n                logger.error(\"could not create channel \".concat(channel));\n                return;\n              }\n            }\n\n            if (Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n              addUserToRoom(room._id, user);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  static updateRolesFromSSO(user, identity, roleClaimName, rolesToSync) {\n    if (user && identity && roleClaimName) {\n      const rolesFromSSO = this.mapRolesFromSSO(identity, roleClaimName);\n\n      if (!Array.isArray(user.roles)) {\n        user.roles = [];\n      }\n\n      const toRemove = user.roles.filter(val => !rolesFromSSO.includes(val) && rolesToSync.includes(val)); // remove all roles that the user has, but sso doesnt\n\n      removeUserFromRoles(user._id, toRemove);\n      const toAdd = rolesFromSSO.filter(val => !user.roles.includes(val) && (!rolesToSync.length || rolesToSync.includes(val))); // add all roles that sso has, but the user doesnt\n\n      addUserRoles(user._id, toAdd);\n    }\n  } // Returns list of roles from SSO identity\n\n\n  static mapRolesFromSSO(identity, roleClaimName) {\n    let roles = [];\n\n    if (identity && roleClaimName) {\n      // Adding roles\n      if (identity[roleClaimName] && Array.isArray(identity[roleClaimName])) {\n        roles = identity[roleClaimName].filter(val => val !== 'offline_access' && val !== 'uma_authorization' && Promise.await(Roles.findOneByIdOrName(val)));\n      }\n    }\n\n    return roles;\n  }\n\n}","map":{"version":3,"sources":["ee/server/lib/oauth/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { addUserRoles, removeUserFromRoles } from '../../../../app/authorization/server';\nimport { Rooms } from '../../../../app/models/server';\nimport { addUserToRoom, createRoom } from '../../../../app/lib/server/functions';\nimport { Logger } from '../../../../app/logger/server';\nimport { Roles } from '../../../../app/models/server/raw';\n\nexport const logger = new Logger('OAuth');\n\nexport class OAuthEEManager {\n\tstatic mapSSOGroupsToChannels(\n\t\tuser: Record<string, any>,\n\t\tidentity: Record<string, any>,\n\t\tgroupClaimName: string,\n\t\tchannelsMap: Record<string, any> | undefined,\n\t\tchannelsAdmin: string,\n\t): void {\n\t\tif (user && identity && groupClaimName) {\n\t\t\tconst groupsFromSSO = identity[groupClaimName] || [];\n\n\t\t\tfor (const ssoGroup in channelsMap) {\n\t\t\t\tif (typeof ssoGroup === 'string') {\n\t\t\t\t\tlet channels = channelsMap[ssoGroup];\n\t\t\t\t\tif (!Array.isArray(channels)) {\n\t\t\t\t\t\tchannels = [channels];\n\t\t\t\t\t}\n\t\t\t\t\tfor (const channel of channels) {\n\t\t\t\t\t\tlet room = Rooms.findOneByNonValidatedName(channel);\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\troom = createRoom('c', channel, channelsAdmin, [], false);\n\t\t\t\t\t\t\tif (!room || !room.rid) {\n\t\t\t\t\t\t\t\tlogger.error(`could not create channel ${channel}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n\t\t\t\t\t\t\taddUserToRoom(room._id, user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic updateRolesFromSSO(user: Record<string, any>, identity: Record<string, any>, roleClaimName: string, rolesToSync: string[]): void {\n\t\tif (user && identity && roleClaimName) {\n\t\t\tconst rolesFromSSO = this.mapRolesFromSSO(identity, roleClaimName);\n\n\t\t\tif (!Array.isArray(user.roles)) {\n\t\t\t\tuser.roles = [];\n\t\t\t}\n\n\t\t\tconst toRemove = user.roles.filter((val: any) => !rolesFromSSO.includes(val) && rolesToSync.includes(val));\n\n\t\t\t// remove all roles that the user has, but sso doesnt\n\t\t\tremoveUserFromRoles(user._id, toRemove);\n\n\t\t\tconst toAdd = rolesFromSSO.filter((val: any) => !user.roles.includes(val) && (!rolesToSync.length || rolesToSync.includes(val)));\n\n\t\t\t// add all roles that sso has, but the user doesnt\n\t\t\taddUserRoles(user._id, toAdd);\n\t\t}\n\t}\n\n\t// Returns list of roles from SSO identity\n\tstatic mapRolesFromSSO(identity: Record<string, any>, roleClaimName: string): string[] {\n\t\tlet roles: string[] = [];\n\t\tif (identity && roleClaimName) {\n\t\t\t// Adding roles\n\t\t\tif (identity[roleClaimName] && Array.isArray(identity[roleClaimName])) {\n\t\t\t\troles = identity[roleClaimName].filter(\n\t\t\t\t\t(val: string) => val !== 'offline_access' && val !== 'uma_authorization' && Promise.await(Roles.findOneByIdOrName(val)),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn roles;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"824480b04af7ffc095fa0fac2b5653486a3fd3e9"}
