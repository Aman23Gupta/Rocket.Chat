{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v237.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v237.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v237.ts","inputSourceMap":{"version":3,"file":"server/startup/migrations/v237.ts","sourceRoot":"","sources":["server/startup/migrations/v237.ts"],"names":[],"mappings":"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","sourcesContent":["import { addMigration } from '../../lib/migrations';\nimport { settings } from '../../../app/settings/server';\nimport { isEnterprise } from '../../../ee/app/license/server';\nimport { Settings } from '../../../app/models/server/raw';\n\nfunction copySettingValue(newName: string, oldName: string): void {\n\tconst value = settings.get(oldName);\n\tif (value === undefined) {\n\t\treturn;\n\t}\n\n\tSettings.update({ _id: newName }, { $set: { value } }, { upsert: true });\n}\n\naddMigration({\n\tversion: 237,\n\tasync up() {\n\t\tconst isEE = isEnterprise();\n\n\t\t// Override AD defaults with the previously configured values\n\t\tcopySettingValue('LDAP_AD_User_Search_Field', 'LDAP_User_Search_Field');\n\t\tcopySettingValue('LDAP_AD_Username_Field', 'LDAP_Username_Field');\n\n\t\t// If we're sure the server is AD, then select it - otherwise keep it as generic ldap\n\t\tconst useAdDefaults = settings.get('LDAP_User_Search_Field') === 'sAMAccountName';\n\t\tSettings.update(\n\t\t\t{ _id: 'LDAP_Server_Type' },\n\t\t\t{ $set: { value: useAdDefaults ? 'ad' : '' } },\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\n\t\t// The setting to use the field map also determined if the user data was updated on login or not\n\t\tcopySettingValue('LDAP_Update_Data_On_Login', 'LDAP_Sync_User_Data');\n\n\t\tlet fieldMap;\n\t\ttry {\n\t\t\tfieldMap = JSON.parse(settings.get<string>('LDAP_Sync_User_Data_FieldMap') ?? '');\n\t\t} catch (_error) {\n\t\t\t// Ignore any parsing errors;\n\t\t}\n\n\t\tif (fieldMap) {\n\t\t\tconst newObject: Record<string, string> = {};\n\n\t\t\tfor (const key in fieldMap) {\n\t\t\t\tif (!fieldMap.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (fieldMap[key] === 'name') {\n\t\t\t\t\tSettings.update({ _id: 'LDAP_Name_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tSettings.update({ _id: 'LDAP_AD_Name_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (fieldMap[key] === 'email') {\n\t\t\t\t\tSettings.update({ _id: 'LDAP_Email_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tSettings.update({ _id: 'LDAP_AD_Email_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnewObject[fieldMap[key]] = key;\n\t\t\t}\n\n\t\t\tif (isEE) {\n\t\t\t\tconst newJson = JSON.stringify(newObject);\n\t\t\t\tSettings.update({ _id: 'LDAP_CustomFieldMap' }, { $set: { value: newJson } }, { upsert: true });\n\n\t\t\t\tconst syncCustomFields = Object.keys(newObject).length > 0 && settings.get('LDAP_Sync_User_Data');\n\t\t\t\tSettings.update({ _id: 'LDAP_Sync_Custom_Fields' }, { $set: { value: syncCustomFields } }, { upsert: true });\n\t\t\t}\n\t\t}\n\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles', 'LDAP_Sync_User_Data_Groups');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_AutoRemove', 'LDAP_Sync_User_Data_Groups_AutoRemove');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n\t\tcopySettingValue('LDAP_Sync_User_Data_RolesMap', 'LDAP_Sync_User_Data_GroupsMap');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels', 'LDAP_Sync_User_Data_Groups_AutoChannels');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Admin', 'LDAP_Sync_User_Data_Groups_AutoChannels_Admin');\n\t\tcopySettingValue('LDAP_Sync_User_Data_ChannelsMap', 'LDAP_Sync_User_Data_Groups_AutoChannelsMap');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels', 'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels');\n\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n\n\t\tawait Settings.deleteMany({\n\t\t\t_id: {\n\t\t\t\t$in: [\n\t\t\t\t\t'LDAP_Sync_Now',\n\t\t\t\t\t'LDAP_Test_Connection',\n\t\t\t\t\t'LDAP_Sync_CustomFields',\n\t\t\t\t\t'LDAP_Sync_User_Data',\n\t\t\t\t\t'LDAP_Sync_User_Data_FieldMap',\n\t\t\t\t\t'LDAP_Enable_LDAP_Roles_To_RC_Roles',\n\t\t\t\t\t'LDAP_Roles_To_Rocket_Chat_Roles',\n\t\t\t\t\t'LDAP_Validate_Roles_For_Each_Login',\n\t\t\t\t\t'LDAP_Default_Role_To_User',\n\t\t\t\t\t'LDAP_Query_To_Get_User_Groups',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoRemove',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_Filter',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_BaseDN',\n\t\t\t\t\t'LDAP_Sync_User_Data_GroupsMap',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannels',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannels_Admin',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannelsMap',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels',\n\t\t\t\t\t'LDAP_Internal_Log_Level',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t},\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v237.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v237.ts"}},"code":"let addMigration;\nmodule.link(\"../../lib/migrations\", {\n  addMigration(v) {\n    addMigration = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet isEnterprise;\nmodule.link(\"../../../ee/app/license/server\", {\n  isEnterprise(v) {\n    isEnterprise = v;\n  }\n\n}, 2);\nlet Settings;\nmodule.link(\"../../../app/models/server/raw\", {\n  Settings(v) {\n    Settings = v;\n  }\n\n}, 3);\n\nfunction copySettingValue(newName, oldName) {\n  const value = settings.get(oldName);\n\n  if (value === undefined) {\n    return;\n  }\n\n  Settings.update({\n    _id: newName\n  }, {\n    $set: {\n      value\n    }\n  }, {\n    upsert: true\n  });\n}\n\naddMigration({\n  version: 237,\n\n  up() {\n    return Promise.asyncApply(() => {\n      const isEE = isEnterprise(); // Override AD defaults with the previously configured values\n\n      copySettingValue('LDAP_AD_User_Search_Field', 'LDAP_User_Search_Field');\n      copySettingValue('LDAP_AD_Username_Field', 'LDAP_Username_Field'); // If we're sure the server is AD, then select it - otherwise keep it as generic ldap\n\n      const useAdDefaults = settings.get('LDAP_User_Search_Field') === 'sAMAccountName';\n      Settings.update({\n        _id: 'LDAP_Server_Type'\n      }, {\n        $set: {\n          value: useAdDefaults ? 'ad' : ''\n        }\n      }, {\n        upsert: true\n      }); // The setting to use the field map also determined if the user data was updated on login or not\n\n      copySettingValue('LDAP_Update_Data_On_Login', 'LDAP_Sync_User_Data');\n      let fieldMap;\n\n      try {\n        var _settings$get;\n\n        fieldMap = JSON.parse((_settings$get = settings.get('LDAP_Sync_User_Data_FieldMap')) !== null && _settings$get !== void 0 ? _settings$get : '');\n      } catch (_error) {// Ignore any parsing errors;\n      }\n\n      if (fieldMap) {\n        const newObject = {};\n\n        for (const key in fieldMap) {\n          if (!fieldMap.hasOwnProperty(key)) {\n            continue;\n          }\n\n          if (fieldMap[key] === 'name') {\n            Settings.update({\n              _id: 'LDAP_Name_Field'\n            }, {\n              $set: {\n                value: key\n              }\n            }, {\n              upsert: true\n            });\n            Settings.update({\n              _id: 'LDAP_AD_Name_Field'\n            }, {\n              $set: {\n                value: key\n              }\n            }, {\n              upsert: true\n            });\n            continue;\n          }\n\n          if (fieldMap[key] === 'email') {\n            Settings.update({\n              _id: 'LDAP_Email_Field'\n            }, {\n              $set: {\n                value: key\n              }\n            }, {\n              upsert: true\n            });\n            Settings.update({\n              _id: 'LDAP_AD_Email_Field'\n            }, {\n              $set: {\n                value: key\n              }\n            }, {\n              upsert: true\n            });\n            continue;\n          }\n\n          newObject[fieldMap[key]] = key;\n        }\n\n        if (isEE) {\n          const newJson = JSON.stringify(newObject);\n          Settings.update({\n            _id: 'LDAP_CustomFieldMap'\n          }, {\n            $set: {\n              value: newJson\n            }\n          }, {\n            upsert: true\n          });\n          const syncCustomFields = Object.keys(newObject).length > 0 && settings.get('LDAP_Sync_User_Data');\n          Settings.update({\n            _id: 'LDAP_Sync_Custom_Fields'\n          }, {\n            $set: {\n              value: syncCustomFields\n            }\n          }, {\n            upsert: true\n          });\n        }\n      }\n\n      copySettingValue('LDAP_Sync_User_Data_Roles', 'LDAP_Sync_User_Data_Groups');\n      copySettingValue('LDAP_Sync_User_Data_Roles_AutoRemove', 'LDAP_Sync_User_Data_Groups_AutoRemove');\n      copySettingValue('LDAP_Sync_User_Data_Roles_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n      copySettingValue('LDAP_Sync_User_Data_Roles_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n      copySettingValue('LDAP_Sync_User_Data_RolesMap', 'LDAP_Sync_User_Data_GroupsMap');\n      copySettingValue('LDAP_Sync_User_Data_Channels', 'LDAP_Sync_User_Data_Groups_AutoChannels');\n      copySettingValue('LDAP_Sync_User_Data_Channels_Admin', 'LDAP_Sync_User_Data_Groups_AutoChannels_Admin');\n      copySettingValue('LDAP_Sync_User_Data_ChannelsMap', 'LDAP_Sync_User_Data_Groups_AutoChannelsMap');\n      copySettingValue('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels', 'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels');\n      copySettingValue('LDAP_Sync_User_Data_Channels_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n      copySettingValue('LDAP_Sync_User_Data_Channels_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n      Promise.await(Settings.deleteMany({\n        _id: {\n          $in: ['LDAP_Sync_Now', 'LDAP_Test_Connection', 'LDAP_Sync_CustomFields', 'LDAP_Sync_User_Data', 'LDAP_Sync_User_Data_FieldMap', 'LDAP_Enable_LDAP_Roles_To_RC_Roles', 'LDAP_Roles_To_Rocket_Chat_Roles', 'LDAP_Validate_Roles_For_Each_Login', 'LDAP_Default_Role_To_User', 'LDAP_Query_To_Get_User_Groups', 'LDAP_Sync_User_Data_Groups', 'LDAP_Sync_User_Data_Groups_AutoRemove', 'LDAP_Sync_User_Data_Groups_Filter', 'LDAP_Sync_User_Data_Groups_BaseDN', 'LDAP_Sync_User_Data_GroupsMap', 'LDAP_Sync_User_Data_Groups_AutoChannels', 'LDAP_Sync_User_Data_Groups_AutoChannels_Admin', 'LDAP_Sync_User_Data_Groups_AutoChannelsMap', 'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels', 'LDAP_Internal_Log_Level']\n        }\n      }));\n    });\n  }\n\n});","map":{"version":3,"sources":["server/startup/migrations/v237.ts"],"names":[],"mappings":"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","sourcesContent":["import { addMigration } from '../../lib/migrations';\nimport { settings } from '../../../app/settings/server';\nimport { isEnterprise } from '../../../ee/app/license/server';\nimport { Settings } from '../../../app/models/server/raw';\n\nfunction copySettingValue(newName: string, oldName: string): void {\n\tconst value = settings.get(oldName);\n\tif (value === undefined) {\n\t\treturn;\n\t}\n\n\tSettings.update({ _id: newName }, { $set: { value } }, { upsert: true });\n}\n\naddMigration({\n\tversion: 237,\n\tasync up() {\n\t\tconst isEE = isEnterprise();\n\n\t\t// Override AD defaults with the previously configured values\n\t\tcopySettingValue('LDAP_AD_User_Search_Field', 'LDAP_User_Search_Field');\n\t\tcopySettingValue('LDAP_AD_Username_Field', 'LDAP_Username_Field');\n\n\t\t// If we're sure the server is AD, then select it - otherwise keep it as generic ldap\n\t\tconst useAdDefaults = settings.get('LDAP_User_Search_Field') === 'sAMAccountName';\n\t\tSettings.update(\n\t\t\t{ _id: 'LDAP_Server_Type' },\n\t\t\t{ $set: { value: useAdDefaults ? 'ad' : '' } },\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\n\t\t// The setting to use the field map also determined if the user data was updated on login or not\n\t\tcopySettingValue('LDAP_Update_Data_On_Login', 'LDAP_Sync_User_Data');\n\n\t\tlet fieldMap;\n\t\ttry {\n\t\t\tfieldMap = JSON.parse(settings.get<string>('LDAP_Sync_User_Data_FieldMap') ?? '');\n\t\t} catch (_error) {\n\t\t\t// Ignore any parsing errors;\n\t\t}\n\n\t\tif (fieldMap) {\n\t\t\tconst newObject: Record<string, string> = {};\n\n\t\t\tfor (const key in fieldMap) {\n\t\t\t\tif (!fieldMap.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (fieldMap[key] === 'name') {\n\t\t\t\t\tSettings.update({ _id: 'LDAP_Name_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tSettings.update({ _id: 'LDAP_AD_Name_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (fieldMap[key] === 'email') {\n\t\t\t\t\tSettings.update({ _id: 'LDAP_Email_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tSettings.update({ _id: 'LDAP_AD_Email_Field' }, { $set: { value: key } }, { upsert: true });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnewObject[fieldMap[key]] = key;\n\t\t\t}\n\n\t\t\tif (isEE) {\n\t\t\t\tconst newJson = JSON.stringify(newObject);\n\t\t\t\tSettings.update({ _id: 'LDAP_CustomFieldMap' }, { $set: { value: newJson } }, { upsert: true });\n\n\t\t\t\tconst syncCustomFields = Object.keys(newObject).length > 0 && settings.get('LDAP_Sync_User_Data');\n\t\t\t\tSettings.update({ _id: 'LDAP_Sync_Custom_Fields' }, { $set: { value: syncCustomFields } }, { upsert: true });\n\t\t\t}\n\t\t}\n\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles', 'LDAP_Sync_User_Data_Groups');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_AutoRemove', 'LDAP_Sync_User_Data_Groups_AutoRemove');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Roles_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n\t\tcopySettingValue('LDAP_Sync_User_Data_RolesMap', 'LDAP_Sync_User_Data_GroupsMap');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels', 'LDAP_Sync_User_Data_Groups_AutoChannels');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Admin', 'LDAP_Sync_User_Data_Groups_AutoChannels_Admin');\n\t\tcopySettingValue('LDAP_Sync_User_Data_ChannelsMap', 'LDAP_Sync_User_Data_Groups_AutoChannelsMap');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels', 'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels');\n\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_Filter', 'LDAP_Sync_User_Data_Groups_Filter');\n\t\tcopySettingValue('LDAP_Sync_User_Data_Channels_BaseDN', 'LDAP_Sync_User_Data_Groups_BaseDN');\n\n\t\tawait Settings.deleteMany({\n\t\t\t_id: {\n\t\t\t\t$in: [\n\t\t\t\t\t'LDAP_Sync_Now',\n\t\t\t\t\t'LDAP_Test_Connection',\n\t\t\t\t\t'LDAP_Sync_CustomFields',\n\t\t\t\t\t'LDAP_Sync_User_Data',\n\t\t\t\t\t'LDAP_Sync_User_Data_FieldMap',\n\t\t\t\t\t'LDAP_Enable_LDAP_Roles_To_RC_Roles',\n\t\t\t\t\t'LDAP_Roles_To_Rocket_Chat_Roles',\n\t\t\t\t\t'LDAP_Validate_Roles_For_Each_Login',\n\t\t\t\t\t'LDAP_Default_Role_To_User',\n\t\t\t\t\t'LDAP_Query_To_Get_User_Groups',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoRemove',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_Filter',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_BaseDN',\n\t\t\t\t\t'LDAP_Sync_User_Data_GroupsMap',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannels',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannels_Admin',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_AutoChannelsMap',\n\t\t\t\t\t'LDAP_Sync_User_Data_Groups_Enforce_AutoChannels',\n\t\t\t\t\t'LDAP_Internal_Log_Level',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t},\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"f30cb054c095eca36b869729c7b3c9016fe689a4"}
