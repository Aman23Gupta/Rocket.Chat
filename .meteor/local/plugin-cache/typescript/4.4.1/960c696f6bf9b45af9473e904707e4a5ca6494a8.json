{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/Utils.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/Utils.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/Utils.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/Utils.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import zlib from 'zlib';\nimport { EventEmitter } from 'events';\n\nimport _ from 'underscore';\n\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLUser } from '../definition/ISAMLUser';\nimport { ISAMLGlobalSettings } from '../definition/ISAMLGlobalSettings';\nimport { IUserDataMap, IAttributeMapping } from '../definition/IAttributeMapping';\nimport { StatusCode } from './constants';\nimport { Logger } from '../../../../server/lib/logger/Logger';\n\nlet providerList: Array<IServiceProviderOptions> = [];\nlet debug = false;\nlet relayState: string | null = null;\nlet logger: Logger | undefined;\n\nconst globalSettings: ISAMLGlobalSettings = {\n\tgenerateUsername: false,\n\tnameOverwrite: false,\n\tmailOverwrite: false,\n\timmutableProperty: 'EMail',\n\tdefaultUserRole: 'user',\n\tuserDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n\tusernameNormalize: 'None',\n\tchannelsAttributeUpdate: false,\n\tincludePrivateChannelsInUpdate: false,\n};\n\nexport class SAMLUtils {\n\tpublic static events: EventEmitter;\n\n\tpublic static get isDebugging(): boolean {\n\t\treturn debug;\n\t}\n\n\tpublic static get globalSettings(): ISAMLGlobalSettings {\n\t\treturn globalSettings;\n\t}\n\n\tpublic static get serviceProviders(): Array<IServiceProviderOptions> {\n\t\treturn providerList;\n\t}\n\n\tpublic static get relayState(): string | null {\n\t\treturn relayState;\n\t}\n\n\tpublic static set relayState(value: string | null) {\n\t\trelayState = value;\n\t}\n\n\tpublic static getServiceProviderOptions(providerName: string): IServiceProviderOptions | undefined {\n\t\tthis.log(providerName, providerList);\n\n\t\treturn _.find(providerList, (providerOptions) => providerOptions.provider === providerName);\n\t}\n\n\tpublic static setServiceProvidersList(list: Array<IServiceProviderOptions>): void {\n\t\tproviderList = list;\n\t}\n\n\tpublic static setLoggerInstance(instance: Logger): void {\n\t\tlogger = instance;\n\t}\n\n\t// TODO: Some of those should probably not be global\n\tpublic static updateGlobalSettings(samlConfigs: Record<string, any>): void {\n\t\tdebug = Boolean(samlConfigs.debug);\n\n\t\tglobalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n\t\tglobalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n\t\tglobalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n\t\tglobalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n\t\tglobalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n\t\tif (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n\t\t\tglobalSettings.immutableProperty = samlConfigs.immutableProperty;\n\t\t}\n\n\t\tif (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n\t\t\tglobalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n\t\t}\n\n\t\tif (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n\t\t\tglobalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n\t\t}\n\n\t\tif (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n\t\t\tglobalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n\t\t}\n\t}\n\n\tpublic static generateUniqueID(): string {\n\t\tconst chars = 'abcdef0123456789';\n\t\tlet uniqueID = 'id-';\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tuniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n\t\t}\n\t\treturn uniqueID;\n\t}\n\n\tpublic static generateInstant(): string {\n\t\treturn new Date().toISOString();\n\t}\n\n\tpublic static certToPEM(cert: string): string {\n\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tif (!lines) {\n\t\t\tthrow new Error('Invalid Certificate');\n\t\t}\n\n\t\tlines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n\t\tlines.push('-----END CERTIFICATE-----');\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic static fillTemplateData(template: string, data: Record<string, string>): string {\n\t\tlet newTemplate = template;\n\n\t\tfor (const variable in data) {\n\t\t\tif (variable in data) {\n\t\t\t\tconst key = `__${variable}__`;\n\t\t\t\twhile (newTemplate.includes(key)) {\n\t\t\t\t\tnewTemplate = newTemplate.replace(key, data[variable]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTemplate;\n\t}\n\n\tpublic static log(obj: any, ...args: Array<any>): void {\n\t\tif (debug && logger) {\n\t\t\tlogger.debug(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static error(obj: any, ...args: Array<any>): void {\n\t\tif (logger) {\n\t\t\tlogger.error(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static inflateXml(\n\t\tbase64Data: string,\n\t\tsuccessCallback: (xml: string) => void,\n\t\terrorCallback: (err: string | object | null) => void,\n\t): void {\n\t\tconst buffer = Buffer.from(base64Data, 'base64');\n\t\tzlib.inflateRaw(buffer, (err, decoded) => {\n\t\t\tif (err) {\n\t\t\t\tthis.log(`Error while inflating. ${err}`);\n\t\t\t\treturn errorCallback(err);\n\t\t\t}\n\n\t\t\tif (!decoded) {\n\t\t\t\treturn errorCallback('Failed to extract request data');\n\t\t\t}\n\n\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\treturn successCallback(xmlString);\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {\n\t\tlet successStatus = false;\n\t\tlet status = null;\n\t\tlet messageText = '';\n\n\t\tconst statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n\t\tif (statusNodes.length) {\n\t\t\tconst statusNode = statusNodes[0];\n\t\t\tconst statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n\t\t\tif (statusMessage?.firstChild?.textContent) {\n\t\t\t\tmessageText = statusMessage.firstChild.textContent;\n\t\t\t}\n\n\t\t\tstatus = statusNode.getAttribute('Value');\n\n\t\t\tif (status === StatusCode.success) {\n\t\t\t\tsuccessStatus = true;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsuccess: successStatus,\n\t\t\tmessage: messageText,\n\t\t\tstatusCode: status || '',\n\t\t};\n\t}\n\n\tpublic static normalizeCert(cert: string): string {\n\t\tif (!cert) {\n\t\t\treturn cert;\n\t\t}\n\n\t\treturn cert\n\t\t\t.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/-+END CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t.trim();\n\t}\n\n\tpublic static getUserDataMapping(): IUserDataMap {\n\t\tconst { userDataFieldMap, immutableProperty } = globalSettings;\n\n\t\tlet map: Record<string, any>;\n\n\t\ttry {\n\t\t\tmap = JSON.parse(userDataFieldMap);\n\t\t} catch (e) {\n\t\t\tSAMLUtils.log(userDataFieldMap);\n\t\t\tSAMLUtils.log(e);\n\t\t\tthrow new Error('Failed to parse custom user field map');\n\t\t}\n\n\t\tconst parsedMap: IUserDataMap = {\n\t\t\tattributeList: new Set(),\n\t\t\temail: {\n\t\t\t\tfieldName: 'email',\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\tfieldName: 'username',\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tfieldName: 'cn',\n\t\t\t},\n\t\t\tidentifier: {\n\t\t\t\ttype: '',\n\t\t\t},\n\t\t};\n\n\t\tlet identifier = immutableProperty.toLowerCase();\n\n\t\tfor (const spFieldName in map) {\n\t\t\tif (!map.hasOwnProperty(spFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst attribute = map[spFieldName];\n\t\t\tif (typeof attribute !== 'string' && typeof attribute !== 'object') {\n\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t}\n\n\t\t\tif (spFieldName === '__identifier__') {\n\t\t\t\tif (typeof attribute !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid identifier.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = attribute;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet attributeMap: IAttributeMapping | null = null;\n\n\t\t\t// If it's a complex type, let's check what's in it\n\t\t\tif (typeof attribute === 'object') {\n\t\t\t\t// A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n\t\t\t\tif (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\n\t\t\t\tif (Array.isArray(fieldName)) {\n\t\t\t\t\tif (!fieldName.length) {\n\t\t\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const idpFieldName of fieldName) {\n\t\t\t\t\t\tparsedMap.attributeList.add(idpFieldName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparsedMap.attributeList.add(fieldName);\n\t\t\t\t}\n\n\t\t\t\tif (regex && typeof regex !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid RegEx');\n\t\t\t\t}\n\n\t\t\t\tif (template && typeof template !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid Template');\n\t\t\t\t}\n\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t...(regex && { regex }),\n\t\t\t\t\t...(template && { template }),\n\t\t\t\t};\n\t\t\t} else if (typeof attribute === 'string') {\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName: attribute,\n\t\t\t\t};\n\t\t\t\tparsedMap.attributeList.add(attribute);\n\t\t\t}\n\n\t\t\tif (attributeMap) {\n\t\t\t\tif (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n\t\t\t\t\tparsedMap[spFieldName] = attributeMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (identifier) {\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {\n\t\t\t\tparsedMap.identifier.type = 'custom';\n\t\t\t\tparsedMap.identifier.attribute = identifier;\n\t\t\t\tparsedMap.attributeList.add(identifier);\n\t\t\t}\n\t\t}\n\t\treturn parsedMap;\n\t}\n\n\tpublic static getProfileValue(profile: Record<string, any>, mapping: IAttributeMapping, forceString = false): any {\n\t\tconst values: Record<string, string> = {\n\t\t\tregex: '',\n\t\t};\n\t\tconst fieldNames = this.ensureArray<string>(mapping.fieldName);\n\n\t\tlet mainValue;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet profileValue = profile[fieldName];\n\n\t\t\tif (Array.isArray(profileValue)) {\n\t\t\t\tfor (let i = 0; i < profile[fieldName].length; i++) {\n\t\t\t\t\t// Add every index to the list of possible values to be used, both first to last and from last to first\n\t\t\t\t\tvalues[`${fieldName}[${i}]`] = profileValue[i];\n\t\t\t\t\tvalues[`${fieldName}[-${Math.abs(0 - profileValue.length + i)}]`] = profileValue[i];\n\t\t\t\t}\n\t\t\t\tvalues[`${fieldName}[]`] = profileValue.join(' ');\n\t\t\t\tif (forceString) {\n\t\t\t\t\tprofileValue = profileValue.join(' ');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[fieldName] = profileValue;\n\t\t\t}\n\n\t\t\tvalues[fieldName] = profileValue;\n\n\t\t\tif (!mainValue) {\n\t\t\t\tmainValue = profileValue;\n\t\t\t}\n\t\t}\n\n\t\tlet shouldRunTemplate = false;\n\t\tif (typeof mapping.template === 'string') {\n\t\t\t// unless the regex result is used on the template, we process the template first\n\t\t\tif (mapping.template.includes('__regex__')) {\n\t\t\t\tshouldRunTemplate = true;\n\t\t\t} else {\n\t\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t\t}\n\t\t}\n\n\t\tif (mapping.regex && mainValue && mainValue.match) {\n\t\t\tlet regexValue;\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {\n\t\t\t\t\tregexValue = match[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regexValue) {\n\t\t\t\tvalues.regex = regexValue;\n\t\t\t\tif (!shouldRunTemplate) {\n\t\t\t\t\tmainValue = regexValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRunTemplate && typeof mapping.template === 'string') {\n\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t}\n\n\t\treturn mainValue;\n\t}\n\n\tpublic static convertArrayBufferToString(buffer: ArrayBuffer, encoding: BufferEncoding = 'utf8'): string {\n\t\treturn Buffer.from(buffer).toString(encoding);\n\t}\n\n\tpublic static normalizeUsername(name: string): string {\n\t\tconst { globalSettings } = this;\n\n\t\tswitch (globalSettings.usernameNormalize) {\n\t\t\tcase 'Lowercase':\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic static ensureArray<T>(param: T | Array<T>): Array<T> {\n\t\tconst emptyArray: Array<T> = [];\n\t\treturn emptyArray.concat(param);\n\t}\n\n\tpublic static mapProfileToUserObject(profile: Record<string, any>): ISAMLUser {\n\t\tconst userDataMap = this.getUserDataMapping();\n\t\tSAMLUtils.log('parsed userDataMap', userDataMap);\n\n\t\tif (userDataMap.identifier.type === 'custom') {\n\t\t\tif (!userDataMap.identifier.attribute) {\n\t\t\t\tthrow new Error('SAML User Data Map: invalid Identifier configuration received.');\n\t\t\t}\n\t\t\tif (!profile[userDataMap.identifier.attribute]) {\n\t\t\t\tthrow new Error(`SAML Profile did not have the expected identifier (${userDataMap.identifier.attribute}).`);\n\t\t\t}\n\t\t}\n\n\t\tconst attributeList = new Map();\n\t\tfor (const attributeName of userDataMap.attributeList) {\n\t\t\tif (profile[attributeName] === undefined) {\n\t\t\t\tthis.log(`SAML user profile is missing the attribute ${attributeName}.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributeList.set(attributeName, profile[attributeName]);\n\t\t}\n\t\tconst email = this.getProfileValue(profile, userDataMap.email);\n\t\tconst profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n\t\tconst name = this.getProfileValue(profile, userDataMap.name);\n\n\t\t// Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\t\tif (!email) {\n\t\t\tthrow new Error('SAML Profile did not contain an email address');\n\t\t}\n\n\t\tconst userObject: ISAMLUser = {\n\t\t\tsamlLogin: {\n\t\t\t\tprovider: this.relayState,\n\t\t\t\tidp: profile.issuer,\n\t\t\t\tidpSession: profile.sessionIndex,\n\t\t\t\tnameID: profile.nameID,\n\t\t\t},\n\t\t\temailList: this.ensureArray<string>(email),\n\t\t\tfullName: name || profile.displayName || profile.username,\n\t\t\teppn: profile.eppn,\n\t\t\tattributeList,\n\t\t\tidentifier: userDataMap.identifier,\n\t\t};\n\n\t\tif (profileUsername) {\n\t\t\tuserObject.username = this.normalizeUsername(profileUsername);\n\t\t}\n\n\t\tif (profile.language) {\n\t\t\tuserObject.language = profile.language;\n\t\t}\n\n\t\tif (profile.channels) {\n\t\t\tif (Array.isArray(profile.channels)) {\n\t\t\t\tuserObject.channels = profile.channels;\n\t\t\t} else {\n\t\t\t\tuserObject.channels = profile.channels.split(',');\n\t\t\t}\n\t\t}\n\n\t\tthis.events.emit('mapUser', { profile, userObject });\n\n\t\treturn userObject;\n\t}\n}\n\nSAMLUtils.events = new EventEmitter();\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/Utils.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/Utils.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  SAMLUtils: () => SAMLUtils\n});\nlet zlib;\nmodule.link(\"zlib\", {\n  default(v) {\n    zlib = v;\n  }\n\n}, 0);\nlet EventEmitter;\nmodule.link(\"events\", {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet StatusCode;\nmodule.link(\"./constants\", {\n  StatusCode(v) {\n    StatusCode = v;\n  }\n\n}, 3);\nlet providerList = [];\nlet debug = false;\nlet relayState = null;\nlet logger;\nconst globalSettings = {\n  generateUsername: false,\n  nameOverwrite: false,\n  mailOverwrite: false,\n  immutableProperty: 'EMail',\n  defaultUserRole: 'user',\n  userDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n  usernameNormalize: 'None',\n  channelsAttributeUpdate: false,\n  includePrivateChannelsInUpdate: false\n};\n\nclass SAMLUtils {\n  static get isDebugging() {\n    return debug;\n  }\n\n  static get globalSettings() {\n    return globalSettings;\n  }\n\n  static get serviceProviders() {\n    return providerList;\n  }\n\n  static get relayState() {\n    return relayState;\n  }\n\n  static set relayState(value) {\n    relayState = value;\n  }\n\n  static getServiceProviderOptions(providerName) {\n    this.log(providerName, providerList);\n    return _.find(providerList, providerOptions => providerOptions.provider === providerName);\n  }\n\n  static setServiceProvidersList(list) {\n    providerList = list;\n  }\n\n  static setLoggerInstance(instance) {\n    logger = instance;\n  } // TODO: Some of those should probably not be global\n\n\n  static updateGlobalSettings(samlConfigs) {\n    debug = Boolean(samlConfigs.debug);\n    globalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n    globalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n    globalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n    globalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n    globalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n    if (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n      globalSettings.immutableProperty = samlConfigs.immutableProperty;\n    }\n\n    if (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n      globalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n    }\n\n    if (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n      globalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n    }\n\n    if (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n      globalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n    }\n  }\n\n  static generateUniqueID() {\n    const chars = 'abcdef0123456789';\n    let uniqueID = 'id-';\n\n    for (let i = 0; i < 20; i++) {\n      uniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n    }\n\n    return uniqueID;\n  }\n\n  static generateInstant() {\n    return new Date().toISOString();\n  }\n\n  static certToPEM(cert) {\n    const lines = cert.match(/.{1,64}/g);\n\n    if (!lines) {\n      throw new Error('Invalid Certificate');\n    }\n\n    lines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n    lines.push('-----END CERTIFICATE-----');\n    return lines.join('\\n');\n  }\n\n  static fillTemplateData(template, data) {\n    let newTemplate = template;\n\n    for (const variable in data) {\n      if (variable in data) {\n        const key = \"__\".concat(variable, \"__\");\n\n        while (newTemplate.includes(key)) {\n          newTemplate = newTemplate.replace(key, data[variable]);\n        }\n      }\n    }\n\n    return newTemplate;\n  }\n\n  static log(obj) {\n    if (debug && logger) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      logger.debug(obj, ...args);\n    }\n  }\n\n  static error(obj) {\n    if (logger) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      logger.error(obj, ...args);\n    }\n  }\n\n  static inflateXml(base64Data, successCallback, errorCallback) {\n    const buffer = Buffer.from(base64Data, 'base64');\n    zlib.inflateRaw(buffer, (err, decoded) => {\n      if (err) {\n        this.log(\"Error while inflating. \".concat(err));\n        return errorCallback(err);\n      }\n\n      if (!decoded) {\n        return errorCallback('Failed to extract request data');\n      }\n\n      const xmlString = this.convertArrayBufferToString(decoded);\n      return successCallback(xmlString);\n    });\n  }\n\n  static validateStatus(doc) {\n    let successStatus = false;\n    let status = null;\n    let messageText = '';\n    const statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n    if (statusNodes.length) {\n      var _statusMessage$firstC;\n\n      const statusNode = statusNodes[0];\n      const statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n      if (statusMessage !== null && statusMessage !== void 0 && (_statusMessage$firstC = statusMessage.firstChild) !== null && _statusMessage$firstC !== void 0 && _statusMessage$firstC.textContent) {\n        messageText = statusMessage.firstChild.textContent;\n      }\n\n      status = statusNode.getAttribute('Value');\n\n      if (status === StatusCode.success) {\n        successStatus = true;\n      }\n    }\n\n    return {\n      success: successStatus,\n      message: messageText,\n      statusCode: status || ''\n    };\n  }\n\n  static normalizeCert(cert) {\n    if (!cert) {\n      return cert;\n    }\n\n    return cert.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '').replace(/-+END CERTIFICATE-+\\r?\\n?/, '').replace(/\\r\\n/g, '\\n').trim();\n  }\n\n  static getUserDataMapping() {\n    const {\n      userDataFieldMap,\n      immutableProperty\n    } = globalSettings;\n    let map;\n\n    try {\n      map = JSON.parse(userDataFieldMap);\n    } catch (e) {\n      SAMLUtils.log(userDataFieldMap);\n      SAMLUtils.log(e);\n      throw new Error('Failed to parse custom user field map');\n    }\n\n    const parsedMap = {\n      attributeList: new Set(),\n      email: {\n        fieldName: 'email'\n      },\n      username: {\n        fieldName: 'username'\n      },\n      name: {\n        fieldName: 'cn'\n      },\n      identifier: {\n        type: ''\n      }\n    };\n    let identifier = immutableProperty.toLowerCase();\n\n    for (const spFieldName in map) {\n      if (!map.hasOwnProperty(spFieldName)) {\n        continue;\n      }\n\n      const attribute = map[spFieldName];\n\n      if (typeof attribute !== 'string' && typeof attribute !== 'object') {\n        throw new Error(\"SAML User Map: Invalid configuration for \".concat(spFieldName, \" field.\"));\n      }\n\n      if (spFieldName === '__identifier__') {\n        if (typeof attribute !== 'string') {\n          throw new Error('SAML User Map: Invalid identifier.');\n        }\n\n        identifier = attribute;\n        continue;\n      }\n\n      let attributeMap = null; // If it's a complex type, let's check what's in it\n\n      if (typeof attribute === 'object') {\n        // A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n        if (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n          continue;\n        }\n\n        const fieldName = attribute.fieldName || attribute.fieldNames;\n        const {\n          regex,\n          template\n        } = attribute;\n\n        if (Array.isArray(fieldName)) {\n          if (!fieldName.length) {\n            throw new Error(\"SAML User Map: Invalid configuration for \".concat(spFieldName, \" field.\"));\n          }\n\n          for (const idpFieldName of fieldName) {\n            parsedMap.attributeList.add(idpFieldName);\n          }\n        } else {\n          parsedMap.attributeList.add(fieldName);\n        }\n\n        if (regex && typeof regex !== 'string') {\n          throw new Error('SAML User Map: Invalid RegEx');\n        }\n\n        if (template && typeof template !== 'string') {\n          throw new Error('SAML User Map: Invalid Template');\n        }\n\n        attributeMap = _objectSpread(_objectSpread({\n          fieldName\n        }, regex && {\n          regex\n        }), template && {\n          template\n        });\n      } else if (typeof attribute === 'string') {\n        attributeMap = {\n          fieldName: attribute\n        };\n        parsedMap.attributeList.add(attribute);\n      }\n\n      if (attributeMap) {\n        if (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n          parsedMap[spFieldName] = attributeMap;\n        }\n      }\n    }\n\n    if (identifier) {\n      const defaultTypes = ['email', 'username'];\n\n      if (defaultTypes.includes(identifier)) {\n        parsedMap.identifier.type = identifier;\n      } else {\n        parsedMap.identifier.type = 'custom';\n        parsedMap.identifier.attribute = identifier;\n        parsedMap.attributeList.add(identifier);\n      }\n    }\n\n    return parsedMap;\n  }\n\n  static getProfileValue(profile, mapping) {\n    let forceString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const values = {\n      regex: ''\n    };\n    const fieldNames = this.ensureArray(mapping.fieldName);\n    let mainValue;\n\n    for (const fieldName of fieldNames) {\n      let profileValue = profile[fieldName];\n\n      if (Array.isArray(profileValue)) {\n        for (let i = 0; i < profile[fieldName].length; i++) {\n          // Add every index to the list of possible values to be used, both first to last and from last to first\n          values[\"\".concat(fieldName, \"[\").concat(i, \"]\")] = profileValue[i];\n          values[\"\".concat(fieldName, \"[-\").concat(Math.abs(0 - profileValue.length + i), \"]\")] = profileValue[i];\n        }\n\n        values[\"\".concat(fieldName, \"[]\")] = profileValue.join(' ');\n\n        if (forceString) {\n          profileValue = profileValue.join(' ');\n        }\n      } else {\n        values[fieldName] = profileValue;\n      }\n\n      values[fieldName] = profileValue;\n\n      if (!mainValue) {\n        mainValue = profileValue;\n      }\n    }\n\n    let shouldRunTemplate = false;\n\n    if (typeof mapping.template === 'string') {\n      // unless the regex result is used on the template, we process the template first\n      if (mapping.template.includes('__regex__')) {\n        shouldRunTemplate = true;\n      } else {\n        mainValue = this.fillTemplateData(mapping.template, values);\n      }\n    }\n\n    if (mapping.regex && mainValue && mainValue.match) {\n      let regexValue;\n      const match = mainValue.match(new RegExp(mapping.regex));\n\n      if (match !== null && match !== void 0 && match.length) {\n        if (match.length >= 2) {\n          regexValue = match[1];\n        } else {\n          regexValue = match[0];\n        }\n      }\n\n      if (regexValue) {\n        values.regex = regexValue;\n\n        if (!shouldRunTemplate) {\n          mainValue = regexValue;\n        }\n      }\n    }\n\n    if (shouldRunTemplate && typeof mapping.template === 'string') {\n      mainValue = this.fillTemplateData(mapping.template, values);\n    }\n\n    return mainValue;\n  }\n\n  static convertArrayBufferToString(buffer) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n    return Buffer.from(buffer).toString(encoding);\n  }\n\n  static normalizeUsername(name) {\n    const {\n      globalSettings\n    } = this;\n\n    switch (globalSettings.usernameNormalize) {\n      case 'Lowercase':\n        name = name.toLowerCase();\n        break;\n    }\n\n    return name;\n  }\n\n  static ensureArray(param) {\n    const emptyArray = [];\n    return emptyArray.concat(param);\n  }\n\n  static mapProfileToUserObject(profile) {\n    const userDataMap = this.getUserDataMapping();\n    SAMLUtils.log('parsed userDataMap', userDataMap);\n\n    if (userDataMap.identifier.type === 'custom') {\n      if (!userDataMap.identifier.attribute) {\n        throw new Error('SAML User Data Map: invalid Identifier configuration received.');\n      }\n\n      if (!profile[userDataMap.identifier.attribute]) {\n        throw new Error(\"SAML Profile did not have the expected identifier (\".concat(userDataMap.identifier.attribute, \").\"));\n      }\n    }\n\n    const attributeList = new Map();\n\n    for (const attributeName of userDataMap.attributeList) {\n      if (profile[attributeName] === undefined) {\n        this.log(\"SAML user profile is missing the attribute \".concat(attributeName, \".\"));\n        continue;\n      }\n\n      attributeList.set(attributeName, profile[attributeName]);\n    }\n\n    const email = this.getProfileValue(profile, userDataMap.email);\n    const profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n    const name = this.getProfileValue(profile, userDataMap.name); // Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\n    if (!email) {\n      throw new Error('SAML Profile did not contain an email address');\n    }\n\n    const userObject = {\n      samlLogin: {\n        provider: this.relayState,\n        idp: profile.issuer,\n        idpSession: profile.sessionIndex,\n        nameID: profile.nameID\n      },\n      emailList: this.ensureArray(email),\n      fullName: name || profile.displayName || profile.username,\n      eppn: profile.eppn,\n      attributeList,\n      identifier: userDataMap.identifier\n    };\n\n    if (profileUsername) {\n      userObject.username = this.normalizeUsername(profileUsername);\n    }\n\n    if (profile.language) {\n      userObject.language = profile.language;\n    }\n\n    if (profile.channels) {\n      if (Array.isArray(profile.channels)) {\n        userObject.channels = profile.channels;\n      } else {\n        userObject.channels = profile.channels.split(',');\n      }\n    }\n\n    this.events.emit('mapUser', {\n      profile,\n      userObject\n    });\n    return userObject;\n  }\n\n}\n\nSAMLUtils.events = void 0;\nSAMLUtils.events = new EventEmitter();","map":{"version":3,"sources":["app/meteor-accounts-saml/server/lib/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import zlib from 'zlib';\nimport { EventEmitter } from 'events';\n\nimport _ from 'underscore';\n\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLUser } from '../definition/ISAMLUser';\nimport { ISAMLGlobalSettings } from '../definition/ISAMLGlobalSettings';\nimport { IUserDataMap, IAttributeMapping } from '../definition/IAttributeMapping';\nimport { StatusCode } from './constants';\nimport { Logger } from '../../../../server/lib/logger/Logger';\n\nlet providerList: Array<IServiceProviderOptions> = [];\nlet debug = false;\nlet relayState: string | null = null;\nlet logger: Logger | undefined;\n\nconst globalSettings: ISAMLGlobalSettings = {\n\tgenerateUsername: false,\n\tnameOverwrite: false,\n\tmailOverwrite: false,\n\timmutableProperty: 'EMail',\n\tdefaultUserRole: 'user',\n\tuserDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n\tusernameNormalize: 'None',\n\tchannelsAttributeUpdate: false,\n\tincludePrivateChannelsInUpdate: false,\n};\n\nexport class SAMLUtils {\n\tpublic static events: EventEmitter;\n\n\tpublic static get isDebugging(): boolean {\n\t\treturn debug;\n\t}\n\n\tpublic static get globalSettings(): ISAMLGlobalSettings {\n\t\treturn globalSettings;\n\t}\n\n\tpublic static get serviceProviders(): Array<IServiceProviderOptions> {\n\t\treturn providerList;\n\t}\n\n\tpublic static get relayState(): string | null {\n\t\treturn relayState;\n\t}\n\n\tpublic static set relayState(value: string | null) {\n\t\trelayState = value;\n\t}\n\n\tpublic static getServiceProviderOptions(providerName: string): IServiceProviderOptions | undefined {\n\t\tthis.log(providerName, providerList);\n\n\t\treturn _.find(providerList, (providerOptions) => providerOptions.provider === providerName);\n\t}\n\n\tpublic static setServiceProvidersList(list: Array<IServiceProviderOptions>): void {\n\t\tproviderList = list;\n\t}\n\n\tpublic static setLoggerInstance(instance: Logger): void {\n\t\tlogger = instance;\n\t}\n\n\t// TODO: Some of those should probably not be global\n\tpublic static updateGlobalSettings(samlConfigs: Record<string, any>): void {\n\t\tdebug = Boolean(samlConfigs.debug);\n\n\t\tglobalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n\t\tglobalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n\t\tglobalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n\t\tglobalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n\t\tglobalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n\t\tif (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n\t\t\tglobalSettings.immutableProperty = samlConfigs.immutableProperty;\n\t\t}\n\n\t\tif (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n\t\t\tglobalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n\t\t}\n\n\t\tif (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n\t\t\tglobalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n\t\t}\n\n\t\tif (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n\t\t\tglobalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n\t\t}\n\t}\n\n\tpublic static generateUniqueID(): string {\n\t\tconst chars = 'abcdef0123456789';\n\t\tlet uniqueID = 'id-';\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tuniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n\t\t}\n\t\treturn uniqueID;\n\t}\n\n\tpublic static generateInstant(): string {\n\t\treturn new Date().toISOString();\n\t}\n\n\tpublic static certToPEM(cert: string): string {\n\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tif (!lines) {\n\t\t\tthrow new Error('Invalid Certificate');\n\t\t}\n\n\t\tlines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n\t\tlines.push('-----END CERTIFICATE-----');\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic static fillTemplateData(template: string, data: Record<string, string>): string {\n\t\tlet newTemplate = template;\n\n\t\tfor (const variable in data) {\n\t\t\tif (variable in data) {\n\t\t\t\tconst key = `__${variable}__`;\n\t\t\t\twhile (newTemplate.includes(key)) {\n\t\t\t\t\tnewTemplate = newTemplate.replace(key, data[variable]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTemplate;\n\t}\n\n\tpublic static log(obj: any, ...args: Array<any>): void {\n\t\tif (debug && logger) {\n\t\t\tlogger.debug(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static error(obj: any, ...args: Array<any>): void {\n\t\tif (logger) {\n\t\t\tlogger.error(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static inflateXml(\n\t\tbase64Data: string,\n\t\tsuccessCallback: (xml: string) => void,\n\t\terrorCallback: (err: string | object | null) => void,\n\t): void {\n\t\tconst buffer = Buffer.from(base64Data, 'base64');\n\t\tzlib.inflateRaw(buffer, (err, decoded) => {\n\t\t\tif (err) {\n\t\t\t\tthis.log(`Error while inflating. ${err}`);\n\t\t\t\treturn errorCallback(err);\n\t\t\t}\n\n\t\t\tif (!decoded) {\n\t\t\t\treturn errorCallback('Failed to extract request data');\n\t\t\t}\n\n\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\treturn successCallback(xmlString);\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {\n\t\tlet successStatus = false;\n\t\tlet status = null;\n\t\tlet messageText = '';\n\n\t\tconst statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n\t\tif (statusNodes.length) {\n\t\t\tconst statusNode = statusNodes[0];\n\t\t\tconst statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n\t\t\tif (statusMessage?.firstChild?.textContent) {\n\t\t\t\tmessageText = statusMessage.firstChild.textContent;\n\t\t\t}\n\n\t\t\tstatus = statusNode.getAttribute('Value');\n\n\t\t\tif (status === StatusCode.success) {\n\t\t\t\tsuccessStatus = true;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsuccess: successStatus,\n\t\t\tmessage: messageText,\n\t\t\tstatusCode: status || '',\n\t\t};\n\t}\n\n\tpublic static normalizeCert(cert: string): string {\n\t\tif (!cert) {\n\t\t\treturn cert;\n\t\t}\n\n\t\treturn cert\n\t\t\t.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/-+END CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t.trim();\n\t}\n\n\tpublic static getUserDataMapping(): IUserDataMap {\n\t\tconst { userDataFieldMap, immutableProperty } = globalSettings;\n\n\t\tlet map: Record<string, any>;\n\n\t\ttry {\n\t\t\tmap = JSON.parse(userDataFieldMap);\n\t\t} catch (e) {\n\t\t\tSAMLUtils.log(userDataFieldMap);\n\t\t\tSAMLUtils.log(e);\n\t\t\tthrow new Error('Failed to parse custom user field map');\n\t\t}\n\n\t\tconst parsedMap: IUserDataMap = {\n\t\t\tattributeList: new Set(),\n\t\t\temail: {\n\t\t\t\tfieldName: 'email',\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\tfieldName: 'username',\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tfieldName: 'cn',\n\t\t\t},\n\t\t\tidentifier: {\n\t\t\t\ttype: '',\n\t\t\t},\n\t\t};\n\n\t\tlet identifier = immutableProperty.toLowerCase();\n\n\t\tfor (const spFieldName in map) {\n\t\t\tif (!map.hasOwnProperty(spFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst attribute = map[spFieldName];\n\t\t\tif (typeof attribute !== 'string' && typeof attribute !== 'object') {\n\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t}\n\n\t\t\tif (spFieldName === '__identifier__') {\n\t\t\t\tif (typeof attribute !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid identifier.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = attribute;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet attributeMap: IAttributeMapping | null = null;\n\n\t\t\t// If it's a complex type, let's check what's in it\n\t\t\tif (typeof attribute === 'object') {\n\t\t\t\t// A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n\t\t\t\tif (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\n\t\t\t\tif (Array.isArray(fieldName)) {\n\t\t\t\t\tif (!fieldName.length) {\n\t\t\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const idpFieldName of fieldName) {\n\t\t\t\t\t\tparsedMap.attributeList.add(idpFieldName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparsedMap.attributeList.add(fieldName);\n\t\t\t\t}\n\n\t\t\t\tif (regex && typeof regex !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid RegEx');\n\t\t\t\t}\n\n\t\t\t\tif (template && typeof template !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid Template');\n\t\t\t\t}\n\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t...(regex && { regex }),\n\t\t\t\t\t...(template && { template }),\n\t\t\t\t};\n\t\t\t} else if (typeof attribute === 'string') {\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName: attribute,\n\t\t\t\t};\n\t\t\t\tparsedMap.attributeList.add(attribute);\n\t\t\t}\n\n\t\t\tif (attributeMap) {\n\t\t\t\tif (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n\t\t\t\t\tparsedMap[spFieldName] = attributeMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (identifier) {\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {\n\t\t\t\tparsedMap.identifier.type = 'custom';\n\t\t\t\tparsedMap.identifier.attribute = identifier;\n\t\t\t\tparsedMap.attributeList.add(identifier);\n\t\t\t}\n\t\t}\n\t\treturn parsedMap;\n\t}\n\n\tpublic static getProfileValue(profile: Record<string, any>, mapping: IAttributeMapping, forceString = false): any {\n\t\tconst values: Record<string, string> = {\n\t\t\tregex: '',\n\t\t};\n\t\tconst fieldNames = this.ensureArray<string>(mapping.fieldName);\n\n\t\tlet mainValue;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet profileValue = profile[fieldName];\n\n\t\t\tif (Array.isArray(profileValue)) {\n\t\t\t\tfor (let i = 0; i < profile[fieldName].length; i++) {\n\t\t\t\t\t// Add every index to the list of possible values to be used, both first to last and from last to first\n\t\t\t\t\tvalues[`${fieldName}[${i}]`] = profileValue[i];\n\t\t\t\t\tvalues[`${fieldName}[-${Math.abs(0 - profileValue.length + i)}]`] = profileValue[i];\n\t\t\t\t}\n\t\t\t\tvalues[`${fieldName}[]`] = profileValue.join(' ');\n\t\t\t\tif (forceString) {\n\t\t\t\t\tprofileValue = profileValue.join(' ');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[fieldName] = profileValue;\n\t\t\t}\n\n\t\t\tvalues[fieldName] = profileValue;\n\n\t\t\tif (!mainValue) {\n\t\t\t\tmainValue = profileValue;\n\t\t\t}\n\t\t}\n\n\t\tlet shouldRunTemplate = false;\n\t\tif (typeof mapping.template === 'string') {\n\t\t\t// unless the regex result is used on the template, we process the template first\n\t\t\tif (mapping.template.includes('__regex__')) {\n\t\t\t\tshouldRunTemplate = true;\n\t\t\t} else {\n\t\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t\t}\n\t\t}\n\n\t\tif (mapping.regex && mainValue && mainValue.match) {\n\t\t\tlet regexValue;\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {\n\t\t\t\t\tregexValue = match[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regexValue) {\n\t\t\t\tvalues.regex = regexValue;\n\t\t\t\tif (!shouldRunTemplate) {\n\t\t\t\t\tmainValue = regexValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRunTemplate && typeof mapping.template === 'string') {\n\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t}\n\n\t\treturn mainValue;\n\t}\n\n\tpublic static convertArrayBufferToString(buffer: ArrayBuffer, encoding: BufferEncoding = 'utf8'): string {\n\t\treturn Buffer.from(buffer).toString(encoding);\n\t}\n\n\tpublic static normalizeUsername(name: string): string {\n\t\tconst { globalSettings } = this;\n\n\t\tswitch (globalSettings.usernameNormalize) {\n\t\t\tcase 'Lowercase':\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic static ensureArray<T>(param: T | Array<T>): Array<T> {\n\t\tconst emptyArray: Array<T> = [];\n\t\treturn emptyArray.concat(param);\n\t}\n\n\tpublic static mapProfileToUserObject(profile: Record<string, any>): ISAMLUser {\n\t\tconst userDataMap = this.getUserDataMapping();\n\t\tSAMLUtils.log('parsed userDataMap', userDataMap);\n\n\t\tif (userDataMap.identifier.type === 'custom') {\n\t\t\tif (!userDataMap.identifier.attribute) {\n\t\t\t\tthrow new Error('SAML User Data Map: invalid Identifier configuration received.');\n\t\t\t}\n\t\t\tif (!profile[userDataMap.identifier.attribute]) {\n\t\t\t\tthrow new Error(`SAML Profile did not have the expected identifier (${userDataMap.identifier.attribute}).`);\n\t\t\t}\n\t\t}\n\n\t\tconst attributeList = new Map();\n\t\tfor (const attributeName of userDataMap.attributeList) {\n\t\t\tif (profile[attributeName] === undefined) {\n\t\t\t\tthis.log(`SAML user profile is missing the attribute ${attributeName}.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributeList.set(attributeName, profile[attributeName]);\n\t\t}\n\t\tconst email = this.getProfileValue(profile, userDataMap.email);\n\t\tconst profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n\t\tconst name = this.getProfileValue(profile, userDataMap.name);\n\n\t\t// Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\t\tif (!email) {\n\t\t\tthrow new Error('SAML Profile did not contain an email address');\n\t\t}\n\n\t\tconst userObject: ISAMLUser = {\n\t\t\tsamlLogin: {\n\t\t\t\tprovider: this.relayState,\n\t\t\t\tidp: profile.issuer,\n\t\t\t\tidpSession: profile.sessionIndex,\n\t\t\t\tnameID: profile.nameID,\n\t\t\t},\n\t\t\temailList: this.ensureArray<string>(email),\n\t\t\tfullName: name || profile.displayName || profile.username,\n\t\t\teppn: profile.eppn,\n\t\t\tattributeList,\n\t\t\tidentifier: userDataMap.identifier,\n\t\t};\n\n\t\tif (profileUsername) {\n\t\t\tuserObject.username = this.normalizeUsername(profileUsername);\n\t\t}\n\n\t\tif (profile.language) {\n\t\t\tuserObject.language = profile.language;\n\t\t}\n\n\t\tif (profile.channels) {\n\t\t\tif (Array.isArray(profile.channels)) {\n\t\t\t\tuserObject.channels = profile.channels;\n\t\t\t} else {\n\t\t\t\tuserObject.channels = profile.channels.split(',');\n\t\t\t}\n\t\t}\n\n\t\tthis.events.emit('mapUser', { profile, userObject });\n\n\t\treturn userObject;\n\t}\n}\n\nSAMLUtils.events = new EventEmitter();\n"],"sourceRoot":""},"sourceType":"module","hash":"960c696f6bf9b45af9473e904707e4a5ca6494a8"}
