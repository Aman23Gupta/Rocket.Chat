{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/Helper.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/business-hour/Helper.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/Helper.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/Helper.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/Helper.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAyB,yBAAyB,EAAE,MAAM,8CAA8C,CAAC;AAChH,OAAO,EAAE,qBAAqB,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAC1E,OAAO,EAAE,4BAA4B,EAAE,MAAM,qDAAqD,CAAC;AAEnG,MAAM,CAAC,MAAM,mCAAmC,GAAG,KAAK,EACvD,aAAsC,EACmB,EAAE;IAC3D,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,YAAY,CAAC,CAAC;IAExE,OAAO,aAAa;SAClB,MAAM,CACN,CAAC,YAAY,EAAE,EAAE,CAChB,YAAY,CAAC,MAAM;QACnB,YAAY,CAAC,SAAS;aACpB,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;aAC3B,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACd,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;YACpG,MAAM,eAAe,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;YACvG,OAAO,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QACjG,CAAC,CAAC,CACJ;SACA,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACvB,GAAG,EAAE,YAAY,CAAC,GAAG;QACrB,IAAI,EAAE,YAAY,CAAC,IAAI;KACvB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,IAAmB,EAAE;IAChE,MAAM,KAAK,CAAC,+BAA+B,EAAE,CAAC;IAC9C,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,YAAY,CAAC,CAAC;IACxE,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,mBAAmB,GAAG,MAAM,qBAAqB,CAAC,0CAA0C,CAAC,GAAG,EAAE;QACvG,MAAM,EAAE;YACP,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,CAAC;YACX,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;SACT;KACD,CAAC,CAAC;IACH,MAAM,sBAAsB,GAAG,CAAC,MAAM,mCAAmC,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACxI,MAAM,KAAK,CAAC,uCAAuC,CAAC,sBAAsB,CAAC,CAAC;IAC5E,MAAM,KAAK,CAAC,wCAAwC,EAAE,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oCAAoC,GAAG,KAAK,IAAmB,EAAE;IAC7E,IAAI,CAAC,MAAM,qBAAqB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,yBAAyB,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,EAAE;QAClG,MAAM,qBAAqB,CAAC,SAAS,CAAC,4BAA4B,EAAE,CAAC,CAAC;KACtE;AACF,CAAC,CAAC","sourcesContent":["import moment from 'moment';\n\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../definition/ILivechatBusinessHour';\nimport { LivechatBusinessHours, Users } from '../../../models/server/raw';\nimport { createDefaultBusinessHourRow } from '../../../models/server/models/LivechatBusinessHours';\n\nexport const filterBusinessHoursThatMustBeOpened = async (\n\tbusinessHours: ILivechatBusinessHour[],\n): Promise<Pick<ILivechatBusinessHour, '_id' | 'type'>[]> => {\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\n\treturn businessHours\n\t\t.filter(\n\t\t\t(businessHour) =>\n\t\t\t\tbusinessHour.active &&\n\t\t\t\tbusinessHour.workHours\n\t\t\t\t\t.filter((hour) => hour.open)\n\t\t\t\t\t.some((hour) => {\n\t\t\t\t\t\tconst localTimeStart = moment(`${hour.start.cron.dayOfWeek}:${hour.start.cron.time}`, 'dddd:HH:mm');\n\t\t\t\t\t\tconst localTimeFinish = moment(`${hour.finish.cron.dayOfWeek}:${hour.finish.cron.time}`, 'dddd:HH:mm');\n\t\t\t\t\t\treturn currentTime.isSameOrAfter(localTimeStart) && currentTime.isSameOrBefore(localTimeFinish);\n\t\t\t\t\t}),\n\t\t)\n\t\t.map((businessHour) => ({\n\t\t\t_id: businessHour._id,\n\t\t\ttype: businessHour.type,\n\t\t}));\n};\n\nexport const openBusinessHourDefault = async (): Promise<void> => {\n\tawait Users.removeBusinessHoursFromAllUsers();\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tfields: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tawait Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n\tawait Users.updateLivechatStatusBasedOnBusinessHours();\n};\n\nexport const createDefaultBusinessHourIfNotExists = async (): Promise<void> => {\n\tif ((await LivechatBusinessHours.find({ type: LivechatBusinessHourTypes.DEFAULT }).count()) === 0) {\n\t\tawait LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n\t}\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/Helper.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/business-hour/Helper.ts"}},"code":"module.export({\n  filterBusinessHoursThatMustBeOpened: () => filterBusinessHoursThatMustBeOpened,\n  openBusinessHourDefault: () => openBusinessHourDefault,\n  createDefaultBusinessHourIfNotExists: () => createDefaultBusinessHourIfNotExists\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet LivechatBusinessHourTypes;\nmodule.link(\"../../../../definition/ILivechatBusinessHour\", {\n  LivechatBusinessHourTypes(v) {\n    LivechatBusinessHourTypes = v;\n  }\n\n}, 1);\nlet LivechatBusinessHours, Users;\nmodule.link(\"../../../models/server/raw\", {\n  LivechatBusinessHours(v) {\n    LivechatBusinessHours = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 2);\nlet createDefaultBusinessHourRow;\nmodule.link(\"../../../models/server/models/LivechatBusinessHours\", {\n  createDefaultBusinessHourRow(v) {\n    createDefaultBusinessHourRow = v;\n  }\n\n}, 3);\n\nconst filterBusinessHoursThatMustBeOpened = businessHours => Promise.asyncApply(() => {\n  const currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n  return businessHours.filter(businessHour => businessHour.active && businessHour.workHours.filter(hour => hour.open).some(hour => {\n    const localTimeStart = moment(\"\".concat(hour.start.cron.dayOfWeek, \":\").concat(hour.start.cron.time), 'dddd:HH:mm');\n    const localTimeFinish = moment(\"\".concat(hour.finish.cron.dayOfWeek, \":\").concat(hour.finish.cron.time), 'dddd:HH:mm');\n    return currentTime.isSameOrAfter(localTimeStart) && currentTime.isSameOrBefore(localTimeFinish);\n  })).map(businessHour => ({\n    _id: businessHour._id,\n    type: businessHour.type\n  }));\n});\n\nconst openBusinessHourDefault = () => Promise.asyncApply(() => {\n  Promise.await(Users.removeBusinessHoursFromAllUsers());\n  const currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n  const day = currentTime.format('dddd');\n  const activeBusinessHours = Promise.await(LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n    fields: {\n      workHours: 1,\n      timezone: 1,\n      type: 1,\n      active: 1\n    }\n  }));\n  const businessHoursToOpenIds = Promise.await(filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map(businessHour => businessHour._id);\n  Promise.await(Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds));\n  Promise.await(Users.updateLivechatStatusBasedOnBusinessHours());\n});\n\nconst createDefaultBusinessHourIfNotExists = () => Promise.asyncApply(() => {\n  if (Promise.await(LivechatBusinessHours.find({\n    type: LivechatBusinessHourTypes.DEFAULT\n  }).count()) === 0) {\n    Promise.await(LivechatBusinessHours.insertOne(createDefaultBusinessHourRow()));\n  }\n});","map":{"version":3,"sources":["app/livechat/server/business-hour/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../definition/ILivechatBusinessHour';\nimport { LivechatBusinessHours, Users } from '../../../models/server/raw';\nimport { createDefaultBusinessHourRow } from '../../../models/server/models/LivechatBusinessHours';\n\nexport const filterBusinessHoursThatMustBeOpened = async (\n\tbusinessHours: ILivechatBusinessHour[],\n): Promise<Pick<ILivechatBusinessHour, '_id' | 'type'>[]> => {\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\n\treturn businessHours\n\t\t.filter(\n\t\t\t(businessHour) =>\n\t\t\t\tbusinessHour.active &&\n\t\t\t\tbusinessHour.workHours\n\t\t\t\t\t.filter((hour) => hour.open)\n\t\t\t\t\t.some((hour) => {\n\t\t\t\t\t\tconst localTimeStart = moment(`${hour.start.cron.dayOfWeek}:${hour.start.cron.time}`, 'dddd:HH:mm');\n\t\t\t\t\t\tconst localTimeFinish = moment(`${hour.finish.cron.dayOfWeek}:${hour.finish.cron.time}`, 'dddd:HH:mm');\n\t\t\t\t\t\treturn currentTime.isSameOrAfter(localTimeStart) && currentTime.isSameOrBefore(localTimeFinish);\n\t\t\t\t\t}),\n\t\t)\n\t\t.map((businessHour) => ({\n\t\t\t_id: businessHour._id,\n\t\t\ttype: businessHour.type,\n\t\t}));\n};\n\nexport const openBusinessHourDefault = async (): Promise<void> => {\n\tawait Users.removeBusinessHoursFromAllUsers();\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tfields: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tawait Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n\tawait Users.updateLivechatStatusBasedOnBusinessHours();\n};\n\nexport const createDefaultBusinessHourIfNotExists = async (): Promise<void> => {\n\tif ((await LivechatBusinessHours.find({ type: LivechatBusinessHourTypes.DEFAULT }).count()) === 0) {\n\t\tawait LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n\t}\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"339d5cfa1c7e46016807876909a5630706b93f18"}
