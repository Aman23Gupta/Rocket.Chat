{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/ldap.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/configuration/ldap.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/ldap.ts","inputSourceMap":{"version":3,"file":"ee/server/configuration/ldap.ts","sourceRoot":"","sources":["ee/server/configuration/ldap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { LDAPEE } from '../sdk';\nimport { settings } from '../../../app/settings/server';\nimport { LDAPConnection } from '../../../server/lib/ldap/Connection';\nimport { logger } from '../../../server/lib/ldap/Logger';\nimport { cronJobs } from '../../../app/utils/server/lib/cron/Cronjobs';\nimport { LDAPEEManager } from '../lib/ldap/Manager';\nimport { callbacks } from '../../../lib/callbacks';\nimport type { IImportUser } from '../../../definition/IImportUser';\nimport type { ILDAPEntry } from '../../../definition/ldap/ILDAPEntry';\nimport type { IUser } from '../../../definition/IUser';\nimport { onLicense } from '../../app/license/server';\nimport { addSettings } from '../settings/ldap';\n\nMeteor.startup(() =>\n\tonLicense('ldap-enterprise', () => {\n\t\taddSettings();\n\n\t\t// Configure background sync cronjob\n\t\tfunction configureBackgroundSync(jobName: string, enableSetting: string, intervalSetting: string, cb: () => {}): () => void {\n\t\t\tlet lastSchedule: string;\n\t\t\treturn function addCronJobDebounced(): void {\n\t\t\t\tif (settings.get('LDAP_Enable') !== true || settings.get(enableSetting) !== true) {\n\t\t\t\t\tif (cronJobs.nextScheduledAtDate(jobName)) {\n\t\t\t\t\t\tlogger.info({ msg: 'Disabling LDAP Background Sync', jobName });\n\t\t\t\t\t\tcronJobs.remove(jobName);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst schedule = settings.get<string>(intervalSetting);\n\t\t\t\tif (schedule) {\n\t\t\t\t\tif (schedule !== lastSchedule && cronJobs.nextScheduledAtDate(jobName)) {\n\t\t\t\t\t\tcronJobs.remove(jobName);\n\t\t\t\t\t}\n\n\t\t\t\t\tlastSchedule = schedule;\n\t\t\t\t\tlogger.info({ msg: 'Enabling LDAP Background Sync', jobName });\n\t\t\t\t\tcronJobs.add(jobName, schedule, () => cb(), 'text');\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AvatarSync',\n\t\t\t'LDAP_Background_Sync_Avatars',\n\t\t\t'LDAP_Background_Sync_Avatars_Interval',\n\t\t\t() => LDAPEE.syncAvatars(),\n\t\t);\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AutoLogout',\n\t\t\t'LDAP_Sync_AutoLogout_Enabled',\n\t\t\t'LDAP_Sync_AutoLogout_Interval',\n\t\t\t() => LDAPEE.syncLogout(),\n\t\t);\n\n\t\tsettings.watchMultiple(['LDAP_Background_Sync', 'LDAP_Background_Sync_Interval'], addCronJob);\n\t\tsettings.watchMultiple(['LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval'], addAvatarCronJob);\n\t\tsettings.watchMultiple(['LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval'], addLogoutCronJob);\n\n\t\tsettings.watch('LDAP_Enable', () => {\n\t\t\taddCronJob();\n\t\t\taddAvatarCronJob();\n\t\t\taddLogoutCronJob();\n\t\t});\n\n\t\tsettings.watch<string>('LDAP_Groups_To_Rocket_Chat_Teams', (value) => {\n\t\t\ttry {\n\t\t\t\tLDAPEEManager.validateLDAPTeamsMappingChanges(value);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error(error);\n\t\t\t}\n\t\t});\n\n\t\tcallbacks.add(\n\t\t\t'mapLDAPUserData',\n\t\t\t(userData: IImportUser, ldapUser?: ILDAPEntry) => {\n\t\t\t\tif (!ldapUser) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tLDAPEEManager.copyCustomFields(ldapUser, userData);\n\t\t\t\tLDAPEEManager.copyActiveState(ldapUser, userData);\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'mapLDAPCustomFields',\n\t\t);\n\n\t\tcallbacks.add(\n\t\t\t'onLDAPLogin',\n\t\t\t({ user, ldapUser, isNewUser }: { user: IUser; ldapUser: ILDAPEntry; isNewUser: boolean }, ldap?: LDAPConnection) => {\n\t\t\t\tif (!ldap) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tPromise.await(LDAPEEManager.advancedSyncForUser(ldap, user, isNewUser, ldapUser.dn));\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'advancedLDAPSync',\n\t\t);\n\t}),\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/ldap.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/configuration/ldap.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet LDAPEE;\nmodule.link(\"../sdk\", {\n  LDAPEE(v) {\n    LDAPEE = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet logger;\nmodule.link(\"../../../server/lib/ldap/Logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 3);\nlet cronJobs;\nmodule.link(\"../../../app/utils/server/lib/cron/Cronjobs\", {\n  cronJobs(v) {\n    cronJobs = v;\n  }\n\n}, 4);\nlet LDAPEEManager;\nmodule.link(\"../lib/ldap/Manager\", {\n  LDAPEEManager(v) {\n    LDAPEEManager = v;\n  }\n\n}, 5);\nlet callbacks;\nmodule.link(\"../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 6);\nlet onLicense;\nmodule.link(\"../../app/license/server\", {\n  onLicense(v) {\n    onLicense = v;\n  }\n\n}, 7);\nlet addSettings;\nmodule.link(\"../settings/ldap\", {\n  addSettings(v) {\n    addSettings = v;\n  }\n\n}, 8);\nMeteor.startup(() => onLicense('ldap-enterprise', () => {\n  addSettings(); // Configure background sync cronjob\n\n  function configureBackgroundSync(jobName, enableSetting, intervalSetting, cb) {\n    let lastSchedule;\n    return function addCronJobDebounced() {\n      if (settings.get('LDAP_Enable') !== true || settings.get(enableSetting) !== true) {\n        if (cronJobs.nextScheduledAtDate(jobName)) {\n          logger.info({\n            msg: 'Disabling LDAP Background Sync',\n            jobName\n          });\n          cronJobs.remove(jobName);\n        }\n\n        return;\n      }\n\n      const schedule = settings.get(intervalSetting);\n\n      if (schedule) {\n        if (schedule !== lastSchedule && cronJobs.nextScheduledAtDate(jobName)) {\n          cronJobs.remove(jobName);\n        }\n\n        lastSchedule = schedule;\n        logger.info({\n          msg: 'Enabling LDAP Background Sync',\n          jobName\n        });\n        cronJobs.add(jobName, schedule, () => cb(), 'text');\n      }\n    };\n  }\n\n  const addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n  const addAvatarCronJob = configureBackgroundSync('LDAP_AvatarSync', 'LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval', () => LDAPEE.syncAvatars());\n  const addLogoutCronJob = configureBackgroundSync('LDAP_AutoLogout', 'LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval', () => LDAPEE.syncLogout());\n  settings.watchMultiple(['LDAP_Background_Sync', 'LDAP_Background_Sync_Interval'], addCronJob);\n  settings.watchMultiple(['LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval'], addAvatarCronJob);\n  settings.watchMultiple(['LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval'], addLogoutCronJob);\n  settings.watch('LDAP_Enable', () => {\n    addCronJob();\n    addAvatarCronJob();\n    addLogoutCronJob();\n  });\n  settings.watch('LDAP_Groups_To_Rocket_Chat_Teams', value => {\n    try {\n      LDAPEEManager.validateLDAPTeamsMappingChanges(value);\n    } catch (error) {\n      logger.error(error);\n    }\n  });\n  callbacks.add('mapLDAPUserData', (userData, ldapUser) => {\n    if (!ldapUser) {\n      return;\n    }\n\n    LDAPEEManager.copyCustomFields(ldapUser, userData);\n    LDAPEEManager.copyActiveState(ldapUser, userData);\n  }, callbacks.priority.MEDIUM, 'mapLDAPCustomFields');\n  callbacks.add('onLDAPLogin', (_ref, ldap) => {\n    let {\n      user,\n      ldapUser,\n      isNewUser\n    } = _ref;\n\n    if (!ldap) {\n      return;\n    }\n\n    Promise.await(LDAPEEManager.advancedSyncForUser(ldap, user, isNewUser, ldapUser.dn));\n  }, callbacks.priority.MEDIUM, 'advancedLDAPSync');\n}));","map":{"version":3,"sources":["ee/server/configuration/ldap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { LDAPEE } from '../sdk';\nimport { settings } from '../../../app/settings/server';\nimport { LDAPConnection } from '../../../server/lib/ldap/Connection';\nimport { logger } from '../../../server/lib/ldap/Logger';\nimport { cronJobs } from '../../../app/utils/server/lib/cron/Cronjobs';\nimport { LDAPEEManager } from '../lib/ldap/Manager';\nimport { callbacks } from '../../../lib/callbacks';\nimport type { IImportUser } from '../../../definition/IImportUser';\nimport type { ILDAPEntry } from '../../../definition/ldap/ILDAPEntry';\nimport type { IUser } from '../../../definition/IUser';\nimport { onLicense } from '../../app/license/server';\nimport { addSettings } from '../settings/ldap';\n\nMeteor.startup(() =>\n\tonLicense('ldap-enterprise', () => {\n\t\taddSettings();\n\n\t\t// Configure background sync cronjob\n\t\tfunction configureBackgroundSync(jobName: string, enableSetting: string, intervalSetting: string, cb: () => {}): () => void {\n\t\t\tlet lastSchedule: string;\n\t\t\treturn function addCronJobDebounced(): void {\n\t\t\t\tif (settings.get('LDAP_Enable') !== true || settings.get(enableSetting) !== true) {\n\t\t\t\t\tif (cronJobs.nextScheduledAtDate(jobName)) {\n\t\t\t\t\t\tlogger.info({ msg: 'Disabling LDAP Background Sync', jobName });\n\t\t\t\t\t\tcronJobs.remove(jobName);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst schedule = settings.get<string>(intervalSetting);\n\t\t\t\tif (schedule) {\n\t\t\t\t\tif (schedule !== lastSchedule && cronJobs.nextScheduledAtDate(jobName)) {\n\t\t\t\t\t\tcronJobs.remove(jobName);\n\t\t\t\t\t}\n\n\t\t\t\t\tlastSchedule = schedule;\n\t\t\t\t\tlogger.info({ msg: 'Enabling LDAP Background Sync', jobName });\n\t\t\t\t\tcronJobs.add(jobName, schedule, () => cb(), 'text');\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AvatarSync',\n\t\t\t'LDAP_Background_Sync_Avatars',\n\t\t\t'LDAP_Background_Sync_Avatars_Interval',\n\t\t\t() => LDAPEE.syncAvatars(),\n\t\t);\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AutoLogout',\n\t\t\t'LDAP_Sync_AutoLogout_Enabled',\n\t\t\t'LDAP_Sync_AutoLogout_Interval',\n\t\t\t() => LDAPEE.syncLogout(),\n\t\t);\n\n\t\tsettings.watchMultiple(['LDAP_Background_Sync', 'LDAP_Background_Sync_Interval'], addCronJob);\n\t\tsettings.watchMultiple(['LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval'], addAvatarCronJob);\n\t\tsettings.watchMultiple(['LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval'], addLogoutCronJob);\n\n\t\tsettings.watch('LDAP_Enable', () => {\n\t\t\taddCronJob();\n\t\t\taddAvatarCronJob();\n\t\t\taddLogoutCronJob();\n\t\t});\n\n\t\tsettings.watch<string>('LDAP_Groups_To_Rocket_Chat_Teams', (value) => {\n\t\t\ttry {\n\t\t\t\tLDAPEEManager.validateLDAPTeamsMappingChanges(value);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error(error);\n\t\t\t}\n\t\t});\n\n\t\tcallbacks.add(\n\t\t\t'mapLDAPUserData',\n\t\t\t(userData: IImportUser, ldapUser?: ILDAPEntry) => {\n\t\t\t\tif (!ldapUser) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tLDAPEEManager.copyCustomFields(ldapUser, userData);\n\t\t\t\tLDAPEEManager.copyActiveState(ldapUser, userData);\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'mapLDAPCustomFields',\n\t\t);\n\n\t\tcallbacks.add(\n\t\t\t'onLDAPLogin',\n\t\t\t({ user, ldapUser, isNewUser }: { user: IUser; ldapUser: ILDAPEntry; isNewUser: boolean }, ldap?: LDAPConnection) => {\n\t\t\t\tif (!ldap) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tPromise.await(LDAPEEManager.advancedSyncForUser(ldap, user, isNewUser, ldapUser.dn));\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'advancedLDAPSync',\n\t\t);\n\t}),\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"e6071dfe58c4d1e11f21ae1533430dd1704b3de2"}
