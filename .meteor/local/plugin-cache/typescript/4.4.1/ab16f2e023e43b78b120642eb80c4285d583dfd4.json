{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/markRoomAsRead.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/markRoomAsRead.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/markRoomAsRead.ts","inputSourceMap":{"version":3,"file":"server/lib/markRoomAsRead.ts","sourceRoot":"","sources":["server/lib/markRoomAsRead.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAE/E,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,GAAW,EAAE,GAAW;IAC5D,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAE9C,MAAM,UAAU,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACnD,MAAM,GAAG,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IACnF,IAAI,CAAC,GAAG,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KAC9C;IAED,6DAA6D;IAC7D,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAEjE,MAAM,aAAa,CAAC,0BAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAEhE,MAAM,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAEhD,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;AACzE,CAAC","sourcesContent":["import { callbacks } from '../../lib/callbacks';\nimport { NotificationQueue, Subscriptions } from '../../app/models/server/raw';\n\nexport async function markRoomAsRead(rid: string, uid: string): Promise<void> {\n\tcallbacks.run('beforeReadMessages', rid, uid);\n\n\tconst projection = { ls: 1, tunread: 1, alert: 1 };\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });\n\tif (!sub) {\n\t\tthrow new Error('error-invalid-subscription');\n\t}\n\n\t// do not mark room as read if there are still unread threads\n\tconst alert = sub.alert && sub.tunread && sub.tunread.length > 0;\n\n\tawait Subscriptions.setAsReadByRoomIdAndUserId(rid, uid, alert);\n\n\tawait NotificationQueue.clearQueueByUserId(uid);\n\n\tcallbacks.runAsync('afterReadMessages', rid, { uid, lastSeen: sub.ls });\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/markRoomAsRead.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/markRoomAsRead.ts"}},"code":"module.export({\n  markRoomAsRead: () => markRoomAsRead\n});\nlet callbacks;\nmodule.link(\"../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 0);\nlet NotificationQueue, Subscriptions;\nmodule.link(\"../../app/models/server/raw\", {\n  NotificationQueue(v) {\n    NotificationQueue = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 1);\n\nfunction markRoomAsRead(rid, uid) {\n  return Promise.asyncApply(() => {\n    callbacks.run('beforeReadMessages', rid, uid);\n    const projection = {\n      ls: 1,\n      tunread: 1,\n      alert: 1\n    };\n    const sub = Promise.await(Subscriptions.findOneByRoomIdAndUserId(rid, uid, {\n      projection\n    }));\n\n    if (!sub) {\n      throw new Error('error-invalid-subscription');\n    } // do not mark room as read if there are still unread threads\n\n\n    const alert = sub.alert && sub.tunread && sub.tunread.length > 0;\n    Promise.await(Subscriptions.setAsReadByRoomIdAndUserId(rid, uid, alert));\n    Promise.await(NotificationQueue.clearQueueByUserId(uid));\n    callbacks.runAsync('afterReadMessages', rid, {\n      uid,\n      lastSeen: sub.ls\n    });\n  });\n}","map":{"version":3,"sources":["server/lib/markRoomAsRead.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,cAAiB,EAAA,MAAA;AAAjB,CAAT;AAAgD,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,qBAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA,EAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAGzC,SAAe,cAAf,CAA8B,GAA9B,EAA2C,GAA3C;AAAA,kCAAsD;AAC5D,IAAA,SAAS,CAAC,GAAV,CAAc,oBAAd,EAAoC,GAApC,EAAyC,GAAzC;AAEA,UAAM,UAAU,GAAG;AAAE,MAAA,EAAE,EAAE,CAAN;AAAS,MAAA,OAAO,EAAE,CAAlB;AAAqB,MAAA,KAAK,EAAE;AAA5B,KAAnB;AACA,UAAM,GAAG,iBAAS,aAAa,CAAC,wBAAd,CAAuC,GAAvC,EAA4C,GAA5C,EAAiD;AAAE,MAAA;AAAF,KAAjD,CAAT,CAAT;;AACA,QAAI,CAAC,GAAL,EAAU;AACT,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACA,KAP2D,CAS5D;;;AACA,UAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,IAAa,GAAG,CAAC,OAAjB,IAA4B,GAAG,CAAC,OAAJ,CAAY,MAAZ,GAAqB,CAA/D;AAEA,kBAAM,aAAa,CAAC,0BAAd,CAAyC,GAAzC,EAA8C,GAA9C,EAAmD,KAAnD,CAAN;AAEA,kBAAM,iBAAiB,CAAC,kBAAlB,CAAqC,GAArC,CAAN;AAEA,IAAA,SAAS,CAAC,QAAV,CAAmB,mBAAnB,EAAwC,GAAxC,EAA6C;AAAE,MAAA,GAAF;AAAO,MAAA,QAAQ,EAAE,GAAG,CAAC;AAArB,KAA7C;AACA,GAjBM;AAAA","sourcesContent":["import { callbacks } from '../../lib/callbacks';\nimport { NotificationQueue, Subscriptions } from '../../app/models/server/raw';\n\nexport async function markRoomAsRead(rid: string, uid: string): Promise<void> {\n\tcallbacks.run('beforeReadMessages', rid, uid);\n\n\tconst projection = { ls: 1, tunread: 1, alert: 1 };\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });\n\tif (!sub) {\n\t\tthrow new Error('error-invalid-subscription');\n\t}\n\n\t// do not mark room as read if there are still unread threads\n\tconst alert = sub.alert && sub.tunread && sub.tunread.length > 0;\n\n\tawait Subscriptions.setAsReadByRoomIdAndUserId(rid, uid, alert);\n\n\tawait NotificationQueue.clearQueueByUserId(uid);\n\n\tcallbacks.runAsync('afterReadMessages', rid, { uid, lastSeen: sub.ls });\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"ab16f2e023e43b78b120642eb80c4285d583dfd4"}
