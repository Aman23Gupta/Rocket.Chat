{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/email/IMAPInterceptor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/email/IMAPInterceptor.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/email/IMAPInterceptor.ts","inputSourceMap":{"version":3,"file":"server/email/IMAPInterceptor.ts","sourceRoot":"","sources":["server/email/IMAPInterceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\n\nimport IMAP from 'imap';\nimport type Connection from 'imap';\nimport { simpleParser, ParsedMail } from 'mailparser';\n\ntype IMAPOptions = {\n\tdeleteAfterRead: boolean;\n\tfilter: any[];\n\trejectBeforeTS?: Date;\n\tmarkSeen: boolean;\n};\n\nexport declare interface IMAPInterceptor {\n\ton(event: 'email', listener: (email: ParsedMail) => void): this;\n\ton(event: string, listener: Function): this;\n}\n\nexport class IMAPInterceptor extends EventEmitter {\n\tprivate imap: IMAP;\n\n\tconstructor(\n\t\timapConfig: IMAP.Config,\n\t\tprivate options: IMAPOptions = {\n\t\t\tdeleteAfterRead: false,\n\t\t\tfilter: ['UNSEEN'],\n\t\t\tmarkSeen: true,\n\t\t},\n\t) {\n\t\tsuper();\n\n\t\tthis.imap = new IMAP({\n\t\t\tconnTimeout: 30000,\n\t\t\tkeepalive: true,\n\t\t\t...imapConfig,\n\t\t});\n\n\t\t// On successfully connected.\n\t\tthis.imap.on('ready', () => {\n\t\t\tif (this.imap.state !== 'disconnected') {\n\t\t\t\tthis.openInbox((err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t\t// fetch new emails & wait [IDLE]\n\t\t\t\t\tthis.getEmails();\n\n\t\t\t\t\t// If new message arrived, fetch them\n\t\t\t\t\tthis.imap.on('mail', () => {\n\t\t\t\t\t\tthis.getEmails();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.log('IMAP did not connected.');\n\t\t\t\tthis.imap.end();\n\t\t\t}\n\t\t});\n\n\t\tthis.imap.on('error', (err: Error) => {\n\t\t\tthis.log('Error occurred: ', err);\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tlog(...msg: any[]): void {\n\t\tconsole.log(...msg);\n\t}\n\n\topenInbox(cb: (error: Error, mailbox: Connection.Box) => void): void {\n\t\tthis.imap.openBox('INBOX', false, cb);\n\t}\n\n\tstart(): void {\n\t\tthis.imap.connect();\n\t}\n\n\tisActive(): boolean {\n\t\tif (this.imap && this.imap.state && this.imap.state === 'disconnected') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstop(callback = new Function()): void {\n\t\tthis.imap.end();\n\t\tthis.imap.once('end', callback);\n\t}\n\n\trestart(): void {\n\t\tthis.stop(() => {\n\t\t\tthis.log('Restarting IMAP ....');\n\t\t\tthis.start();\n\t\t});\n\t}\n\n\t// Fetch all UNSEEN messages and pass them for further processing\n\tgetEmails(): void {\n\t\tthis.imap.search(this.options.filter, (err, newEmails) => {\n\t\t\tif (err) {\n\t\t\t\tthis.log(err);\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\t// newEmails => array containing serials of unseen messages\n\t\t\tif (newEmails.length > 0) {\n\t\t\t\tconst fetch = this.imap.fetch(newEmails, {\n\t\t\t\t\tbodies: ['HEADER', 'TEXT', ''],\n\t\t\t\t\tstruct: true,\n\t\t\t\t\tmarkSeen: this.options.markSeen,\n\t\t\t\t});\n\n\t\t\t\tfetch.on('message', (msg, seqno) => {\n\t\t\t\t\tmsg.on('body', (stream, type) => {\n\t\t\t\t\t\tif (type.which !== '') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsimpleParser(stream, (_err, email) => {\n\t\t\t\t\t\t\tif (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n\t\t\t\t\t\t\t\tthis.log('Rejecting email', email.subject);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.emit('email', email);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// On fetched each message, pass it further\n\t\t\t\t\tmsg.once('end', () => {\n\t\t\t\t\t\t// delete message from inbox\n\t\t\t\t\t\tif (this.options.deleteAfterRead) {\n\t\t\t\t\t\t\tthis.imap.seq.addFlags(seqno, 'Deleted', (err) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tthis.log(`Mark deleted error: ${err}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tfetch.once('error', (err) => {\n\t\t\t\t\tthis.log(`Fetch error: ${err}`);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/email/IMAPInterceptor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/email/IMAPInterceptor.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  IMAPInterceptor: () => IMAPInterceptor\n});\nlet EventEmitter;\nmodule.link(\"events\", {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n\n}, 0);\nlet IMAP;\nmodule.link(\"imap\", {\n  default(v) {\n    IMAP = v;\n  }\n\n}, 1);\nlet simpleParser;\nmodule.link(\"mailparser\", {\n  simpleParser(v) {\n    simpleParser = v;\n  }\n\n}, 2);\n\nclass IMAPInterceptor extends EventEmitter {\n  constructor(imapConfig) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      deleteAfterRead: false,\n      filter: ['UNSEEN'],\n      markSeen: true\n    };\n    super();\n    this.options = void 0;\n    this.imap = void 0;\n    this.options = options;\n    this.imap = new IMAP(_objectSpread({\n      connTimeout: 30000,\n      keepalive: true\n    }, imapConfig)); // On successfully connected.\n\n    this.imap.on('ready', () => {\n      if (this.imap.state !== 'disconnected') {\n        this.openInbox(err => {\n          if (err) {\n            throw err;\n          } // fetch new emails & wait [IDLE]\n\n\n          this.getEmails(); // If new message arrived, fetch them\n\n          this.imap.on('mail', () => {\n            this.getEmails();\n          });\n        });\n      } else {\n        this.log('IMAP did not connected.');\n        this.imap.end();\n      }\n    });\n    this.imap.on('error', err => {\n      this.log('Error occurred: ', err);\n      throw err;\n    });\n  }\n\n  log() {\n    console.log(...arguments);\n  }\n\n  openInbox(cb) {\n    this.imap.openBox('INBOX', false, cb);\n  }\n\n  start() {\n    this.imap.connect();\n  }\n\n  isActive() {\n    if (this.imap && this.imap.state && this.imap.state === 'disconnected') {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop() {\n    let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Function();\n    this.imap.end();\n    this.imap.once('end', callback);\n  }\n\n  restart() {\n    this.stop(() => {\n      this.log('Restarting IMAP ....');\n      this.start();\n    });\n  } // Fetch all UNSEEN messages and pass them for further processing\n\n\n  getEmails() {\n    this.imap.search(this.options.filter, (err, newEmails) => {\n      if (err) {\n        this.log(err);\n        throw err;\n      } // newEmails => array containing serials of unseen messages\n\n\n      if (newEmails.length > 0) {\n        const fetch = this.imap.fetch(newEmails, {\n          bodies: ['HEADER', 'TEXT', ''],\n          struct: true,\n          markSeen: this.options.markSeen\n        });\n        fetch.on('message', (msg, seqno) => {\n          msg.on('body', (stream, type) => {\n            if (type.which !== '') {\n              return;\n            }\n\n            simpleParser(stream, (_err, email) => {\n              if (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n                this.log('Rejecting email', email.subject);\n                return;\n              }\n\n              this.emit('email', email);\n            });\n          }); // On fetched each message, pass it further\n\n          msg.once('end', () => {\n            // delete message from inbox\n            if (this.options.deleteAfterRead) {\n              this.imap.seq.addFlags(seqno, 'Deleted', err => {\n                if (err) {\n                  this.log(\"Mark deleted error: \".concat(err));\n                }\n              });\n            }\n          });\n        });\n        fetch.once('error', err => {\n          this.log(\"Fetch error: \".concat(err));\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["server/email/IMAPInterceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\n\nimport IMAP from 'imap';\nimport type Connection from 'imap';\nimport { simpleParser, ParsedMail } from 'mailparser';\n\ntype IMAPOptions = {\n\tdeleteAfterRead: boolean;\n\tfilter: any[];\n\trejectBeforeTS?: Date;\n\tmarkSeen: boolean;\n};\n\nexport declare interface IMAPInterceptor {\n\ton(event: 'email', listener: (email: ParsedMail) => void): this;\n\ton(event: string, listener: Function): this;\n}\n\nexport class IMAPInterceptor extends EventEmitter {\n\tprivate imap: IMAP;\n\n\tconstructor(\n\t\timapConfig: IMAP.Config,\n\t\tprivate options: IMAPOptions = {\n\t\t\tdeleteAfterRead: false,\n\t\t\tfilter: ['UNSEEN'],\n\t\t\tmarkSeen: true,\n\t\t},\n\t) {\n\t\tsuper();\n\n\t\tthis.imap = new IMAP({\n\t\t\tconnTimeout: 30000,\n\t\t\tkeepalive: true,\n\t\t\t...imapConfig,\n\t\t});\n\n\t\t// On successfully connected.\n\t\tthis.imap.on('ready', () => {\n\t\t\tif (this.imap.state !== 'disconnected') {\n\t\t\t\tthis.openInbox((err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t\t// fetch new emails & wait [IDLE]\n\t\t\t\t\tthis.getEmails();\n\n\t\t\t\t\t// If new message arrived, fetch them\n\t\t\t\t\tthis.imap.on('mail', () => {\n\t\t\t\t\t\tthis.getEmails();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.log('IMAP did not connected.');\n\t\t\t\tthis.imap.end();\n\t\t\t}\n\t\t});\n\n\t\tthis.imap.on('error', (err: Error) => {\n\t\t\tthis.log('Error occurred: ', err);\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tlog(...msg: any[]): void {\n\t\tconsole.log(...msg);\n\t}\n\n\topenInbox(cb: (error: Error, mailbox: Connection.Box) => void): void {\n\t\tthis.imap.openBox('INBOX', false, cb);\n\t}\n\n\tstart(): void {\n\t\tthis.imap.connect();\n\t}\n\n\tisActive(): boolean {\n\t\tif (this.imap && this.imap.state && this.imap.state === 'disconnected') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstop(callback = new Function()): void {\n\t\tthis.imap.end();\n\t\tthis.imap.once('end', callback);\n\t}\n\n\trestart(): void {\n\t\tthis.stop(() => {\n\t\t\tthis.log('Restarting IMAP ....');\n\t\t\tthis.start();\n\t\t});\n\t}\n\n\t// Fetch all UNSEEN messages and pass them for further processing\n\tgetEmails(): void {\n\t\tthis.imap.search(this.options.filter, (err, newEmails) => {\n\t\t\tif (err) {\n\t\t\t\tthis.log(err);\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\t// newEmails => array containing serials of unseen messages\n\t\t\tif (newEmails.length > 0) {\n\t\t\t\tconst fetch = this.imap.fetch(newEmails, {\n\t\t\t\t\tbodies: ['HEADER', 'TEXT', ''],\n\t\t\t\t\tstruct: true,\n\t\t\t\t\tmarkSeen: this.options.markSeen,\n\t\t\t\t});\n\n\t\t\t\tfetch.on('message', (msg, seqno) => {\n\t\t\t\t\tmsg.on('body', (stream, type) => {\n\t\t\t\t\t\tif (type.which !== '') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsimpleParser(stream, (_err, email) => {\n\t\t\t\t\t\t\tif (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n\t\t\t\t\t\t\t\tthis.log('Rejecting email', email.subject);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.emit('email', email);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// On fetched each message, pass it further\n\t\t\t\t\tmsg.once('end', () => {\n\t\t\t\t\t\t// delete message from inbox\n\t\t\t\t\t\tif (this.options.deleteAfterRead) {\n\t\t\t\t\t\t\tthis.imap.seq.addFlags(seqno, 'Deleted', (err) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tthis.log(`Mark deleted error: ${err}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tfetch.once('error', (err) => {\n\t\t\t\t\tthis.log(`Fetch error: ${err}`);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"7b6b999244b0ebad56b3ae083737404ac31cfcaa"}
