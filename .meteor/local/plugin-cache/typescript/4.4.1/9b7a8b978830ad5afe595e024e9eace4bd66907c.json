{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/SAUMonitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/statistics/server/lib/SAUMonitor.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/SAUMonitor.ts","inputSourceMap":{"version":3,"file":"app/statistics/server/lib/SAUMonitor.ts","sourceRoot":"","sources":["app/statistics/server/lib/SAUMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\nimport UAParser from 'ua-parser-js';\nimport mem from 'mem';\n\nimport { UAParserMobile, UAParserDesktop } from './UAParserCustom';\nimport { Sessions, Users } from '../../../models/server/raw';\nimport { aggregates } from '../../../models/server/raw/Sessions';\nimport { Logger } from '../../../../server/lib/logger/Logger';\nimport { getMostImportantRole } from './getMostImportantRole';\nimport { sauEvents } from '../../../../server/services/sauMonitor/events';\nimport { ISession, ISessionDevice } from '../../../../definition/ISession';\nimport { ISocketConnection } from '../../../../definition/ISocketConnection';\nimport { IUser } from '../../../../definition/IUser';\n\ntype DateObj = { day: number; month: number; year: number };\n\nconst getDateObj = (dateTime = new Date()): DateObj => ({\n\tday: dateTime.getDate(),\n\tmonth: dateTime.getMonth() + 1,\n\tyear: dateTime.getFullYear(),\n});\n\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<IUser>(userId, { projection: { roles: 1 } });\n\n\t\treturn user?.roles || [];\n\t},\n\t{ maxAge: 5000 },\n);\n\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\nexport class SAUMonitorClass {\n\tprivate _started: boolean;\n\n\tprivate _dailyComputeJobName: string;\n\n\tprivate _dailyFinishSessionsJobName: string;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._dailyComputeJobName = 'aggregate-sessions';\n\t\tthis._dailyFinishSessionsJobName = 'aggregate-sessions';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._startMonitoring();\n\n\t\tthis._started = true;\n\t\tlogger.debug('[start]');\n\t}\n\n\tstop(): void {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = false;\n\n\t\tSyncedCron.remove(this._dailyComputeJobName);\n\t\tSyncedCron.remove(this._dailyFinishSessionsJobName);\n\n\t\tlogger.debug('[stop]');\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started === true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\ttry {\n\t\t\tthis._handleAccountEvents();\n\t\t\tthis._handleOnConnection();\n\t\t\tthis._startCronjobs();\n\t\t} catch (err: any) {\n\t\t\tthrow new Meteor.Error(err);\n\t\t}\n\t}\n\n\tprivate _handleOnConnection(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('socket.disconnected', async ({ id, instanceId }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n\t\t});\n\t}\n\n\tprivate _handleAccountEvents(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('accounts.login', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tawait this._handleSession(connection, params);\n\t\t});\n\n\t\tsauEvents.on('accounts.logout', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.logoutByInstanceIdAndSessionIdAndUserId(connection.instanceId, connection.id, userId);\n\t\t});\n\t}\n\n\tprivate async _handleSession(\n\t\tconnection: ISocketConnection,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Promise<void> {\n\t\tconst data = this._getConnectionInfo(connection, params);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tawait Sessions.createOrUpdate(data);\n\t}\n\n\tprivate async _finishSessionsFromDate(yesterday: Date, today: Date): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { day, month, year } = getDateObj(yesterday);\n\t\tconst beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n\n\t\tconst currentDate = getDateObj(today);\n\t\tconst nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },\n\t\t\t{\n\t\t\t\tlastActivityAt: beforeDateTime,\n\t\t\t},\n\t\t);\n\n\t\t// TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n\t}\n\n\tprivate _getConnectionInfo(\n\t\tconnection: ISocketConnection,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Omit<ISession, '_id' | '_updatedAt' | 'createdAt'> | undefined {\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ip = connection.clientAddress || connection.httpHeaders?.['x-real-ip'] || connection.httpHeaders?.['x-forwarded-for'];\n\n\t\tconst host = connection.httpHeaders?.host || '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\tip: (Array.isArray(ip) ? ip[0] : ip) || '',\n\t\t\thost,\n\t\t\t...this._getUserAgentInfo(connection),\n\t\t\t...params,\n\t\t};\n\t}\n\n\tprivate _getUserAgentInfo(connection: ISocketConnection): { device: ISessionDevice } | undefined {\n\t\tif (!connection?.httpHeaders?.['user-agent']) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uaString = connection.httpHeaders['user-agent'];\n\n\t\t// TODO define a type for \"result\" below\n\t\t// | UAParser.IResult\n\t\t// | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n\t\t// | {\n\t\t// \t\tdevice: { type: string; model?: string };\n\t\t// \t\tbrowser: undefined;\n\t\t// \t\tos: string;\n\t\t// \t\tapp: { name: string; version: string };\n\t\t//   }\n\n\t\tconst result = ((): any => {\n\t\t\tif (UAParserMobile.isMobileApp(uaString)) {\n\t\t\t\treturn UAParserMobile.uaObject(uaString);\n\t\t\t}\n\n\t\t\tif (UAParserDesktop.isDesktopApp(uaString)) {\n\t\t\t\treturn UAParserDesktop.uaObject(uaString);\n\t\t\t}\n\n\t\t\tconst ua = new UAParser(uaString);\n\t\t\treturn ua.getResult();\n\t\t})();\n\n\t\tconst info: ISessionDevice = {\n\t\t\ttype: 'other',\n\t\t\tname: '',\n\t\t\tlongVersion: '',\n\t\t\tos: {\n\t\t\t\tname: '',\n\t\t\t\tversion: '',\n\t\t\t},\n\t\t\tversion: '',\n\t\t};\n\n\t\tconst removeEmptyProps = (obj: any): any => {\n\t\t\tObject.keys(obj).forEach((p) => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n\t\t\treturn obj;\n\t\t};\n\n\t\tif (result.browser && result.browser.name) {\n\t\t\tinfo.type = 'browser';\n\t\t\tinfo.name = result.browser.name;\n\t\t\tinfo.longVersion = result.browser.version || '';\n\t\t}\n\n\t\tif (typeof result.os !== 'string' && result.os?.name) {\n\t\t\tinfo.os = removeEmptyProps(result.os) || '';\n\t\t}\n\n\t\tif (result.device && (result.device.type || result.device.model)) {\n\t\t\tinfo.type = result.device.type || '';\n\n\t\t\tif (result.hasOwnProperty('app') && result.app?.name) {\n\t\t\t\tinfo.name = result.app.name;\n\t\t\t\tinfo.longVersion = result.app.version;\n\t\t\t\tif (result.app.bundle) {\n\t\t\t\t\tinfo.longVersion += ` ${result.app.bundle}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof info.longVersion === 'string') {\n\t\t\tinfo.version = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)?.[0] || '';\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: info,\n\t\t};\n\t}\n\n\tprivate _startCronjobs(): void {\n\t\tlogger.info('[aggregate] - Start Cron.');\n\n\t\tSyncedCron.add({\n\t\t\tname: this._dailyComputeJobName,\n\t\t\tschedule: (parser: any) => parser.text('at 2:00 am'),\n\t\t\tjob: async () => {\n\t\t\t\tawait this._aggregate();\n\t\t\t},\n\t\t});\n\n\t\tSyncedCron.add({\n\t\t\tname: this._dailyFinishSessionsJobName,\n\t\t\tschedule: (parser: any) => parser.text('at 1:05 am'),\n\t\t\tjob: async () => {\n\t\t\t\tconst yesterday = new Date();\n\t\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\t\tawait this._finishSessionsFromDate(yesterday, new Date());\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async _aggregate(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('[aggregate] - Aggregating data.');\n\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 0); // yesterday\n\t\tconst yesterday = getDateObj(date);\n\n\t\tconst match = {\n\t\t\ttype: 'session',\n\t\t\tyear: { $lte: yesterday.year },\n\t\t\tmonth: { $lte: yesterday.month },\n\t\t\tday: { $lte: yesterday.day },\n\t\t};\n\n\t\tfor await (const record of aggregates.dailySessionsOfYesterday(Sessions.col, yesterday)) {\n\t\t\tawait Sessions.updateOne(\n\t\t\t\t{ _id: `${record.userId}-${record.year}-${record.month}-${record.day}` },\n\t\t\t\t{ $set: record },\n\t\t\t\t{ upsert: true },\n\t\t\t);\n\t\t}\n\n\t\tawait Sessions.updateMany(match, {\n\t\t\t$set: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\t_computedAt: new Date(),\n\t\t\t},\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/SAUMonitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/statistics/server/lib/SAUMonitor.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 1);\nmodule.export({\n  SAUMonitorClass: () => SAUMonitorClass\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 1);\nlet UAParser;\nmodule.link(\"ua-parser-js\", {\n  default(v) {\n    UAParser = v;\n  }\n\n}, 2);\nlet mem;\nmodule.link(\"mem\", {\n  default(v) {\n    mem = v;\n  }\n\n}, 3);\nlet UAParserMobile, UAParserDesktop;\nmodule.link(\"./UAParserCustom\", {\n  UAParserMobile(v) {\n    UAParserMobile = v;\n  },\n\n  UAParserDesktop(v) {\n    UAParserDesktop = v;\n  }\n\n}, 4);\nlet Sessions, Users;\nmodule.link(\"../../../models/server/raw\", {\n  Sessions(v) {\n    Sessions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 5);\nlet aggregates;\nmodule.link(\"../../../models/server/raw/Sessions\", {\n  aggregates(v) {\n    aggregates = v;\n  }\n\n}, 6);\nlet Logger;\nmodule.link(\"../../../../server/lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 7);\nlet getMostImportantRole;\nmodule.link(\"./getMostImportantRole\", {\n  getMostImportantRole(v) {\n    getMostImportantRole = v;\n  }\n\n}, 8);\nlet sauEvents;\nmodule.link(\"../../../../server/services/sauMonitor/events\", {\n  sauEvents(v) {\n    sauEvents = v;\n  }\n\n}, 9);\n\nconst getDateObj = function () {\n  let dateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  return {\n    day: dateTime.getDate(),\n    month: dateTime.getMonth() + 1,\n    year: dateTime.getFullYear()\n  };\n};\n\nconst logger = new Logger('SAUMonitor');\nconst getUserRoles = mem(userId => Promise.asyncApply(() => {\n  const user = Promise.await(Users.findOneById(userId, {\n    projection: {\n      roles: 1\n    }\n  }));\n  return (user === null || user === void 0 ? void 0 : user.roles) || [];\n}), {\n  maxAge: 5000\n});\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\n\nclass SAUMonitorClass {\n  constructor() {\n    this._started = void 0;\n    this._dailyComputeJobName = void 0;\n    this._dailyFinishSessionsJobName = void 0;\n    this._started = false;\n    this._dailyComputeJobName = 'aggregate-sessions';\n    this._dailyFinishSessionsJobName = 'aggregate-sessions';\n  }\n\n  start() {\n    return Promise.asyncApply(() => {\n      if (this.isRunning()) {\n        return;\n      }\n\n      Promise.await(this._startMonitoring());\n      this._started = true;\n      logger.debug('[start]');\n    });\n  }\n\n  stop() {\n    if (!this.isRunning()) {\n      return;\n    }\n\n    this._started = false;\n    SyncedCron.remove(this._dailyComputeJobName);\n    SyncedCron.remove(this._dailyFinishSessionsJobName);\n    logger.debug('[stop]');\n  }\n\n  isRunning() {\n    return this._started === true;\n  }\n\n  _startMonitoring() {\n    return Promise.asyncApply(() => {\n      try {\n        this._handleAccountEvents();\n\n        this._handleOnConnection();\n\n        this._startCronjobs();\n      } catch (err) {\n        throw new Meteor.Error(err);\n      }\n    });\n  }\n\n  _handleOnConnection() {\n    if (this.isRunning()) {\n      return;\n    }\n\n    sauEvents.on('socket.disconnected', _ref => Promise.asyncApply(() => {\n      let {\n        id,\n        instanceId\n      } = _ref;\n\n      if (!this.isRunning()) {\n        return;\n      }\n\n      Promise.await(Sessions.closeByInstanceIdAndSessionId(instanceId, id));\n    }));\n  }\n\n  _handleAccountEvents() {\n    if (this.isRunning()) {\n      return;\n    }\n\n    sauEvents.on('accounts.login', _ref2 => Promise.asyncApply(() => {\n      let {\n        userId,\n        connection\n      } = _ref2;\n\n      if (!this.isRunning()) {\n        return;\n      }\n\n      const roles = Promise.await(getUserRoles(userId));\n      const mostImportantRole = getMostImportantRole(roles);\n      const loginAt = new Date();\n\n      const params = _objectSpread({\n        userId,\n        roles,\n        mostImportantRole,\n        loginAt\n      }, getDateObj());\n\n      Promise.await(this._handleSession(connection, params));\n    }));\n    sauEvents.on('accounts.logout', _ref3 => Promise.asyncApply(() => {\n      let {\n        userId,\n        connection\n      } = _ref3;\n\n      if (!this.isRunning()) {\n        return;\n      }\n\n      Promise.await(Sessions.logoutByInstanceIdAndSessionIdAndUserId(connection.instanceId, connection.id, userId));\n    }));\n  }\n\n  _handleSession(connection, params) {\n    return Promise.asyncApply(() => {\n      const data = this._getConnectionInfo(connection, params);\n\n      if (!data) {\n        return;\n      }\n\n      Promise.await(Sessions.createOrUpdate(data));\n    });\n  }\n\n  _finishSessionsFromDate(yesterday, today) {\n    return Promise.asyncApply(() => {\n      if (!this.isRunning()) {\n        return;\n      }\n\n      const {\n        day,\n        month,\n        year\n      } = getDateObj(yesterday);\n      const beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n      const currentDate = getDateObj(today);\n      const nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n      const cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({\n        year,\n        month,\n        day\n      });\n      const batch = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const session = _step.value;\n          // create a new session for the current day\n          batch.push(_objectSpread(_objectSpread(_objectSpread({}, session), currentDate), {}, {\n            createdAt: nextDateTime\n          }));\n\n          if (batch.length === 500) {\n            Promise.await(Sessions.createBatch(batch));\n            batch.length = 0;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (batch.length > 0) {\n        Promise.await(Sessions.createBatch(batch));\n      } // close all sessions from current 'date'\n\n\n      Promise.await(Sessions.updateActiveSessionsByDate({\n        year,\n        month,\n        day\n      }, {\n        lastActivityAt: beforeDateTime\n      })); // TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n    });\n  }\n\n  _getConnectionInfo(connection, params) {\n    var _connection$httpHeade, _connection$httpHeade2, _connection$httpHeade3;\n\n    if (!connection) {\n      return;\n    }\n\n    const ip = connection.clientAddress || ((_connection$httpHeade = connection.httpHeaders) === null || _connection$httpHeade === void 0 ? void 0 : _connection$httpHeade['x-real-ip']) || ((_connection$httpHeade2 = connection.httpHeaders) === null || _connection$httpHeade2 === void 0 ? void 0 : _connection$httpHeade2['x-forwarded-for']);\n    const host = ((_connection$httpHeade3 = connection.httpHeaders) === null || _connection$httpHeade3 === void 0 ? void 0 : _connection$httpHeade3.host) || '';\n    return _objectSpread(_objectSpread({\n      type: 'session',\n      sessionId: connection.id,\n      instanceId: connection.instanceId,\n      ip: (Array.isArray(ip) ? ip[0] : ip) || '',\n      host\n    }, this._getUserAgentInfo(connection)), params);\n  }\n\n  _getUserAgentInfo(connection) {\n    var _connection$httpHeade4, _result$os;\n\n    if (!(connection !== null && connection !== void 0 && (_connection$httpHeade4 = connection.httpHeaders) !== null && _connection$httpHeade4 !== void 0 && _connection$httpHeade4['user-agent'])) {\n      return;\n    }\n\n    const uaString = connection.httpHeaders['user-agent']; // TODO define a type for \"result\" below\n    // | UAParser.IResult\n    // | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n    // | {\n    // \t\tdevice: { type: string; model?: string };\n    // \t\tbrowser: undefined;\n    // \t\tos: string;\n    // \t\tapp: { name: string; version: string };\n    //   }\n\n    const result = (() => {\n      if (UAParserMobile.isMobileApp(uaString)) {\n        return UAParserMobile.uaObject(uaString);\n      }\n\n      if (UAParserDesktop.isDesktopApp(uaString)) {\n        return UAParserDesktop.uaObject(uaString);\n      }\n\n      const ua = new UAParser(uaString);\n      return ua.getResult();\n    })();\n\n    const info = {\n      type: 'other',\n      name: '',\n      longVersion: '',\n      os: {\n        name: '',\n        version: ''\n      },\n      version: ''\n    };\n\n    const removeEmptyProps = obj => {\n      Object.keys(obj).forEach(p => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n      return obj;\n    };\n\n    if (result.browser && result.browser.name) {\n      info.type = 'browser';\n      info.name = result.browser.name;\n      info.longVersion = result.browser.version || '';\n    }\n\n    if (typeof result.os !== 'string' && (_result$os = result.os) !== null && _result$os !== void 0 && _result$os.name) {\n      info.os = removeEmptyProps(result.os) || '';\n    }\n\n    if (result.device && (result.device.type || result.device.model)) {\n      var _result$app;\n\n      info.type = result.device.type || '';\n\n      if (result.hasOwnProperty('app') && (_result$app = result.app) !== null && _result$app !== void 0 && _result$app.name) {\n        info.name = result.app.name;\n        info.longVersion = result.app.version;\n\n        if (result.app.bundle) {\n          info.longVersion += \" \".concat(result.app.bundle);\n        }\n      }\n    }\n\n    if (typeof info.longVersion === 'string') {\n      var _info$longVersion$mat;\n\n      info.version = ((_info$longVersion$mat = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)) === null || _info$longVersion$mat === void 0 ? void 0 : _info$longVersion$mat[0]) || '';\n    }\n\n    return {\n      device: info\n    };\n  }\n\n  _startCronjobs() {\n    logger.info('[aggregate] - Start Cron.');\n    SyncedCron.add({\n      name: this._dailyComputeJobName,\n      schedule: parser => parser.text('at 2:00 am'),\n      job: () => Promise.asyncApply(() => {\n        Promise.await(this._aggregate());\n      })\n    });\n    SyncedCron.add({\n      name: this._dailyFinishSessionsJobName,\n      schedule: parser => parser.text('at 1:05 am'),\n      job: () => Promise.asyncApply(() => {\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        Promise.await(this._finishSessionsFromDate(yesterday, new Date()));\n      })\n    });\n  }\n\n  _aggregate() {\n    return Promise.asyncApply(() => {\n      if (!this.isRunning()) {\n        return;\n      }\n\n      logger.info('[aggregate] - Aggregating data.');\n      const date = new Date();\n      date.setDate(date.getDate() - 0); // yesterday\n\n      const yesterday = getDateObj(date);\n      const match = {\n        type: 'session',\n        year: {\n          $lte: yesterday.year\n        },\n        month: {\n          $lte: yesterday.month\n        },\n        day: {\n          $lte: yesterday.day\n        }\n      };\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(aggregates.dailySessionsOfYesterday(Sessions.col, yesterday)), _step2; _iteratorAbruptCompletion2 = !(_step2 = Promise.await(_iterator2.next())).done; _iteratorAbruptCompletion2 = false) {\n          const record = _step2.value;\n          Promise.await(Sessions.updateOne({\n            _id: \"\".concat(record.userId, \"-\").concat(record.year, \"-\").concat(record.month, \"-\").concat(record.day)\n          }, {\n            $set: record\n          }, {\n            upsert: true\n          }));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            Promise.await(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      Promise.await(Sessions.updateMany(match, {\n        $set: {\n          type: 'computed-session',\n          _computedAt: new Date()\n        }\n      }));\n    });\n  }\n\n}","map":{"version":3,"sources":["app/statistics/server/lib/SAUMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\nimport UAParser from 'ua-parser-js';\nimport mem from 'mem';\n\nimport { UAParserMobile, UAParserDesktop } from './UAParserCustom';\nimport { Sessions, Users } from '../../../models/server/raw';\nimport { aggregates } from '../../../models/server/raw/Sessions';\nimport { Logger } from '../../../../server/lib/logger/Logger';\nimport { getMostImportantRole } from './getMostImportantRole';\nimport { sauEvents } from '../../../../server/services/sauMonitor/events';\nimport { ISession, ISessionDevice } from '../../../../definition/ISession';\nimport { ISocketConnection } from '../../../../definition/ISocketConnection';\nimport { IUser } from '../../../../definition/IUser';\n\ntype DateObj = { day: number; month: number; year: number };\n\nconst getDateObj = (dateTime = new Date()): DateObj => ({\n\tday: dateTime.getDate(),\n\tmonth: dateTime.getMonth() + 1,\n\tyear: dateTime.getFullYear(),\n});\n\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<IUser>(userId, { projection: { roles: 1 } });\n\n\t\treturn user?.roles || [];\n\t},\n\t{ maxAge: 5000 },\n);\n\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\nexport class SAUMonitorClass {\n\tprivate _started: boolean;\n\n\tprivate _dailyComputeJobName: string;\n\n\tprivate _dailyFinishSessionsJobName: string;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._dailyComputeJobName = 'aggregate-sessions';\n\t\tthis._dailyFinishSessionsJobName = 'aggregate-sessions';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._startMonitoring();\n\n\t\tthis._started = true;\n\t\tlogger.debug('[start]');\n\t}\n\n\tstop(): void {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = false;\n\n\t\tSyncedCron.remove(this._dailyComputeJobName);\n\t\tSyncedCron.remove(this._dailyFinishSessionsJobName);\n\n\t\tlogger.debug('[stop]');\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started === true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\ttry {\n\t\t\tthis._handleAccountEvents();\n\t\t\tthis._handleOnConnection();\n\t\t\tthis._startCronjobs();\n\t\t} catch (err: any) {\n\t\t\tthrow new Meteor.Error(err);\n\t\t}\n\t}\n\n\tprivate _handleOnConnection(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('socket.disconnected', async ({ id, instanceId }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n\t\t});\n\t}\n\n\tprivate _handleAccountEvents(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('accounts.login', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tawait this._handleSession(connection, params);\n\t\t});\n\n\t\tsauEvents.on('accounts.logout', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.logoutByInstanceIdAndSessionIdAndUserId(connection.instanceId, connection.id, userId);\n\t\t});\n\t}\n\n\tprivate async _handleSession(\n\t\tconnection: ISocketConnection,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Promise<void> {\n\t\tconst data = this._getConnectionInfo(connection, params);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tawait Sessions.createOrUpdate(data);\n\t}\n\n\tprivate async _finishSessionsFromDate(yesterday: Date, today: Date): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { day, month, year } = getDateObj(yesterday);\n\t\tconst beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n\n\t\tconst currentDate = getDateObj(today);\n\t\tconst nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },\n\t\t\t{\n\t\t\t\tlastActivityAt: beforeDateTime,\n\t\t\t},\n\t\t);\n\n\t\t// TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n\t}\n\n\tprivate _getConnectionInfo(\n\t\tconnection: ISocketConnection,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Omit<ISession, '_id' | '_updatedAt' | 'createdAt'> | undefined {\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ip = connection.clientAddress || connection.httpHeaders?.['x-real-ip'] || connection.httpHeaders?.['x-forwarded-for'];\n\n\t\tconst host = connection.httpHeaders?.host || '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\tip: (Array.isArray(ip) ? ip[0] : ip) || '',\n\t\t\thost,\n\t\t\t...this._getUserAgentInfo(connection),\n\t\t\t...params,\n\t\t};\n\t}\n\n\tprivate _getUserAgentInfo(connection: ISocketConnection): { device: ISessionDevice } | undefined {\n\t\tif (!connection?.httpHeaders?.['user-agent']) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uaString = connection.httpHeaders['user-agent'];\n\n\t\t// TODO define a type for \"result\" below\n\t\t// | UAParser.IResult\n\t\t// | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n\t\t// | {\n\t\t// \t\tdevice: { type: string; model?: string };\n\t\t// \t\tbrowser: undefined;\n\t\t// \t\tos: string;\n\t\t// \t\tapp: { name: string; version: string };\n\t\t//   }\n\n\t\tconst result = ((): any => {\n\t\t\tif (UAParserMobile.isMobileApp(uaString)) {\n\t\t\t\treturn UAParserMobile.uaObject(uaString);\n\t\t\t}\n\n\t\t\tif (UAParserDesktop.isDesktopApp(uaString)) {\n\t\t\t\treturn UAParserDesktop.uaObject(uaString);\n\t\t\t}\n\n\t\t\tconst ua = new UAParser(uaString);\n\t\t\treturn ua.getResult();\n\t\t})();\n\n\t\tconst info: ISessionDevice = {\n\t\t\ttype: 'other',\n\t\t\tname: '',\n\t\t\tlongVersion: '',\n\t\t\tos: {\n\t\t\t\tname: '',\n\t\t\t\tversion: '',\n\t\t\t},\n\t\t\tversion: '',\n\t\t};\n\n\t\tconst removeEmptyProps = (obj: any): any => {\n\t\t\tObject.keys(obj).forEach((p) => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n\t\t\treturn obj;\n\t\t};\n\n\t\tif (result.browser && result.browser.name) {\n\t\t\tinfo.type = 'browser';\n\t\t\tinfo.name = result.browser.name;\n\t\t\tinfo.longVersion = result.browser.version || '';\n\t\t}\n\n\t\tif (typeof result.os !== 'string' && result.os?.name) {\n\t\t\tinfo.os = removeEmptyProps(result.os) || '';\n\t\t}\n\n\t\tif (result.device && (result.device.type || result.device.model)) {\n\t\t\tinfo.type = result.device.type || '';\n\n\t\t\tif (result.hasOwnProperty('app') && result.app?.name) {\n\t\t\t\tinfo.name = result.app.name;\n\t\t\t\tinfo.longVersion = result.app.version;\n\t\t\t\tif (result.app.bundle) {\n\t\t\t\t\tinfo.longVersion += ` ${result.app.bundle}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof info.longVersion === 'string') {\n\t\t\tinfo.version = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)?.[0] || '';\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: info,\n\t\t};\n\t}\n\n\tprivate _startCronjobs(): void {\n\t\tlogger.info('[aggregate] - Start Cron.');\n\n\t\tSyncedCron.add({\n\t\t\tname: this._dailyComputeJobName,\n\t\t\tschedule: (parser: any) => parser.text('at 2:00 am'),\n\t\t\tjob: async () => {\n\t\t\t\tawait this._aggregate();\n\t\t\t},\n\t\t});\n\n\t\tSyncedCron.add({\n\t\t\tname: this._dailyFinishSessionsJobName,\n\t\t\tschedule: (parser: any) => parser.text('at 1:05 am'),\n\t\t\tjob: async () => {\n\t\t\t\tconst yesterday = new Date();\n\t\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\t\tawait this._finishSessionsFromDate(yesterday, new Date());\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async _aggregate(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('[aggregate] - Aggregating data.');\n\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 0); // yesterday\n\t\tconst yesterday = getDateObj(date);\n\n\t\tconst match = {\n\t\t\ttype: 'session',\n\t\t\tyear: { $lte: yesterday.year },\n\t\t\tmonth: { $lte: yesterday.month },\n\t\t\tday: { $lte: yesterday.day },\n\t\t};\n\n\t\tfor await (const record of aggregates.dailySessionsOfYesterday(Sessions.col, yesterday)) {\n\t\t\tawait Sessions.updateOne(\n\t\t\t\t{ _id: `${record.userId}-${record.year}-${record.month}-${record.day}` },\n\t\t\t\t{ $set: record },\n\t\t\t\t{ upsert: true },\n\t\t\t);\n\t\t}\n\n\t\tawait Sessions.updateMany(match, {\n\t\t\t$set: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\t_computedAt: new Date(),\n\t\t\t},\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"9b7a8b978830ad5afe595e024e9eace4bd66907c"}
