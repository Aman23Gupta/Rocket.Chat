{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/teams.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/teams.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/teams.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/teams.ts","sourceRoot":"","sources":["app/api/server/v1/teams.ts"],"names":[],"mappings":"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","sourcesContent":["import { FilterQuery } from 'mongodb';\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { API } from '../api';\nimport { Team } from '../../../../server/sdk';\nimport { hasAtLeastOnePermission, hasPermission } from '../../../authorization/server';\nimport { Users } from '../../../models/server';\nimport { removeUserFromRoom } from '../../../lib/server/functions/removeUserFromRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { isTeamsConvertToChannelProps } from '../../../../definition/rest/v1/teams/TeamsConvertToChannelProps';\nimport { isTeamsRemoveRoomProps } from '../../../../definition/rest/v1/teams/TeamsRemoveRoomProps';\nimport { isTeamsUpdateMemberProps } from '../../../../definition/rest/v1/teams/TeamsUpdateMemberProps';\nimport { isTeamsRemoveMemberProps } from '../../../../definition/rest/v1/teams/TeamsRemoveMemberProps';\nimport { isTeamsAddMembersProps } from '../../../../definition/rest/v1/teams/TeamsAddMembersProps';\nimport { isTeamsDeleteProps } from '../../../../definition/rest/v1/teams/TeamsDeleteProps';\nimport { isTeamsLeaveProps } from '../../../../definition/rest/v1/teams/TeamsLeaveProps';\nimport { isTeamsUpdateProps } from '../../../../definition/rest/v1/teams/TeamsUpdateProps';\nimport { ITeam, TEAM_TYPE } from '../../../../definition/ITeam';\n\nAPI.v1.addRoute(\n\t'teams.list',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, query } = this.parseJsonQuery();\n\n\t\t\tconst { records, total } = await Team.list(this.userId, { offset, count }, { sort, query });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listAll',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (!hasPermission(this.userId, 'view-all-teams')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst { records, total } = await Team.listAll({ offset, count });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!hasPermission(this.userId, 'create-team')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tname: String,\n\t\t\t\t\ttype: Match.OneOf(TEAM_TYPE.PRIVATE, TEAM_TYPE.PUBLIC),\n\t\t\t\t\tmembers: Match.Maybe([String]),\n\t\t\t\t\troom: Match.Maybe(Match.Any),\n\t\t\t\t\towner: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { name, type, members, room, owner } = this.bodyParams;\n\n\t\t\tconst team = await Team.create(this.userId, {\n\t\t\t\tteam: {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\tmembers,\n\t\t\t\towner,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n\nconst getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\n\tif ('teamId' in params && params.teamId) {\n\t\treturn Team.getOneById<ITeam>(params.teamId);\n\t}\n\n\tif ('teamName' in params && params.teamName) {\n\t\treturn Team.getOneByName(params.teamName);\n\t}\n\n\treturn null;\n};\n\nAPI.v1.addRoute(\n\t'teams.convertToChannel',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsConvertToChannelProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-body-params', isTeamsConvertToChannelProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'convert-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst rooms = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\tif (rooms.length) {\n\t\t\t\trooms.forEach((room) => {\n\t\t\t\t\tMeteor.call('eraseRoom', room);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tawait Promise.all([Team.unsetTeamIdOfRooms(team._id), Team.removeAllMembersFromTeam(team._id), Team.deleteById(team._id)]);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.addRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\trooms: [String],\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'add-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized('error-no-permission-team-channel');\n\t\t\t}\n\n\t\t\tconst { rooms } = this.bodyParams;\n\n\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\n\t\t\treturn API.v1.success({ rooms: validRooms });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.removeRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsRemoveRoomProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('body-params-invalid', isTeamsRemoveRoomProps.errors?.map((error) => error.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'remove-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst canRemoveAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tconst room = await Team.removeRoom(this.userId, roomId, team._id, canRemoveAny);\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.updateRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\troomId: String,\n\t\t\t\t\tisDefault: Boolean,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { roomId, isDefault } = this.bodyParams;\n\n\t\t\tconst team = await Team.getOneByRoomId(roomId);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'edit-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst canUpdateAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n\n\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t\ttype: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { filter, type } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst allowPrivateTeam: boolean = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tlet getAllRooms = false;\n\t\t\tif (hasPermission(this.userId, 'view-all-team-channels', team.roomId)) {\n\t\t\t\tgetAllRooms = true;\n\t\t\t}\n\n\t\t\tconst listFilter = {\n\t\t\t\tname: filter ?? undefined,\n\t\t\t\tisDefault: type === 'autoJoin',\n\t\t\t\tgetAllRooms,\n\t\t\t\tallowPrivateTeam,\n\t\t\t};\n\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRoomsOfUser',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tuserId: String,\n\t\t\t\t\tcanUserDelete: Match.Maybe(Boolean),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst allowPrivateTeam = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tconst { userId, canUserDelete } = this.queryParams;\n\n\t\t\tif (!(this.userId === userId || hasPermission(this.userId, 'view-all-team-channels', team.roomId))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, canUserDelete ?? false, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset: 0,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tname: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { status, username, name } = this.queryParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst canSeeAllMembers = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tconst query = {\n\t\t\t\tusername: username ? new RegExp(escapeRegExp(username), 'i') : undefined,\n\t\t\t\tname: name ? new RegExp(escapeRegExp(name), 'i') : undefined,\n\t\t\t\tstatus: status ? { $in: status } : undefined,\n\t\t\t} as FilterQuery<IUser>;\n\n\t\t\tconst { records, total } = await Team.members(this.userId, team._id, canSeeAllMembers, { offset, count }, query);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.addMembers',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsAddMembersProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params');\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { members } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['add-team-member', 'edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.addMembers(this.userId, team._id, members);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.updateMember',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsUpdateMemberProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsUpdateMemberProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { member } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.updateMember(team._id, member);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.removeMember',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsRemoveMemberProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsRemoveMemberProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { userId, rooms } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst user = Users.findOneActiveById(userId, {});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('invalid-user');\n\t\t\t}\n\n\t\t\tif (!(await Team.removeMembers(this.userId, team._id, [{ userId }]))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tif (rooms?.length) {\n\t\t\t\tconst roomsFromTeam: string[] = await Team.getMatchingTeamRooms(team._id, rooms);\n\n\t\t\t\troomsFromTeam.forEach((rid) => {\n\t\t\t\t\tremoveUserFromRoom(rid, user, {\n\t\t\t\t\t\tbyUser: this.user,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsLeaveProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsLeaveProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { rooms = [] } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tawait Team.removeMembers(this.userId, team._id, [\n\t\t\t\t{\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tif (rooms.length) {\n\t\t\t\tconst roomsFromTeam: string[] = await Team.getMatchingTeamRooms(team._id, rooms);\n\n\t\t\t\troomsFromTeam.forEach((rid) => {\n\t\t\t\t\tremoveUserFromRoom(rid, this.user);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst teamInfo = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!teamInfo) {\n\t\t\t\treturn API.v1.failure('Team not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ teamInfo });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\n\t\t\tif (!isTeamsDeleteProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsDeleteProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'delete-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\t// Remove the team's main room\n\t\t\tMeteor.call('eraseRoom', team.roomId);\n\n\t\t\t// If we got a list of rooms to delete along with the team, remove them first\n\t\t\tif (rooms.length) {\n\t\t\t\trooms.forEach((room) => {\n\t\t\t\t\tMeteor.call('eraseRoom', room);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Move every other room back to the workspace\n\t\t\tawait Team.unsetTeamIdOfRooms(team._id);\n\n\t\t\t// Delete all team memberships\n\t\t\tTeam.removeAllMembersFromTeam(team._id);\n\n\t\t\t// And finally delete the team itself\n\t\t\tawait Team.deleteById(team._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.autocomplete',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tname: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\n\t\t\treturn API.v1.success({ teams });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.update',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsUpdateProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsUpdateProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { data } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'edit-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.update(this.userId, team._id, data);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/teams.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/teams.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 2);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 3);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 4);\nlet hasAtLeastOnePermission, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  hasAtLeastOnePermission(v) {\n    hasAtLeastOnePermission = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 5);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 6);\nlet removeUserFromRoom;\nmodule.link(\"../../../lib/server/functions/removeUserFromRoom\", {\n  removeUserFromRoom(v) {\n    removeUserFromRoom = v;\n  }\n\n}, 7);\nlet isTeamsConvertToChannelProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsConvertToChannelProps\", {\n  isTeamsConvertToChannelProps(v) {\n    isTeamsConvertToChannelProps = v;\n  }\n\n}, 8);\nlet isTeamsRemoveRoomProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsRemoveRoomProps\", {\n  isTeamsRemoveRoomProps(v) {\n    isTeamsRemoveRoomProps = v;\n  }\n\n}, 9);\nlet isTeamsUpdateMemberProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsUpdateMemberProps\", {\n  isTeamsUpdateMemberProps(v) {\n    isTeamsUpdateMemberProps = v;\n  }\n\n}, 10);\nlet isTeamsRemoveMemberProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsRemoveMemberProps\", {\n  isTeamsRemoveMemberProps(v) {\n    isTeamsRemoveMemberProps = v;\n  }\n\n}, 11);\nlet isTeamsAddMembersProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsAddMembersProps\", {\n  isTeamsAddMembersProps(v) {\n    isTeamsAddMembersProps = v;\n  }\n\n}, 12);\nlet isTeamsDeleteProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsDeleteProps\", {\n  isTeamsDeleteProps(v) {\n    isTeamsDeleteProps = v;\n  }\n\n}, 13);\nlet isTeamsLeaveProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsLeaveProps\", {\n  isTeamsLeaveProps(v) {\n    isTeamsLeaveProps = v;\n  }\n\n}, 14);\nlet isTeamsUpdateProps;\nmodule.link(\"../../../../definition/rest/v1/teams/TeamsUpdateProps\", {\n  isTeamsUpdateProps(v) {\n    isTeamsUpdateProps = v;\n  }\n\n}, 15);\nlet TEAM_TYPE;\nmodule.link(\"../../../../definition/ITeam\", {\n  TEAM_TYPE(v) {\n    TEAM_TYPE = v;\n  }\n\n}, 16);\nAPI.v1.addRoute('teams.list', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        sort,\n        query\n      } = this.parseJsonQuery();\n      const {\n        records,\n        total\n      } = Promise.await(Team.list(this.userId, {\n        offset,\n        count\n      }, {\n        sort,\n        query\n      }));\n      return API.v1.success({\n        teams: records,\n        total,\n        count: records.length,\n        offset\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.listAll', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'view-all-teams')) {\n        return API.v1.unauthorized();\n      }\n\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        records,\n        total\n      } = Promise.await(Team.listAll({\n        offset,\n        count\n      }));\n      return API.v1.success({\n        teams: records,\n        total,\n        count: records.length,\n        offset\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.create', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'create-team')) {\n        return API.v1.unauthorized();\n      }\n\n      check(this.bodyParams, Match.ObjectIncluding({\n        name: String,\n        type: Match.OneOf(TEAM_TYPE.PRIVATE, TEAM_TYPE.PUBLIC),\n        members: Match.Maybe([String]),\n        room: Match.Maybe(Match.Any),\n        owner: Match.Maybe(String)\n      }));\n      const {\n        name,\n        type,\n        members,\n        room,\n        owner\n      } = this.bodyParams;\n      const team = Promise.await(Team.create(this.userId, {\n        team: {\n          name,\n          type\n        },\n        room,\n        members,\n        owner\n      }));\n      return API.v1.success({\n        team\n      });\n    });\n  }\n\n});\n\nconst getTeamByIdOrName = params => Promise.asyncApply(() => {\n  if ('teamId' in params && params.teamId) {\n    return Team.getOneById(params.teamId);\n  }\n\n  if ('teamName' in params && params.teamName) {\n    return Team.getOneByName(params.teamName);\n  }\n\n  return null;\n});\n\nAPI.v1.addRoute('teams.convertToChannel', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsConvertToChannelProps(this.bodyParams)) {\n        var _isTeamsConvertToChan;\n\n        return API.v1.failure('invalid-body-params', (_isTeamsConvertToChan = isTeamsConvertToChannelProps.errors) === null || _isTeamsConvertToChan === void 0 ? void 0 : _isTeamsConvertToChan.map(e => e.message).join('\\n '));\n      }\n\n      const {\n        roomsToRemove = []\n      } = this.bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'convert-team', team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      const rooms = Promise.await(Team.getMatchingTeamRooms(team._id, roomsToRemove));\n\n      if (rooms.length) {\n        rooms.forEach(room => {\n          Meteor.call('eraseRoom', room);\n        });\n      }\n\n      Promise.await(Promise.all([Team.unsetTeamIdOfRooms(team._id), Team.removeAllMembersFromTeam(team._id), Team.deleteById(team._id)]));\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.addRooms', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.bodyParams, Match.OneOf(Match.ObjectIncluding({\n        teamId: String\n      }), Match.ObjectIncluding({\n        teamName: String\n      })));\n      check(this.bodyParams, Match.ObjectIncluding({\n        rooms: [String]\n      }));\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'add-team-channel', team.roomId)) {\n        return API.v1.unauthorized('error-no-permission-team-channel');\n      }\n\n      const {\n        rooms\n      } = this.bodyParams;\n      const validRooms = Promise.await(Team.addRooms(this.userId, rooms, team._id));\n      return API.v1.success({\n        rooms: validRooms\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.removeRoom', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsRemoveRoomProps(this.bodyParams)) {\n        var _isTeamsRemoveRoomPro;\n\n        return API.v1.failure('body-params-invalid', (_isTeamsRemoveRoomPro = isTeamsRemoveRoomProps.errors) === null || _isTeamsRemoveRoomPro === void 0 ? void 0 : _isTeamsRemoveRoomPro.map(error => error.message).join('\\n '));\n      }\n\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'remove-team-channel', team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      const canRemoveAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n      const {\n        roomId\n      } = this.bodyParams;\n      const room = Promise.await(Team.removeRoom(this.userId, roomId, team._id, canRemoveAny));\n      return API.v1.success({\n        room\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.updateRoom', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.bodyParams, Match.ObjectIncluding({\n        roomId: String,\n        isDefault: Boolean\n      }));\n      const {\n        roomId,\n        isDefault\n      } = this.bodyParams;\n      const team = Promise.await(Team.getOneByRoomId(roomId));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'edit-team-channel', team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      const canUpdateAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n      const room = Promise.await(Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny));\n      return API.v1.success({\n        room\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.listRooms', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n        teamId: String\n      }), Match.ObjectIncluding({\n        teamName: String\n      })));\n      check(this.queryParams, Match.ObjectIncluding({\n        filter: Match.Maybe(String),\n        type: Match.Maybe(String)\n      }));\n      const {\n        filter,\n        type\n      } = this.queryParams;\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const team = Promise.await(getTeamByIdOrName(this.queryParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      const allowPrivateTeam = hasPermission(this.userId, 'view-all-teams', team.roomId);\n      let getAllRooms = false;\n\n      if (hasPermission(this.userId, 'view-all-team-channels', team.roomId)) {\n        getAllRooms = true;\n      }\n\n      const listFilter = {\n        name: filter !== null && filter !== void 0 ? filter : undefined,\n        isDefault: type === 'autoJoin',\n        getAllRooms,\n        allowPrivateTeam\n      };\n      const {\n        records,\n        total\n      } = Promise.await(Team.listRooms(this.userId, team._id, listFilter, {\n        offset,\n        count\n      }));\n      return API.v1.success({\n        rooms: records,\n        total,\n        count: records.length,\n        offset\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.listRoomsOfUser', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n        teamId: String\n      }), Match.ObjectIncluding({\n        teamName: String\n      })));\n      check(this.queryParams, Match.ObjectIncluding({\n        userId: String,\n        canUserDelete: Match.Maybe(Boolean)\n      }));\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const team = Promise.await(getTeamByIdOrName(this.queryParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      const allowPrivateTeam = hasPermission(this.userId, 'view-all-teams', team.roomId);\n      const {\n        userId,\n        canUserDelete\n      } = this.queryParams;\n\n      if (!(this.userId === userId || hasPermission(this.userId, 'view-all-team-channels', team.roomId))) {\n        return API.v1.unauthorized();\n      }\n\n      const {\n        records,\n        total\n      } = Promise.await(Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, canUserDelete !== null && canUserDelete !== void 0 ? canUserDelete : false, {\n        offset,\n        count\n      }));\n      return API.v1.success({\n        rooms: records,\n        total,\n        count: records.length,\n        offset: 0\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.members', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n        teamId: String\n      }), Match.ObjectIncluding({\n        teamName: String\n      })));\n      check(this.queryParams, Match.ObjectIncluding({\n        status: Match.Maybe([String]),\n        username: Match.Maybe(String),\n        name: Match.Maybe(String)\n      }));\n      const {\n        status,\n        username,\n        name\n      } = this.queryParams;\n      const team = Promise.await(getTeamByIdOrName(this.queryParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      const canSeeAllMembers = hasPermission(this.userId, 'view-all-teams', team.roomId);\n      const query = {\n        username: username ? new RegExp(escapeRegExp(username), 'i') : undefined,\n        name: name ? new RegExp(escapeRegExp(name), 'i') : undefined,\n        status: status ? {\n          $in: status\n        } : undefined\n      };\n      const {\n        records,\n        total\n      } = Promise.await(Team.members(this.userId, team._id, canSeeAllMembers, {\n        offset,\n        count\n      }, query));\n      return API.v1.success({\n        members: records,\n        total,\n        count: records.length,\n        offset\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.addMembers', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsAddMembersProps(this.bodyParams)) {\n        return API.v1.failure('invalid-params');\n      }\n\n      const {\n        bodyParams\n      } = this;\n      const {\n        members\n      } = bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasAtLeastOnePermission(this.userId, ['add-team-member', 'edit-team-member'], team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      Promise.await(Team.addMembers(this.userId, team._id, members));\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.updateMember', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsUpdateMemberProps(this.bodyParams)) {\n        var _isTeamsUpdateMemberP;\n\n        return API.v1.failure('invalid-params', (_isTeamsUpdateMemberP = isTeamsUpdateMemberProps.errors) === null || _isTeamsUpdateMemberP === void 0 ? void 0 : _isTeamsUpdateMemberP.map(e => e.message).join('\\n '));\n      }\n\n      const {\n        bodyParams\n      } = this;\n      const {\n        member\n      } = bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      Promise.await(Team.updateMember(team._id, member));\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.removeMember', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsRemoveMemberProps(this.bodyParams)) {\n        var _isTeamsRemoveMemberP;\n\n        return API.v1.failure('invalid-params', (_isTeamsRemoveMemberP = isTeamsRemoveMemberProps.errors) === null || _isTeamsRemoveMemberP === void 0 ? void 0 : _isTeamsRemoveMemberP.map(e => e.message).join('\\n '));\n      }\n\n      const {\n        bodyParams\n      } = this;\n      const {\n        userId,\n        rooms\n      } = bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      const user = Users.findOneActiveById(userId, {});\n\n      if (!user) {\n        return API.v1.failure('invalid-user');\n      }\n\n      if (!Promise.await(Team.removeMembers(this.userId, team._id, [{\n        userId\n      }]))) {\n        return API.v1.failure();\n      }\n\n      if (rooms !== null && rooms !== void 0 && rooms.length) {\n        const roomsFromTeam = Promise.await(Team.getMatchingTeamRooms(team._id, rooms));\n        roomsFromTeam.forEach(rid => {\n          removeUserFromRoom(rid, user, {\n            byUser: this.user\n          });\n        });\n      }\n\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.leave', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsLeaveProps(this.bodyParams)) {\n        var _isTeamsLeaveProps$er;\n\n        return API.v1.failure('invalid-params', (_isTeamsLeaveProps$er = isTeamsLeaveProps.errors) === null || _isTeamsLeaveProps$er === void 0 ? void 0 : _isTeamsLeaveProps$er.map(e => e.message).join('\\n '));\n      }\n\n      const {\n        rooms = []\n      } = this.bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      Promise.await(Team.removeMembers(this.userId, team._id, [{\n        userId: this.userId\n      }]));\n\n      if (rooms.length) {\n        const roomsFromTeam = Promise.await(Team.getMatchingTeamRooms(team._id, rooms));\n        roomsFromTeam.forEach(rid => {\n          removeUserFromRoom(rid, this.user);\n        });\n      }\n\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.info', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n        teamId: String\n      }), Match.ObjectIncluding({\n        teamName: String\n      })));\n      const teamInfo = Promise.await(getTeamByIdOrName(this.queryParams));\n\n      if (!teamInfo) {\n        return API.v1.failure('Team not found');\n      }\n\n      return API.v1.success({\n        teamInfo\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.delete', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      const {\n        roomsToRemove = []\n      } = this.bodyParams;\n\n      if (!isTeamsDeleteProps(this.bodyParams)) {\n        var _isTeamsDeleteProps$e;\n\n        return API.v1.failure('invalid-params', (_isTeamsDeleteProps$e = isTeamsDeleteProps.errors) === null || _isTeamsDeleteProps$e === void 0 ? void 0 : _isTeamsDeleteProps$e.map(e => e.message).join('\\n '));\n      }\n\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'delete-team', team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      const rooms = Promise.await(Team.getMatchingTeamRooms(team._id, roomsToRemove)); // Remove the team's main room\n\n      Meteor.call('eraseRoom', team.roomId); // If we got a list of rooms to delete along with the team, remove them first\n\n      if (rooms.length) {\n        rooms.forEach(room => {\n          Meteor.call('eraseRoom', room);\n        });\n      } // Move every other room back to the workspace\n\n\n      Promise.await(Team.unsetTeamIdOfRooms(team._id)); // Delete all team memberships\n\n      Team.removeAllMembersFromTeam(team._id); // And finally delete the team itself\n\n      Promise.await(Team.deleteById(team._id));\n      return API.v1.success();\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.autocomplete', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.ObjectIncluding({\n        name: String\n      }));\n      const {\n        name\n      } = this.queryParams;\n      const teams = Promise.await(Team.autocomplete(this.userId, name));\n      return API.v1.success({\n        teams\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('teams.update', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      if (!isTeamsUpdateProps(this.bodyParams)) {\n        var _isTeamsUpdateProps$e;\n\n        return API.v1.failure('invalid-params', (_isTeamsUpdateProps$e = isTeamsUpdateProps.errors) === null || _isTeamsUpdateProps$e === void 0 ? void 0 : _isTeamsUpdateProps$e.map(e => e.message).join('\\n '));\n      }\n\n      const {\n        data\n      } = this.bodyParams;\n      const team = Promise.await(getTeamByIdOrName(this.bodyParams));\n\n      if (!team) {\n        return API.v1.failure('team-does-not-exist');\n      }\n\n      if (!hasPermission(this.userId, 'edit-team', team.roomId)) {\n        return API.v1.unauthorized();\n      }\n\n      Promise.await(Team.update(this.userId, team._id, data));\n      return API.v1.success();\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/teams.ts"],"names":[],"mappings":"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","sourcesContent":["import { FilterQuery } from 'mongodb';\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { API } from '../api';\nimport { Team } from '../../../../server/sdk';\nimport { hasAtLeastOnePermission, hasPermission } from '../../../authorization/server';\nimport { Users } from '../../../models/server';\nimport { removeUserFromRoom } from '../../../lib/server/functions/removeUserFromRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { isTeamsConvertToChannelProps } from '../../../../definition/rest/v1/teams/TeamsConvertToChannelProps';\nimport { isTeamsRemoveRoomProps } from '../../../../definition/rest/v1/teams/TeamsRemoveRoomProps';\nimport { isTeamsUpdateMemberProps } from '../../../../definition/rest/v1/teams/TeamsUpdateMemberProps';\nimport { isTeamsRemoveMemberProps } from '../../../../definition/rest/v1/teams/TeamsRemoveMemberProps';\nimport { isTeamsAddMembersProps } from '../../../../definition/rest/v1/teams/TeamsAddMembersProps';\nimport { isTeamsDeleteProps } from '../../../../definition/rest/v1/teams/TeamsDeleteProps';\nimport { isTeamsLeaveProps } from '../../../../definition/rest/v1/teams/TeamsLeaveProps';\nimport { isTeamsUpdateProps } from '../../../../definition/rest/v1/teams/TeamsUpdateProps';\nimport { ITeam, TEAM_TYPE } from '../../../../definition/ITeam';\n\nAPI.v1.addRoute(\n\t'teams.list',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, query } = this.parseJsonQuery();\n\n\t\t\tconst { records, total } = await Team.list(this.userId, { offset, count }, { sort, query });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listAll',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (!hasPermission(this.userId, 'view-all-teams')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst { records, total } = await Team.listAll({ offset, count });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!hasPermission(this.userId, 'create-team')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tname: String,\n\t\t\t\t\ttype: Match.OneOf(TEAM_TYPE.PRIVATE, TEAM_TYPE.PUBLIC),\n\t\t\t\t\tmembers: Match.Maybe([String]),\n\t\t\t\t\troom: Match.Maybe(Match.Any),\n\t\t\t\t\towner: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { name, type, members, room, owner } = this.bodyParams;\n\n\t\t\tconst team = await Team.create(this.userId, {\n\t\t\t\tteam: {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\tmembers,\n\t\t\t\towner,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n\nconst getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\n\tif ('teamId' in params && params.teamId) {\n\t\treturn Team.getOneById<ITeam>(params.teamId);\n\t}\n\n\tif ('teamName' in params && params.teamName) {\n\t\treturn Team.getOneByName(params.teamName);\n\t}\n\n\treturn null;\n};\n\nAPI.v1.addRoute(\n\t'teams.convertToChannel',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsConvertToChannelProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-body-params', isTeamsConvertToChannelProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'convert-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst rooms = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\tif (rooms.length) {\n\t\t\t\trooms.forEach((room) => {\n\t\t\t\t\tMeteor.call('eraseRoom', room);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tawait Promise.all([Team.unsetTeamIdOfRooms(team._id), Team.removeAllMembersFromTeam(team._id), Team.deleteById(team._id)]);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.addRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\trooms: [String],\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'add-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized('error-no-permission-team-channel');\n\t\t\t}\n\n\t\t\tconst { rooms } = this.bodyParams;\n\n\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\n\t\t\treturn API.v1.success({ rooms: validRooms });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.removeRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsRemoveRoomProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('body-params-invalid', isTeamsRemoveRoomProps.errors?.map((error) => error.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'remove-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst canRemoveAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tconst room = await Team.removeRoom(this.userId, roomId, team._id, canRemoveAny);\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.updateRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\troomId: String,\n\t\t\t\t\tisDefault: Boolean,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { roomId, isDefault } = this.bodyParams;\n\n\t\t\tconst team = await Team.getOneByRoomId(roomId);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'edit-team-channel', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst canUpdateAny = !!hasPermission(this.userId, 'view-all-team-channels', team.roomId);\n\n\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t\ttype: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { filter, type } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst allowPrivateTeam: boolean = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tlet getAllRooms = false;\n\t\t\tif (hasPermission(this.userId, 'view-all-team-channels', team.roomId)) {\n\t\t\t\tgetAllRooms = true;\n\t\t\t}\n\n\t\t\tconst listFilter = {\n\t\t\t\tname: filter ?? undefined,\n\t\t\t\tisDefault: type === 'autoJoin',\n\t\t\t\tgetAllRooms,\n\t\t\t\tallowPrivateTeam,\n\t\t\t};\n\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRoomsOfUser',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tuserId: String,\n\t\t\t\t\tcanUserDelete: Match.Maybe(Boolean),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst allowPrivateTeam = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tconst { userId, canUserDelete } = this.queryParams;\n\n\t\t\tif (!(this.userId === userId || hasPermission(this.userId, 'view-all-team-channels', team.roomId))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, canUserDelete ?? false, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset: 0,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tname: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { status, username, name } = this.queryParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tconst canSeeAllMembers = hasPermission(this.userId, 'view-all-teams', team.roomId);\n\n\t\t\tconst query = {\n\t\t\t\tusername: username ? new RegExp(escapeRegExp(username), 'i') : undefined,\n\t\t\t\tname: name ? new RegExp(escapeRegExp(name), 'i') : undefined,\n\t\t\t\tstatus: status ? { $in: status } : undefined,\n\t\t\t} as FilterQuery<IUser>;\n\n\t\t\tconst { records, total } = await Team.members(this.userId, team._id, canSeeAllMembers, { offset, count }, query);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.addMembers',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsAddMembersProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params');\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { members } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['add-team-member', 'edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.addMembers(this.userId, team._id, members);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.updateMember',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsUpdateMemberProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsUpdateMemberProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { member } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.updateMember(team._id, member);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.removeMember',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsRemoveMemberProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsRemoveMemberProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { bodyParams } = this;\n\t\t\tconst { userId, rooms } = bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasAtLeastOnePermission(this.userId, ['edit-team-member'], team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst user = Users.findOneActiveById(userId, {});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('invalid-user');\n\t\t\t}\n\n\t\t\tif (!(await Team.removeMembers(this.userId, team._id, [{ userId }]))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tif (rooms?.length) {\n\t\t\t\tconst roomsFromTeam: string[] = await Team.getMatchingTeamRooms(team._id, rooms);\n\n\t\t\t\troomsFromTeam.forEach((rid) => {\n\t\t\t\t\tremoveUserFromRoom(rid, user, {\n\t\t\t\t\t\tbyUser: this.user,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsLeaveProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsLeaveProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { rooms = [] } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tawait Team.removeMembers(this.userId, team._id, [\n\t\t\t\t{\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tif (rooms.length) {\n\t\t\t\tconst roomsFromTeam: string[] = await Team.getMatchingTeamRooms(team._id, rooms);\n\n\t\t\t\troomsFromTeam.forEach((rid) => {\n\t\t\t\t\tremoveUserFromRoom(rid, this.user);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tteamName: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst teamInfo = await getTeamByIdOrName(this.queryParams);\n\t\t\tif (!teamInfo) {\n\t\t\t\treturn API.v1.failure('Team not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ teamInfo });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\n\t\t\tif (!isTeamsDeleteProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsDeleteProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'delete-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\t// Remove the team's main room\n\t\t\tMeteor.call('eraseRoom', team.roomId);\n\n\t\t\t// If we got a list of rooms to delete along with the team, remove them first\n\t\t\tif (rooms.length) {\n\t\t\t\trooms.forEach((room) => {\n\t\t\t\t\tMeteor.call('eraseRoom', room);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Move every other room back to the workspace\n\t\t\tawait Team.unsetTeamIdOfRooms(team._id);\n\n\t\t\t// Delete all team memberships\n\t\t\tTeam.removeAllMembersFromTeam(team._id);\n\n\t\t\t// And finally delete the team itself\n\t\t\tawait Team.deleteById(team._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.autocomplete',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tname: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\n\t\t\treturn API.v1.success({ teams });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.update',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!isTeamsUpdateProps(this.bodyParams)) {\n\t\t\t\treturn API.v1.failure('invalid-params', isTeamsUpdateProps.errors?.map((e) => e.message).join('\\n '));\n\t\t\t}\n\n\t\t\tconst { data } = this.bodyParams;\n\n\t\t\tconst team = await getTeamByIdOrName(this.bodyParams);\n\t\t\tif (!team) {\n\t\t\t\treturn API.v1.failure('team-does-not-exist');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'edit-team', team.roomId)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tawait Team.update(this.userId, team._id, data);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"1c6aa18095db3c9785cbd91b748dec70f2782dd5"}
