{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/meteor/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/meteor/service.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/meteor/service.ts","inputSourceMap":{"version":3,"file":"server/services/meteor/service.ts","sourceRoot":"","sources":["server/services/meteor/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport { UserPresenceMonitor, UserPresence } from 'meteor/konecty:user-presence';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { metrics } from '../../../app/metrics';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { IMeteor, AutoUpdateRecord } from '../../sdk/types/IMeteor';\nimport { api } from '../../sdk/api';\nimport { Users } from '../../../app/models/server/raw/index';\nimport { Livechat } from '../../../app/livechat/server';\nimport { settings } from '../../../app/settings/server/functions/settings';\nimport { setValue, updateValue } from '../../../app/settings/server/raw';\nimport { IRoutingManagerConfig } from '../../../definition/IRoutingManagerConfig';\nimport { RoutingManager } from '../../../app/livechat/server/lib/RoutingManager';\nimport { onlineAgents, monitorAgents } from '../../../app/livechat/server/lib/stream/agentStatus';\nimport { IUser } from '../../../definition/IUser';\nimport { matrixBroadCastActions } from '../../stream/streamBroadcast';\nimport { triggerHandler } from '../../../app/integrations/server/lib/triggerHandler';\nimport { ListenersModule, minimongoChangeMap } from '../../modules/listeners/listeners.module';\nimport notifications from '../../../app/notifications/server/lib/Notifications';\nimport { configureEmailInboxes } from '../../features/EmailInbox/EmailInbox';\nimport { isPresenceMonitorEnabled } from '../../lib/isPresenceMonitorEnabled';\nimport { use } from '../../../app/settings/server/Middleware';\n\nconst autoUpdateRecords = new Map<string, AutoUpdateRecord>();\n\nMeteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n\tadded(_collection: string, id: string, version: AutoUpdateRecord) {\n\t\tautoUpdateRecords.set(id, version);\n\t},\n\tchanged(_collection: string, id: string, version: AutoUpdateRecord) {\n\t\tautoUpdateRecords.set(id, version);\n\t\tapi.broadcast('meteor.autoUpdateClientVersionChanged', { record: version });\n\t},\n\tonStop() {\n\t\t//\n\t},\n\tready() {\n\t\t//\n\t},\n});\n\ntype Callbacks = {\n\tadded(id: string, record: object): void;\n\tchanged(id: string, record: object): void;\n\tremoved(id: string): void;\n};\n\nlet processOnChange: (diff: Record<string, any>, id: string) => void;\n// eslint-disable-next-line no-undef\nconst disableOplog = !!(Package as any)['disable-oplog'];\nconst serviceConfigCallbacks = new Set<Callbacks>();\n\nif (disableOplog) {\n\t// Stores the callbacks for the disconnection reactivity bellow\n\tconst userCallbacks = new Map();\n\n\t// Overrides the native observe changes to prevent database polling and stores the callbacks\n\t// for the users' tokens to re-implement the reactivity based on our database listeners\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tMongoInternals.Connection.prototype._observeChanges = function (\n\t\t{\n\t\t\tcollectionName,\n\t\t\tselector,\n\t\t\toptions = {},\n\t\t}: {\n\t\t\tcollectionName: string;\n\t\t\tselector: Record<string, any>;\n\t\t\toptions?: { fields?: Record<string, number> };\n\t\t},\n\t\t_ordered: boolean,\n\t\tcallbacks: Callbacks,\n\t): any {\n\t\t// console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n\t\tlet cbs: Set<{ hashedToken: string; callbacks: Callbacks }>;\n\t\tlet data: { hashedToken: string; callbacks: Callbacks };\n\t\tif (callbacks?.added) {\n\t\t\tconst records = Promise.await(mongo.rawCollection(collectionName).find(selector, { projection: options.fields }).toArray());\n\t\t\tfor (const { _id, ...fields } of records) {\n\t\t\t\tcallbacks.added(_id, fields);\n\t\t\t}\n\n\t\t\tif (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n\t\t\t\tcbs = userCallbacks.get(selector._id) || new Set();\n\t\t\t\tdata = {\n\t\t\t\t\thashedToken: selector['services.resume.loginTokens.hashedToken'],\n\t\t\t\t\tcallbacks,\n\t\t\t\t};\n\n\t\t\t\tcbs.add(data);\n\t\t\t\tuserCallbacks.set(selector._id, cbs);\n\t\t\t}\n\t\t}\n\n\t\tif (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n\t\t\tserviceConfigCallbacks.add(callbacks);\n\t\t}\n\n\t\treturn {\n\t\t\tstop(): void {\n\t\t\t\tif (cbs) {\n\t\t\t\t\tcbs.delete(data);\n\t\t\t\t}\n\t\t\t\tserviceConfigCallbacks.delete(callbacks);\n\t\t\t},\n\t\t};\n\t};\n\n\t// Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n\t// associated was removed\n\tprocessOnChange = (diff: Record<string, any>, id: string): void => {\n\t\tconst loginTokens: undefined | { hashedToken: string }[] = diff['services.resume.loginTokens'];\n\t\tif (loginTokens) {\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }) => hashedToken);\n\n\t\t\tconst cbs = userCallbacks.get(id);\n\t\t\tif (cbs) {\n\t\t\t\t[...cbs]\n\t\t\t\t\t.filter(({ hashedToken }) => !tokens.includes(hashedToken))\n\t\t\t\t\t.forEach((item) => {\n\t\t\t\t\t\titem.callbacks.removed(id);\n\t\t\t\t\t\tcbs.delete(item);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n\nsettings.set = use(settings.set, (context, next) => {\n\tnext(...context);\n\tconst [record] = context;\n\tupdateValue(record._id, record);\n});\n\nexport class MeteorService extends ServiceClass implements IMeteor {\n\tprotected name = 'meteor';\n\n\tprotected internal = true;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tnew ListenersModule(this, notifications);\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tsettings.set(setting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettings.set({ ...setting, value: undefined });\n\t\t\tsetValue(setting._id, undefined);\n\t\t});\n\n\t\t// TODO: May need to merge with https://github.com/RocketChat/Rocket.Chat/blob/0ddc2831baf8340cbbbc432f88fc2cb97be70e9b/ee/server/services/Presence/Presence.ts#L28\n\t\tif (isPresenceMonitorEnabled()) {\n\t\t\tthis.onEvent('watch.userSessions', async ({ clientAction, userSession }): Promise<void> => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tUserPresenceMonitor.processUserSession(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_id: userSession._id,\n\t\t\t\t\t\t\tconnections: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfake: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'removed',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tUserPresenceMonitor.processUserSession(userSession, minimongoChangeMap[clientAction]);\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.instanceStatus', async ({ clientAction, id, data }): Promise<void> => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tUserPresence.removeConnectionsByInstanceId(id);\n\t\t\t\tmatrixBroadCastActions?.removed?.(id);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clientAction === 'inserted') {\n\t\t\t\tif (data?.extraInformation?.port) {\n\t\t\t\t\tmatrixBroadCastActions?.added?.(data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (disableOplog) {\n\t\t\tthis.onEvent('watch.loginServiceConfiguration', ({ clientAction, id, data }) => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks.removed?.(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\tcallbacks[clientAction === 'inserted' ? 'added' : 'changed']?.(id, data);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.users', async ({ clientAction, id, diff }) => {\n\t\t\tif (disableOplog) {\n\t\t\t\tif (clientAction === 'updated' && diff) {\n\t\t\t\t\tprocessOnChange(diff, id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!monitorAgents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clientAction !== 'removed' && diff && !diff.status && !diff.statusLivechat) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tconst agent: IUser | undefined = await Users.findOneAgentById(id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tstatusLivechat: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n\t\t\t\t\tif (serviceOnline) {\n\t\t\t\t\t\treturn onlineAgents.add(id);\n\t\t\t\t\t}\n\n\t\t\t\t\tonlineAgents.remove(id);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tonlineAgents.remove(id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.integrations', async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updated':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.removeIntegration(data);\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\ttriggerHandler.removeIntegration({ _id: id });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.emailInbox', async () => {\n\t\t\tconfigureEmailInboxes();\n\t\t});\n\n\t\tif (!process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING) {\n\t\t\tthis.onEvent('watch.messages', ({ message }) => {\n\t\t\t\tif (message?._updatedAt) {\n\t\t\t\t\tmetrics.messageRoundtripTime.set(Date.now() - message._updatedAt.getDate());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasync getLastAutoUpdateClientVersions(): Promise<AutoUpdateRecord[]> {\n\t\treturn [...autoUpdateRecords.values()];\n\t}\n\n\tasync getLoginServiceConfiguration(): Promise<any[]> {\n\t\treturn ServiceConfiguration.configurations.find({}, { fields: { secret: 0 } }).fetch();\n\t}\n\n\tasync callMethodWithToken(userId: string, token: string, method: string, args: any[]): Promise<void | any> {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!user) {\n\t\t\treturn {\n\t\t\t\tresult: Meteor.call(method, ...args),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresult: Meteor.runAsUser(userId, () => Meteor.call(method, ...args)),\n\t\t};\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: string): Promise<void> {\n\t\treturn Livechat.notifyGuestStatusChanged(token, status);\n\t}\n\n\tgetRoutingManagerConfig(): IRoutingManagerConfig {\n\t\t// return false if called before routing method is set\n\t\t// this will cause that oplog events received on early stages of server startup\n\t\t// won't be fired (at least, inquiry events)\n\t\treturn RoutingManager.isMethodSet() && RoutingManager.getConfig();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/meteor/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/meteor/service.ts"}},"code":"!function (module1) {\n  let _objectSpread;\n\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n\n  }, 0);\n\n  let _objectWithoutProperties;\n\n  module1.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n    default(v) {\n      _objectWithoutProperties = v;\n    }\n\n  }, 1);\n  const _excluded = [\"_id\"];\n  module1.export({\n    MeteorService: () => MeteorService\n  });\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n\n  }, 0);\n  let ServiceConfiguration;\n  module1.link(\"meteor/service-configuration\", {\n    ServiceConfiguration(v) {\n      ServiceConfiguration = v;\n    }\n\n  }, 1);\n  let UserPresenceMonitor, UserPresence;\n  module1.link(\"meteor/konecty:user-presence\", {\n    UserPresenceMonitor(v) {\n      UserPresenceMonitor = v;\n    },\n\n    UserPresence(v) {\n      UserPresence = v;\n    }\n\n  }, 2);\n  let MongoInternals;\n  module1.link(\"meteor/mongo\", {\n    MongoInternals(v) {\n      MongoInternals = v;\n    }\n\n  }, 3);\n  let metrics;\n  module1.link(\"../../../app/metrics\", {\n    metrics(v) {\n      metrics = v;\n    }\n\n  }, 4);\n  let ServiceClass;\n  module1.link(\"../../sdk/types/ServiceClass\", {\n    ServiceClass(v) {\n      ServiceClass = v;\n    }\n\n  }, 5);\n  let api;\n  module1.link(\"../../sdk/api\", {\n    api(v) {\n      api = v;\n    }\n\n  }, 6);\n  let Users;\n  module1.link(\"../../../app/models/server/raw/index\", {\n    Users(v) {\n      Users = v;\n    }\n\n  }, 7);\n  let Livechat;\n  module1.link(\"../../../app/livechat/server\", {\n    Livechat(v) {\n      Livechat = v;\n    }\n\n  }, 8);\n  let settings;\n  module1.link(\"../../../app/settings/server/functions/settings\", {\n    settings(v) {\n      settings = v;\n    }\n\n  }, 9);\n  let setValue, updateValue;\n  module1.link(\"../../../app/settings/server/raw\", {\n    setValue(v) {\n      setValue = v;\n    },\n\n    updateValue(v) {\n      updateValue = v;\n    }\n\n  }, 10);\n  let RoutingManager;\n  module1.link(\"../../../app/livechat/server/lib/RoutingManager\", {\n    RoutingManager(v) {\n      RoutingManager = v;\n    }\n\n  }, 11);\n  let onlineAgents, monitorAgents;\n  module1.link(\"../../../app/livechat/server/lib/stream/agentStatus\", {\n    onlineAgents(v) {\n      onlineAgents = v;\n    },\n\n    monitorAgents(v) {\n      monitorAgents = v;\n    }\n\n  }, 12);\n  let matrixBroadCastActions;\n  module1.link(\"../../stream/streamBroadcast\", {\n    matrixBroadCastActions(v) {\n      matrixBroadCastActions = v;\n    }\n\n  }, 13);\n  let triggerHandler;\n  module1.link(\"../../../app/integrations/server/lib/triggerHandler\", {\n    triggerHandler(v) {\n      triggerHandler = v;\n    }\n\n  }, 14);\n  let ListenersModule, minimongoChangeMap;\n  module1.link(\"../../modules/listeners/listeners.module\", {\n    ListenersModule(v) {\n      ListenersModule = v;\n    },\n\n    minimongoChangeMap(v) {\n      minimongoChangeMap = v;\n    }\n\n  }, 15);\n  let notifications;\n  module1.link(\"../../../app/notifications/server/lib/Notifications\", {\n    default(v) {\n      notifications = v;\n    }\n\n  }, 16);\n  let configureEmailInboxes;\n  module1.link(\"../../features/EmailInbox/EmailInbox\", {\n    configureEmailInboxes(v) {\n      configureEmailInboxes = v;\n    }\n\n  }, 17);\n  let isPresenceMonitorEnabled;\n  module1.link(\"../../lib/isPresenceMonitorEnabled\", {\n    isPresenceMonitorEnabled(v) {\n      isPresenceMonitorEnabled = v;\n    }\n\n  }, 18);\n  let use;\n  module1.link(\"../../../app/settings/server/Middleware\", {\n    use(v) {\n      use = v;\n    }\n\n  }, 19);\n  const autoUpdateRecords = new Map();\n  Meteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n    added(_collection, id, version) {\n      autoUpdateRecords.set(id, version);\n    },\n\n    changed(_collection, id, version) {\n      autoUpdateRecords.set(id, version);\n      api.broadcast('meteor.autoUpdateClientVersionChanged', {\n        record: version\n      });\n    },\n\n    onStop() {//\n    },\n\n    ready() {//\n    }\n\n  });\n  let processOnChange; // eslint-disable-next-line no-undef\n\n  const disableOplog = !!Package['disable-oplog'];\n  const serviceConfigCallbacks = new Set();\n\n  if (disableOplog) {\n    // Stores the callbacks for the disconnection reactivity bellow\n    const userCallbacks = new Map(); // Overrides the native observe changes to prevent database polling and stores the callbacks\n    // for the users' tokens to re-implement the reactivity based on our database listeners\n\n    const {\n      mongo\n    } = MongoInternals.defaultRemoteCollectionDriver();\n\n    MongoInternals.Connection.prototype._observeChanges = function (_ref, _ordered, callbacks) {\n      let {\n        collectionName,\n        selector,\n        options = {}\n      } = _ref;\n      // console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n      let cbs;\n      let data;\n\n      if (callbacks !== null && callbacks !== void 0 && callbacks.added) {\n        const records = Promise.await(mongo.rawCollection(collectionName).find(selector, {\n          projection: options.fields\n        }).toArray());\n\n        for (const _ref2 of records) {\n          const {\n            _id\n          } = _ref2,\n                fields = _objectWithoutProperties(_ref2, _excluded);\n\n          callbacks.added(_id, fields);\n        }\n\n        if (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n          cbs = userCallbacks.get(selector._id) || new Set();\n          data = {\n            hashedToken: selector['services.resume.loginTokens.hashedToken'],\n            callbacks\n          };\n          cbs.add(data);\n          userCallbacks.set(selector._id, cbs);\n        }\n      }\n\n      if (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n        serviceConfigCallbacks.add(callbacks);\n      }\n\n      return {\n        stop() {\n          if (cbs) {\n            cbs.delete(data);\n          }\n\n          serviceConfigCallbacks.delete(callbacks);\n        }\n\n      };\n    }; // Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n    // associated was removed\n\n\n    processOnChange = (diff, id) => {\n      const loginTokens = diff['services.resume.loginTokens'];\n\n      if (loginTokens) {\n        const tokens = loginTokens.map(_ref3 => {\n          let {\n            hashedToken\n          } = _ref3;\n          return hashedToken;\n        });\n        const cbs = userCallbacks.get(id);\n\n        if (cbs) {\n          [...cbs].filter(_ref4 => {\n            let {\n              hashedToken\n            } = _ref4;\n            return !tokens.includes(hashedToken);\n          }).forEach(item => {\n            item.callbacks.removed(id);\n            cbs.delete(item);\n          });\n        }\n      }\n    };\n  }\n\n  settings.set = use(settings.set, (context, next) => {\n    next(...context);\n    const [record] = context;\n    updateValue(record._id, record);\n  });\n\n  class MeteorService extends ServiceClass {\n    constructor() {\n      super();\n      this.name = 'meteor';\n      this.internal = true;\n      new ListenersModule(this, notifications);\n      this.onEvent('watch.settings', _ref5 => Promise.asyncApply(() => {\n        let {\n          clientAction,\n          setting\n        } = _ref5;\n\n        if (clientAction !== 'removed') {\n          settings.set(setting);\n          return;\n        }\n\n        settings.set(_objectSpread(_objectSpread({}, setting), {}, {\n          value: undefined\n        }));\n        setValue(setting._id, undefined);\n      })); // TODO: May need to merge with https://github.com/RocketChat/Rocket.Chat/blob/0ddc2831baf8340cbbbc432f88fc2cb97be70e9b/ee/server/services/Presence/Presence.ts#L28\n\n      if (isPresenceMonitorEnabled()) {\n        this.onEvent('watch.userSessions', _ref6 => Promise.asyncApply(() => {\n          let {\n            clientAction,\n            userSession\n          } = _ref6;\n\n          if (clientAction === 'removed') {\n            UserPresenceMonitor.processUserSession({\n              _id: userSession._id,\n              connections: [{\n                fake: true\n              }]\n            }, 'removed');\n          }\n\n          UserPresenceMonitor.processUserSession(userSession, minimongoChangeMap[clientAction]);\n        }));\n      }\n\n      this.onEvent('watch.instanceStatus', _ref7 => Promise.asyncApply(() => {\n        let {\n          clientAction,\n          id,\n          data\n        } = _ref7;\n\n        if (clientAction === 'removed') {\n          var _matrixBroadCastActio, _matrixBroadCastActio2;\n\n          UserPresence.removeConnectionsByInstanceId(id);\n          (_matrixBroadCastActio = matrixBroadCastActions) === null || _matrixBroadCastActio === void 0 ? void 0 : (_matrixBroadCastActio2 = _matrixBroadCastActio.removed) === null || _matrixBroadCastActio2 === void 0 ? void 0 : _matrixBroadCastActio2.call(_matrixBroadCastActio, id);\n          return;\n        }\n\n        if (clientAction === 'inserted') {\n          var _data$extraInformatio;\n\n          if (data !== null && data !== void 0 && (_data$extraInformatio = data.extraInformation) !== null && _data$extraInformatio !== void 0 && _data$extraInformatio.port) {\n            var _matrixBroadCastActio3, _matrixBroadCastActio4;\n\n            (_matrixBroadCastActio3 = matrixBroadCastActions) === null || _matrixBroadCastActio3 === void 0 ? void 0 : (_matrixBroadCastActio4 = _matrixBroadCastActio3.added) === null || _matrixBroadCastActio4 === void 0 ? void 0 : _matrixBroadCastActio4.call(_matrixBroadCastActio3, data);\n          }\n        }\n      }));\n\n      if (disableOplog) {\n        this.onEvent('watch.loginServiceConfiguration', _ref8 => {\n          let {\n            clientAction,\n            id,\n            data\n          } = _ref8;\n\n          if (clientAction === 'removed') {\n            serviceConfigCallbacks.forEach(callbacks => {\n              var _callbacks$removed;\n\n              (_callbacks$removed = callbacks.removed) === null || _callbacks$removed === void 0 ? void 0 : _callbacks$removed.call(callbacks, id);\n            });\n            return;\n          }\n\n          serviceConfigCallbacks.forEach(callbacks => {\n            var _callbacks;\n\n            (_callbacks = callbacks[clientAction === 'inserted' ? 'added' : 'changed']) === null || _callbacks === void 0 ? void 0 : _callbacks.call(callbacks, id, data);\n          });\n        });\n      }\n\n      this.onEvent('watch.users', _ref9 => Promise.asyncApply(() => {\n        let {\n          clientAction,\n          id,\n          diff\n        } = _ref9;\n\n        if (disableOplog) {\n          if (clientAction === 'updated' && diff) {\n            processOnChange(diff, id);\n          }\n        }\n\n        if (!monitorAgents) {\n          return;\n        }\n\n        if (clientAction !== 'removed' && diff && !diff.status && !diff.statusLivechat) {\n          return;\n        }\n\n        switch (clientAction) {\n          case 'updated':\n          case 'inserted':\n            const agent = Promise.await(Users.findOneAgentById(id, {\n              projection: {\n                status: 1,\n                statusLivechat: 1\n              }\n            }));\n            const serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n            if (serviceOnline) {\n              return onlineAgents.add(id);\n            }\n\n            onlineAgents.remove(id);\n            break;\n\n          case 'removed':\n            onlineAgents.remove(id);\n            break;\n        }\n      }));\n      this.onEvent('watch.integrations', _ref10 => Promise.asyncApply(() => {\n        let {\n          clientAction,\n          id,\n          data\n        } = _ref10;\n\n        switch (clientAction) {\n          case 'inserted':\n            if (data.type === 'webhook-outgoing') {\n              triggerHandler.addIntegration(data);\n            }\n\n            break;\n\n          case 'updated':\n            if (data.type === 'webhook-outgoing') {\n              triggerHandler.removeIntegration(data);\n              triggerHandler.addIntegration(data);\n            }\n\n            break;\n\n          case 'removed':\n            triggerHandler.removeIntegration({\n              _id: id\n            });\n            break;\n        }\n      }));\n      this.onEvent('watch.emailInbox', () => Promise.asyncApply(() => {\n        configureEmailInboxes();\n      }));\n\n      if (!process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING) {\n        this.onEvent('watch.messages', _ref11 => {\n          let {\n            message\n          } = _ref11;\n\n          if (message !== null && message !== void 0 && message._updatedAt) {\n            metrics.messageRoundtripTime.set(Date.now() - message._updatedAt.getDate());\n          }\n        });\n      }\n    }\n\n    getLastAutoUpdateClientVersions() {\n      return Promise.asyncApply(() => {\n        return [...autoUpdateRecords.values()];\n      });\n    }\n\n    getLoginServiceConfiguration() {\n      return Promise.asyncApply(() => {\n        return ServiceConfiguration.configurations.find({}, {\n          fields: {\n            secret: 0\n          }\n        }).fetch();\n      });\n    }\n\n    callMethodWithToken(userId, token, method, args) {\n      return Promise.asyncApply(() => {\n        const user = Promise.await(Users.findOneByIdAndLoginHashedToken(userId, token, {\n          projection: {\n            _id: 1\n          }\n        }));\n\n        if (!user) {\n          return {\n            result: Meteor.call(method, ...args)\n          };\n        }\n\n        return {\n          result: Meteor.runAsUser(userId, () => Meteor.call(method, ...args))\n        };\n      });\n    }\n\n    notifyGuestStatusChanged(token, status) {\n      return Promise.asyncApply(() => {\n        return Livechat.notifyGuestStatusChanged(token, status);\n      });\n    }\n\n    getRoutingManagerConfig() {\n      // return false if called before routing method is set\n      // this will cause that oplog events received on early stages of server startup\n      // won't be fired (at least, inquiry events)\n      return RoutingManager.isMethodSet() && RoutingManager.getConfig();\n    }\n\n  }\n}.call(this, module);","map":{"version":3,"sources":["server/services/meteor/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport { UserPresenceMonitor, UserPresence } from 'meteor/konecty:user-presence';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { metrics } from '../../../app/metrics';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { IMeteor, AutoUpdateRecord } from '../../sdk/types/IMeteor';\nimport { api } from '../../sdk/api';\nimport { Users } from '../../../app/models/server/raw/index';\nimport { Livechat } from '../../../app/livechat/server';\nimport { settings } from '../../../app/settings/server/functions/settings';\nimport { setValue, updateValue } from '../../../app/settings/server/raw';\nimport { IRoutingManagerConfig } from '../../../definition/IRoutingManagerConfig';\nimport { RoutingManager } from '../../../app/livechat/server/lib/RoutingManager';\nimport { onlineAgents, monitorAgents } from '../../../app/livechat/server/lib/stream/agentStatus';\nimport { IUser } from '../../../definition/IUser';\nimport { matrixBroadCastActions } from '../../stream/streamBroadcast';\nimport { triggerHandler } from '../../../app/integrations/server/lib/triggerHandler';\nimport { ListenersModule, minimongoChangeMap } from '../../modules/listeners/listeners.module';\nimport notifications from '../../../app/notifications/server/lib/Notifications';\nimport { configureEmailInboxes } from '../../features/EmailInbox/EmailInbox';\nimport { isPresenceMonitorEnabled } from '../../lib/isPresenceMonitorEnabled';\nimport { use } from '../../../app/settings/server/Middleware';\n\nconst autoUpdateRecords = new Map<string, AutoUpdateRecord>();\n\nMeteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n\tadded(_collection: string, id: string, version: AutoUpdateRecord) {\n\t\tautoUpdateRecords.set(id, version);\n\t},\n\tchanged(_collection: string, id: string, version: AutoUpdateRecord) {\n\t\tautoUpdateRecords.set(id, version);\n\t\tapi.broadcast('meteor.autoUpdateClientVersionChanged', { record: version });\n\t},\n\tonStop() {\n\t\t//\n\t},\n\tready() {\n\t\t//\n\t},\n});\n\ntype Callbacks = {\n\tadded(id: string, record: object): void;\n\tchanged(id: string, record: object): void;\n\tremoved(id: string): void;\n};\n\nlet processOnChange: (diff: Record<string, any>, id: string) => void;\n// eslint-disable-next-line no-undef\nconst disableOplog = !!(Package as any)['disable-oplog'];\nconst serviceConfigCallbacks = new Set<Callbacks>();\n\nif (disableOplog) {\n\t// Stores the callbacks for the disconnection reactivity bellow\n\tconst userCallbacks = new Map();\n\n\t// Overrides the native observe changes to prevent database polling and stores the callbacks\n\t// for the users' tokens to re-implement the reactivity based on our database listeners\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tMongoInternals.Connection.prototype._observeChanges = function (\n\t\t{\n\t\t\tcollectionName,\n\t\t\tselector,\n\t\t\toptions = {},\n\t\t}: {\n\t\t\tcollectionName: string;\n\t\t\tselector: Record<string, any>;\n\t\t\toptions?: { fields?: Record<string, number> };\n\t\t},\n\t\t_ordered: boolean,\n\t\tcallbacks: Callbacks,\n\t): any {\n\t\t// console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n\t\tlet cbs: Set<{ hashedToken: string; callbacks: Callbacks }>;\n\t\tlet data: { hashedToken: string; callbacks: Callbacks };\n\t\tif (callbacks?.added) {\n\t\t\tconst records = Promise.await(mongo.rawCollection(collectionName).find(selector, { projection: options.fields }).toArray());\n\t\t\tfor (const { _id, ...fields } of records) {\n\t\t\t\tcallbacks.added(_id, fields);\n\t\t\t}\n\n\t\t\tif (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n\t\t\t\tcbs = userCallbacks.get(selector._id) || new Set();\n\t\t\t\tdata = {\n\t\t\t\t\thashedToken: selector['services.resume.loginTokens.hashedToken'],\n\t\t\t\t\tcallbacks,\n\t\t\t\t};\n\n\t\t\t\tcbs.add(data);\n\t\t\t\tuserCallbacks.set(selector._id, cbs);\n\t\t\t}\n\t\t}\n\n\t\tif (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n\t\t\tserviceConfigCallbacks.add(callbacks);\n\t\t}\n\n\t\treturn {\n\t\t\tstop(): void {\n\t\t\t\tif (cbs) {\n\t\t\t\t\tcbs.delete(data);\n\t\t\t\t}\n\t\t\t\tserviceConfigCallbacks.delete(callbacks);\n\t\t\t},\n\t\t};\n\t};\n\n\t// Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n\t// associated was removed\n\tprocessOnChange = (diff: Record<string, any>, id: string): void => {\n\t\tconst loginTokens: undefined | { hashedToken: string }[] = diff['services.resume.loginTokens'];\n\t\tif (loginTokens) {\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }) => hashedToken);\n\n\t\t\tconst cbs = userCallbacks.get(id);\n\t\t\tif (cbs) {\n\t\t\t\t[...cbs]\n\t\t\t\t\t.filter(({ hashedToken }) => !tokens.includes(hashedToken))\n\t\t\t\t\t.forEach((item) => {\n\t\t\t\t\t\titem.callbacks.removed(id);\n\t\t\t\t\t\tcbs.delete(item);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n\nsettings.set = use(settings.set, (context, next) => {\n\tnext(...context);\n\tconst [record] = context;\n\tupdateValue(record._id, record);\n});\n\nexport class MeteorService extends ServiceClass implements IMeteor {\n\tprotected name = 'meteor';\n\n\tprotected internal = true;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tnew ListenersModule(this, notifications);\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tsettings.set(setting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettings.set({ ...setting, value: undefined });\n\t\t\tsetValue(setting._id, undefined);\n\t\t});\n\n\t\t// TODO: May need to merge with https://github.com/RocketChat/Rocket.Chat/blob/0ddc2831baf8340cbbbc432f88fc2cb97be70e9b/ee/server/services/Presence/Presence.ts#L28\n\t\tif (isPresenceMonitorEnabled()) {\n\t\t\tthis.onEvent('watch.userSessions', async ({ clientAction, userSession }): Promise<void> => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tUserPresenceMonitor.processUserSession(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_id: userSession._id,\n\t\t\t\t\t\t\tconnections: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfake: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'removed',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tUserPresenceMonitor.processUserSession(userSession, minimongoChangeMap[clientAction]);\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.instanceStatus', async ({ clientAction, id, data }): Promise<void> => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tUserPresence.removeConnectionsByInstanceId(id);\n\t\t\t\tmatrixBroadCastActions?.removed?.(id);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clientAction === 'inserted') {\n\t\t\t\tif (data?.extraInformation?.port) {\n\t\t\t\t\tmatrixBroadCastActions?.added?.(data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (disableOplog) {\n\t\t\tthis.onEvent('watch.loginServiceConfiguration', ({ clientAction, id, data }) => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks.removed?.(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\tcallbacks[clientAction === 'inserted' ? 'added' : 'changed']?.(id, data);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.users', async ({ clientAction, id, diff }) => {\n\t\t\tif (disableOplog) {\n\t\t\t\tif (clientAction === 'updated' && diff) {\n\t\t\t\t\tprocessOnChange(diff, id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!monitorAgents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clientAction !== 'removed' && diff && !diff.status && !diff.statusLivechat) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tconst agent: IUser | undefined = await Users.findOneAgentById(id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tstatusLivechat: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n\t\t\t\t\tif (serviceOnline) {\n\t\t\t\t\t\treturn onlineAgents.add(id);\n\t\t\t\t\t}\n\n\t\t\t\t\tonlineAgents.remove(id);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tonlineAgents.remove(id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.integrations', async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updated':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.removeIntegration(data);\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\ttriggerHandler.removeIntegration({ _id: id });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.emailInbox', async () => {\n\t\t\tconfigureEmailInboxes();\n\t\t});\n\n\t\tif (!process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING) {\n\t\t\tthis.onEvent('watch.messages', ({ message }) => {\n\t\t\t\tif (message?._updatedAt) {\n\t\t\t\t\tmetrics.messageRoundtripTime.set(Date.now() - message._updatedAt.getDate());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasync getLastAutoUpdateClientVersions(): Promise<AutoUpdateRecord[]> {\n\t\treturn [...autoUpdateRecords.values()];\n\t}\n\n\tasync getLoginServiceConfiguration(): Promise<any[]> {\n\t\treturn ServiceConfiguration.configurations.find({}, { fields: { secret: 0 } }).fetch();\n\t}\n\n\tasync callMethodWithToken(userId: string, token: string, method: string, args: any[]): Promise<void | any> {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!user) {\n\t\t\treturn {\n\t\t\t\tresult: Meteor.call(method, ...args),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresult: Meteor.runAsUser(userId, () => Meteor.call(method, ...args)),\n\t\t};\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: string): Promise<void> {\n\t\treturn Livechat.notifyGuestStatusChanged(token, status);\n\t}\n\n\tgetRoutingManagerConfig(): IRoutingManagerConfig {\n\t\t// return false if called before routing method is set\n\t\t// this will cause that oplog events received on early stages of server startup\n\t\t// won't be fired (at least, inquiry events)\n\t\treturn RoutingManager.isMethodSet() && RoutingManager.getConfig();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"57755786e6972b718cb1d112dea9db6ec2b4bc05"}
