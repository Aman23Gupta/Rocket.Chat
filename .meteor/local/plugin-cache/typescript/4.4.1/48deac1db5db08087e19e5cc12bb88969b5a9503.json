{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/Connection.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/ldap/Connection.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/Connection.ts","inputSourceMap":{"version":3,"file":"server/lib/ldap/Connection.ts","sourceRoot":"","sources":["server/lib/ldap/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["import ldapjs from 'ldapjs';\n\nimport { settings } from '../../../app/settings/server';\nimport type { ILDAPConnectionOptions, LDAPEncryptionType, LDAPSearchScope } from '../../../definition/ldap/ILDAPOptions';\nimport type { ILDAPEntry } from '../../../definition/ldap/ILDAPEntry';\nimport type { ILDAPCallback, ILDAPPageCallback } from '../../../definition/ldap/ILDAPCallback';\nimport { logger, connLogger, searchLogger, authLogger, bindLogger, mapLogger } from './Logger';\nimport { getLDAPConditionalSetting } from './getLDAPConditionalSetting';\n\ninterface ILDAPEntryCallback<T> {\n\t(entry: ldapjs.SearchEntry): T | undefined;\n}\n\ninterface ILDAPSearchEndCallback {\n\t(error?: any): void;\n}\n\ninterface ILDAPSearchPageCallback {\n\t(result: ldapjs.SearchEntry[]): void;\n}\n\ninterface ILDAPSearchAllCallbacks<T> {\n\tdataCallback?: ILDAPSearchPageCallback;\n\tendCallback?: ILDAPSearchEndCallback;\n\tentryCallback?: ILDAPEntryCallback<T>;\n}\n\ntype ILDAPExtractedValue = string | Array<ILDAPExtractedValue>;\n\nexport class LDAPConnection {\n\tpublic ldapjs: any;\n\n\tpublic connected: boolean;\n\n\tpublic options: ILDAPConnectionOptions;\n\n\tpublic client: ldapjs.Client;\n\n\tprivate _receivedResponse: boolean;\n\n\tprivate _connectionTimedOut: boolean;\n\n\tprivate _connectionCallback: ILDAPCallback;\n\n\tprivate usingAuthentication: boolean;\n\n\tconstructor() {\n\t\tthis.ldapjs = ldapjs;\n\n\t\tthis.connected = false;\n\t\tthis._receivedResponse = false;\n\t\tthis._connectionTimedOut = false;\n\n\t\tthis.options = {\n\t\t\thost: settings.get<string>('LDAP_Host') ?? '',\n\t\t\tport: settings.get<number>('LDAP_Port') ?? 389,\n\t\t\treconnect: settings.get<boolean>('LDAP_Reconnect') ?? false,\n\t\t\ttimeout: settings.get<number>('LDAP_Timeout') ?? 60000,\n\t\t\tconnectionTimeout: settings.get<number>('LDAP_Connect_Timeout') ?? 1000,\n\t\t\tidleTimeout: settings.get<number>('LDAP_Idle_Timeout') ?? 1000,\n\t\t\tencryption: settings.get<LDAPEncryptionType>('LDAP_Encryption') ?? 'plain',\n\t\t\tcaCert: settings.get<string>('LDAP_CA_Cert'),\n\t\t\trejectUnauthorized: settings.get<boolean>('LDAP_Reject_Unauthorized') || false,\n\t\t\tbaseDN: settings.get<string>('LDAP_BaseDN') ?? '',\n\t\t\tuserSearchFilter: settings.get<string>('LDAP_User_Search_Filter') ?? '',\n\t\t\tuserSearchScope: settings.get<LDAPSearchScope>('LDAP_User_Search_Scope') ?? 'sub',\n\t\t\tuserSearchField: getLDAPConditionalSetting<string>('LDAP_User_Search_Field') ?? '',\n\t\t\tsearchPageSize: settings.get<number>('LDAP_Search_Page_Size') ?? 250,\n\t\t\tsearchSizeLimit: settings.get<number>('LDAP_Search_Size_Limit') ?? 1000,\n\t\t\tuniqueIdentifierField: settings.get<string>('LDAP_Unique_Identifier_Field'),\n\t\t\tgroupFilterEnabled: settings.get<boolean>('LDAP_Group_Filter_Enable') ?? false,\n\t\t\tgroupFilterObjectClass: settings.get<string>('LDAP_Group_Filter_ObjectClass'),\n\t\t\tgroupFilterGroupIdAttribute: settings.get<string>('LDAP_Group_Filter_Group_Id_Attribute'),\n\t\t\tgroupFilterGroupMemberAttribute: settings.get<string>('LDAP_Group_Filter_Group_Member_Attribute'),\n\t\t\tgroupFilterGroupMemberFormat: settings.get<string>('LDAP_Group_Filter_Group_Member_Format'),\n\t\t\tgroupFilterGroupName: settings.get<string>('LDAP_Group_Filter_Group_Name'),\n\t\t\tauthentication: settings.get<boolean>('LDAP_Authentication') ?? false,\n\t\t\tauthenticationUserDN: settings.get<string>('LDAP_Authentication_UserDN') ?? '',\n\t\t\tauthenticationPassword: settings.get<string>('LDAP_Authentication_Password') ?? '',\n\t\t\tattributesToQuery: this.parseAttributeList(settings.get<string>('LDAP_User_Search_AttributesToQuery')),\n\t\t};\n\n\t\tif (!this.options.host) {\n\t\t\tlogger.warn('LDAP Host is not configured.');\n\t\t}\n\t\tif (!this.options.baseDN) {\n\t\t\tlogger.warn('LDAP Search BaseDN is not configured.');\n\t\t}\n\t}\n\n\tpublic async connect(): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.initializeConnection((error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\treturn resolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic disconnect(): void {\n\t\tthis.usingAuthentication = false;\n\t\tthis.connected = false;\n\t\tconnLogger.info('Disconnecting');\n\n\t\tif (this.client) {\n\t\t\tthis.client.unbind();\n\t\t}\n\t}\n\n\tpublic async testConnection(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.connect();\n\t\t\tawait this.maybeBindDN();\n\t\t} finally {\n\t\t\tthis.disconnect();\n\t\t}\n\t}\n\n\tpublic async searchByUsername(escapedUsername: string): Promise<ILDAPEntry[]> {\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: this.getUserFilter(escapedUsername),\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: this.options.searchSizeLimit,\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (this.options.searchPageSize > 0) {\n\t\t\tsearchOptions.paged = {\n\t\t\t\tpageSize: this.options.searchPageSize,\n\t\t\t\tpagePause: false,\n\t\t\t};\n\t\t}\n\n\t\tsearchLogger.info({\n\t\t\tmsg: 'Searching by username',\n\t\t\tusername: escapedUsername,\n\t\t\tbaseDN: this.options.baseDN,\n\t\t\tsearchOptions,\n\t\t});\n\t\treturn this.search(this.options.baseDN, searchOptions);\n\t}\n\n\tpublic async findOneByUsername(username: string): Promise<ILDAPEntry | undefined> {\n\t\tconst results = await this.searchByUsername(username);\n\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchById(id: string, attribute?: string): Promise<ILDAPEntry[]> {\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (attribute) {\n\t\t\tsearchOptions.filter = new this.ldapjs.filters.EqualityFilter({\n\t\t\t\tattribute,\n\t\t\t\tvalue: Buffer.from(id, 'hex'),\n\t\t\t});\n\t\t} else if (this.options.uniqueIdentifierField) {\n\t\t\t// If we don't know what attribute the id came from, we have to look for all of them.\n\t\t\tconst possibleFields = this.options.uniqueIdentifierField.split(',').concat(this.options.userSearchField.split(','));\n\t\t\tconst filters = [];\n\t\t\tfor (const field of possibleFields) {\n\t\t\t\tif (!field) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfilters.push(\n\t\t\t\t\tnew this.ldapjs.filters.EqualityFilter({\n\t\t\t\t\t\tattribute: field,\n\t\t\t\t\t\tvalue: Buffer.from(id, 'hex'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\tsearchOptions.filter = new this.ldapjs.filters.OrFilter({ filters });\n\t\t} else {\n\t\t\tthrow new Error('Unique Identifier Field is not configured.');\n\t\t}\n\n\t\tsearchLogger.info({ msg: 'Searching by id', id });\n\t\tsearchLogger.debug({ msg: 'search filter', searchOptions, baseDN: this.options.baseDN });\n\n\t\treturn this.search(this.options.baseDN, searchOptions);\n\t}\n\n\tpublic async findOneById(id: string, attribute?: string): Promise<ILDAPEntry | undefined> {\n\t\tconst results = await this.searchById(id, attribute);\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchAllUsers<T = ldapjs.SearchEntry>({\n\t\tdataCallback,\n\t\tendCallback,\n\t\tentryCallback,\n\t}: ILDAPSearchAllCallbacks<T>): Promise<void> {\n\t\tsearchLogger.info('Searching all users');\n\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: this.getUserFilter('*'),\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: this.options.searchSizeLimit,\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (this.options.searchPageSize > 0) {\n\t\t\tlet count = 0;\n\t\t\tawait this.doPagedSearch<T>(\n\t\t\t\tthis.options.baseDN,\n\t\t\t\tsearchOptions,\n\t\t\t\tthis.options.searchPageSize,\n\t\t\t\t(error, entries: ldapjs.SearchEntry[], { end, next } = { end: false, next: undefined }) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tendCallback?.(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcount += entries.length;\n\t\t\t\t\tdataCallback?.(entries);\n\t\t\t\t\tif (end) {\n\t\t\t\t\t\tendCallback?.();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\tnext(count);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tentryCallback,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doAsyncSearch(\n\t\t\tthis.options.baseDN,\n\t\t\tsearchOptions,\n\t\t\t(error, result) => {\n\t\t\t\tdataCallback?.(result);\n\t\t\t\tendCallback?.(error);\n\t\t\t},\n\t\t\tentryCallback,\n\t\t);\n\t}\n\n\tpublic async authenticate(dn: string, password: string): Promise<boolean> {\n\t\tauthLogger.info({ msg: 'Authenticating', dn });\n\n\t\ttry {\n\t\t\tawait this.bindDN(dn, password);\n\n\t\t\tauthLogger.info({ msg: 'Authenticated', dn });\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tauthLogger.info({ msg: 'Not authenticated', dn });\n\t\t\tauthLogger.debug({ msg: 'error', error });\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic async search(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<ILDAPEntry[]> {\n\t\treturn this.doCustomSearch<ILDAPEntry>(baseDN, searchOptions, (entry) => this.extractLdapEntryData(entry));\n\t}\n\n\tpublic async searchRaw(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<ldapjs.SearchEntry[]> {\n\t\treturn this.doCustomSearch<ldapjs.SearchEntry>(baseDN, searchOptions, (entry) => entry);\n\t}\n\n\tpublic async searchAndCount(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<number> {\n\t\tlet count = 0;\n\t\tawait this.doCustomSearch(baseDN, searchOptions, () => {\n\t\t\tcount++;\n\t\t});\n\n\t\treturn count;\n\t}\n\n\tpublic extractLdapAttribute(value: Buffer | Buffer[] | string): ILDAPExtractedValue {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map((item) => this.extractLdapAttribute(item));\n\t\t}\n\n\t\tif (value instanceof Buffer) {\n\t\t\treturn value.toString();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tpublic extractLdapEntryData(entry: ldapjs.SearchEntry): ILDAPEntry {\n\t\tconst values: ILDAPEntry = {\n\t\t\t_raw: entry.raw,\n\t\t};\n\n\t\tObject.keys(values._raw).forEach((key) => {\n\t\t\tvalues[key] = this.extractLdapAttribute(values._raw[key]);\n\n\t\t\tconst dataType = typeof values[key];\n\t\t\t// eslint-disable-next-line no-control-regex\n\t\t\tif (dataType === 'string' && values[key].length > 100 && /[\\x00-\\x1F]/.test(values[key])) {\n\t\t\t\tmapLogger.debug({\n\t\t\t\t\tmsg: 'Extracted Attribute',\n\t\t\t\t\tkey,\n\t\t\t\t\ttype: dataType,\n\t\t\t\t\tlength: values[key].length,\n\t\t\t\t\tvalue: `${values[key].substr(0, 100)}...`,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmapLogger.debug({ msg: 'Extracted Attribute', key, type: dataType, value: values[key] });\n\t\t});\n\n\t\treturn values;\n\t}\n\n\tpublic async doCustomSearch<T>(baseDN: string, searchOptions: ldapjs.SearchOptions, entryCallback: ILDAPEntryCallback<T>): Promise<T[]> {\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tif (!searchOptions.scope) {\n\t\t\tsearchOptions.scope = this.options.userSearchScope || 'sub';\n\t\t}\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tlet realEntries = 0;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.client.search(baseDN, searchOptions, (error, res: ldapjs.SearchCallbackResponse) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tsearchLogger.error(error);\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tres.on('error', (error) => {\n\t\t\t\t\tsearchLogger.error(error);\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\n\t\t\t\tconst entries: T[] = [];\n\n\t\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = entryCallback(entry);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tentries.push(result as T);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trealEntries++;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tres.on('end', () => {\n\t\t\t\t\tsearchLogger.info(`LDAP Search found ${realEntries} entries and loaded the data of ${entries.length}.`);\n\t\t\t\t\tresolve(entries);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/*\n\t\tCreate an LDAP search filter based on the username\n\t*/\n\tpublic getUserFilter(username: string): string {\n\t\tconst filter: string[] = [];\n\n\t\tthis.addUserFilters(filter, username);\n\n\t\tconst usernameFilter = this.options.userSearchField.split(',').map((item) => `(${item}=${username})`);\n\n\t\tif (usernameFilter.length === 0) {\n\t\t\tlogger.error('LDAP_LDAP_User_Search_Field not defined');\n\t\t} else if (usernameFilter.length === 1) {\n\t\t\tfilter.push(`${usernameFilter[0]}`);\n\t\t} else {\n\t\t\tfilter.push(`(|${usernameFilter.join('')})`);\n\t\t}\n\n\t\treturn `(&${filter.join('')})`;\n\t}\n\n\tpublic async isUserAcceptedByGroupFilter(username: string, userdn: string): Promise<boolean> {\n\t\tif (!this.options.groupFilterEnabled) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst filter = ['(&'];\n\n\t\tif (this.options.groupFilterObjectClass) {\n\t\t\tfilter.push(`(objectclass=${this.options.groupFilterObjectClass})`);\n\t\t}\n\n\t\tif (this.options.groupFilterGroupMemberAttribute) {\n\t\t\tfilter.push(`(${this.options.groupFilterGroupMemberAttribute}=${this.options.groupFilterGroupMemberFormat})`);\n\t\t}\n\n\t\tif (this.options.groupFilterGroupIdAttribute) {\n\t\t\tfilter.push(`(${this.options.groupFilterGroupIdAttribute}=${this.options.groupFilterGroupName})`);\n\t\t}\n\t\tfilter.push(')');\n\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: filter\n\t\t\t\t.join('')\n\t\t\t\t.replace(/#{username}/g, username)\n\t\t\t\t.replace(/#{userdn}/g, userdn),\n\t\t\tscope: 'sub',\n\t\t};\n\n\t\tsearchLogger.debug({ msg: 'Group filter LDAP:', filter: searchOptions.filter });\n\n\t\tconst result = await this.searchRaw(this.options.baseDN, searchOptions);\n\n\t\tif (!Array.isArray(result) || result.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected addUserFilters(filters: string[], _username: string): void {\n\t\tconst { userSearchFilter } = this.options;\n\n\t\tif (userSearchFilter !== '') {\n\t\t\tif (userSearchFilter[0] === '(') {\n\t\t\t\tfilters.push(`${userSearchFilter}`);\n\t\t\t} else {\n\t\t\t\tfilters.push(`(${userSearchFilter})`);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async bindDN(dn: string, password: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tthis.client.bind(dn, password, (error) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async doAsyncSearch<T = ldapjs.SearchEntry>(\n\t\tbaseDN: string,\n\t\tsearchOptions: ldapjs.SearchOptions,\n\t\tcallback: ILDAPCallback,\n\t\tentryCallback?: ILDAPEntryCallback<T>,\n\t): Promise<void> {\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tthis.client.search(baseDN, searchOptions, (error: ldapjs.Error | null, res: ldapjs.SearchCallbackResponse): void => {\n\t\t\tif (error) {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tres.on('error', (error) => {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t});\n\n\t\t\tconst entries: T[] = [];\n\n\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('end', () => {\n\t\t\t\tsearchLogger.info({ msg: 'Search result count', count: entries.length });\n\t\t\t\tcallback(null, entries);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate processSearchPage<T>(\n\t\t{ entries, title, end, next }: { entries: T[]; title: string; end: boolean; next?: Function },\n\t\tcallback: ILDAPPageCallback,\n\t): void {\n\t\tsearchLogger.info(title);\n\t\t// Force LDAP idle to wait the record processing\n\t\tthis._updateIdle(true);\n\n\t\tcallback(null, entries, {\n\t\t\tend,\n\t\t\tnext: () => {\n\t\t\t\t// Reset idle timer\n\t\t\t\tthis._updateIdle();\n\t\t\t\tnext?.();\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async doPagedSearch<T = ldapjs.SearchEntry>(\n\t\tbaseDN: string,\n\t\tsearchOptions: ldapjs.SearchOptions,\n\t\tpageSize: number,\n\t\tcallback: ILDAPPageCallback,\n\t\tentryCallback?: ILDAPEntryCallback<T>,\n\t): Promise<void> {\n\t\tsearchOptions.paged = {\n\t\t\tpageSize,\n\t\t\tpagePause: true,\n\t\t};\n\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tthis.client.search(baseDN, searchOptions, (error: ldapjs.Error | null, res: ldapjs.SearchCallbackResponse): void => {\n\t\t\tif (error) {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tres.on('error', (error) => {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t});\n\n\t\t\tlet entries: T[] = [];\n\t\t\tconst internalPageSize = pageSize * 2;\n\n\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\n\t\t\t\t\tif (entries.length >= internalPageSize) {\n\t\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t\ttitle: 'Internal Page',\n\t\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tentries = [];\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('page', (_result, next) => {\n\t\t\t\tif (!next) {\n\t\t\t\t\tthis._updateIdle(true);\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Final Page',\n\t\t\t\t\t\t\tend: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t} else if (entries.length) {\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Page',\n\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\tnext,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('end', () => {\n\t\t\t\tif (entries.length) {\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Final Page',\n\t\t\t\t\t\t\tend: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _updateIdle(override?: boolean): void {\n\t\t// @ts-ignore calling a private method\n\t\tthis.client._updateIdle(override);\n\t}\n\n\tprotected async maybeBindDN(): Promise<void> {\n\t\tif (this.usingAuthentication) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.options.authentication) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.options.authenticationUserDN) {\n\t\t\tlogger.error('Invalid UserDN for authentication');\n\t\t\treturn;\n\t\t}\n\n\t\tbindLogger.info({ msg: 'Binding UserDN', userDN: this.options.authenticationUserDN });\n\t\ttry {\n\t\t\tawait this.bindDN(this.options.authenticationUserDN, this.options.authenticationPassword);\n\t\t\tthis.usingAuthentication = true;\n\t\t} catch (error) {\n\t\t\tauthLogger.error({\n\t\t\t\tmsg: 'Base Authentication Issue',\n\t\t\t\terr: error,\n\t\t\t\tdn: this.options.authenticationUserDN,\n\t\t\t});\n\t\t\tthis.usingAuthentication = false;\n\t\t}\n\t}\n\n\tprotected async runBeforeSearch(_searchOptions: ldapjs.SearchOptions): Promise<void> {\n\t\treturn this.maybeBindDN();\n\t}\n\n\t/*\n\t\tGet list of options to initialize a new ldapjs Client\n\t*/\n\tprivate getClientOptions(): {\n\t\tclientOptions: ldapjs.ClientOptions;\n\t\ttlsOptions: Record<string, any>;\n\t} {\n\t\tconst clientOptions: ldapjs.ClientOptions = {\n\t\t\turl: `${this.options.host}:${this.options.port}`,\n\t\t\ttimeout: this.options.timeout,\n\t\t\tconnectTimeout: this.options.connectionTimeout,\n\t\t\tidleTimeout: this.options.idleTimeout,\n\t\t\treconnect: this.options.reconnect,\n\t\t\tlog: connLogger,\n\t\t};\n\n\t\tconst tlsOptions: Record<string, any> = {\n\t\t\trejectUnauthorized: this.options.rejectUnauthorized,\n\t\t};\n\n\t\tif (this.options.caCert) {\n\t\t\t// Split CA cert into array of strings\n\t\t\tconst chainLines = this.options.caCert.split('\\n');\n\t\t\tlet cert: string[] = [];\n\t\t\tconst ca: string[] = [];\n\t\t\tchainLines.forEach((line) => {\n\t\t\t\tcert.push(line);\n\t\t\t\tif (line.match(/-END CERTIFICATE-/)) {\n\t\t\t\t\tca.push(cert.join('\\n'));\n\t\t\t\t\tcert = [];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttlsOptions.ca = ca;\n\t\t}\n\n\t\tif (this.options.encryption === 'ssl') {\n\t\t\tclientOptions.url = `ldaps://${clientOptions.url}`;\n\t\t\tclientOptions.tlsOptions = tlsOptions;\n\t\t} else {\n\t\t\tclientOptions.url = `ldap://${clientOptions.url}`;\n\t\t}\n\n\t\treturn {\n\t\t\tclientOptions,\n\t\t\ttlsOptions,\n\t\t};\n\t}\n\n\tprivate handleConnectionResponse(error: any, response?: any): void {\n\t\tif (!this._receivedResponse) {\n\t\t\tthis._receivedResponse = true;\n\t\t\tthis._connectionCallback(error, response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._connectionTimedOut && !error) {\n\t\t\tconnLogger.info('Received a response after the connection timedout.');\n\t\t} else {\n\t\t\tlogger.debug('Ignored error/response:');\n\t\t}\n\n\t\tif (error) {\n\t\t\tconnLogger.debug(error);\n\t\t} else {\n\t\t\tconnLogger.debug(response);\n\t\t}\n\t}\n\n\tprivate initializeConnection(callback: ILDAPCallback): void {\n\t\tconnLogger.info('Init Setup');\n\t\tthis._receivedResponse = false;\n\t\tthis._connectionTimedOut = false;\n\t\tthis._connectionCallback = callback;\n\n\t\tconst { clientOptions, tlsOptions } = this.getClientOptions();\n\t\tconnLogger.info({ msg: 'Connecting', url: clientOptions.url });\n\t\tconnLogger.debug({ msg: 'clientOptions', clientOptions });\n\n\t\tthis.client = ldapjs.createClient(clientOptions);\n\n\t\tthis.client.on('error', (error) => {\n\t\t\tconnLogger.error(error);\n\t\t\tthis.handleConnectionResponse(error, null);\n\t\t});\n\n\t\tthis.client.on('idle', () => {\n\t\t\tsearchLogger.info('Idle');\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tthis.client.on('close', () => {\n\t\t\tsearchLogger.info('Closed');\n\t\t});\n\n\t\tif (this.options.encryption === 'tls') {\n\t\t\t// Set host parameter for tls.connect which is used by ldapjs starttls. This may not be needed anymore\n\t\t\t// https://github.com/RocketChat/Rocket.Chat/issues/2035\n\t\t\t// https://github.com/mcavage/node-ldapjs/issues/349\n\t\t\ttlsOptions.host = this.options.host;\n\n\t\t\tconnLogger.info('Starting TLS');\n\t\t\tconnLogger.debug({ msg: 'tlsOptions', tlsOptions });\n\n\t\t\tthis.client.starttls(tlsOptions, null, (error, response) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconnLogger.error({ msg: 'TLS connection', error });\n\t\t\t\t\treturn this.handleConnectionResponse(error, null);\n\t\t\t\t}\n\n\t\t\t\tconnLogger.info('TLS connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.handleConnectionResponse(null, response);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.on('connect', (response) => {\n\t\t\t\tconnLogger.info('LDAP connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.handleConnectionResponse(null, response);\n\t\t\t});\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tif (!this._receivedResponse) {\n\t\t\t\tconnLogger.error({ msg: 'connection time out', timeout: clientOptions.connectTimeout });\n\t\t\t\tthis.handleConnectionResponse(new Error('Timeout'));\n\t\t\t\tthis._connectionTimedOut = true;\n\t\t\t}\n\t\t}, clientOptions.connectTimeout);\n\t}\n\n\tprivate parseAttributeList(csv: string | undefined): Array<string> {\n\t\tif (!csv) {\n\t\t\treturn ['*', '+'];\n\t\t}\n\n\t\tconst list = csv.split(',').map((item) => item.trim());\n\t\tif (!list?.length) {\n\t\t\treturn ['*', '+'];\n\t\t}\n\n\t\treturn list;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/Connection.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/ldap/Connection.ts"}},"code":"module.export({\n  LDAPConnection: () => LDAPConnection\n});\nlet ldapjs;\nmodule.link(\"ldapjs\", {\n  default(v) {\n    ldapjs = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet logger, connLogger, searchLogger, authLogger, bindLogger, mapLogger;\nmodule.link(\"./Logger\", {\n  logger(v) {\n    logger = v;\n  },\n\n  connLogger(v) {\n    connLogger = v;\n  },\n\n  searchLogger(v) {\n    searchLogger = v;\n  },\n\n  authLogger(v) {\n    authLogger = v;\n  },\n\n  bindLogger(v) {\n    bindLogger = v;\n  },\n\n  mapLogger(v) {\n    mapLogger = v;\n  }\n\n}, 2);\nlet getLDAPConditionalSetting;\nmodule.link(\"./getLDAPConditionalSetting\", {\n  getLDAPConditionalSetting(v) {\n    getLDAPConditionalSetting = v;\n  }\n\n}, 3);\n\nclass LDAPConnection {\n  constructor() {\n    var _settings$get, _settings$get2, _settings$get3, _settings$get4, _settings$get5, _settings$get6, _settings$get7, _settings$get8, _settings$get9, _settings$get10, _getLDAPConditionalSe, _settings$get11, _settings$get12, _settings$get13, _settings$get14, _settings$get15, _settings$get16;\n\n    this.ldapjs = void 0;\n    this.connected = void 0;\n    this.options = void 0;\n    this.client = void 0;\n    this._receivedResponse = void 0;\n    this._connectionTimedOut = void 0;\n    this._connectionCallback = void 0;\n    this.usingAuthentication = void 0;\n    this.ldapjs = ldapjs;\n    this.connected = false;\n    this._receivedResponse = false;\n    this._connectionTimedOut = false;\n    this.options = {\n      host: (_settings$get = settings.get('LDAP_Host')) !== null && _settings$get !== void 0 ? _settings$get : '',\n      port: (_settings$get2 = settings.get('LDAP_Port')) !== null && _settings$get2 !== void 0 ? _settings$get2 : 389,\n      reconnect: (_settings$get3 = settings.get('LDAP_Reconnect')) !== null && _settings$get3 !== void 0 ? _settings$get3 : false,\n      timeout: (_settings$get4 = settings.get('LDAP_Timeout')) !== null && _settings$get4 !== void 0 ? _settings$get4 : 60000,\n      connectionTimeout: (_settings$get5 = settings.get('LDAP_Connect_Timeout')) !== null && _settings$get5 !== void 0 ? _settings$get5 : 1000,\n      idleTimeout: (_settings$get6 = settings.get('LDAP_Idle_Timeout')) !== null && _settings$get6 !== void 0 ? _settings$get6 : 1000,\n      encryption: (_settings$get7 = settings.get('LDAP_Encryption')) !== null && _settings$get7 !== void 0 ? _settings$get7 : 'plain',\n      caCert: settings.get('LDAP_CA_Cert'),\n      rejectUnauthorized: settings.get('LDAP_Reject_Unauthorized') || false,\n      baseDN: (_settings$get8 = settings.get('LDAP_BaseDN')) !== null && _settings$get8 !== void 0 ? _settings$get8 : '',\n      userSearchFilter: (_settings$get9 = settings.get('LDAP_User_Search_Filter')) !== null && _settings$get9 !== void 0 ? _settings$get9 : '',\n      userSearchScope: (_settings$get10 = settings.get('LDAP_User_Search_Scope')) !== null && _settings$get10 !== void 0 ? _settings$get10 : 'sub',\n      userSearchField: (_getLDAPConditionalSe = getLDAPConditionalSetting('LDAP_User_Search_Field')) !== null && _getLDAPConditionalSe !== void 0 ? _getLDAPConditionalSe : '',\n      searchPageSize: (_settings$get11 = settings.get('LDAP_Search_Page_Size')) !== null && _settings$get11 !== void 0 ? _settings$get11 : 250,\n      searchSizeLimit: (_settings$get12 = settings.get('LDAP_Search_Size_Limit')) !== null && _settings$get12 !== void 0 ? _settings$get12 : 1000,\n      uniqueIdentifierField: settings.get('LDAP_Unique_Identifier_Field'),\n      groupFilterEnabled: (_settings$get13 = settings.get('LDAP_Group_Filter_Enable')) !== null && _settings$get13 !== void 0 ? _settings$get13 : false,\n      groupFilterObjectClass: settings.get('LDAP_Group_Filter_ObjectClass'),\n      groupFilterGroupIdAttribute: settings.get('LDAP_Group_Filter_Group_Id_Attribute'),\n      groupFilterGroupMemberAttribute: settings.get('LDAP_Group_Filter_Group_Member_Attribute'),\n      groupFilterGroupMemberFormat: settings.get('LDAP_Group_Filter_Group_Member_Format'),\n      groupFilterGroupName: settings.get('LDAP_Group_Filter_Group_Name'),\n      authentication: (_settings$get14 = settings.get('LDAP_Authentication')) !== null && _settings$get14 !== void 0 ? _settings$get14 : false,\n      authenticationUserDN: (_settings$get15 = settings.get('LDAP_Authentication_UserDN')) !== null && _settings$get15 !== void 0 ? _settings$get15 : '',\n      authenticationPassword: (_settings$get16 = settings.get('LDAP_Authentication_Password')) !== null && _settings$get16 !== void 0 ? _settings$get16 : '',\n      attributesToQuery: this.parseAttributeList(settings.get('LDAP_User_Search_AttributesToQuery'))\n    };\n\n    if (!this.options.host) {\n      logger.warn('LDAP Host is not configured.');\n    }\n\n    if (!this.options.baseDN) {\n      logger.warn('LDAP Search BaseDN is not configured.');\n    }\n  }\n\n  connect() {\n    return Promise.asyncApply(() => {\n      return new Promise((resolve, reject) => {\n        this.initializeConnection((error, result) => {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve(result);\n        });\n      });\n    });\n  }\n\n  disconnect() {\n    this.usingAuthentication = false;\n    this.connected = false;\n    connLogger.info('Disconnecting');\n\n    if (this.client) {\n      this.client.unbind();\n    }\n  }\n\n  testConnection() {\n    return Promise.asyncApply(() => {\n      try {\n        Promise.await(this.connect());\n        Promise.await(this.maybeBindDN());\n      } finally {\n        this.disconnect();\n      }\n    });\n  }\n\n  searchByUsername(escapedUsername) {\n    return Promise.asyncApply(() => {\n      const searchOptions = {\n        filter: this.getUserFilter(escapedUsername),\n        scope: this.options.userSearchScope || 'sub',\n        sizeLimit: this.options.searchSizeLimit,\n        attributes: this.options.attributesToQuery\n      };\n\n      if (this.options.searchPageSize > 0) {\n        searchOptions.paged = {\n          pageSize: this.options.searchPageSize,\n          pagePause: false\n        };\n      }\n\n      searchLogger.info({\n        msg: 'Searching by username',\n        username: escapedUsername,\n        baseDN: this.options.baseDN,\n        searchOptions\n      });\n      return this.search(this.options.baseDN, searchOptions);\n    });\n  }\n\n  findOneByUsername(username) {\n    return Promise.asyncApply(() => {\n      const results = Promise.await(this.searchByUsername(username));\n\n      if (results.length === 1) {\n        return results[0];\n      }\n    });\n  }\n\n  searchById(id, attribute) {\n    return Promise.asyncApply(() => {\n      const searchOptions = {\n        scope: this.options.userSearchScope || 'sub',\n        attributes: this.options.attributesToQuery\n      };\n\n      if (attribute) {\n        searchOptions.filter = new this.ldapjs.filters.EqualityFilter({\n          attribute,\n          value: Buffer.from(id, 'hex')\n        });\n      } else if (this.options.uniqueIdentifierField) {\n        // If we don't know what attribute the id came from, we have to look for all of them.\n        const possibleFields = this.options.uniqueIdentifierField.split(',').concat(this.options.userSearchField.split(','));\n        const filters = [];\n\n        for (const field of possibleFields) {\n          if (!field) {\n            continue;\n          }\n\n          filters.push(new this.ldapjs.filters.EqualityFilter({\n            attribute: field,\n            value: Buffer.from(id, 'hex')\n          }));\n        }\n\n        searchOptions.filter = new this.ldapjs.filters.OrFilter({\n          filters\n        });\n      } else {\n        throw new Error('Unique Identifier Field is not configured.');\n      }\n\n      searchLogger.info({\n        msg: 'Searching by id',\n        id\n      });\n      searchLogger.debug({\n        msg: 'search filter',\n        searchOptions,\n        baseDN: this.options.baseDN\n      });\n      return this.search(this.options.baseDN, searchOptions);\n    });\n  }\n\n  findOneById(id, attribute) {\n    return Promise.asyncApply(() => {\n      const results = Promise.await(this.searchById(id, attribute));\n\n      if (results.length === 1) {\n        return results[0];\n      }\n    });\n  }\n\n  searchAllUsers(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        dataCallback,\n        endCallback,\n        entryCallback\n      } = _ref;\n      searchLogger.info('Searching all users');\n      const searchOptions = {\n        filter: this.getUserFilter('*'),\n        scope: this.options.userSearchScope || 'sub',\n        sizeLimit: this.options.searchSizeLimit,\n        attributes: this.options.attributesToQuery\n      };\n\n      if (this.options.searchPageSize > 0) {\n        let count = 0;\n        Promise.await(this.doPagedSearch(this.options.baseDN, searchOptions, this.options.searchPageSize, function (error, entries) {\n          let {\n            end,\n            next\n          } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n            end: false,\n            next: undefined\n          };\n\n          if (error) {\n            endCallback === null || endCallback === void 0 ? void 0 : endCallback(error);\n            return;\n          }\n\n          count += entries.length;\n          dataCallback === null || dataCallback === void 0 ? void 0 : dataCallback(entries);\n\n          if (end) {\n            endCallback === null || endCallback === void 0 ? void 0 : endCallback();\n          }\n\n          if (next) {\n            next(count);\n          }\n        }, entryCallback));\n        return;\n      }\n\n      Promise.await(this.doAsyncSearch(this.options.baseDN, searchOptions, (error, result) => {\n        dataCallback === null || dataCallback === void 0 ? void 0 : dataCallback(result);\n        endCallback === null || endCallback === void 0 ? void 0 : endCallback(error);\n      }, entryCallback));\n    });\n  }\n\n  authenticate(dn, password) {\n    return Promise.asyncApply(() => {\n      authLogger.info({\n        msg: 'Authenticating',\n        dn\n      });\n\n      try {\n        Promise.await(this.bindDN(dn, password));\n        authLogger.info({\n          msg: 'Authenticated',\n          dn\n        });\n        return true;\n      } catch (error) {\n        authLogger.info({\n          msg: 'Not authenticated',\n          dn\n        });\n        authLogger.debug({\n          msg: 'error',\n          error\n        });\n        return false;\n      }\n    });\n  }\n\n  search(baseDN, searchOptions) {\n    return Promise.asyncApply(() => {\n      return this.doCustomSearch(baseDN, searchOptions, entry => this.extractLdapEntryData(entry));\n    });\n  }\n\n  searchRaw(baseDN, searchOptions) {\n    return Promise.asyncApply(() => {\n      return this.doCustomSearch(baseDN, searchOptions, entry => entry);\n    });\n  }\n\n  searchAndCount(baseDN, searchOptions) {\n    return Promise.asyncApply(() => {\n      let count = 0;\n      Promise.await(this.doCustomSearch(baseDN, searchOptions, () => {\n        count++;\n      }));\n      return count;\n    });\n  }\n\n  extractLdapAttribute(value) {\n    if (Array.isArray(value)) {\n      return value.map(item => this.extractLdapAttribute(item));\n    }\n\n    if (value instanceof Buffer) {\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  extractLdapEntryData(entry) {\n    const values = {\n      _raw: entry.raw\n    };\n    Object.keys(values._raw).forEach(key => {\n      values[key] = this.extractLdapAttribute(values._raw[key]);\n      const dataType = typeof values[key]; // eslint-disable-next-line no-control-regex\n\n      if (dataType === 'string' && values[key].length > 100 && /[\\x00-\\x1F]/.test(values[key])) {\n        mapLogger.debug({\n          msg: 'Extracted Attribute',\n          key,\n          type: dataType,\n          length: values[key].length,\n          value: \"\".concat(values[key].substr(0, 100), \"...\")\n        });\n        return;\n      }\n\n      mapLogger.debug({\n        msg: 'Extracted Attribute',\n        key,\n        type: dataType,\n        value: values[key]\n      });\n    });\n    return values;\n  }\n\n  doCustomSearch(baseDN, searchOptions, entryCallback) {\n    return Promise.asyncApply(() => {\n      Promise.await(this.runBeforeSearch(searchOptions));\n\n      if (!searchOptions.scope) {\n        searchOptions.scope = this.options.userSearchScope || 'sub';\n      }\n\n      searchLogger.debug({\n        msg: 'searchOptions',\n        searchOptions,\n        baseDN\n      });\n      let realEntries = 0;\n      return new Promise((resolve, reject) => {\n        this.client.search(baseDN, searchOptions, (error, res) => {\n          if (error) {\n            searchLogger.error(error);\n            reject(error);\n            return;\n          }\n\n          res.on('error', error => {\n            searchLogger.error(error);\n            reject(error);\n          });\n          const entries = [];\n          res.on('searchEntry', entry => {\n            try {\n              const result = entryCallback(entry);\n\n              if (result) {\n                entries.push(result);\n              }\n\n              realEntries++;\n            } catch (e) {\n              searchLogger.error(e);\n              throw e;\n            }\n          });\n          res.on('end', () => {\n            searchLogger.info(\"LDAP Search found \".concat(realEntries, \" entries and loaded the data of \").concat(entries.length, \".\"));\n            resolve(entries);\n          });\n        });\n      });\n    });\n  }\n  /*\n      Create an LDAP search filter based on the username\n  */\n\n\n  getUserFilter(username) {\n    const filter = [];\n    this.addUserFilters(filter, username);\n    const usernameFilter = this.options.userSearchField.split(',').map(item => \"(\".concat(item, \"=\").concat(username, \")\"));\n\n    if (usernameFilter.length === 0) {\n      logger.error('LDAP_LDAP_User_Search_Field not defined');\n    } else if (usernameFilter.length === 1) {\n      filter.push(\"\".concat(usernameFilter[0]));\n    } else {\n      filter.push(\"(|\".concat(usernameFilter.join(''), \")\"));\n    }\n\n    return \"(&\".concat(filter.join(''), \")\");\n  }\n\n  isUserAcceptedByGroupFilter(username, userdn) {\n    return Promise.asyncApply(() => {\n      if (!this.options.groupFilterEnabled) {\n        return true;\n      }\n\n      const filter = ['(&'];\n\n      if (this.options.groupFilterObjectClass) {\n        filter.push(\"(objectclass=\".concat(this.options.groupFilterObjectClass, \")\"));\n      }\n\n      if (this.options.groupFilterGroupMemberAttribute) {\n        filter.push(\"(\".concat(this.options.groupFilterGroupMemberAttribute, \"=\").concat(this.options.groupFilterGroupMemberFormat, \")\"));\n      }\n\n      if (this.options.groupFilterGroupIdAttribute) {\n        filter.push(\"(\".concat(this.options.groupFilterGroupIdAttribute, \"=\").concat(this.options.groupFilterGroupName, \")\"));\n      }\n\n      filter.push(')');\n      const searchOptions = {\n        filter: filter.join('').replace(/#{username}/g, username).replace(/#{userdn}/g, userdn),\n        scope: 'sub'\n      };\n      searchLogger.debug({\n        msg: 'Group filter LDAP:',\n        filter: searchOptions.filter\n      });\n      const result = Promise.await(this.searchRaw(this.options.baseDN, searchOptions));\n\n      if (!Array.isArray(result) || result.length === 0) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  addUserFilters(filters, _username) {\n    const {\n      userSearchFilter\n    } = this.options;\n\n    if (userSearchFilter !== '') {\n      if (userSearchFilter[0] === '(') {\n        filters.push(\"\".concat(userSearchFilter));\n      } else {\n        filters.push(\"(\".concat(userSearchFilter, \")\"));\n      }\n    }\n  }\n\n  bindDN(dn, password) {\n    return Promise.asyncApply(() => {\n      return new Promise((resolve, reject) => {\n        try {\n          this.client.bind(dn, password, error => {\n            if (error) {\n              return reject(error);\n            }\n\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  doAsyncSearch(baseDN, searchOptions, callback, entryCallback) {\n    return Promise.asyncApply(() => {\n      Promise.await(this.runBeforeSearch(searchOptions));\n      searchLogger.debug({\n        msg: 'searchOptions',\n        searchOptions,\n        baseDN\n      });\n      this.client.search(baseDN, searchOptions, (error, res) => {\n        if (error) {\n          searchLogger.error(error);\n          callback(error);\n          return;\n        }\n\n        res.on('error', error => {\n          searchLogger.error(error);\n          callback(error);\n        });\n        const entries = [];\n        res.on('searchEntry', entry => {\n          try {\n            const result = entryCallback ? entryCallback(entry) : entry;\n            entries.push(result);\n          } catch (e) {\n            searchLogger.error(e);\n            throw e;\n          }\n        });\n        res.on('end', () => {\n          searchLogger.info({\n            msg: 'Search result count',\n            count: entries.length\n          });\n          callback(null, entries);\n        });\n      });\n    });\n  }\n\n  processSearchPage(_ref2, callback) {\n    let {\n      entries,\n      title,\n      end,\n      next\n    } = _ref2;\n    searchLogger.info(title); // Force LDAP idle to wait the record processing\n\n    this._updateIdle(true);\n\n    callback(null, entries, {\n      end,\n      next: () => {\n        // Reset idle timer\n        this._updateIdle();\n\n        next === null || next === void 0 ? void 0 : next();\n      }\n    });\n  }\n\n  doPagedSearch(baseDN, searchOptions, pageSize, callback, entryCallback) {\n    return Promise.asyncApply(() => {\n      searchOptions.paged = {\n        pageSize,\n        pagePause: true\n      };\n      Promise.await(this.runBeforeSearch(searchOptions));\n      searchLogger.debug({\n        msg: 'searchOptions',\n        searchOptions,\n        baseDN\n      });\n      this.client.search(baseDN, searchOptions, (error, res) => {\n        if (error) {\n          searchLogger.error(error);\n          callback(error);\n          return;\n        }\n\n        res.on('error', error => {\n          searchLogger.error(error);\n          callback(error);\n        });\n        let entries = [];\n        const internalPageSize = pageSize * 2;\n        res.on('searchEntry', entry => {\n          try {\n            const result = entryCallback ? entryCallback(entry) : entry;\n            entries.push(result);\n\n            if (entries.length >= internalPageSize) {\n              this.processSearchPage({\n                entries,\n                title: 'Internal Page',\n                end: false\n              }, callback);\n              entries = [];\n            }\n          } catch (e) {\n            searchLogger.error(e);\n            throw e;\n          }\n        });\n        res.on('page', (_result, next) => {\n          if (!next) {\n            this._updateIdle(true);\n\n            this.processSearchPage({\n              entries,\n              title: 'Final Page',\n              end: true\n            }, callback);\n            entries = [];\n          } else if (entries.length) {\n            this.processSearchPage({\n              entries,\n              title: 'Page',\n              end: false,\n              next\n            }, callback);\n            entries = [];\n          }\n        });\n        res.on('end', () => {\n          if (entries.length) {\n            this.processSearchPage({\n              entries,\n              title: 'Final Page',\n              end: true\n            }, callback);\n            entries = [];\n          }\n        });\n      });\n    });\n  }\n\n  _updateIdle(override) {\n    // @ts-ignore calling a private method\n    this.client._updateIdle(override);\n  }\n\n  maybeBindDN() {\n    return Promise.asyncApply(() => {\n      if (this.usingAuthentication) {\n        return;\n      }\n\n      if (!this.options.authentication) {\n        return;\n      }\n\n      if (!this.options.authenticationUserDN) {\n        logger.error('Invalid UserDN for authentication');\n        return;\n      }\n\n      bindLogger.info({\n        msg: 'Binding UserDN',\n        userDN: this.options.authenticationUserDN\n      });\n\n      try {\n        Promise.await(this.bindDN(this.options.authenticationUserDN, this.options.authenticationPassword));\n        this.usingAuthentication = true;\n      } catch (error) {\n        authLogger.error({\n          msg: 'Base Authentication Issue',\n          err: error,\n          dn: this.options.authenticationUserDN\n        });\n        this.usingAuthentication = false;\n      }\n    });\n  }\n\n  runBeforeSearch(_searchOptions) {\n    return Promise.asyncApply(() => {\n      return this.maybeBindDN();\n    });\n  }\n  /*\n      Get list of options to initialize a new ldapjs Client\n  */\n\n\n  getClientOptions() {\n    const clientOptions = {\n      url: \"\".concat(this.options.host, \":\").concat(this.options.port),\n      timeout: this.options.timeout,\n      connectTimeout: this.options.connectionTimeout,\n      idleTimeout: this.options.idleTimeout,\n      reconnect: this.options.reconnect,\n      log: connLogger\n    };\n    const tlsOptions = {\n      rejectUnauthorized: this.options.rejectUnauthorized\n    };\n\n    if (this.options.caCert) {\n      // Split CA cert into array of strings\n      const chainLines = this.options.caCert.split('\\n');\n      let cert = [];\n      const ca = [];\n      chainLines.forEach(line => {\n        cert.push(line);\n\n        if (line.match(/-END CERTIFICATE-/)) {\n          ca.push(cert.join('\\n'));\n          cert = [];\n        }\n      });\n      tlsOptions.ca = ca;\n    }\n\n    if (this.options.encryption === 'ssl') {\n      clientOptions.url = \"ldaps://\".concat(clientOptions.url);\n      clientOptions.tlsOptions = tlsOptions;\n    } else {\n      clientOptions.url = \"ldap://\".concat(clientOptions.url);\n    }\n\n    return {\n      clientOptions,\n      tlsOptions\n    };\n  }\n\n  handleConnectionResponse(error, response) {\n    if (!this._receivedResponse) {\n      this._receivedResponse = true;\n\n      this._connectionCallback(error, response);\n\n      return;\n    }\n\n    if (this._connectionTimedOut && !error) {\n      connLogger.info('Received a response after the connection timedout.');\n    } else {\n      logger.debug('Ignored error/response:');\n    }\n\n    if (error) {\n      connLogger.debug(error);\n    } else {\n      connLogger.debug(response);\n    }\n  }\n\n  initializeConnection(callback) {\n    connLogger.info('Init Setup');\n    this._receivedResponse = false;\n    this._connectionTimedOut = false;\n    this._connectionCallback = callback;\n    const {\n      clientOptions,\n      tlsOptions\n    } = this.getClientOptions();\n    connLogger.info({\n      msg: 'Connecting',\n      url: clientOptions.url\n    });\n    connLogger.debug({\n      msg: 'clientOptions',\n      clientOptions\n    });\n    this.client = ldapjs.createClient(clientOptions);\n    this.client.on('error', error => {\n      connLogger.error(error);\n      this.handleConnectionResponse(error, null);\n    });\n    this.client.on('idle', () => {\n      searchLogger.info('Idle');\n      this.disconnect();\n    });\n    this.client.on('close', () => {\n      searchLogger.info('Closed');\n    });\n\n    if (this.options.encryption === 'tls') {\n      // Set host parameter for tls.connect which is used by ldapjs starttls. This may not be needed anymore\n      // https://github.com/RocketChat/Rocket.Chat/issues/2035\n      // https://github.com/mcavage/node-ldapjs/issues/349\n      tlsOptions.host = this.options.host;\n      connLogger.info('Starting TLS');\n      connLogger.debug({\n        msg: 'tlsOptions',\n        tlsOptions\n      });\n      this.client.starttls(tlsOptions, null, (error, response) => {\n        if (error) {\n          connLogger.error({\n            msg: 'TLS connection',\n            error\n          });\n          return this.handleConnectionResponse(error, null);\n        }\n\n        connLogger.info('TLS connected');\n        this.connected = true;\n        this.handleConnectionResponse(null, response);\n      });\n    } else {\n      this.client.on('connect', response => {\n        connLogger.info('LDAP connected');\n        this.connected = true;\n        this.handleConnectionResponse(null, response);\n      });\n    }\n\n    setTimeout(() => {\n      if (!this._receivedResponse) {\n        connLogger.error({\n          msg: 'connection time out',\n          timeout: clientOptions.connectTimeout\n        });\n        this.handleConnectionResponse(new Error('Timeout'));\n        this._connectionTimedOut = true;\n      }\n    }, clientOptions.connectTimeout);\n  }\n\n  parseAttributeList(csv) {\n    if (!csv) {\n      return ['*', '+'];\n    }\n\n    const list = csv.split(',').map(item => item.trim());\n\n    if (!(list !== null && list !== void 0 && list.length)) {\n      return ['*', '+'];\n    }\n\n    return list;\n  }\n\n}","map":{"version":3,"sources":["server/lib/ldap/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["import ldapjs from 'ldapjs';\n\nimport { settings } from '../../../app/settings/server';\nimport type { ILDAPConnectionOptions, LDAPEncryptionType, LDAPSearchScope } from '../../../definition/ldap/ILDAPOptions';\nimport type { ILDAPEntry } from '../../../definition/ldap/ILDAPEntry';\nimport type { ILDAPCallback, ILDAPPageCallback } from '../../../definition/ldap/ILDAPCallback';\nimport { logger, connLogger, searchLogger, authLogger, bindLogger, mapLogger } from './Logger';\nimport { getLDAPConditionalSetting } from './getLDAPConditionalSetting';\n\ninterface ILDAPEntryCallback<T> {\n\t(entry: ldapjs.SearchEntry): T | undefined;\n}\n\ninterface ILDAPSearchEndCallback {\n\t(error?: any): void;\n}\n\ninterface ILDAPSearchPageCallback {\n\t(result: ldapjs.SearchEntry[]): void;\n}\n\ninterface ILDAPSearchAllCallbacks<T> {\n\tdataCallback?: ILDAPSearchPageCallback;\n\tendCallback?: ILDAPSearchEndCallback;\n\tentryCallback?: ILDAPEntryCallback<T>;\n}\n\ntype ILDAPExtractedValue = string | Array<ILDAPExtractedValue>;\n\nexport class LDAPConnection {\n\tpublic ldapjs: any;\n\n\tpublic connected: boolean;\n\n\tpublic options: ILDAPConnectionOptions;\n\n\tpublic client: ldapjs.Client;\n\n\tprivate _receivedResponse: boolean;\n\n\tprivate _connectionTimedOut: boolean;\n\n\tprivate _connectionCallback: ILDAPCallback;\n\n\tprivate usingAuthentication: boolean;\n\n\tconstructor() {\n\t\tthis.ldapjs = ldapjs;\n\n\t\tthis.connected = false;\n\t\tthis._receivedResponse = false;\n\t\tthis._connectionTimedOut = false;\n\n\t\tthis.options = {\n\t\t\thost: settings.get<string>('LDAP_Host') ?? '',\n\t\t\tport: settings.get<number>('LDAP_Port') ?? 389,\n\t\t\treconnect: settings.get<boolean>('LDAP_Reconnect') ?? false,\n\t\t\ttimeout: settings.get<number>('LDAP_Timeout') ?? 60000,\n\t\t\tconnectionTimeout: settings.get<number>('LDAP_Connect_Timeout') ?? 1000,\n\t\t\tidleTimeout: settings.get<number>('LDAP_Idle_Timeout') ?? 1000,\n\t\t\tencryption: settings.get<LDAPEncryptionType>('LDAP_Encryption') ?? 'plain',\n\t\t\tcaCert: settings.get<string>('LDAP_CA_Cert'),\n\t\t\trejectUnauthorized: settings.get<boolean>('LDAP_Reject_Unauthorized') || false,\n\t\t\tbaseDN: settings.get<string>('LDAP_BaseDN') ?? '',\n\t\t\tuserSearchFilter: settings.get<string>('LDAP_User_Search_Filter') ?? '',\n\t\t\tuserSearchScope: settings.get<LDAPSearchScope>('LDAP_User_Search_Scope') ?? 'sub',\n\t\t\tuserSearchField: getLDAPConditionalSetting<string>('LDAP_User_Search_Field') ?? '',\n\t\t\tsearchPageSize: settings.get<number>('LDAP_Search_Page_Size') ?? 250,\n\t\t\tsearchSizeLimit: settings.get<number>('LDAP_Search_Size_Limit') ?? 1000,\n\t\t\tuniqueIdentifierField: settings.get<string>('LDAP_Unique_Identifier_Field'),\n\t\t\tgroupFilterEnabled: settings.get<boolean>('LDAP_Group_Filter_Enable') ?? false,\n\t\t\tgroupFilterObjectClass: settings.get<string>('LDAP_Group_Filter_ObjectClass'),\n\t\t\tgroupFilterGroupIdAttribute: settings.get<string>('LDAP_Group_Filter_Group_Id_Attribute'),\n\t\t\tgroupFilterGroupMemberAttribute: settings.get<string>('LDAP_Group_Filter_Group_Member_Attribute'),\n\t\t\tgroupFilterGroupMemberFormat: settings.get<string>('LDAP_Group_Filter_Group_Member_Format'),\n\t\t\tgroupFilterGroupName: settings.get<string>('LDAP_Group_Filter_Group_Name'),\n\t\t\tauthentication: settings.get<boolean>('LDAP_Authentication') ?? false,\n\t\t\tauthenticationUserDN: settings.get<string>('LDAP_Authentication_UserDN') ?? '',\n\t\t\tauthenticationPassword: settings.get<string>('LDAP_Authentication_Password') ?? '',\n\t\t\tattributesToQuery: this.parseAttributeList(settings.get<string>('LDAP_User_Search_AttributesToQuery')),\n\t\t};\n\n\t\tif (!this.options.host) {\n\t\t\tlogger.warn('LDAP Host is not configured.');\n\t\t}\n\t\tif (!this.options.baseDN) {\n\t\t\tlogger.warn('LDAP Search BaseDN is not configured.');\n\t\t}\n\t}\n\n\tpublic async connect(): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.initializeConnection((error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\treturn resolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic disconnect(): void {\n\t\tthis.usingAuthentication = false;\n\t\tthis.connected = false;\n\t\tconnLogger.info('Disconnecting');\n\n\t\tif (this.client) {\n\t\t\tthis.client.unbind();\n\t\t}\n\t}\n\n\tpublic async testConnection(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.connect();\n\t\t\tawait this.maybeBindDN();\n\t\t} finally {\n\t\t\tthis.disconnect();\n\t\t}\n\t}\n\n\tpublic async searchByUsername(escapedUsername: string): Promise<ILDAPEntry[]> {\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: this.getUserFilter(escapedUsername),\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: this.options.searchSizeLimit,\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (this.options.searchPageSize > 0) {\n\t\t\tsearchOptions.paged = {\n\t\t\t\tpageSize: this.options.searchPageSize,\n\t\t\t\tpagePause: false,\n\t\t\t};\n\t\t}\n\n\t\tsearchLogger.info({\n\t\t\tmsg: 'Searching by username',\n\t\t\tusername: escapedUsername,\n\t\t\tbaseDN: this.options.baseDN,\n\t\t\tsearchOptions,\n\t\t});\n\t\treturn this.search(this.options.baseDN, searchOptions);\n\t}\n\n\tpublic async findOneByUsername(username: string): Promise<ILDAPEntry | undefined> {\n\t\tconst results = await this.searchByUsername(username);\n\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchById(id: string, attribute?: string): Promise<ILDAPEntry[]> {\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (attribute) {\n\t\t\tsearchOptions.filter = new this.ldapjs.filters.EqualityFilter({\n\t\t\t\tattribute,\n\t\t\t\tvalue: Buffer.from(id, 'hex'),\n\t\t\t});\n\t\t} else if (this.options.uniqueIdentifierField) {\n\t\t\t// If we don't know what attribute the id came from, we have to look for all of them.\n\t\t\tconst possibleFields = this.options.uniqueIdentifierField.split(',').concat(this.options.userSearchField.split(','));\n\t\t\tconst filters = [];\n\t\t\tfor (const field of possibleFields) {\n\t\t\t\tif (!field) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfilters.push(\n\t\t\t\t\tnew this.ldapjs.filters.EqualityFilter({\n\t\t\t\t\t\tattribute: field,\n\t\t\t\t\t\tvalue: Buffer.from(id, 'hex'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\tsearchOptions.filter = new this.ldapjs.filters.OrFilter({ filters });\n\t\t} else {\n\t\t\tthrow new Error('Unique Identifier Field is not configured.');\n\t\t}\n\n\t\tsearchLogger.info({ msg: 'Searching by id', id });\n\t\tsearchLogger.debug({ msg: 'search filter', searchOptions, baseDN: this.options.baseDN });\n\n\t\treturn this.search(this.options.baseDN, searchOptions);\n\t}\n\n\tpublic async findOneById(id: string, attribute?: string): Promise<ILDAPEntry | undefined> {\n\t\tconst results = await this.searchById(id, attribute);\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchAllUsers<T = ldapjs.SearchEntry>({\n\t\tdataCallback,\n\t\tendCallback,\n\t\tentryCallback,\n\t}: ILDAPSearchAllCallbacks<T>): Promise<void> {\n\t\tsearchLogger.info('Searching all users');\n\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: this.getUserFilter('*'),\n\t\t\tscope: this.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: this.options.searchSizeLimit,\n\t\t\tattributes: this.options.attributesToQuery,\n\t\t};\n\n\t\tif (this.options.searchPageSize > 0) {\n\t\t\tlet count = 0;\n\t\t\tawait this.doPagedSearch<T>(\n\t\t\t\tthis.options.baseDN,\n\t\t\t\tsearchOptions,\n\t\t\t\tthis.options.searchPageSize,\n\t\t\t\t(error, entries: ldapjs.SearchEntry[], { end, next } = { end: false, next: undefined }) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tendCallback?.(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcount += entries.length;\n\t\t\t\t\tdataCallback?.(entries);\n\t\t\t\t\tif (end) {\n\t\t\t\t\t\tendCallback?.();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\tnext(count);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tentryCallback,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doAsyncSearch(\n\t\t\tthis.options.baseDN,\n\t\t\tsearchOptions,\n\t\t\t(error, result) => {\n\t\t\t\tdataCallback?.(result);\n\t\t\t\tendCallback?.(error);\n\t\t\t},\n\t\t\tentryCallback,\n\t\t);\n\t}\n\n\tpublic async authenticate(dn: string, password: string): Promise<boolean> {\n\t\tauthLogger.info({ msg: 'Authenticating', dn });\n\n\t\ttry {\n\t\t\tawait this.bindDN(dn, password);\n\n\t\t\tauthLogger.info({ msg: 'Authenticated', dn });\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tauthLogger.info({ msg: 'Not authenticated', dn });\n\t\t\tauthLogger.debug({ msg: 'error', error });\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic async search(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<ILDAPEntry[]> {\n\t\treturn this.doCustomSearch<ILDAPEntry>(baseDN, searchOptions, (entry) => this.extractLdapEntryData(entry));\n\t}\n\n\tpublic async searchRaw(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<ldapjs.SearchEntry[]> {\n\t\treturn this.doCustomSearch<ldapjs.SearchEntry>(baseDN, searchOptions, (entry) => entry);\n\t}\n\n\tpublic async searchAndCount(baseDN: string, searchOptions: ldapjs.SearchOptions): Promise<number> {\n\t\tlet count = 0;\n\t\tawait this.doCustomSearch(baseDN, searchOptions, () => {\n\t\t\tcount++;\n\t\t});\n\n\t\treturn count;\n\t}\n\n\tpublic extractLdapAttribute(value: Buffer | Buffer[] | string): ILDAPExtractedValue {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map((item) => this.extractLdapAttribute(item));\n\t\t}\n\n\t\tif (value instanceof Buffer) {\n\t\t\treturn value.toString();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tpublic extractLdapEntryData(entry: ldapjs.SearchEntry): ILDAPEntry {\n\t\tconst values: ILDAPEntry = {\n\t\t\t_raw: entry.raw,\n\t\t};\n\n\t\tObject.keys(values._raw).forEach((key) => {\n\t\t\tvalues[key] = this.extractLdapAttribute(values._raw[key]);\n\n\t\t\tconst dataType = typeof values[key];\n\t\t\t// eslint-disable-next-line no-control-regex\n\t\t\tif (dataType === 'string' && values[key].length > 100 && /[\\x00-\\x1F]/.test(values[key])) {\n\t\t\t\tmapLogger.debug({\n\t\t\t\t\tmsg: 'Extracted Attribute',\n\t\t\t\t\tkey,\n\t\t\t\t\ttype: dataType,\n\t\t\t\t\tlength: values[key].length,\n\t\t\t\t\tvalue: `${values[key].substr(0, 100)}...`,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmapLogger.debug({ msg: 'Extracted Attribute', key, type: dataType, value: values[key] });\n\t\t});\n\n\t\treturn values;\n\t}\n\n\tpublic async doCustomSearch<T>(baseDN: string, searchOptions: ldapjs.SearchOptions, entryCallback: ILDAPEntryCallback<T>): Promise<T[]> {\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tif (!searchOptions.scope) {\n\t\t\tsearchOptions.scope = this.options.userSearchScope || 'sub';\n\t\t}\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tlet realEntries = 0;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.client.search(baseDN, searchOptions, (error, res: ldapjs.SearchCallbackResponse) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tsearchLogger.error(error);\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tres.on('error', (error) => {\n\t\t\t\t\tsearchLogger.error(error);\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\n\t\t\t\tconst entries: T[] = [];\n\n\t\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = entryCallback(entry);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tentries.push(result as T);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trealEntries++;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tres.on('end', () => {\n\t\t\t\t\tsearchLogger.info(`LDAP Search found ${realEntries} entries and loaded the data of ${entries.length}.`);\n\t\t\t\t\tresolve(entries);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/*\n\t\tCreate an LDAP search filter based on the username\n\t*/\n\tpublic getUserFilter(username: string): string {\n\t\tconst filter: string[] = [];\n\n\t\tthis.addUserFilters(filter, username);\n\n\t\tconst usernameFilter = this.options.userSearchField.split(',').map((item) => `(${item}=${username})`);\n\n\t\tif (usernameFilter.length === 0) {\n\t\t\tlogger.error('LDAP_LDAP_User_Search_Field not defined');\n\t\t} else if (usernameFilter.length === 1) {\n\t\t\tfilter.push(`${usernameFilter[0]}`);\n\t\t} else {\n\t\t\tfilter.push(`(|${usernameFilter.join('')})`);\n\t\t}\n\n\t\treturn `(&${filter.join('')})`;\n\t}\n\n\tpublic async isUserAcceptedByGroupFilter(username: string, userdn: string): Promise<boolean> {\n\t\tif (!this.options.groupFilterEnabled) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst filter = ['(&'];\n\n\t\tif (this.options.groupFilterObjectClass) {\n\t\t\tfilter.push(`(objectclass=${this.options.groupFilterObjectClass})`);\n\t\t}\n\n\t\tif (this.options.groupFilterGroupMemberAttribute) {\n\t\t\tfilter.push(`(${this.options.groupFilterGroupMemberAttribute}=${this.options.groupFilterGroupMemberFormat})`);\n\t\t}\n\n\t\tif (this.options.groupFilterGroupIdAttribute) {\n\t\t\tfilter.push(`(${this.options.groupFilterGroupIdAttribute}=${this.options.groupFilterGroupName})`);\n\t\t}\n\t\tfilter.push(')');\n\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: filter\n\t\t\t\t.join('')\n\t\t\t\t.replace(/#{username}/g, username)\n\t\t\t\t.replace(/#{userdn}/g, userdn),\n\t\t\tscope: 'sub',\n\t\t};\n\n\t\tsearchLogger.debug({ msg: 'Group filter LDAP:', filter: searchOptions.filter });\n\n\t\tconst result = await this.searchRaw(this.options.baseDN, searchOptions);\n\n\t\tif (!Array.isArray(result) || result.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected addUserFilters(filters: string[], _username: string): void {\n\t\tconst { userSearchFilter } = this.options;\n\n\t\tif (userSearchFilter !== '') {\n\t\t\tif (userSearchFilter[0] === '(') {\n\t\t\t\tfilters.push(`${userSearchFilter}`);\n\t\t\t} else {\n\t\t\t\tfilters.push(`(${userSearchFilter})`);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async bindDN(dn: string, password: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tthis.client.bind(dn, password, (error) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async doAsyncSearch<T = ldapjs.SearchEntry>(\n\t\tbaseDN: string,\n\t\tsearchOptions: ldapjs.SearchOptions,\n\t\tcallback: ILDAPCallback,\n\t\tentryCallback?: ILDAPEntryCallback<T>,\n\t): Promise<void> {\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tthis.client.search(baseDN, searchOptions, (error: ldapjs.Error | null, res: ldapjs.SearchCallbackResponse): void => {\n\t\t\tif (error) {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tres.on('error', (error) => {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t});\n\n\t\t\tconst entries: T[] = [];\n\n\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('end', () => {\n\t\t\t\tsearchLogger.info({ msg: 'Search result count', count: entries.length });\n\t\t\t\tcallback(null, entries);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate processSearchPage<T>(\n\t\t{ entries, title, end, next }: { entries: T[]; title: string; end: boolean; next?: Function },\n\t\tcallback: ILDAPPageCallback,\n\t): void {\n\t\tsearchLogger.info(title);\n\t\t// Force LDAP idle to wait the record processing\n\t\tthis._updateIdle(true);\n\n\t\tcallback(null, entries, {\n\t\t\tend,\n\t\t\tnext: () => {\n\t\t\t\t// Reset idle timer\n\t\t\t\tthis._updateIdle();\n\t\t\t\tnext?.();\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async doPagedSearch<T = ldapjs.SearchEntry>(\n\t\tbaseDN: string,\n\t\tsearchOptions: ldapjs.SearchOptions,\n\t\tpageSize: number,\n\t\tcallback: ILDAPPageCallback,\n\t\tentryCallback?: ILDAPEntryCallback<T>,\n\t): Promise<void> {\n\t\tsearchOptions.paged = {\n\t\t\tpageSize,\n\t\t\tpagePause: true,\n\t\t};\n\n\t\tawait this.runBeforeSearch(searchOptions);\n\n\t\tsearchLogger.debug({ msg: 'searchOptions', searchOptions, baseDN });\n\n\t\tthis.client.search(baseDN, searchOptions, (error: ldapjs.Error | null, res: ldapjs.SearchCallbackResponse): void => {\n\t\t\tif (error) {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tres.on('error', (error) => {\n\t\t\t\tsearchLogger.error(error);\n\t\t\t\tcallback(error);\n\t\t\t});\n\n\t\t\tlet entries: T[] = [];\n\t\t\tconst internalPageSize = pageSize * 2;\n\n\t\t\tres.on('searchEntry', (entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\n\t\t\t\t\tif (entries.length >= internalPageSize) {\n\t\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t\ttitle: 'Internal Page',\n\t\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tentries = [];\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsearchLogger.error(e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('page', (_result, next) => {\n\t\t\t\tif (!next) {\n\t\t\t\t\tthis._updateIdle(true);\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Final Page',\n\t\t\t\t\t\t\tend: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t} else if (entries.length) {\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Page',\n\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\tnext,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.on('end', () => {\n\t\t\t\tif (entries.length) {\n\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\ttitle: 'Final Page',\n\t\t\t\t\t\t\tend: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t\tentries = [];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _updateIdle(override?: boolean): void {\n\t\t// @ts-ignore calling a private method\n\t\tthis.client._updateIdle(override);\n\t}\n\n\tprotected async maybeBindDN(): Promise<void> {\n\t\tif (this.usingAuthentication) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.options.authentication) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.options.authenticationUserDN) {\n\t\t\tlogger.error('Invalid UserDN for authentication');\n\t\t\treturn;\n\t\t}\n\n\t\tbindLogger.info({ msg: 'Binding UserDN', userDN: this.options.authenticationUserDN });\n\t\ttry {\n\t\t\tawait this.bindDN(this.options.authenticationUserDN, this.options.authenticationPassword);\n\t\t\tthis.usingAuthentication = true;\n\t\t} catch (error) {\n\t\t\tauthLogger.error({\n\t\t\t\tmsg: 'Base Authentication Issue',\n\t\t\t\terr: error,\n\t\t\t\tdn: this.options.authenticationUserDN,\n\t\t\t});\n\t\t\tthis.usingAuthentication = false;\n\t\t}\n\t}\n\n\tprotected async runBeforeSearch(_searchOptions: ldapjs.SearchOptions): Promise<void> {\n\t\treturn this.maybeBindDN();\n\t}\n\n\t/*\n\t\tGet list of options to initialize a new ldapjs Client\n\t*/\n\tprivate getClientOptions(): {\n\t\tclientOptions: ldapjs.ClientOptions;\n\t\ttlsOptions: Record<string, any>;\n\t} {\n\t\tconst clientOptions: ldapjs.ClientOptions = {\n\t\t\turl: `${this.options.host}:${this.options.port}`,\n\t\t\ttimeout: this.options.timeout,\n\t\t\tconnectTimeout: this.options.connectionTimeout,\n\t\t\tidleTimeout: this.options.idleTimeout,\n\t\t\treconnect: this.options.reconnect,\n\t\t\tlog: connLogger,\n\t\t};\n\n\t\tconst tlsOptions: Record<string, any> = {\n\t\t\trejectUnauthorized: this.options.rejectUnauthorized,\n\t\t};\n\n\t\tif (this.options.caCert) {\n\t\t\t// Split CA cert into array of strings\n\t\t\tconst chainLines = this.options.caCert.split('\\n');\n\t\t\tlet cert: string[] = [];\n\t\t\tconst ca: string[] = [];\n\t\t\tchainLines.forEach((line) => {\n\t\t\t\tcert.push(line);\n\t\t\t\tif (line.match(/-END CERTIFICATE-/)) {\n\t\t\t\t\tca.push(cert.join('\\n'));\n\t\t\t\t\tcert = [];\n\t\t\t\t}\n\t\t\t});\n\t\t\ttlsOptions.ca = ca;\n\t\t}\n\n\t\tif (this.options.encryption === 'ssl') {\n\t\t\tclientOptions.url = `ldaps://${clientOptions.url}`;\n\t\t\tclientOptions.tlsOptions = tlsOptions;\n\t\t} else {\n\t\t\tclientOptions.url = `ldap://${clientOptions.url}`;\n\t\t}\n\n\t\treturn {\n\t\t\tclientOptions,\n\t\t\ttlsOptions,\n\t\t};\n\t}\n\n\tprivate handleConnectionResponse(error: any, response?: any): void {\n\t\tif (!this._receivedResponse) {\n\t\t\tthis._receivedResponse = true;\n\t\t\tthis._connectionCallback(error, response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._connectionTimedOut && !error) {\n\t\t\tconnLogger.info('Received a response after the connection timedout.');\n\t\t} else {\n\t\t\tlogger.debug('Ignored error/response:');\n\t\t}\n\n\t\tif (error) {\n\t\t\tconnLogger.debug(error);\n\t\t} else {\n\t\t\tconnLogger.debug(response);\n\t\t}\n\t}\n\n\tprivate initializeConnection(callback: ILDAPCallback): void {\n\t\tconnLogger.info('Init Setup');\n\t\tthis._receivedResponse = false;\n\t\tthis._connectionTimedOut = false;\n\t\tthis._connectionCallback = callback;\n\n\t\tconst { clientOptions, tlsOptions } = this.getClientOptions();\n\t\tconnLogger.info({ msg: 'Connecting', url: clientOptions.url });\n\t\tconnLogger.debug({ msg: 'clientOptions', clientOptions });\n\n\t\tthis.client = ldapjs.createClient(clientOptions);\n\n\t\tthis.client.on('error', (error) => {\n\t\t\tconnLogger.error(error);\n\t\t\tthis.handleConnectionResponse(error, null);\n\t\t});\n\n\t\tthis.client.on('idle', () => {\n\t\t\tsearchLogger.info('Idle');\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tthis.client.on('close', () => {\n\t\t\tsearchLogger.info('Closed');\n\t\t});\n\n\t\tif (this.options.encryption === 'tls') {\n\t\t\t// Set host parameter for tls.connect which is used by ldapjs starttls. This may not be needed anymore\n\t\t\t// https://github.com/RocketChat/Rocket.Chat/issues/2035\n\t\t\t// https://github.com/mcavage/node-ldapjs/issues/349\n\t\t\ttlsOptions.host = this.options.host;\n\n\t\t\tconnLogger.info('Starting TLS');\n\t\t\tconnLogger.debug({ msg: 'tlsOptions', tlsOptions });\n\n\t\t\tthis.client.starttls(tlsOptions, null, (error, response) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconnLogger.error({ msg: 'TLS connection', error });\n\t\t\t\t\treturn this.handleConnectionResponse(error, null);\n\t\t\t\t}\n\n\t\t\t\tconnLogger.info('TLS connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.handleConnectionResponse(null, response);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.on('connect', (response) => {\n\t\t\t\tconnLogger.info('LDAP connected');\n\t\t\t\tthis.connected = true;\n\t\t\t\tthis.handleConnectionResponse(null, response);\n\t\t\t});\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tif (!this._receivedResponse) {\n\t\t\t\tconnLogger.error({ msg: 'connection time out', timeout: clientOptions.connectTimeout });\n\t\t\t\tthis.handleConnectionResponse(new Error('Timeout'));\n\t\t\t\tthis._connectionTimedOut = true;\n\t\t\t}\n\t\t}, clientOptions.connectTimeout);\n\t}\n\n\tprivate parseAttributeList(csv: string | undefined): Array<string> {\n\t\tif (!csv) {\n\t\t\treturn ['*', '+'];\n\t\t}\n\n\t\tconst list = csv.split(',').map((item) => item.trim());\n\t\tif (!list?.length) {\n\t\t\treturn ['*', '+'];\n\t\t}\n\n\t\treturn list;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"48deac1db5db08087e19e5cc12bb88969b5a9503"}
