{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/dns.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/dns.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/dns.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/dns.ts","sourceRoot":"","sources":["app/api/server/v1/dns.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,iDAAiD,CAAC;AAEzF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;SACtF;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;SACtF;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { API } from '../api';\nimport { resolveSRV, resolveTXT } from '../../../federation/server/functions/resolveDNS';\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.srv',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveSRV(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.txt',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/dns.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/dns.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 2);\nlet resolveSRV, resolveTXT;\nmodule.link(\"../../../federation/server/functions/resolveDNS\", {\n  resolveSRV(v) {\n    resolveSRV = v;\n  },\n\n  resolveTXT(v) {\n    resolveTXT = v;\n  }\n\n}, 3);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute('dns.resolve.srv', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.ObjectIncluding({\n        url: String\n      }));\n      const {\n        url\n      } = this.queryParams;\n\n      if (!url) {\n        throw new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n      }\n\n      const resolved = Promise.await(resolveSRV(url));\n      return API.v1.success({\n        resolved\n      });\n    });\n  }\n\n});\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('dns.resolve.txt', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.ObjectIncluding({\n        url: String\n      }));\n      const {\n        url\n      } = this.queryParams;\n\n      if (!url) {\n        throw new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n      }\n\n      const resolved = Promise.await(resolveTXT(url));\n      return API.v1.success({\n        resolved\n      });\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/dns.ts"],"names":[],"mappings":"AAAA,IAAA,MAAA;AAAS,MAAQ,CAAA,IAAR,CAAc,eAAd,EAA8B;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAA9B,EAA8B,CAA9B;AAA8B,IAAA,KAAA,EAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA;AAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AAAA,EAAA,GAAA,CAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA,EAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iDAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAMvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CG;AACH,GAAG,CAAC,EAAJ,CAAO,QAAP,CACC,iBADD,EAEC;AAAE,EAAA,YAAY,EAAE;AAAhB,CAFD,EAGC;AACO,EAAA,GAAN;AAAA,oCAAS;AACR,MAAA,KAAK,CACJ,KAAK,WADD,EAEJ,KAAK,CAAC,eAAN,CAAsB;AACrB,QAAA,GAAG,EAAE;AADgB,OAAtB,CAFI,CAAL;AAOA,YAAM;AAAE,QAAA;AAAF,UAAU,KAAK,WAArB;;AACA,UAAI,CAAC,GAAL,EAAU;AACT,cAAM,IAAI,MAAM,CAAC,KAAX,CAAiB,qBAAjB,EAAwC,sCAAxC,CAAN;AACA;;AAED,YAAM,QAAQ,iBAAS,UAAU,CAAC,GAAD,CAAnB,CAAd;AAEA,aAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe;AAAE,QAAA;AAAF,OAAf,CAAP;AACA,KAhBD;AAAA;;AADD,CAHD;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;;AACH,GAAG,CAAC,EAAJ,CAAO,QAAP,CACC,iBADD,EAEC;AAAE,EAAA,YAAY,EAAE;AAAhB,CAFD,EAGC;AACO,EAAA,IAAN;AAAA,oCAAU;AACT,MAAA,KAAK,CACJ,KAAK,WADD,EAEJ,KAAK,CAAC,eAAN,CAAsB;AACrB,QAAA,GAAG,EAAE;AADgB,OAAtB,CAFI,CAAL;AAOA,YAAM;AAAE,QAAA;AAAF,UAAU,KAAK,WAArB;;AACA,UAAI,CAAC,GAAL,EAAU;AACT,cAAM,IAAI,MAAM,CAAC,KAAX,CAAiB,qBAAjB,EAAwC,sCAAxC,CAAN;AACA;;AAED,YAAM,QAAQ,iBAAS,UAAU,CAAC,GAAD,CAAnB,CAAd;AAEA,aAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe;AAAE,QAAA;AAAF,OAAf,CAAP;AACA,KAhBD;AAAA;;AADD,CAHD","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { API } from '../api';\nimport { resolveSRV, resolveTXT } from '../../../federation/server/functions/resolveDNS';\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.srv',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveSRV(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.txt',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"6ec07e689aafa71a965468e50e081148ff80f075"}
