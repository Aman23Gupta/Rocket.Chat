{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatBusinessHours.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/LivechatBusinessHours.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatBusinessHours.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/LivechatBusinessHours.ts","sourceRoot":"","sources":["app/models/server/raw/LivechatBusinessHours.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindOneOptions, ObjectId, WithoutProjection } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../definition/ILivechatBusinessHour';\n\nexport interface IWorkHoursCronJobsItem {\n\tday: string;\n\ttimes: string[];\n}\n\nexport interface IWorkHoursCronJobsWrapper {\n\tstart: IWorkHoursCronJobsItem[];\n\tfinish: IWorkHoursCronJobsItem[];\n}\n\nexport class LivechatBusinessHoursRaw extends BaseRaw<ILivechatBusinessHour> {\n\tasync findOneDefaultBusinessHour(options?: undefined): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour(\n\t\toptions: WithoutProjection<FindOneOptions<ILivechatBusinessHour>>,\n\t): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour<P>(\n\t\toptions: FindOneOptions<P extends ILivechatBusinessHour ? ILivechatBusinessHour : P>,\n\t): Promise<P | null>;\n\n\tfindOneDefaultBusinessHour<P>(options?: any): Promise<ILivechatBusinessHour | P | null> {\n\t\treturn this.findOne({ type: LivechatBusinessHourTypes.DEFAULT }, options);\n\t}\n\n\tfindActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day, 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindDefaultActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\ttype: LivechatBusinessHourTypes.DEFAULT,\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day, 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tasync insertOne(data: Omit<ILivechatBusinessHour, '_id'>): Promise<any> {\n\t\treturn this.col.insertOne({\n\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t...{ ts: new Date() },\n\t\t\t...data,\n\t\t});\n\t}\n\n\tfindHoursToScheduleJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$facet: {\n\t\t\t\t\t\tstart: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.start.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.start.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfinish: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.finish.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.finish.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray() as any;\n\t}\n\n\tasync findActiveBusinessHoursToOpen(\n\t\tday: string,\n\t\tstart: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'start.cron.dayOfWeek': day,\n\t\t\t\t\t'start.cron.time': start,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tasync findActiveBusinessHoursToClose(\n\t\tday: string,\n\t\tfinish: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'finish.cron.dayOfWeek': day,\n\t\t\t\t\t'finish.cron.time': finish,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatBusinessHours.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/LivechatBusinessHours.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  LivechatBusinessHoursRaw: () => LivechatBusinessHoursRaw\n});\nlet ObjectId;\nmodule.link(\"mongodb\", {\n  ObjectId(v) {\n    ObjectId = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\nlet LivechatBusinessHourTypes;\nmodule.link(\"../../../../definition/ILivechatBusinessHour\", {\n  LivechatBusinessHourTypes(v) {\n    LivechatBusinessHourTypes = v;\n  }\n\n}, 2);\n\nclass LivechatBusinessHoursRaw extends BaseRaw {\n  findOneDefaultBusinessHour(options) {\n    return this.findOne({\n      type: LivechatBusinessHourTypes.DEFAULT\n    }, options);\n  }\n\n  findActiveAndOpenBusinessHoursByDay(day, options) {\n    return this.find({\n      active: true,\n      workHours: {\n        $elemMatch: {\n          $or: [{\n            'start.cron.dayOfWeek': day,\n            'finish.cron.dayOfWeek': day\n          }],\n          open: true\n        }\n      }\n    }, options).toArray();\n  }\n\n  findDefaultActiveAndOpenBusinessHoursByDay(day, options) {\n    return this.find({\n      type: LivechatBusinessHourTypes.DEFAULT,\n      active: true,\n      workHours: {\n        $elemMatch: {\n          $or: [{\n            'start.cron.dayOfWeek': day,\n            'finish.cron.dayOfWeek': day\n          }],\n          open: true\n        }\n      }\n    }, options).toArray();\n  }\n\n  insertOne(data) {\n    return Promise.asyncApply(() => {\n      return this.col.insertOne(_objectSpread(_objectSpread({\n        _id: new ObjectId().toHexString()\n      }, {\n        ts: new Date()\n      }), data));\n    });\n  }\n\n  findHoursToScheduleJobs() {\n    return this.col.aggregate([{\n      $facet: {\n        start: [{\n          $match: {\n            active: true\n          }\n        }, {\n          $project: {\n            _id: 0,\n            workHours: 1\n          }\n        }, {\n          $unwind: {\n            path: '$workHours'\n          }\n        }, {\n          $match: {\n            'workHours.open': true\n          }\n        }, {\n          $group: {\n            _id: {\n              day: '$workHours.start.cron.dayOfWeek'\n            },\n            times: {\n              $addToSet: '$workHours.start.cron.time'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            day: '$_id.day',\n            times: 1\n          }\n        }],\n        finish: [{\n          $match: {\n            active: true\n          }\n        }, {\n          $project: {\n            _id: 0,\n            workHours: 1\n          }\n        }, {\n          $unwind: {\n            path: '$workHours'\n          }\n        }, {\n          $match: {\n            'workHours.open': true\n          }\n        }, {\n          $group: {\n            _id: {\n              day: '$workHours.finish.cron.dayOfWeek'\n            },\n            times: {\n              $addToSet: '$workHours.finish.cron.time'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            day: '$_id.day',\n            times: 1\n          }\n        }]\n      }\n    }]).toArray();\n  }\n\n  findActiveBusinessHoursToOpen(day, start, type, options) {\n    return Promise.asyncApply(() => {\n      const query = {\n        active: true,\n        workHours: {\n          $elemMatch: {\n            'start.cron.dayOfWeek': day,\n            'start.cron.time': start,\n            'open': true\n          }\n        }\n      };\n\n      if (type) {\n        query.type = type;\n      }\n\n      return this.col.find(query, options).toArray();\n    });\n  }\n\n  findActiveBusinessHoursToClose(day, finish, type, options) {\n    return Promise.asyncApply(() => {\n      const query = {\n        active: true,\n        workHours: {\n          $elemMatch: {\n            'finish.cron.dayOfWeek': day,\n            'finish.cron.time': finish,\n            'open': true\n          }\n        }\n      };\n\n      if (type) {\n        query.type = type;\n      }\n\n      return this.col.find(query, options).toArray();\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/LivechatBusinessHours.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindOneOptions, ObjectId, WithoutProjection } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../definition/ILivechatBusinessHour';\n\nexport interface IWorkHoursCronJobsItem {\n\tday: string;\n\ttimes: string[];\n}\n\nexport interface IWorkHoursCronJobsWrapper {\n\tstart: IWorkHoursCronJobsItem[];\n\tfinish: IWorkHoursCronJobsItem[];\n}\n\nexport class LivechatBusinessHoursRaw extends BaseRaw<ILivechatBusinessHour> {\n\tasync findOneDefaultBusinessHour(options?: undefined): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour(\n\t\toptions: WithoutProjection<FindOneOptions<ILivechatBusinessHour>>,\n\t): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour<P>(\n\t\toptions: FindOneOptions<P extends ILivechatBusinessHour ? ILivechatBusinessHour : P>,\n\t): Promise<P | null>;\n\n\tfindOneDefaultBusinessHour<P>(options?: any): Promise<ILivechatBusinessHour | P | null> {\n\t\treturn this.findOne({ type: LivechatBusinessHourTypes.DEFAULT }, options);\n\t}\n\n\tfindActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day, 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindDefaultActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\ttype: LivechatBusinessHourTypes.DEFAULT,\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day, 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tasync insertOne(data: Omit<ILivechatBusinessHour, '_id'>): Promise<any> {\n\t\treturn this.col.insertOne({\n\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t...{ ts: new Date() },\n\t\t\t...data,\n\t\t});\n\t}\n\n\tfindHoursToScheduleJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$facet: {\n\t\t\t\t\t\tstart: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.start.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.start.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfinish: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.finish.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.finish.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray() as any;\n\t}\n\n\tasync findActiveBusinessHoursToOpen(\n\t\tday: string,\n\t\tstart: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'start.cron.dayOfWeek': day,\n\t\t\t\t\t'start.cron.time': start,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tasync findActiveBusinessHoursToClose(\n\t\tday: string,\n\t\tfinish: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'finish.cron.dayOfWeek': day,\n\t\t\t\t\t'finish.cron.time': finish,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"a51c99a91150f07e4c621e866302f09231b260a1"}
