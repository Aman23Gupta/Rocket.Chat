{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/listeners/listeners.module.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/modules/listeners/listeners.module.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/listeners/listeners.module.ts","inputSourceMap":{"version":3,"file":"server/modules/listeners/listeners.module.ts","sourceRoot":"","sources":["server/modules/listeners/listeners.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServiceClass } from '../../sdk/types/ServiceClass';\nimport { NotificationsModule } from '../notifications/notifications.module';\nimport { EnterpriseSettings, MeteorService } from '../../sdk/index';\nimport { IRoutingManagerConfig } from '../../../definition/IRoutingManagerConfig';\nimport { UserStatus } from '../../../definition/UserStatus';\nimport { isSettingColor } from '../../../definition/ISetting';\n\nconst STATUS_MAP: { [k: string]: number } = {\n\t[UserStatus.OFFLINE]: 0,\n\t[UserStatus.ONLINE]: 1,\n\t[UserStatus.AWAY]: 2,\n\t[UserStatus.BUSY]: 3,\n};\n\nexport const minimongoChangeMap: Record<string, string> = {\n\tinserted: 'added',\n\tupdated: 'changed',\n\tremoved: 'removed',\n};\n\nexport class ListenersModule {\n\tconstructor(service: IServiceClass, notifications: NotificationsModule) {\n\t\tservice.onEvent('emoji.deleteCustom', (emoji) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('deleteEmojiCustom', {\n\t\t\t\temojiData: emoji,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('emoji.updateCustom', (emoji) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateEmojiCustom', {\n\t\t\t\temojiData: emoji,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('notify.ephemeralMessage', (uid, rid, message) => {\n\t\t\tnotifications.notifyUserInThisInstance(uid, 'message', {\n\t\t\t\tgroupable: false,\n\t\t\t\t...message,\n\t\t\t\t_id: String(Date.now()),\n\t\t\t\trid,\n\t\t\t\tts: new Date(),\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('permission.changed', ({ clientAction, data }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('permissions-changed', clientAction, data);\n\t\t});\n\n\t\tservice.onEvent('room.avatarUpdate', ({ _id: rid, avatarETag: etag }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateAvatar', {\n\t\t\t\trid,\n\t\t\t\tetag,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.avatarUpdate', ({ username, avatarETag: etag }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateAvatar', {\n\t\t\t\tusername,\n\t\t\t\tetag,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.deleted', ({ _id: userId }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('Users:Deleted', {\n\t\t\t\tuserId,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.deleteCustomStatus', (userStatus) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('deleteCustomUserStatus', {\n\t\t\t\tuserStatusData: userStatus,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.nameChanged', (user) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('Users:NameChanged', user);\n\t\t});\n\n\t\tservice.onEvent('user.roleUpdate', (update) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('roles-change', update);\n\t\t});\n\n\t\tservice.onEvent('presence.status', ({ user }) => {\n\t\t\tconst { _id, username, status, statusText } = user;\n\t\t\tif (!status) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.notifyLoggedInThisInstance('user-status', [_id, username, STATUS_MAP[status], statusText]);\n\n\t\t\tif (_id) {\n\t\t\t\tnotifications.sendPresence(_id, [username, STATUS_MAP[status], statusText]);\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('user.updateCustomStatus', (userStatus) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateCustomUserStatus', {\n\t\t\t\tuserStatusData: userStatus,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('watch.messages', ({ message }) => {\n\t\t\tif (!message.rid) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.streamRoomMessage._emit('__my_messages__', [message], undefined, false, (streamer, _sub, eventName, args, allowed) =>\n\t\t\t\tstreamer.changedPayload(streamer.subscriptionName, 'id', {\n\t\t\t\t\teventName,\n\t\t\t\t\targs: [...args, allowed],\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tnotifications.streamRoomMessage.emitWithoutBroadcast(message.rid, message);\n\t\t});\n\n\t\tservice.onEvent('watch.subscriptions', ({ clientAction, subscription }) => {\n\t\t\tif (!subscription.u?._id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// emit a removed event on msg stream to remove the user's stream-room-messages subscription when the user is removed from room\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tnotifications.streamRoomMessage.__emit(subscription.u._id, clientAction, subscription);\n\t\t\t}\n\n\t\t\tnotifications.streamUser.__emit(subscription.u._id, clientAction, subscription);\n\n\t\t\tnotifications.notifyUserInThisInstance(subscription.u._id, 'subscriptions-changed', clientAction, subscription);\n\t\t});\n\n\t\tservice.onEvent('watch.roles', ({ clientAction, role }): void => {\n\t\t\tconst payload = {\n\t\t\t\ttype: clientAction,\n\t\t\t\t...role,\n\t\t\t};\n\t\t\tnotifications.streamRoles.emitWithoutBroadcast('roles', payload);\n\t\t});\n\n\t\tlet autoAssignAgent: IRoutingManagerConfig | undefined;\n\t\tasync function getRoutingManagerConfig(): Promise<IRoutingManagerConfig> {\n\t\t\tif (!autoAssignAgent) {\n\t\t\t\tautoAssignAgent = await MeteorService.getRoutingManagerConfig();\n\t\t\t}\n\n\t\t\treturn autoAssignAgent;\n\t\t}\n\n\t\tservice.onEvent('watch.inquiries', async ({ clientAction, inquiry, diff }): Promise<void> => {\n\t\t\tconst config = await getRoutingManagerConfig();\n\t\t\tif (!config || config.autoAssignAgent) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = minimongoChangeMap[clientAction];\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, {\n\t\t\t\t\t_id: inquiry._id,\n\t\t\t\t\tclientAction,\n\t\t\t\t});\n\n\t\t\t\tif (inquiry.department) {\n\t\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast(`department/${inquiry.department}`, { type, ...inquiry });\n\t\t\t\t}\n\n\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast('public', {\n\t\t\t\t\ttype,\n\t\t\t\t\t...inquiry,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, {\n\t\t\t\t...inquiry,\n\t\t\t\tclientAction,\n\t\t\t});\n\n\t\t\tif (!inquiry.department) {\n\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast('public', {\n\t\t\t\t\ttype,\n\t\t\t\t\t...inquiry,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(`department/${inquiry.department}`, { type, ...inquiry });\n\n\t\t\tif (clientAction === 'updated' && !diff?.department) {\n\t\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast('public', { type, ...inquiry });\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (setting._id === 'Livechat_Routing_Method') {\n\t\t\t\tautoAssignAgent = undefined;\n\t\t\t}\n\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tconst result = await EnterpriseSettings.changeSettingValue(setting);\n\t\t\t\tif (result !== undefined && !(result instanceof Error)) {\n\t\t\t\t\tsetting.value = result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (setting.hidden) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst value = {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t\t...(isSettingColor(setting) && { editor: setting.editor }),\n\t\t\t\tproperties: setting.properties,\n\t\t\t\tenterprise: setting.enterprise,\n\t\t\t\trequiredOnWizard: setting.requiredOnWizard,\n\t\t\t};\n\n\t\t\tif (setting.public === true) {\n\t\t\t\tnotifications.notifyAllInThisInstance('public-settings-changed', clientAction, value);\n\t\t\t}\n\n\t\t\tnotifications.notifyLoggedInThisInstance('private-settings-changed', clientAction, value);\n\t\t});\n\n\t\tservice.onEvent('watch.rooms', ({ clientAction, room }): void => {\n\t\t\t// this emit will cause the user to receive a 'rooms-changed' event\n\t\t\tnotifications.streamUser.__emit(room._id, clientAction, room);\n\n\t\t\tnotifications.streamRoomData.emitWithoutBroadcast(room._id, room);\n\t\t});\n\n\t\tservice.onEvent('watch.users', ({ clientAction, data, diff, unset, id }): void => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', {\n\t\t\t\t\t\tdiff,\n\t\t\t\t\t\tunset,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', { data, type: clientAction });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', { id, type: clientAction });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.integrationHistory', ({ clientAction, data, diff, id }): void => {\n\t\t\tif (!data?.integration?._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated': {\n\t\t\t\t\tnotifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tdiff,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'inserted': {\n\t\t\t\t\tnotifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.livechatDepartmentAgents', ({ clientAction, data }): void => {\n\t\t\tconst { agentId } = data;\n\t\t\tif (!agentId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.notifyUserInThisInstance(agentId, 'departmentAgentData', {\n\t\t\t\taction: clientAction,\n\t\t\t\t...data,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('banner.new', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('new-banner', { bannerId }); // deprecated\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t\tservice.onEvent('banner.disabled', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t\tservice.onEvent('banner.enabled', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/listeners/listeners.module.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/modules/listeners/listeners.module.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  minimongoChangeMap: () => minimongoChangeMap,\n  ListenersModule: () => ListenersModule\n});\nlet EnterpriseSettings, MeteorService;\nmodule.link(\"../../sdk/index\", {\n  EnterpriseSettings(v) {\n    EnterpriseSettings = v;\n  },\n\n  MeteorService(v) {\n    MeteorService = v;\n  }\n\n}, 0);\nlet UserStatus;\nmodule.link(\"../../../definition/UserStatus\", {\n  UserStatus(v) {\n    UserStatus = v;\n  }\n\n}, 1);\nlet isSettingColor;\nmodule.link(\"../../../definition/ISetting\", {\n  isSettingColor(v) {\n    isSettingColor = v;\n  }\n\n}, 2);\nconst STATUS_MAP = {\n  [UserStatus.OFFLINE]: 0,\n  [UserStatus.ONLINE]: 1,\n  [UserStatus.AWAY]: 2,\n  [UserStatus.BUSY]: 3\n};\nconst minimongoChangeMap = {\n  inserted: 'added',\n  updated: 'changed',\n  removed: 'removed'\n};\n\nclass ListenersModule {\n  constructor(service, notifications) {\n    service.onEvent('emoji.deleteCustom', emoji => {\n      notifications.notifyLoggedInThisInstance('deleteEmojiCustom', {\n        emojiData: emoji\n      });\n    });\n    service.onEvent('emoji.updateCustom', emoji => {\n      notifications.notifyLoggedInThisInstance('updateEmojiCustom', {\n        emojiData: emoji\n      });\n    });\n    service.onEvent('notify.ephemeralMessage', (uid, rid, message) => {\n      notifications.notifyUserInThisInstance(uid, 'message', _objectSpread(_objectSpread({\n        groupable: false\n      }, message), {}, {\n        _id: String(Date.now()),\n        rid,\n        ts: new Date()\n      }));\n    });\n    service.onEvent('permission.changed', _ref => {\n      let {\n        clientAction,\n        data\n      } = _ref;\n      notifications.notifyLoggedInThisInstance('permissions-changed', clientAction, data);\n    });\n    service.onEvent('room.avatarUpdate', _ref2 => {\n      let {\n        _id: rid,\n        avatarETag: etag\n      } = _ref2;\n      notifications.notifyLoggedInThisInstance('updateAvatar', {\n        rid,\n        etag\n      });\n    });\n    service.onEvent('user.avatarUpdate', _ref3 => {\n      let {\n        username,\n        avatarETag: etag\n      } = _ref3;\n      notifications.notifyLoggedInThisInstance('updateAvatar', {\n        username,\n        etag\n      });\n    });\n    service.onEvent('user.deleted', _ref4 => {\n      let {\n        _id: userId\n      } = _ref4;\n      notifications.notifyLoggedInThisInstance('Users:Deleted', {\n        userId\n      });\n    });\n    service.onEvent('user.deleteCustomStatus', userStatus => {\n      notifications.notifyLoggedInThisInstance('deleteCustomUserStatus', {\n        userStatusData: userStatus\n      });\n    });\n    service.onEvent('user.nameChanged', user => {\n      notifications.notifyLoggedInThisInstance('Users:NameChanged', user);\n    });\n    service.onEvent('user.roleUpdate', update => {\n      notifications.notifyLoggedInThisInstance('roles-change', update);\n    });\n    service.onEvent('presence.status', _ref5 => {\n      let {\n        user\n      } = _ref5;\n      const {\n        _id,\n        username,\n        status,\n        statusText\n      } = user;\n\n      if (!status) {\n        return;\n      }\n\n      notifications.notifyLoggedInThisInstance('user-status', [_id, username, STATUS_MAP[status], statusText]);\n\n      if (_id) {\n        notifications.sendPresence(_id, [username, STATUS_MAP[status], statusText]);\n      }\n    });\n    service.onEvent('user.updateCustomStatus', userStatus => {\n      notifications.notifyLoggedInThisInstance('updateCustomUserStatus', {\n        userStatusData: userStatus\n      });\n    });\n    service.onEvent('watch.messages', _ref6 => {\n      let {\n        message\n      } = _ref6;\n\n      if (!message.rid) {\n        return;\n      }\n\n      notifications.streamRoomMessage._emit('__my_messages__', [message], undefined, false, (streamer, _sub, eventName, args, allowed) => streamer.changedPayload(streamer.subscriptionName, 'id', {\n        eventName,\n        args: [...args, allowed]\n      }));\n\n      notifications.streamRoomMessage.emitWithoutBroadcast(message.rid, message);\n    });\n    service.onEvent('watch.subscriptions', _ref7 => {\n      var _subscription$u;\n\n      let {\n        clientAction,\n        subscription\n      } = _ref7;\n\n      if (!((_subscription$u = subscription.u) !== null && _subscription$u !== void 0 && _subscription$u._id)) {\n        return;\n      } // emit a removed event on msg stream to remove the user's stream-room-messages subscription when the user is removed from room\n\n\n      if (clientAction === 'removed') {\n        notifications.streamRoomMessage.__emit(subscription.u._id, clientAction, subscription);\n      }\n\n      notifications.streamUser.__emit(subscription.u._id, clientAction, subscription);\n\n      notifications.notifyUserInThisInstance(subscription.u._id, 'subscriptions-changed', clientAction, subscription);\n    });\n    service.onEvent('watch.roles', _ref8 => {\n      let {\n        clientAction,\n        role\n      } = _ref8;\n\n      const payload = _objectSpread({\n        type: clientAction\n      }, role);\n\n      notifications.streamRoles.emitWithoutBroadcast('roles', payload);\n    });\n    let autoAssignAgent;\n\n    function getRoutingManagerConfig() {\n      return Promise.asyncApply(() => {\n        if (!autoAssignAgent) {\n          autoAssignAgent = Promise.await(MeteorService.getRoutingManagerConfig());\n        }\n\n        return autoAssignAgent;\n      });\n    }\n\n    service.onEvent('watch.inquiries', _ref9 => Promise.asyncApply(() => {\n      let {\n        clientAction,\n        inquiry,\n        diff\n      } = _ref9;\n      const config = Promise.await(getRoutingManagerConfig());\n\n      if (!config || config.autoAssignAgent) {\n        return;\n      }\n\n      const type = minimongoChangeMap[clientAction];\n\n      if (clientAction === 'removed') {\n        notifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, {\n          _id: inquiry._id,\n          clientAction\n        });\n\n        if (inquiry.department) {\n          return notifications.streamLivechatQueueData.emitWithoutBroadcast(\"department/\".concat(inquiry.department), _objectSpread({\n            type\n          }, inquiry));\n        }\n\n        return notifications.streamLivechatQueueData.emitWithoutBroadcast('public', _objectSpread({\n          type\n        }, inquiry));\n      }\n\n      notifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, _objectSpread(_objectSpread({}, inquiry), {}, {\n        clientAction\n      }));\n\n      if (!inquiry.department) {\n        return notifications.streamLivechatQueueData.emitWithoutBroadcast('public', _objectSpread({\n          type\n        }, inquiry));\n      }\n\n      notifications.streamLivechatQueueData.emitWithoutBroadcast(\"department/\".concat(inquiry.department), _objectSpread({\n        type\n      }, inquiry));\n\n      if (clientAction === 'updated' && !(diff !== null && diff !== void 0 && diff.department)) {\n        notifications.streamLivechatQueueData.emitWithoutBroadcast('public', _objectSpread({\n          type\n        }, inquiry));\n      }\n    }));\n    service.onEvent('watch.settings', _ref10 => Promise.asyncApply(() => {\n      let {\n        clientAction,\n        setting\n      } = _ref10;\n\n      if (setting._id === 'Livechat_Routing_Method') {\n        autoAssignAgent = undefined;\n      }\n\n      if (clientAction !== 'removed') {\n        const result = Promise.await(EnterpriseSettings.changeSettingValue(setting));\n\n        if (result !== undefined && !(result instanceof Error)) {\n          setting.value = result;\n        }\n      }\n\n      if (setting.hidden) {\n        return;\n      }\n\n      const value = _objectSpread(_objectSpread({\n        _id: setting._id,\n        value: setting.value\n      }, isSettingColor(setting) && {\n        editor: setting.editor\n      }), {}, {\n        properties: setting.properties,\n        enterprise: setting.enterprise,\n        requiredOnWizard: setting.requiredOnWizard\n      });\n\n      if (setting.public === true) {\n        notifications.notifyAllInThisInstance('public-settings-changed', clientAction, value);\n      }\n\n      notifications.notifyLoggedInThisInstance('private-settings-changed', clientAction, value);\n    }));\n    service.onEvent('watch.rooms', _ref11 => {\n      let {\n        clientAction,\n        room\n      } = _ref11;\n\n      // this emit will cause the user to receive a 'rooms-changed' event\n      notifications.streamUser.__emit(room._id, clientAction, room);\n\n      notifications.streamRoomData.emitWithoutBroadcast(room._id, room);\n    });\n    service.onEvent('watch.users', _ref12 => {\n      let {\n        clientAction,\n        data,\n        diff,\n        unset,\n        id\n      } = _ref12;\n\n      switch (clientAction) {\n        case 'updated':\n          notifications.notifyUserInThisInstance(id, 'userData', {\n            diff,\n            unset,\n            type: clientAction\n          });\n          break;\n\n        case 'inserted':\n          notifications.notifyUserInThisInstance(id, 'userData', {\n            data,\n            type: clientAction\n          });\n          break;\n\n        case 'removed':\n          notifications.notifyUserInThisInstance(id, 'userData', {\n            id,\n            type: clientAction\n          });\n          break;\n      }\n    });\n    service.onEvent('watch.integrationHistory', _ref13 => {\n      var _data$integration;\n\n      let {\n        clientAction,\n        data,\n        diff,\n        id\n      } = _ref13;\n\n      if (!(data !== null && data !== void 0 && (_data$integration = data.integration) !== null && _data$integration !== void 0 && _data$integration._id)) {\n        return;\n      }\n\n      switch (clientAction) {\n        case 'updated':\n          {\n            notifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n              id,\n              diff,\n              type: clientAction\n            });\n            break;\n          }\n\n        case 'inserted':\n          {\n            notifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n              data,\n              type: clientAction\n            });\n            break;\n          }\n      }\n    });\n    service.onEvent('watch.livechatDepartmentAgents', _ref14 => {\n      let {\n        clientAction,\n        data\n      } = _ref14;\n      const {\n        agentId\n      } = data;\n\n      if (!agentId) {\n        return;\n      }\n\n      notifications.notifyUserInThisInstance(agentId, 'departmentAgentData', _objectSpread({\n        action: clientAction\n      }, data));\n    });\n    service.onEvent('banner.new', bannerId => {\n      notifications.notifyLoggedInThisInstance('new-banner', {\n        bannerId\n      }); // deprecated\n\n      notifications.notifyLoggedInThisInstance('banner-changed', {\n        bannerId\n      });\n    });\n    service.onEvent('banner.disabled', bannerId => {\n      notifications.notifyLoggedInThisInstance('banner-changed', {\n        bannerId\n      });\n    });\n    service.onEvent('banner.enabled', bannerId => {\n      notifications.notifyLoggedInThisInstance('banner-changed', {\n        bannerId\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["server/modules/listeners/listeners.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServiceClass } from '../../sdk/types/ServiceClass';\nimport { NotificationsModule } from '../notifications/notifications.module';\nimport { EnterpriseSettings, MeteorService } from '../../sdk/index';\nimport { IRoutingManagerConfig } from '../../../definition/IRoutingManagerConfig';\nimport { UserStatus } from '../../../definition/UserStatus';\nimport { isSettingColor } from '../../../definition/ISetting';\n\nconst STATUS_MAP: { [k: string]: number } = {\n\t[UserStatus.OFFLINE]: 0,\n\t[UserStatus.ONLINE]: 1,\n\t[UserStatus.AWAY]: 2,\n\t[UserStatus.BUSY]: 3,\n};\n\nexport const minimongoChangeMap: Record<string, string> = {\n\tinserted: 'added',\n\tupdated: 'changed',\n\tremoved: 'removed',\n};\n\nexport class ListenersModule {\n\tconstructor(service: IServiceClass, notifications: NotificationsModule) {\n\t\tservice.onEvent('emoji.deleteCustom', (emoji) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('deleteEmojiCustom', {\n\t\t\t\temojiData: emoji,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('emoji.updateCustom', (emoji) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateEmojiCustom', {\n\t\t\t\temojiData: emoji,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('notify.ephemeralMessage', (uid, rid, message) => {\n\t\t\tnotifications.notifyUserInThisInstance(uid, 'message', {\n\t\t\t\tgroupable: false,\n\t\t\t\t...message,\n\t\t\t\t_id: String(Date.now()),\n\t\t\t\trid,\n\t\t\t\tts: new Date(),\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('permission.changed', ({ clientAction, data }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('permissions-changed', clientAction, data);\n\t\t});\n\n\t\tservice.onEvent('room.avatarUpdate', ({ _id: rid, avatarETag: etag }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateAvatar', {\n\t\t\t\trid,\n\t\t\t\tetag,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.avatarUpdate', ({ username, avatarETag: etag }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateAvatar', {\n\t\t\t\tusername,\n\t\t\t\tetag,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.deleted', ({ _id: userId }) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('Users:Deleted', {\n\t\t\t\tuserId,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.deleteCustomStatus', (userStatus) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('deleteCustomUserStatus', {\n\t\t\t\tuserStatusData: userStatus,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('user.nameChanged', (user) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('Users:NameChanged', user);\n\t\t});\n\n\t\tservice.onEvent('user.roleUpdate', (update) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('roles-change', update);\n\t\t});\n\n\t\tservice.onEvent('presence.status', ({ user }) => {\n\t\t\tconst { _id, username, status, statusText } = user;\n\t\t\tif (!status) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.notifyLoggedInThisInstance('user-status', [_id, username, STATUS_MAP[status], statusText]);\n\n\t\t\tif (_id) {\n\t\t\t\tnotifications.sendPresence(_id, [username, STATUS_MAP[status], statusText]);\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('user.updateCustomStatus', (userStatus) => {\n\t\t\tnotifications.notifyLoggedInThisInstance('updateCustomUserStatus', {\n\t\t\t\tuserStatusData: userStatus,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('watch.messages', ({ message }) => {\n\t\t\tif (!message.rid) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.streamRoomMessage._emit('__my_messages__', [message], undefined, false, (streamer, _sub, eventName, args, allowed) =>\n\t\t\t\tstreamer.changedPayload(streamer.subscriptionName, 'id', {\n\t\t\t\t\teventName,\n\t\t\t\t\targs: [...args, allowed],\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tnotifications.streamRoomMessage.emitWithoutBroadcast(message.rid, message);\n\t\t});\n\n\t\tservice.onEvent('watch.subscriptions', ({ clientAction, subscription }) => {\n\t\t\tif (!subscription.u?._id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// emit a removed event on msg stream to remove the user's stream-room-messages subscription when the user is removed from room\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tnotifications.streamRoomMessage.__emit(subscription.u._id, clientAction, subscription);\n\t\t\t}\n\n\t\t\tnotifications.streamUser.__emit(subscription.u._id, clientAction, subscription);\n\n\t\t\tnotifications.notifyUserInThisInstance(subscription.u._id, 'subscriptions-changed', clientAction, subscription);\n\t\t});\n\n\t\tservice.onEvent('watch.roles', ({ clientAction, role }): void => {\n\t\t\tconst payload = {\n\t\t\t\ttype: clientAction,\n\t\t\t\t...role,\n\t\t\t};\n\t\t\tnotifications.streamRoles.emitWithoutBroadcast('roles', payload);\n\t\t});\n\n\t\tlet autoAssignAgent: IRoutingManagerConfig | undefined;\n\t\tasync function getRoutingManagerConfig(): Promise<IRoutingManagerConfig> {\n\t\t\tif (!autoAssignAgent) {\n\t\t\t\tautoAssignAgent = await MeteorService.getRoutingManagerConfig();\n\t\t\t}\n\n\t\t\treturn autoAssignAgent;\n\t\t}\n\n\t\tservice.onEvent('watch.inquiries', async ({ clientAction, inquiry, diff }): Promise<void> => {\n\t\t\tconst config = await getRoutingManagerConfig();\n\t\t\tif (!config || config.autoAssignAgent) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = minimongoChangeMap[clientAction];\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, {\n\t\t\t\t\t_id: inquiry._id,\n\t\t\t\t\tclientAction,\n\t\t\t\t});\n\n\t\t\t\tif (inquiry.department) {\n\t\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast(`department/${inquiry.department}`, { type, ...inquiry });\n\t\t\t\t}\n\n\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast('public', {\n\t\t\t\t\ttype,\n\t\t\t\t\t...inquiry,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(inquiry._id, {\n\t\t\t\t...inquiry,\n\t\t\t\tclientAction,\n\t\t\t});\n\n\t\t\tif (!inquiry.department) {\n\t\t\t\treturn notifications.streamLivechatQueueData.emitWithoutBroadcast('public', {\n\t\t\t\t\ttype,\n\t\t\t\t\t...inquiry,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast(`department/${inquiry.department}`, { type, ...inquiry });\n\n\t\t\tif (clientAction === 'updated' && !diff?.department) {\n\t\t\t\tnotifications.streamLivechatQueueData.emitWithoutBroadcast('public', { type, ...inquiry });\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (setting._id === 'Livechat_Routing_Method') {\n\t\t\t\tautoAssignAgent = undefined;\n\t\t\t}\n\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tconst result = await EnterpriseSettings.changeSettingValue(setting);\n\t\t\t\tif (result !== undefined && !(result instanceof Error)) {\n\t\t\t\t\tsetting.value = result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (setting.hidden) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst value = {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t\t...(isSettingColor(setting) && { editor: setting.editor }),\n\t\t\t\tproperties: setting.properties,\n\t\t\t\tenterprise: setting.enterprise,\n\t\t\t\trequiredOnWizard: setting.requiredOnWizard,\n\t\t\t};\n\n\t\t\tif (setting.public === true) {\n\t\t\t\tnotifications.notifyAllInThisInstance('public-settings-changed', clientAction, value);\n\t\t\t}\n\n\t\t\tnotifications.notifyLoggedInThisInstance('private-settings-changed', clientAction, value);\n\t\t});\n\n\t\tservice.onEvent('watch.rooms', ({ clientAction, room }): void => {\n\t\t\t// this emit will cause the user to receive a 'rooms-changed' event\n\t\t\tnotifications.streamUser.__emit(room._id, clientAction, room);\n\n\t\t\tnotifications.streamRoomData.emitWithoutBroadcast(room._id, room);\n\t\t});\n\n\t\tservice.onEvent('watch.users', ({ clientAction, data, diff, unset, id }): void => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', {\n\t\t\t\t\t\tdiff,\n\t\t\t\t\t\tunset,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', { data, type: clientAction });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tnotifications.notifyUserInThisInstance(id, 'userData', { id, type: clientAction });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.integrationHistory', ({ clientAction, data, diff, id }): void => {\n\t\t\tif (!data?.integration?._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'updated': {\n\t\t\t\t\tnotifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tdiff,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'inserted': {\n\t\t\t\t\tnotifications.streamIntegrationHistory.emitWithoutBroadcast(data.integration._id, {\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\ttype: clientAction,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tservice.onEvent('watch.livechatDepartmentAgents', ({ clientAction, data }): void => {\n\t\t\tconst { agentId } = data;\n\t\t\tif (!agentId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnotifications.notifyUserInThisInstance(agentId, 'departmentAgentData', {\n\t\t\t\taction: clientAction,\n\t\t\t\t...data,\n\t\t\t});\n\t\t});\n\n\t\tservice.onEvent('banner.new', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('new-banner', { bannerId }); // deprecated\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t\tservice.onEvent('banner.disabled', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t\tservice.onEvent('banner.enabled', (bannerId): void => {\n\t\t\tnotifications.notifyLoggedInThisInstance('banner-changed', { bannerId });\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"6e2e1352c5a9f87005a3c15aa83742eaa719b5ac"}
