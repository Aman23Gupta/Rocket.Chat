{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/AbstractBusinessHour.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/business-hour/AbstractBusinessHour.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/AbstractBusinessHour.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/AbstractBusinessHour.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/AbstractBusinessHour.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { ILivechatBusinessHour } from '../../../../definition/ILivechatBusinessHour';\nimport { IWorkHoursCronJobsWrapper, LivechatBusinessHoursRaw } from '../../../models/server/raw/LivechatBusinessHours';\nimport { UsersRaw } from '../../../models/server/raw/Users';\nimport { LivechatBusinessHours, Users } from '../../../models/server/raw';\nimport { ILivechatDepartment } from '../../../../definition/ILivechatDepartment';\n\nexport interface IBusinessHourBehavior {\n\tfindHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]>;\n\topenBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tcloseBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tonDisableBusinessHours(): Promise<void>;\n\tonAddAgentToDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveAgentFromDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveDepartment(department?: ILivechatDepartment): Promise<any>;\n\tonStartBusinessHours(): Promise<void>;\n\tafterSaveBusinessHours(businessHourData: ILivechatBusinessHour): Promise<void>;\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean>;\n\tchangeAgentActiveStatus(agentId: string, status: string): Promise<any>;\n}\n\nexport interface IBusinessHourType {\n\tname: string;\n\tgetBusinessHour(id?: string): Promise<ILivechatBusinessHour | null>;\n\tsaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<ILivechatBusinessHour>;\n\tremoveBusinessHourById(id: string): Promise<void>;\n}\n\nexport abstract class AbstractBusinessHourBehavior {\n\tprotected BusinessHourRepository: LivechatBusinessHoursRaw = LivechatBusinessHours;\n\n\tprotected UsersRepository: UsersRaw = Users;\n\n\tasync findHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.BusinessHourRepository.findHoursToScheduleJobs();\n\t}\n\n\tasync onDisableBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync changeAgentActiveStatus(agentId: string, status: string): Promise<any> {\n\t\treturn this.UsersRepository.setLivechatStatusIf(\n\t\t\tagentId,\n\t\t\tstatus,\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t);\n\t}\n}\n\nexport abstract class AbstractBusinessHourType {\n\tprotected BusinessHourRepository: LivechatBusinessHoursRaw = LivechatBusinessHours;\n\n\tprotected UsersRepository: UsersRaw = Users;\n\n\tprotected async baseSaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<string> {\n\t\tbusinessHourData.active = Boolean(businessHourData.active);\n\t\tbusinessHourData = this.convertWorkHours(businessHourData);\n\t\tif (businessHourData._id) {\n\t\t\tawait this.BusinessHourRepository.updateOne({ _id: businessHourData._id }, { $set: businessHourData });\n\t\t\treturn businessHourData._id;\n\t\t}\n\t\tconst { insertedId } = await this.BusinessHourRepository.insertOne(businessHourData);\n\t\treturn insertedId;\n\t}\n\n\tprivate convertWorkHours(businessHourData: ILivechatBusinessHour): ILivechatBusinessHour {\n\t\tbusinessHourData.workHours.forEach((hour: any) => {\n\t\t\tconst startUtc = moment.tz(`${hour.day}:${hour.start}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\tconst finishUtc = moment.tz(`${hour.day}:${hour.finish}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\thour.start = {\n\t\t\t\ttime: hour.start,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: startUtc.clone().format('dddd'),\n\t\t\t\t\ttime: startUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t\thour.finish = {\n\t\t\t\ttime: hour.finish,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: finishUtc.clone().format('dddd'),\n\t\t\t\t\ttime: finishUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\treturn businessHourData;\n\t}\n\n\tprotected getUTCFromTimezone(timezone?: string): string {\n\t\tif (!timezone) {\n\t\t\treturn String(moment().utcOffset() / 60);\n\t\t}\n\t\treturn moment.tz(timezone).format('Z');\n\t}\n\n\tprivate formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc: any, format: string): string {\n\t\treturn moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm')\n\t\t\t.add(moment().utcOffset() / 60, 'hours')\n\t\t\t.format(format);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/business-hour/AbstractBusinessHour.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/business-hour/AbstractBusinessHour.ts"}},"code":"module.export({\n  AbstractBusinessHourBehavior: () => AbstractBusinessHourBehavior,\n  AbstractBusinessHourType: () => AbstractBusinessHourType\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet LivechatBusinessHours, Users;\nmodule.link(\"../../../models/server/raw\", {\n  LivechatBusinessHours(v) {\n    LivechatBusinessHours = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\n\nclass AbstractBusinessHourBehavior {\n  constructor() {\n    this.BusinessHourRepository = LivechatBusinessHours;\n    this.UsersRepository = Users;\n  }\n\n  findHoursToCreateJobs() {\n    return Promise.asyncApply(() => {\n      return this.BusinessHourRepository.findHoursToScheduleJobs();\n    });\n  }\n\n  onDisableBusinessHours() {\n    return Promise.asyncApply(() => {\n      Promise.await(this.UsersRepository.removeBusinessHoursFromAllUsers());\n    });\n  }\n\n  allowAgentChangeServiceStatus(agentId) {\n    return Promise.asyncApply(() => {\n      return this.UsersRepository.isAgentWithinBusinessHours(agentId);\n    });\n  }\n\n  changeAgentActiveStatus(agentId, status) {\n    return Promise.asyncApply(() => {\n      return this.UsersRepository.setLivechatStatusIf(agentId, status, {\n        livechatStatusSystemModified: true\n      }, {\n        livechatStatusSystemModified: true\n      });\n    });\n  }\n\n}\n\nclass AbstractBusinessHourType {\n  constructor() {\n    this.BusinessHourRepository = LivechatBusinessHours;\n    this.UsersRepository = Users;\n  }\n\n  baseSaveBusinessHour(businessHourData) {\n    return Promise.asyncApply(() => {\n      businessHourData.active = Boolean(businessHourData.active);\n      businessHourData = this.convertWorkHours(businessHourData);\n\n      if (businessHourData._id) {\n        Promise.await(this.BusinessHourRepository.updateOne({\n          _id: businessHourData._id\n        }, {\n          $set: businessHourData\n        }));\n        return businessHourData._id;\n      }\n\n      const {\n        insertedId\n      } = Promise.await(this.BusinessHourRepository.insertOne(businessHourData));\n      return insertedId;\n    });\n  }\n\n  convertWorkHours(businessHourData) {\n    businessHourData.workHours.forEach(hour => {\n      const startUtc = moment.tz(\"\".concat(hour.day, \":\").concat(hour.start), 'dddd:HH:mm', businessHourData.timezone.name).utc();\n      const finishUtc = moment.tz(\"\".concat(hour.day, \":\").concat(hour.finish), 'dddd:HH:mm', businessHourData.timezone.name).utc();\n      hour.start = {\n        time: hour.start,\n        utc: {\n          dayOfWeek: startUtc.clone().format('dddd'),\n          time: startUtc.clone().format('HH:mm')\n        },\n        cron: {\n          dayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n          time: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm')\n        }\n      };\n      hour.finish = {\n        time: hour.finish,\n        utc: {\n          dayOfWeek: finishUtc.clone().format('dddd'),\n          time: finishUtc.clone().format('HH:mm')\n        },\n        cron: {\n          dayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n          time: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm')\n        }\n      };\n    });\n    return businessHourData;\n  }\n\n  getUTCFromTimezone(timezone) {\n    if (!timezone) {\n      return String(moment().utcOffset() / 60);\n    }\n\n    return moment.tz(timezone).format('Z');\n  }\n\n  formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc, format) {\n    return moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm').add(moment().utcOffset() / 60, 'hours').format(format);\n  }\n\n}","map":{"version":3,"sources":["app/livechat/server/business-hour/AbstractBusinessHour.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { ILivechatBusinessHour } from '../../../../definition/ILivechatBusinessHour';\nimport { IWorkHoursCronJobsWrapper, LivechatBusinessHoursRaw } from '../../../models/server/raw/LivechatBusinessHours';\nimport { UsersRaw } from '../../../models/server/raw/Users';\nimport { LivechatBusinessHours, Users } from '../../../models/server/raw';\nimport { ILivechatDepartment } from '../../../../definition/ILivechatDepartment';\n\nexport interface IBusinessHourBehavior {\n\tfindHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]>;\n\topenBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tcloseBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tonDisableBusinessHours(): Promise<void>;\n\tonAddAgentToDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveAgentFromDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveDepartment(department?: ILivechatDepartment): Promise<any>;\n\tonStartBusinessHours(): Promise<void>;\n\tafterSaveBusinessHours(businessHourData: ILivechatBusinessHour): Promise<void>;\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean>;\n\tchangeAgentActiveStatus(agentId: string, status: string): Promise<any>;\n}\n\nexport interface IBusinessHourType {\n\tname: string;\n\tgetBusinessHour(id?: string): Promise<ILivechatBusinessHour | null>;\n\tsaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<ILivechatBusinessHour>;\n\tremoveBusinessHourById(id: string): Promise<void>;\n}\n\nexport abstract class AbstractBusinessHourBehavior {\n\tprotected BusinessHourRepository: LivechatBusinessHoursRaw = LivechatBusinessHours;\n\n\tprotected UsersRepository: UsersRaw = Users;\n\n\tasync findHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.BusinessHourRepository.findHoursToScheduleJobs();\n\t}\n\n\tasync onDisableBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync changeAgentActiveStatus(agentId: string, status: string): Promise<any> {\n\t\treturn this.UsersRepository.setLivechatStatusIf(\n\t\t\tagentId,\n\t\t\tstatus,\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t);\n\t}\n}\n\nexport abstract class AbstractBusinessHourType {\n\tprotected BusinessHourRepository: LivechatBusinessHoursRaw = LivechatBusinessHours;\n\n\tprotected UsersRepository: UsersRaw = Users;\n\n\tprotected async baseSaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<string> {\n\t\tbusinessHourData.active = Boolean(businessHourData.active);\n\t\tbusinessHourData = this.convertWorkHours(businessHourData);\n\t\tif (businessHourData._id) {\n\t\t\tawait this.BusinessHourRepository.updateOne({ _id: businessHourData._id }, { $set: businessHourData });\n\t\t\treturn businessHourData._id;\n\t\t}\n\t\tconst { insertedId } = await this.BusinessHourRepository.insertOne(businessHourData);\n\t\treturn insertedId;\n\t}\n\n\tprivate convertWorkHours(businessHourData: ILivechatBusinessHour): ILivechatBusinessHour {\n\t\tbusinessHourData.workHours.forEach((hour: any) => {\n\t\t\tconst startUtc = moment.tz(`${hour.day}:${hour.start}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\tconst finishUtc = moment.tz(`${hour.day}:${hour.finish}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\thour.start = {\n\t\t\t\ttime: hour.start,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: startUtc.clone().format('dddd'),\n\t\t\t\t\ttime: startUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t\thour.finish = {\n\t\t\t\ttime: hour.finish,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: finishUtc.clone().format('dddd'),\n\t\t\t\t\ttime: finishUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\treturn businessHourData;\n\t}\n\n\tprotected getUTCFromTimezone(timezone?: string): string {\n\t\tif (!timezone) {\n\t\t\treturn String(moment().utcOffset() / 60);\n\t\t}\n\t\treturn moment.tz(timezone).format('Z');\n\t}\n\n\tprivate formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc: any, format: string): string {\n\t\treturn moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm')\n\t\t\t.add(moment().utcOffset() / 60, 'hours')\n\t\t\t.format(format);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"9e0fa860d08aff7b0cbfa20c5356527b88375d82"}
