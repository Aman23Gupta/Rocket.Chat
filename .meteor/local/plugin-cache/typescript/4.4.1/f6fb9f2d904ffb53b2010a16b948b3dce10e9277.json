{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/functions/helpers.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/functions/helpers.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/functions/helpers.ts","inputSourceMap":{"version":3,"file":"app/federation/server/functions/helpers.ts","sourceRoot":"","sources":["app/federation/server/functions/helpers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAG1E,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAElE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,kBAA0B,EAAY,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAExG,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAW,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAEpF,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC3C,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;IAC/D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,MAAc;IAChD,MAAM,QAAQ,CAAC,eAAe,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;AAC7D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,OAAgB;IACnD,MAAM,QAAQ,CAAC,eAAe,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAW,EAAW,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AACxF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,OAAkB,EAAW,EAAE,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;AAEtI,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,EAAE,UAAU,EAAyD,EAAW,EAAE;IACnH,iCAAiC;IACjC,IAAI,CAAC,UAAU,EAAE;QAChB,OAAO,KAAK,CAAC;KACb;IAED,OAAO,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAAE,UAAU,EAAsC,EAAE,WAAmB,EAAW,EAAE,CAC/G,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,WAAW,CAAC;AAElD,MAAM,CAAC,MAAM,oBAAoB,GAAG,CACnC,IAAW,EAKV,EAAE;IACH,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE;QAC9B,kDAAkD;QAElD,OAAO;YACN,KAAK,EAAE,EAAE;YACT,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC;YACvD,aAAa,EAAE,SAAS;SACxB,CAAC;KACF;IAED,sCAAsC;IACtC,MAAM,CAAC,GAAG,aAAa,CAAC,8BAA8B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAqB,CAAC;IAC5F,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;QACzC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAAoC,CAAC,CAAC;IAEzC,mBAAmB;IACnB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAE3C,qBAAqB;IACrB,MAAM,KAAK,GAAoB,KAAK,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;IAEjF,kDAAkD;IAClD,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEzE,OAAO;QACN,gBAAgB;QAChB,KAAK;QACL,aAAa;KACb,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { IRoom, isDirectMessageRoom } from '../../../../definition/IRoom';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { IRegisterUser, IUser } from '../../../../definition/IUser';\nimport { Subscriptions, Users } from '../../../models/server';\nimport { Settings } from '../../../models/server/raw';\nimport { STATUS_ENABLED, STATUS_REGISTERING } from '../constants';\n\nexport const getNameAndDomain = (fullyQualifiedName: string): string[] => fullyQualifiedName.split('@');\n\nexport const isFullyQualified = (name: string): boolean => name.indexOf('@') !== -1;\n\nexport async function isRegisteringOrEnabled(): Promise<boolean> {\n\tconst value = await Settings.getValueById('FEDERATION_Status');\n\treturn typeof value === 'string' && [STATUS_ENABLED, STATUS_REGISTERING].includes(value);\n}\n\nexport async function updateStatus(status: string): Promise<void> {\n\tawait Settings.updateValueById('FEDERATION_Status', status);\n}\n\nexport async function updateEnabled(enabled: boolean): Promise<void> {\n\tawait Settings.updateValueById('FEDERATION_Enabled', enabled);\n}\n\nexport const checkRoomType = (room: IRoom): boolean => room.t === 'p' || room.t === 'd';\nexport const checkRoomDomainsLength = (domains: unknown[]): boolean => domains.length <= (process.env.FEDERATED_DOMAINS_LENGTH || 10);\n\nexport const hasExternalDomain = ({ federation }: { federation: { origin: string; domains: string[] } }): boolean => {\n\t// same test as isFederated(room)\n\tif (!federation) {\n\t\treturn false;\n\t}\n\n\treturn federation.domains.some((domain) => domain !== federation.origin);\n};\n\nexport const isLocalUser = ({ federation }: { federation: { origin: string } }, localDomain: string): boolean =>\n\t!federation || federation.origin === localDomain;\n\nexport const getFederatedRoomData = (\n\troom: IRoom,\n): {\n\thasFederatedUser: boolean;\n\tusers: IUser[];\n\tsubscriptions: { [k: string]: ISubscription } | undefined;\n} => {\n\tif (isDirectMessageRoom(room)) {\n\t\t// Check if there is a federated user on this room\n\n\t\treturn {\n\t\t\tusers: [],\n\t\t\thasFederatedUser: room.usernames.some(isFullyQualified),\n\t\t\tsubscriptions: undefined,\n\t\t};\n\t}\n\n\t// Find all subscriptions of this room\n\tconst s = Subscriptions.findByRoomIdWhenUsernameExists(room._id).fetch() as ISubscription[];\n\tconst subscriptions = s.reduce((acc, s) => {\n\t\tacc[s.u._id] = s;\n\t\treturn acc;\n\t}, {} as { [k: string]: ISubscription });\n\n\t// Get all user ids\n\tconst userIds = Object.keys(subscriptions);\n\n\t// Load all the users\n\tconst users: IRegisterUser[] = Users.findUsersWithUsernameByIds(userIds).fetch();\n\n\t// Check if there is a federated user on this room\n\tconst hasFederatedUser = users.some((u) => isFullyQualified(u.username));\n\n\treturn {\n\t\thasFederatedUser,\n\t\tusers,\n\t\tsubscriptions,\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/functions/helpers.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/functions/helpers.ts"}},"code":"module.export({\n  getNameAndDomain: () => getNameAndDomain,\n  isFullyQualified: () => isFullyQualified,\n  isRegisteringOrEnabled: () => isRegisteringOrEnabled,\n  updateStatus: () => updateStatus,\n  updateEnabled: () => updateEnabled,\n  checkRoomType: () => checkRoomType,\n  checkRoomDomainsLength: () => checkRoomDomainsLength,\n  hasExternalDomain: () => hasExternalDomain,\n  isLocalUser: () => isLocalUser,\n  getFederatedRoomData: () => getFederatedRoomData\n});\nlet isDirectMessageRoom;\nmodule.link(\"../../../../definition/IRoom\", {\n  isDirectMessageRoom(v) {\n    isDirectMessageRoom = v;\n  }\n\n}, 0);\nlet Subscriptions, Users;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\nlet Settings;\nmodule.link(\"../../../models/server/raw\", {\n  Settings(v) {\n    Settings = v;\n  }\n\n}, 2);\nlet STATUS_ENABLED, STATUS_REGISTERING;\nmodule.link(\"../constants\", {\n  STATUS_ENABLED(v) {\n    STATUS_ENABLED = v;\n  },\n\n  STATUS_REGISTERING(v) {\n    STATUS_REGISTERING = v;\n  }\n\n}, 3);\n\nconst getNameAndDomain = fullyQualifiedName => fullyQualifiedName.split('@');\n\nconst isFullyQualified = name => name.indexOf('@') !== -1;\n\nfunction isRegisteringOrEnabled() {\n  return Promise.asyncApply(() => {\n    const value = Promise.await(Settings.getValueById('FEDERATION_Status'));\n    return typeof value === 'string' && [STATUS_ENABLED, STATUS_REGISTERING].includes(value);\n  });\n}\n\nfunction updateStatus(status) {\n  return Promise.asyncApply(() => {\n    Promise.await(Settings.updateValueById('FEDERATION_Status', status));\n  });\n}\n\nfunction updateEnabled(enabled) {\n  return Promise.asyncApply(() => {\n    Promise.await(Settings.updateValueById('FEDERATION_Enabled', enabled));\n  });\n}\n\nconst checkRoomType = room => room.t === 'p' || room.t === 'd';\n\nconst checkRoomDomainsLength = domains => domains.length <= (process.env.FEDERATED_DOMAINS_LENGTH || 10);\n\nconst hasExternalDomain = _ref => {\n  let {\n    federation\n  } = _ref;\n\n  // same test as isFederated(room)\n  if (!federation) {\n    return false;\n  }\n\n  return federation.domains.some(domain => domain !== federation.origin);\n};\n\nconst isLocalUser = (_ref2, localDomain) => {\n  let {\n    federation\n  } = _ref2;\n  return !federation || federation.origin === localDomain;\n};\n\nconst getFederatedRoomData = room => {\n  if (isDirectMessageRoom(room)) {\n    // Check if there is a federated user on this room\n    return {\n      users: [],\n      hasFederatedUser: room.usernames.some(isFullyQualified),\n      subscriptions: undefined\n    };\n  } // Find all subscriptions of this room\n\n\n  const s = Subscriptions.findByRoomIdWhenUsernameExists(room._id).fetch();\n  const subscriptions = s.reduce((acc, s) => {\n    acc[s.u._id] = s;\n    return acc;\n  }, {}); // Get all user ids\n\n  const userIds = Object.keys(subscriptions); // Load all the users\n\n  const users = Users.findUsersWithUsernameByIds(userIds).fetch(); // Check if there is a federated user on this room\n\n  const hasFederatedUser = users.some(u => isFullyQualified(u.username));\n  return {\n    hasFederatedUser,\n    users,\n    subscriptions\n  };\n};","map":{"version":3,"sources":["app/federation/server/functions/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRoom, isDirectMessageRoom } from '../../../../definition/IRoom';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { IRegisterUser, IUser } from '../../../../definition/IUser';\nimport { Subscriptions, Users } from '../../../models/server';\nimport { Settings } from '../../../models/server/raw';\nimport { STATUS_ENABLED, STATUS_REGISTERING } from '../constants';\n\nexport const getNameAndDomain = (fullyQualifiedName: string): string[] => fullyQualifiedName.split('@');\n\nexport const isFullyQualified = (name: string): boolean => name.indexOf('@') !== -1;\n\nexport async function isRegisteringOrEnabled(): Promise<boolean> {\n\tconst value = await Settings.getValueById('FEDERATION_Status');\n\treturn typeof value === 'string' && [STATUS_ENABLED, STATUS_REGISTERING].includes(value);\n}\n\nexport async function updateStatus(status: string): Promise<void> {\n\tawait Settings.updateValueById('FEDERATION_Status', status);\n}\n\nexport async function updateEnabled(enabled: boolean): Promise<void> {\n\tawait Settings.updateValueById('FEDERATION_Enabled', enabled);\n}\n\nexport const checkRoomType = (room: IRoom): boolean => room.t === 'p' || room.t === 'd';\nexport const checkRoomDomainsLength = (domains: unknown[]): boolean => domains.length <= (process.env.FEDERATED_DOMAINS_LENGTH || 10);\n\nexport const hasExternalDomain = ({ federation }: { federation: { origin: string; domains: string[] } }): boolean => {\n\t// same test as isFederated(room)\n\tif (!federation) {\n\t\treturn false;\n\t}\n\n\treturn federation.domains.some((domain) => domain !== federation.origin);\n};\n\nexport const isLocalUser = ({ federation }: { federation: { origin: string } }, localDomain: string): boolean =>\n\t!federation || federation.origin === localDomain;\n\nexport const getFederatedRoomData = (\n\troom: IRoom,\n): {\n\thasFederatedUser: boolean;\n\tusers: IUser[];\n\tsubscriptions: { [k: string]: ISubscription } | undefined;\n} => {\n\tif (isDirectMessageRoom(room)) {\n\t\t// Check if there is a federated user on this room\n\n\t\treturn {\n\t\t\tusers: [],\n\t\t\thasFederatedUser: room.usernames.some(isFullyQualified),\n\t\t\tsubscriptions: undefined,\n\t\t};\n\t}\n\n\t// Find all subscriptions of this room\n\tconst s = Subscriptions.findByRoomIdWhenUsernameExists(room._id).fetch() as ISubscription[];\n\tconst subscriptions = s.reduce((acc, s) => {\n\t\tacc[s.u._id] = s;\n\t\treturn acc;\n\t}, {} as { [k: string]: ISubscription });\n\n\t// Get all user ids\n\tconst userIds = Object.keys(subscriptions);\n\n\t// Load all the users\n\tconst users: IRegisterUser[] = Users.findUsersWithUsernameByIds(userIds).fetch();\n\n\t// Check if there is a federated user on this room\n\tconst hasFederatedUser = users.some((u) => isFullyQualified(u.username));\n\n\treturn {\n\t\thasFederatedUser,\n\t\tusers,\n\t\tsubscriptions,\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"f6fb9f2d904ffb53b2010a16b948b3dce10e9277"}
