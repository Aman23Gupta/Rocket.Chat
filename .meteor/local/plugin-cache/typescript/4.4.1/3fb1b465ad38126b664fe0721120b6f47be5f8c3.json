{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/messages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/messages.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/messages.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/messages.ts","sourceRoot":"","sources":["app/apps/server/bridges/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITypingDescriptor, MessageBridge } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\n\nimport { Messages, Users, Subscriptions } from '../../../models/server';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { api } from '../../../../server/sdk/api';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppMessageBridge extends MessageBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(message: IMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tconst convertedMessage = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst sentMessage = executeSendMessage(convertedMessage.u._id, convertedMessage);\n\n\t\treturn sentMessage._id;\n\t}\n\n\tprotected async getById(messageId: string, appId: string): Promise<IMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('messages').convertById(messageId);\n\t}\n\n\tprotected async update(message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tif (!message.editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tif (!message.id || !Messages.findOneById(message.id)) {\n\t\t\tthrow new Error('A message must exist to update.');\n\t\t}\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst editor = Users.findOneById(message.editor.id);\n\n\t\tupdateMessage(msg, editor);\n\t}\n\n\tprotected async notifyUser(user: IUser, message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a user.`);\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\tapi.broadcast('notify.ephemeralMessage', user.id, msg.rid, {\n\t\t\t...msg,\n\t\t});\n\t}\n\n\tprotected async notifyRoom(room: IRoom, message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a room's users.`);\n\n\t\tif (!room || !room.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst users = Subscriptions.findByRoomIdWhenUserIdExists(room.id, { fields: { 'u._id': 1 } })\n\t\t\t.fetch()\n\t\t\t.map((s: ISubscription) => s.u._id);\n\n\t\tUsers.findByIds(users, { fields: { _id: 1 } })\n\t\t\t.fetch()\n\t\t\t.forEach(({ _id }: { _id: string }) =>\n\t\t\t\tapi.broadcast('notify.ephemeralMessage', _id, room.id, {\n\t\t\t\t\t...msg,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async typing({ scope, id, username, isTyping }: ITypingDescriptor): Promise<void> {\n\t\tswitch (scope) {\n\t\t\tcase 'room':\n\t\t\t\tnotifications.notifyRoom(id, 'typing', username, isTyping);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unrecognized typing scope provided');\n\t\t}\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/messages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/messages.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  AppMessageBridge: () => AppMessageBridge\n});\nlet MessageBridge;\nmodule.link(\"@rocket.chat/apps-engine/server/bridges/MessageBridge\", {\n  MessageBridge(v) {\n    MessageBridge = v;\n  }\n\n}, 0);\nlet Messages, Users, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 1);\nlet updateMessage;\nmodule.link(\"../../../lib/server/functions/updateMessage\", {\n  updateMessage(v) {\n    updateMessage = v;\n  }\n\n}, 2);\nlet executeSendMessage;\nmodule.link(\"../../../lib/server/methods/sendMessage\", {\n  executeSendMessage(v) {\n    executeSendMessage = v;\n  }\n\n}, 3);\nlet api;\nmodule.link(\"../../../../server/sdk/api\", {\n  api(v) {\n    api = v;\n  }\n\n}, 4);\nlet notifications;\nmodule.link(\"../../../notifications/server/lib/Notifications\", {\n  default(v) {\n    notifications = v;\n  }\n\n}, 5);\n\nclass AppMessageBridge extends MessageBridge {\n  // eslint-disable-next-line no-empty-function\n  constructor(orch) {\n    super();\n    this.orch = void 0;\n    this.orch = orch;\n  }\n\n  create(message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a new message.\"));\n      const convertedMessage = (_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('messages').convertAppMessage(message);\n      const sentMessage = executeSendMessage(convertedMessage.u._id, convertedMessage);\n      return sentMessage._id;\n    });\n  }\n\n  getById(messageId, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert2;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the message: \\\"\").concat(messageId, \"\\\"\"));\n      return (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('messages').convertById(messageId);\n    });\n  }\n\n  update(message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert3;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating a message.\"));\n\n      if (!message.editor) {\n        throw new Error('Invalid editor assigned to the message for the update.');\n      }\n\n      if (!message.id || !Messages.findOneById(message.id)) {\n        throw new Error('A message must exist to update.');\n      }\n\n      const msg = (_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('messages').convertAppMessage(message);\n      const editor = Users.findOneById(message.editor.id);\n      updateMessage(msg, editor);\n    });\n  }\n\n  notifyUser(user, message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert4;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is notifying a user.\"));\n      const msg = (_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('messages').convertAppMessage(message);\n\n      if (!msg) {\n        return;\n      }\n\n      api.broadcast('notify.ephemeralMessage', user.id, msg.rid, _objectSpread({}, msg));\n    });\n  }\n\n  notifyRoom(room, message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert5;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is notifying a room's users.\"));\n\n      if (!room || !room.id) {\n        return;\n      }\n\n      const msg = (_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('messages').convertAppMessage(message);\n      const users = Subscriptions.findByRoomIdWhenUserIdExists(room.id, {\n        fields: {\n          'u._id': 1\n        }\n      }).fetch().map(s => s.u._id);\n      Users.findByIds(users, {\n        fields: {\n          _id: 1\n        }\n      }).fetch().forEach(_ref => {\n        let {\n          _id\n        } = _ref;\n        return api.broadcast('notify.ephemeralMessage', _id, room.id, _objectSpread({}, msg));\n      });\n    });\n  }\n\n  typing(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        scope,\n        id,\n        username,\n        isTyping\n      } = _ref2;\n\n      switch (scope) {\n        case 'room':\n          notifications.notifyRoom(id, 'typing', username, isTyping);\n          return;\n\n        default:\n          throw new Error('Unrecognized typing scope provided');\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["app/apps/server/bridges/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITypingDescriptor, MessageBridge } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\n\nimport { Messages, Users, Subscriptions } from '../../../models/server';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { api } from '../../../../server/sdk/api';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppMessageBridge extends MessageBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(message: IMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tconst convertedMessage = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst sentMessage = executeSendMessage(convertedMessage.u._id, convertedMessage);\n\n\t\treturn sentMessage._id;\n\t}\n\n\tprotected async getById(messageId: string, appId: string): Promise<IMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('messages').convertById(messageId);\n\t}\n\n\tprotected async update(message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tif (!message.editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tif (!message.id || !Messages.findOneById(message.id)) {\n\t\t\tthrow new Error('A message must exist to update.');\n\t\t}\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst editor = Users.findOneById(message.editor.id);\n\n\t\tupdateMessage(msg, editor);\n\t}\n\n\tprotected async notifyUser(user: IUser, message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a user.`);\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\tapi.broadcast('notify.ephemeralMessage', user.id, msg.rid, {\n\t\t\t...msg,\n\t\t});\n\t}\n\n\tprotected async notifyRoom(room: IRoom, message: IMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a room's users.`);\n\n\t\tif (!room || !room.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst msg = this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst users = Subscriptions.findByRoomIdWhenUserIdExists(room.id, { fields: { 'u._id': 1 } })\n\t\t\t.fetch()\n\t\t\t.map((s: ISubscription) => s.u._id);\n\n\t\tUsers.findByIds(users, { fields: { _id: 1 } })\n\t\t\t.fetch()\n\t\t\t.forEach(({ _id }: { _id: string }) =>\n\t\t\t\tapi.broadcast('notify.ephemeralMessage', _id, room.id, {\n\t\t\t\t\t...msg,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async typing({ scope, id, username, isTyping }: ITypingDescriptor): Promise<void> {\n\t\tswitch (scope) {\n\t\t\tcase 'room':\n\t\t\t\tnotifications.notifyRoom(id, 'typing', username, isTyping);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unrecognized typing scope provided');\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"3fb1b465ad38126b664fe0721120b6f47be5f8c3"}
