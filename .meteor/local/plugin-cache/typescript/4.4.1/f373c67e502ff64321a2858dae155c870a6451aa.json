{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/persistence.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/persistence.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/persistence.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/persistence.ts","sourceRoot":"","sources":["app/apps/server/bridges/persistence.ts"],"names":[],"mappings":"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","sourcesContent":["import { PersistenceBridge } from '@rocket.chat/apps-engine/server/bridges/PersistenceBridge';\nimport { RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';\n\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppPersistenceBridge extends PersistenceBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async purge(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App's persistent storage is being purged: ${appId}`);\n\n\t\tthis.orch.getPersistenceModel().remove({ appId });\n\t}\n\n\tprotected async create(data: object, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is storing a new object in their persistence.`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch.getPersistenceModel().insert({ appId, data });\n\t}\n\n\tprotected async createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(\n\t\t\t`The App ${appId} is storing a new object in their persistence that is associated with some models.`,\n\t\t\tdata,\n\t\t\tassociations,\n\t\t);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch.getPersistenceModel().insert({ appId, associations, data });\n\t}\n\n\tprotected async readById(id: string, appId: string): Promise<object> {\n\t\tthis.orch.debugLog(`The App ${appId} is reading their data in their persistence with the id: \"${id}\"`);\n\n\t\tconst record = this.orch.getPersistenceModel().findOneById(id);\n\n\t\treturn record.data;\n\t}\n\n\tprotected async readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n\t\tthis.orch.debugLog(`The App ${appId} is searching for records that are associated with the following:`, associations);\n\n\t\tconst records = this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.find({\n\t\t\t\tappId,\n\t\t\t\tassociations: { $all: associations },\n\t\t\t})\n\t\t\t.fetch();\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async remove(id: string, appId: string): Promise<object | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing one of their records by the id: \"${id}\"`);\n\n\t\tconst record = this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\n\t\tif (!record) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.orch.getPersistenceModel().remove({ _id: id, appId });\n\n\t\treturn record.data;\n\t}\n\n\tprotected async removeByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tappId: string,\n\t): Promise<Array<object> | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing records with the following associations:`, associations);\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations: {\n\t\t\t\t$all: associations,\n\t\t\t},\n\t\t};\n\n\t\tconst records = this.orch.getPersistenceModel().find(query).fetch();\n\n\t\tif (!records) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.orch.getPersistenceModel().remove(query);\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async update(id: string, data: object, _upsert: boolean, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record \"${id}\" to:`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\tprotected async updateByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tdata: object,\n\t\tupsert: boolean,\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record with association to data as follows:`, associations, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations,\n\t\t};\n\n\t\treturn this.orch.getPersistenceModel().upsert(query, { $set: { data } }, { upsert });\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/persistence.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/persistence.ts"}},"code":"module.export({\n  AppPersistenceBridge: () => AppPersistenceBridge\n});\nlet PersistenceBridge;\nmodule.link(\"@rocket.chat/apps-engine/server/bridges/PersistenceBridge\", {\n  PersistenceBridge(v) {\n    PersistenceBridge = v;\n  }\n\n}, 0);\n\nclass AppPersistenceBridge extends PersistenceBridge {\n  // eslint-disable-next-line no-empty-function\n  constructor(orch) {\n    super();\n    this.orch = void 0;\n    this.orch = orch;\n  }\n\n  purge(appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App's persistent storage is being purged: \".concat(appId));\n      this.orch.getPersistenceModel().remove({\n        appId\n      });\n    });\n  }\n\n  create(data, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is storing a new object in their persistence.\"), data);\n\n      if (typeof data !== 'object') {\n        throw new Error('Attempted to store an invalid data type, it must be an object.');\n      }\n\n      return this.orch.getPersistenceModel().insert({\n        appId,\n        data\n      });\n    });\n  }\n\n  createWithAssociations(data, associations, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is storing a new object in their persistence that is associated with some models.\"), data, associations);\n\n      if (typeof data !== 'object') {\n        throw new Error('Attempted to store an invalid data type, it must be an object.');\n      }\n\n      return this.orch.getPersistenceModel().insert({\n        appId,\n        associations,\n        data\n      });\n    });\n  }\n\n  readById(id, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is reading their data in their persistence with the id: \\\"\").concat(id, \"\\\"\"));\n      const record = this.orch.getPersistenceModel().findOneById(id);\n      return record.data;\n    });\n  }\n\n  readByAssociations(associations, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is searching for records that are associated with the following:\"), associations);\n      const records = this.orch.getPersistenceModel().find({\n        appId,\n        associations: {\n          $all: associations\n        }\n      }).fetch();\n      return Array.isArray(records) ? records.map(r => r.data) : [];\n    });\n  }\n\n  remove(id, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is removing one of their records by the id: \\\"\").concat(id, \"\\\"\"));\n      const record = this.orch.getPersistenceModel().findOne({\n        _id: id,\n        appId\n      });\n\n      if (!record) {\n        return undefined;\n      }\n\n      this.orch.getPersistenceModel().remove({\n        _id: id,\n        appId\n      });\n      return record.data;\n    });\n  }\n\n  removeByAssociations(associations, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is removing records with the following associations:\"), associations);\n      const query = {\n        appId,\n        associations: {\n          $all: associations\n        }\n      };\n      const records = this.orch.getPersistenceModel().find(query).fetch();\n\n      if (!records) {\n        return undefined;\n      }\n\n      this.orch.getPersistenceModel().remove(query);\n      return Array.isArray(records) ? records.map(r => r.data) : [];\n    });\n  }\n\n  update(id, data, _upsert, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating the record \\\"\").concat(id, \"\\\" to:\"), data);\n\n      if (typeof data !== 'object') {\n        throw new Error('Attempted to store an invalid data type, it must be an object.');\n      }\n\n      throw new Error('Not implemented.');\n    });\n  }\n\n  updateByAssociations(associations, data, upsert, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating the record with association to data as follows:\"), associations, data);\n\n      if (typeof data !== 'object') {\n        throw new Error('Attempted to store an invalid data type, it must be an object.');\n      }\n\n      const query = {\n        appId,\n        associations\n      };\n      return this.orch.getPersistenceModel().upsert(query, {\n        $set: {\n          data\n        }\n      }, {\n        upsert\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["app/apps/server/bridges/persistence.ts"],"names":[],"mappings":"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","sourcesContent":["import { PersistenceBridge } from '@rocket.chat/apps-engine/server/bridges/PersistenceBridge';\nimport { RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';\n\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppPersistenceBridge extends PersistenceBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async purge(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App's persistent storage is being purged: ${appId}`);\n\n\t\tthis.orch.getPersistenceModel().remove({ appId });\n\t}\n\n\tprotected async create(data: object, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is storing a new object in their persistence.`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch.getPersistenceModel().insert({ appId, data });\n\t}\n\n\tprotected async createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(\n\t\t\t`The App ${appId} is storing a new object in their persistence that is associated with some models.`,\n\t\t\tdata,\n\t\t\tassociations,\n\t\t);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch.getPersistenceModel().insert({ appId, associations, data });\n\t}\n\n\tprotected async readById(id: string, appId: string): Promise<object> {\n\t\tthis.orch.debugLog(`The App ${appId} is reading their data in their persistence with the id: \"${id}\"`);\n\n\t\tconst record = this.orch.getPersistenceModel().findOneById(id);\n\n\t\treturn record.data;\n\t}\n\n\tprotected async readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n\t\tthis.orch.debugLog(`The App ${appId} is searching for records that are associated with the following:`, associations);\n\n\t\tconst records = this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.find({\n\t\t\t\tappId,\n\t\t\t\tassociations: { $all: associations },\n\t\t\t})\n\t\t\t.fetch();\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async remove(id: string, appId: string): Promise<object | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing one of their records by the id: \"${id}\"`);\n\n\t\tconst record = this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\n\t\tif (!record) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.orch.getPersistenceModel().remove({ _id: id, appId });\n\n\t\treturn record.data;\n\t}\n\n\tprotected async removeByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tappId: string,\n\t): Promise<Array<object> | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing records with the following associations:`, associations);\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations: {\n\t\t\t\t$all: associations,\n\t\t\t},\n\t\t};\n\n\t\tconst records = this.orch.getPersistenceModel().find(query).fetch();\n\n\t\tif (!records) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.orch.getPersistenceModel().remove(query);\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async update(id: string, data: object, _upsert: boolean, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record \"${id}\" to:`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\tprotected async updateByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tdata: object,\n\t\tupsert: boolean,\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record with association to data as follows:`, associations, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations,\n\t\t};\n\n\t\treturn this.orch.getPersistenceModel().upsert(query, { $set: { data } }, { upsert });\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"f373c67e502ff64321a2858dae155c870a6451aa"}
