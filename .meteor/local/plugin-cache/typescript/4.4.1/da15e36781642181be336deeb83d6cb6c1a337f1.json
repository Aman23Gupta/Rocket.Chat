{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/configuration/ldap.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/configuration/ldap.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/configuration/ldap.ts","inputSourceMap":{"version":3,"file":"server/configuration/ldap.ts","sourceRoot":"","sources":["server/configuration/ldap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,8BAA8B;AAC9B,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,UAAU,YAAiC;IAChF,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;QACpD,OAAO,SAAS,CAAC;KACjB;IAED,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC;AAEH,6DAA6D;AAC7D,IAAI,WAAoB,CAAC;AACzB,QAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;IACvC,IAAI,WAAW,KAAK,KAAK,EAAE;QAC1B,OAAO;KACP;IACD,WAAW,GAAG,KAAgB,CAAC;IAE/B,IAAI,CAAC,KAAK,EAAE;QACX,OAAO,SAAS,CAAC,MAAM,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;KAC5E;IAED,SAAS,CAAC,GAAG,CACZ,qBAAqB,EACrB,CAAC,KAA0B,EAAE,EAAE;QAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACnB,OAAO,KAAK,CAAC;SACb;QAED,0HAA0H;QAC1H,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,OAAO,KAAK,CAAC;SACb;QAED,oEAAoE;QACpE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE;YAClC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAU,qBAAqB,CAAC,IAAI,KAAK,CAAC;SACtE;QAED,OAAO,KAAK,CAAC;IACd,CAAC,EACD,SAAS,CAAC,QAAQ,CAAC,MAAM,EACzB,2BAA2B,CAC3B,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { Accounts } from 'meteor/accounts-base';\n\nimport { callbacks } from '../../lib/callbacks';\nimport { LDAP } from '../sdk';\nimport { settings } from '../../app/settings/server';\n\n// Register ldap login handler\nAccounts.registerLoginHandler('ldap', function (loginRequest: Record<string, any>) {\n\tif (!loginRequest.ldap || !loginRequest.ldapOptions) {\n\t\treturn undefined;\n\t}\n\n\treturn Promise.await(LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass));\n});\n\n// Prevent password logins by LDAP users when LDAP is enabled\nlet ldapEnabled: boolean;\nsettings.watch('LDAP_Enable', (value) => {\n\tif (ldapEnabled === value) {\n\t\treturn;\n\t}\n\tldapEnabled = value as boolean;\n\n\tif (!value) {\n\t\treturn callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n\t}\n\n\tcallbacks.add(\n\t\t'beforeValidateLogin',\n\t\t(login: Record<string, any>) => {\n\t\t\tif (!login.allowed) {\n\t\t\t\treturn login;\n\t\t\t}\n\n\t\t\t// The fallback setting should only block password logins, so users that have other login services can continue using them\n\t\t\tif (login.type !== 'password') {\n\t\t\t\treturn login;\n\t\t\t}\n\n\t\t\t// LDAP users can still login locally when login fallback is enabled\n\t\t\tif (login.user.services?.ldap?.id) {\n\t\t\t\tlogin.allowed = settings.get<boolean>('LDAP_Login_Fallback') ?? false;\n\t\t\t}\n\n\t\t\treturn login;\n\t\t},\n\t\tcallbacks.priority.MEDIUM,\n\t\t'validateLdapLoginFallback',\n\t);\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/configuration/ldap.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/configuration/ldap.ts"}},"code":"let Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nlet callbacks;\nmodule.link(\"../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 1);\nlet LDAP;\nmodule.link(\"../sdk\", {\n  LDAP(v) {\n    LDAP = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\n// Register ldap login handler\nAccounts.registerLoginHandler('ldap', function (loginRequest) {\n  if (!loginRequest.ldap || !loginRequest.ldapOptions) {\n    return undefined;\n  }\n\n  return Promise.await(LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass));\n}); // Prevent password logins by LDAP users when LDAP is enabled\n\nlet ldapEnabled;\nsettings.watch('LDAP_Enable', value => {\n  if (ldapEnabled === value) {\n    return;\n  }\n\n  ldapEnabled = value;\n\n  if (!value) {\n    return callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n  }\n\n  callbacks.add('beforeValidateLogin', login => {\n    var _login$user$services, _login$user$services$;\n\n    if (!login.allowed) {\n      return login;\n    } // The fallback setting should only block password logins, so users that have other login services can continue using them\n\n\n    if (login.type !== 'password') {\n      return login;\n    } // LDAP users can still login locally when login fallback is enabled\n\n\n    if ((_login$user$services = login.user.services) !== null && _login$user$services !== void 0 && (_login$user$services$ = _login$user$services.ldap) !== null && _login$user$services$ !== void 0 && _login$user$services$.id) {\n      var _settings$get;\n\n      login.allowed = (_settings$get = settings.get('LDAP_Login_Fallback')) !== null && _settings$get !== void 0 ? _settings$get : false;\n    }\n\n    return login;\n  }, callbacks.priority.MEDIUM, 'validateLdapLoginFallback');\n});","map":{"version":3,"sources":["server/configuration/ldap.ts"],"names":[],"mappings":"AAAA,IAAA,QAAA;AAAS,MAAU,CAAA,IAAV,CAAgB,sBAAhB,EAAuC;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAvC,EAAuC,CAAvC;AAAuC,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,qBAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,IAAA;AAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AAAA,EAAA,IAAA,CAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,2BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAMhD;AACA,QAAQ,CAAC,oBAAT,CAA8B,MAA9B,EAAsC,UAAU,YAAV,EAA2C;AAChF,MAAI,CAAC,YAAY,CAAC,IAAd,IAAsB,CAAC,YAAY,CAAC,WAAxC,EAAqD;AACpD,WAAO,SAAP;AACA;;AAED,SAAO,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,YAAL,CAAkB,YAAY,CAAC,QAA/B,EAAyC,YAAY,CAAC,QAAtD,CAAd,CAAP;AACA,CAND,E,CAQA;;AACA,IAAI,WAAJ;AACA,QAAQ,CAAC,KAAT,CAAe,aAAf,EAA+B,KAAD,IAAU;AACvC,MAAI,WAAW,KAAK,KAApB,EAA2B;AAC1B;AACA;;AACD,EAAA,WAAW,GAAG,KAAd;;AAEA,MAAI,CAAC,KAAL,EAAY;AACX,WAAO,SAAS,CAAC,MAAV,CAAiB,qBAAjB,EAAwC,2BAAxC,CAAP;AACA;;AAED,EAAA,SAAS,CAAC,GAAV,CACC,qBADD,EAEE,KAAD,IAA+B;AAAA;;AAC9B,QAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AACnB,aAAO,KAAP;AACA,KAH6B,CAK9B;;;AACA,QAAI,KAAK,CAAC,IAAN,KAAe,UAAnB,EAA+B;AAC9B,aAAO,KAAP;AACA,KAR6B,CAU9B;;;AACA,gCAAI,KAAK,CAAC,IAAN,CAAW,QAAf,0EAAI,qBAAqB,IAAzB,kDAAI,sBAA2B,EAA/B,EAAmC;AAAA;;AAClC,MAAA,KAAK,CAAC,OAAN,oBAAgB,QAAQ,CAAC,GAAT,CAAsB,qBAAtB,CAAhB,yDAAgE,KAAhE;AACA;;AAED,WAAO,KAAP;AACA,GAlBF,EAmBC,SAAS,CAAC,QAAV,CAAmB,MAnBpB,EAoBC,2BApBD;AAsBA,CAhCD","sourcesContent":["import { Accounts } from 'meteor/accounts-base';\n\nimport { callbacks } from '../../lib/callbacks';\nimport { LDAP } from '../sdk';\nimport { settings } from '../../app/settings/server';\n\n// Register ldap login handler\nAccounts.registerLoginHandler('ldap', function (loginRequest: Record<string, any>) {\n\tif (!loginRequest.ldap || !loginRequest.ldapOptions) {\n\t\treturn undefined;\n\t}\n\n\treturn Promise.await(LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass));\n});\n\n// Prevent password logins by LDAP users when LDAP is enabled\nlet ldapEnabled: boolean;\nsettings.watch('LDAP_Enable', (value) => {\n\tif (ldapEnabled === value) {\n\t\treturn;\n\t}\n\tldapEnabled = value as boolean;\n\n\tif (!value) {\n\t\treturn callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n\t}\n\n\tcallbacks.add(\n\t\t'beforeValidateLogin',\n\t\t(login: Record<string, any>) => {\n\t\t\tif (!login.allowed) {\n\t\t\t\treturn login;\n\t\t\t}\n\n\t\t\t// The fallback setting should only block password logins, so users that have other login services can continue using them\n\t\t\tif (login.type !== 'password') {\n\t\t\t\treturn login;\n\t\t\t}\n\n\t\t\t// LDAP users can still login locally when login fallback is enabled\n\t\t\tif (login.user.services?.ldap?.id) {\n\t\t\t\tlogin.allowed = settings.get<boolean>('LDAP_Login_Fallback') ?? false;\n\t\t\t}\n\n\t\t\treturn login;\n\t\t},\n\t\tcallbacks.priority.MEDIUM,\n\t\t'validateLdapLoginFallback',\n\t);\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"da15e36781642181be336deeb83d6cb6c1a337f1"}
