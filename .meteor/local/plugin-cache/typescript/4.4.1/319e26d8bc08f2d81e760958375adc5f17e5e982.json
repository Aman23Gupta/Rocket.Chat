{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/rooms.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/rooms.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/rooms.ts","sourceRoot":"","sources":["app/apps/server/bridges/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { RoomType, IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport { RoomBridge } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { Meteor } from 'meteor/meteor';\n\nimport { AppServerOrchestrator } from '../orchestrator';\nimport { Rooms, Subscriptions, Users } from '../../../models/server';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { ISubscription } from '../../../../definition/ISubscription';\n\nexport class AppRoomBridge extends RoomBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new room.`, room);\n\n\t\tconst rcRoom = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\t\tlet method: string;\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\tmethod = 'createChannel';\n\t\t\t\tbreak;\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\tmethod = 'createPrivateGroup';\n\t\t\t\tbreak;\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\tmethod = 'createDirectMessage';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\n\t\tlet rid = '';\n\t\tMeteor.runAsUser(room.creator.id, () => {\n\t\t\tconst extraData = Object.assign({}, rcRoom);\n\t\t\tdelete extraData.name;\n\t\t\tdelete extraData.t;\n\t\t\tdelete extraData.ro;\n\t\t\tdelete extraData.customFields;\n\t\t\tlet info;\n\t\t\tif (room.type === RoomType.DIRECT_MESSAGE) {\n\t\t\t\tinfo = Meteor.call(method, ...members);\n\t\t\t} else {\n\t\t\t\tinfo = Meteor.call(method, rcRoom.name, members, rcRoom.ro, rcRoom.customFields, extraData);\n\t\t\t}\n\t\t\trid = info.rid;\n\t\t});\n\n\t\treturn rid;\n\t}\n\n\tprotected async getById(roomId: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomById: \"${roomId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertById(roomId);\n\t}\n\n\tprotected async getByName(roomName: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomByName: \"${roomName}\"`);\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertByName(roomName);\n\t}\n\n\tprotected async getCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by id: \"${roomId}\"`);\n\n\t\tconst room = Rooms.findOneById(roomId);\n\n\t\tif (!room || !room.u || !room.u._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by name: \"${roomName}\"`);\n\n\t\tconst room = Rooms.findOneByName(roomName, {});\n\n\t\tif (!room || !room.u || !room.u._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's members by room id: \"${roomId}\"`);\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\treturn subscriptions.map((sub: ISubscription) =>\n\t\t\tthis.orch\n\t\t\t\t.getConverters()\n\t\t\t\t?.get('users')\n\t\t\t\t.convertById(sub.u && sub.u._id),\n\t\t);\n\t}\n\n\tprotected async getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting direct room by usernames: \"${usernames}\"`);\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room);\n\t}\n\n\tprotected async update(room: IRoom, members: Array<string> = [], appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a room.`);\n\n\t\tif (!room.id || !Rooms.findOneById(room.id)) {\n\t\t\tthrow new Error('A room must exist to update.');\n\t\t}\n\n\t\tconst rm = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tRooms.update(rm._id, rm);\n\n\t\tfor (const username of members) {\n\t\t\tconst member = Users.findOneByUsername(username, {});\n\n\t\t\tif (!member) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taddUserToRoom(rm._id, member);\n\t\t}\n\t}\n\n\tprotected async delete(roomId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a room.`);\n\t\tRooms.removeById(roomId);\n\t}\n\n\tprotected async createDiscussion(\n\t\troom: IRoom,\n\t\tparentMessage: IMessage | undefined = undefined,\n\t\treply: string | undefined = '',\n\t\tmembers: Array<string> = [],\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new discussion.`, room);\n\n\t\tconst rcRoom = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tlet rcMessage;\n\t\tif (parentMessage) {\n\t\t\trcMessage = this.orch.getConverters()?.get('messages').convertAppMessage(parentMessage);\n\t\t}\n\n\t\tif (!rcRoom.prid || !Rooms.findOneById(rcRoom.prid)) {\n\t\t\tthrow new Error('There must be a parent room to create a discussion.');\n\t\t}\n\n\t\tconst discussion = {\n\t\t\tprid: rcRoom.prid,\n\t\t\tt_name: rcRoom.fname, // eslint-disable-line @typescript-eslint/camelcase\n\t\t\tpmid: rcMessage ? rcMessage._id : undefined,\n\t\t\treply: reply && reply.trim() !== '' ? reply : undefined,\n\t\t\tusers: members.length > 0 ? members : [],\n\t\t};\n\n\t\tlet rid = '';\n\t\tMeteor.runAsUser(room.creator.id, () => {\n\t\t\tconst info = Meteor.call('createDiscussion', discussion);\n\t\t\trid = info.rid;\n\t\t});\n\n\t\treturn rid;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/rooms.ts"}},"code":"module.export({\n  AppRoomBridge: () => AppRoomBridge\n});\nlet RoomType;\nmodule.link(\"@rocket.chat/apps-engine/definition/rooms\", {\n  RoomType(v) {\n    RoomType = v;\n  }\n\n}, 0);\nlet RoomBridge;\nmodule.link(\"@rocket.chat/apps-engine/server/bridges/RoomBridge\", {\n  RoomBridge(v) {\n    RoomBridge = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet Rooms, Subscriptions, Users;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 3);\nlet addUserToRoom;\nmodule.link(\"../../../lib/server/functions/addUserToRoom\", {\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  }\n\n}, 4);\n\nclass AppRoomBridge extends RoomBridge {\n  // eslint-disable-next-line no-empty-function\n  constructor(orch) {\n    super();\n    this.orch = void 0;\n    this.orch = orch;\n  }\n\n  create(room, members, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a new room.\"), room);\n      const rcRoom = (_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('rooms').convertAppRoom(room);\n      let method;\n\n      switch (room.type) {\n        case RoomType.CHANNEL:\n          method = 'createChannel';\n          break;\n\n        case RoomType.PRIVATE_GROUP:\n          method = 'createPrivateGroup';\n          break;\n\n        case RoomType.DIRECT_MESSAGE:\n          method = 'createDirectMessage';\n          break;\n\n        default:\n          throw new Error('Only channels, private groups and direct messages can be created.');\n      }\n\n      let rid = '';\n      Meteor.runAsUser(room.creator.id, () => {\n        const extraData = Object.assign({}, rcRoom);\n        delete extraData.name;\n        delete extraData.t;\n        delete extraData.ro;\n        delete extraData.customFields;\n        let info;\n\n        if (room.type === RoomType.DIRECT_MESSAGE) {\n          info = Meteor.call(method, ...members);\n        } else {\n          info = Meteor.call(method, rcRoom.name, members, rcRoom.ro, rcRoom.customFields, extraData);\n        }\n\n        rid = info.rid;\n      });\n      return rid;\n    });\n  }\n\n  getById(roomId, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert2;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the roomById: \\\"\").concat(roomId, \"\\\"\"));\n      return (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('rooms').convertById(roomId);\n    });\n  }\n\n  getByName(roomName, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert3;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the roomByName: \\\"\").concat(roomName, \"\\\"\"));\n      return (_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('rooms').convertByName(roomName);\n    });\n  }\n\n  getCreatorById(roomId, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert4;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's creator by id: \\\"\").concat(roomId, \"\\\"\"));\n      const room = Rooms.findOneById(roomId);\n\n      if (!room || !room.u || !room.u._id) {\n        return undefined;\n      }\n\n      return (_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('users').convertById(room.u._id);\n    });\n  }\n\n  getCreatorByName(roomName, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert5;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's creator by name: \\\"\").concat(roomName, \"\\\"\"));\n      const room = Rooms.findOneByName(roomName, {});\n\n      if (!room || !room.u || !room.u._id) {\n        return undefined;\n      }\n\n      return (_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('users').convertById(room.u._id);\n    });\n  }\n\n  getMembers(roomId, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's members by room id: \\\"\").concat(roomId, \"\\\"\"));\n      const subscriptions = Promise.await(Subscriptions.findByRoomId(roomId, {}));\n      return subscriptions.map(sub => {\n        var _this$orch$getConvert6;\n\n        return (_this$orch$getConvert6 = this.orch.getConverters()) === null || _this$orch$getConvert6 === void 0 ? void 0 : _this$orch$getConvert6.get('users').convertById(sub.u && sub.u._id);\n      });\n    });\n  }\n\n  getDirectByUsernames(usernames, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert7;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting direct room by usernames: \\\"\").concat(usernames, \"\\\"\"));\n      const room = Promise.await(Rooms.findDirectRoomContainingAllUsernames(usernames, {}));\n\n      if (!room) {\n        return undefined;\n      }\n\n      return (_this$orch$getConvert7 = this.orch.getConverters()) === null || _this$orch$getConvert7 === void 0 ? void 0 : _this$orch$getConvert7.get('rooms').convertRoom(room);\n    });\n  }\n\n  update(room) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert8;\n\n      let members = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      let appId = arguments.length > 2 ? arguments[2] : undefined;\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating a room.\"));\n\n      if (!room.id || !Rooms.findOneById(room.id)) {\n        throw new Error('A room must exist to update.');\n      }\n\n      const rm = (_this$orch$getConvert8 = this.orch.getConverters()) === null || _this$orch$getConvert8 === void 0 ? void 0 : _this$orch$getConvert8.get('rooms').convertAppRoom(room);\n      Rooms.update(rm._id, rm);\n\n      for (const username of members) {\n        const member = Users.findOneByUsername(username, {});\n\n        if (!member) {\n          continue;\n        }\n\n        addUserToRoom(rm._id, member);\n      }\n    });\n  }\n\n  delete(roomId, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is deleting a room.\"));\n      Rooms.removeById(roomId);\n    });\n  }\n\n  createDiscussion(room) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert9;\n\n      let parentMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      let reply = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let members = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      let appId = arguments.length > 4 ? arguments[4] : undefined;\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a new discussion.\"), room);\n      const rcRoom = (_this$orch$getConvert9 = this.orch.getConverters()) === null || _this$orch$getConvert9 === void 0 ? void 0 : _this$orch$getConvert9.get('rooms').convertAppRoom(room);\n      let rcMessage;\n\n      if (parentMessage) {\n        var _this$orch$getConvert10;\n\n        rcMessage = (_this$orch$getConvert10 = this.orch.getConverters()) === null || _this$orch$getConvert10 === void 0 ? void 0 : _this$orch$getConvert10.get('messages').convertAppMessage(parentMessage);\n      }\n\n      if (!rcRoom.prid || !Rooms.findOneById(rcRoom.prid)) {\n        throw new Error('There must be a parent room to create a discussion.');\n      }\n\n      const discussion = {\n        prid: rcRoom.prid,\n        t_name: rcRoom.fname,\n        pmid: rcMessage ? rcMessage._id : undefined,\n        reply: reply && reply.trim() !== '' ? reply : undefined,\n        users: members.length > 0 ? members : []\n      };\n      let rid = '';\n      Meteor.runAsUser(room.creator.id, () => {\n        const info = Meteor.call('createDiscussion', discussion);\n        rid = info.rid;\n      });\n      return rid;\n    });\n  }\n\n}","map":{"version":3,"sources":["app/apps/server/bridges/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { RoomType, IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport { RoomBridge } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { Meteor } from 'meteor/meteor';\n\nimport { AppServerOrchestrator } from '../orchestrator';\nimport { Rooms, Subscriptions, Users } from '../../../models/server';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { ISubscription } from '../../../../definition/ISubscription';\n\nexport class AppRoomBridge extends RoomBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new room.`, room);\n\n\t\tconst rcRoom = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\t\tlet method: string;\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\tmethod = 'createChannel';\n\t\t\t\tbreak;\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\tmethod = 'createPrivateGroup';\n\t\t\t\tbreak;\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\tmethod = 'createDirectMessage';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\n\t\tlet rid = '';\n\t\tMeteor.runAsUser(room.creator.id, () => {\n\t\t\tconst extraData = Object.assign({}, rcRoom);\n\t\t\tdelete extraData.name;\n\t\t\tdelete extraData.t;\n\t\t\tdelete extraData.ro;\n\t\t\tdelete extraData.customFields;\n\t\t\tlet info;\n\t\t\tif (room.type === RoomType.DIRECT_MESSAGE) {\n\t\t\t\tinfo = Meteor.call(method, ...members);\n\t\t\t} else {\n\t\t\t\tinfo = Meteor.call(method, rcRoom.name, members, rcRoom.ro, rcRoom.customFields, extraData);\n\t\t\t}\n\t\t\trid = info.rid;\n\t\t});\n\n\t\treturn rid;\n\t}\n\n\tprotected async getById(roomId: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomById: \"${roomId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertById(roomId);\n\t}\n\n\tprotected async getByName(roomName: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomByName: \"${roomName}\"`);\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertByName(roomName);\n\t}\n\n\tprotected async getCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by id: \"${roomId}\"`);\n\n\t\tconst room = Rooms.findOneById(roomId);\n\n\t\tif (!room || !room.u || !room.u._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by name: \"${roomName}\"`);\n\n\t\tconst room = Rooms.findOneByName(roomName, {});\n\n\t\tif (!room || !room.u || !room.u._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's members by room id: \"${roomId}\"`);\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\treturn subscriptions.map((sub: ISubscription) =>\n\t\t\tthis.orch\n\t\t\t\t.getConverters()\n\t\t\t\t?.get('users')\n\t\t\t\t.convertById(sub.u && sub.u._id),\n\t\t);\n\t}\n\n\tprotected async getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting direct room by usernames: \"${usernames}\"`);\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room);\n\t}\n\n\tprotected async update(room: IRoom, members: Array<string> = [], appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a room.`);\n\n\t\tif (!room.id || !Rooms.findOneById(room.id)) {\n\t\t\tthrow new Error('A room must exist to update.');\n\t\t}\n\n\t\tconst rm = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tRooms.update(rm._id, rm);\n\n\t\tfor (const username of members) {\n\t\t\tconst member = Users.findOneByUsername(username, {});\n\n\t\t\tif (!member) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taddUserToRoom(rm._id, member);\n\t\t}\n\t}\n\n\tprotected async delete(roomId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a room.`);\n\t\tRooms.removeById(roomId);\n\t}\n\n\tprotected async createDiscussion(\n\t\troom: IRoom,\n\t\tparentMessage: IMessage | undefined = undefined,\n\t\treply: string | undefined = '',\n\t\tmembers: Array<string> = [],\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new discussion.`, room);\n\n\t\tconst rcRoom = this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tlet rcMessage;\n\t\tif (parentMessage) {\n\t\t\trcMessage = this.orch.getConverters()?.get('messages').convertAppMessage(parentMessage);\n\t\t}\n\n\t\tif (!rcRoom.prid || !Rooms.findOneById(rcRoom.prid)) {\n\t\t\tthrow new Error('There must be a parent room to create a discussion.');\n\t\t}\n\n\t\tconst discussion = {\n\t\t\tprid: rcRoom.prid,\n\t\t\tt_name: rcRoom.fname, // eslint-disable-line @typescript-eslint/camelcase\n\t\t\tpmid: rcMessage ? rcMessage._id : undefined,\n\t\t\treply: reply && reply.trim() !== '' ? reply : undefined,\n\t\t\tusers: members.length > 0 ? members : [],\n\t\t};\n\n\t\tlet rid = '';\n\t\tMeteor.runAsUser(room.creator.id, () => {\n\t\t\tconst info = Meteor.call('createDiscussion', discussion);\n\t\t\trid = info.rid;\n\t\t});\n\n\t\treturn rid;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"319e26d8bc08f2d81e760958375adc5f17e5e982"}
