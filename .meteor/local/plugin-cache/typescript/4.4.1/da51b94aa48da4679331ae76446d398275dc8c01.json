{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Subscriptions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Subscriptions.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Subscriptions.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/Subscriptions.ts","sourceRoot":"","sources":["app/models/server/raw/Subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindOneOptions, Cursor, UpdateQuery, FilterQuery, UpdateWriteOpResult, Collection, WithoutProjection } from 'mongodb';\nimport { compact } from 'lodash';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { IRole, IUser } from '../../../../definition/IUser';\nimport { IRoom } from '../../../../definition/IRoom';\nimport { UsersRaw } from './Users';\n\ntype T = ISubscription;\nexport class SubscriptionsRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, private readonly models: { Users: UsersRaw }, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\t}\n\n\tasync getBadgeCount(uid: string): Promise<number> {\n\t\tconst [result] = await this.col\n\t\t\t.aggregate<{ total: number } | undefined>([\n\t\t\t\t{ $match: { 'u._id': uid, 'archived': { $ne: true } } },\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: 'total',\n\t\t\t\t\t\ttotal: { $sum: '$unread' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\n\t\treturn result?.total || 0;\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: string, uid: string, options: FindOneOptions<T> = {}): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId: string, roomIds: Array<string>, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId: string, userId: string, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByLivechatRoomIdAndNotUserId(roomId: string, userId: string, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'servedBy._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndUserId(rid: string, uid: string | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst cursor = this.find(query, { projection: { _id: 0 } });\n\n\t\treturn cursor.count();\n\t}\n\n\tasync isUserInRole(uid: IUser['_id'], roleName: IRole['name'], rid?: IRoom['_id']): Promise<T | null> {\n\t\tif (rid == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t\t'roles': roleName,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { roles: 1 } });\n\t}\n\n\tsetAsReadByRoomIdAndUserId(rid: string, uid: string, alert = false, options: FindOneOptions<T> = {}): ReturnType<BaseRaw<T>['update']> {\n\t\tconst query: FilterQuery<T> = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst update: UpdateQuery<T> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, options);\n\t}\n\n\tremoveRolesByUserId(uid: IUser['_id'], roles: IRole['name'][], rid: IRoom['_id']): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(name: IRole['name'][], rid: string | undefined): Promise<Cursor<IUser>>;\n\n\tfindUsersInRoles(\n\t\tname: IRole['name'][],\n\t\trid: string | undefined,\n\t\toptions: WithoutProjection<FindOneOptions<IUser>>,\n\t): Promise<Cursor<IUser>>;\n\n\tfindUsersInRoles<P = IUser>(\n\t\tname: IRole['name'][],\n\t\trid: string | undefined,\n\t\toptions: FindOneOptions<P extends IUser ? IUser : P>,\n\t): Promise<Cursor<P>>;\n\n\tasync findUsersInRoles<P = IUser>(\n\t\troles: IRole['name'][],\n\t\trid: IRoom['_id'] | undefined,\n\t\toptions?: FindOneOptions<P extends IUser ? IUser : P>,\n\t): Promise<Cursor<P>> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\tconst subscriptions = await this.find(query).toArray();\n\n\t\tconst users = compact(subscriptions.map((subscription) => subscription.u?._id).filter(Boolean));\n\n\t\treturn !options\n\t\t\t? this.models.Users.find({ _id: { $in: users } })\n\t\t\t: this.models.Users.find({ _id: { $in: users } } as FilterQuery<IUser>, options);\n\t}\n\n\taddRolesByUserId(uid: IUser['_id'], roles: IRole['name'][], rid?: IRoom['_id']): Promise<UpdateWriteOpResult> {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid: IUser['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst options = {\n\t\t\tfields: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Subscriptions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Subscriptions.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  SubscriptionsRaw: () => SubscriptionsRaw\n});\nlet compact;\nmodule.link(\"lodash\", {\n  compact(v) {\n    compact = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\n\nclass SubscriptionsRaw extends BaseRaw {\n  constructor(col, models, trash) {\n    super(col, trash);\n    this.col = void 0;\n    this.models = void 0;\n    this.col = col;\n    this.models = models;\n  }\n\n  getBadgeCount(uid) {\n    return Promise.asyncApply(() => {\n      const [result] = Promise.await(this.col.aggregate([{\n        $match: {\n          'u._id': uid,\n          'archived': {\n            $ne: true\n          }\n        }\n      }, {\n        $group: {\n          _id: 'total',\n          total: {\n            $sum: '$unread'\n          }\n        }\n      }]).toArray());\n      return (result === null || result === void 0 ? void 0 : result.total) || 0;\n    });\n  }\n\n  findOneByRoomIdAndUserId(rid, uid) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      rid,\n      'u._id': uid\n    };\n    return this.findOne(query, options);\n  }\n\n  findByUserIdAndRoomIds(userId, roomIds) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      'u._id': userId,\n      'rid': {\n        $in: roomIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomIdAndNotUserId(roomId, userId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $ne: userId\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByLivechatRoomIdAndNotUserId(roomId, userId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      'rid': roomId,\n      'servedBy._id': {\n        $ne: userId\n      }\n    };\n    return this.find(query, options);\n  }\n\n  countByRoomIdAndUserId(rid, uid) {\n    const query = {\n      rid,\n      'u._id': uid\n    };\n    const cursor = this.find(query, {\n      projection: {\n        _id: 0\n      }\n    });\n    return cursor.count();\n  }\n\n  isUserInRole(uid, roleName, rid) {\n    return Promise.asyncApply(() => {\n      if (rid == null) {\n        return null;\n      }\n\n      const query = {\n        'u._id': uid,\n        rid,\n        'roles': roleName\n      };\n      return this.findOne(query, {\n        projection: {\n          roles: 1\n        }\n      });\n    });\n  }\n\n  setAsReadByRoomIdAndUserId(rid, uid) {\n    let alert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const query = {\n      rid,\n      'u._id': uid\n    };\n    const update = {\n      $set: {\n        open: true,\n        alert,\n        unread: 0,\n        userMentions: 0,\n        groupMentions: 0,\n        ls: new Date()\n      }\n    };\n    return this.update(query, update, options);\n  }\n\n  removeRolesByUserId(uid, roles, rid) {\n    const query = {\n      'u._id': uid,\n      rid\n    };\n    const update = {\n      $pullAll: {\n        roles\n      }\n    };\n    return this.updateOne(query, update);\n  }\n\n  findUsersInRoles(roles, rid, options) {\n    return Promise.asyncApply(() => {\n      const query = _objectSpread({\n        roles: {\n          $in: roles\n        }\n      }, rid && {\n        rid\n      });\n\n      const subscriptions = Promise.await(this.find(query).toArray());\n      const users = compact(subscriptions.map(subscription => {\n        var _subscription$u;\n\n        return (_subscription$u = subscription.u) === null || _subscription$u === void 0 ? void 0 : _subscription$u._id;\n      }).filter(Boolean));\n      return !options ? this.models.Users.find({\n        _id: {\n          $in: users\n        }\n      }) : this.models.Users.find({\n        _id: {\n          $in: users\n        }\n      }, options);\n    });\n  }\n\n  addRolesByUserId(uid, roles, rid) {\n    if (!Array.isArray(roles)) {\n      roles = [roles];\n      process.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n    }\n\n    const query = {\n      'u._id': uid,\n      rid\n    };\n    const update = {\n      $addToSet: {\n        roles: {\n          $each: roles\n        }\n      }\n    };\n    return this.updateOne(query, update);\n  }\n\n  isUserInRoleScope(uid, rid) {\n    return Promise.asyncApply(() => {\n      const query = {\n        'u._id': uid,\n        rid\n      };\n\n      if (!rid) {\n        return false;\n      }\n\n      const options = {\n        fields: {\n          _id: 1\n        }\n      };\n      const found = Promise.await(this.findOne(query, options));\n      return !!found;\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { FindOneOptions, Cursor, UpdateQuery, FilterQuery, UpdateWriteOpResult, Collection, WithoutProjection } from 'mongodb';\nimport { compact } from 'lodash';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ISubscription } from '../../../../definition/ISubscription';\nimport { IRole, IUser } from '../../../../definition/IUser';\nimport { IRoom } from '../../../../definition/IRoom';\nimport { UsersRaw } from './Users';\n\ntype T = ISubscription;\nexport class SubscriptionsRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, private readonly models: { Users: UsersRaw }, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\t}\n\n\tasync getBadgeCount(uid: string): Promise<number> {\n\t\tconst [result] = await this.col\n\t\t\t.aggregate<{ total: number } | undefined>([\n\t\t\t\t{ $match: { 'u._id': uid, 'archived': { $ne: true } } },\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: 'total',\n\t\t\t\t\t\ttotal: { $sum: '$unread' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\n\t\treturn result?.total || 0;\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: string, uid: string, options: FindOneOptions<T> = {}): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId: string, roomIds: Array<string>, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId: string, userId: string, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByLivechatRoomIdAndNotUserId(roomId: string, userId: string, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'servedBy._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndUserId(rid: string, uid: string | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst cursor = this.find(query, { projection: { _id: 0 } });\n\n\t\treturn cursor.count();\n\t}\n\n\tasync isUserInRole(uid: IUser['_id'], roleName: IRole['name'], rid?: IRoom['_id']): Promise<T | null> {\n\t\tif (rid == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t\t'roles': roleName,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { roles: 1 } });\n\t}\n\n\tsetAsReadByRoomIdAndUserId(rid: string, uid: string, alert = false, options: FindOneOptions<T> = {}): ReturnType<BaseRaw<T>['update']> {\n\t\tconst query: FilterQuery<T> = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst update: UpdateQuery<T> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, options);\n\t}\n\n\tremoveRolesByUserId(uid: IUser['_id'], roles: IRole['name'][], rid: IRoom['_id']): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(name: IRole['name'][], rid: string | undefined): Promise<Cursor<IUser>>;\n\n\tfindUsersInRoles(\n\t\tname: IRole['name'][],\n\t\trid: string | undefined,\n\t\toptions: WithoutProjection<FindOneOptions<IUser>>,\n\t): Promise<Cursor<IUser>>;\n\n\tfindUsersInRoles<P = IUser>(\n\t\tname: IRole['name'][],\n\t\trid: string | undefined,\n\t\toptions: FindOneOptions<P extends IUser ? IUser : P>,\n\t): Promise<Cursor<P>>;\n\n\tasync findUsersInRoles<P = IUser>(\n\t\troles: IRole['name'][],\n\t\trid: IRoom['_id'] | undefined,\n\t\toptions?: FindOneOptions<P extends IUser ? IUser : P>,\n\t): Promise<Cursor<P>> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\tconst subscriptions = await this.find(query).toArray();\n\n\t\tconst users = compact(subscriptions.map((subscription) => subscription.u?._id).filter(Boolean));\n\n\t\treturn !options\n\t\t\t? this.models.Users.find({ _id: { $in: users } })\n\t\t\t: this.models.Users.find({ _id: { $in: users } } as FilterQuery<IUser>, options);\n\t}\n\n\taddRolesByUserId(uid: IUser['_id'], roles: IRole['name'][], rid?: IRoom['_id']): Promise<UpdateWriteOpResult> {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid: IUser['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst options = {\n\t\t\tfields: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"da51b94aa48da4679331ae76446d398275dc8c01"}
