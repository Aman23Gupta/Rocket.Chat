{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/notification-queue/server/NotificationQueue.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/notification-queue/server/NotificationQueue.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/notification-queue/server/NotificationQueue.ts","inputSourceMap":{"version":3,"file":"app/notification-queue/server/NotificationQueue.ts","sourceRoot":"","sources":["app/notification-queue/server/NotificationQueue.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { INotification, INotificationItemPush, INotificationItemEmail, NotificationItem } from '../../../definition/INotification';\nimport { NotificationQueue, Users } from '../../models/server/raw';\nimport { sendEmailFromData } from '../../lib/server/functions/notifications/email';\nimport { PushNotification } from '../../push-notifications/server';\nimport { IUser } from '../../../definition/IUser';\nimport { SystemLogger } from '../../../server/lib/logger/system';\n\nconst {\n\tNOTIFICATIONS_WORKER_TIMEOUT = 2000,\n\tNOTIFICATIONS_BATCH_SIZE = 100,\n\tNOTIFICATIONS_SCHEDULE_DELAY_ONLINE = 120,\n\tNOTIFICATIONS_SCHEDULE_DELAY_AWAY = 0,\n\tNOTIFICATIONS_SCHEDULE_DELAY_OFFLINE = 0,\n} = process.env;\n\nclass NotificationClass {\n\tprivate running = false;\n\n\tprivate cyclePause = Number(NOTIFICATIONS_WORKER_TIMEOUT);\n\n\tprivate maxBatchSize = Number(NOTIFICATIONS_BATCH_SIZE);\n\n\tprivate maxScheduleDelaySeconds: { [key: string]: number } = {\n\t\tonline: Number(NOTIFICATIONS_SCHEDULE_DELAY_ONLINE),\n\t\taway: Number(NOTIFICATIONS_SCHEDULE_DELAY_AWAY),\n\t\toffline: Number(NOTIFICATIONS_SCHEDULE_DELAY_OFFLINE),\n\t};\n\n\tinitWorker(): void {\n\t\tthis.running = true;\n\t\tthis.executeWorkerLater();\n\t}\n\n\tstopWorker(): void {\n\t\tthis.running = false;\n\t}\n\n\texecuteWorkerLater(): void {\n\t\tif (!this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\ttry {\n\t\t\t\tthis.worker();\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error sending notification', e);\n\t\t\t\tthis.executeWorkerLater();\n\t\t\t}\n\t\t}, this.cyclePause);\n\t}\n\n\tasync worker(counter = 0): Promise<void> {\n\t\tconst notification = await this.getNextNotification();\n\n\t\tif (!notification) {\n\t\t\treturn this.executeWorkerLater();\n\t\t}\n\n\t\t// Once we start notifying the user we anticipate all the schedules\n\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\n\t\t// start worker again it queue flushed\n\t\tif (flush.modifiedCount) {\n\t\t\tawait NotificationQueue.unsetSendingById(notification._id);\n\t\t\treturn this.worker(counter);\n\t\t}\n\n\t\ttry {\n\t\t\tfor (const item of notification.items) {\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase 'push':\n\t\t\t\t\t\tthis.push(notification, item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tthis.email(item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tNotificationQueue.removeById(notification._id);\n\t\t} catch (e) {\n\t\t\tSystemLogger.error(e);\n\t\t\tawait NotificationQueue.setErrorById(notification._id, e.message);\n\t\t}\n\n\t\tif (counter >= this.maxBatchSize) {\n\t\t\treturn this.executeWorkerLater();\n\t\t}\n\t\tthis.worker(counter++);\n\t}\n\n\tgetNextNotification(): Promise<INotification | undefined> {\n\t\tconst expired = new Date();\n\t\texpired.setMinutes(expired.getMinutes() - 5);\n\n\t\treturn NotificationQueue.findNextInQueueOrExpired(expired);\n\t}\n\n\tpush({ uid, rid, mid }: INotification, item: INotificationItemPush): void {\n\t\tPushNotification.send({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\t...item.data,\n\t\t});\n\t}\n\n\temail(item: INotificationItemEmail): void {\n\t\tsendEmailFromData(item.data);\n\t}\n\n\tasync scheduleItem({\n\t\tuid,\n\t\trid,\n\t\tmid,\n\t\titems,\n\t\tuser,\n\t}: {\n\t\tuid: string;\n\t\trid: string;\n\t\tmid: string;\n\t\titems: NotificationItem[];\n\t\tuser?: Partial<IUser>;\n\t}): Promise<void> {\n\t\tconst receiver =\n\t\t\tuser ||\n\t\t\t(await Users.findOneById<Pick<IUser, 'statusConnection'>>(uid, {\n\t\t\t\tprojection: {\n\t\t\t\t\tstatusConnection: 1,\n\t\t\t\t},\n\t\t\t}));\n\n\t\tif (!receiver) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { statusConnection = 'offline' } = receiver;\n\n\t\tlet schedule: Date | undefined;\n\n\t\tconst delay = this.maxScheduleDelaySeconds[statusConnection];\n\n\t\tif (delay < 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (delay > 0) {\n\t\t\tschedule = new Date();\n\t\t\tschedule.setSeconds(schedule.getSeconds() + delay);\n\t\t}\n\n\t\tawait NotificationQueue.insertOne({\n\t\t\tuid,\n\t\t\trid,\n\t\t\tmid,\n\t\t\tts: new Date(),\n\t\t\tschedule,\n\t\t\titems,\n\t\t});\n\t}\n}\n\nexport const Notification = new NotificationClass();\n\nMeteor.startup(() => {\n\tNotification.initWorker();\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/notification-queue/server/NotificationQueue.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/notification-queue/server/NotificationQueue.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Notification: () => Notification\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet NotificationQueue, Users;\nmodule.link(\"../../models/server/raw\", {\n  NotificationQueue(v) {\n    NotificationQueue = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\nlet sendEmailFromData;\nmodule.link(\"../../lib/server/functions/notifications/email\", {\n  sendEmailFromData(v) {\n    sendEmailFromData = v;\n  }\n\n}, 2);\nlet PushNotification;\nmodule.link(\"../../push-notifications/server\", {\n  PushNotification(v) {\n    PushNotification = v;\n  }\n\n}, 3);\nlet SystemLogger;\nmodule.link(\"../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 4);\nconst {\n  NOTIFICATIONS_WORKER_TIMEOUT = 2000,\n  NOTIFICATIONS_BATCH_SIZE = 100,\n  NOTIFICATIONS_SCHEDULE_DELAY_ONLINE = 120,\n  NOTIFICATIONS_SCHEDULE_DELAY_AWAY = 0,\n  NOTIFICATIONS_SCHEDULE_DELAY_OFFLINE = 0\n} = process.env;\n\nclass NotificationClass {\n  constructor() {\n    this.running = false;\n    this.cyclePause = Number(NOTIFICATIONS_WORKER_TIMEOUT);\n    this.maxBatchSize = Number(NOTIFICATIONS_BATCH_SIZE);\n    this.maxScheduleDelaySeconds = {\n      online: Number(NOTIFICATIONS_SCHEDULE_DELAY_ONLINE),\n      away: Number(NOTIFICATIONS_SCHEDULE_DELAY_AWAY),\n      offline: Number(NOTIFICATIONS_SCHEDULE_DELAY_OFFLINE)\n    };\n  }\n\n  initWorker() {\n    this.running = true;\n    this.executeWorkerLater();\n  }\n\n  stopWorker() {\n    this.running = false;\n  }\n\n  executeWorkerLater() {\n    if (!this.running) {\n      return;\n    }\n\n    setTimeout(() => {\n      try {\n        this.worker();\n      } catch (e) {\n        SystemLogger.error('Error sending notification', e);\n        this.executeWorkerLater();\n      }\n    }, this.cyclePause);\n  }\n\n  worker() {\n    return Promise.asyncApply(() => {\n      let counter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      const notification = Promise.await(this.getNextNotification());\n\n      if (!notification) {\n        return this.executeWorkerLater();\n      } // Once we start notifying the user we anticipate all the schedules\n\n\n      const flush = Promise.await(NotificationQueue.clearScheduleByUserId(notification.uid)); // start worker again it queue flushed\n\n      if (flush.modifiedCount) {\n        Promise.await(NotificationQueue.unsetSendingById(notification._id));\n        return this.worker(counter);\n      }\n\n      try {\n        for (const item of notification.items) {\n          switch (item.type) {\n            case 'push':\n              this.push(notification, item);\n              break;\n\n            case 'email':\n              this.email(item);\n              break;\n          }\n        }\n\n        NotificationQueue.removeById(notification._id);\n      } catch (e) {\n        SystemLogger.error(e);\n        Promise.await(NotificationQueue.setErrorById(notification._id, e.message));\n      }\n\n      if (counter >= this.maxBatchSize) {\n        return this.executeWorkerLater();\n      }\n\n      this.worker(counter++);\n    });\n  }\n\n  getNextNotification() {\n    const expired = new Date();\n    expired.setMinutes(expired.getMinutes() - 5);\n    return NotificationQueue.findNextInQueueOrExpired(expired);\n  }\n\n  push(_ref, item) {\n    let {\n      uid,\n      rid,\n      mid\n    } = _ref;\n    PushNotification.send(_objectSpread({\n      rid,\n      uid,\n      mid\n    }, item.data));\n  }\n\n  email(item) {\n    sendEmailFromData(item.data);\n  }\n\n  scheduleItem(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        uid,\n        rid,\n        mid,\n        items,\n        user\n      } = _ref2;\n      const receiver = user || Promise.await(Users.findOneById(uid, {\n        projection: {\n          statusConnection: 1\n        }\n      }));\n\n      if (!receiver) {\n        return;\n      }\n\n      const {\n        statusConnection = 'offline'\n      } = receiver;\n      let schedule;\n      const delay = this.maxScheduleDelaySeconds[statusConnection];\n\n      if (delay < 0) {\n        return;\n      }\n\n      if (delay > 0) {\n        schedule = new Date();\n        schedule.setSeconds(schedule.getSeconds() + delay);\n      }\n\n      Promise.await(NotificationQueue.insertOne({\n        uid,\n        rid,\n        mid,\n        ts: new Date(),\n        schedule,\n        items\n      }));\n    });\n  }\n\n}\n\nconst Notification = new NotificationClass();\nMeteor.startup(() => {\n  Notification.initWorker();\n});","map":{"version":3,"sources":["app/notification-queue/server/NotificationQueue.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { INotification, INotificationItemPush, INotificationItemEmail, NotificationItem } from '../../../definition/INotification';\nimport { NotificationQueue, Users } from '../../models/server/raw';\nimport { sendEmailFromData } from '../../lib/server/functions/notifications/email';\nimport { PushNotification } from '../../push-notifications/server';\nimport { IUser } from '../../../definition/IUser';\nimport { SystemLogger } from '../../../server/lib/logger/system';\n\nconst {\n\tNOTIFICATIONS_WORKER_TIMEOUT = 2000,\n\tNOTIFICATIONS_BATCH_SIZE = 100,\n\tNOTIFICATIONS_SCHEDULE_DELAY_ONLINE = 120,\n\tNOTIFICATIONS_SCHEDULE_DELAY_AWAY = 0,\n\tNOTIFICATIONS_SCHEDULE_DELAY_OFFLINE = 0,\n} = process.env;\n\nclass NotificationClass {\n\tprivate running = false;\n\n\tprivate cyclePause = Number(NOTIFICATIONS_WORKER_TIMEOUT);\n\n\tprivate maxBatchSize = Number(NOTIFICATIONS_BATCH_SIZE);\n\n\tprivate maxScheduleDelaySeconds: { [key: string]: number } = {\n\t\tonline: Number(NOTIFICATIONS_SCHEDULE_DELAY_ONLINE),\n\t\taway: Number(NOTIFICATIONS_SCHEDULE_DELAY_AWAY),\n\t\toffline: Number(NOTIFICATIONS_SCHEDULE_DELAY_OFFLINE),\n\t};\n\n\tinitWorker(): void {\n\t\tthis.running = true;\n\t\tthis.executeWorkerLater();\n\t}\n\n\tstopWorker(): void {\n\t\tthis.running = false;\n\t}\n\n\texecuteWorkerLater(): void {\n\t\tif (!this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\ttry {\n\t\t\t\tthis.worker();\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error sending notification', e);\n\t\t\t\tthis.executeWorkerLater();\n\t\t\t}\n\t\t}, this.cyclePause);\n\t}\n\n\tasync worker(counter = 0): Promise<void> {\n\t\tconst notification = await this.getNextNotification();\n\n\t\tif (!notification) {\n\t\t\treturn this.executeWorkerLater();\n\t\t}\n\n\t\t// Once we start notifying the user we anticipate all the schedules\n\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\n\t\t// start worker again it queue flushed\n\t\tif (flush.modifiedCount) {\n\t\t\tawait NotificationQueue.unsetSendingById(notification._id);\n\t\t\treturn this.worker(counter);\n\t\t}\n\n\t\ttry {\n\t\t\tfor (const item of notification.items) {\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase 'push':\n\t\t\t\t\t\tthis.push(notification, item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tthis.email(item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tNotificationQueue.removeById(notification._id);\n\t\t} catch (e) {\n\t\t\tSystemLogger.error(e);\n\t\t\tawait NotificationQueue.setErrorById(notification._id, e.message);\n\t\t}\n\n\t\tif (counter >= this.maxBatchSize) {\n\t\t\treturn this.executeWorkerLater();\n\t\t}\n\t\tthis.worker(counter++);\n\t}\n\n\tgetNextNotification(): Promise<INotification | undefined> {\n\t\tconst expired = new Date();\n\t\texpired.setMinutes(expired.getMinutes() - 5);\n\n\t\treturn NotificationQueue.findNextInQueueOrExpired(expired);\n\t}\n\n\tpush({ uid, rid, mid }: INotification, item: INotificationItemPush): void {\n\t\tPushNotification.send({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\t...item.data,\n\t\t});\n\t}\n\n\temail(item: INotificationItemEmail): void {\n\t\tsendEmailFromData(item.data);\n\t}\n\n\tasync scheduleItem({\n\t\tuid,\n\t\trid,\n\t\tmid,\n\t\titems,\n\t\tuser,\n\t}: {\n\t\tuid: string;\n\t\trid: string;\n\t\tmid: string;\n\t\titems: NotificationItem[];\n\t\tuser?: Partial<IUser>;\n\t}): Promise<void> {\n\t\tconst receiver =\n\t\t\tuser ||\n\t\t\t(await Users.findOneById<Pick<IUser, 'statusConnection'>>(uid, {\n\t\t\t\tprojection: {\n\t\t\t\t\tstatusConnection: 1,\n\t\t\t\t},\n\t\t\t}));\n\n\t\tif (!receiver) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { statusConnection = 'offline' } = receiver;\n\n\t\tlet schedule: Date | undefined;\n\n\t\tconst delay = this.maxScheduleDelaySeconds[statusConnection];\n\n\t\tif (delay < 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (delay > 0) {\n\t\t\tschedule = new Date();\n\t\t\tschedule.setSeconds(schedule.getSeconds() + delay);\n\t\t}\n\n\t\tawait NotificationQueue.insertOne({\n\t\t\tuid,\n\t\t\trid,\n\t\t\tmid,\n\t\t\tts: new Date(),\n\t\t\tschedule,\n\t\t\titems,\n\t\t});\n\t}\n}\n\nexport const Notification = new NotificationClass();\n\nMeteor.startup(() => {\n\tNotification.initWorker();\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"d2b9e13b5b06ebd669cd8a426cc321a59efd236e"}
