{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/DataConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/ldap/DataConverter.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/DataConverter.ts","inputSourceMap":{"version":3,"file":"server/lib/ldap/DataConverter.ts","sourceRoot":"","sources":["server/lib/ldap/DataConverter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,2DAA2D,CAAC;AAIjG,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,MAAM,gCAAgC,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAEjD,MAAM,OAAO,iBAAkB,SAAQ,oBAAoB;IAClD,kBAAkB,CAAU;IAEpC,YAAY,OAAO,GAAG,IAAI,EAAE,OAA2B;QACtD,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAU,2BAA2B,CAAC,IAAI,IAAI,CAAC;IACtF,CAAC;IAED,gBAAgB,CAAC,IAAiB;QACjC,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACjH,IAAI,YAAY,EAAE;gBACjB,OAAO,YAAY,CAAC;aACpB;SACD;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC7B,OAAO;SACP;QAED,+BAA+B;QAC/B,OAAO,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,QAAqB,EAAE,OAA2B;QAC1E,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvD,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC5B,SAAS,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;CACD","sourcesContent":["import { VirtualDataConverter } from '../../../app/importer/server/classes/VirtualDataConverter';\nimport { IImportUser } from '../../../definition/IImportUser';\nimport type { IUser } from '../../../definition/IUser';\nimport type { IConverterOptions } from '../../../app/importer/server/classes/ImportDataConverter';\nimport { Logger } from '../logger/Logger';\nimport { Users } from '../../../app/models/server/raw';\nimport { settings } from '../../../app/settings/server';\n\nconst logger = new Logger('LDAP Data Converter');\n\nexport class LDAPDataConverter extends VirtualDataConverter {\n\tprivate mergeExistingUsers: boolean;\n\n\tconstructor(virtual = true, options?: IConverterOptions) {\n\t\tsuper(virtual, options);\n\t\tthis.setLogger(logger);\n\n\t\tthis.mergeExistingUsers = settings.get<boolean>('LDAP_Merge_Existing_Users') ?? true;\n\t}\n\n\tfindExistingUser(data: IImportUser): IUser | undefined {\n\t\tif (data.services?.ldap?.id) {\n\t\t\tconst importedUser = Promise.await(Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute));\n\t\t\tif (importedUser) {\n\t\t\t\treturn importedUser;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mergeExistingUsers) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Search by email and username\n\t\treturn super.findExistingUser(data);\n\t}\n\n\tstatic convertSingleUser(userData: IImportUser, options?: IConverterOptions): void {\n\t\tconst converter = new LDAPDataConverter(true, options);\n\t\tconverter.addUser(userData);\n\t\tconverter.convertUsers();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/ldap/DataConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/ldap/DataConverter.ts"}},"code":"module.export({\n  LDAPDataConverter: () => LDAPDataConverter\n});\nlet VirtualDataConverter;\nmodule.link(\"../../../app/importer/server/classes/VirtualDataConverter\", {\n  VirtualDataConverter(v) {\n    VirtualDataConverter = v;\n  }\n\n}, 0);\nlet Logger;\nmodule.link(\"../logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 1);\nlet Users;\nmodule.link(\"../../../app/models/server/raw\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nconst logger = new Logger('LDAP Data Converter');\n\nclass LDAPDataConverter extends VirtualDataConverter {\n  constructor() {\n    var _settings$get;\n\n    let virtual = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    super(virtual, options);\n    this.mergeExistingUsers = void 0;\n    this.setLogger(logger);\n    this.mergeExistingUsers = (_settings$get = settings.get('LDAP_Merge_Existing_Users')) !== null && _settings$get !== void 0 ? _settings$get : true;\n  }\n\n  findExistingUser(data) {\n    var _data$services, _data$services$ldap;\n\n    if ((_data$services = data.services) !== null && _data$services !== void 0 && (_data$services$ldap = _data$services.ldap) !== null && _data$services$ldap !== void 0 && _data$services$ldap.id) {\n      const importedUser = Promise.await(Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute));\n\n      if (importedUser) {\n        return importedUser;\n      }\n    }\n\n    if (!this.mergeExistingUsers) {\n      return;\n    } // Search by email and username\n\n\n    return super.findExistingUser(data);\n  }\n\n  static convertSingleUser(userData, options) {\n    const converter = new LDAPDataConverter(true, options);\n    converter.addUser(userData);\n    converter.convertUsers();\n  }\n\n}","map":{"version":3,"sources":["server/lib/ldap/DataConverter.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,iBAAsB,EAAA,MAAM;AAA5B,CAAT;AAAqC,IAAA,oBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,2DAAA,EAA4D;AAAA,EAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA;;AAAA,CAA5D,EAA4D,CAA5D;AAA4D,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gCAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAQjG,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,qBAAX,CAAf;;AAEM,MAAO,iBAAP,SAAiC,oBAAjC,CAAqD;AAG1D,EAAA,WAAA,GAAuD;AAAA;;AAAA,QAA3C,OAA2C,uEAAjC,IAAiC;AAAA,QAA3B,OAA2B;AACtD,UAAM,OAAN,EAAe,OAAf;AADsD,SAF/C,kBAE+C;AAEtD,SAAK,SAAL,CAAe,MAAf;AAEA,SAAK,kBAAL,oBAA0B,QAAQ,CAAC,GAAT,CAAsB,2BAAtB,CAA1B,yDAAgF,IAAhF;AACA;;AAED,EAAA,gBAAgB,CAAC,IAAD,EAAkB;AAAA;;AACjC,0BAAI,IAAI,CAAC,QAAT,kEAAI,eAAe,IAAnB,gDAAI,oBAAqB,EAAzB,EAA6B;AAC5B,YAAM,YAAY,GAAG,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,eAAN,CAAsB,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,EAAzC,EAA6C,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,WAAhE,CAAd,CAArB;;AACA,UAAI,YAAJ,EAAkB;AACjB,eAAO,YAAP;AACA;AACD;;AAED,QAAI,CAAC,KAAK,kBAAV,EAA8B;AAC7B;AACA,KAVgC,CAYjC;;;AACA,WAAO,MAAM,gBAAN,CAAuB,IAAvB,CAAP;AACA;;AAEuB,SAAjB,iBAAiB,CAAC,QAAD,EAAwB,OAAxB,EAAmD;AAC1E,UAAM,SAAS,GAAG,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,OAA5B,CAAlB;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,QAAlB;AACA,IAAA,SAAS,CAAC,YAAV;AACA;;AA9ByD","sourcesContent":["import { VirtualDataConverter } from '../../../app/importer/server/classes/VirtualDataConverter';\nimport { IImportUser } from '../../../definition/IImportUser';\nimport type { IUser } from '../../../definition/IUser';\nimport type { IConverterOptions } from '../../../app/importer/server/classes/ImportDataConverter';\nimport { Logger } from '../logger/Logger';\nimport { Users } from '../../../app/models/server/raw';\nimport { settings } from '../../../app/settings/server';\n\nconst logger = new Logger('LDAP Data Converter');\n\nexport class LDAPDataConverter extends VirtualDataConverter {\n\tprivate mergeExistingUsers: boolean;\n\n\tconstructor(virtual = true, options?: IConverterOptions) {\n\t\tsuper(virtual, options);\n\t\tthis.setLogger(logger);\n\n\t\tthis.mergeExistingUsers = settings.get<boolean>('LDAP_Merge_Existing_Users') ?? true;\n\t}\n\n\tfindExistingUser(data: IImportUser): IUser | undefined {\n\t\tif (data.services?.ldap?.id) {\n\t\t\tconst importedUser = Promise.await(Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute));\n\t\t\tif (importedUser) {\n\t\t\t\treturn importedUser;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mergeExistingUsers) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Search by email and username\n\t\treturn super.findExistingUser(data);\n\t}\n\n\tstatic convertSingleUser(userData: IImportUser, options?: IConverterOptions): void {\n\t\tconst converter = new LDAPDataConverter(true, options);\n\t\tconverter.addUser(userData);\n\t\tconverter.convertUsers();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"a53e1ffdd36a97286654b55627a91113cceec74d"}
