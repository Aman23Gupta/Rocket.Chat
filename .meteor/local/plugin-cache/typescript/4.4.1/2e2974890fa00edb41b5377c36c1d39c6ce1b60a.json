{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/ServiceProvider.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/ServiceProvider.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/ServiceProvider.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/ServiceProvider.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/ServiceProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import zlib from 'zlib';\nimport crypto from 'crypto';\nimport querystring from 'querystring';\n\nimport { Meteor } from 'meteor/meteor';\n\nimport { SAMLUtils } from './Utils';\nimport { AuthorizeRequest } from './generators/AuthorizeRequest';\nimport { LogoutRequest } from './generators/LogoutRequest';\nimport { LogoutResponse } from './generators/LogoutResponse';\nimport { ServiceProviderMetadata } from './generators/ServiceProviderMetadata';\nimport { LogoutRequestParser } from './parsers/LogoutRequest';\nimport { LogoutResponseParser } from './parsers/LogoutResponse';\nimport { ResponseParser } from './parsers/Response';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLRequest } from '../definition/ISAMLRequest';\nimport { ILogoutResponse } from '../definition/ILogoutResponse';\nimport { ILogoutRequestValidateCallback, ILogoutResponseValidateCallback, IResponseValidateCallback } from '../definition/callbacks';\n\nexport class SAMLServiceProvider {\n\tserviceProviderOptions: IServiceProviderOptions;\n\n\tsyncRequestToUrl: (request: string, operation: string) => void;\n\n\tconstructor(serviceProviderOptions: IServiceProviderOptions) {\n\t\tif (!serviceProviderOptions) {\n\t\t\tthrow new Error('SAMLServiceProvider instantiated without an options object');\n\t\t}\n\n\t\tthis.serviceProviderOptions = serviceProviderOptions;\n\n\t\tthis.syncRequestToUrl = Meteor.wrapAsync(this.requestToUrl, this);\n\t}\n\n\tprivate signRequest(xml: string): string {\n\t\tconst signer = crypto.createSign('RSA-SHA1');\n\t\tsigner.update(xml);\n\t\treturn signer.sign(this.serviceProviderOptions.privateKey, 'base64');\n\t}\n\n\tpublic generateAuthorizeRequest(): string {\n\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\treturn identifiedRequest.request;\n\t}\n\n\tpublic generateLogoutResponse({\n\t\tnameID,\n\t\tsessionIndex,\n\t\tinResponseToId,\n\t}: {\n\t\tnameID: string;\n\t\tsessionIndex: string;\n\t\tinResponseToId: string;\n\t}): ILogoutResponse {\n\t\treturn LogoutResponse.generate(this.serviceProviderOptions, nameID, sessionIndex, inResponseToId);\n\t}\n\n\tpublic generateLogoutRequest({ nameID, sessionIndex }: { nameID: string; sessionIndex: string }): ISAMLRequest {\n\t\treturn LogoutRequest.generate(this.serviceProviderOptions, nameID, sessionIndex);\n\t}\n\n\t/*\n\t\tThis method will generate the response URL with all the query string params and pass it to the callback\n\t*/\n\tpublic logoutResponseToUrl(response: string, callback: (err: string | object | null, url?: string) => void): void {\n\t\tzlib.deflateRaw(response, (err, buffer) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst base64 = buffer.toString('base64');\n\t\t\t\tlet target = this.serviceProviderOptions.idpSLORedirectURL;\n\n\t\t\t\tif (target.indexOf('?') > 0) {\n\t\t\t\t\ttarget += '&';\n\t\t\t\t} else {\n\t\t\t\t\ttarget += '?';\n\t\t\t\t}\n\n\t\t\t\t// TBD. We should really include a proper RelayState here\n\t\t\t\tconst relayState = Meteor.absoluteUrl();\n\n\t\t\t\tconst samlResponse: Record<string, any> = {\n\t\t\t\t\tSAMLResponse: base64,\n\t\t\t\t\tRelayState: relayState,\n\t\t\t\t};\n\n\t\t\t\tif (this.serviceProviderOptions.privateCert) {\n\t\t\t\t\tsamlResponse.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n\t\t\t\t\tsamlResponse.Signature = this.signRequest(querystring.stringify(samlResponse));\n\t\t\t\t}\n\n\t\t\t\ttarget += querystring.stringify(samlResponse);\n\n\t\t\t\treturn callback(null, target);\n\t\t\t} catch (error) {\n\t\t\t\treturn callback(error);\n\t\t\t}\n\t\t});\n\t}\n\n\t/*\n\t\tThis method will generate the request URL with all the query string params and pass it to the callback\n\t*/\n\tpublic requestToUrl(request: string, operation: string, callback: (err: string | object | null, url?: string) => void): void {\n\t\tzlib.deflateRaw(request, (err, buffer) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst base64 = buffer.toString('base64');\n\t\t\t\tlet target = this.serviceProviderOptions.entryPoint;\n\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\tif (this.serviceProviderOptions.idpSLORedirectURL) {\n\t\t\t\t\t\ttarget = this.serviceProviderOptions.idpSLORedirectURL;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target.indexOf('?') > 0) {\n\t\t\t\t\ttarget += '&';\n\t\t\t\t} else {\n\t\t\t\t\ttarget += '?';\n\t\t\t\t}\n\n\t\t\t\t// TBD. We should really include a proper RelayState here\n\t\t\t\tlet relayState;\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\t\t\trelayState = Meteor.absoluteUrl();\n\t\t\t\t} else {\n\t\t\t\t\trelayState = this.serviceProviderOptions.provider;\n\t\t\t\t}\n\n\t\t\t\tconst samlRequest: Record<string, any> = {\n\t\t\t\t\tSAMLRequest: base64,\n\t\t\t\t\tRelayState: relayState,\n\t\t\t\t};\n\n\t\t\t\tif (this.serviceProviderOptions.privateCert) {\n\t\t\t\t\tsamlRequest.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n\t\t\t\t\tsamlRequest.Signature = this.signRequest(querystring.stringify(samlRequest));\n\t\t\t\t}\n\n\t\t\t\ttarget += querystring.stringify(samlRequest);\n\n\t\t\t\tSAMLUtils.log(`requestToUrl: ${target}`);\n\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\t\t\treturn callback(null, target);\n\t\t\t\t}\n\t\t\t\tcallback(null, target);\n\t\t\t} catch (error) {\n\t\t\t\tcallback(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getAuthorizeUrl(callback: (err: string | object | null, url?: string) => void): void {\n\t\tconst request = this.generateAuthorizeRequest();\n\t\tSAMLUtils.log('-----REQUEST------');\n\t\tSAMLUtils.log(request);\n\n\t\tthis.requestToUrl(request, 'authorize', callback);\n\t}\n\n\tpublic validateLogoutRequest(samlRequest: string, callback: ILogoutRequestValidateCallback): void {\n\t\tSAMLUtils.inflateXml(\n\t\t\tsamlRequest,\n\t\t\t(xml: string) => {\n\t\t\t\tconst parser = new LogoutRequestParser(this.serviceProviderOptions);\n\t\t\t\treturn parser.validate(xml, callback);\n\t\t\t},\n\t\t\t(err: string | object | null) => {\n\t\t\t\tcallback(err, null);\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic validateLogoutResponse(samlResponse: string, callback: ILogoutResponseValidateCallback): void {\n\t\tSAMLUtils.inflateXml(\n\t\t\tsamlResponse,\n\t\t\t(xml: string) => {\n\t\t\t\tconst parser = new LogoutResponseParser(this.serviceProviderOptions);\n\t\t\t\treturn parser.validate(xml, callback);\n\t\t\t},\n\t\t\t(err: string | object | null) => {\n\t\t\t\tcallback(err, null);\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic validateResponse(samlResponse: string, callback: IResponseValidateCallback): void {\n\t\tconst xml = Buffer.from(samlResponse, 'base64').toString('utf8');\n\n\t\tconst parser = new ResponseParser(this.serviceProviderOptions);\n\t\treturn parser.validate(xml, callback);\n\t}\n\n\tpublic generateServiceProviderMetadata(): string {\n\t\treturn ServiceProviderMetadata.generate(this.serviceProviderOptions);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/ServiceProvider.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/ServiceProvider.ts"}},"code":"module.export({\n  SAMLServiceProvider: () => SAMLServiceProvider\n});\nlet zlib;\nmodule.link(\"zlib\", {\n  default(v) {\n    zlib = v;\n  }\n\n}, 0);\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 1);\nlet querystring;\nmodule.link(\"querystring\", {\n  default(v) {\n    querystring = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet SAMLUtils;\nmodule.link(\"./Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 4);\nlet AuthorizeRequest;\nmodule.link(\"./generators/AuthorizeRequest\", {\n  AuthorizeRequest(v) {\n    AuthorizeRequest = v;\n  }\n\n}, 5);\nlet LogoutRequest;\nmodule.link(\"./generators/LogoutRequest\", {\n  LogoutRequest(v) {\n    LogoutRequest = v;\n  }\n\n}, 6);\nlet LogoutResponse;\nmodule.link(\"./generators/LogoutResponse\", {\n  LogoutResponse(v) {\n    LogoutResponse = v;\n  }\n\n}, 7);\nlet ServiceProviderMetadata;\nmodule.link(\"./generators/ServiceProviderMetadata\", {\n  ServiceProviderMetadata(v) {\n    ServiceProviderMetadata = v;\n  }\n\n}, 8);\nlet LogoutRequestParser;\nmodule.link(\"./parsers/LogoutRequest\", {\n  LogoutRequestParser(v) {\n    LogoutRequestParser = v;\n  }\n\n}, 9);\nlet LogoutResponseParser;\nmodule.link(\"./parsers/LogoutResponse\", {\n  LogoutResponseParser(v) {\n    LogoutResponseParser = v;\n  }\n\n}, 10);\nlet ResponseParser;\nmodule.link(\"./parsers/Response\", {\n  ResponseParser(v) {\n    ResponseParser = v;\n  }\n\n}, 11);\n\nclass SAMLServiceProvider {\n  constructor(serviceProviderOptions) {\n    this.serviceProviderOptions = void 0;\n    this.syncRequestToUrl = void 0;\n\n    if (!serviceProviderOptions) {\n      throw new Error('SAMLServiceProvider instantiated without an options object');\n    }\n\n    this.serviceProviderOptions = serviceProviderOptions;\n    this.syncRequestToUrl = Meteor.wrapAsync(this.requestToUrl, this);\n  }\n\n  signRequest(xml) {\n    const signer = crypto.createSign('RSA-SHA1');\n    signer.update(xml);\n    return signer.sign(this.serviceProviderOptions.privateKey, 'base64');\n  }\n\n  generateAuthorizeRequest() {\n    const identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n    return identifiedRequest.request;\n  }\n\n  generateLogoutResponse(_ref) {\n    let {\n      nameID,\n      sessionIndex,\n      inResponseToId\n    } = _ref;\n    return LogoutResponse.generate(this.serviceProviderOptions, nameID, sessionIndex, inResponseToId);\n  }\n\n  generateLogoutRequest(_ref2) {\n    let {\n      nameID,\n      sessionIndex\n    } = _ref2;\n    return LogoutRequest.generate(this.serviceProviderOptions, nameID, sessionIndex);\n  }\n  /*\n      This method will generate the response URL with all the query string params and pass it to the callback\n  */\n\n\n  logoutResponseToUrl(response, callback) {\n    zlib.deflateRaw(response, (err, buffer) => {\n      if (err) {\n        return callback(err);\n      }\n\n      try {\n        const base64 = buffer.toString('base64');\n        let target = this.serviceProviderOptions.idpSLORedirectURL;\n\n        if (target.indexOf('?') > 0) {\n          target += '&';\n        } else {\n          target += '?';\n        } // TBD. We should really include a proper RelayState here\n\n\n        const relayState = Meteor.absoluteUrl();\n        const samlResponse = {\n          SAMLResponse: base64,\n          RelayState: relayState\n        };\n\n        if (this.serviceProviderOptions.privateCert) {\n          samlResponse.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n          samlResponse.Signature = this.signRequest(querystring.stringify(samlResponse));\n        }\n\n        target += querystring.stringify(samlResponse);\n        return callback(null, target);\n      } catch (error) {\n        return callback(error);\n      }\n    });\n  }\n  /*\n      This method will generate the request URL with all the query string params and pass it to the callback\n  */\n\n\n  requestToUrl(request, operation, callback) {\n    zlib.deflateRaw(request, (err, buffer) => {\n      if (err) {\n        return callback(err);\n      }\n\n      try {\n        const base64 = buffer.toString('base64');\n        let target = this.serviceProviderOptions.entryPoint;\n\n        if (operation === 'logout') {\n          if (this.serviceProviderOptions.idpSLORedirectURL) {\n            target = this.serviceProviderOptions.idpSLORedirectURL;\n          }\n        }\n\n        if (target.indexOf('?') > 0) {\n          target += '&';\n        } else {\n          target += '?';\n        } // TBD. We should really include a proper RelayState here\n\n\n        let relayState;\n\n        if (operation === 'logout') {\n          // in case of logout we want to be redirected back to the Meteor app.\n          relayState = Meteor.absoluteUrl();\n        } else {\n          relayState = this.serviceProviderOptions.provider;\n        }\n\n        const samlRequest = {\n          SAMLRequest: base64,\n          RelayState: relayState\n        };\n\n        if (this.serviceProviderOptions.privateCert) {\n          samlRequest.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n          samlRequest.Signature = this.signRequest(querystring.stringify(samlRequest));\n        }\n\n        target += querystring.stringify(samlRequest);\n        SAMLUtils.log(\"requestToUrl: \".concat(target));\n\n        if (operation === 'logout') {\n          // in case of logout we want to be redirected back to the Meteor app.\n          return callback(null, target);\n        }\n\n        callback(null, target);\n      } catch (error) {\n        callback(error);\n      }\n    });\n  }\n\n  getAuthorizeUrl(callback) {\n    const request = this.generateAuthorizeRequest();\n    SAMLUtils.log('-----REQUEST------');\n    SAMLUtils.log(request);\n    this.requestToUrl(request, 'authorize', callback);\n  }\n\n  validateLogoutRequest(samlRequest, callback) {\n    SAMLUtils.inflateXml(samlRequest, xml => {\n      const parser = new LogoutRequestParser(this.serviceProviderOptions);\n      return parser.validate(xml, callback);\n    }, err => {\n      callback(err, null);\n    });\n  }\n\n  validateLogoutResponse(samlResponse, callback) {\n    SAMLUtils.inflateXml(samlResponse, xml => {\n      const parser = new LogoutResponseParser(this.serviceProviderOptions);\n      return parser.validate(xml, callback);\n    }, err => {\n      callback(err, null);\n    });\n  }\n\n  validateResponse(samlResponse, callback) {\n    const xml = Buffer.from(samlResponse, 'base64').toString('utf8');\n    const parser = new ResponseParser(this.serviceProviderOptions);\n    return parser.validate(xml, callback);\n  }\n\n  generateServiceProviderMetadata() {\n    return ServiceProviderMetadata.generate(this.serviceProviderOptions);\n  }\n\n}","map":{"version":3,"sources":["app/meteor-accounts-saml/server/lib/ServiceProvider.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAW;AAAA,EAAA,mBAAa,EAAA,MAAA;AAAb,CAAX;AAAwB,IAAA,IAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,SAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,gBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,uBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sCAAA,EAAA;AAAA,EAAA,uBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,uBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,mBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,yBAAA,EAAA;AAAA,EAAA,mBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,oBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,0BAAA,EAAA;AAAA,EAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,oBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,oBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,EAAA;;AAmBlB,MAAO,mBAAP,CAA0B;AAK/B,EAAA,WAAA,CAAY,sBAAZ,EAA2D;AAAA,SAJ3D,sBAI2D;AAAA,SAF3D,gBAE2D;;AAC1D,QAAI,CAAC,sBAAL,EAA6B;AAC5B,YAAM,IAAI,KAAJ,CAAU,4DAAV,CAAN;AACA;;AAED,SAAK,sBAAL,GAA8B,sBAA9B;AAEA,SAAK,gBAAL,GAAwB,MAAM,CAAC,SAAP,CAAiB,KAAK,YAAtB,EAAoC,IAApC,CAAxB;AACA;;AAEO,EAAA,WAAW,CAAC,GAAD,EAAY;AAC9B,UAAM,MAAM,GAAG,MAAM,CAAC,UAAP,CAAkB,UAAlB,CAAf;AACA,IAAA,MAAM,CAAC,MAAP,CAAc,GAAd;AACA,WAAO,MAAM,CAAC,IAAP,CAAY,KAAK,sBAAL,CAA4B,UAAxC,EAAoD,QAApD,CAAP;AACA;;AAEM,EAAA,wBAAwB,GAAA;AAC9B,UAAM,iBAAiB,GAAG,gBAAgB,CAAC,QAAjB,CAA0B,KAAK,sBAA/B,CAA1B;AACA,WAAO,iBAAiB,CAAC,OAAzB;AACA;;AAEM,EAAA,sBAAsB,OAQ5B;AAAA,QAR6B;AAC7B,MAAA,MAD6B;AAE7B,MAAA,YAF6B;AAG7B,MAAA;AAH6B,KAQ7B;AACA,WAAO,cAAc,CAAC,QAAf,CAAwB,KAAK,sBAA7B,EAAqD,MAArD,EAA6D,YAA7D,EAA2E,cAA3E,CAAP;AACA;;AAEM,EAAA,qBAAqB,QAAmE;AAAA,QAAlE;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,KAAkE;AAC9F,WAAO,aAAa,CAAC,QAAd,CAAuB,KAAK,sBAA5B,EAAoD,MAApD,EAA4D,YAA5D,CAAP;AACA;AAED;;AAEE;;;AACK,EAAA,mBAAmB,CAAC,QAAD,EAAmB,QAAnB,EAAgF;AACzG,IAAA,IAAI,CAAC,UAAL,CAAgB,QAAhB,EAA0B,CAAC,GAAD,EAAM,MAAN,KAAgB;AACzC,UAAI,GAAJ,EAAS;AACR,eAAO,QAAQ,CAAC,GAAD,CAAf;AACA;;AAED,UAAI;AACH,cAAM,MAAM,GAAG,MAAM,CAAC,QAAP,CAAgB,QAAhB,CAAf;AACA,YAAI,MAAM,GAAG,KAAK,sBAAL,CAA4B,iBAAzC;;AAEA,YAAI,MAAM,CAAC,OAAP,CAAe,GAAf,IAAsB,CAA1B,EAA6B;AAC5B,UAAA,MAAM,IAAI,GAAV;AACA,SAFD,MAEO;AACN,UAAA,MAAM,IAAI,GAAV;AACA,SARE,CAUH;;;AACA,cAAM,UAAU,GAAG,MAAM,CAAC,WAAP,EAAnB;AAEA,cAAM,YAAY,GAAwB;AACzC,UAAA,YAAY,EAAE,MAD2B;AAEzC,UAAA,UAAU,EAAE;AAF6B,SAA1C;;AAKA,YAAI,KAAK,sBAAL,CAA4B,WAAhC,EAA6C;AAC5C,UAAA,YAAY,CAAC,MAAb,GAAsB,4CAAtB;AACA,UAAA,YAAY,CAAC,SAAb,GAAyB,KAAK,WAAL,CAAiB,WAAW,CAAC,SAAZ,CAAsB,YAAtB,CAAjB,CAAzB;AACA;;AAED,QAAA,MAAM,IAAI,WAAW,CAAC,SAAZ,CAAsB,YAAtB,CAAV;AAEA,eAAO,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAf;AACA,OA1BD,CA0BE,OAAO,KAAP,EAAc;AACf,eAAO,QAAQ,CAAC,KAAD,CAAf;AACA;AACD,KAlCD;AAmCA;AAED;;AAEE;;;AACK,EAAA,YAAY,CAAC,OAAD,EAAkB,SAAlB,EAAqC,QAArC,EAAkG;AACpH,IAAA,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,CAAC,GAAD,EAAM,MAAN,KAAgB;AACxC,UAAI,GAAJ,EAAS;AACR,eAAO,QAAQ,CAAC,GAAD,CAAf;AACA;;AAED,UAAI;AACH,cAAM,MAAM,GAAG,MAAM,CAAC,QAAP,CAAgB,QAAhB,CAAf;AACA,YAAI,MAAM,GAAG,KAAK,sBAAL,CAA4B,UAAzC;;AAEA,YAAI,SAAS,KAAK,QAAlB,EAA4B;AAC3B,cAAI,KAAK,sBAAL,CAA4B,iBAAhC,EAAmD;AAClD,YAAA,MAAM,GAAG,KAAK,sBAAL,CAA4B,iBAArC;AACA;AACD;;AAED,YAAI,MAAM,CAAC,OAAP,CAAe,GAAf,IAAsB,CAA1B,EAA6B;AAC5B,UAAA,MAAM,IAAI,GAAV;AACA,SAFD,MAEO;AACN,UAAA,MAAM,IAAI,GAAV;AACA,SAdE,CAgBH;;;AACA,YAAI,UAAJ;;AACA,YAAI,SAAS,KAAK,QAAlB,EAA4B;AAC3B;AACA,UAAA,UAAU,GAAG,MAAM,CAAC,WAAP,EAAb;AACA,SAHD,MAGO;AACN,UAAA,UAAU,GAAG,KAAK,sBAAL,CAA4B,QAAzC;AACA;;AAED,cAAM,WAAW,GAAwB;AACxC,UAAA,WAAW,EAAE,MAD2B;AAExC,UAAA,UAAU,EAAE;AAF4B,SAAzC;;AAKA,YAAI,KAAK,sBAAL,CAA4B,WAAhC,EAA6C;AAC5C,UAAA,WAAW,CAAC,MAAZ,GAAqB,4CAArB;AACA,UAAA,WAAW,CAAC,SAAZ,GAAwB,KAAK,WAAL,CAAiB,WAAW,CAAC,SAAZ,CAAsB,WAAtB,CAAjB,CAAxB;AACA;;AAED,QAAA,MAAM,IAAI,WAAW,CAAC,SAAZ,CAAsB,WAAtB,CAAV;AAEA,QAAA,SAAS,CAAC,GAAV,yBAA+B,MAA/B;;AAEA,YAAI,SAAS,KAAK,QAAlB,EAA4B;AAC3B;AACA,iBAAO,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAf;AACA;;AACD,QAAA,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAR;AACA,OA5CD,CA4CE,OAAO,KAAP,EAAc;AACf,QAAA,QAAQ,CAAC,KAAD,CAAR;AACA;AACD,KApDD;AAqDA;;AAEM,EAAA,eAAe,CAAC,QAAD,EAA8D;AACnF,UAAM,OAAO,GAAG,KAAK,wBAAL,EAAhB;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,oBAAd;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,OAAd;AAEA,SAAK,YAAL,CAAkB,OAAlB,EAA2B,WAA3B,EAAwC,QAAxC;AACA;;AAEM,EAAA,qBAAqB,CAAC,WAAD,EAAsB,QAAtB,EAA8D;AACzF,IAAA,SAAS,CAAC,UAAV,CACC,WADD,EAEE,GAAD,IAAgB;AACf,YAAM,MAAM,GAAG,IAAI,mBAAJ,CAAwB,KAAK,sBAA7B,CAAf;AACA,aAAO,MAAM,CAAC,QAAP,CAAgB,GAAhB,EAAqB,QAArB,CAAP;AACA,KALF,EAME,GAAD,IAAgC;AAC/B,MAAA,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR;AACA,KARF;AAUA;;AAEM,EAAA,sBAAsB,CAAC,YAAD,EAAuB,QAAvB,EAAgE;AAC5F,IAAA,SAAS,CAAC,UAAV,CACC,YADD,EAEE,GAAD,IAAgB;AACf,YAAM,MAAM,GAAG,IAAI,oBAAJ,CAAyB,KAAK,sBAA9B,CAAf;AACA,aAAO,MAAM,CAAC,QAAP,CAAgB,GAAhB,EAAqB,QAArB,CAAP;AACA,KALF,EAME,GAAD,IAAgC;AAC/B,MAAA,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR;AACA,KARF;AAUA;;AAEM,EAAA,gBAAgB,CAAC,YAAD,EAAuB,QAAvB,EAA0D;AAChF,UAAM,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,QAA1B,EAAoC,QAApC,CAA6C,MAA7C,CAAZ;AAEA,UAAM,MAAM,GAAG,IAAI,cAAJ,CAAmB,KAAK,sBAAxB,CAAf;AACA,WAAO,MAAM,CAAC,QAAP,CAAgB,GAAhB,EAAqB,QAArB,CAAP;AACA;;AAEM,EAAA,+BAA+B,GAAA;AACrC,WAAO,uBAAuB,CAAC,QAAxB,CAAiC,KAAK,sBAAtC,CAAP;AACA;;AAzL8B","sourcesContent":["import zlib from 'zlib';\nimport crypto from 'crypto';\nimport querystring from 'querystring';\n\nimport { Meteor } from 'meteor/meteor';\n\nimport { SAMLUtils } from './Utils';\nimport { AuthorizeRequest } from './generators/AuthorizeRequest';\nimport { LogoutRequest } from './generators/LogoutRequest';\nimport { LogoutResponse } from './generators/LogoutResponse';\nimport { ServiceProviderMetadata } from './generators/ServiceProviderMetadata';\nimport { LogoutRequestParser } from './parsers/LogoutRequest';\nimport { LogoutResponseParser } from './parsers/LogoutResponse';\nimport { ResponseParser } from './parsers/Response';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLRequest } from '../definition/ISAMLRequest';\nimport { ILogoutResponse } from '../definition/ILogoutResponse';\nimport { ILogoutRequestValidateCallback, ILogoutResponseValidateCallback, IResponseValidateCallback } from '../definition/callbacks';\n\nexport class SAMLServiceProvider {\n\tserviceProviderOptions: IServiceProviderOptions;\n\n\tsyncRequestToUrl: (request: string, operation: string) => void;\n\n\tconstructor(serviceProviderOptions: IServiceProviderOptions) {\n\t\tif (!serviceProviderOptions) {\n\t\t\tthrow new Error('SAMLServiceProvider instantiated without an options object');\n\t\t}\n\n\t\tthis.serviceProviderOptions = serviceProviderOptions;\n\n\t\tthis.syncRequestToUrl = Meteor.wrapAsync(this.requestToUrl, this);\n\t}\n\n\tprivate signRequest(xml: string): string {\n\t\tconst signer = crypto.createSign('RSA-SHA1');\n\t\tsigner.update(xml);\n\t\treturn signer.sign(this.serviceProviderOptions.privateKey, 'base64');\n\t}\n\n\tpublic generateAuthorizeRequest(): string {\n\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\treturn identifiedRequest.request;\n\t}\n\n\tpublic generateLogoutResponse({\n\t\tnameID,\n\t\tsessionIndex,\n\t\tinResponseToId,\n\t}: {\n\t\tnameID: string;\n\t\tsessionIndex: string;\n\t\tinResponseToId: string;\n\t}): ILogoutResponse {\n\t\treturn LogoutResponse.generate(this.serviceProviderOptions, nameID, sessionIndex, inResponseToId);\n\t}\n\n\tpublic generateLogoutRequest({ nameID, sessionIndex }: { nameID: string; sessionIndex: string }): ISAMLRequest {\n\t\treturn LogoutRequest.generate(this.serviceProviderOptions, nameID, sessionIndex);\n\t}\n\n\t/*\n\t\tThis method will generate the response URL with all the query string params and pass it to the callback\n\t*/\n\tpublic logoutResponseToUrl(response: string, callback: (err: string | object | null, url?: string) => void): void {\n\t\tzlib.deflateRaw(response, (err, buffer) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst base64 = buffer.toString('base64');\n\t\t\t\tlet target = this.serviceProviderOptions.idpSLORedirectURL;\n\n\t\t\t\tif (target.indexOf('?') > 0) {\n\t\t\t\t\ttarget += '&';\n\t\t\t\t} else {\n\t\t\t\t\ttarget += '?';\n\t\t\t\t}\n\n\t\t\t\t// TBD. We should really include a proper RelayState here\n\t\t\t\tconst relayState = Meteor.absoluteUrl();\n\n\t\t\t\tconst samlResponse: Record<string, any> = {\n\t\t\t\t\tSAMLResponse: base64,\n\t\t\t\t\tRelayState: relayState,\n\t\t\t\t};\n\n\t\t\t\tif (this.serviceProviderOptions.privateCert) {\n\t\t\t\t\tsamlResponse.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n\t\t\t\t\tsamlResponse.Signature = this.signRequest(querystring.stringify(samlResponse));\n\t\t\t\t}\n\n\t\t\t\ttarget += querystring.stringify(samlResponse);\n\n\t\t\t\treturn callback(null, target);\n\t\t\t} catch (error) {\n\t\t\t\treturn callback(error);\n\t\t\t}\n\t\t});\n\t}\n\n\t/*\n\t\tThis method will generate the request URL with all the query string params and pass it to the callback\n\t*/\n\tpublic requestToUrl(request: string, operation: string, callback: (err: string | object | null, url?: string) => void): void {\n\t\tzlib.deflateRaw(request, (err, buffer) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst base64 = buffer.toString('base64');\n\t\t\t\tlet target = this.serviceProviderOptions.entryPoint;\n\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\tif (this.serviceProviderOptions.idpSLORedirectURL) {\n\t\t\t\t\t\ttarget = this.serviceProviderOptions.idpSLORedirectURL;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target.indexOf('?') > 0) {\n\t\t\t\t\ttarget += '&';\n\t\t\t\t} else {\n\t\t\t\t\ttarget += '?';\n\t\t\t\t}\n\n\t\t\t\t// TBD. We should really include a proper RelayState here\n\t\t\t\tlet relayState;\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\t\t\trelayState = Meteor.absoluteUrl();\n\t\t\t\t} else {\n\t\t\t\t\trelayState = this.serviceProviderOptions.provider;\n\t\t\t\t}\n\n\t\t\t\tconst samlRequest: Record<string, any> = {\n\t\t\t\t\tSAMLRequest: base64,\n\t\t\t\t\tRelayState: relayState,\n\t\t\t\t};\n\n\t\t\t\tif (this.serviceProviderOptions.privateCert) {\n\t\t\t\t\tsamlRequest.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n\t\t\t\t\tsamlRequest.Signature = this.signRequest(querystring.stringify(samlRequest));\n\t\t\t\t}\n\n\t\t\t\ttarget += querystring.stringify(samlRequest);\n\n\t\t\t\tSAMLUtils.log(`requestToUrl: ${target}`);\n\n\t\t\t\tif (operation === 'logout') {\n\t\t\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\t\t\treturn callback(null, target);\n\t\t\t\t}\n\t\t\t\tcallback(null, target);\n\t\t\t} catch (error) {\n\t\t\t\tcallback(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getAuthorizeUrl(callback: (err: string | object | null, url?: string) => void): void {\n\t\tconst request = this.generateAuthorizeRequest();\n\t\tSAMLUtils.log('-----REQUEST------');\n\t\tSAMLUtils.log(request);\n\n\t\tthis.requestToUrl(request, 'authorize', callback);\n\t}\n\n\tpublic validateLogoutRequest(samlRequest: string, callback: ILogoutRequestValidateCallback): void {\n\t\tSAMLUtils.inflateXml(\n\t\t\tsamlRequest,\n\t\t\t(xml: string) => {\n\t\t\t\tconst parser = new LogoutRequestParser(this.serviceProviderOptions);\n\t\t\t\treturn parser.validate(xml, callback);\n\t\t\t},\n\t\t\t(err: string | object | null) => {\n\t\t\t\tcallback(err, null);\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic validateLogoutResponse(samlResponse: string, callback: ILogoutResponseValidateCallback): void {\n\t\tSAMLUtils.inflateXml(\n\t\t\tsamlResponse,\n\t\t\t(xml: string) => {\n\t\t\t\tconst parser = new LogoutResponseParser(this.serviceProviderOptions);\n\t\t\t\treturn parser.validate(xml, callback);\n\t\t\t},\n\t\t\t(err: string | object | null) => {\n\t\t\t\tcallback(err, null);\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic validateResponse(samlResponse: string, callback: IResponseValidateCallback): void {\n\t\tconst xml = Buffer.from(samlResponse, 'base64').toString('utf8');\n\n\t\tconst parser = new ResponseParser(this.serviceProviderOptions);\n\t\treturn parser.validate(xml, callback);\n\t}\n\n\tpublic generateServiceProviderMetadata(): string {\n\t\treturn ServiceProviderMetadata.generate(this.serviceProviderOptions);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"2e2974890fa00edb41b5377c36c1d39c6ce1b60a"}
