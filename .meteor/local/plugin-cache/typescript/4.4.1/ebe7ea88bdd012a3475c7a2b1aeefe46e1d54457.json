{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/EmailCheck.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/2fa/server/code/EmailCheck.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/EmailCheck.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/EmailCheck.ts","sourceRoot":"","sources":["app/2fa/server/code/EmailCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { Accounts } from 'meteor/accounts-base';\nimport bcrypt from 'bcrypt';\n\nimport { settings } from '../../../settings/server';\nimport * as Mailer from '../../../mailer';\nimport { Users } from '../../../models/server';\nimport { ICodeCheck, IProcessInvalidCodeResult } from './ICodeCheck';\nimport { IUser } from '../../../../definition/IUser';\n\nexport class EmailCheck implements ICodeCheck {\n\tpublic readonly name = 'email';\n\n\tprivate getUserVerifiedEmails(user: IUser): string[] {\n\t\tif (!Array.isArray(user.emails)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn user.emails.filter(({ verified }) => verified).map((e) => e.address);\n\t}\n\n\tpublic isEnabled(user: IUser): boolean {\n\t\tif (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.email2fa?.enabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getUserVerifiedEmails(user).length > 0;\n\t}\n\n\tprivate send2FAEmail(address: string, random: string, user: IUser): void {\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\n\t\tMailer.send({\n\t\t\tto: address,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: 'Authentication code',\n\t\t\treplyTo: undefined,\n\t\t\tdata: {\n\t\t\t\tcode: random.replace(/^(\\d{3})/, '$1-'),\n\t\t\t},\n\t\t\theaders: undefined,\n\t\t\ttext: `\n${t('Here_is_your_authentication_code')}\n\n__code__\n\n${t('Do_not_provide_this_code_to_anyone')}\n${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}\n`,\n\t\t\thtml: `\n\t\t\t\t<p>${t('Here_is_your_authentication_code')}</p>\n\t\t\t\t<p style=\"font-size: 30px;\">\n\t\t\t\t\t<b>__code__</b>\n\t\t\t\t</p>\n\t\t\t\t<p>${t('Do_not_provide_this_code_to_anyone')}</p>\n\t\t\t\t<p>${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}</p>\n\t\t\t`,\n\t\t});\n\t}\n\n\tpublic verify(user: IUser, codeFromEmail: string): boolean {\n\t\tif (!this.isEnabled(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services || !Array.isArray(user.services?.emailCode)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove non digits\n\t\tcodeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n\n\t\tUsers.removeExpiredEmailCodesOfUserId(user._id);\n\n\t\tconst valid = user.services.emailCode.find(({ code, expire }) => {\n\t\t\tif (expire < new Date()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (bcrypt.compareSync(codeFromEmail, code)) {\n\t\t\t\tUsers.removeEmailCodeByUserIdAndCode(user._id, code);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\treturn !!valid;\n\t}\n\n\tpublic sendEmailCode(user: IUser): void {\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst random = Random._randomString(6, '0123456789');\n\t\tconst encryptedRandom = bcrypt.hashSync(random, Accounts._bcryptRounds());\n\t\tconst expire = new Date();\n\t\tconst expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration') as string, 10);\n\n\t\texpire.setSeconds(expire.getSeconds() + expirationInSeconds);\n\n\t\tUsers.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n\t\tfor (const address of emails) {\n\t\t\tthis.send2FAEmail(address, random, user);\n\t\t}\n\t}\n\n\tpublic processInvalidCode(user: IUser): IProcessInvalidCodeResult {\n\t\tUsers.removeExpiredEmailCodesOfUserId(user._id);\n\n\t\t// Generate new code if the there isn't any code with more than 5 minutes to expire\n\t\tconst expireWithDelta = new Date();\n\t\texpireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n\n\t\tconst hasValidCode = user.services?.emailCode?.filter(({ expire }) => expire > expireWithDelta);\n\n\t\tif (hasValidCode?.length) {\n\t\t\treturn {\n\t\t\t\tcodeGenerated: false,\n\t\t\t\tcodeCount: hasValidCode.length,\n\t\t\t\tcodeExpires: hasValidCode.map((i) => i.expire),\n\t\t\t};\n\t\t}\n\n\t\tthis.sendEmailCode(user);\n\n\t\treturn {\n\t\t\tcodeGenerated: true,\n\t\t};\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/EmailCheck.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/2fa/server/code/EmailCheck.ts"}},"code":"module.export({\n  EmailCheck: () => EmailCheck\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet bcrypt;\nmodule.link(\"bcrypt\", {\n  default(v) {\n    bcrypt = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet Mailer;\nmodule.link(\"../../../mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 5);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 6);\n\nclass EmailCheck {\n  constructor() {\n    this.name = 'email';\n  }\n\n  getUserVerifiedEmails(user) {\n    if (!Array.isArray(user.emails)) {\n      return [];\n    }\n\n    return user.emails.filter(_ref => {\n      let {\n        verified\n      } = _ref;\n      return verified;\n    }).map(e => e.address);\n  }\n\n  isEnabled(user) {\n    var _user$services, _user$services$email;\n\n    if (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n      return false;\n    }\n\n    if (!((_user$services = user.services) !== null && _user$services !== void 0 && (_user$services$email = _user$services.email2fa) !== null && _user$services$email !== void 0 && _user$services$email.enabled)) {\n      return false;\n    }\n\n    return this.getUserVerifiedEmails(user).length > 0;\n  }\n\n  send2FAEmail(address, random, user) {\n    const language = user.language || settings.get('Language') || 'en';\n\n    const t = s => TAPi18n.__(s, {\n      lng: language\n    });\n\n    Mailer.send({\n      to: address,\n      from: settings.get('From_Email'),\n      subject: 'Authentication code',\n      replyTo: undefined,\n      data: {\n        code: random.replace(/^(\\d{3})/, '$1-')\n      },\n      headers: undefined,\n      text: \"\\n\".concat(t('Here_is_your_authentication_code'), \"\\n\\n__code__\\n\\n\").concat(t('Do_not_provide_this_code_to_anyone'), \"\\n\").concat(t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email'), \"\\n\"),\n      html: \"\\n\\t\\t\\t\\t<p>\".concat(t('Here_is_your_authentication_code'), \"</p>\\n\\t\\t\\t\\t<p style=\\\"font-size: 30px;\\\">\\n\\t\\t\\t\\t\\t<b>__code__</b>\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t<p>\").concat(t('Do_not_provide_this_code_to_anyone'), \"</p>\\n\\t\\t\\t\\t<p>\").concat(t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email'), \"</p>\\n\\t\\t\\t\")\n    });\n  }\n\n  verify(user, codeFromEmail) {\n    var _user$services2;\n\n    if (!this.isEnabled(user)) {\n      return false;\n    }\n\n    if (!user.services || !Array.isArray((_user$services2 = user.services) === null || _user$services2 === void 0 ? void 0 : _user$services2.emailCode)) {\n      return false;\n    } // Remove non digits\n\n\n    codeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n    Users.removeExpiredEmailCodesOfUserId(user._id);\n    const valid = user.services.emailCode.find(_ref2 => {\n      let {\n        code,\n        expire\n      } = _ref2;\n\n      if (expire < new Date()) {\n        return false;\n      }\n\n      if (bcrypt.compareSync(codeFromEmail, code)) {\n        Users.removeEmailCodeByUserIdAndCode(user._id, code);\n        return true;\n      }\n\n      return false;\n    });\n    return !!valid;\n  }\n\n  sendEmailCode(user) {\n    const emails = this.getUserVerifiedEmails(user);\n\n    const random = Random._randomString(6, '0123456789');\n\n    const encryptedRandom = bcrypt.hashSync(random, Accounts._bcryptRounds());\n    const expire = new Date();\n    const expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration'), 10);\n    expire.setSeconds(expire.getSeconds() + expirationInSeconds);\n    Users.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n    for (const address of emails) {\n      this.send2FAEmail(address, random, user);\n    }\n  }\n\n  processInvalidCode(user) {\n    var _user$services3, _user$services3$email;\n\n    Users.removeExpiredEmailCodesOfUserId(user._id); // Generate new code if the there isn't any code with more than 5 minutes to expire\n\n    const expireWithDelta = new Date();\n    expireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n    const hasValidCode = (_user$services3 = user.services) === null || _user$services3 === void 0 ? void 0 : (_user$services3$email = _user$services3.emailCode) === null || _user$services3$email === void 0 ? void 0 : _user$services3$email.filter(_ref3 => {\n      let {\n        expire\n      } = _ref3;\n      return expire > expireWithDelta;\n    });\n\n    if (hasValidCode !== null && hasValidCode !== void 0 && hasValidCode.length) {\n      return {\n        codeGenerated: false,\n        codeCount: hasValidCode.length,\n        codeExpires: hasValidCode.map(i => i.expire)\n      };\n    }\n\n    this.sendEmailCode(user);\n    return {\n      codeGenerated: true\n    };\n  }\n\n}","map":{"version":3,"sources":["app/2fa/server/code/EmailCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { Accounts } from 'meteor/accounts-base';\nimport bcrypt from 'bcrypt';\n\nimport { settings } from '../../../settings/server';\nimport * as Mailer from '../../../mailer';\nimport { Users } from '../../../models/server';\nimport { ICodeCheck, IProcessInvalidCodeResult } from './ICodeCheck';\nimport { IUser } from '../../../../definition/IUser';\n\nexport class EmailCheck implements ICodeCheck {\n\tpublic readonly name = 'email';\n\n\tprivate getUserVerifiedEmails(user: IUser): string[] {\n\t\tif (!Array.isArray(user.emails)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn user.emails.filter(({ verified }) => verified).map((e) => e.address);\n\t}\n\n\tpublic isEnabled(user: IUser): boolean {\n\t\tif (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.email2fa?.enabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getUserVerifiedEmails(user).length > 0;\n\t}\n\n\tprivate send2FAEmail(address: string, random: string, user: IUser): void {\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\n\t\tMailer.send({\n\t\t\tto: address,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: 'Authentication code',\n\t\t\treplyTo: undefined,\n\t\t\tdata: {\n\t\t\t\tcode: random.replace(/^(\\d{3})/, '$1-'),\n\t\t\t},\n\t\t\theaders: undefined,\n\t\t\ttext: `\n${t('Here_is_your_authentication_code')}\n\n__code__\n\n${t('Do_not_provide_this_code_to_anyone')}\n${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}\n`,\n\t\t\thtml: `\n\t\t\t\t<p>${t('Here_is_your_authentication_code')}</p>\n\t\t\t\t<p style=\"font-size: 30px;\">\n\t\t\t\t\t<b>__code__</b>\n\t\t\t\t</p>\n\t\t\t\t<p>${t('Do_not_provide_this_code_to_anyone')}</p>\n\t\t\t\t<p>${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}</p>\n\t\t\t`,\n\t\t});\n\t}\n\n\tpublic verify(user: IUser, codeFromEmail: string): boolean {\n\t\tif (!this.isEnabled(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services || !Array.isArray(user.services?.emailCode)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove non digits\n\t\tcodeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n\n\t\tUsers.removeExpiredEmailCodesOfUserId(user._id);\n\n\t\tconst valid = user.services.emailCode.find(({ code, expire }) => {\n\t\t\tif (expire < new Date()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (bcrypt.compareSync(codeFromEmail, code)) {\n\t\t\t\tUsers.removeEmailCodeByUserIdAndCode(user._id, code);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\treturn !!valid;\n\t}\n\n\tpublic sendEmailCode(user: IUser): void {\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst random = Random._randomString(6, '0123456789');\n\t\tconst encryptedRandom = bcrypt.hashSync(random, Accounts._bcryptRounds());\n\t\tconst expire = new Date();\n\t\tconst expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration') as string, 10);\n\n\t\texpire.setSeconds(expire.getSeconds() + expirationInSeconds);\n\n\t\tUsers.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n\t\tfor (const address of emails) {\n\t\t\tthis.send2FAEmail(address, random, user);\n\t\t}\n\t}\n\n\tpublic processInvalidCode(user: IUser): IProcessInvalidCodeResult {\n\t\tUsers.removeExpiredEmailCodesOfUserId(user._id);\n\n\t\t// Generate new code if the there isn't any code with more than 5 minutes to expire\n\t\tconst expireWithDelta = new Date();\n\t\texpireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n\n\t\tconst hasValidCode = user.services?.emailCode?.filter(({ expire }) => expire > expireWithDelta);\n\n\t\tif (hasValidCode?.length) {\n\t\t\treturn {\n\t\t\t\tcodeGenerated: false,\n\t\t\t\tcodeCount: hasValidCode.length,\n\t\t\t\tcodeExpires: hasValidCode.map((i) => i.expire),\n\t\t\t};\n\t\t}\n\n\t\tthis.sendEmailCode(user);\n\n\t\treturn {\n\t\t\tcodeGenerated: true,\n\t\t};\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"ebe7ea88bdd012a3475c7a2b1aeefe46e1d54457"}
