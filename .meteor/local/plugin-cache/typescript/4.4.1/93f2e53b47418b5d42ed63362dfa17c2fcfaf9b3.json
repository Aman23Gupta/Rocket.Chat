{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/watchers/watchers.module.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/modules/watchers/watchers.module.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/watchers/watchers.module.ts","inputSourceMap":{"version":3,"file":"server/modules/watchers/watchers.module.ts","sourceRoot":"","sources":["server/modules/watchers/watchers.module.ts"],"names":[],"mappings":"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","sourcesContent":["import mem from 'mem';\n\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { PermissionsRaw } from '../../../app/models/server/raw/Permissions';\nimport { MessagesRaw } from '../../../app/models/server/raw/Messages';\nimport { RolesRaw } from '../../../app/models/server/raw/Roles';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { IMessage } from '../../../definition/IMessage';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { IRole } from '../../../definition/IRole';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IBaseRaw } from '../../../app/models/server/raw/BaseRaw';\nimport { LivechatInquiryRaw } from '../../../app/models/server/raw/LivechatInquiry';\nimport { IBaseData } from '../../../definition/IBaseData';\nimport { IPermission } from '../../../definition/IPermission';\nimport { ISetting, SettingValue } from '../../../definition/ISetting';\nimport { ILivechatInquiryRecord } from '../../../definition/IInquiry';\nimport { UsersSessionsRaw } from '../../../app/models/server/raw/UsersSessions';\nimport { IUserSession } from '../../../definition/IUserSession';\nimport { subscriptionFields, roomFields } from './publishFields';\nimport { IUser } from '../../../definition/IUser';\nimport { LoginServiceConfigurationRaw } from '../../../app/models/server/raw/LoginServiceConfiguration';\nimport { ILoginServiceConfiguration } from '../../../definition/ILoginServiceConfiguration';\nimport { IInstanceStatus } from '../../../definition/IInstanceStatus';\nimport { InstanceStatusRaw } from '../../../app/models/server/raw/InstanceStatus';\nimport { IntegrationHistoryRaw } from '../../../app/models/server/raw/IntegrationHistory';\nimport { IIntegrationHistory } from '../../../definition/IIntegrationHistory';\nimport { LivechatDepartmentAgentsRaw } from '../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { ILivechatDepartmentAgents } from '../../../definition/ILivechatDepartmentAgents';\nimport { IIntegration } from '../../../definition/IIntegration';\nimport { IntegrationsRaw } from '../../../app/models/server/raw/Integrations';\nimport { EventSignatures } from '../../sdk/lib/Events';\nimport { IEmailInbox } from '../../../definition/IEmailInbox';\nimport { EmailInboxRaw } from '../../../app/models/server/raw/EmailInbox';\nimport { isPresenceMonitorEnabled } from '../../lib/isPresenceMonitorEnabled';\n\ninterface IModelsParam {\n\tSubscriptions: SubscriptionsRaw;\n\tPermissions: PermissionsRaw;\n\tUsers: UsersRaw;\n\tSettings: SettingsRaw;\n\tMessages: MessagesRaw;\n\tLivechatInquiry: LivechatInquiryRaw;\n\tLivechatDepartmentAgents: LivechatDepartmentAgentsRaw;\n\tUsersSessions: UsersSessionsRaw;\n\tRoles: RolesRaw;\n\tRooms: RoomsRaw;\n\tLoginServiceConfiguration: LoginServiceConfigurationRaw;\n\tInstanceStatus: InstanceStatusRaw;\n\tIntegrationHistory: IntegrationHistoryRaw;\n\tIntegrations: IntegrationsRaw;\n\tEmailInbox: EmailInboxRaw;\n}\n\ninterface IChange<T> {\n\taction: 'insert' | 'update' | 'remove';\n\tclientAction: 'inserted' | 'updated' | 'removed';\n\tid: string;\n\tdata?: T;\n\tdiff?: Record<string, any>;\n\tunset?: Record<string, number>;\n}\n\ntype Watcher = <T extends IBaseData>(model: IBaseRaw<T>, fn: (event: IChange<T>) => void) => void;\n\ntype BroadcastCallback = <T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>) => Promise<void>;\n\nconst hasKeys =\n\t(requiredKeys: string[]): ((data?: Record<string, any>) => boolean) =>\n\t(data?: Record<string, any>): boolean => {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.keys(data)\n\t\t\t.filter((key) => key !== '_id')\n\t\t\t.map((key) => key.split('.')[0])\n\t\t\t.some((key) => requiredKeys.includes(key));\n\t};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nexport function initWatchers(models: IModelsParam, broadcast: BroadcastCallback, watch: Watcher): void {\n\tconst {\n\t\tMessages,\n\t\tUsers,\n\t\tSettings,\n\t\tSubscriptions,\n\t\tUsersSessions,\n\t\tRoles,\n\t\tPermissions,\n\t\tLivechatInquiry,\n\t\tLivechatDepartmentAgents,\n\t\tRooms,\n\t\tLoginServiceConfiguration,\n\t\tInstanceStatus,\n\t\tIntegrationHistory,\n\t\tIntegrations,\n\t\tEmailInbox,\n\t} = models;\n\n\tconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\n\tconst getUserNameCached = mem(\n\t\tasync (userId: string): Promise<string | undefined> => {\n\t\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\t\treturn user?.name;\n\t\t},\n\t\t{ maxAge: 10000 },\n\t);\n\n\twatch<IMessage>(Messages, async ({ clientAction, id, data }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tconst message: IMessage | undefined = data ?? (await Messages.findOne({ _id: id }));\n\t\t\t\tif (!message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (message._hidden !== true && message.imported == null) {\n\t\t\t\t\tconst UseRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\n\t\t\t\t\tif (UseRealName) {\n\t\t\t\t\t\tif (message.u?._id) {\n\t\t\t\t\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\tmessage.u.name = name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (message.mentions?.length) {\n\t\t\t\t\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\t\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\tmention.name = name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbroadcast('watch.messages', { clientAction, message });\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\twatch<ISubscription>(Subscriptions, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated': {\n\t\t\t\tif (!hasSubscriptionFields(data || diff)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Override data cuz we do not publish all fields\n\t\t\t\tconst subscription = await Subscriptions.findOneById<Pick<ISubscription, keyof typeof subscriptionFields>>(id, {\n\t\t\t\t\tprojection: subscriptionFields,\n\t\t\t\t});\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tconst trash = await Subscriptions.trashFindOneById<Pick<ISubscription, 'u' | 'rid'>>(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1 },\n\t\t\t\t});\n\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tbroadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatch<IRole>(Roles, async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tconst role = clientAction === 'removed' ? { _id: id, name: id } : data || (await Roles.findOneById(id));\n\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.roles', {\n\t\t\tclientAction: clientAction !== 'removed' ? ('changed' as const) : clientAction,\n\t\t\trole,\n\t\t});\n\t});\n\n\tif (isPresenceMonitorEnabled()) {\n\t\twatch<IUserSession>(UsersSessions, async ({ clientAction, id, data: eventData }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\tcase 'updated':\n\t\t\t\t\tconst data = eventData ?? (await UsersSessions.findOneById(id));\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbroadcast('watch.userSessions', { clientAction, userSession: data });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tbroadcast('watch.userSessions', { clientAction, userSession: { _id: id } });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\twatch<ILivechatInquiryRecord>(LivechatInquiry, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tdata = data ?? (await LivechatInquiry.findOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = (await LivechatInquiry.trashFindOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.inquiries', { clientAction, inquiry: data, diff });\n\t});\n\n\twatch<ILivechatDepartmentAgents>(LivechatDepartmentAgents, async ({ clientAction, id, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tconst data = await LivechatDepartmentAgents.trashFindOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t\t});\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbroadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LivechatDepartmentAgents.findOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tbroadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t});\n\n\twatch<IPermission>(Permissions, async ({ clientAction, id, data: eventData, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\t\tlet data;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted':\n\t\t\t\tdata = eventData ?? (await Permissions.findOneById(id));\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = { _id: id, roles: [] };\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('permission.changed', { clientAction, data });\n\n\t\tif (data.level === 'settings' && data.settingId) {\n\t\t\t// if the permission changes, the effect on the visible settings depends on the role affected.\n\t\t\t// The selected-settings-based consumers have to react accordingly and either add or remove the\n\t\t\t// setting from the user's collection\n\t\t\tconst setting = await Settings.findOneNotHiddenById(data.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbroadcast('watch.settings', { clientAction: 'updated', setting });\n\t\t}\n\t});\n\n\twatch<ISetting>(Settings, async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tlet setting;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted': {\n\t\t\t\tsetting = data ?? (await Settings.findOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tsetting = data ?? (await Settings.trashFindOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!setting) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.settings', { clientAction, setting });\n\t});\n\n\twatch<IRoom>(Rooms, async ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.rooms', { clientAction, room: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tif (!hasRoomFields(data || diff)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.rooms', { clientAction, room });\n\t});\n\n\t// TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n\t// and most of those messages are not loaded by the clients.\n\twatch<IUser>(Users, ({ clientAction, id, data, diff, unset }) => {\n\t\tbroadcast('watch.users', { clientAction, data, diff, unset, id });\n\t});\n\n\twatch<ILoginServiceConfiguration>(LoginServiceConfiguration, async ({ clientAction, id }) => {\n\t\tconst data = await LoginServiceConfiguration.findOne<Omit<ILoginServiceConfiguration, 'secret'>>(id, { projection: { secret: 0 } });\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.loginServiceConfiguration', { clientAction, data, id });\n\t});\n\n\twatch<IInstanceStatus>(InstanceStatus, ({ clientAction, id, data, diff }) => {\n\t\tbroadcast('watch.instanceStatus', { clientAction, data, diff, id });\n\t});\n\n\twatch<IIntegrationHistory>(IntegrationHistory, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated': {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (!history || !history.integration) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.integrationHistory', { clientAction, data: history, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inserted': {\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.integrationHistory', { clientAction, data, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatch<IIntegration>(Integrations, async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.integrations', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await Integrations.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.integrations', { clientAction, data, id });\n\t});\n\n\twatch<IEmailInbox>(EmailInbox, async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.emailInbox', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await EmailInbox.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.emailInbox', { clientAction, data, id });\n\t});\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/watchers/watchers.module.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/modules/watchers/watchers.module.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  initWatchers: () => initWatchers\n});\nlet mem;\nmodule.link(\"mem\", {\n  default(v) {\n    mem = v;\n  }\n\n}, 0);\nlet subscriptionFields, roomFields;\nmodule.link(\"./publishFields\", {\n  subscriptionFields(v) {\n    subscriptionFields = v;\n  },\n\n  roomFields(v) {\n    roomFields = v;\n  }\n\n}, 1);\nlet isPresenceMonitorEnabled;\nmodule.link(\"../../lib/isPresenceMonitorEnabled\", {\n  isPresenceMonitorEnabled(v) {\n    isPresenceMonitorEnabled = v;\n  }\n\n}, 2);\n\nconst hasKeys = requiredKeys => data => {\n  if (!data) {\n    return false;\n  }\n\n  return Object.keys(data).filter(key => key !== '_id').map(key => key.split('.')[0]).some(key => requiredKeys.includes(key));\n};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nfunction initWatchers(models, broadcast, watch) {\n  const {\n    Messages,\n    Users,\n    Settings,\n    Subscriptions,\n    UsersSessions,\n    Roles,\n    Permissions,\n    LivechatInquiry,\n    LivechatDepartmentAgents,\n    Rooms,\n    LoginServiceConfiguration,\n    InstanceStatus,\n    IntegrationHistory,\n    Integrations,\n    EmailInbox\n  } = models;\n  const getSettingCached = mem(setting => Promise.asyncApply(() => Settings.getValueById(setting)), {\n    maxAge: 10000\n  });\n  const getUserNameCached = mem(userId => Promise.asyncApply(() => {\n    const user = Promise.await(Users.findOne(userId, {\n      projection: {\n        name: 1\n      }\n    }));\n    return user === null || user === void 0 ? void 0 : user.name;\n  }), {\n    maxAge: 10000\n  });\n  watch(Messages, _ref => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data\n    } = _ref;\n\n    switch (clientAction) {\n      case 'inserted':\n      case 'updated':\n        const message = data !== null && data !== void 0 ? data : Promise.await(Messages.findOne({\n          _id: id\n        }));\n\n        if (!message) {\n          return;\n        }\n\n        if (message._hidden !== true && message.imported == null) {\n          const UseRealName = Promise.await(getSettingCached('UI_Use_Real_Name')) === true;\n\n          if (UseRealName) {\n            var _message$u, _message$mentions;\n\n            if ((_message$u = message.u) !== null && _message$u !== void 0 && _message$u._id) {\n              const name = Promise.await(getUserNameCached(message.u._id));\n\n              if (name) {\n                message.u.name = name;\n              }\n            }\n\n            if ((_message$mentions = message.mentions) !== null && _message$mentions !== void 0 && _message$mentions.length) {\n              var _iteratorAbruptCompletion = false;\n              var _didIteratorError = false;\n\n              var _iteratorError;\n\n              try {\n                for (var _iterator = _asyncIterator(message.mentions), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n                  const mention = _step.value;\n                  const name = Promise.await(getUserNameCached(mention._id));\n\n                  if (name) {\n                    mention.name = name;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion && _iterator.return != null) {\n                    Promise.await(_iterator.return());\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            }\n          }\n\n          broadcast('watch.messages', {\n            clientAction,\n            message\n          });\n        }\n\n        break;\n    }\n  }));\n  watch(Subscriptions, _ref2 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref2;\n\n    switch (clientAction) {\n      case 'inserted':\n      case 'updated':\n        {\n          if (!hasSubscriptionFields(data || diff)) {\n            return;\n          } // Override data cuz we do not publish all fields\n\n\n          const subscription = Promise.await(Subscriptions.findOneById(id, {\n            projection: subscriptionFields\n          }));\n\n          if (!subscription) {\n            return;\n          }\n\n          broadcast('watch.subscriptions', {\n            clientAction,\n            subscription\n          });\n          break;\n        }\n\n      case 'removed':\n        {\n          const trash = Promise.await(Subscriptions.trashFindOneById(id, {\n            projection: {\n              u: 1,\n              rid: 1\n            }\n          }));\n          const subscription = trash || {\n            _id: id\n          };\n          broadcast('watch.subscriptions', {\n            clientAction,\n            subscription\n          });\n          break;\n        }\n    }\n  }));\n  watch(Roles, _ref3 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref3;\n\n    if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n      // avoid useless changes\n      return;\n    }\n\n    const role = clientAction === 'removed' ? {\n      _id: id,\n      name: id\n    } : data || Promise.await(Roles.findOneById(id));\n\n    if (!role) {\n      return;\n    }\n\n    broadcast('watch.roles', {\n      clientAction: clientAction !== 'removed' ? 'changed' : clientAction,\n      role\n    });\n  }));\n\n  if (isPresenceMonitorEnabled()) {\n    watch(UsersSessions, _ref4 => Promise.asyncApply(() => {\n      let {\n        clientAction,\n        id,\n        data: eventData\n      } = _ref4;\n\n      switch (clientAction) {\n        case 'inserted':\n        case 'updated':\n          const data = eventData !== null && eventData !== void 0 ? eventData : Promise.await(UsersSessions.findOneById(id));\n\n          if (!data) {\n            return;\n          }\n\n          broadcast('watch.userSessions', {\n            clientAction,\n            userSession: data\n          });\n          break;\n\n        case 'removed':\n          broadcast('watch.userSessions', {\n            clientAction,\n            userSession: {\n              _id: id\n            }\n          });\n          break;\n      }\n    }));\n  }\n\n  watch(LivechatInquiry, _ref5 => Promise.asyncApply(() => {\n    var _ref6, _data, _await$LivechatInquir;\n\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref5;\n\n    switch (clientAction) {\n      case 'inserted':\n      case 'updated':\n        data = (_ref6 = (_data = data) !== null && _data !== void 0 ? _data : Promise.await(LivechatInquiry.findOneById(id))) !== null && _ref6 !== void 0 ? _ref6 : undefined;\n        break;\n\n      case 'removed':\n        data = (_await$LivechatInquir = Promise.await(LivechatInquiry.trashFindOneById(id))) !== null && _await$LivechatInquir !== void 0 ? _await$LivechatInquir : undefined;\n        break;\n    }\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('watch.inquiries', {\n      clientAction,\n      inquiry: data,\n      diff\n    });\n  }));\n  watch(LivechatDepartmentAgents, _ref7 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      diff\n    } = _ref7;\n\n    if (clientAction === 'removed') {\n      const data = Promise.await(LivechatDepartmentAgents.trashFindOneById(id, {\n        projection: {\n          agentId: 1,\n          departmentId: 1\n        }\n      }));\n\n      if (!data) {\n        return;\n      }\n\n      broadcast('watch.livechatDepartmentAgents', {\n        clientAction,\n        id,\n        data,\n        diff\n      });\n      return;\n    }\n\n    const data = Promise.await(LivechatDepartmentAgents.findOneById(id, {\n      projection: {\n        agentId: 1,\n        departmentId: 1\n      }\n    }));\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('watch.livechatDepartmentAgents', {\n      clientAction,\n      id,\n      data,\n      diff\n    });\n  }));\n  watch(Permissions, _ref8 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data: eventData,\n      diff\n    } = _ref8;\n\n    if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n      // avoid useless changes\n      return;\n    }\n\n    let data;\n\n    switch (clientAction) {\n      case 'updated':\n      case 'inserted':\n        data = eventData !== null && eventData !== void 0 ? eventData : Promise.await(Permissions.findOneById(id));\n        break;\n\n      case 'removed':\n        data = {\n          _id: id,\n          roles: []\n        };\n        break;\n    }\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('permission.changed', {\n      clientAction,\n      data\n    });\n\n    if (data.level === 'settings' && data.settingId) {\n      // if the permission changes, the effect on the visible settings depends on the role affected.\n      // The selected-settings-based consumers have to react accordingly and either add or remove the\n      // setting from the user's collection\n      const setting = Promise.await(Settings.findOneNotHiddenById(data.settingId));\n\n      if (!setting) {\n        return;\n      }\n\n      broadcast('watch.settings', {\n        clientAction: 'updated',\n        setting\n      });\n    }\n  }));\n  watch(Settings, _ref9 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref9;\n\n    if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n      // avoid useless changes\n      return;\n    }\n\n    let setting;\n\n    switch (clientAction) {\n      case 'updated':\n      case 'inserted':\n        {\n          setting = data !== null && data !== void 0 ? data : Promise.await(Settings.findOneById(id));\n          break;\n        }\n\n      case 'removed':\n        {\n          setting = data !== null && data !== void 0 ? data : Promise.await(Settings.trashFindOneById(id));\n          break;\n        }\n    }\n\n    if (!setting) {\n      return;\n    }\n\n    broadcast('watch.settings', {\n      clientAction,\n      setting\n    });\n  }));\n  watch(Rooms, _ref10 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref10;\n\n    if (clientAction === 'removed') {\n      broadcast('watch.rooms', {\n        clientAction,\n        room: {\n          _id: id\n        }\n      });\n      return;\n    }\n\n    if (!hasRoomFields(data || diff)) {\n      return;\n    }\n\n    const room = data !== null && data !== void 0 ? data : Promise.await(Rooms.findOneById(id, {\n      projection: roomFields\n    }));\n\n    if (!room) {\n      return;\n    }\n\n    broadcast('watch.rooms', {\n      clientAction,\n      room\n    });\n  })); // TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n  // and most of those messages are not loaded by the clients.\n\n  watch(Users, _ref11 => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff,\n      unset\n    } = _ref11;\n    broadcast('watch.users', {\n      clientAction,\n      data,\n      diff,\n      unset,\n      id\n    });\n  });\n  watch(LoginServiceConfiguration, _ref12 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id\n    } = _ref12;\n    const data = Promise.await(LoginServiceConfiguration.findOne(id, {\n      projection: {\n        secret: 0\n      }\n    }));\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('watch.loginServiceConfiguration', {\n      clientAction,\n      data,\n      id\n    });\n  }));\n  watch(InstanceStatus, _ref13 => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref13;\n    broadcast('watch.instanceStatus', {\n      clientAction,\n      data,\n      diff,\n      id\n    });\n  });\n  watch(IntegrationHistory, _ref14 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data,\n      diff\n    } = _ref14;\n\n    switch (clientAction) {\n      case 'updated':\n        {\n          const history = Promise.await(IntegrationHistory.findOneById(id, {\n            projection: {\n              'integration._id': 1\n            }\n          }));\n\n          if (!history || !history.integration) {\n            return;\n          }\n\n          broadcast('watch.integrationHistory', {\n            clientAction,\n            data: history,\n            diff,\n            id\n          });\n          break;\n        }\n\n      case 'inserted':\n        {\n          if (!data) {\n            return;\n          }\n\n          broadcast('watch.integrationHistory', {\n            clientAction,\n            data,\n            diff,\n            id\n          });\n          break;\n        }\n    }\n  }));\n  watch(Integrations, _ref15 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data: eventData\n    } = _ref15;\n\n    if (clientAction === 'removed') {\n      broadcast('watch.integrations', {\n        clientAction,\n        id,\n        data: {\n          _id: id\n        }\n      });\n      return;\n    }\n\n    const data = eventData !== null && eventData !== void 0 ? eventData : Promise.await(Integrations.findOneById(id));\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('watch.integrations', {\n      clientAction,\n      data,\n      id\n    });\n  }));\n  watch(EmailInbox, _ref16 => Promise.asyncApply(() => {\n    let {\n      clientAction,\n      id,\n      data: eventData\n    } = _ref16;\n\n    if (clientAction === 'removed') {\n      broadcast('watch.emailInbox', {\n        clientAction,\n        id,\n        data: {\n          _id: id\n        }\n      });\n      return;\n    }\n\n    const data = eventData !== null && eventData !== void 0 ? eventData : Promise.await(EmailInbox.findOneById(id));\n\n    if (!data) {\n      return;\n    }\n\n    broadcast('watch.emailInbox', {\n      clientAction,\n      data,\n      id\n    });\n  }));\n}","map":{"version":3,"sources":["server/modules/watchers/watchers.module.ts"],"names":[],"mappings":"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","sourcesContent":["import mem from 'mem';\n\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { PermissionsRaw } from '../../../app/models/server/raw/Permissions';\nimport { MessagesRaw } from '../../../app/models/server/raw/Messages';\nimport { RolesRaw } from '../../../app/models/server/raw/Roles';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { IMessage } from '../../../definition/IMessage';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { IRole } from '../../../definition/IRole';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IBaseRaw } from '../../../app/models/server/raw/BaseRaw';\nimport { LivechatInquiryRaw } from '../../../app/models/server/raw/LivechatInquiry';\nimport { IBaseData } from '../../../definition/IBaseData';\nimport { IPermission } from '../../../definition/IPermission';\nimport { ISetting, SettingValue } from '../../../definition/ISetting';\nimport { ILivechatInquiryRecord } from '../../../definition/IInquiry';\nimport { UsersSessionsRaw } from '../../../app/models/server/raw/UsersSessions';\nimport { IUserSession } from '../../../definition/IUserSession';\nimport { subscriptionFields, roomFields } from './publishFields';\nimport { IUser } from '../../../definition/IUser';\nimport { LoginServiceConfigurationRaw } from '../../../app/models/server/raw/LoginServiceConfiguration';\nimport { ILoginServiceConfiguration } from '../../../definition/ILoginServiceConfiguration';\nimport { IInstanceStatus } from '../../../definition/IInstanceStatus';\nimport { InstanceStatusRaw } from '../../../app/models/server/raw/InstanceStatus';\nimport { IntegrationHistoryRaw } from '../../../app/models/server/raw/IntegrationHistory';\nimport { IIntegrationHistory } from '../../../definition/IIntegrationHistory';\nimport { LivechatDepartmentAgentsRaw } from '../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { ILivechatDepartmentAgents } from '../../../definition/ILivechatDepartmentAgents';\nimport { IIntegration } from '../../../definition/IIntegration';\nimport { IntegrationsRaw } from '../../../app/models/server/raw/Integrations';\nimport { EventSignatures } from '../../sdk/lib/Events';\nimport { IEmailInbox } from '../../../definition/IEmailInbox';\nimport { EmailInboxRaw } from '../../../app/models/server/raw/EmailInbox';\nimport { isPresenceMonitorEnabled } from '../../lib/isPresenceMonitorEnabled';\n\ninterface IModelsParam {\n\tSubscriptions: SubscriptionsRaw;\n\tPermissions: PermissionsRaw;\n\tUsers: UsersRaw;\n\tSettings: SettingsRaw;\n\tMessages: MessagesRaw;\n\tLivechatInquiry: LivechatInquiryRaw;\n\tLivechatDepartmentAgents: LivechatDepartmentAgentsRaw;\n\tUsersSessions: UsersSessionsRaw;\n\tRoles: RolesRaw;\n\tRooms: RoomsRaw;\n\tLoginServiceConfiguration: LoginServiceConfigurationRaw;\n\tInstanceStatus: InstanceStatusRaw;\n\tIntegrationHistory: IntegrationHistoryRaw;\n\tIntegrations: IntegrationsRaw;\n\tEmailInbox: EmailInboxRaw;\n}\n\ninterface IChange<T> {\n\taction: 'insert' | 'update' | 'remove';\n\tclientAction: 'inserted' | 'updated' | 'removed';\n\tid: string;\n\tdata?: T;\n\tdiff?: Record<string, any>;\n\tunset?: Record<string, number>;\n}\n\ntype Watcher = <T extends IBaseData>(model: IBaseRaw<T>, fn: (event: IChange<T>) => void) => void;\n\ntype BroadcastCallback = <T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>) => Promise<void>;\n\nconst hasKeys =\n\t(requiredKeys: string[]): ((data?: Record<string, any>) => boolean) =>\n\t(data?: Record<string, any>): boolean => {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.keys(data)\n\t\t\t.filter((key) => key !== '_id')\n\t\t\t.map((key) => key.split('.')[0])\n\t\t\t.some((key) => requiredKeys.includes(key));\n\t};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nexport function initWatchers(models: IModelsParam, broadcast: BroadcastCallback, watch: Watcher): void {\n\tconst {\n\t\tMessages,\n\t\tUsers,\n\t\tSettings,\n\t\tSubscriptions,\n\t\tUsersSessions,\n\t\tRoles,\n\t\tPermissions,\n\t\tLivechatInquiry,\n\t\tLivechatDepartmentAgents,\n\t\tRooms,\n\t\tLoginServiceConfiguration,\n\t\tInstanceStatus,\n\t\tIntegrationHistory,\n\t\tIntegrations,\n\t\tEmailInbox,\n\t} = models;\n\n\tconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\n\tconst getUserNameCached = mem(\n\t\tasync (userId: string): Promise<string | undefined> => {\n\t\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\t\treturn user?.name;\n\t\t},\n\t\t{ maxAge: 10000 },\n\t);\n\n\twatch<IMessage>(Messages, async ({ clientAction, id, data }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tconst message: IMessage | undefined = data ?? (await Messages.findOne({ _id: id }));\n\t\t\t\tif (!message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (message._hidden !== true && message.imported == null) {\n\t\t\t\t\tconst UseRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\n\t\t\t\t\tif (UseRealName) {\n\t\t\t\t\t\tif (message.u?._id) {\n\t\t\t\t\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\tmessage.u.name = name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (message.mentions?.length) {\n\t\t\t\t\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\t\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\tmention.name = name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbroadcast('watch.messages', { clientAction, message });\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\twatch<ISubscription>(Subscriptions, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated': {\n\t\t\t\tif (!hasSubscriptionFields(data || diff)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Override data cuz we do not publish all fields\n\t\t\t\tconst subscription = await Subscriptions.findOneById<Pick<ISubscription, keyof typeof subscriptionFields>>(id, {\n\t\t\t\t\tprojection: subscriptionFields,\n\t\t\t\t});\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tconst trash = await Subscriptions.trashFindOneById<Pick<ISubscription, 'u' | 'rid'>>(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1 },\n\t\t\t\t});\n\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tbroadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatch<IRole>(Roles, async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tconst role = clientAction === 'removed' ? { _id: id, name: id } : data || (await Roles.findOneById(id));\n\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.roles', {\n\t\t\tclientAction: clientAction !== 'removed' ? ('changed' as const) : clientAction,\n\t\t\trole,\n\t\t});\n\t});\n\n\tif (isPresenceMonitorEnabled()) {\n\t\twatch<IUserSession>(UsersSessions, async ({ clientAction, id, data: eventData }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\tcase 'updated':\n\t\t\t\t\tconst data = eventData ?? (await UsersSessions.findOneById(id));\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbroadcast('watch.userSessions', { clientAction, userSession: data });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tbroadcast('watch.userSessions', { clientAction, userSession: { _id: id } });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\twatch<ILivechatInquiryRecord>(LivechatInquiry, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tdata = data ?? (await LivechatInquiry.findOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = (await LivechatInquiry.trashFindOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.inquiries', { clientAction, inquiry: data, diff });\n\t});\n\n\twatch<ILivechatDepartmentAgents>(LivechatDepartmentAgents, async ({ clientAction, id, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tconst data = await LivechatDepartmentAgents.trashFindOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t\t});\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbroadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LivechatDepartmentAgents.findOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tbroadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t});\n\n\twatch<IPermission>(Permissions, async ({ clientAction, id, data: eventData, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\t\tlet data;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted':\n\t\t\t\tdata = eventData ?? (await Permissions.findOneById(id));\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = { _id: id, roles: [] };\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('permission.changed', { clientAction, data });\n\n\t\tif (data.level === 'settings' && data.settingId) {\n\t\t\t// if the permission changes, the effect on the visible settings depends on the role affected.\n\t\t\t// The selected-settings-based consumers have to react accordingly and either add or remove the\n\t\t\t// setting from the user's collection\n\t\t\tconst setting = await Settings.findOneNotHiddenById(data.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbroadcast('watch.settings', { clientAction: 'updated', setting });\n\t\t}\n\t});\n\n\twatch<ISetting>(Settings, async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tlet setting;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted': {\n\t\t\t\tsetting = data ?? (await Settings.findOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tsetting = data ?? (await Settings.trashFindOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!setting) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.settings', { clientAction, setting });\n\t});\n\n\twatch<IRoom>(Rooms, async ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.rooms', { clientAction, room: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tif (!hasRoomFields(data || diff)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.rooms', { clientAction, room });\n\t});\n\n\t// TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n\t// and most of those messages are not loaded by the clients.\n\twatch<IUser>(Users, ({ clientAction, id, data, diff, unset }) => {\n\t\tbroadcast('watch.users', { clientAction, data, diff, unset, id });\n\t});\n\n\twatch<ILoginServiceConfiguration>(LoginServiceConfiguration, async ({ clientAction, id }) => {\n\t\tconst data = await LoginServiceConfiguration.findOne<Omit<ILoginServiceConfiguration, 'secret'>>(id, { projection: { secret: 0 } });\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.loginServiceConfiguration', { clientAction, data, id });\n\t});\n\n\twatch<IInstanceStatus>(InstanceStatus, ({ clientAction, id, data, diff }) => {\n\t\tbroadcast('watch.instanceStatus', { clientAction, data, diff, id });\n\t});\n\n\twatch<IIntegrationHistory>(IntegrationHistory, async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated': {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (!history || !history.integration) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.integrationHistory', { clientAction, data: history, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inserted': {\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbroadcast('watch.integrationHistory', { clientAction, data, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatch<IIntegration>(Integrations, async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.integrations', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await Integrations.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.integrations', { clientAction, data, id });\n\t});\n\n\twatch<IEmailInbox>(EmailInbox, async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tbroadcast('watch.emailInbox', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await EmailInbox.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tbroadcast('watch.emailInbox', { clientAction, data, id });\n\t});\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"93f2e53b47418b5d42ed63362dfa17c2fcfaf9b3"}
