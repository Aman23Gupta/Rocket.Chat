{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/methods/samlLogout.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/methods/samlLogout.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/methods/samlLogout.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/methods/samlLogout.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/methods/samlLogout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAGzC;;GAEG;AACH,SAAS,6BAA6B,CAAC,QAAgB;IACtD,IAAI,CAAC,QAAQ,EAAE;QACd,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,EAAE;YACjE,MAAM,EAAE,+BAA+B;SACvC,CAAC,CAAC;KACH;IAED,MAAM,SAAS,GAAG,SAAS,CAAC,gBAAgB,CAAC;IAE7C,MAAM,YAAY,GAAG,UAAU,OAAgC;QAC9D,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,CAAC,OAAO,CAAC;IACd,UAAU,CAAC,QAAgB;QAC1B,iEAAiE;QACjE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE;YACrB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;SACvF;QACD,MAAM,cAAc,GAAG,6BAA6B,CAAC,QAAQ,CAAC,CAAC;QAE/D,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,gBAAgB,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,0DAA0D;QAC1D,MAAM,IAAI,GAAG,KAAK,CAAC,0BAA0B,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACnD,OAAO;SACP;QAED,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,mBAAmB,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAE3E,MAAM,KAAK,GAAG,IAAI,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAEtD,MAAM,OAAO,GAAG,KAAK,CAAC,qBAAqB,CAAC;YAC3C,MAAM,EAAE,MAAM,IAAI,UAAU;YAC5B,YAAY,EAAE,UAAU;SACxB,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACxC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEvB,2CAA2C;QAC3C,+FAA+F;QAE/F,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAEvD,MAAM,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACjE,SAAS,CAAC,GAAG,CAAC,uBAAuB,MAAM,EAAE,CAAC,CAAC;QAE/C,OAAO,MAAM,CAAC;IACf,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { Users } from '../../../models/server';\nimport { SAMLServiceProvider } from '../lib/ServiceProvider';\nimport { SAMLUtils } from '../lib/Utils';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\n\n/**\n * Fetch SAML provider configs for given 'provider'.\n */\nfunction getSamlServiceProviderOptions(provider: string): IServiceProviderOptions {\n\tif (!provider) {\n\t\tthrow new Meteor.Error('no-saml-provider', 'SAML internal error', {\n\t\t\tmethod: 'getSamlServiceProviderOptions',\n\t\t});\n\t}\n\n\tconst providers = SAMLUtils.serviceProviders;\n\n\tconst samlProvider = function (element: IServiceProviderOptions): boolean {\n\t\treturn element.provider === provider;\n\t};\n\n\treturn providers.filter(samlProvider)[0];\n}\n\nMeteor.methods({\n\tsamlLogout(provider: string) {\n\t\t// Make sure the user is logged in before we initiate SAML Logout\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'samlLogout' });\n\t\t}\n\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\n\t\tSAMLUtils.log({ msg: 'Logout request', providerConfig });\n\t\t// This query should respect upcoming array of SAML logins\n\t\tconst user = Users.getSAMLByIdAndSAMLProvider(Meteor.userId(), provider);\n\t\tif (!user || !user.services || !user.services.saml) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { nameID, idpSession } = user.services.saml;\n\t\tSAMLUtils.log({ msg: `NameID for user ${Meteor.userId()} found`, nameID });\n\n\t\tconst _saml = new SAMLServiceProvider(providerConfig);\n\n\t\tconst request = _saml.generateLogoutRequest({\n\t\t\tnameID: nameID || idpSession,\n\t\t\tsessionIndex: idpSession,\n\t\t});\n\n\t\tSAMLUtils.log('----Logout Request----');\n\t\tSAMLUtils.log(request);\n\n\t\t// request.request: actual XML SAML Request\n\t\t// request.id: comminucation id which will be mentioned in the ResponseTo field of SAMLResponse\n\n\t\tUsers.setSamlInResponseTo(Meteor.userId(), request.id);\n\n\t\tconst result = _saml.syncRequestToUrl(request.request, 'logout');\n\t\tSAMLUtils.log(`SAML Logout Request ${result}`);\n\n\t\treturn result;\n\t},\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/methods/samlLogout.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/methods/samlLogout.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\nlet SAMLServiceProvider;\nmodule.link(\"../lib/ServiceProvider\", {\n  SAMLServiceProvider(v) {\n    SAMLServiceProvider = v;\n  }\n\n}, 2);\nlet SAMLUtils;\nmodule.link(\"../lib/Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 3);\n\n/**\n * Fetch SAML provider configs for given 'provider'.\n */\nfunction getSamlServiceProviderOptions(provider) {\n  if (!provider) {\n    throw new Meteor.Error('no-saml-provider', 'SAML internal error', {\n      method: 'getSamlServiceProviderOptions'\n    });\n  }\n\n  const providers = SAMLUtils.serviceProviders;\n\n  const samlProvider = function (element) {\n    return element.provider === provider;\n  };\n\n  return providers.filter(samlProvider)[0];\n}\n\nMeteor.methods({\n  samlLogout(provider) {\n    // Make sure the user is logged in before we initiate SAML Logout\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'samlLogout'\n      });\n    }\n\n    const providerConfig = getSamlServiceProviderOptions(provider);\n    SAMLUtils.log({\n      msg: 'Logout request',\n      providerConfig\n    }); // This query should respect upcoming array of SAML logins\n\n    const user = Users.getSAMLByIdAndSAMLProvider(Meteor.userId(), provider);\n\n    if (!user || !user.services || !user.services.saml) {\n      return;\n    }\n\n    const {\n      nameID,\n      idpSession\n    } = user.services.saml;\n    SAMLUtils.log({\n      msg: \"NameID for user \".concat(Meteor.userId(), \" found\"),\n      nameID\n    });\n\n    const _saml = new SAMLServiceProvider(providerConfig);\n\n    const request = _saml.generateLogoutRequest({\n      nameID: nameID || idpSession,\n      sessionIndex: idpSession\n    });\n\n    SAMLUtils.log('----Logout Request----');\n    SAMLUtils.log(request); // request.request: actual XML SAML Request\n    // request.id: comminucation id which will be mentioned in the ResponseTo field of SAMLResponse\n\n    Users.setSamlInResponseTo(Meteor.userId(), request.id);\n\n    const result = _saml.syncRequestToUrl(request.request, 'logout');\n\n    SAMLUtils.log(\"SAML Logout Request \".concat(result));\n    return result;\n  }\n\n});","map":{"version":3,"sources":["app/meteor-accounts-saml/server/methods/samlLogout.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { Users } from '../../../models/server';\nimport { SAMLServiceProvider } from '../lib/ServiceProvider';\nimport { SAMLUtils } from '../lib/Utils';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\n\n/**\n * Fetch SAML provider configs for given 'provider'.\n */\nfunction getSamlServiceProviderOptions(provider: string): IServiceProviderOptions {\n\tif (!provider) {\n\t\tthrow new Meteor.Error('no-saml-provider', 'SAML internal error', {\n\t\t\tmethod: 'getSamlServiceProviderOptions',\n\t\t});\n\t}\n\n\tconst providers = SAMLUtils.serviceProviders;\n\n\tconst samlProvider = function (element: IServiceProviderOptions): boolean {\n\t\treturn element.provider === provider;\n\t};\n\n\treturn providers.filter(samlProvider)[0];\n}\n\nMeteor.methods({\n\tsamlLogout(provider: string) {\n\t\t// Make sure the user is logged in before we initiate SAML Logout\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'samlLogout' });\n\t\t}\n\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\n\t\tSAMLUtils.log({ msg: 'Logout request', providerConfig });\n\t\t// This query should respect upcoming array of SAML logins\n\t\tconst user = Users.getSAMLByIdAndSAMLProvider(Meteor.userId(), provider);\n\t\tif (!user || !user.services || !user.services.saml) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { nameID, idpSession } = user.services.saml;\n\t\tSAMLUtils.log({ msg: `NameID for user ${Meteor.userId()} found`, nameID });\n\n\t\tconst _saml = new SAMLServiceProvider(providerConfig);\n\n\t\tconst request = _saml.generateLogoutRequest({\n\t\t\tnameID: nameID || idpSession,\n\t\t\tsessionIndex: idpSession,\n\t\t});\n\n\t\tSAMLUtils.log('----Logout Request----');\n\t\tSAMLUtils.log(request);\n\n\t\t// request.request: actual XML SAML Request\n\t\t// request.id: comminucation id which will be mentioned in the ResponseTo field of SAMLResponse\n\n\t\tUsers.setSamlInResponseTo(Meteor.userId(), request.id);\n\n\t\tconst result = _saml.syncRequestToUrl(request.request, 'logout');\n\t\tSAMLUtils.log(`SAML Logout Request ${result}`);\n\n\t\treturn result;\n\t},\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"da76e5367a7e2ba3d5d10e9465f95d3253f19d66"}
