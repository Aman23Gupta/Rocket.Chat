{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/channelExport.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/channelExport.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/channelExport.ts","inputSourceMap":{"version":3,"file":"server/lib/channelExport.ts","sourceRoot":"","sources":["server/lib/channelExport.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport moment from 'moment';\nimport { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport mkdirp from 'mkdirp';\n\nimport * as Mailer from '../../app/mailer';\nimport { Messages, Users } from '../../app/models/server';\nimport { settings } from '../../app/settings/server';\nimport { Message } from '../../app/ui-utils/server';\nimport {\n\texportRoomMessagesToFile,\n\tcopyFile,\n\tgetRoomData,\n\tmakeZipFile,\n\tsendEmail,\n\tuploadZipFile,\n} from '../../app/user-data-download/server/cronProcessDownloads';\nimport { IUser } from '../../definition/IUser';\nimport { getMomentLocale } from './getMomentLocale';\nimport { getURL } from '../../app/utils/lib/getURL';\nimport { DataExport } from '../../app/user-data-download/server/DataExport';\n\ntype ExportEmail = {\n\trid: string;\n\ttoUsers: string[];\n\ttoEmails: string[];\n\tsubject: string;\n\tmessages: string[];\n\tlanguage: string;\n};\n\ntype ExportFile = {\n\trid: string;\n\tdateFrom: Date;\n\tdateTo: Date;\n\tformat: 'html' | 'json';\n};\n\ntype ExportInput =\n\t| {\n\t\t\ttype: 'email';\n\t\t\tdata: ExportEmail;\n\t  }\n\t| {\n\t\t\ttype: 'file';\n\t\t\tdata: ExportFile;\n\t  };\n\ntype ISentViaEmail = {\n\tmissing: string[];\n};\n\nexport const sendViaEmail = (data: ExportEmail, user: IUser): ISentViaEmail => {\n\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\n\tconst missing = [...data.toUsers].filter(Boolean);\n\n\tUsers.findUsersByUsernames(data.toUsers, {\n\t\tfields: { 'username': 1, 'emails.address': 1 },\n\t}).forEach((user: IUser) => {\n\t\tconst emailAddress = user.emails?.[0].address;\n\n\t\tif (!emailAddress) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!Mailer.checkAddressFormat(emailAddress)) {\n\t\t\tthrow new Error('error-invalid-email');\n\t\t}\n\n\t\tconst found = missing.indexOf(String(user.username));\n\t\tif (found !== -1) {\n\t\t\tmissing.splice(found, 1);\n\t\t}\n\n\t\temails.push(emailAddress);\n\t});\n\n\tconst email = user.emails?.[0]?.address;\n\tconst lang = data.language || user.language || 'en';\n\n\tconst localMoment = moment();\n\n\tif (lang !== 'en') {\n\t\tconst localeFn = getMomentLocale(lang);\n\t\tif (localeFn) {\n\t\t\tFunction(localeFn).call({ moment });\n\t\t\tlocalMoment.locale(lang);\n\t\t}\n\t}\n\n\tconst html = Messages.findByRoomIdAndMessageIds(data.rid, data.messages, {\n\t\tsort: { ts: 1 },\n\t})\n\t\t.fetch()\n\t\t.map(function (message: any) {\n\t\t\tconst dateTime = moment(message.ts).locale(lang).format('L LT');\n\t\t\treturn `<p style='margin-bottom: 5px'><b>${\n\t\t\t\tmessage.u.username\n\t\t\t}</b> <span style='color: #aaa; font-size: 12px'>${dateTime}</span><br/>${Message.parse(message, data.language)}</p>`;\n\t\t})\n\t\t.join('');\n\n\tMailer.send({\n\t\tto: emails,\n\t\tfrom: settings.get('From_Email'),\n\t\treplyTo: email,\n\t\tsubject: data.subject,\n\t\thtml,\n\t} as any);\n\n\treturn { missing };\n};\n\nexport const sendFile = async (data: ExportFile, user: IUser): Promise<void> => {\n\tconst exportType = data.format;\n\n\tconst baseDir = `/tmp/exportFile-${Random.id()}`;\n\n\tconst exportPath = baseDir;\n\tconst assetsPath = path.join(baseDir, 'assets');\n\n\tmkdirp.sync(exportPath);\n\tmkdirp.sync(assetsPath);\n\n\tconst roomData = getRoomData(data.rid);\n\n\troomData.targetFile = `${(data.format === 'json' && roomData.roomName) || roomData.roomId}.${data.format}`;\n\n\tconst fullFileList: any[] = [];\n\n\tconst roomsToExport = [roomData];\n\n\tconst filter =\n\t\t!data.dateFrom && !data.dateTo\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tts: {\n\t\t\t\t\t\t...(data.dateFrom && { $gte: data.dateFrom }),\n\t\t\t\t\t\t...(data.dateTo && { $lte: data.dateTo }),\n\t\t\t\t\t},\n\t\t\t  };\n\n\tconst exportMessages = async (): Promise<void> => {\n\t\tconst { fileList } = await exportRoomMessagesToFile(exportPath, assetsPath, exportType, roomsToExport, user, filter, {}, false);\n\n\t\tfullFileList.push(...fileList);\n\n\t\tconst [roomData] = roomsToExport;\n\n\t\tif (roomData.status !== 'completed') {\n\t\t\tawait exportMessages();\n\t\t}\n\t};\n\n\tawait exportMessages();\n\n\tfor await (const attachmentData of fullFileList) {\n\t\tawait copyFile(attachmentData, assetsPath);\n\t}\n\n\tconst exportFile = `${baseDir}-export.zip`;\n\tawait makeZipFile(exportPath, exportFile);\n\n\tconst file = await uploadZipFile(exportFile, user._id, exportType);\n\n\tconst subject = TAPi18n.__('Channel_Export');\n\n\tconst body = TAPi18n.__('UserDataDownload_EmailBody', {\n\t\t// eslint-disable-next-line @typescript-eslint/camelcase\n\t\tdownload_link: getURL(DataExport.getPath(file._id), { cdn: false, full: true }),\n\t});\n\n\tsendEmail(user, subject, body);\n};\n\nexport async function channelExport(data: ExportInput, user: IUser): Promise<ISentViaEmail | void> {\n\tif (data.type === 'email') {\n\t\treturn sendViaEmail(data.data, user);\n\t}\n\n\treturn sendFile(data.data, user);\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/channelExport.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/channelExport.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 1);\nmodule.export({\n  sendViaEmail: () => sendViaEmail,\n  sendFile: () => sendFile,\n  channelExport: () => channelExport\n});\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet mkdirp;\nmodule.link(\"mkdirp\", {\n  default(v) {\n    mkdirp = v;\n  }\n\n}, 4);\nlet Mailer;\nmodule.link(\"../../app/mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 5);\nlet Messages, Users;\nmodule.link(\"../../app/models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\nlet Message;\nmodule.link(\"../../app/ui-utils/server\", {\n  Message(v) {\n    Message = v;\n  }\n\n}, 8);\nlet exportRoomMessagesToFile, copyFile, getRoomData, makeZipFile, sendEmail, uploadZipFile;\nmodule.link(\"../../app/user-data-download/server/cronProcessDownloads\", {\n  exportRoomMessagesToFile(v) {\n    exportRoomMessagesToFile = v;\n  },\n\n  copyFile(v) {\n    copyFile = v;\n  },\n\n  getRoomData(v) {\n    getRoomData = v;\n  },\n\n  makeZipFile(v) {\n    makeZipFile = v;\n  },\n\n  sendEmail(v) {\n    sendEmail = v;\n  },\n\n  uploadZipFile(v) {\n    uploadZipFile = v;\n  }\n\n}, 9);\nlet getMomentLocale;\nmodule.link(\"./getMomentLocale\", {\n  getMomentLocale(v) {\n    getMomentLocale = v;\n  }\n\n}, 10);\nlet getURL;\nmodule.link(\"../../app/utils/lib/getURL\", {\n  getURL(v) {\n    getURL = v;\n  }\n\n}, 11);\nlet DataExport;\nmodule.link(\"../../app/user-data-download/server/DataExport\", {\n  DataExport(v) {\n    DataExport = v;\n  }\n\n}, 12);\n\nconst sendViaEmail = (data, user) => {\n  var _user$emails2, _user$emails2$;\n\n  const emails = data.toEmails.map(email => email.trim()).filter(Boolean);\n  const missing = [...data.toUsers].filter(Boolean);\n  Users.findUsersByUsernames(data.toUsers, {\n    fields: {\n      'username': 1,\n      'emails.address': 1\n    }\n  }).forEach(user => {\n    var _user$emails;\n\n    const emailAddress = (_user$emails = user.emails) === null || _user$emails === void 0 ? void 0 : _user$emails[0].address;\n\n    if (!emailAddress) {\n      return;\n    }\n\n    if (!Mailer.checkAddressFormat(emailAddress)) {\n      throw new Error('error-invalid-email');\n    }\n\n    const found = missing.indexOf(String(user.username));\n\n    if (found !== -1) {\n      missing.splice(found, 1);\n    }\n\n    emails.push(emailAddress);\n  });\n  const email = (_user$emails2 = user.emails) === null || _user$emails2 === void 0 ? void 0 : (_user$emails2$ = _user$emails2[0]) === null || _user$emails2$ === void 0 ? void 0 : _user$emails2$.address;\n  const lang = data.language || user.language || 'en';\n  const localMoment = moment();\n\n  if (lang !== 'en') {\n    const localeFn = getMomentLocale(lang);\n\n    if (localeFn) {\n      Function(localeFn).call({\n        moment\n      });\n      localMoment.locale(lang);\n    }\n  }\n\n  const html = Messages.findByRoomIdAndMessageIds(data.rid, data.messages, {\n    sort: {\n      ts: 1\n    }\n  }).fetch().map(function (message) {\n    const dateTime = moment(message.ts).locale(lang).format('L LT');\n    return \"<p style='margin-bottom: 5px'><b>\".concat(message.u.username, \"</b> <span style='color: #aaa; font-size: 12px'>\").concat(dateTime, \"</span><br/>\").concat(Message.parse(message, data.language), \"</p>\");\n  }).join('');\n  Mailer.send({\n    to: emails,\n    from: settings.get('From_Email'),\n    replyTo: email,\n    subject: data.subject,\n    html\n  });\n  return {\n    missing\n  };\n};\n\nconst sendFile = (data, user) => Promise.asyncApply(() => {\n  const exportType = data.format;\n  const baseDir = \"/tmp/exportFile-\".concat(Random.id());\n  const exportPath = baseDir;\n  const assetsPath = path.join(baseDir, 'assets');\n  mkdirp.sync(exportPath);\n  mkdirp.sync(assetsPath);\n  const roomData = getRoomData(data.rid);\n  roomData.targetFile = \"\".concat(data.format === 'json' && roomData.roomName || roomData.roomId, \".\").concat(data.format);\n  const fullFileList = [];\n  const roomsToExport = [roomData];\n  const filter = !data.dateFrom && !data.dateTo ? {} : {\n    ts: _objectSpread(_objectSpread({}, data.dateFrom && {\n      $gte: data.dateFrom\n    }), data.dateTo && {\n      $lte: data.dateTo\n    })\n  };\n\n  const exportMessages = () => Promise.asyncApply(() => {\n    const {\n      fileList\n    } = Promise.await(exportRoomMessagesToFile(exportPath, assetsPath, exportType, roomsToExport, user, filter, {}, false));\n    fullFileList.push(...fileList);\n    const [roomData] = roomsToExport;\n\n    if (roomData.status !== 'completed') {\n      Promise.await(exportMessages());\n    }\n  });\n\n  Promise.await(exportMessages());\n  var _iteratorAbruptCompletion = false;\n  var _didIteratorError = false;\n\n  var _iteratorError;\n\n  try {\n    for (var _iterator = _asyncIterator(fullFileList), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n      const attachmentData = _step.value;\n      Promise.await(copyFile(attachmentData, assetsPath));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (_iteratorAbruptCompletion && _iterator.return != null) {\n        Promise.await(_iterator.return());\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  const exportFile = \"\".concat(baseDir, \"-export.zip\");\n  Promise.await(makeZipFile(exportPath, exportFile));\n  const file = Promise.await(uploadZipFile(exportFile, user._id, exportType));\n\n  const subject = TAPi18n.__('Channel_Export');\n\n  const body = TAPi18n.__('UserDataDownload_EmailBody', {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    download_link: getURL(DataExport.getPath(file._id), {\n      cdn: false,\n      full: true\n    })\n  });\n\n  sendEmail(user, subject, body);\n});\n\nfunction channelExport(data, user) {\n  return Promise.asyncApply(() => {\n    if (data.type === 'email') {\n      return sendViaEmail(data.data, user);\n    }\n\n    return sendFile(data.data, user);\n  });\n}","map":{"version":3,"sources":["server/lib/channelExport.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport moment from 'moment';\nimport { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport mkdirp from 'mkdirp';\n\nimport * as Mailer from '../../app/mailer';\nimport { Messages, Users } from '../../app/models/server';\nimport { settings } from '../../app/settings/server';\nimport { Message } from '../../app/ui-utils/server';\nimport {\n\texportRoomMessagesToFile,\n\tcopyFile,\n\tgetRoomData,\n\tmakeZipFile,\n\tsendEmail,\n\tuploadZipFile,\n} from '../../app/user-data-download/server/cronProcessDownloads';\nimport { IUser } from '../../definition/IUser';\nimport { getMomentLocale } from './getMomentLocale';\nimport { getURL } from '../../app/utils/lib/getURL';\nimport { DataExport } from '../../app/user-data-download/server/DataExport';\n\ntype ExportEmail = {\n\trid: string;\n\ttoUsers: string[];\n\ttoEmails: string[];\n\tsubject: string;\n\tmessages: string[];\n\tlanguage: string;\n};\n\ntype ExportFile = {\n\trid: string;\n\tdateFrom: Date;\n\tdateTo: Date;\n\tformat: 'html' | 'json';\n};\n\ntype ExportInput =\n\t| {\n\t\t\ttype: 'email';\n\t\t\tdata: ExportEmail;\n\t  }\n\t| {\n\t\t\ttype: 'file';\n\t\t\tdata: ExportFile;\n\t  };\n\ntype ISentViaEmail = {\n\tmissing: string[];\n};\n\nexport const sendViaEmail = (data: ExportEmail, user: IUser): ISentViaEmail => {\n\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\n\tconst missing = [...data.toUsers].filter(Boolean);\n\n\tUsers.findUsersByUsernames(data.toUsers, {\n\t\tfields: { 'username': 1, 'emails.address': 1 },\n\t}).forEach((user: IUser) => {\n\t\tconst emailAddress = user.emails?.[0].address;\n\n\t\tif (!emailAddress) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!Mailer.checkAddressFormat(emailAddress)) {\n\t\t\tthrow new Error('error-invalid-email');\n\t\t}\n\n\t\tconst found = missing.indexOf(String(user.username));\n\t\tif (found !== -1) {\n\t\t\tmissing.splice(found, 1);\n\t\t}\n\n\t\temails.push(emailAddress);\n\t});\n\n\tconst email = user.emails?.[0]?.address;\n\tconst lang = data.language || user.language || 'en';\n\n\tconst localMoment = moment();\n\n\tif (lang !== 'en') {\n\t\tconst localeFn = getMomentLocale(lang);\n\t\tif (localeFn) {\n\t\t\tFunction(localeFn).call({ moment });\n\t\t\tlocalMoment.locale(lang);\n\t\t}\n\t}\n\n\tconst html = Messages.findByRoomIdAndMessageIds(data.rid, data.messages, {\n\t\tsort: { ts: 1 },\n\t})\n\t\t.fetch()\n\t\t.map(function (message: any) {\n\t\t\tconst dateTime = moment(message.ts).locale(lang).format('L LT');\n\t\t\treturn `<p style='margin-bottom: 5px'><b>${\n\t\t\t\tmessage.u.username\n\t\t\t}</b> <span style='color: #aaa; font-size: 12px'>${dateTime}</span><br/>${Message.parse(message, data.language)}</p>`;\n\t\t})\n\t\t.join('');\n\n\tMailer.send({\n\t\tto: emails,\n\t\tfrom: settings.get('From_Email'),\n\t\treplyTo: email,\n\t\tsubject: data.subject,\n\t\thtml,\n\t} as any);\n\n\treturn { missing };\n};\n\nexport const sendFile = async (data: ExportFile, user: IUser): Promise<void> => {\n\tconst exportType = data.format;\n\n\tconst baseDir = `/tmp/exportFile-${Random.id()}`;\n\n\tconst exportPath = baseDir;\n\tconst assetsPath = path.join(baseDir, 'assets');\n\n\tmkdirp.sync(exportPath);\n\tmkdirp.sync(assetsPath);\n\n\tconst roomData = getRoomData(data.rid);\n\n\troomData.targetFile = `${(data.format === 'json' && roomData.roomName) || roomData.roomId}.${data.format}`;\n\n\tconst fullFileList: any[] = [];\n\n\tconst roomsToExport = [roomData];\n\n\tconst filter =\n\t\t!data.dateFrom && !data.dateTo\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tts: {\n\t\t\t\t\t\t...(data.dateFrom && { $gte: data.dateFrom }),\n\t\t\t\t\t\t...(data.dateTo && { $lte: data.dateTo }),\n\t\t\t\t\t},\n\t\t\t  };\n\n\tconst exportMessages = async (): Promise<void> => {\n\t\tconst { fileList } = await exportRoomMessagesToFile(exportPath, assetsPath, exportType, roomsToExport, user, filter, {}, false);\n\n\t\tfullFileList.push(...fileList);\n\n\t\tconst [roomData] = roomsToExport;\n\n\t\tif (roomData.status !== 'completed') {\n\t\t\tawait exportMessages();\n\t\t}\n\t};\n\n\tawait exportMessages();\n\n\tfor await (const attachmentData of fullFileList) {\n\t\tawait copyFile(attachmentData, assetsPath);\n\t}\n\n\tconst exportFile = `${baseDir}-export.zip`;\n\tawait makeZipFile(exportPath, exportFile);\n\n\tconst file = await uploadZipFile(exportFile, user._id, exportType);\n\n\tconst subject = TAPi18n.__('Channel_Export');\n\n\tconst body = TAPi18n.__('UserDataDownload_EmailBody', {\n\t\t// eslint-disable-next-line @typescript-eslint/camelcase\n\t\tdownload_link: getURL(DataExport.getPath(file._id), { cdn: false, full: true }),\n\t});\n\n\tsendEmail(user, subject, body);\n};\n\nexport async function channelExport(data: ExportInput, user: IUser): Promise<ISentViaEmail | void> {\n\tif (data.type === 'email') {\n\t\treturn sendViaEmail(data.data, user);\n\t}\n\n\treturn sendFile(data.data, user);\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"0114edb0dec344a6c87c6e6f45dce589be8b893e"}
