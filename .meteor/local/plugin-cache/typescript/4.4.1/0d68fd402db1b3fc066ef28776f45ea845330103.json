{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatInquiry.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/LivechatInquiry.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatInquiry.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/LivechatInquiry.ts","sourceRoot":"","sources":["app/models/server/raw/LivechatInquiry.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAA0B,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;AAEhG,MAAM,OAAO,kBAAmB,SAAQ,OAA+B;IACtE,qBAAqB,CAAC,GAAW;QAChC,MAAM,KAAK,GAAG;YACb,GAAG;YACH,MAAM,EAAE,qBAAqB,CAAC,MAAM;SACpC,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAmG,CAAC;IAC9H,CAAC;IAED,eAAe,CACd,GAAW,EACX,OAAsF;QAEtF,MAAM,KAAK,GAAG;YACb,GAAG;SACH,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,4BAA4B,CAAC,OAAiC;QAC7D,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,qBAAqB,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;IAC3F,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,SAAiB,EAAE,UAAkB;QACnE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;QACvH,OAAO,OAAO,CAAC,KAAK,CAAC;IACtB,CAAC;CACD","sourcesContent":["import { FindOneOptions, MongoDistinctPreferences } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ILivechatInquiryRecord, LivechatInquiryStatus } from '../../../../definition/IInquiry';\n\nexport class LivechatInquiryRaw extends BaseRaw<ILivechatInquiryRecord> {\n\tfindOneQueuedByRoomId(rid: string): Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t};\n\t\treturn this.findOne(query) as unknown as Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null>;\n\t}\n\n\tfindOneByRoomId<T = ILivechatInquiryRecord>(\n\t\trid: string,\n\t\toptions: FindOneOptions<T extends ILivechatInquiryRecord ? ILivechatInquiryRecord : T>,\n\t): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetDistinctQueuedDepartments(options: MongoDistinctPreferences): Promise<string[]> {\n\t\treturn this.col.distinct('department', { status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync setDepartmentByInquiryId(inquiryId: string, department: string): Promise<ILivechatInquiryRecord | undefined> {\n\t\tconst updated = await this.findOneAndUpdate({ _id: inquiryId }, { $set: { department } }, { returnDocument: 'after' });\n\t\treturn updated.value;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatInquiry.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/LivechatInquiry.ts"}},"code":"module.export({\n  LivechatInquiryRaw: () => LivechatInquiryRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\nlet LivechatInquiryStatus;\nmodule.link(\"../../../../definition/IInquiry\", {\n  LivechatInquiryStatus(v) {\n    LivechatInquiryStatus = v;\n  }\n\n}, 1);\n\nclass LivechatInquiryRaw extends BaseRaw {\n  findOneQueuedByRoomId(rid) {\n    const query = {\n      rid,\n      status: LivechatInquiryStatus.QUEUED\n    };\n    return this.findOne(query);\n  }\n\n  findOneByRoomId(rid, options) {\n    const query = {\n      rid\n    };\n    return this.findOne(query, options);\n  }\n\n  getDistinctQueuedDepartments(options) {\n    return this.col.distinct('department', {\n      status: LivechatInquiryStatus.QUEUED\n    }, options);\n  }\n\n  setDepartmentByInquiryId(inquiryId, department) {\n    return Promise.asyncApply(() => {\n      const updated = Promise.await(this.findOneAndUpdate({\n        _id: inquiryId\n      }, {\n        $set: {\n          department\n        }\n      }, {\n        returnDocument: 'after'\n      }));\n      return updated.value;\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/LivechatInquiry.ts"],"names":[],"mappings":"AAEA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,kBAAe,EAAA,MAAY;AAA3B,CAAT;AAAoC,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,qBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,qBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,qBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAG9B,MAAO,kBAAP,SAAkC,OAAlC,CAAiE;AACtE,EAAA,qBAAqB,CAAC,GAAD,EAAY;AAChC,UAAM,KAAK,GAAG;AACb,MAAA,GADa;AAEb,MAAA,MAAM,EAAE,qBAAqB,CAAC;AAFjB,KAAd;AAIA,WAAO,KAAK,OAAL,CAAa,KAAb,CAAP;AACA;;AAED,EAAA,eAAe,CACd,GADc,EAEd,OAFc,EAEwE;AAEtF,UAAM,KAAK,GAAG;AACb,MAAA;AADa,KAAd;AAGA,WAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,OAApB,CAAP;AACA;;AAED,EAAA,4BAA4B,CAAC,OAAD,EAAkC;AAC7D,WAAO,KAAK,GAAL,CAAS,QAAT,CAAkB,YAAlB,EAAgC;AAAE,MAAA,MAAM,EAAE,qBAAqB,CAAC;AAAhC,KAAhC,EAA0E,OAA1E,CAAP;AACA;;AAEK,EAAA,wBAAwB,CAAC,SAAD,EAAoB,UAApB;AAAA,oCAAsC;AACnE,YAAM,OAAO,iBAAS,KAAK,gBAAL,CAAsB;AAAE,QAAA,GAAG,EAAE;AAAP,OAAtB,EAA0C;AAAE,QAAA,IAAI,EAAE;AAAE,UAAA;AAAF;AAAR,OAA1C,EAAoE;AAAE,QAAA,cAAc,EAAE;AAAlB,OAApE,CAAT,CAAb;AACA,aAAO,OAAO,CAAC,KAAf;AACA,KAH6B;AAAA;;AAvBwC","sourcesContent":["import { FindOneOptions, MongoDistinctPreferences } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ILivechatInquiryRecord, LivechatInquiryStatus } from '../../../../definition/IInquiry';\n\nexport class LivechatInquiryRaw extends BaseRaw<ILivechatInquiryRecord> {\n\tfindOneQueuedByRoomId(rid: string): Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t};\n\t\treturn this.findOne(query) as unknown as Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null>;\n\t}\n\n\tfindOneByRoomId<T = ILivechatInquiryRecord>(\n\t\trid: string,\n\t\toptions: FindOneOptions<T extends ILivechatInquiryRecord ? ILivechatInquiryRecord : T>,\n\t): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetDistinctQueuedDepartments(options: MongoDistinctPreferences): Promise<string[]> {\n\t\treturn this.col.distinct('department', { status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync setDepartmentByInquiryId(inquiryId: string, department: string): Promise<ILivechatInquiryRecord | undefined> {\n\t\tconst updated = await this.findOneAndUpdate({ _id: inquiryId }, { $set: { department } }, { returnDocument: 'after' });\n\t\treturn updated.value;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"0d68fd402db1b3fc066ef28776f45ea845330103"}
