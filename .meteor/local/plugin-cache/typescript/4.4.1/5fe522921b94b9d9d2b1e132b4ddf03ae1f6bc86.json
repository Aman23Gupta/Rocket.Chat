{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/CustomUserStatus.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/CustomUserStatus.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/CustomUserStatus.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/CustomUserStatus.ts","sourceRoot":"","sources":["app/models/server/raw/CustomUserStatus.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAsB,MAAM,WAAW,CAAC;AAGxD,MAAM,OAAO,mBAAoB,SAAQ,OAAU;IACxC,OAAO,GAAyB,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEjE,mBAAmB;IACnB,KAAK,CAAC,aAAa,CAAC,IAAY,EAAE,OAA6C;QAC9E,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,OAAO;IACP,UAAU,CAAC,IAAY,EAAE,OAA6C;QACrE,MAAM,KAAK,GAAG;YACb,IAAI;SACJ,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,kBAAkB,CAAC,IAAY,EAAE,MAAc,EAAE,OAA6C;QAC7F,MAAM,KAAK,GAAG;YACb,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE;YACvB,IAAI;SACJ,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,SAAS;IACT,OAAO,CAAC,GAAW,EAAE,IAAY;QAChC,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,IAAI;aACJ;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,aAAa,CAAC,GAAW,EAAE,UAAkB;QAC5C,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,UAAU;aACV;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,SAAS;IACT,MAAM,CAAC,IAAO;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;CACD","sourcesContent":["import { Cursor, FindOneOptions, InsertOneWriteOpResult, UpdateWriteOpResult, WithId, WithoutProjection } from 'mongodb';\n\nimport { BaseRaw, IndexSpecification } from './BaseRaw';\nimport { ICustomUserStatus as T } from '../../../../definition/ICustomUserStatus';\n\nexport class CustomUserStatusRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { name: 1 } }];\n\n\t// find one by name\n\tasync findOneByName(name: string, options: WithoutProjection<FindOneOptions<T>>): Promise<T | null> {\n\t\treturn this.findOne({ name }, options);\n\t}\n\n\t// find\n\tfindByName(name: string, options: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tname,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameExceptId(name: string, except: string, options: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\t_id: { $nin: [except] },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t// update\n\tsetName(_id: string, name: string): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetStatusType(_id: string, statusType: string): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusType,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\t// INSERT\n\tcreate(data: T): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\treturn this.insertOne(data);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/CustomUserStatus.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/CustomUserStatus.ts"}},"code":"module.export({\n  CustomUserStatusRaw: () => CustomUserStatusRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\n\nclass CustomUserStatusRaw extends BaseRaw {\n  constructor() {\n    super(...arguments);\n    this.indexes = [{\n      key: {\n        name: 1\n      }\n    }];\n  }\n\n  // find one by name\n  findOneByName(name, options) {\n    return Promise.asyncApply(() => {\n      return this.findOne({\n        name\n      }, options);\n    });\n  } // find\n\n\n  findByName(name, options) {\n    const query = {\n      name\n    };\n    return this.find(query, options);\n  }\n\n  findByNameExceptId(name, except, options) {\n    const query = {\n      _id: {\n        $nin: [except]\n      },\n      name\n    };\n    return this.find(query, options);\n  } // update\n\n\n  setName(_id, name) {\n    const update = {\n      $set: {\n        name\n      }\n    };\n    return this.updateOne({\n      _id\n    }, update);\n  }\n\n  setStatusType(_id, statusType) {\n    const update = {\n      $set: {\n        statusType\n      }\n    };\n    return this.updateOne({\n      _id\n    }, update);\n  } // INSERT\n\n\n  create(data) {\n    return this.insertOne(data);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/CustomUserStatus.ts"],"names":[],"mappings":"AAEA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,mBAAmC,EAAW,MAAC;AAA/C,CAAT;AAAwD,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAGlD,MAAO,mBAAP,SAAmC,OAAnC,CAA6C;AAAA;AAAA;AAAA,SACxC,OADwC,GACR,CAAC;AAAE,MAAA,GAAG,EAAE;AAAE,QAAA,IAAI,EAAE;AAAR;AAAP,KAAD,CADQ;AAAA;;AAGlD;AACM,EAAA,aAAa,CAAC,IAAD,EAAe,OAAf;AAAA,oCAA4D;AAC9E,aAAO,KAAK,OAAL,CAAa;AAAE,QAAA;AAAF,OAAb,EAAuB,OAAvB,CAAP;AACA,KAFkB;AAAA,GAJ+B,CAQlD;;;AACA,EAAA,UAAU,CAAC,IAAD,EAAe,OAAf,EAA4D;AACrE,UAAM,KAAK,GAAG;AACb,MAAA;AADa,KAAd;AAIA,WAAO,KAAK,IAAL,CAAU,KAAV,EAAiB,OAAjB,CAAP;AACA;;AAED,EAAA,kBAAkB,CAAC,IAAD,EAAe,MAAf,EAA+B,OAA/B,EAA4E;AAC7F,UAAM,KAAK,GAAG;AACb,MAAA,GAAG,EAAE;AAAE,QAAA,IAAI,EAAE,CAAC,MAAD;AAAR,OADQ;AAEb,MAAA;AAFa,KAAd;AAKA,WAAO,KAAK,IAAL,CAAU,KAAV,EAAiB,OAAjB,CAAP;AACA,GAxBiD,CA0BlD;;;AACA,EAAA,OAAO,CAAC,GAAD,EAAc,IAAd,EAA0B;AAChC,UAAM,MAAM,GAAG;AACd,MAAA,IAAI,EAAE;AACL,QAAA;AADK;AADQ,KAAf;AAMA,WAAO,KAAK,SAAL,CAAe;AAAE,MAAA;AAAF,KAAf,EAAwB,MAAxB,CAAP;AACA;;AAED,EAAA,aAAa,CAAC,GAAD,EAAc,UAAd,EAAgC;AAC5C,UAAM,MAAM,GAAG;AACd,MAAA,IAAI,EAAE;AACL,QAAA;AADK;AADQ,KAAf;AAMA,WAAO,KAAK,SAAL,CAAe;AAAE,MAAA;AAAF,KAAf,EAAwB,MAAxB,CAAP;AACA,GA7CiD,CA+ClD;;;AACA,EAAA,MAAM,CAAC,IAAD,EAAQ;AACb,WAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACA;;AAlDiD","sourcesContent":["import { Cursor, FindOneOptions, InsertOneWriteOpResult, UpdateWriteOpResult, WithId, WithoutProjection } from 'mongodb';\n\nimport { BaseRaw, IndexSpecification } from './BaseRaw';\nimport { ICustomUserStatus as T } from '../../../../definition/ICustomUserStatus';\n\nexport class CustomUserStatusRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { name: 1 } }];\n\n\t// find one by name\n\tasync findOneByName(name: string, options: WithoutProjection<FindOneOptions<T>>): Promise<T | null> {\n\t\treturn this.findOne({ name }, options);\n\t}\n\n\t// find\n\tfindByName(name: string, options: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tname,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameExceptId(name: string, except: string, options: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\t_id: { $nin: [except] },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t// update\n\tsetName(_id: string, name: string): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetStatusType(_id: string, statusType: string): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusType,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\t// INSERT\n\tcreate(data: T): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\treturn this.insertOne(data);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"5fe522921b94b9d9d2b1e132b4ddf03ae1f6bc86"}
