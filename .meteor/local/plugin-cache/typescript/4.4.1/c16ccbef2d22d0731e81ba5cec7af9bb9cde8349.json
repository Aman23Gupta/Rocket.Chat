{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Custom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Custom.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Custom.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractBusinessHourType, IBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../../definition/ILivechatBusinessHour';\nimport { LivechatDepartmentRaw } from '../../../../../app/models/server/raw/LivechatDepartment';\nimport { LivechatDepartmentAgentsRaw } from '../../../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { LivechatDepartment, LivechatDepartmentAgents } from '../../../../../app/models/server/raw';\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\n\ntype IBusinessHoursExtraProperties = {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n};\n\nclass CustomBusinessHour extends AbstractBusinessHourType implements IBusinessHourType {\n\tname = LivechatBusinessHourTypes.CUSTOM;\n\n\tprivate DepartmentsRepository: LivechatDepartmentRaw = LivechatDepartment;\n\n\tprivate DepartmentsAgentsRepository: LivechatDepartmentAgentsRaw = LivechatDepartmentAgents;\n\n\tasync getBusinessHour(id: string): Promise<ILivechatBusinessHour | null> {\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(id);\n\t\tif (!businessHour) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbusinessHour.departments = await this.DepartmentsRepository.findByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { name: 1 },\n\t\t}).toArray();\n\t\treturn businessHour;\n\t}\n\n\tasync saveBusinessHour(businessHour: ILivechatBusinessHour & IBusinessHoursExtraProperties): Promise<ILivechatBusinessHour> {\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },\n\t\t\t{ projection: { _id: 1 } },\n\t\t)) as ILivechatBusinessHour;\n\t\tif (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n\t\t\tthrow new Error('error-business-hour-name-already-in-use');\n\t\t}\n\t\tconst { timezoneName, departmentsToApplyBusinessHour, ...businessHourData } = businessHour;\n\t\tbusinessHourData.timezone = {\n\t\t\tname: timezoneName,\n\t\t\tutc: this.getUTCFromTimezone(timezoneName),\n\t\t};\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tdelete businessHourData.departments;\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\t\tawait this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst toRemove = [...currentDepartments.filter((dept) => !departments.includes(dept))];\n\t\tconst toAdd = [...departments.filter((dept: string) => !currentDepartments.includes(dept))];\n\t\tawait this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n\t\tawait this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n\t\tbusinessHourToReturn._id = businessHourId;\n\t\treturn businessHourToReturn;\n\t}\n\n\tasync removeBusinessHourById(businessHourId: string): Promise<void> {\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.BusinessHourRepository.removeById(businessHourId);\n\t\tawait this.removeBusinessHourFromAgents(businessHourId);\n\t\tawait this.DepartmentsRepository.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n\t\tthis.UsersRepository.updateLivechatStatusBasedOnBusinessHours();\n\t}\n\n\tprivate async removeBusinessHourFromAgents(businessHourId: string): Promise<void> {\n\t\tconst departmentIds = (\n\t\t\tawait this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst agentIds = (\n\t\t\tawait this.DepartmentsAgentsRepository.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tthis.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async removeBusinessHourFromDepartmentsIfNeeded(businessHourId: string, departmentsToRemove: string[]): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.DepartmentsRepository.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n\t}\n\n\tprivate async addBusinessHourToDepartmentsIfNeeded(businessHourId: string, departmentsToAdd: string[]): Promise<void> {\n\t\tif (!departmentsToAdd.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.DepartmentsRepository.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n\t}\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Custom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Custom.ts"}},"code":"const _excluded = [\"timezoneName\", \"departmentsToApplyBusinessHour\"];\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 1);\nlet AbstractBusinessHourType;\nmodule.link(\"../../../../../app/livechat/server/business-hour/AbstractBusinessHour\", {\n  AbstractBusinessHourType(v) {\n    AbstractBusinessHourType = v;\n  }\n\n}, 0);\nlet LivechatBusinessHourTypes;\nmodule.link(\"../../../../../definition/ILivechatBusinessHour\", {\n  LivechatBusinessHourTypes(v) {\n    LivechatBusinessHourTypes = v;\n  }\n\n}, 1);\nlet LivechatDepartment, LivechatDepartmentAgents;\nmodule.link(\"../../../../../app/models/server/raw\", {\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  LivechatDepartmentAgents(v) {\n    LivechatDepartmentAgents = v;\n  }\n\n}, 2);\nlet businessHourManager;\nmodule.link(\"../../../../../app/livechat/server/business-hour\", {\n  businessHourManager(v) {\n    businessHourManager = v;\n  }\n\n}, 3);\n\nclass CustomBusinessHour extends AbstractBusinessHourType {\n  constructor() {\n    super(...arguments);\n    this.name = LivechatBusinessHourTypes.CUSTOM;\n    this.DepartmentsRepository = LivechatDepartment;\n    this.DepartmentsAgentsRepository = LivechatDepartmentAgents;\n  }\n\n  getBusinessHour(id) {\n    return Promise.asyncApply(() => {\n      if (!id) {\n        return null;\n      }\n\n      const businessHour = Promise.await(this.BusinessHourRepository.findOneById(id));\n\n      if (!businessHour) {\n        return null;\n      }\n\n      businessHour.departments = Promise.await(this.DepartmentsRepository.findByBusinessHourId(businessHour._id, {\n        projection: {\n          name: 1\n        }\n      }).toArray());\n      return businessHour;\n    });\n  }\n\n  saveBusinessHour(businessHour) {\n    return Promise.asyncApply(() => {\n      const existingBusinessHour = Promise.await(this.BusinessHourRepository.findOne({\n        name: businessHour.name\n      }, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n        throw new Error('error-business-hour-name-already-in-use');\n      }\n\n      const {\n        timezoneName,\n        departmentsToApplyBusinessHour\n      } = businessHour,\n            businessHourData = _objectWithoutProperties(businessHour, _excluded);\n\n      businessHourData.timezone = {\n        name: timezoneName,\n        utc: this.getUTCFromTimezone(timezoneName)\n      };\n      const departments = (departmentsToApplyBusinessHour === null || departmentsToApplyBusinessHour === void 0 ? void 0 : departmentsToApplyBusinessHour.split(',').filter(Boolean)) || [];\n\n      const businessHourToReturn = _objectSpread(_objectSpread({}, businessHourData), {}, {\n        departmentsToApplyBusinessHour\n      });\n\n      delete businessHourData.departments;\n      const businessHourId = Promise.await(this.baseSaveBusinessHour(businessHourData));\n      const currentDepartments = Promise.await(this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n        projection: {\n          _id: 1\n        }\n      }).toArray()).map(dept => dept._id);\n      const toRemove = [...currentDepartments.filter(dept => !departments.includes(dept))];\n      const toAdd = [...departments.filter(dept => !currentDepartments.includes(dept))];\n      Promise.await(this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove));\n      Promise.await(this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd));\n      businessHourToReturn._id = businessHourId;\n      return businessHourToReturn;\n    });\n  }\n\n  removeBusinessHourById(businessHourId) {\n    return Promise.asyncApply(() => {\n      const businessHour = Promise.await(this.BusinessHourRepository.findOneById(businessHourId, {}));\n\n      if (!businessHour) {\n        return;\n      }\n\n      Promise.await(this.BusinessHourRepository.removeById(businessHourId));\n      Promise.await(this.removeBusinessHourFromAgents(businessHourId));\n      Promise.await(this.DepartmentsRepository.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId));\n      this.UsersRepository.updateLivechatStatusBasedOnBusinessHours();\n    });\n  }\n\n  removeBusinessHourFromAgents(businessHourId) {\n    return Promise.asyncApply(() => {\n      const departmentIds = Promise.await(this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n        projection: {\n          _id: 1\n        }\n      }).toArray()).map(dept => dept._id);\n      const agentIds = Promise.await(this.DepartmentsAgentsRepository.findByDepartmentIds(departmentIds, {\n        projection: {\n          agentId: 1\n        }\n      }).toArray()).map(dept => dept.agentId);\n      this.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n    });\n  }\n\n  removeBusinessHourFromDepartmentsIfNeeded(businessHourId, departmentsToRemove) {\n    return Promise.asyncApply(() => {\n      if (!departmentsToRemove.length) {\n        return;\n      }\n\n      Promise.await(this.DepartmentsRepository.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId));\n    });\n  }\n\n  addBusinessHourToDepartmentsIfNeeded(businessHourId, departmentsToAdd) {\n    return Promise.asyncApply(() => {\n      if (!departmentsToAdd.length) {\n        return;\n      }\n\n      Promise.await(this.DepartmentsRepository.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId));\n    });\n  }\n\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());","map":{"version":3,"sources":["ee/app/livechat-enterprise/server/business-hour/Custom.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractBusinessHourType, IBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../../definition/ILivechatBusinessHour';\nimport { LivechatDepartmentRaw } from '../../../../../app/models/server/raw/LivechatDepartment';\nimport { LivechatDepartmentAgentsRaw } from '../../../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { LivechatDepartment, LivechatDepartmentAgents } from '../../../../../app/models/server/raw';\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\n\ntype IBusinessHoursExtraProperties = {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n};\n\nclass CustomBusinessHour extends AbstractBusinessHourType implements IBusinessHourType {\n\tname = LivechatBusinessHourTypes.CUSTOM;\n\n\tprivate DepartmentsRepository: LivechatDepartmentRaw = LivechatDepartment;\n\n\tprivate DepartmentsAgentsRepository: LivechatDepartmentAgentsRaw = LivechatDepartmentAgents;\n\n\tasync getBusinessHour(id: string): Promise<ILivechatBusinessHour | null> {\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(id);\n\t\tif (!businessHour) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbusinessHour.departments = await this.DepartmentsRepository.findByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { name: 1 },\n\t\t}).toArray();\n\t\treturn businessHour;\n\t}\n\n\tasync saveBusinessHour(businessHour: ILivechatBusinessHour & IBusinessHoursExtraProperties): Promise<ILivechatBusinessHour> {\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },\n\t\t\t{ projection: { _id: 1 } },\n\t\t)) as ILivechatBusinessHour;\n\t\tif (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n\t\t\tthrow new Error('error-business-hour-name-already-in-use');\n\t\t}\n\t\tconst { timezoneName, departmentsToApplyBusinessHour, ...businessHourData } = businessHour;\n\t\tbusinessHourData.timezone = {\n\t\t\tname: timezoneName,\n\t\t\tutc: this.getUTCFromTimezone(timezoneName),\n\t\t};\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tdelete businessHourData.departments;\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\t\tawait this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst toRemove = [...currentDepartments.filter((dept) => !departments.includes(dept))];\n\t\tconst toAdd = [...departments.filter((dept: string) => !currentDepartments.includes(dept))];\n\t\tawait this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n\t\tawait this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n\t\tbusinessHourToReturn._id = businessHourId;\n\t\treturn businessHourToReturn;\n\t}\n\n\tasync removeBusinessHourById(businessHourId: string): Promise<void> {\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.BusinessHourRepository.removeById(businessHourId);\n\t\tawait this.removeBusinessHourFromAgents(businessHourId);\n\t\tawait this.DepartmentsRepository.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n\t\tthis.UsersRepository.updateLivechatStatusBasedOnBusinessHours();\n\t}\n\n\tprivate async removeBusinessHourFromAgents(businessHourId: string): Promise<void> {\n\t\tconst departmentIds = (\n\t\t\tawait this.DepartmentsRepository.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst agentIds = (\n\t\t\tawait this.DepartmentsAgentsRepository.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tthis.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async removeBusinessHourFromDepartmentsIfNeeded(businessHourId: string, departmentsToRemove: string[]): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.DepartmentsRepository.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n\t}\n\n\tprivate async addBusinessHourToDepartmentsIfNeeded(businessHourId: string, departmentsToAdd: string[]): Promise<void> {\n\t\tif (!departmentsToAdd.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.DepartmentsRepository.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n\t}\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());\n"],"sourceRoot":""},"sourceType":"module","hash":"c16ccbef2d22d0731e81ba5cec7af9bb9cde8349"}
