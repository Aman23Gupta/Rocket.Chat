{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/SAML.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/SAML.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/SAML.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/SAML.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/SAML.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerResponse } from 'http';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport fiber from 'fibers';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\n\nimport { settings } from '../../../settings/server';\nimport { Users, Rooms } from '../../../models/server';\nimport { CredentialTokens } from '../../../models/server/raw';\nimport { IUser } from '../../../../definition/IUser';\nimport { IIncomingMessage } from '../../../../definition/IIncomingMessage';\nimport { saveUserIdentity, createRoom, generateUsernameSuggestion, addUserToRoom } from '../../../lib/server/functions';\nimport { SAMLServiceProvider } from './ServiceProvider';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLAction } from '../definition/ISAMLAction';\nimport { ISAMLUser } from '../definition/ISAMLUser';\nimport { SAMLUtils } from './Utils';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\n\nconst showErrorMessage = function (res: ServerResponse, err: string): void {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html',\n\t});\n\tconst content = `<html><body><h2>Sorry, an annoying error occured</h2><div>${escapeHTML(err)}</div></body></html>`;\n\tres.end(content, 'utf-8');\n};\n\nexport class SAML {\n\tpublic static processRequest(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): void {\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tif (samlObject.actionName === 'metadata') {\n\t\t\t\tshowErrorMessage(res, `Unexpected SAML service ${samlObject.serviceName}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Unexpected SAML service ${samlObject.serviceName}`);\n\t\t}\n\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\treturn this.processMetadataAction(res, service);\n\t\t\tcase 'logout':\n\t\t\t\treturn this.processLogoutAction(req, res, service);\n\t\t\tcase 'sloRedirect':\n\t\t\t\treturn this.processSLORedirectAction(req, res);\n\t\t\tcase 'authorize':\n\t\t\t\treturn this.processAuthorizeAction(res, service, samlObject);\n\t\t\tcase 'validate':\n\t\t\t\treturn this.processValidateAction(req, res, service, samlObject);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected SAML action ${samlObject.actionName}`);\n\t\t}\n\t}\n\n\tpublic static async hasCredential(credentialToken: string): Promise<boolean> {\n\t\treturn (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n\t}\n\n\tpublic static async retrieveCredential(credentialToken: string): Promise<Record<string, any> | undefined> {\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static insertOrUpdateSAMLUser(userObject: ISAMLUser): { userId: string; token: string } {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tquery[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\tuser = Users.findOne(query);\n\n\t\t\tif (user) {\n\t\t\t\tcustomIdentifierMatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// Second, try searching by username or email (according to the immutableProperty setting)\n\t\tif (!user) {\n\t\t\tconst expression = userObject.emailList.map((email) => `^${escapeRegExp(email)}$`).join('|');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;\n\n\t\tconst active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\t\tif (!user) {\n\t\t\t// If we received any role from the mapping, use them - otherwise use the default role for creation.\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : SAMLUtils.ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: userObject.fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tconst languages = TAPi18n.getLanguages();\n\t\t\t\tif (languages[userObject.language]) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = Users.findOne(userId);\n\n\t\t\tif (userObject.channels && channelsAttributeUpdate !== true) {\n\t\t\t\tSAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t\t}\n\t\t}\n\n\t\t// creating the token and adding to the user\n\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\tUsers.addPersonalAccessTokenToUser({\n\t\t\tuserId: user._id,\n\t\t\tloginTokenObject: stampedToken,\n\t\t});\n\n\t\tconst updateData: Record<string, any> = {\n\t\t\t'services.saml.provider': userObject.samlLogin.provider,\n\t\t\t'services.saml.idp': userObject.samlLogin.idp,\n\t\t\t'services.saml.idpSession': userObject.samlLogin.idpSession,\n\t\t\t'services.saml.nameID': userObject.samlLogin.nameID,\n\t\t};\n\n\t\t// If the user was not found through the customIdentifier property, then update it's value\n\t\tif (customIdentifierMatch === false && customIdentifierAttributeName) {\n\t\t\tupdateData[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t}\n\n\t\t// Overwrite mail if needed\n\t\tif (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n\t\t\tupdateData.emails = emails;\n\t\t}\n\n\t\t// Overwrite fullname if needed\n\t\tif (nameOverwrite === true) {\n\t\t\tupdateData.name = userObject.fullName;\n\t\t}\n\n\t\t// When updating an user, we only update the roles if we received them from the mapping\n\t\tif (userObject.roles?.length) {\n\t\t\tupdateData.roles = userObject.roles;\n\t\t}\n\n\t\tif (userObject.channels && channelsAttributeUpdate === true) {\n\t\t\tSAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t}\n\n\t\tUsers.update(\n\t\t\t{\n\t\t\t\t_id: user._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: updateData,\n\t\t\t},\n\t\t);\n\n\t\tif (username && username !== user.username) {\n\t\t\tsaveUserIdentity({ _id: user._id, username });\n\t\t}\n\n\t\t// sending token along with the userId\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token,\n\t\t};\n\t}\n\n\tprivate static processMetadataAction(res: ServerResponse, service: IServiceProviderOptions): void {\n\t\ttry {\n\t\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\n\t\t\tres.writeHead(200);\n\t\t\tres.write(serviceProvider.generateServiceProviderMetadata());\n\t\t\tres.end();\n\t\t} catch (err: any) {\n\t\t\tshowErrorMessage(res, err);\n\t\t}\n\t}\n\n\tprivate static processLogoutAction(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\t// This is where we receive SAML LogoutResponse\n\t\tif (req.query.SAMLRequest) {\n\t\t\treturn this.processLogoutRequest(req, res, service);\n\t\t}\n\n\t\treturn this.processLogoutResponse(req, res, service);\n\t}\n\n\tprivate static _logoutRemoveTokens(userId: string): void {\n\t\tSAMLUtils.log(`Found user ${userId}`);\n\n\t\tUsers.unsetLoginTokens(userId);\n\t\tUsers.removeSamlServiceSession(userId);\n\t}\n\n\tprivate static processLogoutRequest(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.validateLogoutRequest(req.query.SAMLRequest, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tSystemLogger.error({ err });\n\t\t\t\tthrow new Meteor.Error('Unable to Validate Logout Request');\n\t\t\t}\n\n\t\t\tif (!result) {\n\t\t\t\tthrow new Meteor.Error('Unable to process Logout Request: missing request data.');\n\t\t\t}\n\n\t\t\tlet timeoutHandler: NodeJS.Timer | null = null;\n\t\t\tconst redirect = (url?: string | undefined): void => {\n\t\t\t\tif (!timeoutHandler) {\n\t\t\t\t\t// If the handler is null, then we already ended the response;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\ttimeoutHandler = null;\n\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url || Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t};\n\n\t\t\t// Add a timeout to end the server response\n\t\t\ttimeoutHandler = setTimeout(() => {\n\t\t\t\t// If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n\t\t\t\tredirect();\n\t\t\t}, 5000);\n\n\t\t\tfiber(() => {\n\t\t\t\ttry {\n\t\t\t\t\tconst cursor = Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession);\n\t\t\t\t\tconst count = cursor.count();\n\t\t\t\t\tif (count > 1) {\n\t\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML session');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with session.');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst loggedOutUser = cursor.fetch();\n\t\t\t\t\tthis._logoutRemoveTokens(loggedOutUser[0]._id);\n\n\t\t\t\t\tconst { response } = serviceProvider.generateLogoutResponse({\n\t\t\t\t\t\tnameID: result.nameID || '',\n\t\t\t\t\t\tsessionIndex: result.idpSession || '',\n\t\t\t\t\t\tinResponseToId: result.id || '',\n\t\t\t\t\t});\n\n\t\t\t\t\tserviceProvider.logoutResponseToUrl(response, (err, url) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tSystemLogger.error({ err });\n\t\t\t\t\t\t\treturn redirect();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tredirect(url);\n\t\t\t\t\t});\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tSystemLogger.error(e);\n\t\t\t\t\tredirect();\n\t\t\t\t}\n\t\t\t}).run();\n\t\t});\n\t}\n\n\tprivate static processLogoutResponse(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\tif (!req.query.SAMLResponse) {\n\t\t\tSAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n\t\t\tthrow new Error('Invalid LogoutResponse received.');\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.validateLogoutResponse(req.query.SAMLResponse, (err, inResponseTo) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!inResponseTo) {\n\t\t\t\tthrow new Meteor.Error('Invalid logout request: no inResponseTo value.');\n\t\t\t}\n\n\t\t\tconst logOutUser = (inResponseTo: string): void => {\n\t\t\t\tSAMLUtils.log(`Logging Out user via inResponseTo ${inResponseTo}`);\n\n\t\t\t\tconst cursor = Users.findBySAMLInResponseTo(inResponseTo);\n\t\t\t\tconst count = cursor.count();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tconst loggedOutUser = cursor.fetch();\n\t\t\t\tthis._logoutRemoveTokens(loggedOutUser[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tfiber(() => logOutUser(inResponseTo)).run();\n\t\t\t} finally {\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: req.query.RelayState,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static processSLORedirectAction(req: IIncomingMessage, res: ServerResponse): void {\n\t\tres.writeHead(302, {\n\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\tLocation: req.query.redirect,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static processAuthorizeAction(res: ServerResponse, service: IServiceProviderOptions, samlObject: ISAMLAction): void {\n\t\tservice.id = samlObject.credentialToken;\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.getAuthorizeUrl((err, url) => {\n\t\t\tif (err) {\n\t\t\t\tSAMLUtils.error('Unable to generate authorize url');\n\t\t\t\tSAMLUtils.error(err);\n\t\t\t\turl = Meteor.absoluteUrl();\n\t\t\t}\n\n\t\t\tres.writeHead(302, {\n\t\t\t\tLocation: url,\n\t\t\t});\n\t\t\tres.end();\n\t\t});\n\t}\n\n\tprivate static processValidateAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\t_samlObject: ISAMLAction,\n\t): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tSAMLUtils.relayState = req.body.RelayState;\n\t\tserviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n\t\t\ttry {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t\tthrow new Error('Unable to validate response url');\n\t\t\t\t}\n\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow new Error('No user data collected from IdP response.');\n\t\t\t\t}\n\n\t\t\t\t// create a random token to store the login result\n\t\t\t\t// to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n\t\t\t\t// http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = `${Meteor.absoluteUrl('home')}?saml_idp_credentialToken=${credentialToken}`;\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {\n\t\t\t\tSAMLUtils.error(error);\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static findUser(username: string | undefined, emailRegex: RegExp): IUser | undefined {\n\t\tconst { globalSettings } = SAMLUtils;\n\n\t\tif (globalSettings.immutableProperty === 'Username') {\n\t\t\tif (username) {\n\t\t\t\treturn Users.findOne({\n\t\t\t\t\tusername,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn Users.findOne({\n\t\t\t'emails.address': emailRegex,\n\t\t});\n\t}\n\n\tprivate static guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprivate static subscribeToSAMLChannels(channels: Array<string>, user: IUser): void {\n\t\tconst { includePrivateChannelsInUpdate } = SAMLUtils.globalSettings;\n\t\ttry {\n\t\t\tfor (let roomName of channels) {\n\t\t\t\troomName = roomName.trim();\n\t\t\t\tif (!roomName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tconst privRoom = Rooms.findOneByNameAndType(roomName, 'p', {});\n\n\t\t\t\tif (privRoom && includePrivateChannelsInUpdate === true) {\n\t\t\t\t\taddUserToRoom(privRoom._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (room) {\n\t\t\t\t\taddUserToRoom(room._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!room && !privRoom) {\n\t\t\t\t\t// If the user doesn't have an username yet, we can't create new rooms for them\n\t\t\t\t\tif (user.username) {\n\t\t\t\t\t\tcreateRoom('c', roomName, user.username);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tSystemLogger.error(err);\n\t\t}\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/SAML.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/SAML.ts"}},"code":"module.export({\n  SAML: () => SAML\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet fiber;\nmodule.link(\"fibers\", {\n  default(v) {\n    fiber = v;\n  }\n\n}, 4);\nlet escapeRegExp, escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  },\n\n  escapeHTML(v) {\n    escapeHTML = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nlet Users, Rooms;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 7);\nlet CredentialTokens;\nmodule.link(\"../../../models/server/raw\", {\n  CredentialTokens(v) {\n    CredentialTokens = v;\n  }\n\n}, 8);\nlet saveUserIdentity, createRoom, generateUsernameSuggestion, addUserToRoom;\nmodule.link(\"../../../lib/server/functions\", {\n  saveUserIdentity(v) {\n    saveUserIdentity = v;\n  },\n\n  createRoom(v) {\n    createRoom = v;\n  },\n\n  generateUsernameSuggestion(v) {\n    generateUsernameSuggestion = v;\n  },\n\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  }\n\n}, 9);\nlet SAMLServiceProvider;\nmodule.link(\"./ServiceProvider\", {\n  SAMLServiceProvider(v) {\n    SAMLServiceProvider = v;\n  }\n\n}, 10);\nlet SAMLUtils;\nmodule.link(\"./Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 11);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 12);\n\nconst showErrorMessage = function (res, err) {\n  res.writeHead(200, {\n    'Content-Type': 'text/html'\n  });\n  const content = \"<html><body><h2>Sorry, an annoying error occured</h2><div>\".concat(escapeHTML(err), \"</div></body></html>\");\n  res.end(content, 'utf-8');\n};\n\nclass SAML {\n  static processRequest(req, res, service, samlObject) {\n    // Skip everything if there's no service set by the saml middleware\n    if (!service) {\n      if (samlObject.actionName === 'metadata') {\n        showErrorMessage(res, \"Unexpected SAML service \".concat(samlObject.serviceName));\n        return;\n      }\n\n      throw new Error(\"Unexpected SAML service \".concat(samlObject.serviceName));\n    }\n\n    switch (samlObject.actionName) {\n      case 'metadata':\n        return this.processMetadataAction(res, service);\n\n      case 'logout':\n        return this.processLogoutAction(req, res, service);\n\n      case 'sloRedirect':\n        return this.processSLORedirectAction(req, res);\n\n      case 'authorize':\n        return this.processAuthorizeAction(res, service, samlObject);\n\n      case 'validate':\n        return this.processValidateAction(req, res, service, samlObject);\n\n      default:\n        throw new Error(\"Unexpected SAML action \".concat(samlObject.actionName));\n    }\n  }\n\n  static hasCredential(credentialToken) {\n    return Promise.asyncApply(() => {\n      return Promise.await(CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n    });\n  }\n\n  static retrieveCredential(credentialToken) {\n    return Promise.asyncApply(() => {\n      // The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n      const data = Promise.await(CredentialTokens.findOneNotExpiredById(credentialToken));\n\n      if (data) {\n        return data.userInfo;\n      }\n    });\n  }\n\n  static storeCredential(credentialToken, loginResult) {\n    return Promise.asyncApply(() => {\n      Promise.await(CredentialTokens.create(credentialToken, loginResult));\n    });\n  }\n\n  static insertOrUpdateSAMLUser(userObject) {\n    var _userObject$roles2;\n\n    const {\n      generateUsername,\n      immutableProperty,\n      nameOverwrite,\n      mailOverwrite,\n      channelsAttributeUpdate,\n      defaultUserRole = 'user'\n    } = SAMLUtils.globalSettings;\n    let customIdentifierMatch = false;\n    let customIdentifierAttributeName = null;\n    let user = null; // First, try searching by custom identifier\n\n    if (userObject.identifier.type === 'custom' && userObject.identifier.attribute && userObject.attributeList.has(userObject.identifier.attribute)) {\n      customIdentifierAttributeName = userObject.identifier.attribute;\n      const query = {};\n      query[\"services.saml.\".concat(customIdentifierAttributeName)] = userObject.attributeList.get(customIdentifierAttributeName);\n      user = Users.findOne(query);\n\n      if (user) {\n        customIdentifierMatch = true;\n      }\n    } // Second, try searching by username or email (according to the immutableProperty setting)\n\n\n    if (!user) {\n      const expression = userObject.emailList.map(email => \"^\".concat(escapeRegExp(email), \"$\")).join('|');\n      const emailRegex = new RegExp(expression, 'i');\n      user = SAML.findUser(userObject.username, emailRegex);\n    }\n\n    const emails = userObject.emailList.map(email => ({\n      address: email,\n      verified: settings.get('Accounts_Verify_Email_For_External_Accounts')\n    }));\n    let {\n      username\n    } = userObject;\n    const active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n    if (!user) {\n      var _userObject$roles;\n\n      // If we received any role from the mapping, use them - otherwise use the default role for creation.\n      const roles = (_userObject$roles = userObject.roles) !== null && _userObject$roles !== void 0 && _userObject$roles.length ? userObject.roles : SAMLUtils.ensureArray(defaultUserRole.split(','));\n      const newUser = {\n        name: userObject.fullName,\n        active,\n        globalRoles: roles,\n        emails,\n        services: {\n          saml: {\n            provider: userObject.samlLogin.provider,\n            idp: userObject.samlLogin.idp\n          }\n        }\n      };\n\n      if (customIdentifierAttributeName) {\n        newUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n      }\n\n      if (generateUsername === true) {\n        username = generateUsernameSuggestion(newUser);\n      }\n\n      if (username) {\n        newUser.username = username;\n        newUser.name = newUser.name || SAML.guessNameFromUsername(username);\n      }\n\n      if (userObject.language) {\n        const languages = TAPi18n.getLanguages();\n\n        if (languages[userObject.language]) {\n          newUser.language = userObject.language;\n        }\n      }\n\n      const userId = Accounts.insertUserDoc({}, newUser);\n      user = Users.findOne(userId);\n\n      if (userObject.channels && channelsAttributeUpdate !== true) {\n        SAML.subscribeToSAMLChannels(userObject.channels, user);\n      }\n    } // creating the token and adding to the user\n\n\n    const stampedToken = Accounts._generateStampedLoginToken();\n\n    Users.addPersonalAccessTokenToUser({\n      userId: user._id,\n      loginTokenObject: stampedToken\n    });\n    const updateData = {\n      'services.saml.provider': userObject.samlLogin.provider,\n      'services.saml.idp': userObject.samlLogin.idp,\n      'services.saml.idpSession': userObject.samlLogin.idpSession,\n      'services.saml.nameID': userObject.samlLogin.nameID\n    }; // If the user was not found through the customIdentifier property, then update it's value\n\n    if (customIdentifierMatch === false && customIdentifierAttributeName) {\n      updateData[\"services.saml.\".concat(customIdentifierAttributeName)] = userObject.attributeList.get(customIdentifierAttributeName);\n    } // Overwrite mail if needed\n\n\n    if (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n      updateData.emails = emails;\n    } // Overwrite fullname if needed\n\n\n    if (nameOverwrite === true) {\n      updateData.name = userObject.fullName;\n    } // When updating an user, we only update the roles if we received them from the mapping\n\n\n    if ((_userObject$roles2 = userObject.roles) !== null && _userObject$roles2 !== void 0 && _userObject$roles2.length) {\n      updateData.roles = userObject.roles;\n    }\n\n    if (userObject.channels && channelsAttributeUpdate === true) {\n      SAML.subscribeToSAMLChannels(userObject.channels, user);\n    }\n\n    Users.update({\n      _id: user._id\n    }, {\n      $set: updateData\n    });\n\n    if (username && username !== user.username) {\n      saveUserIdentity({\n        _id: user._id,\n        username\n      });\n    } // sending token along with the userId\n\n\n    return {\n      userId: user._id,\n      token: stampedToken.token\n    };\n  }\n\n  static processMetadataAction(res, service) {\n    try {\n      const serviceProvider = new SAMLServiceProvider(service);\n      res.writeHead(200);\n      res.write(serviceProvider.generateServiceProviderMetadata());\n      res.end();\n    } catch (err) {\n      showErrorMessage(res, err);\n    }\n  }\n\n  static processLogoutAction(req, res, service) {\n    // This is where we receive SAML LogoutResponse\n    if (req.query.SAMLRequest) {\n      return this.processLogoutRequest(req, res, service);\n    }\n\n    return this.processLogoutResponse(req, res, service);\n  }\n\n  static _logoutRemoveTokens(userId) {\n    SAMLUtils.log(\"Found user \".concat(userId));\n    Users.unsetLoginTokens(userId);\n    Users.removeSamlServiceSession(userId);\n  }\n\n  static processLogoutRequest(req, res, service) {\n    const serviceProvider = new SAMLServiceProvider(service);\n    serviceProvider.validateLogoutRequest(req.query.SAMLRequest, (err, result) => {\n      if (err) {\n        SystemLogger.error({\n          err\n        });\n        throw new Meteor.Error('Unable to Validate Logout Request');\n      }\n\n      if (!result) {\n        throw new Meteor.Error('Unable to process Logout Request: missing request data.');\n      }\n\n      let timeoutHandler = null;\n\n      const redirect = url => {\n        if (!timeoutHandler) {\n          // If the handler is null, then we already ended the response;\n          return;\n        }\n\n        clearTimeout(timeoutHandler);\n        timeoutHandler = null;\n        res.writeHead(302, {\n          Location: url || Meteor.absoluteUrl()\n        });\n        res.end();\n      }; // Add a timeout to end the server response\n\n\n      timeoutHandler = setTimeout(() => {\n        // If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n        redirect();\n      }, 5000);\n      fiber(() => {\n        try {\n          const cursor = Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession);\n          const count = cursor.count();\n\n          if (count > 1) {\n            throw new Meteor.Error('Found multiple users matching SAML session');\n          }\n\n          if (count === 0) {\n            throw new Meteor.Error('Invalid logout request: no user associated with session.');\n          }\n\n          const loggedOutUser = cursor.fetch();\n\n          this._logoutRemoveTokens(loggedOutUser[0]._id);\n\n          const {\n            response\n          } = serviceProvider.generateLogoutResponse({\n            nameID: result.nameID || '',\n            sessionIndex: result.idpSession || '',\n            inResponseToId: result.id || ''\n          });\n          serviceProvider.logoutResponseToUrl(response, (err, url) => {\n            if (err) {\n              SystemLogger.error({\n                err\n              });\n              return redirect();\n            }\n\n            redirect(url);\n          });\n        } catch (e) {\n          SystemLogger.error(e);\n          redirect();\n        }\n      }).run();\n    });\n  }\n\n  static processLogoutResponse(req, res, service) {\n    if (!req.query.SAMLResponse) {\n      SAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n      throw new Error('Invalid LogoutResponse received.');\n    }\n\n    const serviceProvider = new SAMLServiceProvider(service);\n    serviceProvider.validateLogoutResponse(req.query.SAMLResponse, (err, inResponseTo) => {\n      if (err) {\n        return;\n      }\n\n      if (!inResponseTo) {\n        throw new Meteor.Error('Invalid logout request: no inResponseTo value.');\n      }\n\n      const logOutUser = inResponseTo => {\n        SAMLUtils.log(\"Logging Out user via inResponseTo \".concat(inResponseTo));\n        const cursor = Users.findBySAMLInResponseTo(inResponseTo);\n        const count = cursor.count();\n\n        if (count > 1) {\n          throw new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n        }\n\n        if (count === 0) {\n          throw new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n        }\n\n        const loggedOutUser = cursor.fetch();\n\n        this._logoutRemoveTokens(loggedOutUser[0]._id);\n      };\n\n      try {\n        fiber(() => logOutUser(inResponseTo)).run();\n      } finally {\n        res.writeHead(302, {\n          Location: req.query.RelayState\n        });\n        res.end();\n      }\n    });\n  }\n\n  static processSLORedirectAction(req, res) {\n    res.writeHead(302, {\n      // credentialToken here is the SAML LogOut Request that we'll send back to IDP\n      Location: req.query.redirect\n    });\n    res.end();\n  }\n\n  static processAuthorizeAction(res, service, samlObject) {\n    service.id = samlObject.credentialToken;\n    const serviceProvider = new SAMLServiceProvider(service);\n    serviceProvider.getAuthorizeUrl((err, url) => {\n      if (err) {\n        SAMLUtils.error('Unable to generate authorize url');\n        SAMLUtils.error(err);\n        url = Meteor.absoluteUrl();\n      }\n\n      res.writeHead(302, {\n        Location: url\n      });\n      res.end();\n    });\n  }\n\n  static processValidateAction(req, res, service, _samlObject) {\n    const serviceProvider = new SAMLServiceProvider(service);\n    SAMLUtils.relayState = req.body.RelayState;\n    serviceProvider.validateResponse(req.body.SAMLResponse, (err, profile\n    /* , loggedOut*/\n    ) => Promise.asyncApply(() => {\n      try {\n        if (err) {\n          SAMLUtils.error(err);\n          throw new Error('Unable to validate response url');\n        }\n\n        if (!profile) {\n          throw new Error('No user data collected from IdP response.');\n        } // create a random token to store the login result\n        // to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n        // http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\n\n        const credentialToken = Random.id();\n        const loginResult = {\n          profile\n        };\n        Promise.await(this.storeCredential(credentialToken, loginResult));\n        const url = \"\".concat(Meteor.absoluteUrl('home'), \"?saml_idp_credentialToken=\").concat(credentialToken);\n        res.writeHead(302, {\n          Location: url\n        });\n        res.end();\n      } catch (error) {\n        SAMLUtils.error(error);\n        res.writeHead(302, {\n          Location: Meteor.absoluteUrl()\n        });\n        res.end();\n      }\n    }));\n  }\n\n  static findUser(username, emailRegex) {\n    const {\n      globalSettings\n    } = SAMLUtils;\n\n    if (globalSettings.immutableProperty === 'Username') {\n      if (username) {\n        return Users.findOne({\n          username\n        });\n      }\n\n      return;\n    }\n\n    return Users.findOne({\n      'emails.address': emailRegex\n    });\n  }\n\n  static guessNameFromUsername(username) {\n    return username.replace(/\\W/g, ' ').replace(/\\s(.)/g, u => u.toUpperCase()).replace(/^(.)/, u => u.toLowerCase()).replace(/^\\w/, u => u.toUpperCase());\n  }\n\n  static subscribeToSAMLChannels(channels, user) {\n    const {\n      includePrivateChannelsInUpdate\n    } = SAMLUtils.globalSettings;\n\n    try {\n      for (let roomName of channels) {\n        roomName = roomName.trim();\n\n        if (!roomName) {\n          continue;\n        }\n\n        const room = Rooms.findOneByNameAndType(roomName, 'c', {});\n        const privRoom = Rooms.findOneByNameAndType(roomName, 'p', {});\n\n        if (privRoom && includePrivateChannelsInUpdate === true) {\n          addUserToRoom(privRoom._id, user);\n          continue;\n        }\n\n        if (room) {\n          addUserToRoom(room._id, user);\n          continue;\n        }\n\n        if (!room && !privRoom) {\n          // If the user doesn't have an username yet, we can't create new rooms for them\n          if (user.username) {\n            createRoom('c', roomName, user.username);\n          }\n        }\n      }\n    } catch (err) {\n      SystemLogger.error(err);\n    }\n  }\n\n}","map":{"version":3,"sources":["app/meteor-accounts-saml/server/lib/SAML.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerResponse } from 'http';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport fiber from 'fibers';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\n\nimport { settings } from '../../../settings/server';\nimport { Users, Rooms } from '../../../models/server';\nimport { CredentialTokens } from '../../../models/server/raw';\nimport { IUser } from '../../../../definition/IUser';\nimport { IIncomingMessage } from '../../../../definition/IIncomingMessage';\nimport { saveUserIdentity, createRoom, generateUsernameSuggestion, addUserToRoom } from '../../../lib/server/functions';\nimport { SAMLServiceProvider } from './ServiceProvider';\nimport { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { ISAMLAction } from '../definition/ISAMLAction';\nimport { ISAMLUser } from '../definition/ISAMLUser';\nimport { SAMLUtils } from './Utils';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\n\nconst showErrorMessage = function (res: ServerResponse, err: string): void {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html',\n\t});\n\tconst content = `<html><body><h2>Sorry, an annoying error occured</h2><div>${escapeHTML(err)}</div></body></html>`;\n\tres.end(content, 'utf-8');\n};\n\nexport class SAML {\n\tpublic static processRequest(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): void {\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tif (samlObject.actionName === 'metadata') {\n\t\t\t\tshowErrorMessage(res, `Unexpected SAML service ${samlObject.serviceName}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Unexpected SAML service ${samlObject.serviceName}`);\n\t\t}\n\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\treturn this.processMetadataAction(res, service);\n\t\t\tcase 'logout':\n\t\t\t\treturn this.processLogoutAction(req, res, service);\n\t\t\tcase 'sloRedirect':\n\t\t\t\treturn this.processSLORedirectAction(req, res);\n\t\t\tcase 'authorize':\n\t\t\t\treturn this.processAuthorizeAction(res, service, samlObject);\n\t\t\tcase 'validate':\n\t\t\t\treturn this.processValidateAction(req, res, service, samlObject);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected SAML action ${samlObject.actionName}`);\n\t\t}\n\t}\n\n\tpublic static async hasCredential(credentialToken: string): Promise<boolean> {\n\t\treturn (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n\t}\n\n\tpublic static async retrieveCredential(credentialToken: string): Promise<Record<string, any> | undefined> {\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static insertOrUpdateSAMLUser(userObject: ISAMLUser): { userId: string; token: string } {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tquery[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\tuser = Users.findOne(query);\n\n\t\t\tif (user) {\n\t\t\t\tcustomIdentifierMatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// Second, try searching by username or email (according to the immutableProperty setting)\n\t\tif (!user) {\n\t\t\tconst expression = userObject.emailList.map((email) => `^${escapeRegExp(email)}$`).join('|');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;\n\n\t\tconst active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\t\tif (!user) {\n\t\t\t// If we received any role from the mapping, use them - otherwise use the default role for creation.\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : SAMLUtils.ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: userObject.fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tconst languages = TAPi18n.getLanguages();\n\t\t\t\tif (languages[userObject.language]) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = Users.findOne(userId);\n\n\t\t\tif (userObject.channels && channelsAttributeUpdate !== true) {\n\t\t\t\tSAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t\t}\n\t\t}\n\n\t\t// creating the token and adding to the user\n\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\tUsers.addPersonalAccessTokenToUser({\n\t\t\tuserId: user._id,\n\t\t\tloginTokenObject: stampedToken,\n\t\t});\n\n\t\tconst updateData: Record<string, any> = {\n\t\t\t'services.saml.provider': userObject.samlLogin.provider,\n\t\t\t'services.saml.idp': userObject.samlLogin.idp,\n\t\t\t'services.saml.idpSession': userObject.samlLogin.idpSession,\n\t\t\t'services.saml.nameID': userObject.samlLogin.nameID,\n\t\t};\n\n\t\t// If the user was not found through the customIdentifier property, then update it's value\n\t\tif (customIdentifierMatch === false && customIdentifierAttributeName) {\n\t\t\tupdateData[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t}\n\n\t\t// Overwrite mail if needed\n\t\tif (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n\t\t\tupdateData.emails = emails;\n\t\t}\n\n\t\t// Overwrite fullname if needed\n\t\tif (nameOverwrite === true) {\n\t\t\tupdateData.name = userObject.fullName;\n\t\t}\n\n\t\t// When updating an user, we only update the roles if we received them from the mapping\n\t\tif (userObject.roles?.length) {\n\t\t\tupdateData.roles = userObject.roles;\n\t\t}\n\n\t\tif (userObject.channels && channelsAttributeUpdate === true) {\n\t\t\tSAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t}\n\n\t\tUsers.update(\n\t\t\t{\n\t\t\t\t_id: user._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: updateData,\n\t\t\t},\n\t\t);\n\n\t\tif (username && username !== user.username) {\n\t\t\tsaveUserIdentity({ _id: user._id, username });\n\t\t}\n\n\t\t// sending token along with the userId\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token,\n\t\t};\n\t}\n\n\tprivate static processMetadataAction(res: ServerResponse, service: IServiceProviderOptions): void {\n\t\ttry {\n\t\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\n\t\t\tres.writeHead(200);\n\t\t\tres.write(serviceProvider.generateServiceProviderMetadata());\n\t\t\tres.end();\n\t\t} catch (err: any) {\n\t\t\tshowErrorMessage(res, err);\n\t\t}\n\t}\n\n\tprivate static processLogoutAction(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\t// This is where we receive SAML LogoutResponse\n\t\tif (req.query.SAMLRequest) {\n\t\t\treturn this.processLogoutRequest(req, res, service);\n\t\t}\n\n\t\treturn this.processLogoutResponse(req, res, service);\n\t}\n\n\tprivate static _logoutRemoveTokens(userId: string): void {\n\t\tSAMLUtils.log(`Found user ${userId}`);\n\n\t\tUsers.unsetLoginTokens(userId);\n\t\tUsers.removeSamlServiceSession(userId);\n\t}\n\n\tprivate static processLogoutRequest(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.validateLogoutRequest(req.query.SAMLRequest, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tSystemLogger.error({ err });\n\t\t\t\tthrow new Meteor.Error('Unable to Validate Logout Request');\n\t\t\t}\n\n\t\t\tif (!result) {\n\t\t\t\tthrow new Meteor.Error('Unable to process Logout Request: missing request data.');\n\t\t\t}\n\n\t\t\tlet timeoutHandler: NodeJS.Timer | null = null;\n\t\t\tconst redirect = (url?: string | undefined): void => {\n\t\t\t\tif (!timeoutHandler) {\n\t\t\t\t\t// If the handler is null, then we already ended the response;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\ttimeoutHandler = null;\n\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url || Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t};\n\n\t\t\t// Add a timeout to end the server response\n\t\t\ttimeoutHandler = setTimeout(() => {\n\t\t\t\t// If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n\t\t\t\tredirect();\n\t\t\t}, 5000);\n\n\t\t\tfiber(() => {\n\t\t\t\ttry {\n\t\t\t\t\tconst cursor = Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession);\n\t\t\t\t\tconst count = cursor.count();\n\t\t\t\t\tif (count > 1) {\n\t\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML session');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with session.');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst loggedOutUser = cursor.fetch();\n\t\t\t\t\tthis._logoutRemoveTokens(loggedOutUser[0]._id);\n\n\t\t\t\t\tconst { response } = serviceProvider.generateLogoutResponse({\n\t\t\t\t\t\tnameID: result.nameID || '',\n\t\t\t\t\t\tsessionIndex: result.idpSession || '',\n\t\t\t\t\t\tinResponseToId: result.id || '',\n\t\t\t\t\t});\n\n\t\t\t\t\tserviceProvider.logoutResponseToUrl(response, (err, url) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tSystemLogger.error({ err });\n\t\t\t\t\t\t\treturn redirect();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tredirect(url);\n\t\t\t\t\t});\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tSystemLogger.error(e);\n\t\t\t\t\tredirect();\n\t\t\t\t}\n\t\t\t}).run();\n\t\t});\n\t}\n\n\tprivate static processLogoutResponse(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): void {\n\t\tif (!req.query.SAMLResponse) {\n\t\t\tSAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n\t\t\tthrow new Error('Invalid LogoutResponse received.');\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.validateLogoutResponse(req.query.SAMLResponse, (err, inResponseTo) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!inResponseTo) {\n\t\t\t\tthrow new Meteor.Error('Invalid logout request: no inResponseTo value.');\n\t\t\t}\n\n\t\t\tconst logOutUser = (inResponseTo: string): void => {\n\t\t\t\tSAMLUtils.log(`Logging Out user via inResponseTo ${inResponseTo}`);\n\n\t\t\t\tconst cursor = Users.findBySAMLInResponseTo(inResponseTo);\n\t\t\t\tconst count = cursor.count();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (count === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tconst loggedOutUser = cursor.fetch();\n\t\t\t\tthis._logoutRemoveTokens(loggedOutUser[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tfiber(() => logOutUser(inResponseTo)).run();\n\t\t\t} finally {\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: req.query.RelayState,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static processSLORedirectAction(req: IIncomingMessage, res: ServerResponse): void {\n\t\tres.writeHead(302, {\n\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\tLocation: req.query.redirect,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static processAuthorizeAction(res: ServerResponse, service: IServiceProviderOptions, samlObject: ISAMLAction): void {\n\t\tservice.id = samlObject.credentialToken;\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tserviceProvider.getAuthorizeUrl((err, url) => {\n\t\t\tif (err) {\n\t\t\t\tSAMLUtils.error('Unable to generate authorize url');\n\t\t\t\tSAMLUtils.error(err);\n\t\t\t\turl = Meteor.absoluteUrl();\n\t\t\t}\n\n\t\t\tres.writeHead(302, {\n\t\t\t\tLocation: url,\n\t\t\t});\n\t\t\tres.end();\n\t\t});\n\t}\n\n\tprivate static processValidateAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\t_samlObject: ISAMLAction,\n\t): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tSAMLUtils.relayState = req.body.RelayState;\n\t\tserviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n\t\t\ttry {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t\tthrow new Error('Unable to validate response url');\n\t\t\t\t}\n\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow new Error('No user data collected from IdP response.');\n\t\t\t\t}\n\n\t\t\t\t// create a random token to store the login result\n\t\t\t\t// to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n\t\t\t\t// http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = `${Meteor.absoluteUrl('home')}?saml_idp_credentialToken=${credentialToken}`;\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {\n\t\t\t\tSAMLUtils.error(error);\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static findUser(username: string | undefined, emailRegex: RegExp): IUser | undefined {\n\t\tconst { globalSettings } = SAMLUtils;\n\n\t\tif (globalSettings.immutableProperty === 'Username') {\n\t\t\tif (username) {\n\t\t\t\treturn Users.findOne({\n\t\t\t\t\tusername,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn Users.findOne({\n\t\t\t'emails.address': emailRegex,\n\t\t});\n\t}\n\n\tprivate static guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprivate static subscribeToSAMLChannels(channels: Array<string>, user: IUser): void {\n\t\tconst { includePrivateChannelsInUpdate } = SAMLUtils.globalSettings;\n\t\ttry {\n\t\t\tfor (let roomName of channels) {\n\t\t\t\troomName = roomName.trim();\n\t\t\t\tif (!roomName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tconst privRoom = Rooms.findOneByNameAndType(roomName, 'p', {});\n\n\t\t\t\tif (privRoom && includePrivateChannelsInUpdate === true) {\n\t\t\t\t\taddUserToRoom(privRoom._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (room) {\n\t\t\t\t\taddUserToRoom(room._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!room && !privRoom) {\n\t\t\t\t\t// If the user doesn't have an username yet, we can't create new rooms for them\n\t\t\t\t\tif (user.username) {\n\t\t\t\t\t\tcreateRoom('c', roomName, user.username);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tSystemLogger.error(err);\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"3d5a168446b1159ce4d8b657f1efe56697f1c8c4"}
