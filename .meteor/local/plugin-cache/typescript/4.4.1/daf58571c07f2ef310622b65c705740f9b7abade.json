{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/nps/service.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/service.ts","inputSourceMap":{"version":3,"file":"server/services/nps/service.ts","sourceRoot":"","sources":["server/services/nps/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\n\nimport { Db } from 'mongodb';\n\nimport { NpsRaw } from '../../../app/models/server/raw/Nps';\nimport { NpsVoteRaw } from '../../../app/models/server/raw/NpsVote';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { NPSStatus, INpsVoteStatus, INpsVote, INps } from '../../../definition/INps';\nimport { INPSService, NPSVotePayload, NPSCreatePayload } from '../../sdk/types/INPSService';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { Banner, NPS } from '../../sdk';\nimport { sendNpsResults } from './sendNpsResults';\nimport { getBannerForAdmins, notifyAdmins } from './notification';\n\nexport class NPSService extends ServiceClass implements INPSService {\n\tprotected name = 'nps';\n\n\tprivate Nps: NpsRaw;\n\n\tprivate Settings: SettingsRaw;\n\n\tprivate NpsVote: NpsVoteRaw;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.Nps = new NpsRaw(db.collection('rocketchat_nps'));\n\t\tthis.NpsVote = new NpsVoteRaw(db.collection('rocketchat_nps_vote'));\n\t\tthis.Settings = new SettingsRaw(db.collection('rocketchat_settings'));\n\t}\n\n\tasync create(nps: NPSCreatePayload): Promise<boolean> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\tthrow new Error('Server opted-out for NPS surveys');\n\t\t}\n\n\t\tconst any = await this.Nps.findOne({}, { projection: { _id: 1 } });\n\t\tif (!any) {\n\t\t\tBanner.create(getBannerForAdmins(nps.startAt));\n\n\t\t\tnotifyAdmins(nps.startAt);\n\t\t}\n\n\t\tconst { npsId, startAt, expireAt, createdBy } = nps;\n\n\t\tconst { result } = await this.Nps.save({\n\t\t\t_id: npsId,\n\t\t\tstartAt,\n\t\t\texpireAt,\n\t\t\tcreatedBy,\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error creating NPS');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync sendResults(): Promise<void> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst npsSending = await this.Nps.getOpenExpiredAlreadySending();\n\n\t\tconst nps = npsSending || (await this.Nps.getOpenExpiredAndStartSending());\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst total = await this.NpsVote.findByNpsId(nps._id).count();\n\n\t\tconst votesToSend = await this.NpsVote.findNotSentByNpsId(nps._id).toArray();\n\n\t\t// if there is nothing to sent, check if something gone wrong\n\t\tif (votesToSend.length === 0) {\n\t\t\t// check if still has votes left to send\n\t\t\tconst totalSent = await this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count();\n\t\t\tif (totalSent === total) {\n\t\t\t\tawait this.Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\t\t\tawait this.NpsVote.updateOldSendingToNewByNpsId(nps._id);\n\n\t\t\t// try again in 5 minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await this.NpsVote.col.findOneAndUpdate(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: vote._id,\n\t\t\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\t\t\t\t\tsentAt: today,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tidentifier: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tscore: 1,\n\t\t\t\t\t\t\tcomment: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn value;\n\t\t\t}),\n\t\t);\n\n\t\tconst votes = sending.filter(Boolean) as INpsVote[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\n\t\t\tconst payload = {\n\t\t\t\ttotal,\n\t\t\t\tvotes,\n\t\t\t};\n\t\t\tsendNpsResults(nps._id, payload);\n\n\t\t\tthis.NpsVote.updateVotesToSent(voteIds);\n\t\t}\n\n\t\tconst totalSent = await this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count();\n\t\tif (totalSent < total) {\n\t\t\t// send more in five minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t}\n\n\tasync vote({ userId, npsId, roles, score, comment }: NPSVotePayload): Promise<void> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!npsId || typeof npsId !== 'string') {\n\t\t\tthrow new Error('Invalid NPS id');\n\t\t}\n\n\t\tconst nps = await this.Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },\n\t\t});\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (nps.status !== NPSStatus.OPEN) {\n\t\t\tthrow new Error('NPS not open for votes');\n\t\t}\n\n\t\tconst today = new Date();\n\t\tif (today > nps.expireAt) {\n\t\t\tthrow new Error('NPS expired');\n\t\t}\n\n\t\tif (today < nps.startAt) {\n\t\t\tthrow new Error('NPS survey not started');\n\t\t}\n\n\t\tconst identifier = createHash('sha256').update(`${userId}${npsId}`).digest('hex');\n\n\t\tconst result = await this.NpsVote.save({\n\t\t\tts: new Date(),\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t\troles,\n\t\t\tscore,\n\t\t\tcomment,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error saving NPS vote');\n\t\t}\n\t}\n\n\tasync closeOpenSurveys(): Promise<void> {\n\t\tawait this.Nps.closeAllByStatus(NPSStatus.OPEN);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/nps/service.ts"}},"code":"module.export({\n  NPSService: () => NPSService\n});\nlet createHash;\nmodule.link(\"crypto\", {\n  createHash(v) {\n    createHash = v;\n  }\n\n}, 0);\nlet NpsRaw;\nmodule.link(\"../../../app/models/server/raw/Nps\", {\n  NpsRaw(v) {\n    NpsRaw = v;\n  }\n\n}, 1);\nlet NpsVoteRaw;\nmodule.link(\"../../../app/models/server/raw/NpsVote\", {\n  NpsVoteRaw(v) {\n    NpsVoteRaw = v;\n  }\n\n}, 2);\nlet SettingsRaw;\nmodule.link(\"../../../app/models/server/raw/Settings\", {\n  SettingsRaw(v) {\n    SettingsRaw = v;\n  }\n\n}, 3);\nlet NPSStatus, INpsVoteStatus;\nmodule.link(\"../../../definition/INps\", {\n  NPSStatus(v) {\n    NPSStatus = v;\n  },\n\n  INpsVoteStatus(v) {\n    INpsVoteStatus = v;\n  }\n\n}, 4);\nlet ServiceClass;\nmodule.link(\"../../sdk/types/ServiceClass\", {\n  ServiceClass(v) {\n    ServiceClass = v;\n  }\n\n}, 5);\nlet Banner, NPS;\nmodule.link(\"../../sdk\", {\n  Banner(v) {\n    Banner = v;\n  },\n\n  NPS(v) {\n    NPS = v;\n  }\n\n}, 6);\nlet sendNpsResults;\nmodule.link(\"./sendNpsResults\", {\n  sendNpsResults(v) {\n    sendNpsResults = v;\n  }\n\n}, 7);\nlet getBannerForAdmins, notifyAdmins;\nmodule.link(\"./notification\", {\n  getBannerForAdmins(v) {\n    getBannerForAdmins = v;\n  },\n\n  notifyAdmins(v) {\n    notifyAdmins = v;\n  }\n\n}, 8);\n\nclass NPSService extends ServiceClass {\n  constructor(db) {\n    super();\n    this.name = 'nps';\n    this.Nps = void 0;\n    this.Settings = void 0;\n    this.NpsVote = void 0;\n    this.Nps = new NpsRaw(db.collection('rocketchat_nps'));\n    this.NpsVote = new NpsVoteRaw(db.collection('rocketchat_nps_vote'));\n    this.Settings = new SettingsRaw(db.collection('rocketchat_settings'));\n  }\n\n  create(nps) {\n    return Promise.asyncApply(() => {\n      const npsEnabled = Promise.await(this.Settings.getValueById('NPS_survey_enabled'));\n\n      if (!npsEnabled) {\n        throw new Error('Server opted-out for NPS surveys');\n      }\n\n      const any = Promise.await(this.Nps.findOne({}, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!any) {\n        Banner.create(getBannerForAdmins(nps.startAt));\n        notifyAdmins(nps.startAt);\n      }\n\n      const {\n        npsId,\n        startAt,\n        expireAt,\n        createdBy\n      } = nps;\n      const {\n        result\n      } = Promise.await(this.Nps.save({\n        _id: npsId,\n        startAt,\n        expireAt,\n        createdBy,\n        status: NPSStatus.OPEN\n      }));\n\n      if (!result) {\n        throw new Error('Error creating NPS');\n      }\n\n      return true;\n    });\n  }\n\n  sendResults() {\n    return Promise.asyncApply(() => {\n      const npsEnabled = Promise.await(this.Settings.getValueById('NPS_survey_enabled'));\n\n      if (!npsEnabled) {\n        return;\n      }\n\n      const npsSending = Promise.await(this.Nps.getOpenExpiredAlreadySending());\n      const nps = npsSending || Promise.await(this.Nps.getOpenExpiredAndStartSending());\n\n      if (!nps) {\n        return;\n      }\n\n      const total = Promise.await(this.NpsVote.findByNpsId(nps._id).count());\n      const votesToSend = Promise.await(this.NpsVote.findNotSentByNpsId(nps._id).toArray()); // if there is nothing to sent, check if something gone wrong\n\n      if (votesToSend.length === 0) {\n        // check if still has votes left to send\n        const totalSent = Promise.await(this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count());\n\n        if (totalSent === total) {\n          Promise.await(this.Nps.updateStatusById(nps._id, NPSStatus.SENT));\n          return;\n        } // update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\n\n        Promise.await(this.NpsVote.updateOldSendingToNewByNpsId(nps._id)); // try again in 5 minutes\n\n        setTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n        return;\n      }\n\n      const today = new Date();\n      const sending = Promise.await(Promise.all(votesToSend.map(vote => Promise.asyncApply(() => {\n        const {\n          value\n        } = Promise.await(this.NpsVote.col.findOneAndUpdate({\n          _id: vote._id,\n          status: INpsVoteStatus.NEW\n        }, {\n          $set: {\n            status: INpsVoteStatus.SENDING,\n            sentAt: today\n          }\n        }, {\n          projection: {\n            _id: 0,\n            identifier: 1,\n            roles: 1,\n            score: 1,\n            comment: 1\n          }\n        }));\n        return value;\n      }))));\n      const votes = sending.filter(Boolean);\n\n      if (votes.length > 0) {\n        const voteIds = votes.map(_ref => {\n          let {\n            _id\n          } = _ref;\n          return _id;\n        });\n        const payload = {\n          total,\n          votes\n        };\n        sendNpsResults(nps._id, payload);\n        this.NpsVote.updateVotesToSent(voteIds);\n      }\n\n      const totalSent = Promise.await(this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count());\n\n      if (totalSent < total) {\n        // send more in five minutes\n        setTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n        return;\n      }\n\n      Promise.await(this.Nps.updateStatusById(nps._id, NPSStatus.SENT));\n    });\n  }\n\n  vote(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        userId,\n        npsId,\n        roles,\n        score,\n        comment\n      } = _ref2;\n      const npsEnabled = Promise.await(this.Settings.getValueById('NPS_survey_enabled'));\n\n      if (!npsEnabled) {\n        return;\n      }\n\n      if (!npsId || typeof npsId !== 'string') {\n        throw new Error('Invalid NPS id');\n      }\n\n      const nps = Promise.await(this.Nps.findOneById(npsId, {\n        projection: {\n          status: 1,\n          startAt: 1,\n          expireAt: 1\n        }\n      }));\n\n      if (!nps) {\n        return;\n      }\n\n      if (nps.status !== NPSStatus.OPEN) {\n        throw new Error('NPS not open for votes');\n      }\n\n      const today = new Date();\n\n      if (today > nps.expireAt) {\n        throw new Error('NPS expired');\n      }\n\n      if (today < nps.startAt) {\n        throw new Error('NPS survey not started');\n      }\n\n      const identifier = createHash('sha256').update(\"\".concat(userId).concat(npsId)).digest('hex');\n      const result = Promise.await(this.NpsVote.save({\n        ts: new Date(),\n        npsId,\n        identifier,\n        roles,\n        score,\n        comment,\n        status: INpsVoteStatus.NEW\n      }));\n\n      if (!result) {\n        throw new Error('Error saving NPS vote');\n      }\n    });\n  }\n\n  closeOpenSurveys() {\n    return Promise.asyncApply(() => {\n      Promise.await(this.Nps.closeAllByStatus(NPSStatus.OPEN));\n    });\n  }\n\n}","map":{"version":3,"sources":["server/services/nps/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\n\nimport { Db } from 'mongodb';\n\nimport { NpsRaw } from '../../../app/models/server/raw/Nps';\nimport { NpsVoteRaw } from '../../../app/models/server/raw/NpsVote';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { NPSStatus, INpsVoteStatus, INpsVote, INps } from '../../../definition/INps';\nimport { INPSService, NPSVotePayload, NPSCreatePayload } from '../../sdk/types/INPSService';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { Banner, NPS } from '../../sdk';\nimport { sendNpsResults } from './sendNpsResults';\nimport { getBannerForAdmins, notifyAdmins } from './notification';\n\nexport class NPSService extends ServiceClass implements INPSService {\n\tprotected name = 'nps';\n\n\tprivate Nps: NpsRaw;\n\n\tprivate Settings: SettingsRaw;\n\n\tprivate NpsVote: NpsVoteRaw;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.Nps = new NpsRaw(db.collection('rocketchat_nps'));\n\t\tthis.NpsVote = new NpsVoteRaw(db.collection('rocketchat_nps_vote'));\n\t\tthis.Settings = new SettingsRaw(db.collection('rocketchat_settings'));\n\t}\n\n\tasync create(nps: NPSCreatePayload): Promise<boolean> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\tthrow new Error('Server opted-out for NPS surveys');\n\t\t}\n\n\t\tconst any = await this.Nps.findOne({}, { projection: { _id: 1 } });\n\t\tif (!any) {\n\t\t\tBanner.create(getBannerForAdmins(nps.startAt));\n\n\t\t\tnotifyAdmins(nps.startAt);\n\t\t}\n\n\t\tconst { npsId, startAt, expireAt, createdBy } = nps;\n\n\t\tconst { result } = await this.Nps.save({\n\t\t\t_id: npsId,\n\t\t\tstartAt,\n\t\t\texpireAt,\n\t\t\tcreatedBy,\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error creating NPS');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync sendResults(): Promise<void> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst npsSending = await this.Nps.getOpenExpiredAlreadySending();\n\n\t\tconst nps = npsSending || (await this.Nps.getOpenExpiredAndStartSending());\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst total = await this.NpsVote.findByNpsId(nps._id).count();\n\n\t\tconst votesToSend = await this.NpsVote.findNotSentByNpsId(nps._id).toArray();\n\n\t\t// if there is nothing to sent, check if something gone wrong\n\t\tif (votesToSend.length === 0) {\n\t\t\t// check if still has votes left to send\n\t\t\tconst totalSent = await this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count();\n\t\t\tif (totalSent === total) {\n\t\t\t\tawait this.Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\t\t\tawait this.NpsVote.updateOldSendingToNewByNpsId(nps._id);\n\n\t\t\t// try again in 5 minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await this.NpsVote.col.findOneAndUpdate(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: vote._id,\n\t\t\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\t\t\t\t\tsentAt: today,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tidentifier: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tscore: 1,\n\t\t\t\t\t\t\tcomment: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn value;\n\t\t\t}),\n\t\t);\n\n\t\tconst votes = sending.filter(Boolean) as INpsVote[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\n\t\t\tconst payload = {\n\t\t\t\ttotal,\n\t\t\t\tvotes,\n\t\t\t};\n\t\t\tsendNpsResults(nps._id, payload);\n\n\t\t\tthis.NpsVote.updateVotesToSent(voteIds);\n\t\t}\n\n\t\tconst totalSent = await this.NpsVote.findByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT).count();\n\t\tif (totalSent < total) {\n\t\t\t// send more in five minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t}\n\n\tasync vote({ userId, npsId, roles, score, comment }: NPSVotePayload): Promise<void> {\n\t\tconst npsEnabled = await this.Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!npsId || typeof npsId !== 'string') {\n\t\t\tthrow new Error('Invalid NPS id');\n\t\t}\n\n\t\tconst nps = await this.Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },\n\t\t});\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (nps.status !== NPSStatus.OPEN) {\n\t\t\tthrow new Error('NPS not open for votes');\n\t\t}\n\n\t\tconst today = new Date();\n\t\tif (today > nps.expireAt) {\n\t\t\tthrow new Error('NPS expired');\n\t\t}\n\n\t\tif (today < nps.startAt) {\n\t\t\tthrow new Error('NPS survey not started');\n\t\t}\n\n\t\tconst identifier = createHash('sha256').update(`${userId}${npsId}`).digest('hex');\n\n\t\tconst result = await this.NpsVote.save({\n\t\t\tts: new Date(),\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t\troles,\n\t\t\tscore,\n\t\t\tcomment,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error saving NPS vote');\n\t\t}\n\t}\n\n\tasync closeOpenSurveys(): Promise<void> {\n\t\tawait this.Nps.closeAllByStatus(NPSStatus.OPEN);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"daf58571c07f2ef310622b65c705740f9b7abade"}
