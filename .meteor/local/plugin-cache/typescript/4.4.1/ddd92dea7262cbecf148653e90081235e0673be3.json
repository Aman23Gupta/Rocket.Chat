{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/stdout.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/stream/stdout.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/stdout.ts","inputSourceMap":{"version":3,"file":"server/stream/stdout.ts","sourceRoot":"","sources":["server/stream/stdout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,aAAa,MAAM,kDAAkD,CAAC;AAC7E,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEnE,MAAM,aAAa,GAAG,UAAU,MAAc,EAAE,IAAU;IACzD,IAAI,GAAG,CAAC;IACR,IAAI;QACH,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACtB,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM;YACN,GAAG,GAAG;gBACL,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,MAAM;aACb,CAAC;SACF;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;KACxC;IAAC,OAAO,KAAK,EAAE;QACf,OAAO,MAAM,CAAC;KACd;AACF,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,UAAU,IAAS;IACvC,OAAO;QACN,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;QACzC,EAAE,EAAE,IAAI,CAAC,EAAE;KACX,CAAC;AACH,CAAC,CAAC;AAEF,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;IAC7B,mGAAmG;IACnG,gDAAgD;IAChD,aAAa,CAAC,YAAY,CAAC,oBAAoB,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/E,CAAC,CAAC,CAAC;AAEH,MAAM,UAAU,OAAO;IACtB,OAAO,aAAa,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Log } from 'meteor/logging';\n\nimport notifications from '../../app/notifications/server/lib/Notifications';\nimport { getQueuedLogs, logEntries } from '../lib/logger/logQueue';\n\nconst processString = function (string: string, date: Date): string {\n\tlet obj;\n\ttry {\n\t\tif (string[0] === '{') {\n\t\t\tobj = EJSON.parse(string);\n\t\t} else {\n\t\t\tobj = {\n\t\t\t\tmessage: string,\n\t\t\t\ttime: date,\n\t\t\t\tlevel: 'info',\n\t\t\t};\n\t\t}\n\t\treturn Log.format(obj, { color: true });\n\t} catch (error) {\n\t\treturn string;\n\t}\n};\n\nconst transformLog = function (item: any): { id: string; string: string; ts: Date } {\n\treturn {\n\t\tid: item.id,\n\t\tstring: processString(item.data, item.ts),\n\t\tts: item.ts,\n\t};\n};\n\nlogEntries.on('log', (item) => {\n\t// TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n\t// won't be available when using micro services.\n\tnotifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nexport function getLogs(): { id: string; string: string; ts: Date }[] {\n\treturn getQueuedLogs().map(transformLog);\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/stdout.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/stream/stdout.ts"}},"code":"module.export({\n  getLogs: () => getLogs\n});\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet Log;\nmodule.link(\"meteor/logging\", {\n  Log(v) {\n    Log = v;\n  }\n\n}, 1);\nlet notifications;\nmodule.link(\"../../app/notifications/server/lib/Notifications\", {\n  default(v) {\n    notifications = v;\n  }\n\n}, 2);\nlet getQueuedLogs, logEntries;\nmodule.link(\"../lib/logger/logQueue\", {\n  getQueuedLogs(v) {\n    getQueuedLogs = v;\n  },\n\n  logEntries(v) {\n    logEntries = v;\n  }\n\n}, 3);\n\nconst processString = function (string, date) {\n  let obj;\n\n  try {\n    if (string[0] === '{') {\n      obj = EJSON.parse(string);\n    } else {\n      obj = {\n        message: string,\n        time: date,\n        level: 'info'\n      };\n    }\n\n    return Log.format(obj, {\n      color: true\n    });\n  } catch (error) {\n    return string;\n  }\n};\n\nconst transformLog = function (item) {\n  return {\n    id: item.id,\n    string: processString(item.data, item.ts),\n    ts: item.ts\n  };\n};\n\nlogEntries.on('log', item => {\n  // TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n  // won't be available when using micro services.\n  notifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nfunction getLogs() {\n  return getQueuedLogs().map(transformLog);\n}","map":{"version":3,"sources":["server/stream/stdout.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAc;AAAA,EAAA,OAAQ,EAAA,MAAA;AAAR,CAAd;AAAqC,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gBAAA,EAAA;AAAA,EAAA,GAAA,CAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kDAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA,EAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAMrC,MAAM,aAAa,GAAG,UAAU,MAAV,EAA0B,IAA1B,EAAoC;AACzD,MAAI,GAAJ;;AACA,MAAI;AACH,QAAI,MAAM,CAAC,CAAD,CAAN,KAAc,GAAlB,EAAuB;AACtB,MAAA,GAAG,GAAG,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAN;AACA,KAFD,MAEO;AACN,MAAA,GAAG,GAAG;AACL,QAAA,OAAO,EAAE,MADJ;AAEL,QAAA,IAAI,EAAE,IAFD;AAGL,QAAA,KAAK,EAAE;AAHF,OAAN;AAKA;;AACD,WAAO,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB;AAAE,MAAA,KAAK,EAAE;AAAT,KAAhB,CAAP;AACA,GAXD,CAWE,OAAO,KAAP,EAAc;AACf,WAAO,MAAP;AACA;AACD,CAhBD;;AAkBA,MAAM,YAAY,GAAG,UAAU,IAAV,EAAmB;AACvC,SAAO;AACN,IAAA,EAAE,EAAE,IAAI,CAAC,EADH;AAEN,IAAA,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,IAAN,EAAY,IAAI,CAAC,EAAjB,CAFf;AAGN,IAAA,EAAE,EAAE,IAAI,CAAC;AAHH,GAAP;AAKA,CAND;;AAQA,UAAU,CAAC,EAAX,CAAc,KAAd,EAAsB,IAAD,IAAS;AAC7B;AACA;AACA,EAAA,aAAa,CAAC,YAAd,CAA2B,oBAA3B,CAAgD,QAAhD,EAA0D,YAAY,CAAC,IAAD,CAAtE;AACA,CAJD;;AAMM,SAAU,OAAV,GAAiB;AACtB,SAAO,aAAa,GAAG,GAAhB,CAAoB,YAApB,CAAP;AACA","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Log } from 'meteor/logging';\n\nimport notifications from '../../app/notifications/server/lib/Notifications';\nimport { getQueuedLogs, logEntries } from '../lib/logger/logQueue';\n\nconst processString = function (string: string, date: Date): string {\n\tlet obj;\n\ttry {\n\t\tif (string[0] === '{') {\n\t\t\tobj = EJSON.parse(string);\n\t\t} else {\n\t\t\tobj = {\n\t\t\t\tmessage: string,\n\t\t\t\ttime: date,\n\t\t\t\tlevel: 'info',\n\t\t\t};\n\t\t}\n\t\treturn Log.format(obj, { color: true });\n\t} catch (error) {\n\t\treturn string;\n\t}\n};\n\nconst transformLog = function (item: any): { id: string; string: string; ts: Date } {\n\treturn {\n\t\tid: item.id,\n\t\tstring: processString(item.data, item.ts),\n\t\tts: item.ts,\n\t};\n};\n\nlogEntries.on('log', (item) => {\n\t// TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n\t// won't be available when using micro services.\n\tnotifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nexport function getLogs(): { id: string; string: string; ts: Date }[] {\n\treturn getQueuedLogs().map(transformLog);\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"ddd92dea7262cbecf148653e90081235e0673be3"}
