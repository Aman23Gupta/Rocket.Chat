{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Sessions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Sessions.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Sessions.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/Sessions.ts","sourceRoot":"","sources":["app/models/server/raw/Sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAggregationCursor,\n\tBulkWriteOperation,\n\tBulkWriteOpResultObject,\n\tCollection,\n\tIndexSpecification,\n\tUpdateWriteOpResult,\n\tFilterQuery,\n\tCursor,\n} from 'mongodb';\n\nimport type { ISession } from '../../../../definition/ISession';\nimport { BaseRaw, ModelOptionalId } from './BaseRaw';\nimport type { IUser } from '../../../../definition/IUser';\n\ntype DestructuredDate = { year: number; month: number; day: number };\ntype DestructuredDateWithType = {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n\ttype?: 'month' | 'week';\n};\ntype DestructuredRange = { start: DestructuredDate; end: DestructuredDate };\ntype DateRange = { start: Date; end: Date };\ntype FullReturn = { year: number; month: number; day: number; data: ISession[] };\n\nconst matchBasedOnDate = (start: DestructuredDate, end: DestructuredDate): FilterQuery<ISession> => {\n\tif (start.year === end.year && start.month === end.month) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\tmonth: start.month,\n\t\t\tday: { $gte: start.day, $lte: end.day },\n\t\t};\n\t}\n\n\tif (start.year === end.year) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\treturn {\n\t\t$and: [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $gt: start.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $lt: end.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,\n): { listGroup: object; countGroup: object } => {\n\tconst isOpenSession = { $not: ['$session.closedAt'] };\n\tconst isAfterLoginAt = { $gte: ['$range', { $hour: '$session.loginAt' }] };\n\tconst isBeforeClosedAt = { $lte: ['$range', { $hour: '$session.closedAt' }] };\n\n\tconst listGroup = {\n\t\t$group: {\n\t\t\t_id,\n\t\t\tusersList: {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t$cond: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [{ $and: [isOpenSession, isAfterLoginAt] }, { $and: [isAfterLoginAt, isBeforeClosedAt] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$session.userId',\n\t\t\t\t\t\t'$$REMOVE',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tconst countGroup = {\n\t\t$addFields: {\n\t\t\tusers: { $size: '$usersList' },\n\t\t},\n\t};\n\n\treturn { listGroup, countGroup };\n};\n\nconst getSortByFullDate = (): { year: number; month: number; day: number } => ({\n\tyear: -1,\n\tmonth: -1,\n\tday: -1,\n});\n\nconst getProjectionByFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$_id.day',\n\tmonth: '$_id.month',\n\tyear: '$_id.year',\n});\n\nexport const aggregates = {\n\tdailySessionsOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): AggregationCursor<\n\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\ttime: number;\n\t\t\tsessions: number;\n\t\t\tdevices: ISession['device'][];\n\t\t\t_computedAt: string;\n\t\t}\n\t> {\n\t\treturn collection.aggregate<\n\t\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\t\ttime: number;\n\t\t\t\tsessions: number;\n\t\t\t\tdevices: ISession['device'][];\n\t\t\t\t_computedAt: string;\n\t\t\t}\n\t\t>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tuserId: { $exists: true },\n\t\t\t\t\t\tlastActivityAt: { $exists: true },\n\t\t\t\t\t\tdevice: { $exists: true },\n\t\t\t\t\t\ttype: 'session',\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\tuserId: 1,\n\t\t\t\t\t\tdevice: 1,\n\t\t\t\t\t\tday: 1,\n\t\t\t\t\t\tmonth: 1,\n\t\t\t\t\t\tyear: 1,\n\t\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\t\ttime: { $trunc: { $divide: [{ $subtract: ['$lastActivityAt', '$loginAt'] }, 1000] } },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\ttime: { $gt: 0 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\tdevice: '$device',\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\t\tsessions: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\t\tsessions: { $sum: '$sessions' },\n\t\t\t\t\t\tdevices: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\tdevice: '$_id.device',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: { $literal: 'user_daily' },\n\t\t\t\t\t\t_computedAt: { $literal: new Date() },\n\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\tdevices: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ allowDiskUse: true },\n\t\t);\n\t},\n\n\tasync getUniqueUsersOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\troles: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tasync getUniqueUsersOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetMatchOfLastMonthOrWeek({ year, month, day, type = 'month' }: DestructuredDateWithType): FilterQuery<ISession> {\n\t\tlet startOfPeriod;\n\n\t\tif (type === 'month') {\n\t\t\tconst pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n\t\t\tconst currMonthLastDay = new Date(year, month, 0).getDate();\n\n\t\t\tstartOfPeriod = new Date(year, month - 1, day);\n\t\t\tstartOfPeriod.setMonth(\n\t\t\t\tstartOfPeriod.getMonth() - 1,\n\t\t\t\t(currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1,\n\t\t\t);\n\t\t} else {\n\t\t\tstartOfPeriod = new Date(year, month - 1, day - 6);\n\t\t}\n\n\t\tconst startOfPeriodObject = {\n\t\t\tyear: startOfPeriod.getFullYear(),\n\t\t\tmonth: startOfPeriod.getMonth() + 1,\n\t\t\tday: startOfPeriod.getDate(),\n\t\t};\n\n\t\tif (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday: { $gte: startOfPeriodObject.day, $lte: day },\n\t\t\t};\n\t\t}\n\n\t\tif (year === startOfPeriodObject.year) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $gt: startOfPeriodObject.year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\n\tasync getUniqueDevicesOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueDevicesOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n};\n\nexport class SessionsRaw extends BaseRaw<ISession> {\n\tprotected indexes: IndexSpecification[] = [\n\t\t{ key: { instanceId: 1, sessionId: 1, year: 1, month: 1, day: 1 } },\n\t\t{ key: { instanceId: 1, sessionId: 1, userId: 1 } },\n\t\t{ key: { instanceId: 1, sessionId: 1 } },\n\t\t{ key: { sessionId: 1 } },\n\t\t{ key: { userId: 1 } },\n\t\t{ key: { year: 1, month: 1, day: 1, type: 1 } },\n\t\t{ key: { type: 1 } },\n\t\t{ key: { ip: 1, loginAt: 1 } },\n\t\t{ key: { _computedAt: 1 }, expireAfterSeconds: 60 * 60 * 24 * 45 },\n\t];\n\n\tprivate secondaryCollection: Collection<ISession>;\n\n\tconstructor(public readonly col: Collection<ISession>, public readonly colSecondary: Collection<ISession>, trash?: Collection<ISession>) {\n\t\tsuper(col, trash);\n\n\t\tthis.secondaryCollection = colSecondary;\n\t}\n\n\tasync getActiveUsersBetweenDates({ start, end }: DestructuredRange): Promise<ISession[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync findLastLoginByIp(ip: string): Promise<ISession | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tip,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: { loginAt: -1 },\n\t\t\t\tlimit: 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindSessionsNotClosedByDateWithoutLastActivity({ year, month, day }: DestructuredDate): Cursor<ISession> {\n\t\tconst query = {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getActiveUsersOfPeriodByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusersList: IUser['_id'][];\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusersList: IUser['_id'][];\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusersList: {\n\t\t\t\t\t\t\t$addToSet: '$_id.userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusersList: 1,\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getBusiestTimeWithinHoursPeriod({ start, end, groupSize }: DateRange & { groupSize: number }): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [0, 24, groupSize],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour('$range');\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id',\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionsByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: { year: '$year', month: '$month', day: '$day' },\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionByHourAndDayBetweenDates({ start, end }: DateRange): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [{ $hour: '$loginAt' }, { $sum: [{ $ifNull: [{ $hour: '$closedAt' }, 23] }, 1] }],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour({\n\t\t\trange: '$range',\n\t\t\tday: '$session.day',\n\t\t\tmonth: '$session.month',\n\t\t\tyear: '$session.year',\n\t\t});\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id.range',\n\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\t...getSortByFullDate(),\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getUniqueUsersOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, { year, month, day }),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateWriteOpResult | undefined> {\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\n\t\tif (!year || !month || !day || !sessionId || !instanceId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },\n\t\t\t{\n\t\t\t\t$set: data,\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync closeByInstanceIdAndSessionId(instanceId: string, sessionId: string): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst closeTime = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tclosedAt: closeTime,\n\t\t\t\tlastActivityAt: closeTime,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateActiveSessionsByDateAndInstanceIdAndIds(\n\t\t{ year, month, day }: Partial<DestructuredDate> = {},\n\t\tinstanceId: string,\n\t\tsessions: string[],\n\t\tdata = {},\n\t): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tsessionId: { $in: sessions },\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync updateActiveSessionsByDate({ year, month, day }: DestructuredDate, data = {}): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync logoutByInstanceIdAndSessionIdAndUserId(instanceId: string, sessionId: string, userId: string): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: 0 },\n\t\t};\n\n\t\tconst logoutAt = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync createBatch(sessions: ModelOptionalId<ISession>[]): Promise<BulkWriteOpResultObject | undefined> {\n\t\tif (!sessions || sessions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops: BulkWriteOperation<ISession>[] = [];\n\t\tsessions.forEach((doc) => {\n\t\t\tconst { year, month, day, sessionId, instanceId } = doc;\n\t\t\tdelete doc._id;\n\n\t\t\tops.push({\n\t\t\t\tupdateOne: {\n\t\t\t\t\tfilter: { year, month, day, sessionId, instanceId },\n\t\t\t\t\tupdate: {\n\t\t\t\t\t\t$set: doc,\n\t\t\t\t\t},\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\treturn this.col.bulkWrite(ops, { ordered: false });\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Sessions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Sessions.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  aggregates: () => aggregates,\n  SessionsRaw: () => SessionsRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\n\nconst matchBasedOnDate = (start, end) => {\n  if (start.year === end.year && start.month === end.month) {\n    return {\n      year: start.year,\n      month: start.month,\n      day: {\n        $gte: start.day,\n        $lte: end.day\n      }\n    };\n  }\n\n  if (start.year === end.year) {\n    return {\n      year: start.year,\n      $and: [{\n        $or: [{\n          month: {\n            $gt: start.month\n          }\n        }, {\n          month: start.month,\n          day: {\n            $gte: start.day\n          }\n        }]\n      }, {\n        $or: [{\n          month: {\n            $lt: end.month\n          }\n        }, {\n          month: end.month,\n          day: {\n            $lte: end.day\n          }\n        }]\n      }]\n    };\n  }\n\n  return {\n    $and: [{\n      $or: [{\n        year: {\n          $gt: start.year\n        }\n      }, {\n        year: start.year,\n        month: {\n          $gt: start.month\n        }\n      }, {\n        year: start.year,\n        month: start.month,\n        day: {\n          $gte: start.day\n        }\n      }]\n    }, {\n      $or: [{\n        year: {\n          $lt: end.year\n        }\n      }, {\n        year: end.year,\n        month: {\n          $lt: end.month\n        }\n      }, {\n        year: end.year,\n        month: end.month,\n        day: {\n          $lte: end.day\n        }\n      }]\n    }]\n  };\n};\n\nconst getGroupSessionsByHour = _id => {\n  const isOpenSession = {\n    $not: ['$session.closedAt']\n  };\n  const isAfterLoginAt = {\n    $gte: ['$range', {\n      $hour: '$session.loginAt'\n    }]\n  };\n  const isBeforeClosedAt = {\n    $lte: ['$range', {\n      $hour: '$session.closedAt'\n    }]\n  };\n  const listGroup = {\n    $group: {\n      _id,\n      usersList: {\n        $addToSet: {\n          $cond: [{\n            $or: [{\n              $and: [isOpenSession, isAfterLoginAt]\n            }, {\n              $and: [isAfterLoginAt, isBeforeClosedAt]\n            }]\n          }, '$session.userId', '$$REMOVE']\n        }\n      }\n    }\n  };\n  const countGroup = {\n    $addFields: {\n      users: {\n        $size: '$usersList'\n      }\n    }\n  };\n  return {\n    listGroup,\n    countGroup\n  };\n};\n\nconst getSortByFullDate = () => ({\n  year: -1,\n  month: -1,\n  day: -1\n});\n\nconst getProjectionByFullDate = () => ({\n  day: '$_id.day',\n  month: '$_id.month',\n  year: '$_id.year'\n});\n\nconst aggregates = {\n  dailySessionsOfYesterday(collection, _ref) {\n    let {\n      year,\n      month,\n      day\n    } = _ref;\n    return collection.aggregate([{\n      $match: {\n        userId: {\n          $exists: true\n        },\n        lastActivityAt: {\n          $exists: true\n        },\n        device: {\n          $exists: true\n        },\n        type: 'session',\n        $or: [{\n          year: {\n            $lt: year\n          }\n        }, {\n          year,\n          month: {\n            $lt: month\n          }\n        }, {\n          year,\n          month,\n          day: {\n            $lte: day\n          }\n        }]\n      }\n    }, {\n      $project: {\n        userId: 1,\n        device: 1,\n        day: 1,\n        month: 1,\n        year: 1,\n        mostImportantRole: 1,\n        time: {\n          $trunc: {\n            $divide: [{\n              $subtract: ['$lastActivityAt', '$loginAt']\n            }, 1000]\n          }\n        }\n      }\n    }, {\n      $match: {\n        time: {\n          $gt: 0\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          userId: '$userId',\n          device: '$device',\n          day: '$day',\n          month: '$month',\n          year: '$year'\n        },\n        mostImportantRole: {\n          $first: '$mostImportantRole'\n        },\n        time: {\n          $sum: '$time'\n        },\n        sessions: {\n          $sum: 1\n        }\n      }\n    }, {\n      $sort: {\n        time: -1\n      }\n    }, {\n      $group: {\n        _id: {\n          userId: '$_id.userId',\n          day: '$_id.day',\n          month: '$_id.month',\n          year: '$_id.year'\n        },\n        mostImportantRole: {\n          $first: '$mostImportantRole'\n        },\n        time: {\n          $sum: '$time'\n        },\n        sessions: {\n          $sum: '$sessions'\n        },\n        devices: {\n          $push: {\n            sessions: '$sessions',\n            time: '$time',\n            device: '$_id.device'\n          }\n        }\n      }\n    }, {\n      $sort: {\n        _id: 1\n      }\n    }, {\n      $project: {\n        _id: 0,\n        type: {\n          $literal: 'user_daily'\n        },\n        _computedAt: {\n          $literal: new Date()\n        },\n        day: '$_id.day',\n        month: '$_id.month',\n        year: '$_id.year',\n        userId: '$_id.userId',\n        mostImportantRole: 1,\n        time: 1,\n        sessions: 1,\n        devices: 1\n      }\n    }], {\n      allowDiskUse: true\n    });\n  },\n\n  getUniqueUsersOfYesterday(collection, _ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        year,\n        month,\n        day\n      } = _ref2;\n      return collection.aggregate([{\n        $match: {\n          year,\n          month,\n          day,\n          type: 'user_daily'\n        }\n      }, {\n        $group: {\n          _id: {\n            day: '$day',\n            month: '$month',\n            year: '$year',\n            mostImportantRole: '$mostImportantRole'\n          },\n          count: {\n            $sum: 1\n          },\n          sessions: {\n            $sum: '$sessions'\n          },\n          time: {\n            $sum: '$time'\n          }\n        }\n      }, {\n        $group: {\n          _id: {\n            day: '$day',\n            month: '$month',\n            year: '$year'\n          },\n          roles: {\n            $push: {\n              role: '$_id.mostImportantRole',\n              count: '$count',\n              sessions: '$sessions',\n              time: '$time'\n            }\n          },\n          count: {\n            $sum: '$count'\n          },\n          sessions: {\n            $sum: '$sessions'\n          },\n          time: {\n            $sum: '$time'\n          }\n        }\n      }, {\n        $project: {\n          _id: 0,\n          count: 1,\n          sessions: 1,\n          time: 1,\n          roles: 1\n        }\n      }]).toArray();\n    });\n  },\n\n  getUniqueUsersOfLastMonthOrWeek(collection, _ref3) {\n    return Promise.asyncApply(() => {\n      let {\n        year,\n        month,\n        day,\n        type = 'month'\n      } = _ref3;\n      return collection.aggregate([{\n        $match: _objectSpread({\n          type: 'user_daily'\n        }, aggregates.getMatchOfLastMonthOrWeek({\n          year,\n          month,\n          day,\n          type\n        }))\n      }, {\n        $group: {\n          _id: {\n            userId: '$userId'\n          },\n          mostImportantRole: {\n            $first: '$mostImportantRole'\n          },\n          sessions: {\n            $sum: '$sessions'\n          },\n          time: {\n            $sum: '$time'\n          }\n        }\n      }, {\n        $group: {\n          _id: {\n            mostImportantRole: '$mostImportantRole'\n          },\n          count: {\n            $sum: 1\n          },\n          sessions: {\n            $sum: '$sessions'\n          },\n          time: {\n            $sum: '$time'\n          }\n        }\n      }, {\n        $sort: {\n          time: -1\n        }\n      }, {\n        $group: {\n          _id: 1,\n          roles: {\n            $push: {\n              role: '$_id.mostImportantRole',\n              count: '$count',\n              sessions: '$sessions',\n              time: '$time'\n            }\n          },\n          count: {\n            $sum: '$count'\n          },\n          sessions: {\n            $sum: '$sessions'\n          },\n          time: {\n            $sum: '$time'\n          }\n        }\n      }, {\n        $project: {\n          _id: 0,\n          count: 1,\n          roles: 1,\n          sessions: 1,\n          time: 1\n        }\n      }], {\n        allowDiskUse: true\n      }).toArray();\n    });\n  },\n\n  getMatchOfLastMonthOrWeek(_ref4) {\n    let {\n      year,\n      month,\n      day,\n      type = 'month'\n    } = _ref4;\n    let startOfPeriod;\n\n    if (type === 'month') {\n      const pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n      const currMonthLastDay = new Date(year, month, 0).getDate();\n      startOfPeriod = new Date(year, month - 1, day);\n      startOfPeriod.setMonth(startOfPeriod.getMonth() - 1, (currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1);\n    } else {\n      startOfPeriod = new Date(year, month - 1, day - 6);\n    }\n\n    const startOfPeriodObject = {\n      year: startOfPeriod.getFullYear(),\n      month: startOfPeriod.getMonth() + 1,\n      day: startOfPeriod.getDate()\n    };\n\n    if (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n      return {\n        year,\n        month,\n        day: {\n          $gte: startOfPeriodObject.day,\n          $lte: day\n        }\n      };\n    }\n\n    if (year === startOfPeriodObject.year) {\n      return {\n        year,\n        $and: [{\n          $or: [{\n            month: {\n              $gt: startOfPeriodObject.month\n            }\n          }, {\n            month: startOfPeriodObject.month,\n            day: {\n              $gte: startOfPeriodObject.day\n            }\n          }]\n        }, {\n          $or: [{\n            month: {\n              $lt: month\n            }\n          }, {\n            month,\n            day: {\n              $lte: day\n            }\n          }]\n        }]\n      };\n    }\n\n    return {\n      $and: [{\n        $or: [{\n          year: {\n            $gt: startOfPeriodObject.year\n          }\n        }, {\n          year: startOfPeriodObject.year,\n          month: {\n            $gt: startOfPeriodObject.month\n          }\n        }, {\n          year: startOfPeriodObject.year,\n          month: startOfPeriodObject.month,\n          day: {\n            $gte: startOfPeriodObject.day\n          }\n        }]\n      }, {\n        $or: [{\n          year: {\n            $lt: year\n          }\n        }, {\n          year,\n          month: {\n            $lt: month\n          }\n        }, {\n          year,\n          month,\n          day: {\n            $lte: day\n          }\n        }]\n      }]\n    };\n  },\n\n  getUniqueDevicesOfLastMonthOrWeek(collection, _ref5) {\n    return Promise.asyncApply(() => {\n      let {\n        year,\n        month,\n        day,\n        type = 'month'\n      } = _ref5;\n      return collection.aggregate([{\n        $match: _objectSpread({\n          type: 'user_daily'\n        }, aggregates.getMatchOfLastMonthOrWeek({\n          year,\n          month,\n          day,\n          type\n        }))\n      }, {\n        $unwind: '$devices'\n      }, {\n        $group: {\n          _id: {\n            type: '$devices.device.type',\n            name: '$devices.device.name',\n            version: '$devices.device.version'\n          },\n          count: {\n            $sum: '$devices.sessions'\n          },\n          time: {\n            $sum: '$devices.time'\n          }\n        }\n      }, {\n        $sort: {\n          time: -1\n        }\n      }, {\n        $project: {\n          _id: 0,\n          type: '$_id.type',\n          name: '$_id.name',\n          version: '$_id.version',\n          count: 1,\n          time: 1\n        }\n      }], {\n        allowDiskUse: true\n      }).toArray();\n    });\n  },\n\n  getUniqueDevicesOfYesterday(collection, _ref6) {\n    let {\n      year,\n      month,\n      day\n    } = _ref6;\n    return collection.aggregate([{\n      $match: {\n        year,\n        month,\n        day,\n        type: 'user_daily'\n      }\n    }, {\n      $unwind: '$devices'\n    }, {\n      $group: {\n        _id: {\n          type: '$devices.device.type',\n          name: '$devices.device.name',\n          version: '$devices.device.version'\n        },\n        count: {\n          $sum: '$devices.sessions'\n        },\n        time: {\n          $sum: '$devices.time'\n        }\n      }\n    }, {\n      $sort: {\n        time: -1\n      }\n    }, {\n      $project: {\n        _id: 0,\n        type: '$_id.type',\n        name: '$_id.name',\n        version: '$_id.version',\n        count: 1,\n        time: 1\n      }\n    }]).toArray();\n  },\n\n  getUniqueOSOfLastMonthOrWeek(collection, _ref7) {\n    let {\n      year,\n      month,\n      day,\n      type = 'month'\n    } = _ref7;\n    return collection.aggregate([{\n      $match: _objectSpread({\n        'type': 'user_daily',\n        'devices.device.os.name': {\n          $exists: true\n        }\n      }, aggregates.getMatchOfLastMonthOrWeek({\n        year,\n        month,\n        day,\n        type\n      }))\n    }, {\n      $unwind: '$devices'\n    }, {\n      $group: {\n        _id: {\n          name: '$devices.device.os.name',\n          version: '$devices.device.os.version'\n        },\n        count: {\n          $sum: '$devices.sessions'\n        },\n        time: {\n          $sum: '$devices.time'\n        }\n      }\n    }, {\n      $sort: {\n        time: -1\n      }\n    }, {\n      $project: {\n        _id: 0,\n        name: '$_id.name',\n        version: '$_id.version',\n        count: 1,\n        time: 1\n      }\n    }], {\n      allowDiskUse: true\n    }).toArray();\n  },\n\n  getUniqueOSOfYesterday(collection, _ref8) {\n    let {\n      year,\n      month,\n      day\n    } = _ref8;\n    return collection.aggregate([{\n      $match: {\n        year,\n        month,\n        day,\n        'type': 'user_daily',\n        'devices.device.os.name': {\n          $exists: true\n        }\n      }\n    }, {\n      $unwind: '$devices'\n    }, {\n      $group: {\n        _id: {\n          name: '$devices.device.os.name',\n          version: '$devices.device.os.version'\n        },\n        count: {\n          $sum: '$devices.sessions'\n        },\n        time: {\n          $sum: '$devices.time'\n        }\n      }\n    }, {\n      $sort: {\n        time: -1\n      }\n    }, {\n      $project: {\n        _id: 0,\n        name: '$_id.name',\n        version: '$_id.version',\n        count: 1,\n        time: 1\n      }\n    }]).toArray();\n  }\n\n};\n\nclass SessionsRaw extends BaseRaw {\n  constructor(col, colSecondary, trash) {\n    super(col, trash);\n    this.col = void 0;\n    this.colSecondary = void 0;\n    this.indexes = [{\n      key: {\n        instanceId: 1,\n        sessionId: 1,\n        year: 1,\n        month: 1,\n        day: 1\n      }\n    }, {\n      key: {\n        instanceId: 1,\n        sessionId: 1,\n        userId: 1\n      }\n    }, {\n      key: {\n        instanceId: 1,\n        sessionId: 1\n      }\n    }, {\n      key: {\n        sessionId: 1\n      }\n    }, {\n      key: {\n        userId: 1\n      }\n    }, {\n      key: {\n        year: 1,\n        month: 1,\n        day: 1,\n        type: 1\n      }\n    }, {\n      key: {\n        type: 1\n      }\n    }, {\n      key: {\n        ip: 1,\n        loginAt: 1\n      }\n    }, {\n      key: {\n        _computedAt: 1\n      },\n      expireAfterSeconds: 60 * 60 * 24 * 45\n    }];\n    this.secondaryCollection = void 0;\n    this.col = col;\n    this.colSecondary = colSecondary;\n    this.secondaryCollection = colSecondary;\n  }\n\n  getActiveUsersBetweenDates(_ref9) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end\n      } = _ref9;\n      return this.col.aggregate([{\n        $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n          type: 'user_daily'\n        })\n      }, {\n        $group: {\n          _id: '$userId'\n        }\n      }]).toArray();\n    });\n  }\n\n  findLastLoginByIp(ip) {\n    return Promise.asyncApply(() => {\n      return this.findOne({\n        ip\n      }, {\n        sort: {\n          loginAt: -1\n        },\n        limit: 1\n      });\n    });\n  }\n\n  findSessionsNotClosedByDateWithoutLastActivity(_ref10) {\n    let {\n      year,\n      month,\n      day\n    } = _ref10;\n    const query = {\n      year,\n      month,\n      day,\n      type: 'session',\n      closedAt: {\n        $exists: false\n      },\n      lastActivityAt: {\n        $exists: false\n      }\n    };\n    return this.find(query);\n  }\n\n  getActiveUsersOfPeriodByDayBetweenDates(_ref11) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end\n      } = _ref11;\n      return this.col.aggregate([{\n        $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n          type: 'user_daily',\n          mostImportantRole: {\n            $ne: 'anonymous'\n          }\n        })\n      }, {\n        $group: {\n          _id: {\n            day: '$day',\n            month: '$month',\n            year: '$year',\n            userId: '$userId'\n          }\n        }\n      }, {\n        $group: {\n          _id: {\n            day: '$_id.day',\n            month: '$_id.month',\n            year: '$_id.year'\n          },\n          usersList: {\n            $addToSet: '$_id.userId'\n          },\n          users: {\n            $sum: 1\n          }\n        }\n      }, {\n        $project: _objectSpread(_objectSpread({\n          _id: 0\n        }, getProjectionByFullDate()), {}, {\n          usersList: 1,\n          users: 1\n        })\n      }, {\n        $sort: _objectSpread({}, getSortByFullDate())\n      }]).toArray();\n    });\n  }\n\n  getBusiestTimeWithinHoursPeriod(_ref12) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end,\n        groupSize\n      } = _ref12;\n      const match = {\n        $match: {\n          type: 'computed-session',\n          loginAt: {\n            $gte: start,\n            $lte: end\n          }\n        }\n      };\n      const rangeProject = {\n        $project: {\n          range: {\n            $range: [0, 24, groupSize]\n          },\n          session: '$$ROOT'\n        }\n      };\n      const unwind = {\n        $unwind: '$range'\n      };\n      const groups = getGroupSessionsByHour('$range');\n      const presentationProject = {\n        $project: {\n          _id: 0,\n          hour: '$_id',\n          users: 1\n        }\n      };\n      const sort = {\n        $sort: {\n          hour: -1\n        }\n      };\n      return this.col.aggregate([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort]).toArray();\n    });\n  }\n\n  getTotalOfSessionsByDayBetweenDates(_ref13) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end\n      } = _ref13;\n      return this.col.aggregate([{\n        $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n          type: 'user_daily',\n          mostImportantRole: {\n            $ne: 'anonymous'\n          }\n        })\n      }, {\n        $group: {\n          _id: {\n            year: '$year',\n            month: '$month',\n            day: '$day'\n          },\n          users: {\n            $sum: 1\n          }\n        }\n      }, {\n        $project: _objectSpread(_objectSpread({\n          _id: 0\n        }, getProjectionByFullDate()), {}, {\n          users: 1\n        })\n      }, {\n        $sort: _objectSpread({}, getSortByFullDate())\n      }]).toArray();\n    });\n  }\n\n  getTotalOfSessionByHourAndDayBetweenDates(_ref14) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end\n      } = _ref14;\n      const match = {\n        $match: {\n          type: 'computed-session',\n          loginAt: {\n            $gte: start,\n            $lte: end\n          }\n        }\n      };\n      const rangeProject = {\n        $project: {\n          range: {\n            $range: [{\n              $hour: '$loginAt'\n            }, {\n              $sum: [{\n                $ifNull: [{\n                  $hour: '$closedAt'\n                }, 23]\n              }, 1]\n            }]\n          },\n          session: '$$ROOT'\n        }\n      };\n      const unwind = {\n        $unwind: '$range'\n      };\n      const groups = getGroupSessionsByHour({\n        range: '$range',\n        day: '$session.day',\n        month: '$session.month',\n        year: '$session.year'\n      });\n      const presentationProject = {\n        $project: _objectSpread(_objectSpread({\n          _id: 0,\n          hour: '$_id.range'\n        }, getProjectionByFullDate()), {}, {\n          users: 1\n        })\n      };\n      const sort = {\n        $sort: _objectSpread(_objectSpread({}, getSortByFullDate()), {}, {\n          hour: -1\n        })\n      };\n      return this.col.aggregate([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort]).toArray();\n    });\n  }\n\n  getUniqueUsersOfYesterday() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueUsersOfLastMonth() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueUsersOfLastWeek() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day,\n          type: 'week'\n        }))\n      };\n    });\n  }\n\n  getUniqueDevicesOfYesterday() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueDevicesOfLastMonth() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueDevicesOfLastWeek() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day,\n          type: 'week'\n        }))\n      };\n    });\n  }\n\n  getUniqueOSOfYesterday() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueOSOfYesterday(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueOSOfLastMonth() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day\n        }))\n      };\n    });\n  }\n\n  getUniqueOSOfLastWeek() {\n    return Promise.asyncApply(() => {\n      const date = new Date();\n      date.setDate(date.getDate() - 1);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      return {\n        year,\n        month,\n        day,\n        data: Promise.await(aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n          year,\n          month,\n          day,\n          type: 'week'\n        }))\n      };\n    });\n  }\n\n  createOrUpdate(data) {\n    return Promise.asyncApply(() => {\n      const {\n        year,\n        month,\n        day,\n        sessionId,\n        instanceId\n      } = data;\n\n      if (!year || !month || !day || !sessionId || !instanceId) {\n        return;\n      }\n\n      const now = new Date();\n      return this.updateOne({\n        instanceId,\n        sessionId,\n        year,\n        month,\n        day\n      }, {\n        $set: data,\n        $setOnInsert: {\n          createdAt: now\n        }\n      }, {\n        upsert: true\n      });\n    });\n  }\n\n  closeByInstanceIdAndSessionId(instanceId, sessionId) {\n    return Promise.asyncApply(() => {\n      const query = {\n        instanceId,\n        sessionId,\n        closedAt: {\n          $exists: false\n        }\n      };\n      const closeTime = new Date();\n      const update = {\n        $set: {\n          closedAt: closeTime,\n          lastActivityAt: closeTime\n        }\n      };\n      return this.updateOne(query, update);\n    });\n  }\n\n  updateActiveSessionsByDateAndInstanceIdAndIds() {\n    return Promise.asyncApply(() => {\n      let {\n        year,\n        month,\n        day\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let instanceId = arguments.length > 1 ? arguments[1] : undefined;\n      let sessions = arguments.length > 2 ? arguments[2] : undefined;\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      const query = {\n        instanceId,\n        year,\n        month,\n        day,\n        sessionId: {\n          $in: sessions\n        },\n        closedAt: {\n          $exists: false\n        }\n      };\n      const update = {\n        $set: data\n      };\n      return this.updateMany(query, update);\n    });\n  }\n\n  updateActiveSessionsByDate(_ref15) {\n    return Promise.asyncApply(() => {\n      let {\n        year,\n        month,\n        day\n      } = _ref15;\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const query = {\n        year,\n        month,\n        day,\n        type: 'session',\n        closedAt: {\n          $exists: false\n        },\n        lastActivityAt: {\n          $exists: false\n        }\n      };\n      const update = {\n        $set: data\n      };\n      return this.updateMany(query, update);\n    });\n  }\n\n  logoutByInstanceIdAndSessionIdAndUserId(instanceId, sessionId, userId) {\n    return Promise.asyncApply(() => {\n      const query = {\n        instanceId,\n        sessionId,\n        userId,\n        logoutAt: {\n          $exists: 0\n        }\n      };\n      const logoutAt = new Date();\n      const update = {\n        $set: {\n          logoutAt\n        }\n      };\n      return this.updateMany(query, update);\n    });\n  }\n\n  createBatch(sessions) {\n    return Promise.asyncApply(() => {\n      if (!sessions || sessions.length === 0) {\n        return;\n      }\n\n      const ops = [];\n      sessions.forEach(doc => {\n        const {\n          year,\n          month,\n          day,\n          sessionId,\n          instanceId\n        } = doc;\n        delete doc._id;\n        ops.push({\n          updateOne: {\n            filter: {\n              year,\n              month,\n              day,\n              sessionId,\n              instanceId\n            },\n            update: {\n              $set: doc\n            },\n            upsert: true\n          }\n        });\n      });\n      return this.col.bulkWrite(ops, {\n        ordered: false\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAggregationCursor,\n\tBulkWriteOperation,\n\tBulkWriteOpResultObject,\n\tCollection,\n\tIndexSpecification,\n\tUpdateWriteOpResult,\n\tFilterQuery,\n\tCursor,\n} from 'mongodb';\n\nimport type { ISession } from '../../../../definition/ISession';\nimport { BaseRaw, ModelOptionalId } from './BaseRaw';\nimport type { IUser } from '../../../../definition/IUser';\n\ntype DestructuredDate = { year: number; month: number; day: number };\ntype DestructuredDateWithType = {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n\ttype?: 'month' | 'week';\n};\ntype DestructuredRange = { start: DestructuredDate; end: DestructuredDate };\ntype DateRange = { start: Date; end: Date };\ntype FullReturn = { year: number; month: number; day: number; data: ISession[] };\n\nconst matchBasedOnDate = (start: DestructuredDate, end: DestructuredDate): FilterQuery<ISession> => {\n\tif (start.year === end.year && start.month === end.month) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\tmonth: start.month,\n\t\t\tday: { $gte: start.day, $lte: end.day },\n\t\t};\n\t}\n\n\tif (start.year === end.year) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\treturn {\n\t\t$and: [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $gt: start.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $lt: end.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,\n): { listGroup: object; countGroup: object } => {\n\tconst isOpenSession = { $not: ['$session.closedAt'] };\n\tconst isAfterLoginAt = { $gte: ['$range', { $hour: '$session.loginAt' }] };\n\tconst isBeforeClosedAt = { $lte: ['$range', { $hour: '$session.closedAt' }] };\n\n\tconst listGroup = {\n\t\t$group: {\n\t\t\t_id,\n\t\t\tusersList: {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t$cond: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [{ $and: [isOpenSession, isAfterLoginAt] }, { $and: [isAfterLoginAt, isBeforeClosedAt] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$session.userId',\n\t\t\t\t\t\t'$$REMOVE',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tconst countGroup = {\n\t\t$addFields: {\n\t\t\tusers: { $size: '$usersList' },\n\t\t},\n\t};\n\n\treturn { listGroup, countGroup };\n};\n\nconst getSortByFullDate = (): { year: number; month: number; day: number } => ({\n\tyear: -1,\n\tmonth: -1,\n\tday: -1,\n});\n\nconst getProjectionByFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$_id.day',\n\tmonth: '$_id.month',\n\tyear: '$_id.year',\n});\n\nexport const aggregates = {\n\tdailySessionsOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): AggregationCursor<\n\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\ttime: number;\n\t\t\tsessions: number;\n\t\t\tdevices: ISession['device'][];\n\t\t\t_computedAt: string;\n\t\t}\n\t> {\n\t\treturn collection.aggregate<\n\t\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\t\ttime: number;\n\t\t\t\tsessions: number;\n\t\t\t\tdevices: ISession['device'][];\n\t\t\t\t_computedAt: string;\n\t\t\t}\n\t\t>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tuserId: { $exists: true },\n\t\t\t\t\t\tlastActivityAt: { $exists: true },\n\t\t\t\t\t\tdevice: { $exists: true },\n\t\t\t\t\t\ttype: 'session',\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\tuserId: 1,\n\t\t\t\t\t\tdevice: 1,\n\t\t\t\t\t\tday: 1,\n\t\t\t\t\t\tmonth: 1,\n\t\t\t\t\t\tyear: 1,\n\t\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\t\ttime: { $trunc: { $divide: [{ $subtract: ['$lastActivityAt', '$loginAt'] }, 1000] } },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\ttime: { $gt: 0 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\tdevice: '$device',\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\t\tsessions: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\t\tsessions: { $sum: '$sessions' },\n\t\t\t\t\t\tdevices: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\tdevice: '$_id.device',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: { $literal: 'user_daily' },\n\t\t\t\t\t\t_computedAt: { $literal: new Date() },\n\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\tdevices: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ allowDiskUse: true },\n\t\t);\n\t},\n\n\tasync getUniqueUsersOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\troles: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tasync getUniqueUsersOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetMatchOfLastMonthOrWeek({ year, month, day, type = 'month' }: DestructuredDateWithType): FilterQuery<ISession> {\n\t\tlet startOfPeriod;\n\n\t\tif (type === 'month') {\n\t\t\tconst pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n\t\t\tconst currMonthLastDay = new Date(year, month, 0).getDate();\n\n\t\t\tstartOfPeriod = new Date(year, month - 1, day);\n\t\t\tstartOfPeriod.setMonth(\n\t\t\t\tstartOfPeriod.getMonth() - 1,\n\t\t\t\t(currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1,\n\t\t\t);\n\t\t} else {\n\t\t\tstartOfPeriod = new Date(year, month - 1, day - 6);\n\t\t}\n\n\t\tconst startOfPeriodObject = {\n\t\t\tyear: startOfPeriod.getFullYear(),\n\t\t\tmonth: startOfPeriod.getMonth() + 1,\n\t\t\tday: startOfPeriod.getDate(),\n\t\t};\n\n\t\tif (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday: { $gte: startOfPeriodObject.day, $lte: day },\n\t\t\t};\n\t\t}\n\n\t\tif (year === startOfPeriodObject.year) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $gt: startOfPeriodObject.year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\n\tasync getUniqueDevicesOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueDevicesOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<ISession[]> {\n\t\treturn collection\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n};\n\nexport class SessionsRaw extends BaseRaw<ISession> {\n\tprotected indexes: IndexSpecification[] = [\n\t\t{ key: { instanceId: 1, sessionId: 1, year: 1, month: 1, day: 1 } },\n\t\t{ key: { instanceId: 1, sessionId: 1, userId: 1 } },\n\t\t{ key: { instanceId: 1, sessionId: 1 } },\n\t\t{ key: { sessionId: 1 } },\n\t\t{ key: { userId: 1 } },\n\t\t{ key: { year: 1, month: 1, day: 1, type: 1 } },\n\t\t{ key: { type: 1 } },\n\t\t{ key: { ip: 1, loginAt: 1 } },\n\t\t{ key: { _computedAt: 1 }, expireAfterSeconds: 60 * 60 * 24 * 45 },\n\t];\n\n\tprivate secondaryCollection: Collection<ISession>;\n\n\tconstructor(public readonly col: Collection<ISession>, public readonly colSecondary: Collection<ISession>, trash?: Collection<ISession>) {\n\t\tsuper(col, trash);\n\n\t\tthis.secondaryCollection = colSecondary;\n\t}\n\n\tasync getActiveUsersBetweenDates({ start, end }: DestructuredRange): Promise<ISession[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync findLastLoginByIp(ip: string): Promise<ISession | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tip,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: { loginAt: -1 },\n\t\t\t\tlimit: 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindSessionsNotClosedByDateWithoutLastActivity({ year, month, day }: DestructuredDate): Cursor<ISession> {\n\t\tconst query = {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getActiveUsersOfPeriodByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusersList: IUser['_id'][];\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusersList: IUser['_id'][];\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$day',\n\t\t\t\t\t\t\tmonth: '$month',\n\t\t\t\t\t\t\tyear: '$year',\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\tmonth: '$_id.month',\n\t\t\t\t\t\t\tyear: '$_id.year',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusersList: {\n\t\t\t\t\t\t\t$addToSet: '$_id.userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusersList: 1,\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getBusiestTimeWithinHoursPeriod({ start, end, groupSize }: DateRange & { groupSize: number }): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [0, 24, groupSize],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour('$range');\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id',\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionsByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: { year: '$year', month: '$month', day: '$day' },\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionByHourAndDayBetweenDates({ start, end }: DateRange): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [{ $hour: '$loginAt' }, { $sum: [{ $ifNull: [{ $hour: '$closedAt' }, 23] }, 1] }],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour({\n\t\t\trange: '$range',\n\t\t\tday: '$session.day',\n\t\t\tmonth: '$session.month',\n\t\t\tyear: '$session.year',\n\t\t});\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id.range',\n\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\t...getSortByFullDate(),\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getUniqueUsersOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfYesterday(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, { year, month, day }),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastMonth(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastWeek(): Promise<FullReturn> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateWriteOpResult | undefined> {\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\n\t\tif (!year || !month || !day || !sessionId || !instanceId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },\n\t\t\t{\n\t\t\t\t$set: data,\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync closeByInstanceIdAndSessionId(instanceId: string, sessionId: string): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst closeTime = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tclosedAt: closeTime,\n\t\t\t\tlastActivityAt: closeTime,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateActiveSessionsByDateAndInstanceIdAndIds(\n\t\t{ year, month, day }: Partial<DestructuredDate> = {},\n\t\tinstanceId: string,\n\t\tsessions: string[],\n\t\tdata = {},\n\t): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tsessionId: { $in: sessions },\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync updateActiveSessionsByDate({ year, month, day }: DestructuredDate, data = {}): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync logoutByInstanceIdAndSessionIdAndUserId(instanceId: string, sessionId: string, userId: string): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: 0 },\n\t\t};\n\n\t\tconst logoutAt = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync createBatch(sessions: ModelOptionalId<ISession>[]): Promise<BulkWriteOpResultObject | undefined> {\n\t\tif (!sessions || sessions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops: BulkWriteOperation<ISession>[] = [];\n\t\tsessions.forEach((doc) => {\n\t\t\tconst { year, month, day, sessionId, instanceId } = doc;\n\t\t\tdelete doc._id;\n\n\t\t\tops.push({\n\t\t\t\tupdateOne: {\n\t\t\t\t\tfilter: { year, month, day, sessionId, instanceId },\n\t\t\t\t\tupdate: {\n\t\t\t\t\t\t$set: doc,\n\t\t\t\t\t},\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\treturn this.col.bulkWrite(ops, { ordered: false });\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"ba539e1f935c37cbaa0edb318ea53218c458e412"}
