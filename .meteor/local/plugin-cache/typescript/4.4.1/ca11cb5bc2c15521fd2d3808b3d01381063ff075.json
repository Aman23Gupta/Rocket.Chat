{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/notifications/notifications.module.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/modules/notifications/notifications.module.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/notifications/notifications.module.ts","inputSourceMap":{"version":3,"file":"server/modules/notifications/notifications.module.ts","sourceRoot":"","sources":["server/modules/notifications/notifications.module.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IStreamer, IStreamerConstructor, IPublication } from 'meteor/rocketchat:streamer';\n\nimport { Authorization } from '../../sdk';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { emit, StreamPresence } from '../../../app/notifications/server/lib/Presence';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { IOmnichannelRoom } from '../../../definition/IRoom';\nimport { IUser } from '../../../definition/IUser';\nimport { SystemLogger } from '../../lib/logger/system';\n\ninterface IModelsParam {\n\tRooms: RoomsRaw;\n\tSubscriptions: SubscriptionsRaw;\n\tUsers: UsersRaw;\n\tSettings: SettingsRaw;\n}\n\nexport class NotificationsModule {\n\tpublic readonly streamLogged: IStreamer;\n\n\tpublic readonly streamAll: IStreamer;\n\n\tpublic readonly streamRoom: IStreamer;\n\n\tpublic readonly streamRoomUsers: IStreamer;\n\n\tpublic readonly streamUser: IStreamer;\n\n\tpublic readonly streamRoomMessage: IStreamer;\n\n\tpublic readonly streamImporters: IStreamer;\n\n\tpublic readonly streamRoles: IStreamer;\n\n\tpublic readonly streamApps: IStreamer;\n\n\tpublic readonly streamAppsEngine: IStreamer;\n\n\tpublic readonly streamCannedResponses: IStreamer;\n\n\tpublic readonly streamIntegrationHistory: IStreamer;\n\n\tpublic readonly streamLivechatRoom: IStreamer;\n\n\tpublic readonly streamLivechatQueueData: IStreamer;\n\n\tpublic readonly streamStdout: IStreamer;\n\n\tpublic readonly streamRoomData: IStreamer;\n\n\tpublic readonly streamLocal: IStreamer;\n\n\tpublic readonly streamPresence: IStreamer;\n\n\tconstructor(private Streamer: IStreamerConstructor) {\n\t\tthis.streamAll = new this.Streamer('notify-all');\n\t\tthis.streamLogged = new this.Streamer('notify-logged');\n\t\tthis.streamRoom = new this.Streamer('notify-room');\n\t\tthis.streamRoomUsers = new this.Streamer('notify-room-users');\n\t\tthis.streamImporters = new this.Streamer('importers', { retransmit: false });\n\t\tthis.streamRoles = new this.Streamer('roles');\n\t\tthis.streamApps = new this.Streamer('apps', { retransmit: false });\n\t\tthis.streamAppsEngine = new this.Streamer('apps-engine', { retransmit: false });\n\t\tthis.streamCannedResponses = new this.Streamer('canned-responses');\n\t\tthis.streamIntegrationHistory = new this.Streamer('integrationHistory');\n\t\tthis.streamLivechatRoom = new this.Streamer('livechat-room');\n\t\tthis.streamLivechatQueueData = new this.Streamer('livechat-inquiry-queue-observer');\n\t\tthis.streamStdout = new this.Streamer('stdout');\n\t\tthis.streamRoomData = new this.Streamer('room-data');\n\t\tthis.streamPresence = StreamPresence.getInstance(Streamer, 'user-presence');\n\t\tthis.streamRoomMessage = new this.Streamer('room-messages');\n\n\t\tthis.streamRoomMessage.on('_afterPublish', async (streamer: IStreamer, publication: IPublication, eventName: string): Promise<void> => {\n\t\t\tconst { userId } = publication._session;\n\t\t\tif (!userId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst userEvent = (clientAction: string, { rid }: { rid: string }): void => {\n\t\t\t\tswitch (clientAction) {\n\t\t\t\t\tcase 'removed':\n\t\t\t\t\t\tstreamer.removeListener(userId, userEvent);\n\t\t\t\t\t\tconst sub = [...streamer.subscriptions].find((sub) => sub.eventName === rid && sub.subscription.userId === userId);\n\t\t\t\t\t\tsub && streamer.removeSubscription(sub, eventName);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tstreamer.on(userId, userEvent);\n\n\t\t\tpublication.onStop(() => streamer.removeListener(userId, userEvent));\n\t\t});\n\n\t\tthis.streamUser = new this.Streamer('notify-user');\n\n\t\tthis.streamLocal = new this.Streamer('local');\n\t}\n\n\tasync configure({ Rooms, Subscriptions, Users, Settings }: IModelsParam): Promise<void> {\n\t\tconst notifyUser = this.notifyUser.bind(this);\n\n\t\tthis.streamRoomMessage.allowWrite('none');\n\t\tthis.streamRoomMessage.allowRead(async function (eventName, extraData) {\n\t\t\tconst room = await Rooms.findOneById(eventName);\n\t\t\tif (!room) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId || '' }, extraData);\n\t\t\tif (!canAccess) {\n\t\t\t\t// verify if can preview messages from public channels\n\t\t\t\tif (room.t === 'c' && this.userId) {\n\t\t\t\t\treturn Authorization.hasPermission(this.userId, 'preview-c-room');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.streamRoomMessage.allowRead('__my_messages__', 'all');\n\t\tthis.streamRoomMessage.allowEmit('__my_messages__', async function (_eventName, { rid }) {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\n\t\t\t\treturn {\n\t\t\t\t\troomParticipant: roomParticipant > 0,\n\t\t\t\t\troomType: room.t,\n\t\t\t\t\troomName: room.name,\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\t/* error*/\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tthis.streamAll.allowWrite('none');\n\t\tthis.streamAll.allowRead('all');\n\t\tthis.streamAll.allowRead('private-settings-changed', async function () {\n\t\t\tif (this.userId == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasAtLeastOnePermission(this.userId, [\n\t\t\t\t'view-privileged-setting',\n\t\t\t\t'edit-privileged-setting',\n\t\t\t\t'manage-selected-settings',\n\t\t\t]);\n\t\t});\n\n\t\tthis.streamLogged.allowWrite('none');\n\t\tthis.streamLogged.allowRead('logged');\n\n\t\tthis.streamRoom.allowRead(async function (eventName, extraData): Promise<boolean> {\n\t\t\tconst [rid, e] = eventName.split('/');\n\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// typing from livechat widget\n\t\t\tif (extraData?.token) {\n\t\t\t\t// TODO improve this to make a query 'v.token'\n\t\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(rid, {\n\t\t\t\t\tprojection: { 't': 1, 'v.token': 1 },\n\t\t\t\t});\n\t\t\t\treturn !!room && room.t === 'l' && room.v.token === extraData.token;\n\t\t\t}\n\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst subsCount = await Subscriptions.countByRoomIdAndUserId(rid, this.userId);\n\t\t\treturn subsCount > 0;\n\t\t});\n\n\t\tasync function canType({\n\t\t\tuserId,\n\t\t\tusername,\n\t\t\textraData,\n\t\t\trid,\n\t\t}: {\n\t\t\tuserId?: string;\n\t\t\tusername: string;\n\t\t\textraData?: { token: string };\n\t\t\trid: string;\n\t\t}): Promise<boolean> {\n\t\t\ttry {\n\t\t\t\t// typing from livechat widget\n\t\t\t\tif (extraData?.token) {\n\t\t\t\t\t// TODO improve this to make a query 'v.token'\n\t\t\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(rid, {\n\t\t\t\t\t\tprojection: { 't': 1, 'v.token': 1 },\n\t\t\t\t\t});\n\t\t\t\t\treturn !!room && room.t === 'l' && room.v.token === extraData.token;\n\t\t\t\t}\n\n\t\t\t\tif (!userId) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// TODO consider using something to cache settings\n\t\t\t\tconst key = (await Settings.getValueById('UI_Use_Real_Name')) ? 'name' : 'username';\n\n\t\t\t\tconst user = await Users.findOneById<Pick<IUser, 'name' | 'username'>>(userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t[key]: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (!user) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn user[key] === username;\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error: ', e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst { streamRoom } = this;\n\t\tthis.streamRoom.allowWrite(async function (eventName, username, _activity, extraData): Promise<boolean> {\n\t\t\tconst [rid, e] = eventName.split('/');\n\n\t\t\t// TODO should this use WEB_RTC_EVENTS enum?\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// In fact user-activity streamer will handle typing action.\n\t\t\t// Need to use 'typing' streamer till all other clients updated to use user-activity streamer.\n\t\t\tif (e !== 'typing' && e !== 'user-activity') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!(await canType({ extraData, rid, username, userId: this.userId }))) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// DEPRECATED\n\t\t\t// Keep compatibility between old and new events\n\t\t\tif (e === 'user-activity' && Array.isArray(_activity) && (_activity.length === 0 || _activity.includes('user-typing'))) {\n\t\t\t\tstreamRoom.emit(`${rid}/typing`, username, _activity.includes('user-typing'));\n\t\t\t} else if (e === 'typing') {\n\t\t\t\tstreamRoom.emit(`${rid}/user-activity`, username, _activity ? ['user-typing'] : [], extraData);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.streamRoomUsers.allowRead('none');\n\t\tthis.streamRoomUsers.allowWrite(async function (eventName, ...args) {\n\t\t\tconst [roomId, e] = eventName.split('/');\n\t\t\tif (!this.userId) {\n\t\t\t\tconst room = await Rooms.findOneById<IOmnichannelRoom>(roomId, {\n\t\t\t\t\tprojection: { 't': 1, 'servedBy._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (room && room.t === 'l' && e === 'webrtc' && room.servedBy) {\n\t\t\t\t\tnotifyUser(room.servedBy._id, e, ...args);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if ((await Subscriptions.countByRoomIdAndUserId(roomId, this.userId)) > 0) {\n\t\t\t\tconst livechatSubscriptions: ISubscription[] = await Subscriptions.findByLivechatRoomIdAndNotUserId(roomId, this.userId, {\n\t\t\t\t\tprojection: { 'v._id': 1, '_id': 0 },\n\t\t\t\t}).toArray();\n\t\t\t\tif (livechatSubscriptions && e === 'webrtc') {\n\t\t\t\t\tlivechatSubscriptions.forEach((subscription) => subscription.v && notifyUser(subscription.v._id, e, ...args));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst subscriptions: ISubscription[] = await Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId, {\n\t\t\t\t\tprojection: { 'u._id': 1, '_id': 0 },\n\t\t\t\t}).toArray();\n\t\t\t\tsubscriptions.forEach((subscription) => notifyUser(subscription.u._id, e, ...args));\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.streamUser.allowWrite(async function (eventName) {\n\t\t\tconst [, e] = eventName.split('/');\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn Boolean(this.userId);\n\t\t});\n\t\tthis.streamUser.allowRead(async function (eventName) {\n\t\t\tconst [userId, e] = eventName.split('/');\n\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn this.userId != null && this.userId === userId;\n\t\t});\n\n\t\tthis.streamImporters.allowRead('all');\n\t\tthis.streamImporters.allowEmit('all');\n\t\tthis.streamImporters.allowWrite('none');\n\n\t\tthis.streamApps.serverOnly = true;\n\t\tthis.streamApps.allowRead('all');\n\t\tthis.streamApps.allowEmit('all');\n\t\tthis.streamApps.allowWrite('none');\n\n\t\tthis.streamAppsEngine.serverOnly = true;\n\t\tthis.streamAppsEngine.allowRead('none');\n\t\tthis.streamAppsEngine.allowEmit('all');\n\t\tthis.streamAppsEngine.allowWrite('none');\n\n\t\tthis.streamCannedResponses.allowWrite('none');\n\t\tthis.streamCannedResponses.allowRead(async function () {\n\t\t\treturn (\n\t\t\t\t!!this.userId &&\n\t\t\t\t!!(await Settings.getValueById('Canned_Responses_Enable')) &&\n\t\t\t\tAuthorization.hasPermission(this.userId, 'view-canned-responses')\n\t\t\t);\n\t\t});\n\n\t\tthis.streamIntegrationHistory.allowWrite('none');\n\t\tthis.streamIntegrationHistory.allowRead(async function () {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasAtLeastOnePermission(this.userId, ['manage-outgoing-integrations', 'manage-own-outgoing-integrations']);\n\t\t});\n\n\t\tthis.streamLivechatRoom.allowRead(async function (roomId, extraData) {\n\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\t\tprojection: { _id: 0, t: 1, v: 1 },\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\tconsole.warn(`Invalid eventName: \"${roomId}\"`);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (room.t === 'l' && extraData?.visitorToken && room.v.token === extraData.visitorToken) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.streamLivechatQueueData.allowWrite('none');\n\t\tthis.streamLivechatQueueData.allowRead(async function () {\n\t\t\treturn this.userId ? Authorization.hasPermission(this.userId, 'view-l-room') : false;\n\t\t});\n\n\t\tthis.streamStdout.allowWrite('none');\n\t\tthis.streamStdout.allowRead(async function () {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasPermission(this.userId, 'view-logs');\n\t\t});\n\n\t\tthis.streamRoomData.allowWrite('none');\n\t\tthis.streamRoomData.allowRead(async function (rid) {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tthis.streamRoles.allowWrite('none');\n\t\tthis.streamRoles.allowRead('logged');\n\n\t\tthis.streamUser.on('_afterPublish', async (streamer: IStreamer, publication: IPublication, eventName: string): Promise<void> => {\n\t\t\tconst { userId } = publication._session;\n\t\t\tif (!userId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (/rooms-changed/.test(eventName)) {\n\t\t\t\t// TODO: change this to serialize only once\n\t\t\t\tconst roomEvent = (...args: any[]): void => {\n\t\t\t\t\t// TODO if receive a removed event could do => streamer.removeListener(rid, roomEvent);\n\t\t\t\t\tconst payload = streamer.changedPayload(streamer.subscriptionName, 'id', {\n\t\t\t\t\t\teventName: `${userId}/rooms-changed`,\n\t\t\t\t\t\targs,\n\t\t\t\t\t});\n\n\t\t\t\t\tpayload && publication._session.socket?.send(payload);\n\t\t\t\t};\n\n\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\t\t{ 'u._id': userId },\n\t\t\t\t\t{ projection: { rid: 1 } },\n\t\t\t\t).toArray();\n\n\t\t\t\tsubscriptions.forEach(({ rid }) => {\n\t\t\t\t\tstreamer.on(rid, roomEvent);\n\t\t\t\t});\n\n\t\t\t\tconst userEvent = async (clientAction: string, { rid }: Partial<ISubscription> = {}): Promise<void> => {\n\t\t\t\t\tif (!rid) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (clientAction) {\n\t\t\t\t\t\tcase 'inserted':\n\t\t\t\t\t\t\tsubscriptions.push({ rid });\n\t\t\t\t\t\t\tstreamer.on(rid, roomEvent);\n\n\t\t\t\t\t\t\t// after a subscription is added need to emit the room again\n\t\t\t\t\t\t\troomEvent('inserted', await Rooms.findOneById(rid));\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'removed':\n\t\t\t\t\t\t\tstreamer.removeListener(rid, roomEvent);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tstreamer.on(userId, userEvent);\n\n\t\t\t\tpublication.onStop(() => {\n\t\t\t\t\tstreamer.removeListener(userId, userEvent);\n\t\t\t\t\tsubscriptions.forEach(({ rid }) => streamer.removeListener(rid, roomEvent));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.streamLocal.serverOnly = true;\n\t\tthis.streamLocal.allowRead('none');\n\t\tthis.streamLocal.allowEmit('all');\n\t\tthis.streamLocal.allowWrite('none');\n\n\t\tthis.streamPresence.allowRead('logged');\n\t\tthis.streamPresence.allowWrite('none');\n\t}\n\n\tnotifyAll(eventName: string, ...args: any[]): void {\n\t\treturn this.streamAll.emit(eventName, ...args);\n\t}\n\n\tnotifyLogged(eventName: string, ...args: any[]): void {\n\t\treturn this.streamLogged.emit(eventName, ...args);\n\t}\n\n\tnotifyRoom(room: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamRoom.emit(`${room}/${eventName}`, ...args);\n\t}\n\n\tnotifyUser(userId: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamUser.emit(`${userId}/${eventName}`, ...args);\n\t}\n\n\tnotifyAllInThisInstance(eventName: string, ...args: any[]): void {\n\t\treturn this.streamAll.emitWithoutBroadcast(eventName, ...args);\n\t}\n\n\tnotifyLoggedInThisInstance(eventName: string, ...args: any[]): void {\n\t\treturn this.streamLogged.emitWithoutBroadcast(eventName, ...args);\n\t}\n\n\tnotifyRoomInThisInstance(room: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamRoom.emitWithoutBroadcast(`${room}/${eventName}`, ...args);\n\t}\n\n\tnotifyUserInThisInstance(userId: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamUser.emitWithoutBroadcast(`${userId}/${eventName}`, ...args);\n\t}\n\n\tsendPresence(uid: string, ...args: any[]): void {\n\t\t// if (this.debug === true) {\n\t\t// \tconsole.log('notifyUserAndBroadcast', [userId, eventName, ...args]);\n\t\t// }\n\t\temit(uid, args as any);\n\t\treturn this.streamPresence.emitWithoutBroadcast(uid, ...args);\n\t}\n\n\tprogressUpdated(progress: { rate: number }): void {\n\t\tthis.streamImporters.emit('progress', progress);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/modules/notifications/notifications.module.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/modules/notifications/notifications.module.ts"}},"code":"module.export({\n  NotificationsModule: () => NotificationsModule\n});\nlet Authorization;\nmodule.link(\"../../sdk\", {\n  Authorization(v) {\n    Authorization = v;\n  }\n\n}, 0);\nlet emit, StreamPresence;\nmodule.link(\"../../../app/notifications/server/lib/Presence\", {\n  emit(v) {\n    emit = v;\n  },\n\n  StreamPresence(v) {\n    StreamPresence = v;\n  }\n\n}, 1);\nlet SystemLogger;\nmodule.link(\"../../lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 2);\n\nclass NotificationsModule {\n  constructor(Streamer) {\n    this.Streamer = void 0;\n    this.streamLogged = void 0;\n    this.streamAll = void 0;\n    this.streamRoom = void 0;\n    this.streamRoomUsers = void 0;\n    this.streamUser = void 0;\n    this.streamRoomMessage = void 0;\n    this.streamImporters = void 0;\n    this.streamRoles = void 0;\n    this.streamApps = void 0;\n    this.streamAppsEngine = void 0;\n    this.streamCannedResponses = void 0;\n    this.streamIntegrationHistory = void 0;\n    this.streamLivechatRoom = void 0;\n    this.streamLivechatQueueData = void 0;\n    this.streamStdout = void 0;\n    this.streamRoomData = void 0;\n    this.streamLocal = void 0;\n    this.streamPresence = void 0;\n    this.Streamer = Streamer;\n    this.streamAll = new this.Streamer('notify-all');\n    this.streamLogged = new this.Streamer('notify-logged');\n    this.streamRoom = new this.Streamer('notify-room');\n    this.streamRoomUsers = new this.Streamer('notify-room-users');\n    this.streamImporters = new this.Streamer('importers', {\n      retransmit: false\n    });\n    this.streamRoles = new this.Streamer('roles');\n    this.streamApps = new this.Streamer('apps', {\n      retransmit: false\n    });\n    this.streamAppsEngine = new this.Streamer('apps-engine', {\n      retransmit: false\n    });\n    this.streamCannedResponses = new this.Streamer('canned-responses');\n    this.streamIntegrationHistory = new this.Streamer('integrationHistory');\n    this.streamLivechatRoom = new this.Streamer('livechat-room');\n    this.streamLivechatQueueData = new this.Streamer('livechat-inquiry-queue-observer');\n    this.streamStdout = new this.Streamer('stdout');\n    this.streamRoomData = new this.Streamer('room-data');\n    this.streamPresence = StreamPresence.getInstance(Streamer, 'user-presence');\n    this.streamRoomMessage = new this.Streamer('room-messages');\n    this.streamRoomMessage.on('_afterPublish', (streamer, publication, eventName) => Promise.asyncApply(() => {\n      const {\n        userId\n      } = publication._session;\n\n      if (!userId) {\n        return;\n      }\n\n      const userEvent = (clientAction, _ref) => {\n        let {\n          rid\n        } = _ref;\n\n        switch (clientAction) {\n          case 'removed':\n            streamer.removeListener(userId, userEvent);\n            const sub = [...streamer.subscriptions].find(sub => sub.eventName === rid && sub.subscription.userId === userId);\n            sub && streamer.removeSubscription(sub, eventName);\n            break;\n        }\n      };\n\n      streamer.on(userId, userEvent);\n      publication.onStop(() => streamer.removeListener(userId, userEvent));\n    }));\n    this.streamUser = new this.Streamer('notify-user');\n    this.streamLocal = new this.Streamer('local');\n  }\n\n  configure(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        Rooms,\n        Subscriptions,\n        Users,\n        Settings\n      } = _ref2;\n      const notifyUser = this.notifyUser.bind(this);\n      this.streamRoomMessage.allowWrite('none');\n      this.streamRoomMessage.allowRead(function (eventName, extraData) {\n        return Promise.asyncApply(() => {\n          const room = Promise.await(Rooms.findOneById(eventName));\n\n          if (!room) {\n            return false;\n          }\n\n          const canAccess = Promise.await(Authorization.canAccessRoom(room, {\n            _id: this.userId || ''\n          }, extraData));\n\n          if (!canAccess) {\n            // verify if can preview messages from public channels\n            if (room.t === 'c' && this.userId) {\n              return Authorization.hasPermission(this.userId, 'preview-c-room');\n            }\n\n            return false;\n          }\n\n          return true;\n        });\n      });\n      this.streamRoomMessage.allowRead('__my_messages__', 'all');\n      this.streamRoomMessage.allowEmit('__my_messages__', function (_eventName, _ref3) {\n        return Promise.asyncApply(() => {\n          let {\n            rid\n          } = _ref3;\n\n          if (!this.userId) {\n            return false;\n          }\n\n          try {\n            const room = Promise.await(Rooms.findOneById(rid));\n\n            if (!room) {\n              return false;\n            }\n\n            const canAccess = Promise.await(Authorization.canAccessRoom(room, {\n              _id: this.userId\n            }));\n\n            if (!canAccess) {\n              return false;\n            }\n\n            const roomParticipant = Promise.await(Subscriptions.countByRoomIdAndUserId(room._id, this.userId));\n            return {\n              roomParticipant: roomParticipant > 0,\n              roomType: room.t,\n              roomName: room.name\n            };\n          } catch (error) {\n            /* error*/\n            return false;\n          }\n        });\n      });\n      this.streamAll.allowWrite('none');\n      this.streamAll.allowRead('all');\n      this.streamAll.allowRead('private-settings-changed', function () {\n        return Promise.asyncApply(() => {\n          if (this.userId == null) {\n            return false;\n          }\n\n          return Authorization.hasAtLeastOnePermission(this.userId, ['view-privileged-setting', 'edit-privileged-setting', 'manage-selected-settings']);\n        });\n      });\n      this.streamLogged.allowWrite('none');\n      this.streamLogged.allowRead('logged');\n      this.streamRoom.allowRead(function (eventName, extraData) {\n        return Promise.asyncApply(() => {\n          const [rid, e] = eventName.split('/');\n\n          if (e === 'webrtc') {\n            return true;\n          } // typing from livechat widget\n\n\n          if (extraData !== null && extraData !== void 0 && extraData.token) {\n            // TODO improve this to make a query 'v.token'\n            const room = Promise.await(Rooms.findOneById(rid, {\n              projection: {\n                't': 1,\n                'v.token': 1\n              }\n            }));\n            return !!room && room.t === 'l' && room.v.token === extraData.token;\n          }\n\n          if (!this.userId) {\n            return false;\n          }\n\n          const subsCount = Promise.await(Subscriptions.countByRoomIdAndUserId(rid, this.userId));\n          return subsCount > 0;\n        });\n      });\n\n      function canType(_ref4) {\n        return Promise.asyncApply(() => {\n          let {\n            userId,\n            username,\n            extraData,\n            rid\n          } = _ref4;\n\n          try {\n            // typing from livechat widget\n            if (extraData !== null && extraData !== void 0 && extraData.token) {\n              // TODO improve this to make a query 'v.token'\n              const room = Promise.await(Rooms.findOneById(rid, {\n                projection: {\n                  't': 1,\n                  'v.token': 1\n                }\n              }));\n              return !!room && room.t === 'l' && room.v.token === extraData.token;\n            }\n\n            if (!userId) {\n              return false;\n            } // TODO consider using something to cache settings\n\n\n            const key = Promise.await(Settings.getValueById('UI_Use_Real_Name')) ? 'name' : 'username';\n            const user = Promise.await(Users.findOneById(userId, {\n              projection: {\n                [key]: 1\n              }\n            }));\n\n            if (!user) {\n              return false;\n            }\n\n            return user[key] === username;\n          } catch (e) {\n            SystemLogger.error('Error: ', e);\n            return false;\n          }\n        });\n      }\n\n      const {\n        streamRoom\n      } = this;\n      this.streamRoom.allowWrite(function (eventName, username, _activity, extraData) {\n        return Promise.asyncApply(() => {\n          const [rid, e] = eventName.split('/'); // TODO should this use WEB_RTC_EVENTS enum?\n\n          if (e === 'webrtc') {\n            return true;\n          } // In fact user-activity streamer will handle typing action.\n          // Need to use 'typing' streamer till all other clients updated to use user-activity streamer.\n\n\n          if (e !== 'typing' && e !== 'user-activity') {\n            return false;\n          }\n\n          if (!Promise.await(canType({\n            extraData,\n            rid,\n            username,\n            userId: this.userId\n          }))) {\n            return false;\n          } // DEPRECATED\n          // Keep compatibility between old and new events\n\n\n          if (e === 'user-activity' && Array.isArray(_activity) && (_activity.length === 0 || _activity.includes('user-typing'))) {\n            streamRoom.emit(\"\".concat(rid, \"/typing\"), username, _activity.includes('user-typing'));\n          } else if (e === 'typing') {\n            streamRoom.emit(\"\".concat(rid, \"/user-activity\"), username, _activity ? ['user-typing'] : [], extraData);\n          }\n\n          return true;\n        });\n      });\n      this.streamRoomUsers.allowRead('none');\n      this.streamRoomUsers.allowWrite(function (eventName) {\n        return Promise.asyncApply(() => {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          const [roomId, e] = eventName.split('/');\n\n          if (!this.userId) {\n            const room = Promise.await(Rooms.findOneById(roomId, {\n              projection: {\n                't': 1,\n                'servedBy._id': 1\n              }\n            }));\n\n            if (room && room.t === 'l' && e === 'webrtc' && room.servedBy) {\n              notifyUser(room.servedBy._id, e, ...args);\n              return false;\n            }\n          } else if (Promise.await(Subscriptions.countByRoomIdAndUserId(roomId, this.userId)) > 0) {\n            const livechatSubscriptions = Promise.await(Subscriptions.findByLivechatRoomIdAndNotUserId(roomId, this.userId, {\n              projection: {\n                'v._id': 1,\n                '_id': 0\n              }\n            }).toArray());\n\n            if (livechatSubscriptions && e === 'webrtc') {\n              livechatSubscriptions.forEach(subscription => subscription.v && notifyUser(subscription.v._id, e, ...args));\n              return false;\n            }\n\n            const subscriptions = Promise.await(Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId, {\n              projection: {\n                'u._id': 1,\n                '_id': 0\n              }\n            }).toArray());\n            subscriptions.forEach(subscription => notifyUser(subscription.u._id, e, ...args));\n          }\n\n          return false;\n        });\n      });\n      this.streamUser.allowWrite(function (eventName) {\n        return Promise.asyncApply(() => {\n          const [, e] = eventName.split('/');\n\n          if (e === 'webrtc') {\n            return true;\n          }\n\n          return Boolean(this.userId);\n        });\n      });\n      this.streamUser.allowRead(function (eventName) {\n        return Promise.asyncApply(() => {\n          const [userId, e] = eventName.split('/');\n\n          if (e === 'webrtc') {\n            return true;\n          }\n\n          return this.userId != null && this.userId === userId;\n        });\n      });\n      this.streamImporters.allowRead('all');\n      this.streamImporters.allowEmit('all');\n      this.streamImporters.allowWrite('none');\n      this.streamApps.serverOnly = true;\n      this.streamApps.allowRead('all');\n      this.streamApps.allowEmit('all');\n      this.streamApps.allowWrite('none');\n      this.streamAppsEngine.serverOnly = true;\n      this.streamAppsEngine.allowRead('none');\n      this.streamAppsEngine.allowEmit('all');\n      this.streamAppsEngine.allowWrite('none');\n      this.streamCannedResponses.allowWrite('none');\n      this.streamCannedResponses.allowRead(function () {\n        return Promise.asyncApply(() => {\n          return !!this.userId && !!Promise.await(Settings.getValueById('Canned_Responses_Enable')) && Authorization.hasPermission(this.userId, 'view-canned-responses');\n        });\n      });\n      this.streamIntegrationHistory.allowWrite('none');\n      this.streamIntegrationHistory.allowRead(function () {\n        return Promise.asyncApply(() => {\n          if (!this.userId) {\n            return false;\n          }\n\n          return Authorization.hasAtLeastOnePermission(this.userId, ['manage-outgoing-integrations', 'manage-own-outgoing-integrations']);\n        });\n      });\n      this.streamLivechatRoom.allowRead(function (roomId, extraData) {\n        return Promise.asyncApply(() => {\n          const room = Promise.await(Rooms.findOneById(roomId, {\n            projection: {\n              _id: 0,\n              t: 1,\n              v: 1\n            }\n          }));\n\n          if (!room) {\n            console.warn(\"Invalid eventName: \\\"\".concat(roomId, \"\\\"\"));\n            return false;\n          }\n\n          if (room.t === 'l' && extraData !== null && extraData !== void 0 && extraData.visitorToken && room.v.token === extraData.visitorToken) {\n            return true;\n          }\n\n          return false;\n        });\n      });\n      this.streamLivechatQueueData.allowWrite('none');\n      this.streamLivechatQueueData.allowRead(function () {\n        return Promise.asyncApply(() => {\n          return this.userId ? Authorization.hasPermission(this.userId, 'view-l-room') : false;\n        });\n      });\n      this.streamStdout.allowWrite('none');\n      this.streamStdout.allowRead(function () {\n        return Promise.asyncApply(() => {\n          if (!this.userId) {\n            return false;\n          }\n\n          return Authorization.hasPermission(this.userId, 'view-logs');\n        });\n      });\n      this.streamRoomData.allowWrite('none');\n      this.streamRoomData.allowRead(function (rid) {\n        return Promise.asyncApply(() => {\n          if (!this.userId) {\n            return false;\n          }\n\n          try {\n            const room = Promise.await(Rooms.findOneById(rid));\n\n            if (!room) {\n              return false;\n            }\n\n            const canAccess = Promise.await(Authorization.canAccessRoom(room, {\n              _id: this.userId\n            }));\n\n            if (!canAccess) {\n              return false;\n            }\n\n            return true;\n          } catch (error) {\n            return false;\n          }\n        });\n      });\n      this.streamRoles.allowWrite('none');\n      this.streamRoles.allowRead('logged');\n      this.streamUser.on('_afterPublish', (streamer, publication, eventName) => Promise.asyncApply(() => {\n        const {\n          userId\n        } = publication._session;\n\n        if (!userId) {\n          return;\n        }\n\n        if (/rooms-changed/.test(eventName)) {\n          // TODO: change this to serialize only once\n          const roomEvent = function () {\n            var _publication$_session;\n\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            // TODO if receive a removed event could do => streamer.removeListener(rid, roomEvent);\n            const payload = streamer.changedPayload(streamer.subscriptionName, 'id', {\n              eventName: \"\".concat(userId, \"/rooms-changed\"),\n              args\n            });\n            payload && ((_publication$_session = publication._session.socket) === null || _publication$_session === void 0 ? void 0 : _publication$_session.send(payload));\n          };\n\n          const subscriptions = Promise.await(Subscriptions.find({\n            'u._id': userId\n          }, {\n            projection: {\n              rid: 1\n            }\n          }).toArray());\n          subscriptions.forEach(_ref5 => {\n            let {\n              rid\n            } = _ref5;\n            streamer.on(rid, roomEvent);\n          });\n\n          const userEvent = function (clientAction) {\n            return Promise.asyncApply(() => {\n              let {\n                rid\n              } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              if (!rid) {\n                return;\n              }\n\n              switch (clientAction) {\n                case 'inserted':\n                  subscriptions.push({\n                    rid\n                  });\n                  streamer.on(rid, roomEvent); // after a subscription is added need to emit the room again\n\n                  roomEvent('inserted', Promise.await(Rooms.findOneById(rid)));\n                  break;\n\n                case 'removed':\n                  streamer.removeListener(rid, roomEvent);\n                  break;\n              }\n            });\n          };\n\n          streamer.on(userId, userEvent);\n          publication.onStop(() => {\n            streamer.removeListener(userId, userEvent);\n            subscriptions.forEach(_ref6 => {\n              let {\n                rid\n              } = _ref6;\n              return streamer.removeListener(rid, roomEvent);\n            });\n          });\n        }\n      }));\n      this.streamLocal.serverOnly = true;\n      this.streamLocal.allowRead('none');\n      this.streamLocal.allowEmit('all');\n      this.streamLocal.allowWrite('none');\n      this.streamPresence.allowRead('logged');\n      this.streamPresence.allowWrite('none');\n    });\n  }\n\n  notifyAll(eventName) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return this.streamAll.emit(eventName, ...args);\n  }\n\n  notifyLogged(eventName) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return this.streamLogged.emit(eventName, ...args);\n  }\n\n  notifyRoom(room, eventName) {\n    for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n      args[_key5 - 2] = arguments[_key5];\n    }\n\n    return this.streamRoom.emit(\"\".concat(room, \"/\").concat(eventName), ...args);\n  }\n\n  notifyUser(userId, eventName) {\n    for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n      args[_key6 - 2] = arguments[_key6];\n    }\n\n    return this.streamUser.emit(\"\".concat(userId, \"/\").concat(eventName), ...args);\n  }\n\n  notifyAllInThisInstance(eventName) {\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    return this.streamAll.emitWithoutBroadcast(eventName, ...args);\n  }\n\n  notifyLoggedInThisInstance(eventName) {\n    for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      args[_key8 - 1] = arguments[_key8];\n    }\n\n    return this.streamLogged.emitWithoutBroadcast(eventName, ...args);\n  }\n\n  notifyRoomInThisInstance(room, eventName) {\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    return this.streamRoom.emitWithoutBroadcast(\"\".concat(room, \"/\").concat(eventName), ...args);\n  }\n\n  notifyUserInThisInstance(userId, eventName) {\n    for (var _len10 = arguments.length, args = new Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n      args[_key10 - 2] = arguments[_key10];\n    }\n\n    return this.streamUser.emitWithoutBroadcast(\"\".concat(userId, \"/\").concat(eventName), ...args);\n  }\n\n  sendPresence(uid) {\n    for (var _len11 = arguments.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n      args[_key11 - 1] = arguments[_key11];\n    }\n\n    // if (this.debug === true) {\n    // \tconsole.log('notifyUserAndBroadcast', [userId, eventName, ...args]);\n    // }\n    emit(uid, args);\n    return this.streamPresence.emitWithoutBroadcast(uid, ...args);\n  }\n\n  progressUpdated(progress) {\n    this.streamImporters.emit('progress', progress);\n  }\n\n}","map":{"version":3,"sources":["server/modules/notifications/notifications.module.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IStreamer, IStreamerConstructor, IPublication } from 'meteor/rocketchat:streamer';\n\nimport { Authorization } from '../../sdk';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { emit, StreamPresence } from '../../../app/notifications/server/lib/Presence';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { SettingsRaw } from '../../../app/models/server/raw/Settings';\nimport { IOmnichannelRoom } from '../../../definition/IRoom';\nimport { IUser } from '../../../definition/IUser';\nimport { SystemLogger } from '../../lib/logger/system';\n\ninterface IModelsParam {\n\tRooms: RoomsRaw;\n\tSubscriptions: SubscriptionsRaw;\n\tUsers: UsersRaw;\n\tSettings: SettingsRaw;\n}\n\nexport class NotificationsModule {\n\tpublic readonly streamLogged: IStreamer;\n\n\tpublic readonly streamAll: IStreamer;\n\n\tpublic readonly streamRoom: IStreamer;\n\n\tpublic readonly streamRoomUsers: IStreamer;\n\n\tpublic readonly streamUser: IStreamer;\n\n\tpublic readonly streamRoomMessage: IStreamer;\n\n\tpublic readonly streamImporters: IStreamer;\n\n\tpublic readonly streamRoles: IStreamer;\n\n\tpublic readonly streamApps: IStreamer;\n\n\tpublic readonly streamAppsEngine: IStreamer;\n\n\tpublic readonly streamCannedResponses: IStreamer;\n\n\tpublic readonly streamIntegrationHistory: IStreamer;\n\n\tpublic readonly streamLivechatRoom: IStreamer;\n\n\tpublic readonly streamLivechatQueueData: IStreamer;\n\n\tpublic readonly streamStdout: IStreamer;\n\n\tpublic readonly streamRoomData: IStreamer;\n\n\tpublic readonly streamLocal: IStreamer;\n\n\tpublic readonly streamPresence: IStreamer;\n\n\tconstructor(private Streamer: IStreamerConstructor) {\n\t\tthis.streamAll = new this.Streamer('notify-all');\n\t\tthis.streamLogged = new this.Streamer('notify-logged');\n\t\tthis.streamRoom = new this.Streamer('notify-room');\n\t\tthis.streamRoomUsers = new this.Streamer('notify-room-users');\n\t\tthis.streamImporters = new this.Streamer('importers', { retransmit: false });\n\t\tthis.streamRoles = new this.Streamer('roles');\n\t\tthis.streamApps = new this.Streamer('apps', { retransmit: false });\n\t\tthis.streamAppsEngine = new this.Streamer('apps-engine', { retransmit: false });\n\t\tthis.streamCannedResponses = new this.Streamer('canned-responses');\n\t\tthis.streamIntegrationHistory = new this.Streamer('integrationHistory');\n\t\tthis.streamLivechatRoom = new this.Streamer('livechat-room');\n\t\tthis.streamLivechatQueueData = new this.Streamer('livechat-inquiry-queue-observer');\n\t\tthis.streamStdout = new this.Streamer('stdout');\n\t\tthis.streamRoomData = new this.Streamer('room-data');\n\t\tthis.streamPresence = StreamPresence.getInstance(Streamer, 'user-presence');\n\t\tthis.streamRoomMessage = new this.Streamer('room-messages');\n\n\t\tthis.streamRoomMessage.on('_afterPublish', async (streamer: IStreamer, publication: IPublication, eventName: string): Promise<void> => {\n\t\t\tconst { userId } = publication._session;\n\t\t\tif (!userId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst userEvent = (clientAction: string, { rid }: { rid: string }): void => {\n\t\t\t\tswitch (clientAction) {\n\t\t\t\t\tcase 'removed':\n\t\t\t\t\t\tstreamer.removeListener(userId, userEvent);\n\t\t\t\t\t\tconst sub = [...streamer.subscriptions].find((sub) => sub.eventName === rid && sub.subscription.userId === userId);\n\t\t\t\t\t\tsub && streamer.removeSubscription(sub, eventName);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tstreamer.on(userId, userEvent);\n\n\t\t\tpublication.onStop(() => streamer.removeListener(userId, userEvent));\n\t\t});\n\n\t\tthis.streamUser = new this.Streamer('notify-user');\n\n\t\tthis.streamLocal = new this.Streamer('local');\n\t}\n\n\tasync configure({ Rooms, Subscriptions, Users, Settings }: IModelsParam): Promise<void> {\n\t\tconst notifyUser = this.notifyUser.bind(this);\n\n\t\tthis.streamRoomMessage.allowWrite('none');\n\t\tthis.streamRoomMessage.allowRead(async function (eventName, extraData) {\n\t\t\tconst room = await Rooms.findOneById(eventName);\n\t\t\tif (!room) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId || '' }, extraData);\n\t\t\tif (!canAccess) {\n\t\t\t\t// verify if can preview messages from public channels\n\t\t\t\tif (room.t === 'c' && this.userId) {\n\t\t\t\t\treturn Authorization.hasPermission(this.userId, 'preview-c-room');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.streamRoomMessage.allowRead('__my_messages__', 'all');\n\t\tthis.streamRoomMessage.allowEmit('__my_messages__', async function (_eventName, { rid }) {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\n\t\t\t\treturn {\n\t\t\t\t\troomParticipant: roomParticipant > 0,\n\t\t\t\t\troomType: room.t,\n\t\t\t\t\troomName: room.name,\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\t/* error*/\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tthis.streamAll.allowWrite('none');\n\t\tthis.streamAll.allowRead('all');\n\t\tthis.streamAll.allowRead('private-settings-changed', async function () {\n\t\t\tif (this.userId == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasAtLeastOnePermission(this.userId, [\n\t\t\t\t'view-privileged-setting',\n\t\t\t\t'edit-privileged-setting',\n\t\t\t\t'manage-selected-settings',\n\t\t\t]);\n\t\t});\n\n\t\tthis.streamLogged.allowWrite('none');\n\t\tthis.streamLogged.allowRead('logged');\n\n\t\tthis.streamRoom.allowRead(async function (eventName, extraData): Promise<boolean> {\n\t\t\tconst [rid, e] = eventName.split('/');\n\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// typing from livechat widget\n\t\t\tif (extraData?.token) {\n\t\t\t\t// TODO improve this to make a query 'v.token'\n\t\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(rid, {\n\t\t\t\t\tprojection: { 't': 1, 'v.token': 1 },\n\t\t\t\t});\n\t\t\t\treturn !!room && room.t === 'l' && room.v.token === extraData.token;\n\t\t\t}\n\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst subsCount = await Subscriptions.countByRoomIdAndUserId(rid, this.userId);\n\t\t\treturn subsCount > 0;\n\t\t});\n\n\t\tasync function canType({\n\t\t\tuserId,\n\t\t\tusername,\n\t\t\textraData,\n\t\t\trid,\n\t\t}: {\n\t\t\tuserId?: string;\n\t\t\tusername: string;\n\t\t\textraData?: { token: string };\n\t\t\trid: string;\n\t\t}): Promise<boolean> {\n\t\t\ttry {\n\t\t\t\t// typing from livechat widget\n\t\t\t\tif (extraData?.token) {\n\t\t\t\t\t// TODO improve this to make a query 'v.token'\n\t\t\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(rid, {\n\t\t\t\t\t\tprojection: { 't': 1, 'v.token': 1 },\n\t\t\t\t\t});\n\t\t\t\t\treturn !!room && room.t === 'l' && room.v.token === extraData.token;\n\t\t\t\t}\n\n\t\t\t\tif (!userId) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// TODO consider using something to cache settings\n\t\t\t\tconst key = (await Settings.getValueById('UI_Use_Real_Name')) ? 'name' : 'username';\n\n\t\t\t\tconst user = await Users.findOneById<Pick<IUser, 'name' | 'username'>>(userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t[key]: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (!user) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn user[key] === username;\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error: ', e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst { streamRoom } = this;\n\t\tthis.streamRoom.allowWrite(async function (eventName, username, _activity, extraData): Promise<boolean> {\n\t\t\tconst [rid, e] = eventName.split('/');\n\n\t\t\t// TODO should this use WEB_RTC_EVENTS enum?\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// In fact user-activity streamer will handle typing action.\n\t\t\t// Need to use 'typing' streamer till all other clients updated to use user-activity streamer.\n\t\t\tif (e !== 'typing' && e !== 'user-activity') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!(await canType({ extraData, rid, username, userId: this.userId }))) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// DEPRECATED\n\t\t\t// Keep compatibility between old and new events\n\t\t\tif (e === 'user-activity' && Array.isArray(_activity) && (_activity.length === 0 || _activity.includes('user-typing'))) {\n\t\t\t\tstreamRoom.emit(`${rid}/typing`, username, _activity.includes('user-typing'));\n\t\t\t} else if (e === 'typing') {\n\t\t\t\tstreamRoom.emit(`${rid}/user-activity`, username, _activity ? ['user-typing'] : [], extraData);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.streamRoomUsers.allowRead('none');\n\t\tthis.streamRoomUsers.allowWrite(async function (eventName, ...args) {\n\t\t\tconst [roomId, e] = eventName.split('/');\n\t\t\tif (!this.userId) {\n\t\t\t\tconst room = await Rooms.findOneById<IOmnichannelRoom>(roomId, {\n\t\t\t\t\tprojection: { 't': 1, 'servedBy._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (room && room.t === 'l' && e === 'webrtc' && room.servedBy) {\n\t\t\t\t\tnotifyUser(room.servedBy._id, e, ...args);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if ((await Subscriptions.countByRoomIdAndUserId(roomId, this.userId)) > 0) {\n\t\t\t\tconst livechatSubscriptions: ISubscription[] = await Subscriptions.findByLivechatRoomIdAndNotUserId(roomId, this.userId, {\n\t\t\t\t\tprojection: { 'v._id': 1, '_id': 0 },\n\t\t\t\t}).toArray();\n\t\t\t\tif (livechatSubscriptions && e === 'webrtc') {\n\t\t\t\t\tlivechatSubscriptions.forEach((subscription) => subscription.v && notifyUser(subscription.v._id, e, ...args));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst subscriptions: ISubscription[] = await Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId, {\n\t\t\t\t\tprojection: { 'u._id': 1, '_id': 0 },\n\t\t\t\t}).toArray();\n\t\t\t\tsubscriptions.forEach((subscription) => notifyUser(subscription.u._id, e, ...args));\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.streamUser.allowWrite(async function (eventName) {\n\t\t\tconst [, e] = eventName.split('/');\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn Boolean(this.userId);\n\t\t});\n\t\tthis.streamUser.allowRead(async function (eventName) {\n\t\t\tconst [userId, e] = eventName.split('/');\n\n\t\t\tif (e === 'webrtc') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn this.userId != null && this.userId === userId;\n\t\t});\n\n\t\tthis.streamImporters.allowRead('all');\n\t\tthis.streamImporters.allowEmit('all');\n\t\tthis.streamImporters.allowWrite('none');\n\n\t\tthis.streamApps.serverOnly = true;\n\t\tthis.streamApps.allowRead('all');\n\t\tthis.streamApps.allowEmit('all');\n\t\tthis.streamApps.allowWrite('none');\n\n\t\tthis.streamAppsEngine.serverOnly = true;\n\t\tthis.streamAppsEngine.allowRead('none');\n\t\tthis.streamAppsEngine.allowEmit('all');\n\t\tthis.streamAppsEngine.allowWrite('none');\n\n\t\tthis.streamCannedResponses.allowWrite('none');\n\t\tthis.streamCannedResponses.allowRead(async function () {\n\t\t\treturn (\n\t\t\t\t!!this.userId &&\n\t\t\t\t!!(await Settings.getValueById('Canned_Responses_Enable')) &&\n\t\t\t\tAuthorization.hasPermission(this.userId, 'view-canned-responses')\n\t\t\t);\n\t\t});\n\n\t\tthis.streamIntegrationHistory.allowWrite('none');\n\t\tthis.streamIntegrationHistory.allowRead(async function () {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasAtLeastOnePermission(this.userId, ['manage-outgoing-integrations', 'manage-own-outgoing-integrations']);\n\t\t});\n\n\t\tthis.streamLivechatRoom.allowRead(async function (roomId, extraData) {\n\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\t\tprojection: { _id: 0, t: 1, v: 1 },\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\tconsole.warn(`Invalid eventName: \"${roomId}\"`);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (room.t === 'l' && extraData?.visitorToken && room.v.token === extraData.visitorToken) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.streamLivechatQueueData.allowWrite('none');\n\t\tthis.streamLivechatQueueData.allowRead(async function () {\n\t\t\treturn this.userId ? Authorization.hasPermission(this.userId, 'view-l-room') : false;\n\t\t});\n\n\t\tthis.streamStdout.allowWrite('none');\n\t\tthis.streamStdout.allowRead(async function () {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Authorization.hasPermission(this.userId, 'view-logs');\n\t\t});\n\n\t\tthis.streamRoomData.allowWrite('none');\n\t\tthis.streamRoomData.allowRead(async function (rid) {\n\t\t\tif (!this.userId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tthis.streamRoles.allowWrite('none');\n\t\tthis.streamRoles.allowRead('logged');\n\n\t\tthis.streamUser.on('_afterPublish', async (streamer: IStreamer, publication: IPublication, eventName: string): Promise<void> => {\n\t\t\tconst { userId } = publication._session;\n\t\t\tif (!userId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (/rooms-changed/.test(eventName)) {\n\t\t\t\t// TODO: change this to serialize only once\n\t\t\t\tconst roomEvent = (...args: any[]): void => {\n\t\t\t\t\t// TODO if receive a removed event could do => streamer.removeListener(rid, roomEvent);\n\t\t\t\t\tconst payload = streamer.changedPayload(streamer.subscriptionName, 'id', {\n\t\t\t\t\t\teventName: `${userId}/rooms-changed`,\n\t\t\t\t\t\targs,\n\t\t\t\t\t});\n\n\t\t\t\t\tpayload && publication._session.socket?.send(payload);\n\t\t\t\t};\n\n\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\t\t{ 'u._id': userId },\n\t\t\t\t\t{ projection: { rid: 1 } },\n\t\t\t\t).toArray();\n\n\t\t\t\tsubscriptions.forEach(({ rid }) => {\n\t\t\t\t\tstreamer.on(rid, roomEvent);\n\t\t\t\t});\n\n\t\t\t\tconst userEvent = async (clientAction: string, { rid }: Partial<ISubscription> = {}): Promise<void> => {\n\t\t\t\t\tif (!rid) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (clientAction) {\n\t\t\t\t\t\tcase 'inserted':\n\t\t\t\t\t\t\tsubscriptions.push({ rid });\n\t\t\t\t\t\t\tstreamer.on(rid, roomEvent);\n\n\t\t\t\t\t\t\t// after a subscription is added need to emit the room again\n\t\t\t\t\t\t\troomEvent('inserted', await Rooms.findOneById(rid));\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'removed':\n\t\t\t\t\t\t\tstreamer.removeListener(rid, roomEvent);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tstreamer.on(userId, userEvent);\n\n\t\t\t\tpublication.onStop(() => {\n\t\t\t\t\tstreamer.removeListener(userId, userEvent);\n\t\t\t\t\tsubscriptions.forEach(({ rid }) => streamer.removeListener(rid, roomEvent));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.streamLocal.serverOnly = true;\n\t\tthis.streamLocal.allowRead('none');\n\t\tthis.streamLocal.allowEmit('all');\n\t\tthis.streamLocal.allowWrite('none');\n\n\t\tthis.streamPresence.allowRead('logged');\n\t\tthis.streamPresence.allowWrite('none');\n\t}\n\n\tnotifyAll(eventName: string, ...args: any[]): void {\n\t\treturn this.streamAll.emit(eventName, ...args);\n\t}\n\n\tnotifyLogged(eventName: string, ...args: any[]): void {\n\t\treturn this.streamLogged.emit(eventName, ...args);\n\t}\n\n\tnotifyRoom(room: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamRoom.emit(`${room}/${eventName}`, ...args);\n\t}\n\n\tnotifyUser(userId: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamUser.emit(`${userId}/${eventName}`, ...args);\n\t}\n\n\tnotifyAllInThisInstance(eventName: string, ...args: any[]): void {\n\t\treturn this.streamAll.emitWithoutBroadcast(eventName, ...args);\n\t}\n\n\tnotifyLoggedInThisInstance(eventName: string, ...args: any[]): void {\n\t\treturn this.streamLogged.emitWithoutBroadcast(eventName, ...args);\n\t}\n\n\tnotifyRoomInThisInstance(room: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamRoom.emitWithoutBroadcast(`${room}/${eventName}`, ...args);\n\t}\n\n\tnotifyUserInThisInstance(userId: string, eventName: string, ...args: any[]): void {\n\t\treturn this.streamUser.emitWithoutBroadcast(`${userId}/${eventName}`, ...args);\n\t}\n\n\tsendPresence(uid: string, ...args: any[]): void {\n\t\t// if (this.debug === true) {\n\t\t// \tconsole.log('notifyUserAndBroadcast', [userId, eventName, ...args]);\n\t\t// }\n\t\temit(uid, args as any);\n\t\treturn this.streamPresence.emitWithoutBroadcast(uid, ...args);\n\t}\n\n\tprogressUpdated(progress: { rate: number }): void {\n\t\tthis.streamImporters.emit('progress', progress);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"ca11cb5bc2c15521fd2d3808b3d01381063ff075"}
