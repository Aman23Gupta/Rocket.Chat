{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/settings.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/settings.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/settings.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/settings.ts","sourceRoot":"","sources":["app/apps/server/bridges/settings.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,6DAA6D,CAAC;AAElG,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAGtD,MAAM,OAAO,gBAAiB,SAAQ,mBAAmB;IAE3B;IAD7B,6CAA6C;IAC7C,YAA6B,IAA2B;QACvD,KAAK,EAAE,CAAC;QADoB,SAAI,GAAJ,IAAI,CAAuB;IAExD,CAAC;IAES,KAAK,CAAC,MAAM,CAAC,KAAa;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,+BAA+B,CAAC,CAAC;QAEpE,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAClE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,KAAa;QACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,iCAAiC,EAAE,GAAG,CAAC,CAAC;QAE3E,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;SACxD;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACnE,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,KAAa;QACpD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,yBAAyB,IAAI,GAAG,CAAC,CAAC;QAErE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC5C,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,KAAa;QACpD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,2BAA2B,EAAE,GAAG,CAAC,CAAC;QAErE,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;SACxD;QAED,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC5C,CAAC;IAES,KAAK,CAAC,cAAc,CAAC,EAAU,EAAE,KAAa;QACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,6CAA6C,EAAE,GAAG,CAAC,CAAC;QACvF,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC/C,OAAO,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,OAAkC,EAAE,KAAa;QAC1E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,4BAA4B,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;QAE/E,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,EAAE;YACpD,MAAM,IAAI,KAAK,CAAC,gBAAgB,OAAO,CAAC,EAAE,oBAAoB,CAAC,CAAC;SAChE;QAED,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC5C,CAAC;CACD","sourcesContent":["import { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport { ServerSettingBridge } from '@rocket.chat/apps-engine/server/bridges/ServerSettingBridge';\n\nimport { Settings } from '../../../models/server/raw';\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppSettingBridge extends ServerSettingBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async getAll(appId: string): Promise<Array<ISetting>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting all the settings.`);\n\n\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\treturn settings.map((s) => this.orch.getConverters()?.get('settings').convertToApp(s));\n\t}\n\n\tprotected async getOneById(id: string, appId: string): Promise<ISetting> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the setting by id ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('settings').convertById(id);\n\t}\n\n\tprotected async hideGroup(name: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the group ${name}.`);\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async hideSetting(id: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async isReadableById(id: string, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is checking if they can read the setting ${id}.`);\n\t\tconst setting = await Settings.findOneById(id);\n\t\treturn Boolean(setting && !setting.secret);\n\t}\n\n\tprotected async updateOne(setting: ISetting & { id: string }, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the setting ${setting.id} .`);\n\n\t\tif (!(await this.isReadableById(setting.id, appId))) {\n\t\t\tthrow new Error(`The setting \"${setting.id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/settings.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/settings.ts"}},"code":"module.export({\n  AppSettingBridge: () => AppSettingBridge\n});\nlet ServerSettingBridge;\nmodule.link(\"@rocket.chat/apps-engine/server/bridges/ServerSettingBridge\", {\n  ServerSettingBridge(v) {\n    ServerSettingBridge = v;\n  }\n\n}, 0);\nlet Settings;\nmodule.link(\"../../../models/server/raw\", {\n  Settings(v) {\n    Settings = v;\n  }\n\n}, 1);\n\nclass AppSettingBridge extends ServerSettingBridge {\n  // eslint-disable-next-line no-empty-function\n  constructor(orch) {\n    super();\n    this.orch = void 0;\n    this.orch = orch;\n  }\n\n  getAll(appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting all the settings.\"));\n      const settings = Promise.await(Settings.find({\n        secret: false\n      }).toArray());\n      return settings.map(s => {\n        var _this$orch$getConvert;\n\n        return (_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('settings').convertToApp(s);\n      });\n    });\n  }\n\n  getOneById(id, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert2;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the setting by id \").concat(id, \".\"));\n\n      if (!Promise.await(this.isReadableById(id, appId))) {\n        throw new Error(\"The setting \\\"\".concat(id, \"\\\" is not readable.\"));\n      }\n\n      return (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('settings').convertById(id);\n    });\n  }\n\n  hideGroup(name, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is hidding the group \").concat(name, \".\"));\n      throw new Error('Method not implemented.');\n    });\n  }\n\n  hideSetting(id, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is hidding the setting \").concat(id, \".\"));\n\n      if (!Promise.await(this.isReadableById(id, appId))) {\n        throw new Error(\"The setting \\\"\".concat(id, \"\\\" is not readable.\"));\n      }\n\n      throw new Error('Method not implemented.');\n    });\n  }\n\n  isReadableById(id, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is checking if they can read the setting \").concat(id, \".\"));\n      const setting = Promise.await(Settings.findOneById(id));\n      return Boolean(setting && !setting.secret);\n    });\n  }\n\n  updateOne(setting, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating the setting \").concat(setting.id, \" .\"));\n\n      if (!Promise.await(this.isReadableById(setting.id, appId))) {\n        throw new Error(\"The setting \\\"\".concat(setting.id, \"\\\" is not readable.\"));\n      }\n\n      throw new Error('Method not implemented.');\n    });\n  }\n\n}","map":{"version":3,"sources":["app/apps/server/bridges/settings.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport { ServerSettingBridge } from '@rocket.chat/apps-engine/server/bridges/ServerSettingBridge';\n\nimport { Settings } from '../../../models/server/raw';\nimport { AppServerOrchestrator } from '../orchestrator';\n\nexport class AppSettingBridge extends ServerSettingBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async getAll(appId: string): Promise<Array<ISetting>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting all the settings.`);\n\n\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\treturn settings.map((s) => this.orch.getConverters()?.get('settings').convertToApp(s));\n\t}\n\n\tprotected async getOneById(id: string, appId: string): Promise<ISetting> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the setting by id ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('settings').convertById(id);\n\t}\n\n\tprotected async hideGroup(name: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the group ${name}.`);\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async hideSetting(id: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async isReadableById(id: string, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is checking if they can read the setting ${id}.`);\n\t\tconst setting = await Settings.findOneById(id);\n\t\treturn Boolean(setting && !setting.secret);\n\t}\n\n\tprotected async updateOne(setting: ISetting & { id: string }, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the setting ${setting.id} .`);\n\n\t\tif (!(await this.isReadableById(setting.id, appId))) {\n\t\t\tthrow new Error(`The setting \"${setting.id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"b0abd1b671151f9589112e9964b97a49f561030d"}
