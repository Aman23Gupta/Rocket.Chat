{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/lib/webdavClientAdapter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/webdav/server/lib/webdavClientAdapter.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/lib/webdavClientAdapter.ts","inputSourceMap":{"version":3,"file":"app/webdav/server/lib/webdavClientAdapter.ts","sourceRoot":"","sources":["app/webdav/server/lib/webdavClientAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, WebDavClient, Stat } from 'webdav';\n\nexport type ServerCredentials = {\n\ttoken?: string;\n\tusername?: string;\n\tpassword?: string;\n};\n\nexport class WebdavClientAdapter {\n\t_client: WebDavClient;\n\n\tconstructor(serverConfig: string, cred: ServerCredentials) {\n\t\tif (cred.token) {\n\t\t\tthis._client = createClient(serverConfig, { token: cred.token });\n\t\t} else {\n\t\t\tthis._client = createClient(serverConfig, {\n\t\t\t\tusername: cred.username,\n\t\t\t\tpassword: cred.password,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync stat(path: string): Promise<undefined> {\n\t\ttry {\n\t\t\treturn await this._client.stat(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\terror.response && error.response.statusText ? error.response.statusText : 'Error checking if directory exists on webdav',\n\t\t\t);\n\t\t}\n\t}\n\n\tasync createDirectory(path: string): Promise<Response> {\n\t\ttry {\n\t\t\treturn await this._client.createDirectory(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error creating directory on webdav');\n\t\t}\n\t}\n\n\tasync deleteFile(path: string): Promise<Response> {\n\t\ttry {\n\t\t\treturn await this._client.deleteFile(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error deleting file on webdav');\n\t\t}\n\t}\n\n\tasync getFileContents(filename: string): Promise<Buffer> {\n\t\ttry {\n\t\t\treturn (await this._client.getFileContents(filename)) as Buffer;\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting file contents webdav');\n\t\t}\n\t}\n\n\tasync getDirectoryContents(path: string): Promise<Array<Stat>> {\n\t\ttry {\n\t\t\treturn await this._client.getDirectoryContents(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting directory contents webdav');\n\t\t}\n\t}\n\n\tasync putFileContents(path: string, data: Buffer, options: Record<string, any> = {}): Promise<any> {\n\t\ttry {\n\t\t\treturn await this._client.putFileContents(path, data, options);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response?.statusText ?? 'Error updating file contents.');\n\t\t}\n\t}\n\n\tcreateReadStream(path: string, options?: Record<string, any>): ReadableStream {\n\t\treturn this._client.createReadStream(path, options);\n\t}\n\n\tcreateWriteStream(path: string): WritableStream {\n\t\treturn this._client.createWriteStream(path);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/lib/webdavClientAdapter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/webdav/server/lib/webdavClientAdapter.ts"}},"code":"module.export({\n  WebdavClientAdapter: () => WebdavClientAdapter\n});\nlet createClient;\nmodule.link(\"webdav\", {\n  createClient(v) {\n    createClient = v;\n  }\n\n}, 0);\n\nclass WebdavClientAdapter {\n  constructor(serverConfig, cred) {\n    this._client = void 0;\n\n    if (cred.token) {\n      this._client = createClient(serverConfig, {\n        token: cred.token\n      });\n    } else {\n      this._client = createClient(serverConfig, {\n        username: cred.username,\n        password: cred.password\n      });\n    }\n  }\n\n  stat(path) {\n    return Promise.asyncApply(() => {\n      try {\n        return Promise.await(this._client.stat(path));\n      } catch (error) {\n        throw new Error(error.response && error.response.statusText ? error.response.statusText : 'Error checking if directory exists on webdav');\n      }\n    });\n  }\n\n  createDirectory(path) {\n    return Promise.asyncApply(() => {\n      try {\n        return Promise.await(this._client.createDirectory(path));\n      } catch (error) {\n        throw new Error(error.response && error.response.statusText ? error.response.statusText : 'Error creating directory on webdav');\n      }\n    });\n  }\n\n  deleteFile(path) {\n    return Promise.asyncApply(() => {\n      try {\n        return Promise.await(this._client.deleteFile(path));\n      } catch (error) {\n        throw new Error(error.response && error.response.statusText ? error.response.statusText : 'Error deleting file on webdav');\n      }\n    });\n  }\n\n  getFileContents(filename) {\n    return Promise.asyncApply(() => {\n      try {\n        return Promise.await(this._client.getFileContents(filename));\n      } catch (error) {\n        throw new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting file contents webdav');\n      }\n    });\n  }\n\n  getDirectoryContents(path) {\n    return Promise.asyncApply(() => {\n      try {\n        return Promise.await(this._client.getDirectoryContents(path));\n      } catch (error) {\n        throw new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting directory contents webdav');\n      }\n    });\n  }\n\n  putFileContents(path, data) {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      try {\n        return Promise.await(this._client.putFileContents(path, data, options));\n      } catch (error) {\n        var _error$response$statu, _error$response;\n\n        throw new Error((_error$response$statu = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusText) !== null && _error$response$statu !== void 0 ? _error$response$statu : 'Error updating file contents.');\n      }\n    });\n  }\n\n  createReadStream(path, options) {\n    return this._client.createReadStream(path, options);\n  }\n\n  createWriteStream(path) {\n    return this._client.createWriteStream(path);\n  }\n\n}","map":{"version":3,"sources":["app/webdav/server/lib/webdavClientAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, WebDavClient, Stat } from 'webdav';\n\nexport type ServerCredentials = {\n\ttoken?: string;\n\tusername?: string;\n\tpassword?: string;\n};\n\nexport class WebdavClientAdapter {\n\t_client: WebDavClient;\n\n\tconstructor(serverConfig: string, cred: ServerCredentials) {\n\t\tif (cred.token) {\n\t\t\tthis._client = createClient(serverConfig, { token: cred.token });\n\t\t} else {\n\t\t\tthis._client = createClient(serverConfig, {\n\t\t\t\tusername: cred.username,\n\t\t\t\tpassword: cred.password,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync stat(path: string): Promise<undefined> {\n\t\ttry {\n\t\t\treturn await this._client.stat(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\terror.response && error.response.statusText ? error.response.statusText : 'Error checking if directory exists on webdav',\n\t\t\t);\n\t\t}\n\t}\n\n\tasync createDirectory(path: string): Promise<Response> {\n\t\ttry {\n\t\t\treturn await this._client.createDirectory(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error creating directory on webdav');\n\t\t}\n\t}\n\n\tasync deleteFile(path: string): Promise<Response> {\n\t\ttry {\n\t\t\treturn await this._client.deleteFile(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error deleting file on webdav');\n\t\t}\n\t}\n\n\tasync getFileContents(filename: string): Promise<Buffer> {\n\t\ttry {\n\t\t\treturn (await this._client.getFileContents(filename)) as Buffer;\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting file contents webdav');\n\t\t}\n\t}\n\n\tasync getDirectoryContents(path: string): Promise<Array<Stat>> {\n\t\ttry {\n\t\t\treturn await this._client.getDirectoryContents(path);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response && error.response.statusText ? error.response.statusText : 'Error getting directory contents webdav');\n\t\t}\n\t}\n\n\tasync putFileContents(path: string, data: Buffer, options: Record<string, any> = {}): Promise<any> {\n\t\ttry {\n\t\t\treturn await this._client.putFileContents(path, data, options);\n\t\t} catch (error) {\n\t\t\tthrow new Error(error.response?.statusText ?? 'Error updating file contents.');\n\t\t}\n\t}\n\n\tcreateReadStream(path: string, options?: Record<string, any>): ReadableStream {\n\t\treturn this._client.createReadStream(path, options);\n\t}\n\n\tcreateWriteStream(path: string): WritableStream {\n\t\treturn this._client.createWriteStream(path);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"9e36b235489ea2756e3a087155dba616719e958d"}
