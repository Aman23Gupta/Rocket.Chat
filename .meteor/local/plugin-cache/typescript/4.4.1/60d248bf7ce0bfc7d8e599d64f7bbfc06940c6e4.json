{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/features/EmailInbox/EmailInbox.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport nodemailer from 'nodemailer';\nimport Mail from 'nodemailer/lib/mailer';\n\nimport { EmailInbox, EmailMessageHistory } from '../../../app/models/server/raw';\nimport { IMAPInterceptor } from '../../email/IMAPInterceptor';\nimport { IEmailInbox } from '../../../definition/IEmailInbox';\nimport { onEmailReceived } from './EmailInbox_Incoming';\nimport { logger } from './logger';\nimport { settings } from '../../../app/settings/server';\n\nexport type Inbox = {\n\timap: IMAPInterceptor;\n\tsmtp: Mail;\n\tconfig: IEmailInbox;\n};\n\nexport const inboxes = new Map<string, Inbox>();\n\nexport async function configureEmailInboxes(): Promise<void> {\n\tconst emailInboxesCursor = EmailInbox.find({\n\t\tactive: true,\n\t});\n\n\tlogger.info('Clearing old email inbox registrations');\n\tfor (const { imap } of inboxes.values()) {\n\t\timap.stop();\n\t}\n\n\tinboxes.clear();\n\n\tfor await (const emailInboxRecord of emailInboxesCursor) {\n\t\tlogger.info(`Setting up email interceptor for ${emailInboxRecord.email}`);\n\n\t\tconst imap = new IMAPInterceptor(\n\t\t\t{\n\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\ttlsOptions: {\n\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t},\n\t\t\t\t// debug: (...args: any[]): void => logger.debug(args),\n\t\t\t},\n\t\t\t{\n\t\t\t\tdeleteAfterRead: false,\n\t\t\t\tfilter: [['UNSEEN'], ['SINCE', emailInboxRecord._updatedAt]],\n\t\t\t\trejectBeforeTS: emailInboxRecord._updatedAt,\n\t\t\t\tmarkSeen: true,\n\t\t\t},\n\t\t);\n\n\t\timap.on(\n\t\t\t'email',\n\t\t\tMeteor.bindEnvironment(async (email) => {\n\t\t\t\tif (!email.messageId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait EmailMessageHistory.create({ _id: email.messageId, email: emailInboxRecord.email });\n\t\t\t\t\tonEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\t// In case the email message history has been received by other instance..\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\timap.start();\n\n\t\tconst smtp = nodemailer.createTransport({\n\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\tauth: {\n\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t},\n\t\t});\n\n\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });\n\t}\n\n\tlogger.info(`Configured a total of ${inboxes.size} inboxes`);\n}\n\nMeteor.startup(() => {\n\tsettings.watchOnce('Livechat_Routing_Method', (_) => {\n\t\tconfigureEmailInboxes();\n\t});\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/features/EmailInbox/EmailInbox.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  inboxes: () => inboxes,\n  configureEmailInboxes: () => configureEmailInboxes\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet nodemailer;\nmodule.link(\"nodemailer\", {\n  default(v) {\n    nodemailer = v;\n  }\n\n}, 1);\nlet EmailInbox, EmailMessageHistory;\nmodule.link(\"../../../app/models/server/raw\", {\n  EmailInbox(v) {\n    EmailInbox = v;\n  },\n\n  EmailMessageHistory(v) {\n    EmailMessageHistory = v;\n  }\n\n}, 2);\nlet IMAPInterceptor;\nmodule.link(\"../../email/IMAPInterceptor\", {\n  IMAPInterceptor(v) {\n    IMAPInterceptor = v;\n  }\n\n}, 3);\nlet onEmailReceived;\nmodule.link(\"./EmailInbox_Incoming\", {\n  onEmailReceived(v) {\n    onEmailReceived = v;\n  }\n\n}, 4);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nconst inboxes = new Map();\n\nfunction configureEmailInboxes() {\n  return Promise.asyncApply(() => {\n    const emailInboxesCursor = EmailInbox.find({\n      active: true\n    });\n    logger.info('Clearing old email inbox registrations');\n\n    for (const {\n      imap\n    } of inboxes.values()) {\n      imap.stop();\n    }\n\n    inboxes.clear();\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(emailInboxesCursor), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n        const emailInboxRecord = _step.value;\n        logger.info(\"Setting up email interceptor for \".concat(emailInboxRecord.email));\n        const imap = new IMAPInterceptor({\n          password: emailInboxRecord.imap.password,\n          user: emailInboxRecord.imap.username,\n          host: emailInboxRecord.imap.server,\n          port: emailInboxRecord.imap.port,\n          tls: emailInboxRecord.imap.secure,\n          tlsOptions: {\n            rejectUnauthorized: false\n          } // debug: (...args: any[]): void => logger.debug(args),\n\n        }, {\n          deleteAfterRead: false,\n          filter: [['UNSEEN'], ['SINCE', emailInboxRecord._updatedAt]],\n          rejectBeforeTS: emailInboxRecord._updatedAt,\n          markSeen: true\n        });\n        imap.on('email', Meteor.bindEnvironment(email => Promise.asyncApply(() => {\n          if (!email.messageId) {\n            return;\n          }\n\n          try {\n            Promise.await(EmailMessageHistory.create({\n              _id: email.messageId,\n              email: emailInboxRecord.email\n            }));\n            onEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n          } catch (e) {\n            // In case the email message history has been received by other instance..\n            logger.error(e);\n          }\n        })));\n        imap.start();\n        const smtp = nodemailer.createTransport({\n          host: emailInboxRecord.smtp.server,\n          port: emailInboxRecord.smtp.port,\n          secure: emailInboxRecord.smtp.secure,\n          auth: {\n            user: emailInboxRecord.smtp.username,\n            pass: emailInboxRecord.smtp.password\n          }\n        });\n        inboxes.set(emailInboxRecord.email, {\n          imap,\n          smtp,\n          config: emailInboxRecord\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          Promise.await(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    logger.info(\"Configured a total of \".concat(inboxes.size, \" inboxes\"));\n  });\n}\n\nMeteor.startup(() => {\n  settings.watchOnce('Livechat_Routing_Method', _ => {\n    configureEmailInboxes();\n  });\n});","map":{"version":3,"sources":["server/features/EmailInbox/EmailInbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport nodemailer from 'nodemailer';\nimport Mail from 'nodemailer/lib/mailer';\n\nimport { EmailInbox, EmailMessageHistory } from '../../../app/models/server/raw';\nimport { IMAPInterceptor } from '../../email/IMAPInterceptor';\nimport { IEmailInbox } from '../../../definition/IEmailInbox';\nimport { onEmailReceived } from './EmailInbox_Incoming';\nimport { logger } from './logger';\nimport { settings } from '../../../app/settings/server';\n\nexport type Inbox = {\n\timap: IMAPInterceptor;\n\tsmtp: Mail;\n\tconfig: IEmailInbox;\n};\n\nexport const inboxes = new Map<string, Inbox>();\n\nexport async function configureEmailInboxes(): Promise<void> {\n\tconst emailInboxesCursor = EmailInbox.find({\n\t\tactive: true,\n\t});\n\n\tlogger.info('Clearing old email inbox registrations');\n\tfor (const { imap } of inboxes.values()) {\n\t\timap.stop();\n\t}\n\n\tinboxes.clear();\n\n\tfor await (const emailInboxRecord of emailInboxesCursor) {\n\t\tlogger.info(`Setting up email interceptor for ${emailInboxRecord.email}`);\n\n\t\tconst imap = new IMAPInterceptor(\n\t\t\t{\n\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\ttlsOptions: {\n\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t},\n\t\t\t\t// debug: (...args: any[]): void => logger.debug(args),\n\t\t\t},\n\t\t\t{\n\t\t\t\tdeleteAfterRead: false,\n\t\t\t\tfilter: [['UNSEEN'], ['SINCE', emailInboxRecord._updatedAt]],\n\t\t\t\trejectBeforeTS: emailInboxRecord._updatedAt,\n\t\t\t\tmarkSeen: true,\n\t\t\t},\n\t\t);\n\n\t\timap.on(\n\t\t\t'email',\n\t\t\tMeteor.bindEnvironment(async (email) => {\n\t\t\t\tif (!email.messageId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait EmailMessageHistory.create({ _id: email.messageId, email: emailInboxRecord.email });\n\t\t\t\t\tonEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\t// In case the email message history has been received by other instance..\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\timap.start();\n\n\t\tconst smtp = nodemailer.createTransport({\n\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\tauth: {\n\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t},\n\t\t});\n\n\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });\n\t}\n\n\tlogger.info(`Configured a total of ${inboxes.size} inboxes`);\n}\n\nMeteor.startup(() => {\n\tsettings.watchOnce('Livechat_Routing_Method', (_) => {\n\t\tconfigureEmailInboxes();\n\t});\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"60d248bf7ce0bfc7d8e599d64f7bbfc06940c6e4"}
