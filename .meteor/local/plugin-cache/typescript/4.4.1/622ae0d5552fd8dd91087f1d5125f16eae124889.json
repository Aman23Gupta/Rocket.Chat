{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/getAndCreateNpsSurvey.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/nps/getAndCreateNpsSurvey.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/getAndCreateNpsSurvey.ts","inputSourceMap":{"version":3,"file":"server/services/nps/getAndCreateNpsSurvey.ts","sourceRoot":"","sources":["server/services/nps/getAndCreateNpsSurvey.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAEpE,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAYvD,MAAM,CAAC,MAAM,qBAAqB,GAAG,MAAM,CAAC,eAAe,CAAC,KAAK,UAAU,YAAY,CAAC,KAAa;IACpG,MAAM,KAAK,GAAW,uBAAuB,EAAE,CAAC;IAChD,IAAI,CAAC,KAAK,EAAE;QACX,OAAO,KAAK,CAAC;KACb;IAED,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAEtD,IAAI,CAAC,UAAU,EAAE;QAChB,OAAO,KAAK,CAAC;KACb;IAED,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAEvC,IAAI;QACH,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,eAAe,KAAK,EAAE,EAAE;YACxD,OAAO,EAAE;gBACR,aAAa,EAAE,UAAU,KAAK,EAAE;aAChC;SACD,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG,EAAE;YAC9B,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,wCAAwC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC9E,OAAO;SACP;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAqB,CAAC;QAEhD,MAAM,MAAM,GAAY;YACvB,GAAG,EAAE,KAAK;YACV,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;YACzC,QAAQ,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YACvC,OAAO,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YACrC,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,SAAS,EAAE;gBACV,GAAG,EAAE,YAAY;gBACjB,QAAQ,EAAE,YAAY;aACtB;YACD,IAAI,EAAE,UAAU,CAAC,MAAM;SACvB,CAAC;QAEF,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC5B;IAAC,OAAO,CAAC,EAAE;QACX,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,OAAO,KAAK,CAAC;KACb;AACF,CAAC,CAAC,CAAC","sourcesContent":["import { HTTP } from 'meteor/http';\nimport { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../app/settings/server';\nimport { getWorkspaceAccessToken } from '../../../app/cloud/server';\nimport { UiKitBannerPayload } from '../../../definition/UIKit';\nimport { Banner } from '../../sdk';\nimport { IBanner, BannerPlatform } from '../../../definition/IBanner';\nimport { SystemLogger } from '../../lib/logger/system';\n\ntype NpsSurveyData = {\n\tid: string;\n\tplatform: BannerPlatform[];\n\troles: string[];\n\tsurvey: UiKitBannerPayload;\n\tcreatedAt: Date;\n\tstartAt: Date;\n\texpireAt: Date;\n};\n\nexport const getAndCreateNpsSurvey = Meteor.bindEnvironment(async function getNpsSurvey(npsId: string) {\n\tconst token: string = getWorkspaceAccessToken();\n\tif (!token) {\n\t\treturn false;\n\t}\n\n\tconst npsEnabled = settings.get('NPS_survey_enabled');\n\n\tif (!npsEnabled) {\n\t\treturn false;\n\t}\n\n\tconst npsUrl = settings.get('Nps_Url');\n\n\ttry {\n\t\tconst result = HTTP.get(`${npsUrl}/v1/surveys/${npsId}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\tif (result.statusCode !== 200) {\n\t\t\tSystemLogger.error({ msg: 'invalid response from the nps service:', result });\n\t\t\treturn;\n\t\t}\n\n\t\tconst surveyData = result.data as NpsSurveyData;\n\n\t\tconst banner: IBanner = {\n\t\t\t_id: npsId,\n\t\t\tplatform: surveyData.platform,\n\t\t\tcreatedAt: new Date(surveyData.createdAt),\n\t\t\texpireAt: new Date(surveyData.expireAt),\n\t\t\tstartAt: new Date(surveyData.startAt),\n\t\t\t_updatedAt: new Date(), // Needed by the IRocketChatRecord interface\n\t\t\troles: surveyData.roles,\n\t\t\tcreatedBy: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t},\n\t\t\tview: surveyData.survey,\n\t\t};\n\n\t\tawait Banner.create(banner);\n\t} catch (e) {\n\t\tSystemLogger.error(e);\n\t\treturn false;\n\t}\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/nps/getAndCreateNpsSurvey.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/nps/getAndCreateNpsSurvey.ts"}},"code":"module.export({\n  getAndCreateNpsSurvey: () => getAndCreateNpsSurvey\n});\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet getWorkspaceAccessToken;\nmodule.link(\"../../../app/cloud/server\", {\n  getWorkspaceAccessToken(v) {\n    getWorkspaceAccessToken = v;\n  }\n\n}, 3);\nlet Banner;\nmodule.link(\"../../sdk\", {\n  Banner(v) {\n    Banner = v;\n  }\n\n}, 4);\nlet SystemLogger;\nmodule.link(\"../../lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 5);\nconst getAndCreateNpsSurvey = Meteor.bindEnvironment(function getNpsSurvey(npsId) {\n  return Promise.asyncApply(() => {\n    const token = getWorkspaceAccessToken();\n\n    if (!token) {\n      return false;\n    }\n\n    const npsEnabled = settings.get('NPS_survey_enabled');\n\n    if (!npsEnabled) {\n      return false;\n    }\n\n    const npsUrl = settings.get('Nps_Url');\n\n    try {\n      const result = HTTP.get(\"\".concat(npsUrl, \"/v1/surveys/\").concat(npsId), {\n        headers: {\n          Authorization: \"Bearer \".concat(token)\n        }\n      });\n\n      if (result.statusCode !== 200) {\n        SystemLogger.error({\n          msg: 'invalid response from the nps service:',\n          result\n        });\n        return;\n      }\n\n      const surveyData = result.data;\n      const banner = {\n        _id: npsId,\n        platform: surveyData.platform,\n        createdAt: new Date(surveyData.createdAt),\n        expireAt: new Date(surveyData.expireAt),\n        startAt: new Date(surveyData.startAt),\n        _updatedAt: new Date(),\n        roles: surveyData.roles,\n        createdBy: {\n          _id: 'rocket.cat',\n          username: 'rocket.cat'\n        },\n        view: surveyData.survey\n      };\n      Promise.await(Banner.create(banner));\n    } catch (e) {\n      SystemLogger.error(e);\n      return false;\n    }\n  });\n});","map":{"version":3,"sources":["server/services/nps/getAndCreateNpsSurvey.ts"],"names":[],"mappings":"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","sourcesContent":["import { HTTP } from 'meteor/http';\nimport { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../app/settings/server';\nimport { getWorkspaceAccessToken } from '../../../app/cloud/server';\nimport { UiKitBannerPayload } from '../../../definition/UIKit';\nimport { Banner } from '../../sdk';\nimport { IBanner, BannerPlatform } from '../../../definition/IBanner';\nimport { SystemLogger } from '../../lib/logger/system';\n\ntype NpsSurveyData = {\n\tid: string;\n\tplatform: BannerPlatform[];\n\troles: string[];\n\tsurvey: UiKitBannerPayload;\n\tcreatedAt: Date;\n\tstartAt: Date;\n\texpireAt: Date;\n};\n\nexport const getAndCreateNpsSurvey = Meteor.bindEnvironment(async function getNpsSurvey(npsId: string) {\n\tconst token: string = getWorkspaceAccessToken();\n\tif (!token) {\n\t\treturn false;\n\t}\n\n\tconst npsEnabled = settings.get('NPS_survey_enabled');\n\n\tif (!npsEnabled) {\n\t\treturn false;\n\t}\n\n\tconst npsUrl = settings.get('Nps_Url');\n\n\ttry {\n\t\tconst result = HTTP.get(`${npsUrl}/v1/surveys/${npsId}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t});\n\n\t\tif (result.statusCode !== 200) {\n\t\t\tSystemLogger.error({ msg: 'invalid response from the nps service:', result });\n\t\t\treturn;\n\t\t}\n\n\t\tconst surveyData = result.data as NpsSurveyData;\n\n\t\tconst banner: IBanner = {\n\t\t\t_id: npsId,\n\t\t\tplatform: surveyData.platform,\n\t\t\tcreatedAt: new Date(surveyData.createdAt),\n\t\t\texpireAt: new Date(surveyData.expireAt),\n\t\t\tstartAt: new Date(surveyData.startAt),\n\t\t\t_updatedAt: new Date(), // Needed by the IRocketChatRecord interface\n\t\t\troles: surveyData.roles,\n\t\t\tcreatedBy: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t},\n\t\t\tview: surveyData.survey,\n\t\t};\n\n\t\tawait Banner.create(banner);\n\t} catch (e) {\n\t\tSystemLogger.error(e);\n\t\treturn false;\n\t}\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"622ae0d5552fd8dd91087f1d5125f16eae124889"}
