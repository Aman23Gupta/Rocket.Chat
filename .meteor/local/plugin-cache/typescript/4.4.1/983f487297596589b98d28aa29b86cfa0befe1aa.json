{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/settings/server/SettingsRegistry.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/settings/server/SettingsRegistry.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/settings/server/SettingsRegistry.ts","inputSourceMap":{"version":3,"file":"app/settings/server/SettingsRegistry.ts","sourceRoot":"","sources":["app/settings/server/SettingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { isEqual } from 'underscore';\n\nimport type SettingsModel from '../../models/server/models/Settings';\nimport { ISetting, ISettingGroup, isSettingEnterprise, SettingValue } from '../../../definition/ISetting';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { overwriteSetting } from './functions/overwriteSetting';\nimport { overrideSetting } from './functions/overrideSetting';\nimport { getSettingDefaults } from './functions/getSettingDefaults';\nimport { validateSetting } from './functions/validateSetting';\nimport type { ICachedSettings } from './CachedSettings';\n\nexport const blockedSettings = new Set<string>();\nexport const hiddenSettings = new Set<string>();\nexport const wizardRequiredSettings = new Set<string>();\n\nif (process.env.SETTINGS_BLOCKED) {\n\tprocess.env.SETTINGS_BLOCKED.split(',').forEach((settingId) => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n\tprocess.env.SETTINGS_HIDDEN.split(',').forEach((settingId) => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n\tprocess.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach((settingId) => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\nexport const SettingsEvents = new Emitter<{\n\t'store-setting-value': [ISetting, { value: SettingValue }];\n\t'fetch-settings': ISetting[];\n\t'remove-setting-value': ISetting;\n}>();\n\nconst getGroupDefaults = (_id: string, options: ISettingAddGroupOptions = {}): ISettingGroup => ({\n\t_id,\n\ti18nLabel: _id,\n\ti18nDescription: `${_id}_Description`,\n\t...options,\n\tsorter: options.sorter || 0,\n\tblocked: blockedSettings.has(_id),\n\thidden: hiddenSettings.has(_id),\n\ttype: 'group',\n\t...(options.displayQuery && { displayQuery: JSON.stringify(options.displayQuery) }),\n});\n\nexport type ISettingAddGroupOptions = Partial<ISettingGroup>;\n\ntype addSectionCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): void;\n\twith(options: ISettingAddOptions, cb: addSectionCallback): void;\n}) => void;\n\ntype addGroupCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): void;\n\tsection(section: string, cb: addSectionCallback): void;\n\twith(options: ISettingAddOptions, cb: addGroupCallback): void;\n}) => void;\n\ntype ISettingAddOptions = Partial<ISetting>;\n\nconst compareSettingsIgnoringKeys =\n\t(keys: Array<keyof ISetting>) =>\n\t(a: ISetting, b: ISetting): boolean =>\n\t\t[...new Set([...Object.keys(a), ...Object.keys(b)])]\n\t\t\t.filter((key) => !keys.includes(key as keyof ISetting))\n\t\t\t.every((key) => isEqual(a[key as keyof ISetting], b[key as keyof ISetting]));\n\nconst compareSettings = compareSettingsIgnoringKeys([\n\t'value',\n\t'ts',\n\t'createdAt',\n\t'valueSource',\n\t'packageValue',\n\t'processEnvValue',\n\t'_updatedAt',\n]);\n\nexport class SettingsRegistry {\n\tprivate model: typeof SettingsModel;\n\n\tprivate store: ICachedSettings;\n\n\tprivate _sorter: { [key: string]: number } = {};\n\n\tconstructor({ store, model }: { store: ICachedSettings; model: typeof SettingsModel }) {\n\t\tthis.store = store;\n\t\tthis.model = model;\n\t}\n\n\t/*\n\t * Add a setting\n\t */\n\tadd(_id: string, value: SettingValue, { sorter, section, group, ...options }: ISettingAddOptions = {}): void {\n\t\tif (!_id || value == null) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst sorterKey = group && section ? `${group}_${section}` : group;\n\n\t\tif (sorterKey && this._sorter[sorterKey] == null) {\n\t\t\tif (group && section) {\n\t\t\t\tconst currentGroupValue = this._sorter[group] ?? 0;\n\t\t\t\tthis._sorter[sorterKey] = currentGroupValue * 1000;\n\t\t\t}\n\t\t}\n\n\t\tif (sorterKey) {\n\t\t\tthis._sorter[sorterKey] = this._sorter[sorterKey] ?? -1;\n\t\t}\n\n\t\tconst settingFromCode = getSettingDefaults(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\ttype: 'string',\n\t\t\t\tvalue,\n\t\t\t\tsorter: sorter ?? (sorterKey?.length && this._sorter[sorterKey]++),\n\t\t\t\tgroup,\n\t\t\t\tsection,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tblockedSettings,\n\t\t\thiddenSettings,\n\t\t\twizardRequiredSettings,\n\t\t);\n\n\t\tif (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n\t\t\tSystemLogger.error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t\tthrow new Error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t}\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingOverwritten = overwriteSetting(settingFromCode);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {\n\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting code ${_id}: ${(e as Error).message}`);\n\t\t}\n\n\t\tconst isOverwritten = settingFromCode !== settingOverwritten;\n\n\t\tconst { _id: _, ...settingProps } = settingOverwritten;\n\n\t\tif (settingStored && !compareSettings(settingStored, settingOverwritten)) {\n\t\t\tconst { value: _value, ...settingOverwrittenProps } = settingOverwritten;\n\n\t\t\tconst overwrittenKeys = Object.keys(settingOverwritten);\n\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\tthis.model.upsert(\n\t\t\t\t{ _id },\n\t\t\t\t{\n\t\t\t\t\t$set: { ...settingOverwrittenProps },\n\t\t\t\t\t...(removedKeys.length && {\n\t\t\t\t\t\t$unset: removedKeys.reduce((unset, key) => ({ ...unset, [key]: 1 }), {}),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored && isOverwritten) {\n\t\t\tif (settingStored.value !== settingOverwritten.value) {\n\t\t\t\tthis.model.upsert({ _id }, settingProps);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored) {\n\t\t\ttry {\n\t\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingStored?.value);\n\t\t\t} catch (e) {\n\t\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting stored ${_id}: ${(e as Error).message}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingOverwrittenDefault = overrideSetting(settingFromCode);\n\n\t\tconst setting = isOverwritten ? settingOverwritten : settingOverwrittenDefault;\n\n\t\tthis.model.insert(setting); // no need to emit unless we remove the oplog\n\n\t\tthis.store.set(setting);\n\t}\n\n\t/*\n\t * Add a setting group\n\t */\n\taddGroup(_id: string, cb: addGroupCallback): void;\n\n\t// eslint-disable-next-line no-dupe-class-members\n\taddGroup(_id: string, groupOptions: ISettingAddGroupOptions | addGroupCallback = {}, cb?: addGroupCallback): void {\n\t\tif (!_id || (groupOptions instanceof Function && cb)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })\n\t\t\t\t: getGroupDefaults(_id, { sorter: this._sorter[_id], ...groupOptions });\n\n\t\tif (!this.store.has(_id)) {\n\t\t\toptions.ts = new Date();\n\t\t\tthis.model.insert(options);\n\t\t\tthis.store.set(options as ISetting);\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst addWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(id: string, value: SettingValue, options: ISettingAddOptions = {}): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tthis.add(id, value, mergedOptions);\n\t\t\t};\n\t\tconst sectionSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addSectionCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\t\tconst sectionWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(section: string, cb: addSectionCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, section };\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\tsection: sectionWith(mergedOptions),\n\t\t\t\t\twith: groupSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\treturn groupSetWith({ group: _id })({}, callback);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/settings/server/SettingsRegistry.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/settings/server/SettingsRegistry.ts"}},"code":"const _excluded = [\"sorter\", \"section\", \"group\"],\n      _excluded2 = [\"_id\"],\n      _excluded3 = [\"value\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  blockedSettings: () => blockedSettings,\n  hiddenSettings: () => hiddenSettings,\n  wizardRequiredSettings: () => wizardRequiredSettings,\n  SettingsEvents: () => SettingsEvents,\n  SettingsRegistry: () => SettingsRegistry\n});\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 0);\nlet isEqual;\nmodule.link(\"underscore\", {\n  isEqual(v) {\n    isEqual = v;\n  }\n\n}, 1);\nlet isSettingEnterprise;\nmodule.link(\"../../../definition/ISetting\", {\n  isSettingEnterprise(v) {\n    isSettingEnterprise = v;\n  }\n\n}, 2);\nlet SystemLogger;\nmodule.link(\"../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 3);\nlet overwriteSetting;\nmodule.link(\"./functions/overwriteSetting\", {\n  overwriteSetting(v) {\n    overwriteSetting = v;\n  }\n\n}, 4);\nlet overrideSetting;\nmodule.link(\"./functions/overrideSetting\", {\n  overrideSetting(v) {\n    overrideSetting = v;\n  }\n\n}, 5);\nlet getSettingDefaults;\nmodule.link(\"./functions/getSettingDefaults\", {\n  getSettingDefaults(v) {\n    getSettingDefaults = v;\n  }\n\n}, 6);\nlet validateSetting;\nmodule.link(\"./functions/validateSetting\", {\n  validateSetting(v) {\n    validateSetting = v;\n  }\n\n}, 7);\nconst blockedSettings = new Set();\nconst hiddenSettings = new Set();\nconst wizardRequiredSettings = new Set();\n\nif (process.env.SETTINGS_BLOCKED) {\n  process.env.SETTINGS_BLOCKED.split(',').forEach(settingId => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n  process.env.SETTINGS_HIDDEN.split(',').forEach(settingId => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n  process.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach(settingId => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\n\nconst SettingsEvents = new Emitter();\n\nconst getGroupDefaults = function (_id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread(_objectSpread({\n    _id,\n    i18nLabel: _id,\n    i18nDescription: \"\".concat(_id, \"_Description\")\n  }, options), {}, {\n    sorter: options.sorter || 0,\n    blocked: blockedSettings.has(_id),\n    hidden: hiddenSettings.has(_id),\n    type: 'group'\n  }, options.displayQuery && {\n    displayQuery: JSON.stringify(options.displayQuery)\n  });\n};\n\nconst compareSettingsIgnoringKeys = keys => (a, b) => [...new Set([...Object.keys(a), ...Object.keys(b)])].filter(key => !keys.includes(key)).every(key => isEqual(a[key], b[key]));\n\nconst compareSettings = compareSettingsIgnoringKeys(['value', 'ts', 'createdAt', 'valueSource', 'packageValue', 'processEnvValue', '_updatedAt']);\n\nclass SettingsRegistry {\n  constructor(_ref) {\n    let {\n      store,\n      model\n    } = _ref;\n    this.model = void 0;\n    this.store = void 0;\n    this._sorter = {};\n    this.store = store;\n    this.model = model;\n  }\n  /*\n   * Add a setting\n   */\n\n\n  add(_id, value) {\n    let _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    let {\n      sorter,\n      section,\n      group\n    } = _ref2,\n        options = _objectWithoutProperties(_ref2, _excluded);\n\n    if (!_id || value == null) {\n      throw new Error('Invalid arguments');\n    }\n\n    const sorterKey = group && section ? \"\".concat(group, \"_\").concat(section) : group;\n\n    if (sorterKey && this._sorter[sorterKey] == null) {\n      if (group && section) {\n        var _this$_sorter$group;\n\n        const currentGroupValue = (_this$_sorter$group = this._sorter[group]) !== null && _this$_sorter$group !== void 0 ? _this$_sorter$group : 0;\n        this._sorter[sorterKey] = currentGroupValue * 1000;\n      }\n    }\n\n    if (sorterKey) {\n      var _this$_sorter$sorterK;\n\n      this._sorter[sorterKey] = (_this$_sorter$sorterK = this._sorter[sorterKey]) !== null && _this$_sorter$sorterK !== void 0 ? _this$_sorter$sorterK : -1;\n    }\n\n    const settingFromCode = getSettingDefaults(_objectSpread({\n      _id,\n      type: 'string',\n      value,\n      sorter: sorter !== null && sorter !== void 0 ? sorter : (sorterKey === null || sorterKey === void 0 ? void 0 : sorterKey.length) && this._sorter[sorterKey]++,\n      group,\n      section\n    }, options), blockedSettings, hiddenSettings, wizardRequiredSettings);\n\n    if (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n      SystemLogger.error(\"Enterprise setting \".concat(_id, \" is missing the invalidValue option\"));\n      throw new Error(\"Enterprise setting \".concat(_id, \" is missing the invalidValue option\"));\n    }\n\n    const settingStored = this.store.getSetting(_id);\n    const settingOverwritten = overwriteSetting(settingFromCode);\n\n    try {\n      validateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n    } catch (e) {\n      IS_DEVELOPMENT && SystemLogger.error(\"Invalid setting code \".concat(_id, \": \").concat(e.message));\n    }\n\n    const isOverwritten = settingFromCode !== settingOverwritten;\n\n    const {\n      _id: _\n    } = settingOverwritten,\n          settingProps = _objectWithoutProperties(settingOverwritten, _excluded2);\n\n    if (settingStored && !compareSettings(settingStored, settingOverwritten)) {\n      const {\n        value: _value\n      } = settingOverwritten,\n            settingOverwrittenProps = _objectWithoutProperties(settingOverwritten, _excluded3);\n\n      const overwrittenKeys = Object.keys(settingOverwritten);\n      const removedKeys = Object.keys(settingStored).filter(key => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n      this.model.upsert({\n        _id\n      }, _objectSpread({\n        $set: _objectSpread({}, settingOverwrittenProps)\n      }, removedKeys.length && {\n        $unset: removedKeys.reduce((unset, key) => _objectSpread(_objectSpread({}, unset), {}, {\n          [key]: 1\n        }), {})\n      }));\n      return;\n    }\n\n    if (settingStored && isOverwritten) {\n      if (settingStored.value !== settingOverwritten.value) {\n        this.model.upsert({\n          _id\n        }, settingProps);\n      }\n\n      return;\n    }\n\n    if (settingStored) {\n      try {\n        validateSetting(settingFromCode._id, settingFromCode.type, settingStored === null || settingStored === void 0 ? void 0 : settingStored.value);\n      } catch (e) {\n        IS_DEVELOPMENT && SystemLogger.error(\"Invalid setting stored \".concat(_id, \": \").concat(e.message));\n      }\n\n      return;\n    }\n\n    const settingOverwrittenDefault = overrideSetting(settingFromCode);\n    const setting = isOverwritten ? settingOverwritten : settingOverwrittenDefault;\n    this.model.insert(setting); // no need to emit unless we remove the oplog\n\n    this.store.set(setting);\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  addGroup(_id) {\n    var _this = this;\n\n    let groupOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let cb = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!_id || groupOptions instanceof Function && cb) {\n      throw new Error('Invalid arguments');\n    }\n\n    const callback = groupOptions instanceof Function ? groupOptions : cb;\n    const options = groupOptions instanceof Function ? getGroupDefaults(_id, {\n      sorter: this._sorter[_id]\n    }) : getGroupDefaults(_id, _objectSpread({\n      sorter: this._sorter[_id]\n    }, groupOptions));\n\n    if (!this.store.has(_id)) {\n      options.ts = new Date();\n      this.model.insert(options);\n      this.store.set(options);\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    const addWith = preset => function (id, value) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n\n      _this.add(id, value, mergedOptions);\n    };\n\n    const sectionSetWith = preset => (options, cb) => {\n      const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n\n      cb.call({\n        add: addWith(mergedOptions),\n        with: sectionSetWith(mergedOptions)\n      });\n    };\n\n    const sectionWith = preset => (section, cb) => {\n      const mergedOptions = _objectSpread(_objectSpread({}, preset), {}, {\n        section\n      });\n\n      cb.call({\n        add: addWith(mergedOptions),\n        with: sectionSetWith(mergedOptions)\n      });\n    };\n\n    const groupSetWith = preset => (options, cb) => {\n      const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n\n      cb.call({\n        add: addWith(mergedOptions),\n        section: sectionWith(mergedOptions),\n        with: groupSetWith(mergedOptions)\n      });\n    };\n\n    return groupSetWith({\n      group: _id\n    })({}, callback);\n  }\n\n}","map":{"version":3,"sources":["app/settings/server/SettingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { isEqual } from 'underscore';\n\nimport type SettingsModel from '../../models/server/models/Settings';\nimport { ISetting, ISettingGroup, isSettingEnterprise, SettingValue } from '../../../definition/ISetting';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { overwriteSetting } from './functions/overwriteSetting';\nimport { overrideSetting } from './functions/overrideSetting';\nimport { getSettingDefaults } from './functions/getSettingDefaults';\nimport { validateSetting } from './functions/validateSetting';\nimport type { ICachedSettings } from './CachedSettings';\n\nexport const blockedSettings = new Set<string>();\nexport const hiddenSettings = new Set<string>();\nexport const wizardRequiredSettings = new Set<string>();\n\nif (process.env.SETTINGS_BLOCKED) {\n\tprocess.env.SETTINGS_BLOCKED.split(',').forEach((settingId) => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n\tprocess.env.SETTINGS_HIDDEN.split(',').forEach((settingId) => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n\tprocess.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach((settingId) => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\nexport const SettingsEvents = new Emitter<{\n\t'store-setting-value': [ISetting, { value: SettingValue }];\n\t'fetch-settings': ISetting[];\n\t'remove-setting-value': ISetting;\n}>();\n\nconst getGroupDefaults = (_id: string, options: ISettingAddGroupOptions = {}): ISettingGroup => ({\n\t_id,\n\ti18nLabel: _id,\n\ti18nDescription: `${_id}_Description`,\n\t...options,\n\tsorter: options.sorter || 0,\n\tblocked: blockedSettings.has(_id),\n\thidden: hiddenSettings.has(_id),\n\ttype: 'group',\n\t...(options.displayQuery && { displayQuery: JSON.stringify(options.displayQuery) }),\n});\n\nexport type ISettingAddGroupOptions = Partial<ISettingGroup>;\n\ntype addSectionCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): void;\n\twith(options: ISettingAddOptions, cb: addSectionCallback): void;\n}) => void;\n\ntype addGroupCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): void;\n\tsection(section: string, cb: addSectionCallback): void;\n\twith(options: ISettingAddOptions, cb: addGroupCallback): void;\n}) => void;\n\ntype ISettingAddOptions = Partial<ISetting>;\n\nconst compareSettingsIgnoringKeys =\n\t(keys: Array<keyof ISetting>) =>\n\t(a: ISetting, b: ISetting): boolean =>\n\t\t[...new Set([...Object.keys(a), ...Object.keys(b)])]\n\t\t\t.filter((key) => !keys.includes(key as keyof ISetting))\n\t\t\t.every((key) => isEqual(a[key as keyof ISetting], b[key as keyof ISetting]));\n\nconst compareSettings = compareSettingsIgnoringKeys([\n\t'value',\n\t'ts',\n\t'createdAt',\n\t'valueSource',\n\t'packageValue',\n\t'processEnvValue',\n\t'_updatedAt',\n]);\n\nexport class SettingsRegistry {\n\tprivate model: typeof SettingsModel;\n\n\tprivate store: ICachedSettings;\n\n\tprivate _sorter: { [key: string]: number } = {};\n\n\tconstructor({ store, model }: { store: ICachedSettings; model: typeof SettingsModel }) {\n\t\tthis.store = store;\n\t\tthis.model = model;\n\t}\n\n\t/*\n\t * Add a setting\n\t */\n\tadd(_id: string, value: SettingValue, { sorter, section, group, ...options }: ISettingAddOptions = {}): void {\n\t\tif (!_id || value == null) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst sorterKey = group && section ? `${group}_${section}` : group;\n\n\t\tif (sorterKey && this._sorter[sorterKey] == null) {\n\t\t\tif (group && section) {\n\t\t\t\tconst currentGroupValue = this._sorter[group] ?? 0;\n\t\t\t\tthis._sorter[sorterKey] = currentGroupValue * 1000;\n\t\t\t}\n\t\t}\n\n\t\tif (sorterKey) {\n\t\t\tthis._sorter[sorterKey] = this._sorter[sorterKey] ?? -1;\n\t\t}\n\n\t\tconst settingFromCode = getSettingDefaults(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\ttype: 'string',\n\t\t\t\tvalue,\n\t\t\t\tsorter: sorter ?? (sorterKey?.length && this._sorter[sorterKey]++),\n\t\t\t\tgroup,\n\t\t\t\tsection,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tblockedSettings,\n\t\t\thiddenSettings,\n\t\t\twizardRequiredSettings,\n\t\t);\n\n\t\tif (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n\t\t\tSystemLogger.error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t\tthrow new Error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t}\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingOverwritten = overwriteSetting(settingFromCode);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {\n\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting code ${_id}: ${(e as Error).message}`);\n\t\t}\n\n\t\tconst isOverwritten = settingFromCode !== settingOverwritten;\n\n\t\tconst { _id: _, ...settingProps } = settingOverwritten;\n\n\t\tif (settingStored && !compareSettings(settingStored, settingOverwritten)) {\n\t\t\tconst { value: _value, ...settingOverwrittenProps } = settingOverwritten;\n\n\t\t\tconst overwrittenKeys = Object.keys(settingOverwritten);\n\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\tthis.model.upsert(\n\t\t\t\t{ _id },\n\t\t\t\t{\n\t\t\t\t\t$set: { ...settingOverwrittenProps },\n\t\t\t\t\t...(removedKeys.length && {\n\t\t\t\t\t\t$unset: removedKeys.reduce((unset, key) => ({ ...unset, [key]: 1 }), {}),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored && isOverwritten) {\n\t\t\tif (settingStored.value !== settingOverwritten.value) {\n\t\t\t\tthis.model.upsert({ _id }, settingProps);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored) {\n\t\t\ttry {\n\t\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingStored?.value);\n\t\t\t} catch (e) {\n\t\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting stored ${_id}: ${(e as Error).message}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingOverwrittenDefault = overrideSetting(settingFromCode);\n\n\t\tconst setting = isOverwritten ? settingOverwritten : settingOverwrittenDefault;\n\n\t\tthis.model.insert(setting); // no need to emit unless we remove the oplog\n\n\t\tthis.store.set(setting);\n\t}\n\n\t/*\n\t * Add a setting group\n\t */\n\taddGroup(_id: string, cb: addGroupCallback): void;\n\n\t// eslint-disable-next-line no-dupe-class-members\n\taddGroup(_id: string, groupOptions: ISettingAddGroupOptions | addGroupCallback = {}, cb?: addGroupCallback): void {\n\t\tif (!_id || (groupOptions instanceof Function && cb)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })\n\t\t\t\t: getGroupDefaults(_id, { sorter: this._sorter[_id], ...groupOptions });\n\n\t\tif (!this.store.has(_id)) {\n\t\t\toptions.ts = new Date();\n\t\t\tthis.model.insert(options);\n\t\t\tthis.store.set(options as ISetting);\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst addWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(id: string, value: SettingValue, options: ISettingAddOptions = {}): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tthis.add(id, value, mergedOptions);\n\t\t\t};\n\t\tconst sectionSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addSectionCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\t\tconst sectionWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(section: string, cb: addSectionCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, section };\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): void => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\n\t\t\t\tcb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\tsection: sectionWith(mergedOptions),\n\t\t\t\t\twith: groupSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\treturn groupSetWith({ group: _id })({}, callback);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"983f487297596589b98d28aa29b86cfa0befe1aa"}
