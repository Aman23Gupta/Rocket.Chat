{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/BaseRaw.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/BaseRaw.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/BaseRaw.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/BaseRaw.ts","sourceRoot":"","sources":["app/models/server/raw/BaseRaw.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCollection,\n\tCollectionInsertOneOptions,\n\tCommonOptions,\n\tCursor,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n\tFindAndModifyWriteOpResultObject,\n\tFindOneAndUpdateOption,\n\tFindOneOptions,\n\tIndexSpecification,\n\tInsertOneWriteOpResult,\n\tInsertWriteOpResult,\n\tObjectID,\n\tObjectId,\n\tOptionalId,\n\tUpdateManyOptions,\n\tUpdateOneOptions,\n\tUpdateQuery,\n\tUpdateWriteOpResult,\n\tWithId,\n\tWithoutProjection,\n\tWriteOpResult,\n} from 'mongodb';\n\nimport { IRocketChatRecord, RocketChatRecordDeleted } from '../../../../definition/IRocketChatRecord';\nimport { setUpdatedAt } from '../lib/setUpdatedAt';\n\nexport { IndexSpecification } from 'mongodb';\n\n// [extracted from @types/mongo] TypeScript Omit (Exclude to be specific) does not work for objects with an \"any\" indexed type, and breaks discriminated unions\ntype EnhancedOmit<T, K> = string | number extends keyof T\n\t? T // T has indexed type e.g. { _id: string; [k: string]: any; } or it is \"any\"\n\t: T extends any\n\t? Pick<T, Exclude<keyof T, K>> // discriminated unions\n\t: never;\n\n// [extracted from @types/mongo]\ntype ExtractIdType<TSchema> = TSchema extends { _id: infer U } // user has defined a type for _id\n\t? {} extends U\n\t\t? Exclude<U, {}>\n\t\t: unknown extends U\n\t\t? ObjectId\n\t\t: U\n\t: ObjectId;\n\nexport type ModelOptionalId<T> = EnhancedOmit<T, '_id'> & { _id?: ExtractIdType<T> };\n// InsertionModel forces both _id and _updatedAt to be optional, regardless of how they are declared in T\nexport type InsertionModel<T> = EnhancedOmit<ModelOptionalId<T>, '_updatedAt'> & {\n\t_updatedAt?: Date;\n};\n\nexport interface IBaseRaw<T> {\n\tcol: Collection<T>;\n}\n\nconst baseName = 'rocketchat_';\n\ntype DefaultFields<Base> = Record<keyof Base, 1> | Record<keyof Base, 0> | void;\ntype ResultFields<Base, Defaults> = Defaults extends void\n\t? Base\n\t: Defaults[keyof Defaults] extends 1\n\t? Pick<Defaults, keyof Defaults>\n\t: Omit<Defaults, keyof Defaults>;\n\nconst warnFields =\n\tprocess.env.NODE_ENV !== 'production'\n\t\t? (...rest: any): void => {\n\t\t\t\tconsole.warn(...rest, new Error().stack);\n\t\t  }\n\t\t: new Function();\n\nexport class BaseRaw<T, C extends DefaultFields<T> = undefined> implements IBaseRaw<T> {\n\tpublic readonly defaultFields: C;\n\n\tprotected indexes?: IndexSpecification[];\n\n\tprotected name: string;\n\n\tprivate preventSetUpdatedAt: boolean;\n\n\tpublic readonly trash?: Collection<RocketChatRecordDeleted<T>>;\n\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>, options?: { preventSetUpdatedAt?: boolean }) {\n\t\tthis.name = this.col.collectionName.replace(baseName, '');\n\t\tthis.trash = trash as unknown as Collection<RocketChatRecordDeleted<T>>;\n\n\t\tif (this.indexes?.length) {\n\t\t\tthis.col.createIndexes(this.indexes);\n\t\t}\n\n\t\tthis.preventSetUpdatedAt = options?.preventSetUpdatedAt ?? false;\n\t}\n\n\tprivate doNotMixInclusionAndExclusionFields(options: FindOneOptions<T> = {}): FindOneOptions<T> {\n\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tif (optionsDef?.projection === undefined) {\n\t\t\treturn optionsDef;\n\t\t}\n\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst keys = Object.keys(projection);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tif (keys.length > removeKeys.length) {\n\t\t\tremoveKeys.forEach((key) => delete projection[key]);\n\t\t}\n\n\t\treturn {\n\t\t\t...optionsDef,\n\t\t\tprojection,\n\t\t};\n\t}\n\n\tprivate ensureDefaultFields(options?: undefined): C extends void ? undefined : WithoutProjection<FindOneOptions<T>>;\n\n\tprivate ensureDefaultFields(options: WithoutProjection<FindOneOptions<T>>): WithoutProjection<FindOneOptions<T>>;\n\n\tprivate ensureDefaultFields<P>(options: FindOneOptions<P>): FindOneOptions<P>;\n\n\tprivate ensureDefaultFields<P>(options?: any): FindOneOptions<P> | undefined | WithoutProjection<FindOneOptions<T>> {\n\t\tif (this.defaultFields === undefined) {\n\t\t\treturn options;\n\t\t}\n\n\t\tconst { fields: deprecatedFields, projection, ...rest } = options || {};\n\n\t\tif (deprecatedFields) {\n\t\t\twarnFields(\"Using 'fields' in models is deprecated.\", options);\n\t\t}\n\n\t\tconst fields = { ...deprecatedFields, ...projection };\n\n\t\treturn {\n\t\t\tprojection: this.defaultFields,\n\t\t\t...(fields && Object.values(fields).length && { projection: fields }),\n\t\t\t...rest,\n\t\t};\n\t}\n\n\tpublic findOneAndUpdate(\n\t\tquery: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | T,\n\t\toptions?: FindOneAndUpdateOption<T>,\n\t): Promise<FindAndModifyWriteOpResultObject<T>> {\n\t\treturn this.col.findOneAndUpdate(query, update, options);\n\t}\n\n\tasync findOneById(_id: string, options?: WithoutProjection<FindOneOptions<T>> | undefined): Promise<T | null>;\n\n\tasync findOneById<P>(_id: string, options: FindOneOptions<P extends T ? T : P>): Promise<P | null>;\n\n\tasync findOneById<P>(_id: string, options?: any): Promise<T | P | null> {\n\t\tconst query = { _id } as FilterQuery<T>;\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.findOne(query, optionsDef);\n\t}\n\n\tasync findOne(query?: FilterQuery<T> | string, options?: undefined): Promise<T | null>;\n\n\tasync findOne(query: FilterQuery<T> | string, options: WithoutProjection<FindOneOptions<T>>): Promise<T | null>;\n\n\tasync findOne<P>(query: FilterQuery<T> | string, options: FindOneOptions<P extends T ? T : P>): Promise<P | null>;\n\n\tasync findOne<P>(query: FilterQuery<T> | string = {}, options?: any): Promise<T | P | null> {\n\t\tconst q = typeof query === 'string' ? ({ _id: query } as FilterQuery<T>) : query;\n\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.findOne(q, optionsDef);\n\t}\n\n\t// findUsersInRoles(): void {\n\t// \tthrow new Error('[overwrite-function] You must overwrite this function in the extended classes');\n\t// }\n\n\tfind(query?: FilterQuery<T>): Cursor<ResultFields<T, C>>;\n\n\tfind(query: FilterQuery<T>, options: WithoutProjection<FindOneOptions<T>>): Cursor<ResultFields<T, C>>;\n\n\tfind<P = T>(query: FilterQuery<T>, options: FindOneOptions<P extends T ? T : P>): Cursor<P>;\n\n\tfind<P>(query: FilterQuery<T> | undefined = {}, options?: any): Cursor<P> | Cursor<T> {\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.find(query, optionsDef);\n\t}\n\n\tupdate(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<WriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.update(filter, update, options);\n\t}\n\n\tupdateOne(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<UpdateWriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.updateOne(filter, update, options);\n\t}\n\n\tupdateMany(filter: FilterQuery<T>, update: UpdateQuery<T> | Partial<T>, options?: UpdateManyOptions): Promise<UpdateWriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.updateMany(filter, update, options);\n\t}\n\n\tinsertMany(docs: Array<InsertionModel<T>>, options?: CollectionInsertOneOptions): Promise<InsertWriteOpResult<WithId<T>>> {\n\t\tdocs = docs.map((doc) => {\n\t\t\tif (!doc._id || typeof doc._id !== 'string') {\n\t\t\t\tconst oid = new ObjectID();\n\t\t\t\treturn { _id: oid.toHexString(), ...doc };\n\t\t\t}\n\t\t\tthis.setUpdatedAt(doc);\n\t\t\treturn doc;\n\t\t});\n\n\t\t// TODO reavaluate following type casting\n\t\treturn this.col.insertMany(docs as unknown as Array<OptionalId<T>>, options);\n\t}\n\n\tinsertOne(doc: InsertionModel<T>, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tif (!doc._id || typeof doc._id !== 'string') {\n\t\t\tconst oid = new ObjectID();\n\t\t\tdoc = { _id: oid.toHexString(), ...doc };\n\t\t}\n\n\t\tthis.setUpdatedAt(doc);\n\n\t\t// TODO reavaluate following type casting\n\t\treturn this.col.insertOne(doc as unknown as OptionalId<T>, options);\n\t}\n\n\tremoveById(_id: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.deleteOne({ _id } as FilterQuery<T>);\n\t}\n\n\tasync deleteOne(\n\t\tfilter: FilterQuery<T>,\n\t\toptions?: CommonOptions & { bypassDocumentValidation?: boolean },\n\t): Promise<DeleteWriteOpResultObject> {\n\t\tif (!this.trash) {\n\t\t\treturn this.col.deleteOne(filter, options);\n\t\t}\n\n\t\tconst doc = (await this.findOne(filter)) as unknown as (IRocketChatRecord & T) | undefined;\n\n\t\tif (doc) {\n\t\t\tconst { _id, ...record } = doc;\n\n\t\t\tconst trash = {\n\t\t\t\t...record,\n\n\t\t\t\t_deletedAt: new Date(),\n\t\t\t\t__collection__: this.name,\n\t\t\t} as RocketChatRecordDeleted<T>;\n\n\t\t\t// since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\t\t\tawait this.trash?.updateOne(\n\t\t\t\t{ _id } as FilterQuery<RocketChatRecordDeleted<T>>,\n\t\t\t\t{ $set: trash },\n\t\t\t\t{\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.col.deleteOne(filter, options);\n\t}\n\n\tasync deleteMany(filter: FilterQuery<T>, options?: CommonOptions): Promise<DeleteWriteOpResultObject> {\n\t\tif (!this.trash) {\n\t\t\treturn this.col.deleteMany(filter, options);\n\t\t}\n\n\t\tconst cursor = this.find(filter);\n\n\t\tconst ids: string[] = [];\n\t\tfor await (const doc of cursor) {\n\t\t\tconst { _id, ...record } = doc as unknown as IRocketChatRecord & T;\n\n\t\t\tconst trash = {\n\t\t\t\t...record,\n\n\t\t\t\t_deletedAt: new Date(),\n\t\t\t\t__collection__: this.name,\n\t\t\t} as RocketChatRecordDeleted<T>;\n\n\t\t\tids.push(_id);\n\n\t\t\t// since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\t\t\tawait this.trash?.updateOne(\n\t\t\t\t{ _id } as FilterQuery<RocketChatRecordDeleted<T>>,\n\t\t\t\t{ $set: trash },\n\t\t\t\t{\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.col.deleteMany({ _id: { $in: ids } } as unknown as FilterQuery<T>, options);\n\t}\n\n\t// Trash\n\ttrashFind<P extends RocketChatRecordDeleted<T>>(\n\t\tquery: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<P>> | undefined {\n\t\tif (!this.trash) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst { trash } = this;\n\n\t\treturn trash.find(\n\t\t\t{\n\t\t\t\t__collection__: this.name,\n\t\t\t\t...query,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\ttrashFindOneById(_id: string): Promise<RocketChatRecordDeleted<T> | null>;\n\n\ttrashFindOneById(\n\t\t_id: string,\n\t\toptions: WithoutProjection<RocketChatRecordDeleted<T>>,\n\t): Promise<RocketChatRecordDeleted<RocketChatRecordDeleted<T>> | null>;\n\n\ttrashFindOneById<P>(\n\t\t_id: string,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Promise<P | null>;\n\n\tasync trashFindOneById<P extends RocketChatRecordDeleted<T>>(\n\t\t_id: string,\n\t\toptions?:\n\t\t\t| undefined\n\t\t\t| WithoutProjection<RocketChatRecordDeleted<T>>\n\t\t\t| FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Promise<RocketChatRecordDeleted<P> | null> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t__collection__: this.name,\n\t\t} as FilterQuery<RocketChatRecordDeleted<T>>;\n\n\t\tif (!this.trash) {\n\t\t\treturn null;\n\t\t}\n\t\tconst { trash } = this;\n\n\t\treturn trash.findOne(query, options);\n\t}\n\n\tprivate setUpdatedAt(record: UpdateQuery<T> | InsertionModel<T>): void {\n\t\tif (this.preventSetUpdatedAt) {\n\t\t\treturn;\n\t\t}\n\t\tsetUpdatedAt(record);\n\t}\n\n\ttrashFindDeletedAfter(deletedAt: Date): Cursor<RocketChatRecordDeleted<T>>;\n\n\ttrashFindDeletedAfter(\n\t\tdeletedAt: Date,\n\t\tquery: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions: WithoutProjection<RocketChatRecordDeleted<T>>,\n\t): Cursor<RocketChatRecordDeleted<T>>;\n\n\ttrashFindDeletedAfter<P = RocketChatRecordDeleted<T>>(\n\t\tdeletedAt: Date,\n\t\tquery: FilterQuery<P>,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<P>>;\n\n\ttrashFindDeletedAfter<P = RocketChatRecordDeleted<T>>(\n\t\tdeletedAt: Date,\n\t\tquery?: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions?:\n\t\t\t| WithoutProjection<RocketChatRecordDeleted<T>>\n\t\t\t| FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<T>> {\n\t\tconst q = {\n\t\t\t__collection__: this.name,\n\t\t\t_deletedAt: {\n\t\t\t\t$gt: deletedAt,\n\t\t\t},\n\t\t\t...query,\n\t\t} as FilterQuery<RocketChatRecordDeleted<T>>;\n\n\t\tconst { trash } = this;\n\n\t\tif (!trash) {\n\t\t\tthrow new Error('Trash is not enabled for this collection');\n\t\t}\n\n\t\treturn trash.find(q, options as any);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/BaseRaw.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/BaseRaw.ts"}},"code":"const _excluded = [\"fields\", \"projection\"],\n      _excluded2 = [\"_id\"],\n      _excluded3 = [\"_id\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\n\nlet _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 2);\nmodule.export({\n  BaseRaw: () => BaseRaw\n});\nlet ObjectID;\nmodule.link(\"mongodb\", {\n  ObjectID(v) {\n    ObjectID = v;\n  }\n\n}, 0);\nlet setUpdatedAt;\nmodule.link(\"../lib/setUpdatedAt\", {\n  setUpdatedAt(v) {\n    setUpdatedAt = v;\n  }\n\n}, 1);\nmodule.link(\"mongodb\", {\n  IndexSpecification: \"IndexSpecification\"\n}, 2);\nconst baseName = 'rocketchat_';\nconst warnFields = process.env.NODE_ENV !== 'production' ? function () {\n  for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n    rest[_key] = arguments[_key];\n  }\n\n  console.warn(...rest, new Error().stack);\n} : new Function();\n\nclass BaseRaw {\n  constructor(col, trash, options) {\n    var _this$indexes, _options$preventSetUp;\n\n    this.col = void 0;\n    this.defaultFields = void 0;\n    this.indexes = void 0;\n    this.name = void 0;\n    this.preventSetUpdatedAt = void 0;\n    this.trash = void 0;\n    this.col = col;\n    this.name = this.col.collectionName.replace(baseName, '');\n    this.trash = trash;\n\n    if ((_this$indexes = this.indexes) !== null && _this$indexes !== void 0 && _this$indexes.length) {\n      this.col.createIndexes(this.indexes);\n    }\n\n    this.preventSetUpdatedAt = (_options$preventSetUp = options === null || options === void 0 ? void 0 : options.preventSetUpdatedAt) !== null && _options$preventSetUp !== void 0 ? _options$preventSetUp : false;\n  }\n\n  doNotMixInclusionAndExclusionFields() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const optionsDef = this.ensureDefaultFields(options);\n\n    if ((optionsDef === null || optionsDef === void 0 ? void 0 : optionsDef.projection) === undefined) {\n      return optionsDef;\n    }\n\n    const projection = optionsDef === null || optionsDef === void 0 ? void 0 : optionsDef.projection;\n    const keys = Object.keys(projection);\n    const removeKeys = keys.filter(key => projection[key] === 0);\n\n    if (keys.length > removeKeys.length) {\n      removeKeys.forEach(key => delete projection[key]);\n    }\n\n    return _objectSpread(_objectSpread({}, optionsDef), {}, {\n      projection\n    });\n  }\n\n  ensureDefaultFields(options) {\n    if (this.defaultFields === undefined) {\n      return options;\n    }\n\n    const _ref = options || {},\n          {\n      fields: deprecatedFields,\n      projection\n    } = _ref,\n          rest = _objectWithoutProperties(_ref, _excluded);\n\n    if (deprecatedFields) {\n      warnFields(\"Using 'fields' in models is deprecated.\", options);\n    }\n\n    const fields = _objectSpread(_objectSpread({}, deprecatedFields), projection);\n\n    return _objectSpread(_objectSpread({\n      projection: this.defaultFields\n    }, fields && Object.values(fields).length && {\n      projection: fields\n    }), rest);\n  }\n\n  findOneAndUpdate(query, update, options) {\n    return this.col.findOneAndUpdate(query, update, options);\n  }\n\n  findOneById(_id, options) {\n    return Promise.asyncApply(() => {\n      const query = {\n        _id\n      };\n      const optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n      return this.col.findOne(query, optionsDef);\n    });\n  }\n\n  findOne() {\n    return Promise.asyncApply(() => {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let options = arguments.length > 1 ? arguments[1] : undefined;\n      const q = typeof query === 'string' ? {\n        _id: query\n      } : query;\n      const optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n      return this.col.findOne(q, optionsDef);\n    });\n  }\n\n  find() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n    return this.col.find(query, optionsDef);\n  }\n\n  update(filter, update, options) {\n    this.setUpdatedAt(update);\n    return this.col.update(filter, update, options);\n  }\n\n  updateOne(filter, update, options) {\n    this.setUpdatedAt(update);\n    return this.col.updateOne(filter, update, options);\n  }\n\n  updateMany(filter, update, options) {\n    this.setUpdatedAt(update);\n    return this.col.updateMany(filter, update, options);\n  }\n\n  insertMany(docs, options) {\n    docs = docs.map(doc => {\n      if (!doc._id || typeof doc._id !== 'string') {\n        const oid = new ObjectID();\n        return _objectSpread({\n          _id: oid.toHexString()\n        }, doc);\n      }\n\n      this.setUpdatedAt(doc);\n      return doc;\n    }); // TODO reavaluate following type casting\n\n    return this.col.insertMany(docs, options);\n  }\n\n  insertOne(doc, options) {\n    if (!doc._id || typeof doc._id !== 'string') {\n      const oid = new ObjectID();\n      doc = _objectSpread({\n        _id: oid.toHexString()\n      }, doc);\n    }\n\n    this.setUpdatedAt(doc); // TODO reavaluate following type casting\n\n    return this.col.insertOne(doc, options);\n  }\n\n  removeById(_id) {\n    return this.deleteOne({\n      _id\n    });\n  }\n\n  deleteOne(filter, options) {\n    return Promise.asyncApply(() => {\n      if (!this.trash) {\n        return this.col.deleteOne(filter, options);\n      }\n\n      const doc = Promise.await(this.findOne(filter));\n\n      if (doc) {\n        var _this$trash;\n\n        const {\n          _id\n        } = doc,\n              record = _objectWithoutProperties(doc, _excluded2);\n\n        const trash = _objectSpread(_objectSpread({}, record), {}, {\n          _deletedAt: new Date(),\n          __collection__: this.name\n        }); // since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\n\n        Promise.await((_this$trash = this.trash) === null || _this$trash === void 0 ? void 0 : _this$trash.updateOne({\n          _id\n        }, {\n          $set: trash\n        }, {\n          upsert: true\n        }));\n      }\n\n      return this.col.deleteOne(filter, options);\n    });\n  }\n\n  deleteMany(filter, options) {\n    return Promise.asyncApply(() => {\n      if (!this.trash) {\n        return this.col.deleteMany(filter, options);\n      }\n\n      const cursor = this.find(filter);\n      const ids = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          var _this$trash2;\n\n          const doc = _step.value;\n\n          const {\n            _id\n          } = doc,\n                record = _objectWithoutProperties(doc, _excluded3);\n\n          const trash = _objectSpread(_objectSpread({}, record), {}, {\n            _deletedAt: new Date(),\n            __collection__: this.name\n          });\n\n          ids.push(_id); // since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\n          Promise.await((_this$trash2 = this.trash) === null || _this$trash2 === void 0 ? void 0 : _this$trash2.updateOne({\n            _id\n          }, {\n            $set: trash\n          }, {\n            upsert: true\n          }));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return this.col.deleteMany({\n        _id: {\n          $in: ids\n        }\n      }, options);\n    });\n  } // Trash\n\n\n  trashFind(query, options) {\n    if (!this.trash) {\n      return undefined;\n    }\n\n    const {\n      trash\n    } = this;\n    return trash.find(_objectSpread({\n      __collection__: this.name\n    }, query), options);\n  }\n\n  trashFindOneById(_id, options) {\n    return Promise.asyncApply(() => {\n      const query = {\n        _id,\n        __collection__: this.name\n      };\n\n      if (!this.trash) {\n        return null;\n      }\n\n      const {\n        trash\n      } = this;\n      return trash.findOne(query, options);\n    });\n  }\n\n  setUpdatedAt(record) {\n    if (this.preventSetUpdatedAt) {\n      return;\n    }\n\n    setUpdatedAt(record);\n  }\n\n  trashFindDeletedAfter(deletedAt, query, options) {\n    const q = _objectSpread({\n      __collection__: this.name,\n      _deletedAt: {\n        $gt: deletedAt\n      }\n    }, query);\n\n    const {\n      trash\n    } = this;\n\n    if (!trash) {\n      throw new Error('Trash is not enabled for this collection');\n    }\n\n    return trash.find(q, options);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/BaseRaw.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCollection,\n\tCollectionInsertOneOptions,\n\tCommonOptions,\n\tCursor,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n\tFindAndModifyWriteOpResultObject,\n\tFindOneAndUpdateOption,\n\tFindOneOptions,\n\tIndexSpecification,\n\tInsertOneWriteOpResult,\n\tInsertWriteOpResult,\n\tObjectID,\n\tObjectId,\n\tOptionalId,\n\tUpdateManyOptions,\n\tUpdateOneOptions,\n\tUpdateQuery,\n\tUpdateWriteOpResult,\n\tWithId,\n\tWithoutProjection,\n\tWriteOpResult,\n} from 'mongodb';\n\nimport { IRocketChatRecord, RocketChatRecordDeleted } from '../../../../definition/IRocketChatRecord';\nimport { setUpdatedAt } from '../lib/setUpdatedAt';\n\nexport { IndexSpecification } from 'mongodb';\n\n// [extracted from @types/mongo] TypeScript Omit (Exclude to be specific) does not work for objects with an \"any\" indexed type, and breaks discriminated unions\ntype EnhancedOmit<T, K> = string | number extends keyof T\n\t? T // T has indexed type e.g. { _id: string; [k: string]: any; } or it is \"any\"\n\t: T extends any\n\t? Pick<T, Exclude<keyof T, K>> // discriminated unions\n\t: never;\n\n// [extracted from @types/mongo]\ntype ExtractIdType<TSchema> = TSchema extends { _id: infer U } // user has defined a type for _id\n\t? {} extends U\n\t\t? Exclude<U, {}>\n\t\t: unknown extends U\n\t\t? ObjectId\n\t\t: U\n\t: ObjectId;\n\nexport type ModelOptionalId<T> = EnhancedOmit<T, '_id'> & { _id?: ExtractIdType<T> };\n// InsertionModel forces both _id and _updatedAt to be optional, regardless of how they are declared in T\nexport type InsertionModel<T> = EnhancedOmit<ModelOptionalId<T>, '_updatedAt'> & {\n\t_updatedAt?: Date;\n};\n\nexport interface IBaseRaw<T> {\n\tcol: Collection<T>;\n}\n\nconst baseName = 'rocketchat_';\n\ntype DefaultFields<Base> = Record<keyof Base, 1> | Record<keyof Base, 0> | void;\ntype ResultFields<Base, Defaults> = Defaults extends void\n\t? Base\n\t: Defaults[keyof Defaults] extends 1\n\t? Pick<Defaults, keyof Defaults>\n\t: Omit<Defaults, keyof Defaults>;\n\nconst warnFields =\n\tprocess.env.NODE_ENV !== 'production'\n\t\t? (...rest: any): void => {\n\t\t\t\tconsole.warn(...rest, new Error().stack);\n\t\t  }\n\t\t: new Function();\n\nexport class BaseRaw<T, C extends DefaultFields<T> = undefined> implements IBaseRaw<T> {\n\tpublic readonly defaultFields: C;\n\n\tprotected indexes?: IndexSpecification[];\n\n\tprotected name: string;\n\n\tprivate preventSetUpdatedAt: boolean;\n\n\tpublic readonly trash?: Collection<RocketChatRecordDeleted<T>>;\n\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>, options?: { preventSetUpdatedAt?: boolean }) {\n\t\tthis.name = this.col.collectionName.replace(baseName, '');\n\t\tthis.trash = trash as unknown as Collection<RocketChatRecordDeleted<T>>;\n\n\t\tif (this.indexes?.length) {\n\t\t\tthis.col.createIndexes(this.indexes);\n\t\t}\n\n\t\tthis.preventSetUpdatedAt = options?.preventSetUpdatedAt ?? false;\n\t}\n\n\tprivate doNotMixInclusionAndExclusionFields(options: FindOneOptions<T> = {}): FindOneOptions<T> {\n\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tif (optionsDef?.projection === undefined) {\n\t\t\treturn optionsDef;\n\t\t}\n\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst keys = Object.keys(projection);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tif (keys.length > removeKeys.length) {\n\t\t\tremoveKeys.forEach((key) => delete projection[key]);\n\t\t}\n\n\t\treturn {\n\t\t\t...optionsDef,\n\t\t\tprojection,\n\t\t};\n\t}\n\n\tprivate ensureDefaultFields(options?: undefined): C extends void ? undefined : WithoutProjection<FindOneOptions<T>>;\n\n\tprivate ensureDefaultFields(options: WithoutProjection<FindOneOptions<T>>): WithoutProjection<FindOneOptions<T>>;\n\n\tprivate ensureDefaultFields<P>(options: FindOneOptions<P>): FindOneOptions<P>;\n\n\tprivate ensureDefaultFields<P>(options?: any): FindOneOptions<P> | undefined | WithoutProjection<FindOneOptions<T>> {\n\t\tif (this.defaultFields === undefined) {\n\t\t\treturn options;\n\t\t}\n\n\t\tconst { fields: deprecatedFields, projection, ...rest } = options || {};\n\n\t\tif (deprecatedFields) {\n\t\t\twarnFields(\"Using 'fields' in models is deprecated.\", options);\n\t\t}\n\n\t\tconst fields = { ...deprecatedFields, ...projection };\n\n\t\treturn {\n\t\t\tprojection: this.defaultFields,\n\t\t\t...(fields && Object.values(fields).length && { projection: fields }),\n\t\t\t...rest,\n\t\t};\n\t}\n\n\tpublic findOneAndUpdate(\n\t\tquery: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | T,\n\t\toptions?: FindOneAndUpdateOption<T>,\n\t): Promise<FindAndModifyWriteOpResultObject<T>> {\n\t\treturn this.col.findOneAndUpdate(query, update, options);\n\t}\n\n\tasync findOneById(_id: string, options?: WithoutProjection<FindOneOptions<T>> | undefined): Promise<T | null>;\n\n\tasync findOneById<P>(_id: string, options: FindOneOptions<P extends T ? T : P>): Promise<P | null>;\n\n\tasync findOneById<P>(_id: string, options?: any): Promise<T | P | null> {\n\t\tconst query = { _id } as FilterQuery<T>;\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.findOne(query, optionsDef);\n\t}\n\n\tasync findOne(query?: FilterQuery<T> | string, options?: undefined): Promise<T | null>;\n\n\tasync findOne(query: FilterQuery<T> | string, options: WithoutProjection<FindOneOptions<T>>): Promise<T | null>;\n\n\tasync findOne<P>(query: FilterQuery<T> | string, options: FindOneOptions<P extends T ? T : P>): Promise<P | null>;\n\n\tasync findOne<P>(query: FilterQuery<T> | string = {}, options?: any): Promise<T | P | null> {\n\t\tconst q = typeof query === 'string' ? ({ _id: query } as FilterQuery<T>) : query;\n\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.findOne(q, optionsDef);\n\t}\n\n\t// findUsersInRoles(): void {\n\t// \tthrow new Error('[overwrite-function] You must overwrite this function in the extended classes');\n\t// }\n\n\tfind(query?: FilterQuery<T>): Cursor<ResultFields<T, C>>;\n\n\tfind(query: FilterQuery<T>, options: WithoutProjection<FindOneOptions<T>>): Cursor<ResultFields<T, C>>;\n\n\tfind<P = T>(query: FilterQuery<T>, options: FindOneOptions<P extends T ? T : P>): Cursor<P>;\n\n\tfind<P>(query: FilterQuery<T> | undefined = {}, options?: any): Cursor<P> | Cursor<T> {\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\treturn this.col.find(query, optionsDef);\n\t}\n\n\tupdate(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<WriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.update(filter, update, options);\n\t}\n\n\tupdateOne(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<UpdateWriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.updateOne(filter, update, options);\n\t}\n\n\tupdateMany(filter: FilterQuery<T>, update: UpdateQuery<T> | Partial<T>, options?: UpdateManyOptions): Promise<UpdateWriteOpResult> {\n\t\tthis.setUpdatedAt(update);\n\t\treturn this.col.updateMany(filter, update, options);\n\t}\n\n\tinsertMany(docs: Array<InsertionModel<T>>, options?: CollectionInsertOneOptions): Promise<InsertWriteOpResult<WithId<T>>> {\n\t\tdocs = docs.map((doc) => {\n\t\t\tif (!doc._id || typeof doc._id !== 'string') {\n\t\t\t\tconst oid = new ObjectID();\n\t\t\t\treturn { _id: oid.toHexString(), ...doc };\n\t\t\t}\n\t\t\tthis.setUpdatedAt(doc);\n\t\t\treturn doc;\n\t\t});\n\n\t\t// TODO reavaluate following type casting\n\t\treturn this.col.insertMany(docs as unknown as Array<OptionalId<T>>, options);\n\t}\n\n\tinsertOne(doc: InsertionModel<T>, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tif (!doc._id || typeof doc._id !== 'string') {\n\t\t\tconst oid = new ObjectID();\n\t\t\tdoc = { _id: oid.toHexString(), ...doc };\n\t\t}\n\n\t\tthis.setUpdatedAt(doc);\n\n\t\t// TODO reavaluate following type casting\n\t\treturn this.col.insertOne(doc as unknown as OptionalId<T>, options);\n\t}\n\n\tremoveById(_id: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.deleteOne({ _id } as FilterQuery<T>);\n\t}\n\n\tasync deleteOne(\n\t\tfilter: FilterQuery<T>,\n\t\toptions?: CommonOptions & { bypassDocumentValidation?: boolean },\n\t): Promise<DeleteWriteOpResultObject> {\n\t\tif (!this.trash) {\n\t\t\treturn this.col.deleteOne(filter, options);\n\t\t}\n\n\t\tconst doc = (await this.findOne(filter)) as unknown as (IRocketChatRecord & T) | undefined;\n\n\t\tif (doc) {\n\t\t\tconst { _id, ...record } = doc;\n\n\t\t\tconst trash = {\n\t\t\t\t...record,\n\n\t\t\t\t_deletedAt: new Date(),\n\t\t\t\t__collection__: this.name,\n\t\t\t} as RocketChatRecordDeleted<T>;\n\n\t\t\t// since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\t\t\tawait this.trash?.updateOne(\n\t\t\t\t{ _id } as FilterQuery<RocketChatRecordDeleted<T>>,\n\t\t\t\t{ $set: trash },\n\t\t\t\t{\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.col.deleteOne(filter, options);\n\t}\n\n\tasync deleteMany(filter: FilterQuery<T>, options?: CommonOptions): Promise<DeleteWriteOpResultObject> {\n\t\tif (!this.trash) {\n\t\t\treturn this.col.deleteMany(filter, options);\n\t\t}\n\n\t\tconst cursor = this.find(filter);\n\n\t\tconst ids: string[] = [];\n\t\tfor await (const doc of cursor) {\n\t\t\tconst { _id, ...record } = doc as unknown as IRocketChatRecord & T;\n\n\t\t\tconst trash = {\n\t\t\t\t...record,\n\n\t\t\t\t_deletedAt: new Date(),\n\t\t\t\t__collection__: this.name,\n\t\t\t} as RocketChatRecordDeleted<T>;\n\n\t\t\tids.push(_id);\n\n\t\t\t// since the operation is not atomic, we need to make sure that the record is not already deleted/inserted\n\t\t\tawait this.trash?.updateOne(\n\t\t\t\t{ _id } as FilterQuery<RocketChatRecordDeleted<T>>,\n\t\t\t\t{ $set: trash },\n\t\t\t\t{\n\t\t\t\t\tupsert: true,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.col.deleteMany({ _id: { $in: ids } } as unknown as FilterQuery<T>, options);\n\t}\n\n\t// Trash\n\ttrashFind<P extends RocketChatRecordDeleted<T>>(\n\t\tquery: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<P>> | undefined {\n\t\tif (!this.trash) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst { trash } = this;\n\n\t\treturn trash.find(\n\t\t\t{\n\t\t\t\t__collection__: this.name,\n\t\t\t\t...query,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\ttrashFindOneById(_id: string): Promise<RocketChatRecordDeleted<T> | null>;\n\n\ttrashFindOneById(\n\t\t_id: string,\n\t\toptions: WithoutProjection<RocketChatRecordDeleted<T>>,\n\t): Promise<RocketChatRecordDeleted<RocketChatRecordDeleted<T>> | null>;\n\n\ttrashFindOneById<P>(\n\t\t_id: string,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Promise<P | null>;\n\n\tasync trashFindOneById<P extends RocketChatRecordDeleted<T>>(\n\t\t_id: string,\n\t\toptions?:\n\t\t\t| undefined\n\t\t\t| WithoutProjection<RocketChatRecordDeleted<T>>\n\t\t\t| FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Promise<RocketChatRecordDeleted<P> | null> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t__collection__: this.name,\n\t\t} as FilterQuery<RocketChatRecordDeleted<T>>;\n\n\t\tif (!this.trash) {\n\t\t\treturn null;\n\t\t}\n\t\tconst { trash } = this;\n\n\t\treturn trash.findOne(query, options);\n\t}\n\n\tprivate setUpdatedAt(record: UpdateQuery<T> | InsertionModel<T>): void {\n\t\tif (this.preventSetUpdatedAt) {\n\t\t\treturn;\n\t\t}\n\t\tsetUpdatedAt(record);\n\t}\n\n\ttrashFindDeletedAfter(deletedAt: Date): Cursor<RocketChatRecordDeleted<T>>;\n\n\ttrashFindDeletedAfter(\n\t\tdeletedAt: Date,\n\t\tquery: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions: WithoutProjection<RocketChatRecordDeleted<T>>,\n\t): Cursor<RocketChatRecordDeleted<T>>;\n\n\ttrashFindDeletedAfter<P = RocketChatRecordDeleted<T>>(\n\t\tdeletedAt: Date,\n\t\tquery: FilterQuery<P>,\n\t\toptions: FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<P>>;\n\n\ttrashFindDeletedAfter<P = RocketChatRecordDeleted<T>>(\n\t\tdeletedAt: Date,\n\t\tquery?: FilterQuery<RocketChatRecordDeleted<T>>,\n\t\toptions?:\n\t\t\t| WithoutProjection<RocketChatRecordDeleted<T>>\n\t\t\t| FindOneOptions<P extends RocketChatRecordDeleted<T> ? RocketChatRecordDeleted<T> : P>,\n\t): Cursor<RocketChatRecordDeleted<T>> {\n\t\tconst q = {\n\t\t\t__collection__: this.name,\n\t\t\t_deletedAt: {\n\t\t\t\t$gt: deletedAt,\n\t\t\t},\n\t\t\t...query,\n\t\t} as FilterQuery<RocketChatRecordDeleted<T>>;\n\n\t\tconst { trash } = this;\n\n\t\tif (!trash) {\n\t\t\tthrow new Error('Trash is not enabled for this collection');\n\t\t}\n\n\t\treturn trash.find(q, options as any);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"945236d814aff0d0356f38b840200c1c8a361fe2"}
