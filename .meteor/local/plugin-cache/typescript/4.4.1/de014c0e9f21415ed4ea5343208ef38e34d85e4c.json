{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/client/contexts/ServerContext/ServerContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/contexts/ServerContext/ServerContext.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/client/contexts/ServerContext/ServerContext.ts","inputSourceMap":{"version":3,"file":"client/contexts/ServerContext/ServerContext.ts","sourceRoot":"","sources":["client/contexts/ServerContext/ServerContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAuBxE,MAAM,CAAC,MAAM,aAAa,GAAG,aAAa,CAAqB;IAC9D,IAAI,EAAE,SAAS;IACf,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI;IAC3B,YAAY,EAAE,GAAG,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;IACD,gBAAgB,EAAE,KAAK,IAAI,EAAE,CAAC,SAAS;IACvC,SAAS,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAS,EAAE,CAAC,SAAS;CAC5C,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAgB,EAAE;IACrD,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAC3C,IAAI,CAAC,IAAI,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC3D;IACD,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAA+B,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC;AAEtG,MAAM,CAAC,MAAM,SAAS,GAAG,CAAyC,UAAsB,EAAoC,EAAE;IAC7H,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAEjD,OAAO,WAAW,CACjB,CAAC,GAAG,IAAwC,EAAE,EAAE;QAC/C,IAAI,CAAC,UAAU,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,wBAAwB,UAAU,yCAAyC,CAAC,CAAC;SAC7F;QAED,OAAO,UAAU,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;IACxC,CAAC,EACD,CAAC,UAAU,EAAE,UAAU,CAAC,CACxB,CAAC;AACH,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,WAAW,GAAG,CAC1B,MAAe,EACf,IAAW,EAC0C,EAAE;IACvD,MAAM,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAEnD,OAAO,WAAW,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAClG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,QAAgB,EAAmD,EAAE;IAC9F,MAAM,EAAE,gBAAgB,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IACvD,OAAO,WAAW,CAAC,CAAC,MAAM,EAAE,QAAa,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC;AAC3H,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,UAAkB,EAAE,OAAY,EAAuE,EAAE;IAClI,MAAM,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAChD,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;AACxF,CAAC,CAAC","sourcesContent":["import { createContext, useCallback, useContext, useMemo } from 'react';\n\nimport type { IServerInfo } from '../../../definition/IServerInfo';\nimport type { Serialized } from '../../../definition/Serialized';\nimport type { Method, PathFor, OperationParams, MatchPathPattern, OperationResult, PathPattern } from '../../../definition/rest';\nimport { ServerMethodFunction, ServerMethodName, ServerMethodParameters, ServerMethodReturn, ServerMethods } from './methods';\n\ntype ServerContextValue = {\n\tinfo?: IServerInfo;\n\tabsoluteUrl: (path: string) => string;\n\tcallMethod?: <MethodName extends ServerMethodName>(\n\t\tmethodName: MethodName,\n\t\t...args: ServerMethodParameters<MethodName>\n\t) => Promise<ServerMethodReturn<MethodName>>;\n\tcallEndpoint: <TMethod extends Method, TPath extends PathFor<TMethod>>(\n\t\tmethod: TMethod,\n\t\tpath: TPath,\n\t\tparams: Serialized<OperationParams<TMethod, MatchPathPattern<TPath>>>,\n\t) => Promise<Serialized<OperationResult<TMethod, MatchPathPattern<TPath>>>>;\n\tuploadToEndpoint: (endpoint: string, params: any, formData: any) => Promise<void>;\n\tgetStream: (streamName: string, options?: {}) => <T>(eventName: string, callback: (data: T) => void) => () => void;\n};\n\nexport const ServerContext = createContext<ServerContextValue>({\n\tinfo: undefined,\n\tabsoluteUrl: (path) => path,\n\tcallEndpoint: () => {\n\t\tthrow new Error('not implemented');\n\t},\n\tuploadToEndpoint: async () => undefined,\n\tgetStream: () => () => (): void => undefined,\n});\n\nexport const useServerInformation = (): IServerInfo => {\n\tconst { info } = useContext(ServerContext);\n\tif (!info) {\n\t\tthrow new Error('useServerInformation: no info available');\n\t}\n\treturn info;\n};\n\nexport const useAbsoluteUrl = (): ((path: string) => string) => useContext(ServerContext).absoluteUrl;\n\nexport const useMethod = <MethodName extends keyof ServerMethods>(methodName: MethodName): ServerMethodFunction<MethodName> => {\n\tconst { callMethod } = useContext(ServerContext);\n\n\treturn useCallback(\n\t\t(...args: ServerMethodParameters<MethodName>) => {\n\t\t\tif (!callMethod) {\n\t\t\t\tthrow new Error(`cannot use useMethod(${methodName}) hook without a wrapping ServerContext`);\n\t\t\t}\n\n\t\t\treturn callMethod(methodName, ...args);\n\t\t},\n\t\t[callMethod, methodName],\n\t);\n};\n\ntype EndpointFunction<TMethod extends Method, TPathPattern extends PathPattern> = (\n\tparams: void extends OperationParams<TMethod, TPathPattern> ? void : Serialized<OperationParams<TMethod, TPathPattern>>,\n) => Promise<Serialized<OperationResult<TMethod, TPathPattern>>>;\n\nexport const useEndpoint = <TMethod extends Method, TPath extends PathFor<TMethod>>(\n\tmethod: TMethod,\n\tpath: TPath,\n): EndpointFunction<TMethod, MatchPathPattern<TPath>> => {\n\tconst { callEndpoint } = useContext(ServerContext);\n\n\treturn useCallback((params) => callEndpoint(method, path, params), [callEndpoint, path, method]);\n};\n\nexport const useUpload = (endpoint: string): ((params: any, formData: any) => Promise<void>) => {\n\tconst { uploadToEndpoint } = useContext(ServerContext);\n\treturn useCallback((params, formData: any) => uploadToEndpoint(endpoint, params, formData), [endpoint, uploadToEndpoint]);\n};\n\nexport const useStream = (streamName: string, options?: {}): (<T>(eventName: string, callback: (data: T) => void) => () => void) => {\n\tconst { getStream } = useContext(ServerContext);\n\treturn useMemo(() => getStream(streamName, options), [getStream, streamName, options]);\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/client/contexts/ServerContext/ServerContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/contexts/ServerContext/ServerContext.ts"}},"code":"module.export({\n  ServerContext: () => ServerContext,\n  useServerInformation: () => useServerInformation,\n  useAbsoluteUrl: () => useAbsoluteUrl,\n  useMethod: () => useMethod,\n  useEndpoint: () => useEndpoint,\n  useUpload: () => useUpload,\n  useStream: () => useStream\n});\nlet createContext, useCallback, useContext, useMemo;\nmodule.link(\"react\", {\n  createContext(v) {\n    createContext = v;\n  },\n\n  useCallback(v) {\n    useCallback = v;\n  },\n\n  useContext(v) {\n    useContext = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 0);\nconst ServerContext = /*#__PURE__*/createContext({\n  info: undefined,\n  absoluteUrl: path => path,\n  callEndpoint: () => {\n    throw new Error('not implemented');\n  },\n  uploadToEndpoint: async () => undefined,\n  getStream: () => () => () => undefined\n});\n\nconst useServerInformation = () => {\n  const {\n    info\n  } = useContext(ServerContext);\n\n  if (!info) {\n    throw new Error('useServerInformation: no info available');\n  }\n\n  return info;\n};\n\nconst useAbsoluteUrl = () => useContext(ServerContext).absoluteUrl;\n\nconst useMethod = methodName => {\n  const {\n    callMethod\n  } = useContext(ServerContext);\n  return useCallback(function () {\n    if (!callMethod) {\n      throw new Error(\"cannot use useMethod(\".concat(methodName, \") hook without a wrapping ServerContext\"));\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return callMethod(methodName, ...args);\n  }, [callMethod, methodName]);\n};\n\nconst useEndpoint = (method, path) => {\n  const {\n    callEndpoint\n  } = useContext(ServerContext);\n  return useCallback(params => callEndpoint(method, path, params), [callEndpoint, path, method]);\n};\n\nconst useUpload = endpoint => {\n  const {\n    uploadToEndpoint\n  } = useContext(ServerContext);\n  return useCallback((params, formData) => uploadToEndpoint(endpoint, params, formData), [endpoint, uploadToEndpoint]);\n};\n\nconst useStream = (streamName, options) => {\n  const {\n    getStream\n  } = useContext(ServerContext);\n  return useMemo(() => getStream(streamName, options), [getStream, streamName, options]);\n};","map":{"version":3,"sources":["client/contexts/ServerContext/ServerContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { createContext, useCallback, useContext, useMemo } from 'react';\n\nimport type { IServerInfo } from '../../../definition/IServerInfo';\nimport type { Serialized } from '../../../definition/Serialized';\nimport type { Method, PathFor, OperationParams, MatchPathPattern, OperationResult, PathPattern } from '../../../definition/rest';\nimport { ServerMethodFunction, ServerMethodName, ServerMethodParameters, ServerMethodReturn, ServerMethods } from './methods';\n\ntype ServerContextValue = {\n\tinfo?: IServerInfo;\n\tabsoluteUrl: (path: string) => string;\n\tcallMethod?: <MethodName extends ServerMethodName>(\n\t\tmethodName: MethodName,\n\t\t...args: ServerMethodParameters<MethodName>\n\t) => Promise<ServerMethodReturn<MethodName>>;\n\tcallEndpoint: <TMethod extends Method, TPath extends PathFor<TMethod>>(\n\t\tmethod: TMethod,\n\t\tpath: TPath,\n\t\tparams: Serialized<OperationParams<TMethod, MatchPathPattern<TPath>>>,\n\t) => Promise<Serialized<OperationResult<TMethod, MatchPathPattern<TPath>>>>;\n\tuploadToEndpoint: (endpoint: string, params: any, formData: any) => Promise<void>;\n\tgetStream: (streamName: string, options?: {}) => <T>(eventName: string, callback: (data: T) => void) => () => void;\n};\n\nexport const ServerContext = createContext<ServerContextValue>({\n\tinfo: undefined,\n\tabsoluteUrl: (path) => path,\n\tcallEndpoint: () => {\n\t\tthrow new Error('not implemented');\n\t},\n\tuploadToEndpoint: async () => undefined,\n\tgetStream: () => () => (): void => undefined,\n});\n\nexport const useServerInformation = (): IServerInfo => {\n\tconst { info } = useContext(ServerContext);\n\tif (!info) {\n\t\tthrow new Error('useServerInformation: no info available');\n\t}\n\treturn info;\n};\n\nexport const useAbsoluteUrl = (): ((path: string) => string) => useContext(ServerContext).absoluteUrl;\n\nexport const useMethod = <MethodName extends keyof ServerMethods>(methodName: MethodName): ServerMethodFunction<MethodName> => {\n\tconst { callMethod } = useContext(ServerContext);\n\n\treturn useCallback(\n\t\t(...args: ServerMethodParameters<MethodName>) => {\n\t\t\tif (!callMethod) {\n\t\t\t\tthrow new Error(`cannot use useMethod(${methodName}) hook without a wrapping ServerContext`);\n\t\t\t}\n\n\t\t\treturn callMethod(methodName, ...args);\n\t\t},\n\t\t[callMethod, methodName],\n\t);\n};\n\ntype EndpointFunction<TMethod extends Method, TPathPattern extends PathPattern> = (\n\tparams: void extends OperationParams<TMethod, TPathPattern> ? void : Serialized<OperationParams<TMethod, TPathPattern>>,\n) => Promise<Serialized<OperationResult<TMethod, TPathPattern>>>;\n\nexport const useEndpoint = <TMethod extends Method, TPath extends PathFor<TMethod>>(\n\tmethod: TMethod,\n\tpath: TPath,\n): EndpointFunction<TMethod, MatchPathPattern<TPath>> => {\n\tconst { callEndpoint } = useContext(ServerContext);\n\n\treturn useCallback((params) => callEndpoint(method, path, params), [callEndpoint, path, method]);\n};\n\nexport const useUpload = (endpoint: string): ((params: any, formData: any) => Promise<void>) => {\n\tconst { uploadToEndpoint } = useContext(ServerContext);\n\treturn useCallback((params, formData: any) => uploadToEndpoint(endpoint, params, formData), [endpoint, uploadToEndpoint]);\n};\n\nexport const useStream = (streamName: string, options?: {}): (<T>(eventName: string, callback: (data: T) => void) => () => void) => {\n\tconst { getStream } = useContext(ServerContext);\n\treturn useMemo(() => getStream(streamName, options), [getStream, streamName, options]);\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"de014c0e9f21415ed4ea5343208ef38e34d85e4c"}
