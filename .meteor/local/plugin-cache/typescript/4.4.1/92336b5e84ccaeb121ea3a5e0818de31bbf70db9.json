{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/TeamMember.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/TeamMember.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/TeamMember.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/TeamMember.ts","sourceRoot":"","sources":["app/models/server/raw/TeamMember.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCollection,\n\tWithoutProjection,\n\tFindOneOptions,\n\tCursor,\n\tInsertOneWriteOpResult,\n\tUpdateWriteOpResult,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n} from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ITeamMember } from '../../../../definition/ITeam';\nimport { IUser } from '../../../../definition/IUser';\n\ntype T = ITeamMember;\nexport class TeamMemberRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { teamId: 1 } }]);\n\n\t\t// teamId => userId should be unique\n\t\tthis.col.createIndex({ teamId: 1, userId: 1 }, { unique: true });\n\t}\n\n\tfindByUserId(userId: string): Cursor<ITeamMember>;\n\n\tfindByUserId(userId: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByUserId<P>(userId: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByUserId<P>(\n\t\tuserId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ userId }, options) : this.col.find({ userId }, options);\n\t}\n\n\tfindOneByUserIdAndTeamId(userId: string, teamId: string): Promise<ITeamMember | null>;\n\n\tfindOneByUserIdAndTeamId(\n\t\tuserId: string,\n\t\tteamId: string,\n\t\toptions: WithoutProjection<FindOneOptions<ITeamMember>>,\n\t): Promise<ITeamMember | null>;\n\n\tfindOneByUserIdAndTeamId<P>(userId: string, teamId: string, options: FindOneOptions<P>): Promise<P | null>;\n\n\tfindOneByUserIdAndTeamId<P>(\n\t\tuserId: string,\n\t\tteamId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P | null | ITeamMember> {\n\t\treturn options ? this.col.findOne({ userId, teamId }, options) : this.col.findOne({ userId, teamId }, options);\n\t}\n\n\tfindByTeamId(teamId: string): Cursor<ITeamMember>;\n\n\tfindByTeamId(teamId: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamId<P>(teamId: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamId<P>(\n\t\tteamId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId }, options) : this.col.find({ teamId }, options);\n\t}\n\n\tfindByTeamIds(teamIds: Array<string>): Cursor<ITeamMember>;\n\n\tfindByTeamIds(teamIds: Array<string>, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamIds<P>(teamIds: Array<string>, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamIds<P>(\n\t\tteamIds: Array<string>,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId: { $in: teamIds } }, options) : this.col.find({ teamId: { $in: teamIds } }, options);\n\t}\n\n\tfindByTeamIdAndRole(teamId: string, role: string): Cursor<ITeamMember>;\n\n\tfindByTeamIdAndRole(teamId: string, role: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamIdAndRole<P>(teamId: string, role: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamIdAndRole<P>(\n\t\tteamId: string,\n\t\trole: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId, roles: role }, options) : this.col.find({ teamId, roles: role });\n\t}\n\n\tfindByUserIdAndTeamIds(userId: string, teamIds: Array<string>, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\tuserId,\n\t\t\tteamId: {\n\t\t\t\t$in: teamIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.find(query, options);\n\t}\n\n\tfindMembersInfoByTeamId(teamId: string, limit: number, skip: number, query?: FilterQuery<T>): Cursor<T> {\n\t\treturn this.col.find({ ...query, teamId }, {\n\t\t\tlimit,\n\t\t\tskip,\n\t\t\tprojection: {\n\t\t\t\tuserId: 1,\n\t\t\t\troles: 1,\n\t\t\t\tcreatedBy: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t},\n\t\t} as FindOneOptions<T>);\n\t}\n\n\tupdateOneByUserIdAndTeamId(userId: string, teamId: string, update: Partial<T>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne({ userId, teamId }, { $set: update });\n\t}\n\n\tcreateOneByTeamIdAndUserId(\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tcreatedBy: Pick<IUser, '_id' | 'username'>,\n\t): Promise<InsertOneWriteOpResult<T>> {\n\t\treturn this.insertOne({\n\t\t\tteamId,\n\t\t\tuserId,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t});\n\t}\n\n\tupdateRolesByTeamIdAndUserId(teamId: string, userId: string, roles: Array<string>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tteamId,\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\troles: { $each: roles },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRolesByTeamIdAndUserId(teamId: string, userId: string, roles: Array<string>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tteamId,\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\troles: { $in: roles },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdeleteByUserIdAndTeamId(userId: string, teamId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.col.deleteOne({\n\t\t\tteamId,\n\t\t\tuserId,\n\t\t});\n\t}\n\n\tdeleteByTeamId(teamId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.col.deleteMany({\n\t\t\tteamId,\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/TeamMember.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/TeamMember.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  TeamMemberRaw: () => TeamMemberRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\n\nclass TeamMemberRaw extends BaseRaw {\n  constructor(col, trash) {\n    super(col, trash);\n    this.col = void 0;\n    this.col = col;\n    this.col.createIndexes([{\n      key: {\n        teamId: 1\n      }\n    }]); // teamId => userId should be unique\n\n    this.col.createIndex({\n      teamId: 1,\n      userId: 1\n    }, {\n      unique: true\n    });\n  }\n\n  findByUserId(userId, options) {\n    return options ? this.col.find({\n      userId\n    }, options) : this.col.find({\n      userId\n    }, options);\n  }\n\n  findOneByUserIdAndTeamId(userId, teamId, options) {\n    return options ? this.col.findOne({\n      userId,\n      teamId\n    }, options) : this.col.findOne({\n      userId,\n      teamId\n    }, options);\n  }\n\n  findByTeamId(teamId, options) {\n    return options ? this.col.find({\n      teamId\n    }, options) : this.col.find({\n      teamId\n    }, options);\n  }\n\n  findByTeamIds(teamIds, options) {\n    return options ? this.col.find({\n      teamId: {\n        $in: teamIds\n      }\n    }, options) : this.col.find({\n      teamId: {\n        $in: teamIds\n      }\n    }, options);\n  }\n\n  findByTeamIdAndRole(teamId, role, options) {\n    return options ? this.col.find({\n      teamId,\n      roles: role\n    }, options) : this.col.find({\n      teamId,\n      roles: role\n    });\n  }\n\n  findByUserIdAndTeamIds(userId, teamIds) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      userId,\n      teamId: {\n        $in: teamIds\n      }\n    };\n    return this.col.find(query, options);\n  }\n\n  findMembersInfoByTeamId(teamId, limit, skip, query) {\n    return this.col.find(_objectSpread(_objectSpread({}, query), {}, {\n      teamId\n    }), {\n      limit,\n      skip,\n      projection: {\n        userId: 1,\n        roles: 1,\n        createdBy: 1,\n        createdAt: 1\n      }\n    });\n  }\n\n  updateOneByUserIdAndTeamId(userId, teamId, update) {\n    return this.updateOne({\n      userId,\n      teamId\n    }, {\n      $set: update\n    });\n  }\n\n  createOneByTeamIdAndUserId(teamId, userId, createdBy) {\n    return this.insertOne({\n      teamId,\n      userId,\n      createdAt: new Date(),\n      createdBy\n    });\n  }\n\n  updateRolesByTeamIdAndUserId(teamId, userId, roles) {\n    return this.updateOne({\n      teamId,\n      userId\n    }, {\n      $addToSet: {\n        roles: {\n          $each: roles\n        }\n      }\n    });\n  }\n\n  removeRolesByTeamIdAndUserId(teamId, userId, roles) {\n    return this.updateOne({\n      teamId,\n      userId\n    }, {\n      $pull: {\n        roles: {\n          $in: roles\n        }\n      }\n    });\n  }\n\n  deleteByUserIdAndTeamId(userId, teamId) {\n    return this.col.deleteOne({\n      teamId,\n      userId\n    });\n  }\n\n  deleteByTeamId(teamId) {\n    return this.col.deleteMany({\n      teamId\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/TeamMember.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCollection,\n\tWithoutProjection,\n\tFindOneOptions,\n\tCursor,\n\tInsertOneWriteOpResult,\n\tUpdateWriteOpResult,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n} from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { ITeamMember } from '../../../../definition/ITeam';\nimport { IUser } from '../../../../definition/IUser';\n\ntype T = ITeamMember;\nexport class TeamMemberRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { teamId: 1 } }]);\n\n\t\t// teamId => userId should be unique\n\t\tthis.col.createIndex({ teamId: 1, userId: 1 }, { unique: true });\n\t}\n\n\tfindByUserId(userId: string): Cursor<ITeamMember>;\n\n\tfindByUserId(userId: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByUserId<P>(userId: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByUserId<P>(\n\t\tuserId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ userId }, options) : this.col.find({ userId }, options);\n\t}\n\n\tfindOneByUserIdAndTeamId(userId: string, teamId: string): Promise<ITeamMember | null>;\n\n\tfindOneByUserIdAndTeamId(\n\t\tuserId: string,\n\t\tteamId: string,\n\t\toptions: WithoutProjection<FindOneOptions<ITeamMember>>,\n\t): Promise<ITeamMember | null>;\n\n\tfindOneByUserIdAndTeamId<P>(userId: string, teamId: string, options: FindOneOptions<P>): Promise<P | null>;\n\n\tfindOneByUserIdAndTeamId<P>(\n\t\tuserId: string,\n\t\tteamId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P | null | ITeamMember> {\n\t\treturn options ? this.col.findOne({ userId, teamId }, options) : this.col.findOne({ userId, teamId }, options);\n\t}\n\n\tfindByTeamId(teamId: string): Cursor<ITeamMember>;\n\n\tfindByTeamId(teamId: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamId<P>(teamId: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamId<P>(\n\t\tteamId: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId }, options) : this.col.find({ teamId }, options);\n\t}\n\n\tfindByTeamIds(teamIds: Array<string>): Cursor<ITeamMember>;\n\n\tfindByTeamIds(teamIds: Array<string>, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamIds<P>(teamIds: Array<string>, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamIds<P>(\n\t\tteamIds: Array<string>,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId: { $in: teamIds } }, options) : this.col.find({ teamId: { $in: teamIds } }, options);\n\t}\n\n\tfindByTeamIdAndRole(teamId: string, role: string): Cursor<ITeamMember>;\n\n\tfindByTeamIdAndRole(teamId: string, role: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Cursor<ITeamMember>;\n\n\tfindByTeamIdAndRole<P>(teamId: string, role: string, options: FindOneOptions<P>): Cursor<P>;\n\n\tfindByTeamIdAndRole<P>(\n\t\tteamId: string,\n\t\trole: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Cursor<P> | Cursor<ITeamMember> {\n\t\treturn options ? this.col.find({ teamId, roles: role }, options) : this.col.find({ teamId, roles: role });\n\t}\n\n\tfindByUserIdAndTeamIds(userId: string, teamIds: Array<string>, options: FindOneOptions<T> = {}): Cursor<T> {\n\t\tconst query = {\n\t\t\tuserId,\n\t\t\tteamId: {\n\t\t\t\t$in: teamIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.find(query, options);\n\t}\n\n\tfindMembersInfoByTeamId(teamId: string, limit: number, skip: number, query?: FilterQuery<T>): Cursor<T> {\n\t\treturn this.col.find({ ...query, teamId }, {\n\t\t\tlimit,\n\t\t\tskip,\n\t\t\tprojection: {\n\t\t\t\tuserId: 1,\n\t\t\t\troles: 1,\n\t\t\t\tcreatedBy: 1,\n\t\t\t\tcreatedAt: 1,\n\t\t\t},\n\t\t} as FindOneOptions<T>);\n\t}\n\n\tupdateOneByUserIdAndTeamId(userId: string, teamId: string, update: Partial<T>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne({ userId, teamId }, { $set: update });\n\t}\n\n\tcreateOneByTeamIdAndUserId(\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tcreatedBy: Pick<IUser, '_id' | 'username'>,\n\t): Promise<InsertOneWriteOpResult<T>> {\n\t\treturn this.insertOne({\n\t\t\tteamId,\n\t\t\tuserId,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t});\n\t}\n\n\tupdateRolesByTeamIdAndUserId(teamId: string, userId: string, roles: Array<string>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tteamId,\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\troles: { $each: roles },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRolesByTeamIdAndUserId(teamId: string, userId: string, roles: Array<string>): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tteamId,\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\troles: { $in: roles },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdeleteByUserIdAndTeamId(userId: string, teamId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.col.deleteOne({\n\t\t\tteamId,\n\t\t\tuserId,\n\t\t});\n\t}\n\n\tdeleteByTeamId(teamId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.col.deleteMany({\n\t\t\tteamId,\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"92336b5e84ccaeb121ea3a5e0818de31bbf70db9"}
