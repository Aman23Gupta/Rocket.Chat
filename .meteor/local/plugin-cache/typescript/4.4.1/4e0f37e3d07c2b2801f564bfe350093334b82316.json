{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/saml.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/configuration/saml.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/saml.ts","inputSourceMap":{"version":3,"file":"ee/server/configuration/saml.ts","sourceRoot":"","sources":["ee/server/configuration/saml.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,MAAM,oDAAoD,CAAC;AAC/E,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAEnD,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACjC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,UAAU,EAA2D,EAAE,EAAE;QACnH,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,yCAAyC,CAAW,CAAC;QAC5F,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;QAElF,IAAI,CAAC,iBAAiB,EAAE;YACvB,OAAO;SACP;QAED,IAAI,iBAAiB,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;YACpD,IAAI,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;YAC7C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC9B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACzB;YAED,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC,WAAW,CAAS,KAAK,CAAC,CAAC;SACxD;IACF,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,OAAe,EAAE,OAA4B,EAAQ,EAAE;QAC1F,gGAAgG;QAChG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YACtB,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,uBAAuB,CAAC;YACnE,sBAAsB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,2BAA2B,CAAC;YAC3E,gBAAgB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,oBAAoB,CAAC;YAC9D,oBAAoB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,kBAAkB,CAAC;YAChE,oBAAoB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,wBAAwB,CAAC;YACtE,mBAAmB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,uBAAuB,CAAC;YACpE,sBAAsB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,0BAA0B,CAAC;YAC1E,qBAAqB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,yBAAyB,CAAC;YACxE,2BAA2B,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,+BAA+B,CAAC;YACpF,gBAAgB,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,oBAAoB,CAAC;SAC9D,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,WAAgC,EAAE,WAA8C,EAAE,EAAE;QAC9H,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,+CAA+C,CAAW,CAAC;QACvG,MAAM,SAAS,GAAwB,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAE1E,MAAM,gBAAgB,GAAwB,EAAE,CAAC;QAEjD,KAAK,MAAM,iBAAiB,IAAI,SAAS,EAAE;YAC1C,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE;gBACjD,SAAS;aACT;YAED,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;YACrD,MAAM,KAAK,GAAG,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,EAAE;gBAC5D,SAAS,EAAE,iBAAiB;aAC5B,CAAC,CAAC;YACH,gBAAgB,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC;SAC1C;QAED,KAAK,CAAC,sBAAsB,CAAC,WAAW,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,6FAA6F;AAC7F,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,IAAY,EAAQ,EAAE,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { onLicense } from '../../app/license/server';\nimport type { ISAMLUser } from '../../../app/meteor-accounts-saml/server/definition/ISAMLUser';\nimport { SAMLUtils } from '../../../app/meteor-accounts-saml/server/lib/Utils';\nimport { settings } from '../../../app/settings/server';\nimport { addSettings } from '../settings/saml';\nimport { Users } from '../../../app/models/server';\n\nonLicense('saml-enterprise', () => {\n\tSAMLUtils.events.on('mapUser', ({ profile, userObject }: { profile: Record<string, any>; userObject: ISAMLUser }) => {\n\t\tconst roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name') as string;\n\t\tconst roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n\t\tif (!roleAttributeSync) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (roleAttributeName && profile[roleAttributeName]) {\n\t\t\tlet value = profile[roleAttributeName] || '';\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.split(',');\n\t\t\t}\n\n\t\t\tuserObject.roles = SAMLUtils.ensureArray<string>(value);\n\t\t}\n\t});\n\n\tSAMLUtils.events.on('loadConfigs', (service: string, configs: Record<string, any>): void => {\n\t\t// Include ee settings on the configs object so that they can be copied to the login service too\n\t\tObject.assign(configs, {\n\t\t\tcustomAuthnContext: settings.get(`${service}_custom_authn_context`),\n\t\t\tauthnContextComparison: settings.get(`${service}_authn_context_comparison`),\n\t\t\tidentifierFormat: settings.get(`${service}_identifier_format`),\n\t\t\tnameIDPolicyTemplate: settings.get(`${service}_NameId_template`),\n\t\t\tauthnContextTemplate: settings.get(`${service}_AuthnContext_template`),\n\t\t\tauthRequestTemplate: settings.get(`${service}_AuthRequest_template`),\n\t\t\tlogoutResponseTemplate: settings.get(`${service}_LogoutResponse_template`),\n\t\t\tlogoutRequestTemplate: settings.get(`${service}_LogoutRequest_template`),\n\t\t\tmetadataCertificateTemplate: settings.get(`${service}_MetadataCertificate_template`),\n\t\t\tmetadataTemplate: settings.get(`${service}_Metadata_template`),\n\t\t});\n\t});\n\n\tSAMLUtils.events.on('updateCustomFields', (loginResult: Record<string, any>, updatedUser: { userId: string; token: string }) => {\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\n\t\tfor (const spCustomFieldName in customMap) {\n\t\t\tif (!customMap.hasOwnProperty(spCustomFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst customAttribute = customMap[spCustomFieldName];\n\t\t\tconst value = SAMLUtils.getProfileValue(loginResult.profile, {\n\t\t\t\tfieldName: spCustomFieldName,\n\t\t\t});\n\t\t\tcustomFieldsList[customAttribute] = value;\n\t\t}\n\n\t\tUsers.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n\t});\n});\n\n// For setting creation we add the listener first because the event is emmited during startup\nSAMLUtils.events.on('addSettings', (name: string): void => onLicense('saml-enterprise', () => addSettings(name)));\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/server/configuration/saml.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/configuration/saml.ts"}},"code":"let onLicense;\nmodule.link(\"../../app/license/server\", {\n  onLicense(v) {\n    onLicense = v;\n  }\n\n}, 0);\nlet SAMLUtils;\nmodule.link(\"../../../app/meteor-accounts-saml/server/lib/Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet addSettings;\nmodule.link(\"../settings/saml\", {\n  addSettings(v) {\n    addSettings = v;\n  }\n\n}, 3);\nlet Users;\nmodule.link(\"../../../app/models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\nonLicense('saml-enterprise', () => {\n  SAMLUtils.events.on('mapUser', _ref => {\n    let {\n      profile,\n      userObject\n    } = _ref;\n    const roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name');\n    const roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n    if (!roleAttributeSync) {\n      return;\n    }\n\n    if (roleAttributeName && profile[roleAttributeName]) {\n      let value = profile[roleAttributeName] || '';\n\n      if (typeof value === 'string') {\n        value = value.split(',');\n      }\n\n      userObject.roles = SAMLUtils.ensureArray(value);\n    }\n  });\n  SAMLUtils.events.on('loadConfigs', (service, configs) => {\n    // Include ee settings on the configs object so that they can be copied to the login service too\n    Object.assign(configs, {\n      customAuthnContext: settings.get(\"\".concat(service, \"_custom_authn_context\")),\n      authnContextComparison: settings.get(\"\".concat(service, \"_authn_context_comparison\")),\n      identifierFormat: settings.get(\"\".concat(service, \"_identifier_format\")),\n      nameIDPolicyTemplate: settings.get(\"\".concat(service, \"_NameId_template\")),\n      authnContextTemplate: settings.get(\"\".concat(service, \"_AuthnContext_template\")),\n      authRequestTemplate: settings.get(\"\".concat(service, \"_AuthRequest_template\")),\n      logoutResponseTemplate: settings.get(\"\".concat(service, \"_LogoutResponse_template\")),\n      logoutRequestTemplate: settings.get(\"\".concat(service, \"_LogoutRequest_template\")),\n      metadataCertificateTemplate: settings.get(\"\".concat(service, \"_MetadataCertificate_template\")),\n      metadataTemplate: settings.get(\"\".concat(service, \"_Metadata_template\"))\n    });\n  });\n  SAMLUtils.events.on('updateCustomFields', (loginResult, updatedUser) => {\n    const userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap');\n    const customMap = JSON.parse(userDataCustomFieldMap);\n    const customFieldsList = {};\n\n    for (const spCustomFieldName in customMap) {\n      if (!customMap.hasOwnProperty(spCustomFieldName)) {\n        continue;\n      }\n\n      const customAttribute = customMap[spCustomFieldName];\n      const value = SAMLUtils.getProfileValue(loginResult.profile, {\n        fieldName: spCustomFieldName\n      });\n      customFieldsList[customAttribute] = value;\n    }\n\n    Users.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n  });\n}); // For setting creation we add the listener first because the event is emmited during startup\n\nSAMLUtils.events.on('addSettings', name => onLicense('saml-enterprise', () => addSettings(name)));","map":{"version":3,"sources":["ee/server/configuration/saml.ts"],"names":[],"mappings":"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","sourcesContent":["import { onLicense } from '../../app/license/server';\nimport type { ISAMLUser } from '../../../app/meteor-accounts-saml/server/definition/ISAMLUser';\nimport { SAMLUtils } from '../../../app/meteor-accounts-saml/server/lib/Utils';\nimport { settings } from '../../../app/settings/server';\nimport { addSettings } from '../settings/saml';\nimport { Users } from '../../../app/models/server';\n\nonLicense('saml-enterprise', () => {\n\tSAMLUtils.events.on('mapUser', ({ profile, userObject }: { profile: Record<string, any>; userObject: ISAMLUser }) => {\n\t\tconst roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name') as string;\n\t\tconst roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n\t\tif (!roleAttributeSync) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (roleAttributeName && profile[roleAttributeName]) {\n\t\t\tlet value = profile[roleAttributeName] || '';\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.split(',');\n\t\t\t}\n\n\t\t\tuserObject.roles = SAMLUtils.ensureArray<string>(value);\n\t\t}\n\t});\n\n\tSAMLUtils.events.on('loadConfigs', (service: string, configs: Record<string, any>): void => {\n\t\t// Include ee settings on the configs object so that they can be copied to the login service too\n\t\tObject.assign(configs, {\n\t\t\tcustomAuthnContext: settings.get(`${service}_custom_authn_context`),\n\t\t\tauthnContextComparison: settings.get(`${service}_authn_context_comparison`),\n\t\t\tidentifierFormat: settings.get(`${service}_identifier_format`),\n\t\t\tnameIDPolicyTemplate: settings.get(`${service}_NameId_template`),\n\t\t\tauthnContextTemplate: settings.get(`${service}_AuthnContext_template`),\n\t\t\tauthRequestTemplate: settings.get(`${service}_AuthRequest_template`),\n\t\t\tlogoutResponseTemplate: settings.get(`${service}_LogoutResponse_template`),\n\t\t\tlogoutRequestTemplate: settings.get(`${service}_LogoutRequest_template`),\n\t\t\tmetadataCertificateTemplate: settings.get(`${service}_MetadataCertificate_template`),\n\t\t\tmetadataTemplate: settings.get(`${service}_Metadata_template`),\n\t\t});\n\t});\n\n\tSAMLUtils.events.on('updateCustomFields', (loginResult: Record<string, any>, updatedUser: { userId: string; token: string }) => {\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\n\t\tfor (const spCustomFieldName in customMap) {\n\t\t\tif (!customMap.hasOwnProperty(spCustomFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst customAttribute = customMap[spCustomFieldName];\n\t\t\tconst value = SAMLUtils.getProfileValue(loginResult.profile, {\n\t\t\t\tfieldName: spCustomFieldName,\n\t\t\t});\n\t\t\tcustomFieldsList[customAttribute] = value;\n\t\t}\n\n\t\tUsers.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n\t});\n});\n\n// For setting creation we add the listener first because the event is emmited during startup\nSAMLUtils.events.on('addSettings', (name: string): void => onLicense('saml-enterprise', () => addSettings(name)));\n"],"sourceRoot":""},"sourceType":"module","hash":"4e0f37e3d07c2b2801f564bfe350093334b82316"}
