{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Analytics.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Analytics.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Analytics.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/Analytics.ts","sourceRoot":"","sources":["app/models/server/raw/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport { AggregationCursor, Cursor, SortOptionObject, UpdateWriteOpResult } from 'mongodb';\n\nimport { BaseRaw, IndexSpecification } from './BaseRaw';\nimport { IAnalytic } from '../../../../definition/IAnalytic';\nimport { IRoom } from '../../../../definition/IRoom';\n\ntype T = IAnalytic;\n\nexport class AnalyticsRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { date: 1 } }, { key: { 'room._id': 1, 'date': 1 }, unique: true }];\n\n\tsaveMessageSent({ room, date }: { room: IRoom; date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, 'room._id': room._id, 'type': 'messages' },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\troom: {\n\t\t\t\t\t\t_id: room._id,\n\t\t\t\t\t\tname: room.fname || room.name,\n\t\t\t\t\t\tt: room.t,\n\t\t\t\t\t\tusernames: room.usernames || [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\tdate,\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t},\n\t\t\t\t$inc: { messages: 1 },\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tsaveUserData({ date }: { date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, type: 'users' },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\tdate,\n\t\t\t\t\ttype: 'users',\n\t\t\t\t},\n\t\t\t\t$inc: { users: 1 },\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tsaveMessageDeleted({ room, date }: { room: { _id: string }; date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, 'room._id': room._id },\n\t\t\t{\n\t\t\t\t$inc: { messages: -1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tgetMessagesSentTotalByDate({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\t_id: IAnalytic['date'];\n\t\tmessages: number;\n\t}> {\n\t\treturn this.col.aggregate<{\n\t\t\t_id: IAnalytic['date'];\n\t\t\tmessages: number;\n\t\t}>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$date',\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tgetMessagesOrigin({ start, end }: { start: IAnalytic['date']; end: IAnalytic['date'] }): AggregationCursor<{\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}> {\n\t\tconst params = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { t: '$room.t' },\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tt: '$_id.t',\n\t\t\t\t\tmessages: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tgetMostPopularChannelsByMessagesSentQuantity({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\tt: IRoom['t'];\n\t\tname: string;\n\t\tmessages: number;\n\t\tusernames: string[];\n\t}> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { t: '$room.t', name: '$room.name', usernames: '$room.usernames' },\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tt: '$_id.t',\n\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\tusernames: '$_id.usernames',\n\t\t\t\t\tmessages: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tgetTotalOfRegisteredUsersByDate({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\t_id: IAnalytic['date'];\n\t\tusers: number;\n\t}> {\n\t\treturn this.col.aggregate<{\n\t\t\t_id: IAnalytic['date'];\n\t\t\tusers: number;\n\t\t}>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'users',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$date',\n\t\t\t\t\tusers: { $sum: '$users' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tfindByTypeBeforeDate({ type, date }: { type: T['type']; date: T['date'] }): Cursor<T> {\n\t\treturn this.find({ type, date: { $lte: date } });\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Analytics.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Analytics.ts"}},"code":"module.export({\n  AnalyticsRaw: () => AnalyticsRaw\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\n\nclass AnalyticsRaw extends BaseRaw {\n  constructor() {\n    super(...arguments);\n    this.indexes = [{\n      key: {\n        date: 1\n      }\n    }, {\n      key: {\n        'room._id': 1,\n        'date': 1\n      },\n      unique: true\n    }];\n  }\n\n  saveMessageSent(_ref) {\n    let {\n      room,\n      date\n    } = _ref;\n    return this.updateMany({\n      date,\n      'room._id': room._id,\n      'type': 'messages'\n    }, {\n      $set: {\n        room: {\n          _id: room._id,\n          name: room.fname || room.name,\n          t: room.t,\n          usernames: room.usernames || []\n        }\n      },\n      $setOnInsert: {\n        _id: Random.id(),\n        date,\n        type: 'messages'\n      },\n      $inc: {\n        messages: 1\n      }\n    }, {\n      upsert: true\n    });\n  }\n\n  saveUserData(_ref2) {\n    let {\n      date\n    } = _ref2;\n    return this.updateMany({\n      date,\n      type: 'users'\n    }, {\n      $setOnInsert: {\n        _id: Random.id(),\n        date,\n        type: 'users'\n      },\n      $inc: {\n        users: 1\n      }\n    }, {\n      upsert: true\n    });\n  }\n\n  saveMessageDeleted(_ref3) {\n    let {\n      room,\n      date\n    } = _ref3;\n    return this.updateMany({\n      date,\n      'room._id': room._id\n    }, {\n      $inc: {\n        messages: -1\n      }\n    });\n  }\n\n  getMessagesSentTotalByDate(_ref4) {\n    let {\n      start,\n      end,\n      options = {}\n    } = _ref4;\n    return this.col.aggregate([{\n      $match: {\n        type: 'messages',\n        date: {\n          $gte: start,\n          $lte: end\n        }\n      }\n    }, {\n      $group: {\n        _id: '$date',\n        messages: {\n          $sum: '$messages'\n        }\n      }\n    }, ...(options.sort ? [{\n      $sort: options.sort\n    }] : []), ...(options.count ? [{\n      $limit: options.count\n    }] : [])]);\n  }\n\n  getMessagesOrigin(_ref5) {\n    let {\n      start,\n      end\n    } = _ref5;\n    const params = [{\n      $match: {\n        type: 'messages',\n        date: {\n          $gte: start,\n          $lte: end\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          t: '$room.t'\n        },\n        messages: {\n          $sum: '$messages'\n        }\n      }\n    }, {\n      $project: {\n        _id: 0,\n        t: '$_id.t',\n        messages: 1\n      }\n    }];\n    return this.col.aggregate(params);\n  }\n\n  getMostPopularChannelsByMessagesSentQuantity(_ref6) {\n    let {\n      start,\n      end,\n      options = {}\n    } = _ref6;\n    return this.col.aggregate([{\n      $match: {\n        type: 'messages',\n        date: {\n          $gte: start,\n          $lte: end\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          t: '$room.t',\n          name: '$room.name',\n          usernames: '$room.usernames'\n        },\n        messages: {\n          $sum: '$messages'\n        }\n      }\n    }, {\n      $project: {\n        _id: 0,\n        t: '$_id.t',\n        name: '$_id.name',\n        usernames: '$_id.usernames',\n        messages: 1\n      }\n    }, ...(options.sort ? [{\n      $sort: options.sort\n    }] : []), ...(options.count ? [{\n      $limit: options.count\n    }] : [])]);\n  }\n\n  getTotalOfRegisteredUsersByDate(_ref7) {\n    let {\n      start,\n      end,\n      options = {}\n    } = _ref7;\n    return this.col.aggregate([{\n      $match: {\n        type: 'users',\n        date: {\n          $gte: start,\n          $lte: end\n        }\n      }\n    }, {\n      $group: {\n        _id: '$date',\n        users: {\n          $sum: '$users'\n        }\n      }\n    }, ...(options.sort ? [{\n      $sort: options.sort\n    }] : []), ...(options.count ? [{\n      $limit: options.count\n    }] : [])]);\n  }\n\n  findByTypeBeforeDate(_ref8) {\n    let {\n      type,\n      date\n    } = _ref8;\n    return this.find({\n      type,\n      date: {\n        $lte: date\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport { AggregationCursor, Cursor, SortOptionObject, UpdateWriteOpResult } from 'mongodb';\n\nimport { BaseRaw, IndexSpecification } from './BaseRaw';\nimport { IAnalytic } from '../../../../definition/IAnalytic';\nimport { IRoom } from '../../../../definition/IRoom';\n\ntype T = IAnalytic;\n\nexport class AnalyticsRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { date: 1 } }, { key: { 'room._id': 1, 'date': 1 }, unique: true }];\n\n\tsaveMessageSent({ room, date }: { room: IRoom; date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, 'room._id': room._id, 'type': 'messages' },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\troom: {\n\t\t\t\t\t\t_id: room._id,\n\t\t\t\t\t\tname: room.fname || room.name,\n\t\t\t\t\t\tt: room.t,\n\t\t\t\t\t\tusernames: room.usernames || [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\tdate,\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t},\n\t\t\t\t$inc: { messages: 1 },\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tsaveUserData({ date }: { date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, type: 'users' },\n\t\t\t{\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\tdate,\n\t\t\t\t\ttype: 'users',\n\t\t\t\t},\n\t\t\t\t$inc: { users: 1 },\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tsaveMessageDeleted({ room, date }: { room: { _id: string }; date: IAnalytic['date'] }): Promise<UpdateWriteOpResult> {\n\t\treturn this.updateMany(\n\t\t\t{ date, 'room._id': room._id },\n\t\t\t{\n\t\t\t\t$inc: { messages: -1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tgetMessagesSentTotalByDate({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\t_id: IAnalytic['date'];\n\t\tmessages: number;\n\t}> {\n\t\treturn this.col.aggregate<{\n\t\t\t_id: IAnalytic['date'];\n\t\t\tmessages: number;\n\t\t}>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$date',\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tgetMessagesOrigin({ start, end }: { start: IAnalytic['date']; end: IAnalytic['date'] }): AggregationCursor<{\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}> {\n\t\tconst params = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { t: '$room.t' },\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tt: '$_id.t',\n\t\t\t\t\tmessages: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tgetMostPopularChannelsByMessagesSentQuantity({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\tt: IRoom['t'];\n\t\tname: string;\n\t\tmessages: number;\n\t\tusernames: string[];\n\t}> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { t: '$room.t', name: '$room.name', usernames: '$room.usernames' },\n\t\t\t\t\tmessages: { $sum: '$messages' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tt: '$_id.t',\n\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\tusernames: '$_id.usernames',\n\t\t\t\t\tmessages: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tgetTotalOfRegisteredUsersByDate({\n\t\tstart,\n\t\tend,\n\t\toptions = {},\n\t}: {\n\t\tstart: IAnalytic['date'];\n\t\tend: IAnalytic['date'];\n\t\toptions?: { sort?: SortOptionObject<T>; count?: number };\n\t}): AggregationCursor<{\n\t\t_id: IAnalytic['date'];\n\t\tusers: number;\n\t}> {\n\t\treturn this.col.aggregate<{\n\t\t\t_id: IAnalytic['date'];\n\t\t\tusers: number;\n\t\t}>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttype: 'users',\n\t\t\t\t\tdate: { $gte: start, $lte: end },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$date',\n\t\t\t\t\tusers: { $sum: '$users' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(options.sort ? [{ $sort: options.sort }] : []),\n\t\t\t...(options.count ? [{ $limit: options.count }] : []),\n\t\t]);\n\t}\n\n\tfindByTypeBeforeDate({ type, date }: { type: T['type']; date: T['date'] }): Cursor<T> {\n\t\treturn this.find({ type, date: { $lte: date } });\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"3abceda85dd65206e5f7d481b0fb06e99802bf77"}
