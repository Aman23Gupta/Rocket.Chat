{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/authorization/canAccessRoom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/authorization/canAccessRoom.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/authorization/canAccessRoom.ts","inputSourceMap":{"version":3,"file":"server/services/authorization/canAccessRoom.ts","sourceRoot":"","sources":["server/services/authorization/canAccessRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Authorization } from '../../sdk';\nimport { RoomAccessValidator } from '../../sdk/types/IAuthorization';\nimport { canAccessRoomLivechat } from './canAccessRoomLivechat';\nimport { canAccessRoomTokenpass } from './canAccessRoomTokenpass';\nimport { Subscriptions, Rooms, Settings, TeamMembers, Team } from './service';\nimport { TEAM_TYPE, ITeam } from '../../../definition/ITeam';\nimport { IUser } from '../../../definition/IUser';\n\nasync function canAccessPublicRoom(user: Partial<IUser>): Promise<boolean> {\n\tif (!user?._id) {\n\t\t// TODO: it was using cached version from /app/settings/server/raw.js\n\t\tconst anon = await Settings.getValueById('Accounts_AllowAnonymousRead');\n\t\treturn !!anon;\n\t}\n\n\treturn Authorization.hasPermission(user._id, 'view-c-room');\n}\n\nconst roomAccessValidators: RoomAccessValidator[] = [\n\tasync function _validateAccessToPublicRoomsInTeams(room, user): Promise<boolean> {\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!room._id || !room.teamId || room.t !== 'c') {\n\t\t\t// if the room doesn't belongs to a team || is not a public channel - skip\n\t\t\treturn false;\n\t\t}\n\n\t\t// if team is public, access is allowed if the user can access public rooms\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\t\tprojection: { type: 1 },\n\t\t});\n\t\tif (team?.type === TEAM_TYPE.PUBLIC) {\n\t\t\treturn canAccessPublicRoom(user);\n\t\t}\n\n\t\t// otherwise access is allowed only to members of the team\n\t\tconst membership =\n\t\t\tuser?._id &&\n\t\t\t(await TeamMembers.findOneByUserIdAndTeamId(user._id, room.teamId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}));\n\t\treturn !!membership;\n\t},\n\n\tasync function _validateAccessToPublicRooms(room, user): Promise<boolean> {\n\t\tif (!room?._id || room.t !== 'c' || room?.teamId) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn canAccessPublicRoom(user);\n\t},\n\n\tasync function _validateIfAlreadyJoined(room, user): Promise<boolean> {\n\t\tif (!room?._id || !user?._id) {\n\t\t\treturn false;\n\t\t}\n\t\tif (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tasync function _validateAccessToDiscussionsParentRoom(room, user): Promise<boolean> {\n\t\tif (!room?.prid) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst parentRoom = await Rooms.findOne(room.prid);\n\t\tif (!parentRoom) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Authorization.canAccessRoom(parentRoom, user);\n\t},\n\n\tcanAccessRoomLivechat,\n\tcanAccessRoomTokenpass,\n];\n\nexport const canAccessRoom: RoomAccessValidator = async (room, user, extraData): Promise<boolean> => {\n\t// TODO livechat can send both as null, so they we need to validate nevertheless\n\t// if (!room || !user) {\n\t// \treturn false;\n\t// }\n\n\tfor await (const roomAccessValidator of roomAccessValidators) {\n\t\tif (await roomAccessValidator(room, user, extraData)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/authorization/canAccessRoom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/authorization/canAccessRoom.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  canAccessRoom: () => canAccessRoom\n});\nlet Authorization;\nmodule.link(\"../../sdk\", {\n  Authorization(v) {\n    Authorization = v;\n  }\n\n}, 0);\nlet canAccessRoomLivechat;\nmodule.link(\"./canAccessRoomLivechat\", {\n  canAccessRoomLivechat(v) {\n    canAccessRoomLivechat = v;\n  }\n\n}, 1);\nlet canAccessRoomTokenpass;\nmodule.link(\"./canAccessRoomTokenpass\", {\n  canAccessRoomTokenpass(v) {\n    canAccessRoomTokenpass = v;\n  }\n\n}, 2);\nlet Subscriptions, Rooms, Settings, TeamMembers, Team;\nmodule.link(\"./service\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Settings(v) {\n    Settings = v;\n  },\n\n  TeamMembers(v) {\n    TeamMembers = v;\n  },\n\n  Team(v) {\n    Team = v;\n  }\n\n}, 3);\nlet TEAM_TYPE;\nmodule.link(\"../../../definition/ITeam\", {\n  TEAM_TYPE(v) {\n    TEAM_TYPE = v;\n  }\n\n}, 4);\n\nfunction canAccessPublicRoom(user) {\n  return Promise.asyncApply(() => {\n    if (!(user !== null && user !== void 0 && user._id)) {\n      // TODO: it was using cached version from /app/settings/server/raw.js\n      const anon = Promise.await(Settings.getValueById('Accounts_AllowAnonymousRead'));\n      return !!anon;\n    }\n\n    return Authorization.hasPermission(user._id, 'view-c-room');\n  });\n}\n\nconst roomAccessValidators = [function _validateAccessToPublicRoomsInTeams(room, user) {\n  return Promise.asyncApply(() => {\n    if (!room) {\n      return false;\n    }\n\n    if (!room._id || !room.teamId || room.t !== 'c') {\n      // if the room doesn't belongs to a team || is not a public channel - skip\n      return false;\n    } // if team is public, access is allowed if the user can access public rooms\n\n\n    const team = Promise.await(Team.findOneById(room.teamId, {\n      projection: {\n        type: 1\n      }\n    }));\n\n    if ((team === null || team === void 0 ? void 0 : team.type) === TEAM_TYPE.PUBLIC) {\n      return canAccessPublicRoom(user);\n    } // otherwise access is allowed only to members of the team\n\n\n    const membership = (user === null || user === void 0 ? void 0 : user._id) && Promise.await(TeamMembers.findOneByUserIdAndTeamId(user._id, room.teamId, {\n      projection: {\n        _id: 1\n      }\n    }));\n    return !!membership;\n  });\n}, function _validateAccessToPublicRooms(room, user) {\n  return Promise.asyncApply(() => {\n    if (!(room !== null && room !== void 0 && room._id) || room.t !== 'c' || room !== null && room !== void 0 && room.teamId) {\n      return false;\n    }\n\n    return canAccessPublicRoom(user);\n  });\n}, function _validateIfAlreadyJoined(room, user) {\n  return Promise.asyncApply(() => {\n    if (!(room !== null && room !== void 0 && room._id) || !(user !== null && user !== void 0 && user._id)) {\n      return false;\n    }\n\n    if (Promise.await(Subscriptions.countByRoomIdAndUserId(room._id, user._id))) {\n      return true;\n    }\n\n    return false;\n  });\n}, function _validateAccessToDiscussionsParentRoom(room, user) {\n  return Promise.asyncApply(() => {\n    if (!(room !== null && room !== void 0 && room.prid)) {\n      return false;\n    }\n\n    const parentRoom = Promise.await(Rooms.findOne(room.prid));\n\n    if (!parentRoom) {\n      return false;\n    }\n\n    return Authorization.canAccessRoom(parentRoom, user);\n  });\n}, canAccessRoomLivechat, canAccessRoomTokenpass];\n\nconst canAccessRoom = (room, user, extraData) => Promise.asyncApply(() => {\n  // TODO livechat can send both as null, so they we need to validate nevertheless\n  // if (!room || !user) {\n  // \treturn false;\n  // }\n  var _iteratorAbruptCompletion = false;\n  var _didIteratorError = false;\n\n  var _iteratorError;\n\n  try {\n    for (var _iterator = _asyncIterator(roomAccessValidators), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n      const roomAccessValidator = _step.value;\n\n      if (Promise.await(roomAccessValidator(room, user, extraData))) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (_iteratorAbruptCompletion && _iterator.return != null) {\n        Promise.await(_iterator.return());\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return false;\n});","map":{"version":3,"sources":["server/services/authorization/canAccessRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Authorization } from '../../sdk';\nimport { RoomAccessValidator } from '../../sdk/types/IAuthorization';\nimport { canAccessRoomLivechat } from './canAccessRoomLivechat';\nimport { canAccessRoomTokenpass } from './canAccessRoomTokenpass';\nimport { Subscriptions, Rooms, Settings, TeamMembers, Team } from './service';\nimport { TEAM_TYPE, ITeam } from '../../../definition/ITeam';\nimport { IUser } from '../../../definition/IUser';\n\nasync function canAccessPublicRoom(user: Partial<IUser>): Promise<boolean> {\n\tif (!user?._id) {\n\t\t// TODO: it was using cached version from /app/settings/server/raw.js\n\t\tconst anon = await Settings.getValueById('Accounts_AllowAnonymousRead');\n\t\treturn !!anon;\n\t}\n\n\treturn Authorization.hasPermission(user._id, 'view-c-room');\n}\n\nconst roomAccessValidators: RoomAccessValidator[] = [\n\tasync function _validateAccessToPublicRoomsInTeams(room, user): Promise<boolean> {\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!room._id || !room.teamId || room.t !== 'c') {\n\t\t\t// if the room doesn't belongs to a team || is not a public channel - skip\n\t\t\treturn false;\n\t\t}\n\n\t\t// if team is public, access is allowed if the user can access public rooms\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\t\tprojection: { type: 1 },\n\t\t});\n\t\tif (team?.type === TEAM_TYPE.PUBLIC) {\n\t\t\treturn canAccessPublicRoom(user);\n\t\t}\n\n\t\t// otherwise access is allowed only to members of the team\n\t\tconst membership =\n\t\t\tuser?._id &&\n\t\t\t(await TeamMembers.findOneByUserIdAndTeamId(user._id, room.teamId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}));\n\t\treturn !!membership;\n\t},\n\n\tasync function _validateAccessToPublicRooms(room, user): Promise<boolean> {\n\t\tif (!room?._id || room.t !== 'c' || room?.teamId) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn canAccessPublicRoom(user);\n\t},\n\n\tasync function _validateIfAlreadyJoined(room, user): Promise<boolean> {\n\t\tif (!room?._id || !user?._id) {\n\t\t\treturn false;\n\t\t}\n\t\tif (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tasync function _validateAccessToDiscussionsParentRoom(room, user): Promise<boolean> {\n\t\tif (!room?.prid) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst parentRoom = await Rooms.findOne(room.prid);\n\t\tif (!parentRoom) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Authorization.canAccessRoom(parentRoom, user);\n\t},\n\n\tcanAccessRoomLivechat,\n\tcanAccessRoomTokenpass,\n];\n\nexport const canAccessRoom: RoomAccessValidator = async (room, user, extraData): Promise<boolean> => {\n\t// TODO livechat can send both as null, so they we need to validate nevertheless\n\t// if (!room || !user) {\n\t// \treturn false;\n\t// }\n\n\tfor await (const roomAccessValidator of roomAccessValidators) {\n\t\tif (await roomAccessValidator(room, user, extraData)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"64078e0fef2e62b3417768a9715e47b9ca782f6a"}
