{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EACN,uBAAuB,EACvB,mBAAmB,EACnB,0BAA0B,EAC1B,qBAAqB,EACrB,2BAA2B,GAC3B,MAAM,cAAc,CAAC;AAKtB;;EAEE;AACF,MAAM,OAAO,gBAAgB;IACrB,MAAM,CAAC,QAAQ,CAAC,sBAA+C;QACrE,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,CAAC;QAExG,OAAO;YACN,OAAO;YACP,EAAE,EAAE,IAAI,CAAC,KAAK;SACd,CAAC;IACH,CAAC;IAED,0DAA0D;IAC1D,8HAA8H;IAC9H,oGAAoG;IAC5F,MAAM,CAAC,wBAAwB,CAAC,sBAA+C;QACtF,MAAM,IAAI,GAAG;YACZ,mBAAmB,EAAE,IAAI,CAAC,2BAA2B,CAAC,sBAAsB,CAAC;YAC7E,eAAe,EAAE,IAAI,CAAC,uBAAuB,CAAC,sBAAsB,CAAC;SACrE,CAAC;QAEF,MAAM,QAAQ,GAAG,sBAAsB,CAAC,mBAAmB,IAAI,0BAA0B,CAAC;QAC1F,OAAO,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAEO,MAAM,CAAC,2BAA2B,CAAC,sBAA+C;QACzF,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE;YAC7C,OAAO,EAAE,CAAC;SACV;QAED,OAAO,sBAAsB,CAAC,oBAAoB,IAAI,qBAAqB,CAAC;IAC7E,CAAC;IAEO,MAAM,CAAC,uBAAuB,CAAC,sBAA+C;QACrF,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,EAAE;YAC/C,OAAO,EAAE,CAAC;SACV;QAED,OAAO,sBAAsB,CAAC,oBAAoB,IAAI,2BAA2B,CAAC;IACnF,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAAC,sBAA+C;QAClF,IAAI,EAAE,GAAG,IAAI,SAAS,CAAC,gBAAgB,EAAE,EAAE,CAAC;QAC5C,MAAM,OAAO,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;QAE5C,wBAAwB;QACxB,IAAI,sBAAsB,CAAC,EAAE,EAAE;YAC9B,EAAE,GAAG,sBAAsB,CAAC,EAAE,CAAC;SAC/B;QAED,OAAO;YACN,KAAK,EAAE,EAAE;YACT,OAAO;YACP,WAAW,EAAE,sBAAsB,CAAC,WAAW;YAC/C,UAAU,EAAE,sBAAsB,CAAC,UAAU;YAC7C,MAAM,EAAE,sBAAsB,CAAC,MAAM;YACrC,gBAAgB,EAAE,sBAAsB,CAAC,gBAAgB,IAAI,uBAAuB;YACpF,sBAAsB,EAAE,sBAAsB,CAAC,sBAAsB,IAAI,OAAO;YAChF,YAAY,EAAE,sBAAsB,CAAC,kBAAkB,IAAI,mBAAmB;SAC9E,CAAC;IACH,CAAC;CACD","sourcesContent":["import { SAMLUtils } from '../Utils';\nimport {\n\tdefaultIdentifierFormat,\n\tdefaultAuthnContext,\n\tdefaultAuthRequestTemplate,\n\tdefaultNameIDTemplate,\n\tdefaultAuthnContextTemplate,\n} from '../constants';\nimport { IServiceProviderOptions } from '../../definition/IServiceProviderOptions';\nimport { ISAMLRequest } from '../../definition/ISAMLRequest';\nimport { IAuthorizeRequestVariables } from '../../definition/IAuthorizeRequestVariables';\n\n/*\n\tAn Authorize Request is used to show the Identity Provider login form when the user clicks on the Rocket.Chat SAML login button\n*/\nexport class AuthorizeRequest {\n\tpublic static generate(serviceProviderOptions: IServiceProviderOptions): ISAMLRequest {\n\t\tconst data = this.getDataForNewRequest(serviceProviderOptions);\n\t\tconst request = SAMLUtils.fillTemplateData(this.authorizeRequestTemplate(serviceProviderOptions), data);\n\n\t\treturn {\n\t\t\trequest,\n\t\t\tid: data.newId,\n\t\t};\n\t}\n\n\t// The AuthorizeRequest template is split into three parts\n\t// This way, users don't need to change the template when all they want to do is remove the NameID Policy or the AuthnContext.\n\t// This also ensures compatibility with providers that were configured before the templates existed.\n\tprivate static authorizeRequestTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tconst data = {\n\t\t\tidentifierFormatTag: this.identifierFormatTagTemplate(serviceProviderOptions),\n\t\t\tauthnContextTag: this.authnContextTagTemplate(serviceProviderOptions),\n\t\t};\n\n\t\tconst template = serviceProviderOptions.authRequestTemplate || defaultAuthRequestTemplate;\n\t\treturn SAMLUtils.fillTemplateData(template, data);\n\t}\n\n\tprivate static identifierFormatTagTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tif (!serviceProviderOptions.identifierFormat) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn serviceProviderOptions.nameIDPolicyTemplate || defaultNameIDTemplate;\n\t}\n\n\tprivate static authnContextTagTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tif (!serviceProviderOptions.customAuthnContext) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn serviceProviderOptions.authnContextTemplate || defaultAuthnContextTemplate;\n\t}\n\n\tprivate static getDataForNewRequest(serviceProviderOptions: IServiceProviderOptions): IAuthorizeRequestVariables {\n\t\tlet id = `_${SAMLUtils.generateUniqueID()}`;\n\t\tconst instant = SAMLUtils.generateInstant();\n\n\t\t// Post-auth destination\n\t\tif (serviceProviderOptions.id) {\n\t\t\tid = serviceProviderOptions.id;\n\t\t}\n\n\t\treturn {\n\t\t\tnewId: id,\n\t\t\tinstant,\n\t\t\tcallbackUrl: serviceProviderOptions.callbackUrl,\n\t\t\tentryPoint: serviceProviderOptions.entryPoint,\n\t\t\tissuer: serviceProviderOptions.issuer,\n\t\t\tidentifierFormat: serviceProviderOptions.identifierFormat || defaultIdentifierFormat,\n\t\t\tauthnContextComparison: serviceProviderOptions.authnContextComparison || 'exact',\n\t\t\tauthnContext: serviceProviderOptions.customAuthnContext || defaultAuthnContext,\n\t\t};\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts"}},"code":"module.export({\n  AuthorizeRequest: () => AuthorizeRequest\n});\nlet SAMLUtils;\nmodule.link(\"../Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 0);\nlet defaultIdentifierFormat, defaultAuthnContext, defaultAuthRequestTemplate, defaultNameIDTemplate, defaultAuthnContextTemplate;\nmodule.link(\"../constants\", {\n  defaultIdentifierFormat(v) {\n    defaultIdentifierFormat = v;\n  },\n\n  defaultAuthnContext(v) {\n    defaultAuthnContext = v;\n  },\n\n  defaultAuthRequestTemplate(v) {\n    defaultAuthRequestTemplate = v;\n  },\n\n  defaultNameIDTemplate(v) {\n    defaultNameIDTemplate = v;\n  },\n\n  defaultAuthnContextTemplate(v) {\n    defaultAuthnContextTemplate = v;\n  }\n\n}, 1);\n\nclass AuthorizeRequest {\n  static generate(serviceProviderOptions) {\n    const data = this.getDataForNewRequest(serviceProviderOptions);\n    const request = SAMLUtils.fillTemplateData(this.authorizeRequestTemplate(serviceProviderOptions), data);\n    return {\n      request,\n      id: data.newId\n    };\n  } // The AuthorizeRequest template is split into three parts\n  // This way, users don't need to change the template when all they want to do is remove the NameID Policy or the AuthnContext.\n  // This also ensures compatibility with providers that were configured before the templates existed.\n\n\n  static authorizeRequestTemplate(serviceProviderOptions) {\n    const data = {\n      identifierFormatTag: this.identifierFormatTagTemplate(serviceProviderOptions),\n      authnContextTag: this.authnContextTagTemplate(serviceProviderOptions)\n    };\n    const template = serviceProviderOptions.authRequestTemplate || defaultAuthRequestTemplate;\n    return SAMLUtils.fillTemplateData(template, data);\n  }\n\n  static identifierFormatTagTemplate(serviceProviderOptions) {\n    if (!serviceProviderOptions.identifierFormat) {\n      return '';\n    }\n\n    return serviceProviderOptions.nameIDPolicyTemplate || defaultNameIDTemplate;\n  }\n\n  static authnContextTagTemplate(serviceProviderOptions) {\n    if (!serviceProviderOptions.customAuthnContext) {\n      return '';\n    }\n\n    return serviceProviderOptions.authnContextTemplate || defaultAuthnContextTemplate;\n  }\n\n  static getDataForNewRequest(serviceProviderOptions) {\n    let id = \"_\".concat(SAMLUtils.generateUniqueID());\n    const instant = SAMLUtils.generateInstant(); // Post-auth destination\n\n    if (serviceProviderOptions.id) {\n      id = serviceProviderOptions.id;\n    }\n\n    return {\n      newId: id,\n      instant,\n      callbackUrl: serviceProviderOptions.callbackUrl,\n      entryPoint: serviceProviderOptions.entryPoint,\n      issuer: serviceProviderOptions.issuer,\n      identifierFormat: serviceProviderOptions.identifierFormat || defaultIdentifierFormat,\n      authnContextComparison: serviceProviderOptions.authnContextComparison || 'exact',\n      authnContext: serviceProviderOptions.customAuthnContext || defaultAuthnContext\n    };\n  }\n\n}","map":{"version":3,"sources":["app/meteor-accounts-saml/server/lib/generators/AuthorizeRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import { SAMLUtils } from '../Utils';\nimport {\n\tdefaultIdentifierFormat,\n\tdefaultAuthnContext,\n\tdefaultAuthRequestTemplate,\n\tdefaultNameIDTemplate,\n\tdefaultAuthnContextTemplate,\n} from '../constants';\nimport { IServiceProviderOptions } from '../../definition/IServiceProviderOptions';\nimport { ISAMLRequest } from '../../definition/ISAMLRequest';\nimport { IAuthorizeRequestVariables } from '../../definition/IAuthorizeRequestVariables';\n\n/*\n\tAn Authorize Request is used to show the Identity Provider login form when the user clicks on the Rocket.Chat SAML login button\n*/\nexport class AuthorizeRequest {\n\tpublic static generate(serviceProviderOptions: IServiceProviderOptions): ISAMLRequest {\n\t\tconst data = this.getDataForNewRequest(serviceProviderOptions);\n\t\tconst request = SAMLUtils.fillTemplateData(this.authorizeRequestTemplate(serviceProviderOptions), data);\n\n\t\treturn {\n\t\t\trequest,\n\t\t\tid: data.newId,\n\t\t};\n\t}\n\n\t// The AuthorizeRequest template is split into three parts\n\t// This way, users don't need to change the template when all they want to do is remove the NameID Policy or the AuthnContext.\n\t// This also ensures compatibility with providers that were configured before the templates existed.\n\tprivate static authorizeRequestTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tconst data = {\n\t\t\tidentifierFormatTag: this.identifierFormatTagTemplate(serviceProviderOptions),\n\t\t\tauthnContextTag: this.authnContextTagTemplate(serviceProviderOptions),\n\t\t};\n\n\t\tconst template = serviceProviderOptions.authRequestTemplate || defaultAuthRequestTemplate;\n\t\treturn SAMLUtils.fillTemplateData(template, data);\n\t}\n\n\tprivate static identifierFormatTagTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tif (!serviceProviderOptions.identifierFormat) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn serviceProviderOptions.nameIDPolicyTemplate || defaultNameIDTemplate;\n\t}\n\n\tprivate static authnContextTagTemplate(serviceProviderOptions: IServiceProviderOptions): string {\n\t\tif (!serviceProviderOptions.customAuthnContext) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn serviceProviderOptions.authnContextTemplate || defaultAuthnContextTemplate;\n\t}\n\n\tprivate static getDataForNewRequest(serviceProviderOptions: IServiceProviderOptions): IAuthorizeRequestVariables {\n\t\tlet id = `_${SAMLUtils.generateUniqueID()}`;\n\t\tconst instant = SAMLUtils.generateInstant();\n\n\t\t// Post-auth destination\n\t\tif (serviceProviderOptions.id) {\n\t\t\tid = serviceProviderOptions.id;\n\t\t}\n\n\t\treturn {\n\t\t\tnewId: id,\n\t\t\tinstant,\n\t\t\tcallbackUrl: serviceProviderOptions.callbackUrl,\n\t\t\tentryPoint: serviceProviderOptions.entryPoint,\n\t\t\tissuer: serviceProviderOptions.issuer,\n\t\t\tidentifierFormat: serviceProviderOptions.identifierFormat || defaultIdentifierFormat,\n\t\t\tauthnContextComparison: serviceProviderOptions.authnContextComparison || 'exact',\n\t\t\tauthnContext: serviceProviderOptions.customAuthnContext || defaultAuthnContext,\n\t\t};\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"b525d8a4d097432c86d2b74e2c774fab7c366937"}
