{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/livechat.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/livechat.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/livechat.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/livechat.ts","sourceRoot":"","sources":["app/apps/server/bridges/livechat.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport { LivechatBridge } from '@rocket.chat/apps-engine/server/bridges/LivechatBridge';\nimport {\n\tILivechatMessage,\n\tIVisitor,\n\tILivechatRoom,\n\tILivechatTransferData,\n\tIDepartment,\n} from '@rocket.chat/apps-engine/definition/livechat';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { IExtraRoomParams } from '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator';\n\nimport { getRoom } from '../../../livechat/server/api/lib/livechat';\nimport { Livechat } from '../../../livechat/server/lib/Livechat';\nimport { Users, LivechatDepartment, LivechatVisitors, LivechatRooms } from '../../../models/server';\nimport { AppServerOrchestrator } from '../orchestrator';\nimport { OmnichannelSourceType } from '../../../../definition/IRoom';\n\nexport class AppLivechatBridge extends LivechatBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected isOnline(departmentId?: string): boolean {\n\t\treturn Livechat.online(departmentId);\n\t}\n\n\tprotected async isOnlineAsync(departmentId?: string): Promise<boolean> {\n\t\treturn Livechat.online(departmentId);\n\t}\n\n\tprotected async createMessage(message: ILivechatMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tif (!message.token) {\n\t\t\tthrow new Error('Invalid token for livechat message');\n\t\t}\n\n\t\tconst msg = await Livechat.sendMessage({\n\t\t\tguest: this.orch.getConverters()?.get('visitors').convertAppVisitor(message.visitor),\n\t\t\tmessage: this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t\tagent: undefined,\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn msg._id;\n\t}\n\n\tprotected async getMessageById(messageId: string, appId: string): Promise<ILivechatMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('messages').convertById(messageId);\n\t}\n\n\tprotected async updateMessage(message: ILivechatMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tconst data = {\n\t\t\tguest: message.visitor,\n\t\t\tmessage: this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t};\n\n\t\tLivechat.updateMessage(data);\n\t}\n\n\tprotected async createRoom(visitor: IVisitor, agent: IUser, appId: string, extraParams?: IExtraRoomParams): Promise<ILivechatRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat room.`);\n\n\t\tconst { source } = extraParams || {};\n\t\t// `source` will likely have the properties below, so we tell TS it's alright\n\t\tconst { sidebarIcon, defaultIcon, label } = (source || {}) as {\n\t\t\tsidebarIcon?: string;\n\t\t\tdefaultIcon?: string;\n\t\t\tlabel?: string;\n\t\t};\n\n\t\tlet agentRoom;\n\t\tif (agent?.id) {\n\t\t\tconst user = Users.getAgentInfo(agent.id);\n\t\t\tagentRoom = Object.assign({}, { agentId: user._id, username: user.username });\n\t\t}\n\n\t\tconst result = await getRoom({\n\t\t\tguest: this.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\tagent: agentRoom,\n\t\t\trid: Random.id(),\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getName(),\n\t\t\t\t\tlabel,\n\t\t\t\t\tsidebarIcon,\n\t\t\t\t\tdefaultIcon,\n\t\t\t\t},\n\t\t\t},\n\t\t\textraParams: undefined,\n\t\t});\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(result.room);\n\t}\n\n\tprotected async closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is closing a livechat room.`);\n\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertById(closer.id);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\t\troom: this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),\n\t\t\t...(visitor && { visitor }),\n\t\t};\n\n\t\treturn Livechat.closeRoom(closeData);\n\t}\n\n\tprotected async findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (!visitor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result;\n\n\t\tif (departmentId) {\n\t\t\tresult = LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}).fetch();\n\t\t} else {\n\t\t\tresult = LivechatRooms.findOpenByVisitorToken(visitor.token, {}).fetch();\n\t\t}\n\n\t\treturn result.map((room: ILivechatRoom) => this.orch.getConverters()?.get('rooms').convertRoom(room));\n\t}\n\n\tprotected async createVisitor(visitor: IVisitor, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tphone: {},\n\t\t\tid: visitor.id,\n\t\t};\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length) {\n\t\t\tregisterData.email = visitor.visitorEmails[0].address;\n\t\t}\n\n\t\tif (visitor.phone && visitor.phone.length) {\n\t\t\t(registerData as any).phone = { number: visitor.phone[0].phoneNumber };\n\t\t}\n\n\t\treturn Livechat.registerGuest(registerData);\n\t}\n\n\tprotected async transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is transfering a livechat.`);\n\n\t\tif (!visitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot transfer');\n\t\t}\n\n\t\tconst { targetAgent, targetDepartment: departmentId, currentRoom } = transferData;\n\n\t\tconst appUser = Users.findOneByAppId(appId, {});\n\t\tif (!appUser) {\n\t\t\tthrow new Error('Invalid app user, cannot transfer');\n\t\t}\n\t\tconst { _id, username, name, type } = appUser;\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t};\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tfields: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\t\t\tif (!transferredTo) {\n\t\t\t\tthrow new Error('Invalid target agent, cannot transfer');\n\t\t\t}\n\n\t\t\tuserId = transferredTo._id;\n\t\t}\n\n\t\treturn Livechat.transfer(\n\t\t\tthis.orch.getConverters()?.get('rooms').convertAppRoom(currentRoom),\n\t\t\tthis.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\t{ userId, departmentId, transferredBy, transferredTo },\n\t\t);\n\t}\n\n\tprotected async findVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (this.orch.isDebugging()) {\n\t\t\tconsole.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n\t\t}\n\n\t\treturn LivechatVisitors.find(query)\n\t\t\t.fetch()\n\t\t\t.map((visitor: IVisitor) => this.orch.getConverters()?.get('visitors').convertVisitor(visitor));\n\t}\n\n\tprotected async findVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertById(id);\n\t}\n\n\tprotected async findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.findOneGuestByEmailAddress(email));\n\t}\n\n\tprotected async findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.getVisitorByToken(token, {}));\n\t}\n\n\tprotected async findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.findOneVisitorByPhone(phoneNumber));\n\t}\n\n\tprotected async findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\treturn this.orch.getConverters()?.get('departments').convertDepartment(LivechatDepartment.findOneByIdOrName(value, {}));\n\t}\n\n\tprotected async findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\tconst converter = this.orch.getConverters()?.get('departments');\n\t\tconst boundConverter = converter.convertDepartment.bind(converter);\n\n\t\treturn LivechatDepartment.findEnabledWithAgents().map(boundConverter);\n\t}\n\n\tprotected async _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IMessage>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the transcript for livechat room ${roomId}.`);\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Could not get the message converter to process livechat room messages');\n\t\t}\n\n\t\tconst boundMessageConverter = messageConverter.convertMessage.bind(messageConverter);\n\n\t\treturn Livechat.getRoomMessages({ rid: roomId }).map(boundMessageConverter);\n\t}\n\n\tprotected async setCustomFields(\n\t\tdata: { token: IVisitor['token']; key: string; value: string; overwrite: boolean },\n\t\tappId: string,\n\t): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is setting livechat visitor's custom fields.`);\n\n\t\treturn Livechat.setCustomFields(data);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/apps/server/bridges/livechat.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/livechat.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  AppLivechatBridge: () => AppLivechatBridge\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet LivechatBridge;\nmodule.link(\"@rocket.chat/apps-engine/server/bridges/LivechatBridge\", {\n  LivechatBridge(v) {\n    LivechatBridge = v;\n  }\n\n}, 1);\nlet getRoom;\nmodule.link(\"../../../livechat/server/api/lib/livechat\", {\n  getRoom(v) {\n    getRoom = v;\n  }\n\n}, 2);\nlet Livechat;\nmodule.link(\"../../../livechat/server/lib/Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 3);\nlet Users, LivechatDepartment, LivechatVisitors, LivechatRooms;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  }\n\n}, 4);\nlet OmnichannelSourceType;\nmodule.link(\"../../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 5);\n\nclass AppLivechatBridge extends LivechatBridge {\n  // eslint-disable-next-line no-empty-function\n  constructor(orch) {\n    super();\n    this.orch = void 0;\n    this.orch = orch;\n  }\n\n  isOnline(departmentId) {\n    return Livechat.online(departmentId);\n  }\n\n  isOnlineAsync(departmentId) {\n    return Promise.asyncApply(() => {\n      return Livechat.online(departmentId);\n    });\n  }\n\n  createMessage(message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert, _this$orch$getConvert2, _this$orch$getManager, _this$orch$getManager2;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a new message.\"));\n\n      if (!message.token) {\n        throw new Error('Invalid token for livechat message');\n      }\n\n      const msg = Promise.await(Livechat.sendMessage({\n        guest: (_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('visitors').convertAppVisitor(message.visitor),\n        message: (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('messages').convertAppMessage(message),\n        agent: undefined,\n        roomInfo: {\n          source: {\n            type: OmnichannelSourceType.APP,\n            id: appId,\n            alias: (_this$orch$getManager = this.orch.getManager()) === null || _this$orch$getManager === void 0 ? void 0 : (_this$orch$getManager2 = _this$orch$getManager.getOneById(appId)) === null || _this$orch$getManager2 === void 0 ? void 0 : _this$orch$getManager2.getNameSlug()\n          }\n        }\n      }));\n      return msg._id;\n    });\n  }\n\n  getMessageById(messageId, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert3;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the message: \\\"\").concat(messageId, \"\\\"\"));\n      return (_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('messages').convertById(messageId);\n    });\n  }\n\n  updateMessage(message, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert4;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is updating a message.\"));\n      const data = {\n        guest: message.visitor,\n        message: (_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('messages').convertAppMessage(message)\n      };\n      Livechat.updateMessage(data);\n    });\n  }\n\n  createRoom(visitor, agent, appId, extraParams) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert5, _this$orch$getManager3, _this$orch$getManager4, _this$orch$getConvert6;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a livechat room.\"));\n      const {\n        source\n      } = extraParams || {}; // `source` will likely have the properties below, so we tell TS it's alright\n\n      const {\n        sidebarIcon,\n        defaultIcon,\n        label\n      } = source || {};\n      let agentRoom;\n\n      if (agent !== null && agent !== void 0 && agent.id) {\n        const user = Users.getAgentInfo(agent.id);\n        agentRoom = Object.assign({}, {\n          agentId: user._id,\n          username: user.username\n        });\n      }\n\n      const result = Promise.await(getRoom({\n        guest: (_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('visitors').convertAppVisitor(visitor),\n        agent: agentRoom,\n        rid: Random.id(),\n        roomInfo: {\n          source: {\n            type: OmnichannelSourceType.APP,\n            id: appId,\n            alias: (_this$orch$getManager3 = this.orch.getManager()) === null || _this$orch$getManager3 === void 0 ? void 0 : (_this$orch$getManager4 = _this$orch$getManager3.getOneById(appId)) === null || _this$orch$getManager4 === void 0 ? void 0 : _this$orch$getManager4.getName(),\n            label,\n            sidebarIcon,\n            defaultIcon\n          }\n        },\n        extraParams: undefined\n      }));\n      return (_this$orch$getConvert6 = this.orch.getConverters()) === null || _this$orch$getConvert6 === void 0 ? void 0 : _this$orch$getConvert6.get('rooms').convertRoom(result.room);\n    });\n  }\n\n  closeRoom(room, comment, closer, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert7, _this$orch$getConvert8, _this$orch$getConvert9;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is closing a livechat room.\"));\n      const user = closer && ((_this$orch$getConvert7 = this.orch.getConverters()) === null || _this$orch$getConvert7 === void 0 ? void 0 : _this$orch$getConvert7.get('users').convertById(closer.id));\n      const visitor = (_this$orch$getConvert8 = this.orch.getConverters()) === null || _this$orch$getConvert8 === void 0 ? void 0 : _this$orch$getConvert8.get('visitors').convertAppVisitor(room.visitor);\n\n      const closeData = _objectSpread(_objectSpread({\n        room: (_this$orch$getConvert9 = this.orch.getConverters()) === null || _this$orch$getConvert9 === void 0 ? void 0 : _this$orch$getConvert9.get('rooms').convertAppRoom(room),\n        comment\n      }, user && {\n        user\n      }), visitor && {\n        visitor\n      });\n\n      return Livechat.closeRoom(closeData);\n    });\n  }\n\n  findRooms(visitor, departmentId, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n\n      if (!visitor) {\n        return [];\n      }\n\n      let result;\n\n      if (departmentId) {\n        result = LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}).fetch();\n      } else {\n        result = LivechatRooms.findOpenByVisitorToken(visitor.token, {}).fetch();\n      }\n\n      return result.map(room => {\n        var _this$orch$getConvert10;\n\n        return (_this$orch$getConvert10 = this.orch.getConverters()) === null || _this$orch$getConvert10 === void 0 ? void 0 : _this$orch$getConvert10.get('rooms').convertRoom(room);\n      });\n    });\n  }\n\n  createVisitor(visitor, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is creating a livechat visitor.\"));\n      const registerData = {\n        department: visitor.department,\n        username: visitor.username,\n        name: visitor.name,\n        token: visitor.token,\n        email: '',\n        connectionData: undefined,\n        phone: {},\n        id: visitor.id\n      };\n\n      if (visitor.visitorEmails && visitor.visitorEmails.length) {\n        registerData.email = visitor.visitorEmails[0].address;\n      }\n\n      if (visitor.phone && visitor.phone.length) {\n        registerData.phone = {\n          number: visitor.phone[0].phoneNumber\n        };\n      }\n\n      return Livechat.registerGuest(registerData);\n    });\n  }\n\n  transferVisitor(visitor, transferData, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert11, _this$orch$getConvert12;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is transfering a livechat.\"));\n\n      if (!visitor) {\n        throw new Error('Invalid visitor, cannot transfer');\n      }\n\n      const {\n        targetAgent,\n        targetDepartment: departmentId,\n        currentRoom\n      } = transferData;\n      const appUser = Users.findOneByAppId(appId, {});\n\n      if (!appUser) {\n        throw new Error('Invalid app user, cannot transfer');\n      }\n\n      const {\n        _id,\n        username,\n        name,\n        type\n      } = appUser;\n      const transferredBy = {\n        _id,\n        username,\n        name,\n        type\n      };\n      let userId;\n      let transferredTo;\n\n      if (targetAgent !== null && targetAgent !== void 0 && targetAgent.id) {\n        transferredTo = Users.findOneAgentById(targetAgent.id, {\n          fields: {\n            _id: 1,\n            username: 1,\n            name: 1\n          }\n        });\n\n        if (!transferredTo) {\n          throw new Error('Invalid target agent, cannot transfer');\n        }\n\n        userId = transferredTo._id;\n      }\n\n      return Livechat.transfer((_this$orch$getConvert11 = this.orch.getConverters()) === null || _this$orch$getConvert11 === void 0 ? void 0 : _this$orch$getConvert11.get('rooms').convertAppRoom(currentRoom), (_this$orch$getConvert12 = this.orch.getConverters()) === null || _this$orch$getConvert12 === void 0 ? void 0 : _this$orch$getConvert12.get('visitors').convertAppVisitor(visitor), {\n        userId,\n        departmentId,\n        transferredBy,\n        transferredTo\n      });\n    });\n  }\n\n  findVisitors(query, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n\n      if (this.orch.isDebugging()) {\n        console.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n      }\n\n      return LivechatVisitors.find(query).fetch().map(visitor => {\n        var _this$orch$getConvert13;\n\n        return (_this$orch$getConvert13 = this.orch.getConverters()) === null || _this$orch$getConvert13 === void 0 ? void 0 : _this$orch$getConvert13.get('visitors').convertVisitor(visitor);\n      });\n    });\n  }\n\n  findVisitorById(id, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert14;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n      return (_this$orch$getConvert14 = this.orch.getConverters()) === null || _this$orch$getConvert14 === void 0 ? void 0 : _this$orch$getConvert14.get('visitors').convertById(id);\n    });\n  }\n\n  findVisitorByEmail(email, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert15;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n      return (_this$orch$getConvert15 = this.orch.getConverters()) === null || _this$orch$getConvert15 === void 0 ? void 0 : _this$orch$getConvert15.get('visitors').convertVisitor(LivechatVisitors.findOneGuestByEmailAddress(email));\n    });\n  }\n\n  findVisitorByToken(token, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert16;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n      return (_this$orch$getConvert16 = this.orch.getConverters()) === null || _this$orch$getConvert16 === void 0 ? void 0 : _this$orch$getConvert16.get('visitors').convertVisitor(LivechatVisitors.getVisitorByToken(token, {}));\n    });\n  }\n\n  findVisitorByPhoneNumber(phoneNumber, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert17;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n      return (_this$orch$getConvert17 = this.orch.getConverters()) === null || _this$orch$getConvert17 === void 0 ? void 0 : _this$orch$getConvert17.get('visitors').convertVisitor(LivechatVisitors.findOneVisitorByPhone(phoneNumber));\n    });\n  }\n\n  findDepartmentByIdOrName(value, appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert18;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat departments.\"));\n      return (_this$orch$getConvert18 = this.orch.getConverters()) === null || _this$orch$getConvert18 === void 0 ? void 0 : _this$orch$getConvert18.get('departments').convertDepartment(LivechatDepartment.findOneByIdOrName(value, {}));\n    });\n  }\n\n  findDepartmentsEnabledWithAgents(appId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert19;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat departments.\"));\n      const converter = (_this$orch$getConvert19 = this.orch.getConverters()) === null || _this$orch$getConvert19 === void 0 ? void 0 : _this$orch$getConvert19.get('departments');\n      const boundConverter = converter.convertDepartment.bind(converter);\n      return LivechatDepartment.findEnabledWithAgents().map(boundConverter);\n    });\n  }\n\n  _fetchLivechatRoomMessages(appId, roomId) {\n    return Promise.asyncApply(() => {\n      var _this$orch$getConvert20;\n\n      this.orch.debugLog(\"The App \".concat(appId, \" is getting the transcript for livechat room \").concat(roomId, \".\"));\n      const messageConverter = (_this$orch$getConvert20 = this.orch.getConverters()) === null || _this$orch$getConvert20 === void 0 ? void 0 : _this$orch$getConvert20.get('messages');\n\n      if (!messageConverter) {\n        throw new Error('Could not get the message converter to process livechat room messages');\n      }\n\n      const boundMessageConverter = messageConverter.convertMessage.bind(messageConverter);\n      return Livechat.getRoomMessages({\n        rid: roomId\n      }).map(boundMessageConverter);\n    });\n  }\n\n  setCustomFields(data, appId) {\n    return Promise.asyncApply(() => {\n      this.orch.debugLog(\"The App \".concat(appId, \" is setting livechat visitor's custom fields.\"));\n      return Livechat.setCustomFields(data);\n    });\n  }\n\n}","map":{"version":3,"sources":["app/apps/server/bridges/livechat.ts"],"names":[],"mappings":"AAAA,IAAA,aAAA;;AAAiB,MAAM,CAAA,IAAN,CAAM,sCAAN,EAAsB;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAtB,EAAsB,CAAtB;AAAjB,MAAA,CAAO,MAAP,CAAS;AAAM,EAAA,iBAAQ,EAAA,MAAA;AAAd,CAAT;AAAuC,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wDAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,2CAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uCAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,kBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,qBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,EAAA,qBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,qBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAmBjC,MAAO,iBAAP,SAAiC,cAAjC,CAA+C;AACpD;AACA,EAAA,WAAA,CAA6B,IAA7B,EAAwD;AACvD;AADuD,SAA3B,IAA2B;AAA3B,SAAA,IAAA,GAAA,IAAA;AAE5B;;AAES,EAAA,QAAQ,CAAC,YAAD,EAAsB;AACvC,WAAO,QAAQ,CAAC,MAAT,CAAgB,YAAhB,CAAP;AACA;;AAEe,EAAA,aAAa,CAAC,YAAD;AAAA,oCAAsB;AAClD,aAAO,QAAQ,CAAC,MAAT,CAAgB,YAAhB,CAAP;AACA,KAF4B;AAAA;;AAIb,EAAA,aAAa,CAAC,OAAD,EAA4B,KAA5B;AAAA,oCAAyC;AAAA;;AACrE,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;;AAEA,UAAI,CAAC,OAAO,CAAC,KAAb,EAAoB;AACnB,cAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACA;;AAED,YAAM,GAAG,iBAAS,QAAQ,CAAC,WAAT,CAAqB;AACtC,QAAA,KAAK,2BAAE,KAAK,IAAL,CAAU,aAAV,EAAF,0DAAE,sBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,OAAO,CAAC,OAArE,CAD+B;AAEtC,QAAA,OAAO,4BAAE,KAAK,IAAL,CAAU,aAAV,EAAF,2DAAE,uBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,OAA7D,CAF6B;AAGtC,QAAA,KAAK,EAAE,SAH+B;AAItC,QAAA,QAAQ,EAAE;AACT,UAAA,MAAM,EAAE;AACP,YAAA,IAAI,EAAE,qBAAqB,CAAC,GADrB;AAEP,YAAA,EAAE,EAAE,KAFG;AAGP,YAAA,KAAK,2BAAE,KAAK,IAAL,CAAU,UAAV,EAAF,oFAAE,sBAAwB,UAAxB,CAAmC,KAAnC,CAAF,2DAAE,uBAA2C,WAA3C;AAHA;AADC;AAJ4B,OAArB,CAAT,CAAT;AAaA,aAAO,GAAG,CAAC,GAAX;AACA,KArB4B;AAAA;;AAuBb,EAAA,cAAc,CAAC,SAAD,EAAoB,KAApB;AAAA,oCAAiC;AAAA;;AAC9D,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B,wCAAgE,SAAhE;AAEA,uCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,2DAAO,uBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,WAA3C,CAAuD,SAAvD,CAAP;AACA,KAJ6B;AAAA;;AAMd,EAAA,aAAa,CAAC,OAAD,EAA4B,KAA5B;AAAA,oCAAyC;AAAA;;AACrE,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,YAAM,IAAI,GAAG;AACZ,QAAA,KAAK,EAAE,OAAO,CAAC,OADH;AAEZ,QAAA,OAAO,4BAAE,KAAK,IAAL,CAAU,aAAV,EAAF,2DAAE,uBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,OAA7D;AAFG,OAAb;AAKA,MAAA,QAAQ,CAAC,aAAT,CAAuB,IAAvB;AACA,KAT4B;AAAA;;AAWb,EAAA,UAAU,CAAC,OAAD,EAAoB,KAApB,EAAkC,KAAlC,EAAiD,WAAjD;AAAA,oCAA+E;AAAA;;AACxG,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,YAAM;AAAE,QAAA;AAAF,UAAa,WAAW,IAAI,EAAlC,CAHwG,CAIxG;;AACA,YAAM;AAAE,QAAA,WAAF;AAAe,QAAA,WAAf;AAA4B,QAAA;AAA5B,UAAuC,MAAM,IAAI,EAAvD;AAMA,UAAI,SAAJ;;AACA,UAAI,KAAJ,aAAI,KAAJ,eAAI,KAAK,CAAE,EAAX,EAAe;AACd,cAAM,IAAI,GAAG,KAAK,CAAC,YAAN,CAAmB,KAAK,CAAC,EAAzB,CAAb;AACA,QAAA,SAAS,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAAE,UAAA,OAAO,EAAE,IAAI,CAAC,GAAhB;AAAqB,UAAA,QAAQ,EAAE,IAAI,CAAC;AAApC,SAAlB,CAAZ;AACA;;AAED,YAAM,MAAM,iBAAS,OAAO,CAAC;AAC5B,QAAA,KAAK,4BAAE,KAAK,IAAL,CAAU,aAAV,EAAF,2DAAE,uBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,OAA7D,CADqB;AAE5B,QAAA,KAAK,EAAE,SAFqB;AAG5B,QAAA,GAAG,EAAE,MAAM,CAAC,EAAP,EAHuB;AAI5B,QAAA,QAAQ,EAAE;AACT,UAAA,MAAM,EAAE;AACP,YAAA,IAAI,EAAE,qBAAqB,CAAC,GADrB;AAEP,YAAA,EAAE,EAAE,KAFG;AAGP,YAAA,KAAK,4BAAE,KAAK,IAAL,CAAU,UAAV,EAAF,qFAAE,uBAAwB,UAAxB,CAAmC,KAAnC,CAAF,2DAAE,uBAA2C,OAA3C,EAHA;AAIP,YAAA,KAJO;AAKP,YAAA,WALO;AAMP,YAAA;AANO;AADC,SAJkB;AAc5B,QAAA,WAAW,EAAE;AAde,OAAD,CAAhB,CAAZ;AAiBA,uCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,2DAAO,uBAA2B,GAA3B,CAA+B,OAA/B,EAAwC,WAAxC,CAAoD,MAAM,CAAC,IAA3D,CAAP;AACA,KAnCyB;AAAA;;AAqCV,EAAA,SAAS,CAAC,IAAD,EAAsB,OAAtB,EAAuC,MAAvC,EAAkE,KAAlE;AAAA,oCAA+E;AAAA;;AACvG,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,YAAM,IAAI,GAAG,MAAM,+BAAI,KAAK,IAAL,CAAU,aAAV,EAAJ,2DAAI,uBAA2B,GAA3B,CAA+B,OAA/B,EAAwC,WAAxC,CAAoD,MAAM,CAAC,EAA3D,CAAJ,CAAnB;AACA,YAAM,OAAO,6BAAG,KAAK,IAAL,CAAU,aAAV,EAAH,2DAAG,uBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,IAAI,CAAC,OAAlE,CAAhB;;AAEA,YAAM,SAAS;AACd,QAAA,IAAI,4BAAE,KAAK,IAAL,CAAU,aAAV,EAAF,2DAAE,uBAA2B,GAA3B,CAA+B,OAA/B,EAAwC,cAAxC,CAAuD,IAAvD,CADQ;AAEd,QAAA;AAFc,SAGV,IAAI,IAAI;AAAE,QAAA;AAAF,OAHE,GAIV,OAAO,IAAI;AAAE,QAAA;AAAF,OAJD,CAAf;;AAOA,aAAO,QAAQ,CAAC,SAAT,CAAmB,SAAnB,CAAP;AACA,KAdwB;AAAA;;AAgBT,EAAA,SAAS,CAAC,OAAD,EAAoB,YAApB,EAAiD,KAAjD;AAAA,oCAA8D;AACtF,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;;AAEA,UAAI,CAAC,OAAL,EAAc;AACb,eAAO,EAAP;AACA;;AAED,UAAI,MAAJ;;AAEA,UAAI,YAAJ,EAAkB;AACjB,QAAA,MAAM,GAAG,aAAa,CAAC,qCAAd,CAAoD,OAAO,CAAC,KAA5D,EAAmE,YAAnE,EAAiF,EAAjF,EAAqF,KAArF,EAAT;AACA,OAFD,MAEO;AACN,QAAA,MAAM,GAAG,aAAa,CAAC,sBAAd,CAAqC,OAAO,CAAC,KAA7C,EAAoD,EAApD,EAAwD,KAAxD,EAAT;AACA;;AAED,aAAO,MAAM,CAAC,GAAP,CAAY,IAAD;AAAA;;AAAA,0CAAyB,KAAK,IAAL,CAAU,aAAV,EAAzB,4DAAyB,wBAA2B,GAA3B,CAA+B,OAA/B,EAAwC,WAAxC,CAAoD,IAApD,CAAzB;AAAA,OAAX,CAAP;AACA,KAhBwB;AAAA;;AAkBT,EAAA,aAAa,CAAC,OAAD,EAAoB,KAApB;AAAA,oCAAiC;AAC7D,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,YAAM,YAAY,GAAG;AACpB,QAAA,UAAU,EAAE,OAAO,CAAC,UADA;AAEpB,QAAA,QAAQ,EAAE,OAAO,CAAC,QAFE;AAGpB,QAAA,IAAI,EAAE,OAAO,CAAC,IAHM;AAIpB,QAAA,KAAK,EAAE,OAAO,CAAC,KAJK;AAKpB,QAAA,KAAK,EAAE,EALa;AAMpB,QAAA,cAAc,EAAE,SANI;AAOpB,QAAA,KAAK,EAAE,EAPa;AAQpB,QAAA,EAAE,EAAE,OAAO,CAAC;AARQ,OAArB;;AAWA,UAAI,OAAO,CAAC,aAAR,IAAyB,OAAO,CAAC,aAAR,CAAsB,MAAnD,EAA2D;AAC1D,QAAA,YAAY,CAAC,KAAb,GAAqB,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,OAA9C;AACA;;AAED,UAAI,OAAO,CAAC,KAAR,IAAiB,OAAO,CAAC,KAAR,CAAc,MAAnC,EAA2C;AACzC,QAAA,YAAoB,CAAC,KAArB,GAA6B;AAAE,UAAA,MAAM,EAAE,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB;AAA3B,SAA7B;AACD;;AAED,aAAO,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAAP;AACA,KAvB4B;AAAA;;AAyBb,EAAA,eAAe,CAAC,OAAD,EAAoB,YAApB,EAAyD,KAAzD;AAAA,oCAAsE;AAAA;;AACpG,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;;AAEA,UAAI,CAAC,OAAL,EAAc;AACb,cAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AAED,YAAM;AAAE,QAAA,WAAF;AAAe,QAAA,gBAAgB,EAAE,YAAjC;AAA+C,QAAA;AAA/C,UAA+D,YAArE;AAEA,YAAM,OAAO,GAAG,KAAK,CAAC,cAAN,CAAqB,KAArB,EAA4B,EAA5B,CAAhB;;AACA,UAAI,CAAC,OAAL,EAAc;AACb,cAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACA;;AACD,YAAM;AAAE,QAAA,GAAF;AAAO,QAAA,QAAP;AAAiB,QAAA,IAAjB;AAAuB,QAAA;AAAvB,UAAgC,OAAtC;AACA,YAAM,aAAa,GAAG;AACrB,QAAA,GADqB;AAErB,QAAA,QAFqB;AAGrB,QAAA,IAHqB;AAIrB,QAAA;AAJqB,OAAtB;AAOA,UAAI,MAAJ;AACA,UAAI,aAAJ;;AAEA,UAAI,WAAJ,aAAI,WAAJ,eAAI,WAAW,CAAE,EAAjB,EAAqB;AACpB,QAAA,aAAa,GAAG,KAAK,CAAC,gBAAN,CAAuB,WAAW,CAAC,EAAnC,EAAuC;AACtD,UAAA,MAAM,EAAE;AAAE,YAAA,GAAG,EAAE,CAAP;AAAU,YAAA,QAAQ,EAAE,CAApB;AAAuB,YAAA,IAAI,EAAE;AAA7B;AAD8C,SAAvC,CAAhB;;AAGA,YAAI,CAAC,aAAL,EAAoB;AACnB,gBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACA;;AAED,QAAA,MAAM,GAAG,aAAa,CAAC,GAAvB;AACA;;AAED,aAAO,QAAQ,CAAC,QAAT,4BACN,KAAK,IAAL,CAAU,aAAV,EADM,4DACN,wBAA2B,GAA3B,CAA+B,OAA/B,EAAwC,cAAxC,CAAuD,WAAvD,CADM,6BAEN,KAAK,IAAL,CAAU,aAAV,EAFM,4DAEN,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,iBAA3C,CAA6D,OAA7D,CAFM,EAGN;AAAE,QAAA,MAAF;AAAU,QAAA,YAAV;AAAwB,QAAA,aAAxB;AAAuC,QAAA;AAAvC,OAHM,CAAP;AAKA,KAxC8B;AAAA;;AA0Cf,EAAA,YAAY,CAAC,KAAD,EAAgB,KAAhB;AAAA,oCAA6B;AACxD,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;;AAEA,UAAI,KAAK,IAAL,CAAU,WAAV,EAAJ,EAA6B;AAC5B,QAAA,OAAO,CAAC,IAAR,CAAa,iGAAb;AACA;;AAED,aAAO,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,EACL,KADK,GAEL,GAFK,CAEA,OAAD;AAAA;;AAAA,0CAAuB,KAAK,IAAL,CAAU,aAAV,EAAvB,4DAAuB,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,cAA3C,CAA0D,OAA1D,CAAvB;AAAA,OAFC,CAAP;AAGA,KAV2B;AAAA;;AAYZ,EAAA,eAAe,CAAC,EAAD,EAAa,KAAb;AAAA,oCAA0B;AAAA;;AACxD,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,wCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,4DAAO,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,WAA3C,CAAuD,EAAvD,CAAP;AACA,KAJ8B;AAAA;;AAMf,EAAA,kBAAkB,CAAC,KAAD,EAAgB,KAAhB;AAAA,oCAA6B;AAAA;;AAC9D,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,wCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,4DAAO,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,cAA3C,CAA0D,gBAAgB,CAAC,0BAAjB,CAA4C,KAA5C,CAA1D,CAAP;AACA,KAJiC;AAAA;;AAMlB,EAAA,kBAAkB,CAAC,KAAD,EAAgB,KAAhB;AAAA,oCAA6B;AAAA;;AAC9D,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,wCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,4DAAO,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,cAA3C,CAA0D,gBAAgB,CAAC,iBAAjB,CAAmC,KAAnC,EAA0C,EAA1C,CAA1D,CAAP;AACA,KAJiC;AAAA;;AAMlB,EAAA,wBAAwB,CAAC,WAAD,EAAsB,KAAtB;AAAA,oCAAmC;AAAA;;AAC1E,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,wCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,4DAAO,wBAA2B,GAA3B,CAA+B,UAA/B,EAA2C,cAA3C,CAA0D,gBAAgB,CAAC,qBAAjB,CAAuC,WAAvC,CAA1D,CAAP;AACA,KAJuC;AAAA;;AAMxB,EAAA,wBAAwB,CAAC,KAAD,EAAgB,KAAhB;AAAA,oCAA6B;AAAA;;AACpE,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,wCAAO,KAAK,IAAL,CAAU,aAAV,EAAP,4DAAO,wBAA2B,GAA3B,CAA+B,aAA/B,EAA8C,iBAA9C,CAAgE,kBAAkB,CAAC,iBAAnB,CAAqC,KAArC,EAA4C,EAA5C,CAAhE,CAAP;AACA,KAJuC;AAAA;;AAMxB,EAAA,gCAAgC,CAAC,KAAD;AAAA,oCAAc;AAAA;;AAC7D,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,YAAM,SAAS,8BAAG,KAAK,IAAL,CAAU,aAAV,EAAH,4DAAG,wBAA2B,GAA3B,CAA+B,aAA/B,CAAlB;AACA,YAAM,cAAc,GAAG,SAAS,CAAC,iBAAV,CAA4B,IAA5B,CAAiC,SAAjC,CAAvB;AAEA,aAAO,kBAAkB,CAAC,qBAAnB,GAA2C,GAA3C,CAA+C,cAA/C,CAAP;AACA,KAP+C;AAAA;;AAShC,EAAA,0BAA0B,CAAC,KAAD,EAAgB,MAAhB;AAAA,oCAA8B;AAAA;;AACvE,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B,0DAAmF,MAAnF;AACA,YAAM,gBAAgB,8BAAG,KAAK,IAAL,CAAU,aAAV,EAAH,4DAAG,wBAA2B,GAA3B,CAA+B,UAA/B,CAAzB;;AAEA,UAAI,CAAC,gBAAL,EAAuB;AACtB,cAAM,IAAI,KAAJ,CAAU,uEAAV,CAAN;AACA;;AAED,YAAM,qBAAqB,GAAG,gBAAgB,CAAC,cAAjB,CAAgC,IAAhC,CAAqC,gBAArC,CAA9B;AAEA,aAAO,QAAQ,CAAC,eAAT,CAAyB;AAAE,QAAA,GAAG,EAAE;AAAP,OAAzB,EAA0C,GAA1C,CAA8C,qBAA9C,CAAP;AACA,KAXyC;AAAA;;AAa1B,EAAA,eAAe,CAC9B,IAD8B,EAE9B,KAF8B;AAAA,oCAEjB;AAEb,WAAK,IAAL,CAAU,QAAV,mBAA8B,KAA9B;AAEA,aAAO,QAAQ,CAAC,eAAT,CAAyB,IAAzB,CAAP;AACA,KAP8B;AAAA;;AAhQqB","sourcesContent":["import { Random } from 'meteor/random';\nimport { LivechatBridge } from '@rocket.chat/apps-engine/server/bridges/LivechatBridge';\nimport {\n\tILivechatMessage,\n\tIVisitor,\n\tILivechatRoom,\n\tILivechatTransferData,\n\tIDepartment,\n} from '@rocket.chat/apps-engine/definition/livechat';\nimport { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { IMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport { IExtraRoomParams } from '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator';\n\nimport { getRoom } from '../../../livechat/server/api/lib/livechat';\nimport { Livechat } from '../../../livechat/server/lib/Livechat';\nimport { Users, LivechatDepartment, LivechatVisitors, LivechatRooms } from '../../../models/server';\nimport { AppServerOrchestrator } from '../orchestrator';\nimport { OmnichannelSourceType } from '../../../../definition/IRoom';\n\nexport class AppLivechatBridge extends LivechatBridge {\n\t// eslint-disable-next-line no-empty-function\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected isOnline(departmentId?: string): boolean {\n\t\treturn Livechat.online(departmentId);\n\t}\n\n\tprotected async isOnlineAsync(departmentId?: string): Promise<boolean> {\n\t\treturn Livechat.online(departmentId);\n\t}\n\n\tprotected async createMessage(message: ILivechatMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tif (!message.token) {\n\t\t\tthrow new Error('Invalid token for livechat message');\n\t\t}\n\n\t\tconst msg = await Livechat.sendMessage({\n\t\t\tguest: this.orch.getConverters()?.get('visitors').convertAppVisitor(message.visitor),\n\t\t\tmessage: this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t\tagent: undefined,\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn msg._id;\n\t}\n\n\tprotected async getMessageById(messageId: string, appId: string): Promise<ILivechatMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\treturn this.orch.getConverters()?.get('messages').convertById(messageId);\n\t}\n\n\tprotected async updateMessage(message: ILivechatMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tconst data = {\n\t\t\tguest: message.visitor,\n\t\t\tmessage: this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t};\n\n\t\tLivechat.updateMessage(data);\n\t}\n\n\tprotected async createRoom(visitor: IVisitor, agent: IUser, appId: string, extraParams?: IExtraRoomParams): Promise<ILivechatRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat room.`);\n\n\t\tconst { source } = extraParams || {};\n\t\t// `source` will likely have the properties below, so we tell TS it's alright\n\t\tconst { sidebarIcon, defaultIcon, label } = (source || {}) as {\n\t\t\tsidebarIcon?: string;\n\t\t\tdefaultIcon?: string;\n\t\t\tlabel?: string;\n\t\t};\n\n\t\tlet agentRoom;\n\t\tif (agent?.id) {\n\t\t\tconst user = Users.getAgentInfo(agent.id);\n\t\t\tagentRoom = Object.assign({}, { agentId: user._id, username: user.username });\n\t\t}\n\n\t\tconst result = await getRoom({\n\t\t\tguest: this.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\tagent: agentRoom,\n\t\t\trid: Random.id(),\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getName(),\n\t\t\t\t\tlabel,\n\t\t\t\t\tsidebarIcon,\n\t\t\t\t\tdefaultIcon,\n\t\t\t\t},\n\t\t\t},\n\t\t\textraParams: undefined,\n\t\t});\n\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(result.room);\n\t}\n\n\tprotected async closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is closing a livechat room.`);\n\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertById(closer.id);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\t\troom: this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),\n\t\t\t...(visitor && { visitor }),\n\t\t};\n\n\t\treturn Livechat.closeRoom(closeData);\n\t}\n\n\tprotected async findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (!visitor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result;\n\n\t\tif (departmentId) {\n\t\t\tresult = LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}).fetch();\n\t\t} else {\n\t\t\tresult = LivechatRooms.findOpenByVisitorToken(visitor.token, {}).fetch();\n\t\t}\n\n\t\treturn result.map((room: ILivechatRoom) => this.orch.getConverters()?.get('rooms').convertRoom(room));\n\t}\n\n\tprotected async createVisitor(visitor: IVisitor, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tphone: {},\n\t\t\tid: visitor.id,\n\t\t};\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length) {\n\t\t\tregisterData.email = visitor.visitorEmails[0].address;\n\t\t}\n\n\t\tif (visitor.phone && visitor.phone.length) {\n\t\t\t(registerData as any).phone = { number: visitor.phone[0].phoneNumber };\n\t\t}\n\n\t\treturn Livechat.registerGuest(registerData);\n\t}\n\n\tprotected async transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is transfering a livechat.`);\n\n\t\tif (!visitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot transfer');\n\t\t}\n\n\t\tconst { targetAgent, targetDepartment: departmentId, currentRoom } = transferData;\n\n\t\tconst appUser = Users.findOneByAppId(appId, {});\n\t\tif (!appUser) {\n\t\t\tthrow new Error('Invalid app user, cannot transfer');\n\t\t}\n\t\tconst { _id, username, name, type } = appUser;\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t};\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tfields: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\t\t\tif (!transferredTo) {\n\t\t\t\tthrow new Error('Invalid target agent, cannot transfer');\n\t\t\t}\n\n\t\t\tuserId = transferredTo._id;\n\t\t}\n\n\t\treturn Livechat.transfer(\n\t\t\tthis.orch.getConverters()?.get('rooms').convertAppRoom(currentRoom),\n\t\t\tthis.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\t{ userId, departmentId, transferredBy, transferredTo },\n\t\t);\n\t}\n\n\tprotected async findVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (this.orch.isDebugging()) {\n\t\t\tconsole.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n\t\t}\n\n\t\treturn LivechatVisitors.find(query)\n\t\t\t.fetch()\n\t\t\t.map((visitor: IVisitor) => this.orch.getConverters()?.get('visitors').convertVisitor(visitor));\n\t}\n\n\tprotected async findVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertById(id);\n\t}\n\n\tprotected async findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.findOneGuestByEmailAddress(email));\n\t}\n\n\tprotected async findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.getVisitorByToken(token, {}));\n\t}\n\n\tprotected async findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(LivechatVisitors.findOneVisitorByPhone(phoneNumber));\n\t}\n\n\tprotected async findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\treturn this.orch.getConverters()?.get('departments').convertDepartment(LivechatDepartment.findOneByIdOrName(value, {}));\n\t}\n\n\tprotected async findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\tconst converter = this.orch.getConverters()?.get('departments');\n\t\tconst boundConverter = converter.convertDepartment.bind(converter);\n\n\t\treturn LivechatDepartment.findEnabledWithAgents().map(boundConverter);\n\t}\n\n\tprotected async _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IMessage>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the transcript for livechat room ${roomId}.`);\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Could not get the message converter to process livechat room messages');\n\t\t}\n\n\t\tconst boundMessageConverter = messageConverter.convertMessage.bind(messageConverter);\n\n\t\treturn Livechat.getRoomMessages({ rid: roomId }).map(boundMessageConverter);\n\t}\n\n\tprotected async setCustomFields(\n\t\tdata: { token: IVisitor['token']; key: string; value: string; overwrite: boolean },\n\t\tappId: string,\n\t): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is setting livechat visitor's custom fields.`);\n\n\t\treturn Livechat.setCustomFields(data);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"5e8aff0980c67619bc0f640ad03aba808be7a5f2"}
