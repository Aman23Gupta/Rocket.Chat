{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImportDataConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/ImportDataConverter.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImportDataConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/ImportDataConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/ImportDataConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport _ from 'underscore';\n\nimport { ImportData as ImportDataRaw } from '../../../models/server/raw';\nimport { IImportUser } from '../../../../definition/IImportUser';\nimport { IImportMessage, IImportMessageReaction } from '../../../../definition/IImportMessage';\nimport { IImportChannel } from '../../../../definition/IImportChannel';\nimport { IConversionCallbacks } from '../definitions/IConversionCallbacks';\nimport { IImportUserRecord, IImportChannelRecord, IImportMessageRecord } from '../../../../definition/IImportRecord';\nimport { Users, Rooms, Subscriptions, ImportData } from '../../../models/server';\nimport { generateUsernameSuggestion, insertMessage, saveUserIdentity, addUserToDefaultChannels } from '../../../lib/server';\nimport { setUserActiveStatus } from '../../../lib/server/functions/setUserActiveStatus';\nimport { IUser, IUserEmail } from '../../../../definition/IUser';\nimport type { Logger } from '../../../../server/lib/logger/Logger';\n\ntype IRoom = Record<string, any>;\ntype IMessage = Record<string, any>;\ntype IUserIdentification = {\n\t_id: string;\n\tusername: string | undefined;\n};\ntype IMentionedUser = {\n\t_id: string;\n\tusername: string;\n\tname?: string;\n};\ntype IMentionedChannel = {\n\t_id: string;\n\tname: string;\n};\n\ntype IMessageReaction = {\n\tname: string;\n\tusernames: Array<string>;\n};\n\ntype IMessageReactions = Record<string, IMessageReaction>;\n\nexport type IConverterOptions = {\n\tflagEmailsAsVerified?: boolean;\n\tskipExistingUsers?: boolean;\n};\n\nconst guessNameFromUsername = (username: string): string =>\n\tusername\n\t\t.replace(/\\W/g, ' ')\n\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\nexport class ImportDataConverter {\n\tprivate _userCache: Map<string, IUserIdentification>;\n\n\t// display name uses a different cache because it's only used on mentions so we don't need to load it every time we load an user\n\tprivate _userDisplayNameCache: Map<string, string>;\n\n\tprivate _roomCache: Map<string, string>;\n\n\tprivate _roomNameCache: Map<string, string>;\n\n\tprivate _logger: Logger;\n\n\tprivate _options: IConverterOptions;\n\n\tpublic get options(): IConverterOptions {\n\t\treturn this._options;\n\t}\n\n\tconstructor(options?: IConverterOptions) {\n\t\tthis._options = options || {\n\t\t\tflagEmailsAsVerified: false,\n\t\t\tskipExistingUsers: false,\n\t\t};\n\t\tthis._userCache = new Map();\n\t\tthis._userDisplayNameCache = new Map();\n\t\tthis._roomCache = new Map();\n\t\tthis._roomNameCache = new Map();\n\t}\n\n\tsetLogger(logger: Logger): void {\n\t\tthis._logger = logger;\n\t}\n\n\taddUserToCache(importId: string, _id: string, username: string | undefined): IUserIdentification {\n\t\tconst cache = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t};\n\n\t\tthis._userCache.set(importId, cache);\n\t\treturn cache;\n\t}\n\n\taddUserDisplayNameToCache(importId: string, name: string): string {\n\t\tthis._userDisplayNameCache.set(importId, name);\n\t\treturn name;\n\t}\n\n\taddRoomToCache(importId: string, rid: string): string {\n\t\tthis._roomCache.set(importId, rid);\n\t\treturn rid;\n\t}\n\n\taddRoomNameToCache(importId: string, name: string): string {\n\t\tthis._roomNameCache.set(importId, name);\n\t\treturn name;\n\t}\n\n\taddUserDataToCache(userData: IImportUser): void {\n\t\tif (!userData._id) {\n\t\t\treturn;\n\t\t}\n\t\tif (!userData.importIds.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.addUserToCache(userData.importIds[0], userData._id, userData.username);\n\t}\n\n\tprotected addObject(type: string, data: Record<string, any>, options: Record<string, any> = {}): void {\n\t\tImportData.model.rawCollection().insert({\n\t\t\tdata,\n\t\t\tdataType: type,\n\t\t\t...options,\n\t\t});\n\t}\n\n\taddUser(data: IImportUser): void {\n\t\tthis.addObject('user', data);\n\t}\n\n\taddChannel(data: IImportChannel): void {\n\t\tthis.addObject('channel', data);\n\t}\n\n\taddMessage(data: IImportMessage, useQuickInsert = false): void {\n\t\tthis.addObject('message', data, {\n\t\t\tuseQuickInsert: useQuickInsert || undefined,\n\t\t});\n\t}\n\n\taddUserImportId(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (userData.importIds?.length) {\n\t\t\tupdateData.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: userData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\taddUserEmails(updateData: Record<string, any>, userData: IImportUser, existingEmails: Array<IUserEmail>): void {\n\t\tif (!userData.emails?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst verifyEmails = Boolean(this.options.flagEmailsAsVerified);\n\t\tconst newEmailList: Array<IUserEmail> = [];\n\n\t\tfor (const email of userData.emails) {\n\t\t\tconst verified = verifyEmails || existingEmails.find((ee) => ee.address === email)?.verified || false;\n\n\t\t\tnewEmailList.push({\n\t\t\t\taddress: email,\n\t\t\t\tverified,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.$set.emails = newEmailList;\n\t}\n\n\taddUserServices(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.services) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceKey in userData.services) {\n\t\t\tif (!userData.services[serviceKey]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst service = userData.services[serviceKey];\n\n\t\t\tfor (const key in service) {\n\t\t\t\tif (!service[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[`services.${serviceKey}.${key}`] = service[key];\n\t\t\t}\n\t\t}\n\t}\n\n\taddCustomFields(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.customFields) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subset = (source: Record<string, any>, currentPath: string): void => {\n\t\t\tfor (const key in source) {\n\t\t\t\tif (!source.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst keyPath = `${currentPath}.${key}`;\n\t\t\t\tif (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n\t\t\t\t\tsubset(source[key], keyPath);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[keyPath] = source[key];\n\t\t\t}\n\t\t};\n\n\t\tsubset(userData.customFields, 'customFields');\n\t}\n\n\tupdateUser(existingUser: IUser, userData: IImportUser): void {\n\t\tconst { _id } = existingUser;\n\n\t\tuserData._id = _id;\n\n\t\tif (!userData.roles && !existingUser.roles) {\n\t\t\tuserData.roles = ['user'];\n\t\t}\n\t\tif (!userData.type && !existingUser.type) {\n\t\t\tuserData.type = 'user';\n\t\t}\n\n\t\t// #ToDo: #TODO: Move this to the model class\n\t\tconst updateData: Record<string, any> = {\n\t\t\t$set: {\n\t\t\t\t...(userData.roles && { roles: userData.roles }),\n\t\t\t\t...(userData.type && { type: userData.type }),\n\t\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t},\n\t\t};\n\n\t\tthis.addCustomFields(updateData, userData);\n\t\tthis.addUserServices(updateData, userData);\n\t\tthis.addUserImportId(updateData, userData);\n\t\tthis.addUserEmails(updateData, userData, existingUser.emails || []);\n\n\t\tif (Object.keys(updateData.$set).length === 0) {\n\t\t\tdelete updateData.$set;\n\t\t}\n\t\tif (Object.keys(updateData).length > 0) {\n\t\t\tUsers.update({ _id }, updateData);\n\t\t}\n\n\t\tif (userData.utcOffset) {\n\t\t\tUsers.setUtcOffset(_id, userData.utcOffset);\n\t\t}\n\n\t\tif (userData.name || userData.username) {\n\t\t\tsaveUserIdentity({ _id, name: userData.name, username: userData.username });\n\t\t}\n\n\t\tif (userData.importIds.length) {\n\t\t\tthis.addUserToCache(userData.importIds[0], existingUser._id, existingUser.username);\n\t\t}\n\t}\n\n\tinsertUser(userData: IImportUser): IUser {\n\t\tconst password = `${Date.now()}${userData.name || ''}${userData.emails.length ? userData.emails[0].toUpperCase() : ''}`;\n\t\tconst userId = userData.emails.length\n\t\t\t? Accounts.createUser({\n\t\t\t\t\temail: userData.emails[0],\n\t\t\t\t\tpassword,\n\t\t\t  })\n\t\t\t: Accounts.createUser({\n\t\t\t\t\tusername: userData.username,\n\t\t\t\t\tpassword,\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tjoinDefaultChannelsSilenced: true,\n\t\t\t  });\n\n\t\tconst user = Users.findOneById(userId, {});\n\t\tthis.updateUser(user, userData);\n\n\t\taddUserToDefaultChannels(user, true);\n\t\treturn user;\n\t}\n\n\tprotected async getUsersToImport(): Promise<Array<IImportUserRecord>> {\n\t\treturn ImportDataRaw.getAllUsers().toArray();\n\t}\n\n\tfindExistingUser(data: IImportUser): IUser | undefined {\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = Users.findOneByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\tif (data.username) {\n\t\t\treturn Users.findOneByUsernameIgnoringCase(data.username, {});\n\t\t}\n\t}\n\n\tpublic convertUsers({ beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst users = Promise.await(this.getUsersToImport());\n\t\tusers.forEach(({ data, _id }) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(data, 'user')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.emails = data.emails.filter((item) => item);\n\t\t\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\t\t\tif (!data.emails.length && !data.username) {\n\t\t\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t\t\t}\n\n\t\t\t\tlet existingUser = this.findExistingUser(data);\n\t\t\t\tif (existingUser && this._options.skipExistingUsers) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!data.username) {\n\t\t\t\t\tdata.username = generateUsernameSuggestion({\n\t\t\t\t\t\tname: data.name,\n\t\t\t\t\t\temails: data.emails,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst isNewUser = !existingUser;\n\n\t\t\t\tif (existingUser) {\n\t\t\t\t\tthis.updateUser(existingUser, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (!data.name && data.username) {\n\t\t\t\t\t\tdata.name = guessNameFromUsername(data.username);\n\t\t\t\t\t}\n\n\t\t\t\t\texistingUser = this.insertUser(data);\n\t\t\t\t}\n\n\t\t\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\tif (data.deleted && existingUser?.active) {\n\t\t\t\t\tsetUserActiveStatus(data._id, false, true);\n\t\t\t\t} else if (data.deleted === false && existingUser?.active === false) {\n\t\t\t\t\tsetUserActiveStatus(data._id, true);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(data, 'user', isNewUser);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected saveError(importId: string, error: Error): void {\n\t\tthis._logger.error(error);\n\t\tImportData.update(\n\t\t\t{\n\t\t\t\t_id: importId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected skipRecord(_id: string): void {\n\t\tImportData.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tskipped: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tconvertMessageReactions(importedReactions: Record<string, IImportMessageReaction>): undefined | IMessageReactions {\n\t\tconst reactions: IMessageReactions = {};\n\n\t\tfor (const name in importedReactions) {\n\t\t\tif (!importedReactions.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { users } = importedReactions[name];\n\n\t\t\tif (!users.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst reaction: IMessageReaction = {\n\t\t\t\tname,\n\t\t\t\tusernames: [],\n\t\t\t};\n\n\t\t\tfor (const importId of users) {\n\t\t\t\tconst username = this.findImportedUsername(importId);\n\t\t\t\tif (username && !reaction.usernames.includes(username)) {\n\t\t\t\t\treaction.usernames.push(username);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (reaction.usernames.length) {\n\t\t\t\treactions[name] = reaction;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(reactions).length > 0) {\n\t\t\treturn reactions;\n\t\t}\n\t}\n\n\tconvertMessageReplies(replies: Array<string>): Array<string> {\n\t\tconst result: Array<string> = [];\n\t\tfor (const importId of replies) {\n\t\t\tconst userId = this.findImportedUserId(importId);\n\t\t\tif (userId && !result.includes(userId)) {\n\t\t\t\tresult.push(userId);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tconvertMessageMentions(message: IImportMessage): Array<IMentionedUser> | undefined {\n\t\tconst { mentions } = message;\n\t\tif (!mentions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: Array<IMentionedUser> = [];\n\t\tfor (const importId of mentions) {\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tif (importId === ('all' as 'string') || importId === 'here') {\n\t\t\t\tresult.push({\n\t\t\t\t\t_id: importId,\n\t\t\t\t\tusername: importId,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = this.findImportedUserDisplayName(importId);\n\t\t\tconst data = this.findImportedUser(importId);\n\n\t\t\tif (!data) {\n\t\t\t\tthrow new Error('importer-message-mentioned-user-not-found');\n\t\t\t}\n\t\t\tif (!data.username) {\n\t\t\t\tthrow new Error('importer-message-mentioned-username-not-found');\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\@${importId}`, 'gi'), `@${data.username}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id: data._id,\n\t\t\t\tusername: data.username as 'string',\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tconvertMessageChannels(message: IImportMessage): Array<IMentionedChannel> | undefined {\n\t\tconst { channels } = message;\n\t\tif (!channels) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result: Array<IMentionedChannel> = [];\n\t\tfor (const importId of channels) {\n\t\t\t// loading the name will also store the id on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = this.findImportedRoomName(importId);\n\t\t\tconst _id = this.findImportedRoomId(importId);\n\n\t\t\tif (!_id || !name) {\n\t\t\t\tthis._logger.warn(`Mentioned room not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\#${importId}`, 'gi'), `#${name}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id,\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected async getMessagesToImport(): Promise<Array<IImportMessageRecord>> {\n\t\treturn ImportDataRaw.getAllMessages().toArray();\n\t}\n\n\tconvertMessages({ beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst rids: Array<string> = [];\n\t\tconst messages = Promise.await(this.getMessagesToImport());\n\t\tmessages.forEach(({ data: m, _id }: IImportMessageRecord) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(m, 'message')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!m.ts || isNaN(m.ts as unknown as number)) {\n\t\t\t\t\tthrow new Error('importer-message-invalid-timestamp');\n\t\t\t\t}\n\n\t\t\t\tconst creator = this.findImportedUser(m.u._id);\n\t\t\t\tif (!creator) {\n\t\t\t\t\tthis._logger.warn(`Imported user not found: ${m.u._id}`);\n\t\t\t\t\tthrow new Error('importer-message-unknown-user');\n\t\t\t\t}\n\n\t\t\t\tconst rid = this.findImportedRoomId(m.rid);\n\t\t\t\tif (!rid) {\n\t\t\t\t\tthrow new Error('importer-message-unknown-room');\n\t\t\t\t}\n\t\t\t\tif (!rids.includes(rid)) {\n\t\t\t\t\trids.push(rid);\n\t\t\t\t}\n\n\t\t\t\t// Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\t\t\t\tconst mentions = m.mentions && this.convertMessageMentions(m);\n\t\t\t\tconst channels = m.channels && this.convertMessageChannels(m);\n\n\t\t\t\tconst msgObj: IMessage = {\n\t\t\t\t\trid,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\tusername: creator.username,\n\t\t\t\t\t},\n\t\t\t\t\tmsg: m.msg,\n\t\t\t\t\tts: m.ts,\n\t\t\t\t\tt: m.t || undefined,\n\t\t\t\t\tgroupable: m.groupable,\n\t\t\t\t\ttmid: m.tmid,\n\t\t\t\t\ttlm: m.tlm,\n\t\t\t\t\ttcount: m.tcount,\n\t\t\t\t\treplies: m.replies && this.convertMessageReplies(m.replies),\n\t\t\t\t\teditedAt: m.editedAt,\n\t\t\t\t\teditedBy: m.editedBy && (this.findImportedUser(m.editedBy) || undefined),\n\t\t\t\t\tmentions,\n\t\t\t\t\tchannels,\n\t\t\t\t\t_importFile: m._importFile,\n\t\t\t\t\turl: m.url,\n\t\t\t\t\tattachments: m.attachments,\n\t\t\t\t\tbot: m.bot,\n\t\t\t\t\temoji: m.emoji,\n\t\t\t\t\talias: m.alias,\n\t\t\t\t};\n\n\t\t\t\tif (m._id) {\n\t\t\t\t\tmsgObj._id = m._id;\n\t\t\t\t}\n\n\t\t\t\tif (m.reactions) {\n\t\t\t\t\tmsgObj.reactions = this.convertMessageReactions(m.reactions);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tinsertMessage(creator, msgObj, rid, true);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logger.warn(`Failed to import message with timestamp ${String(msgObj.ts)} to room ${rid}`);\n\t\t\t\t\tthis._logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(m, 'message', true);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\n\t\tfor (const rid of rids) {\n\t\t\ttry {\n\t\t\t\tRooms.resetLastMessageById(rid);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.warn(`Failed to update last message of room ${rid}`);\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateRoom(room: IRoom, roomData: IImportChannel, startedByUserId: string): void {\n\t\troomData._id = room._id;\n\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tif ((roomData._id as string).toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', 'GENERAL', 'roomName', roomData.name);\n\t\t\t});\n\t\t}\n\n\t\tthis.updateRoomId(room._id, roomData);\n\t}\n\n\tpublic findDMForImportedUsers(...users: Array<string>): IImportChannel | undefined {\n\t\tconst record = ImportData.findDMForImportedUsers(...users);\n\t\tif (record) {\n\t\t\treturn record.data;\n\t\t}\n\t}\n\n\tfindImportedRoomId(importId: string): string | null {\n\t\tif (this._roomCache.has(importId)) {\n\t\t\treturn this._roomCache.get(importId) as string;\n\t\t}\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = Rooms.findOneByImportId(importId, options);\n\t\tif (room) {\n\t\t\treturn this.addRoomToCache(importId, room._id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfindImportedRoomName(importId: string): string | undefined {\n\t\tif (this._roomNameCache.has(importId)) {\n\t\t\treturn this._roomNameCache.get(importId) as string;\n\t\t}\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = Rooms.findOneByImportId(importId, options);\n\t\tif (room) {\n\t\t\tif (!this._roomCache.has(importId)) {\n\t\t\t\tthis.addRoomToCache(importId, room._id);\n\t\t\t}\n\t\t\treturn this.addRoomNameToCache(importId, room.name);\n\t\t}\n\t}\n\n\tfindImportedUser(importId: string): IUserIdentification | null {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (importId === 'rocket.cat') {\n\t\t\treturn {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t};\n\t\t}\n\n\t\tif (this._userCache.has(importId)) {\n\t\t\treturn this._userCache.get(importId) as IUserIdentification;\n\t\t}\n\n\t\tconst user = Users.findOneByImportId(importId, options);\n\t\tif (user) {\n\t\t\treturn this.addUserToCache(importId, user._id, user.username);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfindImportedUserId(_id: string): string | undefined {\n\t\tconst data = this.findImportedUser(_id);\n\t\treturn data?._id;\n\t}\n\n\tfindImportedUsername(_id: string): string | undefined {\n\t\tconst data = this.findImportedUser(_id);\n\t\treturn data?.username;\n\t}\n\n\tfindImportedUserDisplayName(importId: string): string | undefined {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tusername: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (this._userDisplayNameCache.has(importId)) {\n\t\t\treturn this._userDisplayNameCache.get(importId);\n\t\t}\n\n\t\tconst user = importId === 'rocket.cat' ? Users.findOneById('rocket.cat', options) : Users.findOneByImportId(importId, options);\n\t\tif (user) {\n\t\t\tif (!this._userCache.has(importId)) {\n\t\t\t\tthis.addUserToCache(importId, user._id, user.username);\n\t\t\t}\n\n\t\t\treturn this.addUserDisplayNameToCache(importId, user.name);\n\t\t}\n\t}\n\n\tupdateRoomId(_id: string, roomData: IImportChannel): void {\n\t\tconst set = {\n\t\t\tts: roomData.ts,\n\t\t\ttopic: roomData.topic,\n\t\t\tdescription: roomData.description,\n\t\t};\n\n\t\tconst roomUpdate: { $set?: Record<string, any>; $addToSet?: Record<string, any> } = {};\n\n\t\tif (Object.keys(set).length > 0) {\n\t\t\troomUpdate.$set = set;\n\t\t}\n\n\t\tif (roomData.importIds.length) {\n\t\t\troomUpdate.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: roomData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (roomUpdate.$set || roomUpdate.$addToSet) {\n\t\t\tRooms.update({ _id: roomData._id }, roomUpdate);\n\t\t}\n\t}\n\n\tgetRoomCreatorId(roomData: IImportChannel, startedByUserId: string): string {\n\t\tif (roomData.u) {\n\t\t\tconst creatorId = this.findImportedUserId(roomData.u._id);\n\t\t\tif (creatorId) {\n\t\t\t\treturn creatorId;\n\t\t\t}\n\n\t\t\tif (roomData.t !== 'd') {\n\t\t\t\treturn startedByUserId;\n\t\t\t}\n\n\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t}\n\n\t\tif (roomData.t === 'd') {\n\t\t\tfor (const member of roomData.users) {\n\t\t\t\tconst userId = this.findImportedUserId(member);\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn userId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('importer-channel-invalid-creator');\n\t}\n\n\tinsertRoom(roomData: IImportChannel, startedByUserId: string): void {\n\t\t// Find the rocketchatId of the user who created this channel\n\t\tconst creatorId = this.getRoomCreatorId(roomData, startedByUserId);\n\t\tconst members = this.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n\t\tif (roomData.t === 'd') {\n\t\t\tif (members.length < roomData.users.length) {\n\t\t\t\tthis._logger.warn(`One or more imported users not found: ${roomData.users}`);\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\t\t}\n\n\t\t// Create the channel\n\t\ttry {\n\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\tconst roomInfo =\n\t\t\t\t\troomData.t === 'd'\n\t\t\t\t\t\t? Meteor.call('createDirectMessage', ...members)\n\t\t\t\t\t\t: Meteor.call(roomData.t === 'p' ? 'createPrivateGroup' : 'createChannel', roomData.name, members);\n\n\t\t\t\troomData._id = roomInfo.rid;\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis._logger.warn({ msg: 'Failed to create new room', name: roomData.name, members });\n\t\t\tthis._logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tthis.updateRoomId(roomData._id as 'string', roomData);\n\t}\n\n\tconvertImportedIdsToUsernames(importedIds: Array<string>, idToRemove: string | undefined = undefined): Array<string> {\n\t\treturn importedIds\n\t\t\t.map((user) => {\n\t\t\t\tif (user === 'rocket.cat') {\n\t\t\t\t\treturn user;\n\t\t\t\t}\n\n\t\t\t\tif (this._userCache.has(user)) {\n\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\tif (cache) {\n\t\t\t\t\t\treturn cache.username;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst obj = Users.findOneByImportId(user, { fields: { _id: 1, username: 1 } });\n\t\t\t\tif (obj) {\n\t\t\t\t\tthis.addUserToCache(user, obj._id, obj.username);\n\n\t\t\t\t\tif (idToRemove && obj._id === idToRemove) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn obj.username;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.filter((user) => user);\n\t}\n\n\tfindExistingRoom(data: IImportChannel): IRoom {\n\t\tif (data._id && data._id.toUpperCase() === 'GENERAL') {\n\t\t\tconst room = Rooms.findOneById('GENERAL', {});\n\t\t\t// Prevent the importer from trying to create a new general\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('importer-channel-general-not-found');\n\t\t\t}\n\n\t\t\treturn room;\n\t\t}\n\n\t\tif (data.t === 'd') {\n\t\t\tconst users = this.convertImportedIdsToUsernames(data.users);\n\t\t\tif (users.length !== data.users.length) {\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\n\t\t\treturn Rooms.findDirectRoomContainingAllUsernames(users, {});\n\t\t}\n\n\t\treturn Rooms.findOneByNonValidatedName(data.name, {});\n\t}\n\n\tprotected async getChannelsToImport(): Promise<Array<IImportChannelRecord>> {\n\t\treturn ImportDataRaw.getAllChannels().toArray();\n\t}\n\n\tconvertChannels(startedByUserId: string, { beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst channels = Promise.await(this.getChannelsToImport());\n\t\tchannels.forEach(({ data: c, _id }: IImportChannelRecord) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(c, 'channel')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!c.name && c.t !== 'd') {\n\t\t\t\t\tthrow new Error('importer-channel-missing-name');\n\t\t\t\t}\n\n\t\t\t\tc.importIds = c.importIds.filter((item) => item);\n\t\t\t\tc.users = _.uniq(c.users);\n\n\t\t\t\tif (!c.importIds.length) {\n\t\t\t\t\tthrow new Error('importer-channel-missing-import-id');\n\t\t\t\t}\n\n\t\t\t\tconst existingRoom = this.findExistingRoom(c);\n\n\t\t\t\tif (existingRoom) {\n\t\t\t\t\tthis.updateRoom(existingRoom, c, startedByUserId);\n\t\t\t\t} else {\n\t\t\t\t\tthis.insertRoom(c, startedByUserId);\n\t\t\t\t}\n\n\t\t\t\tif (c.archived && c._id) {\n\t\t\t\t\tthis.archiveRoomById(c._id);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(c, 'channel', !existingRoom);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\t}\n\n\tarchiveRoomById(rid: string): void {\n\t\tRooms.archiveById(rid);\n\t\tSubscriptions.archiveByRoomId(rid);\n\t}\n\n\tconvertData(startedByUserId: string, callbacks: IConversionCallbacks = {}): void {\n\t\tthis.convertUsers(callbacks);\n\t\tthis.convertChannels(startedByUserId, callbacks);\n\t\tthis.convertMessages(callbacks);\n\n\t\tMeteor.defer(() => {\n\t\t\tthis.clearSuccessfullyImportedData();\n\t\t});\n\t}\n\n\tpublic clearImportData(): void {\n\t\t// Using raw collection since its faster\n\t\tPromise.await(ImportData.model.rawCollection().remove({}));\n\t}\n\n\tclearSuccessfullyImportedData(): void {\n\t\tImportData.model.rawCollection().remove({\n\t\t\terrors: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImportDataConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/ImportDataConverter.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  ImportDataConverter: () => ImportDataConverter\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet ImportDataRaw;\nmodule.link(\"../../../models/server/raw\", {\n  ImportData(v) {\n    ImportDataRaw = v;\n  }\n\n}, 3);\nlet Users, Rooms, Subscriptions, ImportData;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  ImportData(v) {\n    ImportData = v;\n  }\n\n}, 4);\nlet generateUsernameSuggestion, insertMessage, saveUserIdentity, addUserToDefaultChannels;\nmodule.link(\"../../../lib/server\", {\n  generateUsernameSuggestion(v) {\n    generateUsernameSuggestion = v;\n  },\n\n  insertMessage(v) {\n    insertMessage = v;\n  },\n\n  saveUserIdentity(v) {\n    saveUserIdentity = v;\n  },\n\n  addUserToDefaultChannels(v) {\n    addUserToDefaultChannels = v;\n  }\n\n}, 5);\nlet setUserActiveStatus;\nmodule.link(\"../../../lib/server/functions/setUserActiveStatus\", {\n  setUserActiveStatus(v) {\n    setUserActiveStatus = v;\n  }\n\n}, 6);\n\nconst guessNameFromUsername = username => username.replace(/\\W/g, ' ').replace(/\\s(.)/g, u => u.toUpperCase()).replace(/^(.)/, u => u.toLowerCase()).replace(/^\\w/, u => u.toUpperCase());\n\nclass ImportDataConverter {\n  // display name uses a different cache because it's only used on mentions so we don't need to load it every time we load an user\n  get options() {\n    return this._options;\n  }\n\n  constructor(options) {\n    this._userCache = void 0;\n    this._userDisplayNameCache = void 0;\n    this._roomCache = void 0;\n    this._roomNameCache = void 0;\n    this._logger = void 0;\n    this._options = void 0;\n    this._options = options || {\n      flagEmailsAsVerified: false,\n      skipExistingUsers: false\n    };\n    this._userCache = new Map();\n    this._userDisplayNameCache = new Map();\n    this._roomCache = new Map();\n    this._roomNameCache = new Map();\n  }\n\n  setLogger(logger) {\n    this._logger = logger;\n  }\n\n  addUserToCache(importId, _id, username) {\n    const cache = {\n      _id,\n      username\n    };\n\n    this._userCache.set(importId, cache);\n\n    return cache;\n  }\n\n  addUserDisplayNameToCache(importId, name) {\n    this._userDisplayNameCache.set(importId, name);\n\n    return name;\n  }\n\n  addRoomToCache(importId, rid) {\n    this._roomCache.set(importId, rid);\n\n    return rid;\n  }\n\n  addRoomNameToCache(importId, name) {\n    this._roomNameCache.set(importId, name);\n\n    return name;\n  }\n\n  addUserDataToCache(userData) {\n    if (!userData._id) {\n      return;\n    }\n\n    if (!userData.importIds.length) {\n      return;\n    }\n\n    this.addUserToCache(userData.importIds[0], userData._id, userData.username);\n  }\n\n  addObject(type, data) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    ImportData.model.rawCollection().insert(_objectSpread({\n      data,\n      dataType: type\n    }, options));\n  }\n\n  addUser(data) {\n    this.addObject('user', data);\n  }\n\n  addChannel(data) {\n    this.addObject('channel', data);\n  }\n\n  addMessage(data) {\n    let useQuickInsert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.addObject('message', data, {\n      useQuickInsert: useQuickInsert || undefined\n    });\n  }\n\n  addUserImportId(updateData, userData) {\n    var _userData$importIds;\n\n    if ((_userData$importIds = userData.importIds) !== null && _userData$importIds !== void 0 && _userData$importIds.length) {\n      updateData.$addToSet = {\n        importIds: {\n          $each: userData.importIds\n        }\n      };\n    }\n  }\n\n  addUserEmails(updateData, userData, existingEmails) {\n    var _userData$emails;\n\n    if (!((_userData$emails = userData.emails) !== null && _userData$emails !== void 0 && _userData$emails.length)) {\n      return;\n    }\n\n    const verifyEmails = Boolean(this.options.flagEmailsAsVerified);\n    const newEmailList = [];\n\n    for (const email of userData.emails) {\n      var _existingEmails$find;\n\n      const verified = verifyEmails || ((_existingEmails$find = existingEmails.find(ee => ee.address === email)) === null || _existingEmails$find === void 0 ? void 0 : _existingEmails$find.verified) || false;\n      newEmailList.push({\n        address: email,\n        verified\n      });\n    }\n\n    updateData.$set.emails = newEmailList;\n  }\n\n  addUserServices(updateData, userData) {\n    if (!userData.services) {\n      return;\n    }\n\n    for (const serviceKey in userData.services) {\n      if (!userData.services[serviceKey]) {\n        continue;\n      }\n\n      const service = userData.services[serviceKey];\n\n      for (const key in service) {\n        if (!service[key]) {\n          continue;\n        }\n\n        updateData.$set[\"services.\".concat(serviceKey, \".\").concat(key)] = service[key];\n      }\n    }\n  }\n\n  addCustomFields(updateData, userData) {\n    if (!userData.customFields) {\n      return;\n    }\n\n    const subset = (source, currentPath) => {\n      for (const key in source) {\n        if (!source.hasOwnProperty(key)) {\n          continue;\n        }\n\n        const keyPath = \"\".concat(currentPath, \".\").concat(key);\n\n        if (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n          subset(source[key], keyPath);\n          continue;\n        }\n\n        updateData.$set[keyPath] = source[key];\n      }\n    };\n\n    subset(userData.customFields, 'customFields');\n  }\n\n  updateUser(existingUser, userData) {\n    var _userData$services;\n\n    const {\n      _id\n    } = existingUser;\n    userData._id = _id;\n\n    if (!userData.roles && !existingUser.roles) {\n      userData.roles = ['user'];\n    }\n\n    if (!userData.type && !existingUser.type) {\n      userData.type = 'user';\n    } // #ToDo: #TODO: Move this to the model class\n\n\n    const updateData = {\n      $set: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, userData.roles && {\n        roles: userData.roles\n      }), userData.type && {\n        type: userData.type\n      }), userData.statusText && {\n        statusText: userData.statusText\n      }), userData.bio && {\n        bio: userData.bio\n      }), ((_userData$services = userData.services) === null || _userData$services === void 0 ? void 0 : _userData$services.ldap) && {\n        ldap: true\n      }), userData.avatarUrl && {\n        _pendingAvatarUrl: userData.avatarUrl\n      })\n    };\n    this.addCustomFields(updateData, userData);\n    this.addUserServices(updateData, userData);\n    this.addUserImportId(updateData, userData);\n    this.addUserEmails(updateData, userData, existingUser.emails || []);\n\n    if (Object.keys(updateData.$set).length === 0) {\n      delete updateData.$set;\n    }\n\n    if (Object.keys(updateData).length > 0) {\n      Users.update({\n        _id\n      }, updateData);\n    }\n\n    if (userData.utcOffset) {\n      Users.setUtcOffset(_id, userData.utcOffset);\n    }\n\n    if (userData.name || userData.username) {\n      saveUserIdentity({\n        _id,\n        name: userData.name,\n        username: userData.username\n      });\n    }\n\n    if (userData.importIds.length) {\n      this.addUserToCache(userData.importIds[0], existingUser._id, existingUser.username);\n    }\n  }\n\n  insertUser(userData) {\n    const password = \"\".concat(Date.now()).concat(userData.name || '').concat(userData.emails.length ? userData.emails[0].toUpperCase() : '');\n    const userId = userData.emails.length ? Accounts.createUser({\n      email: userData.emails[0],\n      password\n    }) : Accounts.createUser({\n      username: userData.username,\n      password,\n      // @ts-ignore\n      joinDefaultChannelsSilenced: true\n    });\n    const user = Users.findOneById(userId, {});\n    this.updateUser(user, userData);\n    addUserToDefaultChannels(user, true);\n    return user;\n  }\n\n  getUsersToImport() {\n    return Promise.asyncApply(() => {\n      return ImportDataRaw.getAllUsers().toArray();\n    });\n  }\n\n  findExistingUser(data) {\n    if (data.emails.length) {\n      const emailUser = Users.findOneByEmailAddress(data.emails[0], {});\n\n      if (emailUser) {\n        return emailUser;\n      }\n    } // If we couldn't find one by their email address, try to find an existing user by their username\n\n\n    if (data.username) {\n      return Users.findOneByUsernameIgnoringCase(data.username, {});\n    }\n  }\n\n  convertUsers() {\n    let {\n      beforeImportFn,\n      afterImportFn\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const users = Promise.await(this.getUsersToImport());\n    users.forEach(_ref => {\n      let {\n        data,\n        _id\n      } = _ref;\n\n      try {\n        var _existingUser, _existingUser2;\n\n        if (beforeImportFn && !beforeImportFn(data, 'user')) {\n          this.skipRecord(_id);\n          return;\n        }\n\n        data.emails = data.emails.filter(item => item);\n        data.importIds = data.importIds.filter(item => item);\n\n        if (!data.emails.length && !data.username) {\n          throw new Error('importer-user-missing-email-and-username');\n        }\n\n        let existingUser = this.findExistingUser(data);\n\n        if (existingUser && this._options.skipExistingUsers) {\n          this.skipRecord(_id);\n          return;\n        }\n\n        if (!data.username) {\n          data.username = generateUsernameSuggestion({\n            name: data.name,\n            emails: data.emails\n          });\n        }\n\n        const isNewUser = !existingUser;\n\n        if (existingUser) {\n          this.updateUser(existingUser, data);\n        } else {\n          if (!data.name && data.username) {\n            data.name = guessNameFromUsername(data.username);\n          }\n\n          existingUser = this.insertUser(data);\n        } // Deleted users are 'inactive' users in Rocket.Chat\n\n\n        if (data.deleted && (_existingUser = existingUser) !== null && _existingUser !== void 0 && _existingUser.active) {\n          setUserActiveStatus(data._id, false, true);\n        } else if (data.deleted === false && ((_existingUser2 = existingUser) === null || _existingUser2 === void 0 ? void 0 : _existingUser2.active) === false) {\n          setUserActiveStatus(data._id, true);\n        }\n\n        if (afterImportFn) {\n          afterImportFn(data, 'user', isNewUser);\n        }\n      } catch (e) {\n        this._logger.error(e);\n\n        this.saveError(_id, e);\n      }\n    });\n  }\n\n  saveError(importId, error) {\n    this._logger.error(error);\n\n    ImportData.update({\n      _id: importId\n    }, {\n      $push: {\n        errors: {\n          message: error.message,\n          stack: error.stack\n        }\n      }\n    });\n  }\n\n  skipRecord(_id) {\n    ImportData.update({\n      _id\n    }, {\n      $set: {\n        skipped: true\n      }\n    });\n  }\n\n  convertMessageReactions(importedReactions) {\n    const reactions = {};\n\n    for (const name in importedReactions) {\n      if (!importedReactions.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const {\n        users\n      } = importedReactions[name];\n\n      if (!users.length) {\n        continue;\n      }\n\n      const reaction = {\n        name,\n        usernames: []\n      };\n\n      for (const importId of users) {\n        const username = this.findImportedUsername(importId);\n\n        if (username && !reaction.usernames.includes(username)) {\n          reaction.usernames.push(username);\n        }\n      }\n\n      if (reaction.usernames.length) {\n        reactions[name] = reaction;\n      }\n    }\n\n    if (Object.keys(reactions).length > 0) {\n      return reactions;\n    }\n  }\n\n  convertMessageReplies(replies) {\n    const result = [];\n\n    for (const importId of replies) {\n      const userId = this.findImportedUserId(importId);\n\n      if (userId && !result.includes(userId)) {\n        result.push(userId);\n      }\n    }\n\n    return result;\n  }\n\n  convertMessageMentions(message) {\n    const {\n      mentions\n    } = message;\n\n    if (!mentions) {\n      return undefined;\n    }\n\n    const result = [];\n\n    for (const importId of mentions) {\n      // eslint-disable-next-line no-extra-parens\n      if (importId === 'all' || importId === 'here') {\n        result.push({\n          _id: importId,\n          username: importId\n        });\n        continue;\n      } // Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\n\n      const name = this.findImportedUserDisplayName(importId);\n      const data = this.findImportedUser(importId);\n\n      if (!data) {\n        throw new Error('importer-message-mentioned-user-not-found');\n      }\n\n      if (!data.username) {\n        throw new Error('importer-message-mentioned-username-not-found');\n      }\n\n      message.msg = message.msg.replace(new RegExp(\"@\".concat(importId), 'gi'), \"@\".concat(data.username));\n      result.push({\n        _id: data._id,\n        username: data.username,\n        name\n      });\n    }\n\n    return result;\n  }\n\n  convertMessageChannels(message) {\n    const {\n      channels\n    } = message;\n\n    if (!channels) {\n      return;\n    }\n\n    const result = [];\n\n    for (const importId of channels) {\n      // loading the name will also store the id on the cache if it's missing, so this won't run two queries\n      const name = this.findImportedRoomName(importId);\n\n      const _id = this.findImportedRoomId(importId);\n\n      if (!_id || !name) {\n        this._logger.warn(\"Mentioned room not found: \".concat(importId));\n\n        continue;\n      }\n\n      message.msg = message.msg.replace(new RegExp(\"#\".concat(importId), 'gi'), \"#\".concat(name));\n      result.push({\n        _id,\n        name\n      });\n    }\n\n    return result;\n  }\n\n  getMessagesToImport() {\n    return Promise.asyncApply(() => {\n      return ImportDataRaw.getAllMessages().toArray();\n    });\n  }\n\n  convertMessages() {\n    let {\n      beforeImportFn,\n      afterImportFn\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const rids = [];\n    const messages = Promise.await(this.getMessagesToImport());\n    messages.forEach(_ref2 => {\n      let {\n        data: m,\n        _id\n      } = _ref2;\n\n      try {\n        if (beforeImportFn && !beforeImportFn(m, 'message')) {\n          this.skipRecord(_id);\n          return;\n        }\n\n        if (!m.ts || isNaN(m.ts)) {\n          throw new Error('importer-message-invalid-timestamp');\n        }\n\n        const creator = this.findImportedUser(m.u._id);\n\n        if (!creator) {\n          this._logger.warn(\"Imported user not found: \".concat(m.u._id));\n\n          throw new Error('importer-message-unknown-user');\n        }\n\n        const rid = this.findImportedRoomId(m.rid);\n\n        if (!rid) {\n          throw new Error('importer-message-unknown-room');\n        }\n\n        if (!rids.includes(rid)) {\n          rids.push(rid);\n        } // Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\n\n        const mentions = m.mentions && this.convertMessageMentions(m);\n        const channels = m.channels && this.convertMessageChannels(m);\n        const msgObj = {\n          rid,\n          u: {\n            _id: creator._id,\n            username: creator.username\n          },\n          msg: m.msg,\n          ts: m.ts,\n          t: m.t || undefined,\n          groupable: m.groupable,\n          tmid: m.tmid,\n          tlm: m.tlm,\n          tcount: m.tcount,\n          replies: m.replies && this.convertMessageReplies(m.replies),\n          editedAt: m.editedAt,\n          editedBy: m.editedBy && (this.findImportedUser(m.editedBy) || undefined),\n          mentions,\n          channels,\n          _importFile: m._importFile,\n          url: m.url,\n          attachments: m.attachments,\n          bot: m.bot,\n          emoji: m.emoji,\n          alias: m.alias\n        };\n\n        if (m._id) {\n          msgObj._id = m._id;\n        }\n\n        if (m.reactions) {\n          msgObj.reactions = this.convertMessageReactions(m.reactions);\n        }\n\n        try {\n          insertMessage(creator, msgObj, rid, true);\n        } catch (e) {\n          this._logger.warn(\"Failed to import message with timestamp \".concat(String(msgObj.ts), \" to room \").concat(rid));\n\n          this._logger.error(e);\n        }\n\n        if (afterImportFn) {\n          afterImportFn(m, 'message', true);\n        }\n      } catch (e) {\n        this.saveError(_id, e);\n      }\n    });\n\n    for (const rid of rids) {\n      try {\n        Rooms.resetLastMessageById(rid);\n      } catch (e) {\n        this._logger.warn(\"Failed to update last message of room \".concat(rid));\n\n        this._logger.error(e);\n      }\n    }\n  }\n\n  updateRoom(room, roomData, startedByUserId) {\n    roomData._id = room._id; // eslint-disable-next-line no-extra-parens\n\n    if (roomData._id.toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n      Meteor.runAsUser(startedByUserId, () => {\n        Meteor.call('saveRoomSettings', 'GENERAL', 'roomName', roomData.name);\n      });\n    }\n\n    this.updateRoomId(room._id, roomData);\n  }\n\n  findDMForImportedUsers() {\n    const record = ImportData.findDMForImportedUsers(...arguments);\n\n    if (record) {\n      return record.data;\n    }\n  }\n\n  findImportedRoomId(importId) {\n    if (this._roomCache.has(importId)) {\n      return this._roomCache.get(importId);\n    }\n\n    const options = {\n      fields: {\n        _id: 1\n      }\n    };\n    const room = Rooms.findOneByImportId(importId, options);\n\n    if (room) {\n      return this.addRoomToCache(importId, room._id);\n    }\n\n    return null;\n  }\n\n  findImportedRoomName(importId) {\n    if (this._roomNameCache.has(importId)) {\n      return this._roomNameCache.get(importId);\n    }\n\n    const options = {\n      fields: {\n        _id: 1,\n        name: 1\n      }\n    };\n    const room = Rooms.findOneByImportId(importId, options);\n\n    if (room) {\n      if (!this._roomCache.has(importId)) {\n        this.addRoomToCache(importId, room._id);\n      }\n\n      return this.addRoomNameToCache(importId, room.name);\n    }\n  }\n\n  findImportedUser(importId) {\n    const options = {\n      fields: {\n        _id: 1,\n        username: 1\n      }\n    };\n\n    if (importId === 'rocket.cat') {\n      return {\n        _id: 'rocket.cat',\n        username: 'rocket.cat'\n      };\n    }\n\n    if (this._userCache.has(importId)) {\n      return this._userCache.get(importId);\n    }\n\n    const user = Users.findOneByImportId(importId, options);\n\n    if (user) {\n      return this.addUserToCache(importId, user._id, user.username);\n    }\n\n    return null;\n  }\n\n  findImportedUserId(_id) {\n    const data = this.findImportedUser(_id);\n    return data === null || data === void 0 ? void 0 : data._id;\n  }\n\n  findImportedUsername(_id) {\n    const data = this.findImportedUser(_id);\n    return data === null || data === void 0 ? void 0 : data.username;\n  }\n\n  findImportedUserDisplayName(importId) {\n    const options = {\n      fields: {\n        _id: 1,\n        name: 1,\n        username: 1\n      }\n    };\n\n    if (this._userDisplayNameCache.has(importId)) {\n      return this._userDisplayNameCache.get(importId);\n    }\n\n    const user = importId === 'rocket.cat' ? Users.findOneById('rocket.cat', options) : Users.findOneByImportId(importId, options);\n\n    if (user) {\n      if (!this._userCache.has(importId)) {\n        this.addUserToCache(importId, user._id, user.username);\n      }\n\n      return this.addUserDisplayNameToCache(importId, user.name);\n    }\n  }\n\n  updateRoomId(_id, roomData) {\n    const set = {\n      ts: roomData.ts,\n      topic: roomData.topic,\n      description: roomData.description\n    };\n    const roomUpdate = {};\n\n    if (Object.keys(set).length > 0) {\n      roomUpdate.$set = set;\n    }\n\n    if (roomData.importIds.length) {\n      roomUpdate.$addToSet = {\n        importIds: {\n          $each: roomData.importIds\n        }\n      };\n    }\n\n    if (roomUpdate.$set || roomUpdate.$addToSet) {\n      Rooms.update({\n        _id: roomData._id\n      }, roomUpdate);\n    }\n  }\n\n  getRoomCreatorId(roomData, startedByUserId) {\n    if (roomData.u) {\n      const creatorId = this.findImportedUserId(roomData.u._id);\n\n      if (creatorId) {\n        return creatorId;\n      }\n\n      if (roomData.t !== 'd') {\n        return startedByUserId;\n      }\n\n      throw new Error('importer-channel-invalid-creator');\n    }\n\n    if (roomData.t === 'd') {\n      for (const member of roomData.users) {\n        const userId = this.findImportedUserId(member);\n\n        if (userId) {\n          return userId;\n        }\n      }\n    }\n\n    throw new Error('importer-channel-invalid-creator');\n  }\n\n  insertRoom(roomData, startedByUserId) {\n    // Find the rocketchatId of the user who created this channel\n    const creatorId = this.getRoomCreatorId(roomData, startedByUserId);\n    const members = this.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n    if (roomData.t === 'd') {\n      if (members.length < roomData.users.length) {\n        this._logger.warn(\"One or more imported users not found: \".concat(roomData.users));\n\n        throw new Error('importer-channel-missing-users');\n      }\n    } // Create the channel\n\n\n    try {\n      Meteor.runAsUser(creatorId, () => {\n        const roomInfo = roomData.t === 'd' ? Meteor.call('createDirectMessage', ...members) : Meteor.call(roomData.t === 'p' ? 'createPrivateGroup' : 'createChannel', roomData.name, members);\n        roomData._id = roomInfo.rid;\n      });\n    } catch (e) {\n      this._logger.warn({\n        msg: 'Failed to create new room',\n        name: roomData.name,\n        members\n      });\n\n      this._logger.error(e);\n\n      throw e;\n    }\n\n    this.updateRoomId(roomData._id, roomData);\n  }\n\n  convertImportedIdsToUsernames(importedIds) {\n    let idToRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    return importedIds.map(user => {\n      if (user === 'rocket.cat') {\n        return user;\n      }\n\n      if (this._userCache.has(user)) {\n        const cache = this._userCache.get(user);\n\n        if (cache) {\n          return cache.username;\n        }\n      }\n\n      const obj = Users.findOneByImportId(user, {\n        fields: {\n          _id: 1,\n          username: 1\n        }\n      });\n\n      if (obj) {\n        this.addUserToCache(user, obj._id, obj.username);\n\n        if (idToRemove && obj._id === idToRemove) {\n          return false;\n        }\n\n        return obj.username;\n      }\n\n      return false;\n    }).filter(user => user);\n  }\n\n  findExistingRoom(data) {\n    if (data._id && data._id.toUpperCase() === 'GENERAL') {\n      const room = Rooms.findOneById('GENERAL', {}); // Prevent the importer from trying to create a new general\n\n      if (!room) {\n        throw new Error('importer-channel-general-not-found');\n      }\n\n      return room;\n    }\n\n    if (data.t === 'd') {\n      const users = this.convertImportedIdsToUsernames(data.users);\n\n      if (users.length !== data.users.length) {\n        throw new Error('importer-channel-missing-users');\n      }\n\n      return Rooms.findDirectRoomContainingAllUsernames(users, {});\n    }\n\n    return Rooms.findOneByNonValidatedName(data.name, {});\n  }\n\n  getChannelsToImport() {\n    return Promise.asyncApply(() => {\n      return ImportDataRaw.getAllChannels().toArray();\n    });\n  }\n\n  convertChannels(startedByUserId) {\n    let {\n      beforeImportFn,\n      afterImportFn\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const channels = Promise.await(this.getChannelsToImport());\n    channels.forEach(_ref3 => {\n      let {\n        data: c,\n        _id\n      } = _ref3;\n\n      try {\n        if (beforeImportFn && !beforeImportFn(c, 'channel')) {\n          this.skipRecord(_id);\n          return;\n        }\n\n        if (!c.name && c.t !== 'd') {\n          throw new Error('importer-channel-missing-name');\n        }\n\n        c.importIds = c.importIds.filter(item => item);\n        c.users = _.uniq(c.users);\n\n        if (!c.importIds.length) {\n          throw new Error('importer-channel-missing-import-id');\n        }\n\n        const existingRoom = this.findExistingRoom(c);\n\n        if (existingRoom) {\n          this.updateRoom(existingRoom, c, startedByUserId);\n        } else {\n          this.insertRoom(c, startedByUserId);\n        }\n\n        if (c.archived && c._id) {\n          this.archiveRoomById(c._id);\n        }\n\n        if (afterImportFn) {\n          afterImportFn(c, 'channel', !existingRoom);\n        }\n      } catch (e) {\n        this.saveError(_id, e);\n      }\n    });\n  }\n\n  archiveRoomById(rid) {\n    Rooms.archiveById(rid);\n    Subscriptions.archiveByRoomId(rid);\n  }\n\n  convertData(startedByUserId) {\n    let callbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.convertUsers(callbacks);\n    this.convertChannels(startedByUserId, callbacks);\n    this.convertMessages(callbacks);\n    Meteor.defer(() => {\n      this.clearSuccessfullyImportedData();\n    });\n  }\n\n  clearImportData() {\n    // Using raw collection since its faster\n    Promise.await(ImportData.model.rawCollection().remove({}));\n  }\n\n  clearSuccessfullyImportedData() {\n    ImportData.model.rawCollection().remove({\n      errors: {\n        $exists: false\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["app/importer/server/classes/ImportDataConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport _ from 'underscore';\n\nimport { ImportData as ImportDataRaw } from '../../../models/server/raw';\nimport { IImportUser } from '../../../../definition/IImportUser';\nimport { IImportMessage, IImportMessageReaction } from '../../../../definition/IImportMessage';\nimport { IImportChannel } from '../../../../definition/IImportChannel';\nimport { IConversionCallbacks } from '../definitions/IConversionCallbacks';\nimport { IImportUserRecord, IImportChannelRecord, IImportMessageRecord } from '../../../../definition/IImportRecord';\nimport { Users, Rooms, Subscriptions, ImportData } from '../../../models/server';\nimport { generateUsernameSuggestion, insertMessage, saveUserIdentity, addUserToDefaultChannels } from '../../../lib/server';\nimport { setUserActiveStatus } from '../../../lib/server/functions/setUserActiveStatus';\nimport { IUser, IUserEmail } from '../../../../definition/IUser';\nimport type { Logger } from '../../../../server/lib/logger/Logger';\n\ntype IRoom = Record<string, any>;\ntype IMessage = Record<string, any>;\ntype IUserIdentification = {\n\t_id: string;\n\tusername: string | undefined;\n};\ntype IMentionedUser = {\n\t_id: string;\n\tusername: string;\n\tname?: string;\n};\ntype IMentionedChannel = {\n\t_id: string;\n\tname: string;\n};\n\ntype IMessageReaction = {\n\tname: string;\n\tusernames: Array<string>;\n};\n\ntype IMessageReactions = Record<string, IMessageReaction>;\n\nexport type IConverterOptions = {\n\tflagEmailsAsVerified?: boolean;\n\tskipExistingUsers?: boolean;\n};\n\nconst guessNameFromUsername = (username: string): string =>\n\tusername\n\t\t.replace(/\\W/g, ' ')\n\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\nexport class ImportDataConverter {\n\tprivate _userCache: Map<string, IUserIdentification>;\n\n\t// display name uses a different cache because it's only used on mentions so we don't need to load it every time we load an user\n\tprivate _userDisplayNameCache: Map<string, string>;\n\n\tprivate _roomCache: Map<string, string>;\n\n\tprivate _roomNameCache: Map<string, string>;\n\n\tprivate _logger: Logger;\n\n\tprivate _options: IConverterOptions;\n\n\tpublic get options(): IConverterOptions {\n\t\treturn this._options;\n\t}\n\n\tconstructor(options?: IConverterOptions) {\n\t\tthis._options = options || {\n\t\t\tflagEmailsAsVerified: false,\n\t\t\tskipExistingUsers: false,\n\t\t};\n\t\tthis._userCache = new Map();\n\t\tthis._userDisplayNameCache = new Map();\n\t\tthis._roomCache = new Map();\n\t\tthis._roomNameCache = new Map();\n\t}\n\n\tsetLogger(logger: Logger): void {\n\t\tthis._logger = logger;\n\t}\n\n\taddUserToCache(importId: string, _id: string, username: string | undefined): IUserIdentification {\n\t\tconst cache = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t};\n\n\t\tthis._userCache.set(importId, cache);\n\t\treturn cache;\n\t}\n\n\taddUserDisplayNameToCache(importId: string, name: string): string {\n\t\tthis._userDisplayNameCache.set(importId, name);\n\t\treturn name;\n\t}\n\n\taddRoomToCache(importId: string, rid: string): string {\n\t\tthis._roomCache.set(importId, rid);\n\t\treturn rid;\n\t}\n\n\taddRoomNameToCache(importId: string, name: string): string {\n\t\tthis._roomNameCache.set(importId, name);\n\t\treturn name;\n\t}\n\n\taddUserDataToCache(userData: IImportUser): void {\n\t\tif (!userData._id) {\n\t\t\treturn;\n\t\t}\n\t\tif (!userData.importIds.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.addUserToCache(userData.importIds[0], userData._id, userData.username);\n\t}\n\n\tprotected addObject(type: string, data: Record<string, any>, options: Record<string, any> = {}): void {\n\t\tImportData.model.rawCollection().insert({\n\t\t\tdata,\n\t\t\tdataType: type,\n\t\t\t...options,\n\t\t});\n\t}\n\n\taddUser(data: IImportUser): void {\n\t\tthis.addObject('user', data);\n\t}\n\n\taddChannel(data: IImportChannel): void {\n\t\tthis.addObject('channel', data);\n\t}\n\n\taddMessage(data: IImportMessage, useQuickInsert = false): void {\n\t\tthis.addObject('message', data, {\n\t\t\tuseQuickInsert: useQuickInsert || undefined,\n\t\t});\n\t}\n\n\taddUserImportId(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (userData.importIds?.length) {\n\t\t\tupdateData.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: userData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\taddUserEmails(updateData: Record<string, any>, userData: IImportUser, existingEmails: Array<IUserEmail>): void {\n\t\tif (!userData.emails?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst verifyEmails = Boolean(this.options.flagEmailsAsVerified);\n\t\tconst newEmailList: Array<IUserEmail> = [];\n\n\t\tfor (const email of userData.emails) {\n\t\t\tconst verified = verifyEmails || existingEmails.find((ee) => ee.address === email)?.verified || false;\n\n\t\t\tnewEmailList.push({\n\t\t\t\taddress: email,\n\t\t\t\tverified,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.$set.emails = newEmailList;\n\t}\n\n\taddUserServices(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.services) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceKey in userData.services) {\n\t\t\tif (!userData.services[serviceKey]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst service = userData.services[serviceKey];\n\n\t\t\tfor (const key in service) {\n\t\t\t\tif (!service[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[`services.${serviceKey}.${key}`] = service[key];\n\t\t\t}\n\t\t}\n\t}\n\n\taddCustomFields(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.customFields) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subset = (source: Record<string, any>, currentPath: string): void => {\n\t\t\tfor (const key in source) {\n\t\t\t\tif (!source.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst keyPath = `${currentPath}.${key}`;\n\t\t\t\tif (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n\t\t\t\t\tsubset(source[key], keyPath);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[keyPath] = source[key];\n\t\t\t}\n\t\t};\n\n\t\tsubset(userData.customFields, 'customFields');\n\t}\n\n\tupdateUser(existingUser: IUser, userData: IImportUser): void {\n\t\tconst { _id } = existingUser;\n\n\t\tuserData._id = _id;\n\n\t\tif (!userData.roles && !existingUser.roles) {\n\t\t\tuserData.roles = ['user'];\n\t\t}\n\t\tif (!userData.type && !existingUser.type) {\n\t\t\tuserData.type = 'user';\n\t\t}\n\n\t\t// #ToDo: #TODO: Move this to the model class\n\t\tconst updateData: Record<string, any> = {\n\t\t\t$set: {\n\t\t\t\t...(userData.roles && { roles: userData.roles }),\n\t\t\t\t...(userData.type && { type: userData.type }),\n\t\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t},\n\t\t};\n\n\t\tthis.addCustomFields(updateData, userData);\n\t\tthis.addUserServices(updateData, userData);\n\t\tthis.addUserImportId(updateData, userData);\n\t\tthis.addUserEmails(updateData, userData, existingUser.emails || []);\n\n\t\tif (Object.keys(updateData.$set).length === 0) {\n\t\t\tdelete updateData.$set;\n\t\t}\n\t\tif (Object.keys(updateData).length > 0) {\n\t\t\tUsers.update({ _id }, updateData);\n\t\t}\n\n\t\tif (userData.utcOffset) {\n\t\t\tUsers.setUtcOffset(_id, userData.utcOffset);\n\t\t}\n\n\t\tif (userData.name || userData.username) {\n\t\t\tsaveUserIdentity({ _id, name: userData.name, username: userData.username });\n\t\t}\n\n\t\tif (userData.importIds.length) {\n\t\t\tthis.addUserToCache(userData.importIds[0], existingUser._id, existingUser.username);\n\t\t}\n\t}\n\n\tinsertUser(userData: IImportUser): IUser {\n\t\tconst password = `${Date.now()}${userData.name || ''}${userData.emails.length ? userData.emails[0].toUpperCase() : ''}`;\n\t\tconst userId = userData.emails.length\n\t\t\t? Accounts.createUser({\n\t\t\t\t\temail: userData.emails[0],\n\t\t\t\t\tpassword,\n\t\t\t  })\n\t\t\t: Accounts.createUser({\n\t\t\t\t\tusername: userData.username,\n\t\t\t\t\tpassword,\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tjoinDefaultChannelsSilenced: true,\n\t\t\t  });\n\n\t\tconst user = Users.findOneById(userId, {});\n\t\tthis.updateUser(user, userData);\n\n\t\taddUserToDefaultChannels(user, true);\n\t\treturn user;\n\t}\n\n\tprotected async getUsersToImport(): Promise<Array<IImportUserRecord>> {\n\t\treturn ImportDataRaw.getAllUsers().toArray();\n\t}\n\n\tfindExistingUser(data: IImportUser): IUser | undefined {\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = Users.findOneByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\tif (data.username) {\n\t\t\treturn Users.findOneByUsernameIgnoringCase(data.username, {});\n\t\t}\n\t}\n\n\tpublic convertUsers({ beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst users = Promise.await(this.getUsersToImport());\n\t\tusers.forEach(({ data, _id }) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(data, 'user')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.emails = data.emails.filter((item) => item);\n\t\t\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\t\t\tif (!data.emails.length && !data.username) {\n\t\t\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t\t\t}\n\n\t\t\t\tlet existingUser = this.findExistingUser(data);\n\t\t\t\tif (existingUser && this._options.skipExistingUsers) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!data.username) {\n\t\t\t\t\tdata.username = generateUsernameSuggestion({\n\t\t\t\t\t\tname: data.name,\n\t\t\t\t\t\temails: data.emails,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst isNewUser = !existingUser;\n\n\t\t\t\tif (existingUser) {\n\t\t\t\t\tthis.updateUser(existingUser, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (!data.name && data.username) {\n\t\t\t\t\t\tdata.name = guessNameFromUsername(data.username);\n\t\t\t\t\t}\n\n\t\t\t\t\texistingUser = this.insertUser(data);\n\t\t\t\t}\n\n\t\t\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\tif (data.deleted && existingUser?.active) {\n\t\t\t\t\tsetUserActiveStatus(data._id, false, true);\n\t\t\t\t} else if (data.deleted === false && existingUser?.active === false) {\n\t\t\t\t\tsetUserActiveStatus(data._id, true);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(data, 'user', isNewUser);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected saveError(importId: string, error: Error): void {\n\t\tthis._logger.error(error);\n\t\tImportData.update(\n\t\t\t{\n\t\t\t\t_id: importId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected skipRecord(_id: string): void {\n\t\tImportData.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tskipped: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tconvertMessageReactions(importedReactions: Record<string, IImportMessageReaction>): undefined | IMessageReactions {\n\t\tconst reactions: IMessageReactions = {};\n\n\t\tfor (const name in importedReactions) {\n\t\t\tif (!importedReactions.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { users } = importedReactions[name];\n\n\t\t\tif (!users.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst reaction: IMessageReaction = {\n\t\t\t\tname,\n\t\t\t\tusernames: [],\n\t\t\t};\n\n\t\t\tfor (const importId of users) {\n\t\t\t\tconst username = this.findImportedUsername(importId);\n\t\t\t\tif (username && !reaction.usernames.includes(username)) {\n\t\t\t\t\treaction.usernames.push(username);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (reaction.usernames.length) {\n\t\t\t\treactions[name] = reaction;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(reactions).length > 0) {\n\t\t\treturn reactions;\n\t\t}\n\t}\n\n\tconvertMessageReplies(replies: Array<string>): Array<string> {\n\t\tconst result: Array<string> = [];\n\t\tfor (const importId of replies) {\n\t\t\tconst userId = this.findImportedUserId(importId);\n\t\t\tif (userId && !result.includes(userId)) {\n\t\t\t\tresult.push(userId);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tconvertMessageMentions(message: IImportMessage): Array<IMentionedUser> | undefined {\n\t\tconst { mentions } = message;\n\t\tif (!mentions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: Array<IMentionedUser> = [];\n\t\tfor (const importId of mentions) {\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tif (importId === ('all' as 'string') || importId === 'here') {\n\t\t\t\tresult.push({\n\t\t\t\t\t_id: importId,\n\t\t\t\t\tusername: importId,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = this.findImportedUserDisplayName(importId);\n\t\t\tconst data = this.findImportedUser(importId);\n\n\t\t\tif (!data) {\n\t\t\t\tthrow new Error('importer-message-mentioned-user-not-found');\n\t\t\t}\n\t\t\tif (!data.username) {\n\t\t\t\tthrow new Error('importer-message-mentioned-username-not-found');\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\@${importId}`, 'gi'), `@${data.username}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id: data._id,\n\t\t\t\tusername: data.username as 'string',\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tconvertMessageChannels(message: IImportMessage): Array<IMentionedChannel> | undefined {\n\t\tconst { channels } = message;\n\t\tif (!channels) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result: Array<IMentionedChannel> = [];\n\t\tfor (const importId of channels) {\n\t\t\t// loading the name will also store the id on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = this.findImportedRoomName(importId);\n\t\t\tconst _id = this.findImportedRoomId(importId);\n\n\t\t\tif (!_id || !name) {\n\t\t\t\tthis._logger.warn(`Mentioned room not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\#${importId}`, 'gi'), `#${name}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id,\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected async getMessagesToImport(): Promise<Array<IImportMessageRecord>> {\n\t\treturn ImportDataRaw.getAllMessages().toArray();\n\t}\n\n\tconvertMessages({ beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst rids: Array<string> = [];\n\t\tconst messages = Promise.await(this.getMessagesToImport());\n\t\tmessages.forEach(({ data: m, _id }: IImportMessageRecord) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(m, 'message')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!m.ts || isNaN(m.ts as unknown as number)) {\n\t\t\t\t\tthrow new Error('importer-message-invalid-timestamp');\n\t\t\t\t}\n\n\t\t\t\tconst creator = this.findImportedUser(m.u._id);\n\t\t\t\tif (!creator) {\n\t\t\t\t\tthis._logger.warn(`Imported user not found: ${m.u._id}`);\n\t\t\t\t\tthrow new Error('importer-message-unknown-user');\n\t\t\t\t}\n\n\t\t\t\tconst rid = this.findImportedRoomId(m.rid);\n\t\t\t\tif (!rid) {\n\t\t\t\t\tthrow new Error('importer-message-unknown-room');\n\t\t\t\t}\n\t\t\t\tif (!rids.includes(rid)) {\n\t\t\t\t\trids.push(rid);\n\t\t\t\t}\n\n\t\t\t\t// Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\t\t\t\tconst mentions = m.mentions && this.convertMessageMentions(m);\n\t\t\t\tconst channels = m.channels && this.convertMessageChannels(m);\n\n\t\t\t\tconst msgObj: IMessage = {\n\t\t\t\t\trid,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\tusername: creator.username,\n\t\t\t\t\t},\n\t\t\t\t\tmsg: m.msg,\n\t\t\t\t\tts: m.ts,\n\t\t\t\t\tt: m.t || undefined,\n\t\t\t\t\tgroupable: m.groupable,\n\t\t\t\t\ttmid: m.tmid,\n\t\t\t\t\ttlm: m.tlm,\n\t\t\t\t\ttcount: m.tcount,\n\t\t\t\t\treplies: m.replies && this.convertMessageReplies(m.replies),\n\t\t\t\t\teditedAt: m.editedAt,\n\t\t\t\t\teditedBy: m.editedBy && (this.findImportedUser(m.editedBy) || undefined),\n\t\t\t\t\tmentions,\n\t\t\t\t\tchannels,\n\t\t\t\t\t_importFile: m._importFile,\n\t\t\t\t\turl: m.url,\n\t\t\t\t\tattachments: m.attachments,\n\t\t\t\t\tbot: m.bot,\n\t\t\t\t\temoji: m.emoji,\n\t\t\t\t\talias: m.alias,\n\t\t\t\t};\n\n\t\t\t\tif (m._id) {\n\t\t\t\t\tmsgObj._id = m._id;\n\t\t\t\t}\n\n\t\t\t\tif (m.reactions) {\n\t\t\t\t\tmsgObj.reactions = this.convertMessageReactions(m.reactions);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tinsertMessage(creator, msgObj, rid, true);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logger.warn(`Failed to import message with timestamp ${String(msgObj.ts)} to room ${rid}`);\n\t\t\t\t\tthis._logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(m, 'message', true);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\n\t\tfor (const rid of rids) {\n\t\t\ttry {\n\t\t\t\tRooms.resetLastMessageById(rid);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.warn(`Failed to update last message of room ${rid}`);\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateRoom(room: IRoom, roomData: IImportChannel, startedByUserId: string): void {\n\t\troomData._id = room._id;\n\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tif ((roomData._id as string).toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', 'GENERAL', 'roomName', roomData.name);\n\t\t\t});\n\t\t}\n\n\t\tthis.updateRoomId(room._id, roomData);\n\t}\n\n\tpublic findDMForImportedUsers(...users: Array<string>): IImportChannel | undefined {\n\t\tconst record = ImportData.findDMForImportedUsers(...users);\n\t\tif (record) {\n\t\t\treturn record.data;\n\t\t}\n\t}\n\n\tfindImportedRoomId(importId: string): string | null {\n\t\tif (this._roomCache.has(importId)) {\n\t\t\treturn this._roomCache.get(importId) as string;\n\t\t}\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = Rooms.findOneByImportId(importId, options);\n\t\tif (room) {\n\t\t\treturn this.addRoomToCache(importId, room._id);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfindImportedRoomName(importId: string): string | undefined {\n\t\tif (this._roomNameCache.has(importId)) {\n\t\t\treturn this._roomNameCache.get(importId) as string;\n\t\t}\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = Rooms.findOneByImportId(importId, options);\n\t\tif (room) {\n\t\t\tif (!this._roomCache.has(importId)) {\n\t\t\t\tthis.addRoomToCache(importId, room._id);\n\t\t\t}\n\t\t\treturn this.addRoomNameToCache(importId, room.name);\n\t\t}\n\t}\n\n\tfindImportedUser(importId: string): IUserIdentification | null {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (importId === 'rocket.cat') {\n\t\t\treturn {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t};\n\t\t}\n\n\t\tif (this._userCache.has(importId)) {\n\t\t\treturn this._userCache.get(importId) as IUserIdentification;\n\t\t}\n\n\t\tconst user = Users.findOneByImportId(importId, options);\n\t\tif (user) {\n\t\t\treturn this.addUserToCache(importId, user._id, user.username);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfindImportedUserId(_id: string): string | undefined {\n\t\tconst data = this.findImportedUser(_id);\n\t\treturn data?._id;\n\t}\n\n\tfindImportedUsername(_id: string): string | undefined {\n\t\tconst data = this.findImportedUser(_id);\n\t\treturn data?.username;\n\t}\n\n\tfindImportedUserDisplayName(importId: string): string | undefined {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tusername: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (this._userDisplayNameCache.has(importId)) {\n\t\t\treturn this._userDisplayNameCache.get(importId);\n\t\t}\n\n\t\tconst user = importId === 'rocket.cat' ? Users.findOneById('rocket.cat', options) : Users.findOneByImportId(importId, options);\n\t\tif (user) {\n\t\t\tif (!this._userCache.has(importId)) {\n\t\t\t\tthis.addUserToCache(importId, user._id, user.username);\n\t\t\t}\n\n\t\t\treturn this.addUserDisplayNameToCache(importId, user.name);\n\t\t}\n\t}\n\n\tupdateRoomId(_id: string, roomData: IImportChannel): void {\n\t\tconst set = {\n\t\t\tts: roomData.ts,\n\t\t\ttopic: roomData.topic,\n\t\t\tdescription: roomData.description,\n\t\t};\n\n\t\tconst roomUpdate: { $set?: Record<string, any>; $addToSet?: Record<string, any> } = {};\n\n\t\tif (Object.keys(set).length > 0) {\n\t\t\troomUpdate.$set = set;\n\t\t}\n\n\t\tif (roomData.importIds.length) {\n\t\t\troomUpdate.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: roomData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (roomUpdate.$set || roomUpdate.$addToSet) {\n\t\t\tRooms.update({ _id: roomData._id }, roomUpdate);\n\t\t}\n\t}\n\n\tgetRoomCreatorId(roomData: IImportChannel, startedByUserId: string): string {\n\t\tif (roomData.u) {\n\t\t\tconst creatorId = this.findImportedUserId(roomData.u._id);\n\t\t\tif (creatorId) {\n\t\t\t\treturn creatorId;\n\t\t\t}\n\n\t\t\tif (roomData.t !== 'd') {\n\t\t\t\treturn startedByUserId;\n\t\t\t}\n\n\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t}\n\n\t\tif (roomData.t === 'd') {\n\t\t\tfor (const member of roomData.users) {\n\t\t\t\tconst userId = this.findImportedUserId(member);\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn userId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('importer-channel-invalid-creator');\n\t}\n\n\tinsertRoom(roomData: IImportChannel, startedByUserId: string): void {\n\t\t// Find the rocketchatId of the user who created this channel\n\t\tconst creatorId = this.getRoomCreatorId(roomData, startedByUserId);\n\t\tconst members = this.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n\t\tif (roomData.t === 'd') {\n\t\t\tif (members.length < roomData.users.length) {\n\t\t\t\tthis._logger.warn(`One or more imported users not found: ${roomData.users}`);\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\t\t}\n\n\t\t// Create the channel\n\t\ttry {\n\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\tconst roomInfo =\n\t\t\t\t\troomData.t === 'd'\n\t\t\t\t\t\t? Meteor.call('createDirectMessage', ...members)\n\t\t\t\t\t\t: Meteor.call(roomData.t === 'p' ? 'createPrivateGroup' : 'createChannel', roomData.name, members);\n\n\t\t\t\troomData._id = roomInfo.rid;\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis._logger.warn({ msg: 'Failed to create new room', name: roomData.name, members });\n\t\t\tthis._logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tthis.updateRoomId(roomData._id as 'string', roomData);\n\t}\n\n\tconvertImportedIdsToUsernames(importedIds: Array<string>, idToRemove: string | undefined = undefined): Array<string> {\n\t\treturn importedIds\n\t\t\t.map((user) => {\n\t\t\t\tif (user === 'rocket.cat') {\n\t\t\t\t\treturn user;\n\t\t\t\t}\n\n\t\t\t\tif (this._userCache.has(user)) {\n\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\tif (cache) {\n\t\t\t\t\t\treturn cache.username;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst obj = Users.findOneByImportId(user, { fields: { _id: 1, username: 1 } });\n\t\t\t\tif (obj) {\n\t\t\t\t\tthis.addUserToCache(user, obj._id, obj.username);\n\n\t\t\t\t\tif (idToRemove && obj._id === idToRemove) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn obj.username;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.filter((user) => user);\n\t}\n\n\tfindExistingRoom(data: IImportChannel): IRoom {\n\t\tif (data._id && data._id.toUpperCase() === 'GENERAL') {\n\t\t\tconst room = Rooms.findOneById('GENERAL', {});\n\t\t\t// Prevent the importer from trying to create a new general\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('importer-channel-general-not-found');\n\t\t\t}\n\n\t\t\treturn room;\n\t\t}\n\n\t\tif (data.t === 'd') {\n\t\t\tconst users = this.convertImportedIdsToUsernames(data.users);\n\t\t\tif (users.length !== data.users.length) {\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\n\t\t\treturn Rooms.findDirectRoomContainingAllUsernames(users, {});\n\t\t}\n\n\t\treturn Rooms.findOneByNonValidatedName(data.name, {});\n\t}\n\n\tprotected async getChannelsToImport(): Promise<Array<IImportChannelRecord>> {\n\t\treturn ImportDataRaw.getAllChannels().toArray();\n\t}\n\n\tconvertChannels(startedByUserId: string, { beforeImportFn, afterImportFn }: IConversionCallbacks = {}): void {\n\t\tconst channels = Promise.await(this.getChannelsToImport());\n\t\tchannels.forEach(({ data: c, _id }: IImportChannelRecord) => {\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !beforeImportFn(c, 'channel')) {\n\t\t\t\t\tthis.skipRecord(_id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!c.name && c.t !== 'd') {\n\t\t\t\t\tthrow new Error('importer-channel-missing-name');\n\t\t\t\t}\n\n\t\t\t\tc.importIds = c.importIds.filter((item) => item);\n\t\t\t\tc.users = _.uniq(c.users);\n\n\t\t\t\tif (!c.importIds.length) {\n\t\t\t\t\tthrow new Error('importer-channel-missing-import-id');\n\t\t\t\t}\n\n\t\t\t\tconst existingRoom = this.findExistingRoom(c);\n\n\t\t\t\tif (existingRoom) {\n\t\t\t\t\tthis.updateRoom(existingRoom, c, startedByUserId);\n\t\t\t\t} else {\n\t\t\t\t\tthis.insertRoom(c, startedByUserId);\n\t\t\t\t}\n\n\t\t\t\tif (c.archived && c._id) {\n\t\t\t\t\tthis.archiveRoomById(c._id);\n\t\t\t\t}\n\n\t\t\t\tif (afterImportFn) {\n\t\t\t\t\tafterImportFn(c, 'channel', !existingRoom);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.saveError(_id, e);\n\t\t\t}\n\t\t});\n\t}\n\n\tarchiveRoomById(rid: string): void {\n\t\tRooms.archiveById(rid);\n\t\tSubscriptions.archiveByRoomId(rid);\n\t}\n\n\tconvertData(startedByUserId: string, callbacks: IConversionCallbacks = {}): void {\n\t\tthis.convertUsers(callbacks);\n\t\tthis.convertChannels(startedByUserId, callbacks);\n\t\tthis.convertMessages(callbacks);\n\n\t\tMeteor.defer(() => {\n\t\t\tthis.clearSuccessfullyImportedData();\n\t\t});\n\t}\n\n\tpublic clearImportData(): void {\n\t\t// Using raw collection since its faster\n\t\tPromise.await(ImportData.model.rawCollection().remove({}));\n\t}\n\n\tclearSuccessfullyImportedData(): void {\n\t\tImportData.model.rawCollection().remove({\n\t\t\terrors: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"c91cc05bd755d3ae6b035fdc49b7de0526c84d33"}
