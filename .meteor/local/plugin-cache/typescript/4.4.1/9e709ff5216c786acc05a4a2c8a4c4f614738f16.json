{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/functions/resetTOTP.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/2fa/server/functions/resetTOTP.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/functions/resetTOTP.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/functions/resetTOTP.ts","sourceRoot":"","sources":["app/2fa/server/functions/resetTOTP.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAErD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AAGzD,MAAM,qBAAqB,GAAG,KAAK,WAAW,GAAW;IACxD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAqC,GAAG,EAAE;QAC7E,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;KACtC,CAAC,CAAC;IACH,IAAI,CAAC,IAAI,EAAE;QACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;KACvC;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IACnE,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAyB,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/G,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE;QACvB,OAAO;KACP;IAED,MAAM,CAAC,GAAG,CAAC,CAAS,EAAU,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;IAClE,MAAM,IAAI,GAAG;GACX,CAAC,CAAC,0BAA0B,CAAC;;GAE7B,CAAC,CAAC,8BAA8B,CAAC;EAClC,CAAC;IACF,MAAM,IAAI,GAAG;OACP,CAAC,CAAC,0BAA0B,CAAC;OAC7B,CAAC,CAAC,8BAA8B,CAAC;EACtC,CAAC;IAEF,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACxC,MAAM,OAAO,GAAG,CAAC,CAAC,kBAAkB,CAAC,CAAC;IAEtC,KAAK,MAAM,OAAO,IAAI,SAAS,EAAE;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjB,IAAI;gBACH,MAAM,CAAC,IAAI,CAAC;oBACX,EAAE,EAAE,OAAO;oBACX,IAAI;oBACJ,OAAO;oBACP,IAAI;oBACJ,IAAI;iBACG,CAAC,CAAC;aACV;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,+BAA+B,KAAK,CAAC,OAAO,EAAE,EAAE;oBACjG,QAAQ,EAAE,eAAe;oBACzB,OAAO,EAAE,KAAK,CAAC,OAAO;iBACtB,CAAC,CAAC;aACH;QACF,CAAC,CAAC,CAAC;KACH;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,MAAc,EAAE,UAAU,GAAG,KAAK;IACjE,IAAI,UAAU,EAAE;QACf,MAAM,qBAAqB,CAAC,MAAM,CAAC,CAAC;KACpC;IAED,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAEjD,IAAI,MAAM,EAAE,aAAa,KAAK,CAAC,EAAE;QAChC,MAAM,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;KACZ;IAED,OAAO,KAAK,CAAC;AACd,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { settings } from '../../../settings/server';\nimport * as Mailer from '../../../mailer';\nimport { Users } from '../../../models/server/raw/index';\nimport { IUser } from '../../../../definition/IUser';\n\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\t\tprojection: { language: 1, emails: 1 },\n\t});\n\tif (!user) {\n\t\tthrow new Meteor.Error('invalid-user');\n\t}\n\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }: { verified: boolean }) => verified).map((e) => e.address);\n\tif (!addresses?.length) {\n\t\treturn;\n\t}\n\n\tconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\tconst text = `\n\t${t('Your_TOTP_has_been_reset')}\n\n\t${t('TOTP_Reset_Other_Key_Warning')}\n\t`;\n\tconst html = `\n\t\t<p>${t('Your_TOTP_has_been_reset')}</p>\n\t\t<p>${t('TOTP_Reset_Other_Key_Warning')}</p>\n\t`;\n\n\tconst from = settings.get('From_Email');\n\tconst subject = t('TOTP_reset_email');\n\n\tfor (const address of addresses) {\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tMailer.send({\n\t\t\t\t\tto: address,\n\t\t\t\t\tfrom,\n\t\t\t\t\tsubject,\n\t\t\t\t\ttext,\n\t\t\t\t\thtml,\n\t\t\t\t} as any);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Meteor.Error('error-email-send-failed', `Error trying to send email: ${error.message}`, {\n\t\t\t\t\tfunction: 'resetUserTOTP',\n\t\t\t\t\tmessage: error.message,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n\nexport async function resetTOTP(userId: string, notifyUser = false): Promise<boolean> {\n\tif (notifyUser) {\n\t\tawait sendResetNotification(userId);\n\t}\n\n\tconst result = await Users.resetTOTPById(userId);\n\n\tif (result?.modifiedCount === 1) {\n\t\tawait Users.unsetLoginTokens(userId);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/functions/resetTOTP.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/2fa/server/functions/resetTOTP.ts"}},"code":"module.export({\n  resetTOTP: () => resetTOTP\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet Mailer;\nmodule.link(\"../../../mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 3);\nlet Users;\nmodule.link(\"../../../models/server/raw/index\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\n\nconst sendResetNotification = function (uid) {\n  return Promise.asyncApply(() => {\n    var _user$emails;\n\n    const user = Promise.await(Users.findOneById(uid, {\n      projection: {\n        language: 1,\n        emails: 1\n      }\n    }));\n\n    if (!user) {\n      throw new Meteor.Error('invalid-user');\n    }\n\n    const language = user.language || settings.get('Language') || 'en';\n    const addresses = (_user$emails = user.emails) === null || _user$emails === void 0 ? void 0 : _user$emails.filter(_ref => {\n      let {\n        verified\n      } = _ref;\n      return verified;\n    }).map(e => e.address);\n\n    if (!(addresses !== null && addresses !== void 0 && addresses.length)) {\n      return;\n    }\n\n    const t = s => TAPi18n.__(s, {\n      lng: language\n    });\n\n    const text = \"\\n\\t\".concat(t('Your_TOTP_has_been_reset'), \"\\n\\n\\t\").concat(t('TOTP_Reset_Other_Key_Warning'), \"\\n\\t\");\n    const html = \"\\n\\t\\t<p>\".concat(t('Your_TOTP_has_been_reset'), \"</p>\\n\\t\\t<p>\").concat(t('TOTP_Reset_Other_Key_Warning'), \"</p>\\n\\t\");\n    const from = settings.get('From_Email');\n    const subject = t('TOTP_reset_email');\n\n    for (const address of addresses) {\n      Meteor.defer(() => {\n        try {\n          Mailer.send({\n            to: address,\n            from,\n            subject,\n            text,\n            html\n          });\n        } catch (error) {\n          throw new Meteor.Error('error-email-send-failed', \"Error trying to send email: \".concat(error.message), {\n            function: 'resetUserTOTP',\n            message: error.message\n          });\n        }\n      });\n    }\n  });\n};\n\nfunction resetTOTP(userId) {\n  return Promise.asyncApply(() => {\n    let notifyUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (notifyUser) {\n      Promise.await(sendResetNotification(userId));\n    }\n\n    const result = Promise.await(Users.resetTOTPById(userId));\n\n    if ((result === null || result === void 0 ? void 0 : result.modifiedCount) === 1) {\n      Promise.await(Users.unsetLoginTokens(userId));\n      return true;\n    }\n\n    return false;\n  });\n}","map":{"version":3,"sources":["app/2fa/server/functions/resetTOTP.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAM,EAAA,SAAQ,EAAA,MAAA;AAAd,CAAT;AAAuC,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,0BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA;AAAA,MAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kCAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAQvC,MAAM,qBAAqB,GAAG,UAAgB,GAAhB;AAAA,kCAA2B;AAAA;;AACxD,UAAM,IAAI,iBAAS,KAAK,CAAC,WAAN,CAAsD,GAAtD,EAA2D;AAC7E,MAAA,UAAU,EAAE;AAAE,QAAA,QAAQ,EAAE,CAAZ;AAAe,QAAA,MAAM,EAAE;AAAvB;AADiE,KAA3D,CAAT,CAAV;;AAGA,QAAI,CAAC,IAAL,EAAW;AACV,YAAM,IAAI,MAAM,CAAC,KAAX,CAAiB,cAAjB,CAAN;AACA;;AAED,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAL,IAAiB,QAAQ,CAAC,GAAT,CAAa,UAAb,CAAjB,IAA6C,IAA9D;AACA,UAAM,SAAS,mBAAG,IAAI,CAAC,MAAR,iDAAG,aAAa,MAAb,CAAoB;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAyC,QAAzC;AAAA,KAApB,EAAuE,GAAvE,CAA4E,CAAD,IAAO,CAAC,CAAC,OAApF,CAAlB;;AACA,QAAI,EAAC,SAAD,aAAC,SAAD,eAAC,SAAS,CAAE,MAAZ,CAAJ,EAAwB;AACvB;AACA;;AAED,UAAM,CAAC,GAAI,CAAD,IAAuB,OAAO,CAAC,EAAR,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE;AAAP,KAAd,CAAjC;;AACA,UAAM,IAAI,iBACR,CAAC,CAAC,0BAAD,CADO,mBAGR,CAAC,CAAC,8BAAD,CAHO,SAAV;AAKA,UAAM,IAAI,sBACJ,CAAC,CAAC,0BAAD,CADG,0BAEJ,CAAC,CAAC,8BAAD,CAFG,aAAV;AAKA,UAAM,IAAI,GAAG,QAAQ,CAAC,GAAT,CAAa,YAAb,CAAb;AACA,UAAM,OAAO,GAAG,CAAC,CAAC,kBAAD,CAAjB;;AAEA,SAAK,MAAM,OAAX,IAAsB,SAAtB,EAAiC;AAChC,MAAA,MAAM,CAAC,KAAP,CAAa,MAAK;AACjB,YAAI;AACH,UAAA,MAAM,CAAC,IAAP,CAAY;AACX,YAAA,EAAE,EAAE,OADO;AAEX,YAAA,IAFW;AAGX,YAAA,OAHW;AAIX,YAAA,IAJW;AAKX,YAAA;AALW,WAAZ;AAOA,SARD,CAQE,OAAO,KAAP,EAAc;AACf,gBAAM,IAAI,MAAM,CAAC,KAAX,CAAiB,yBAAjB,wCAA2E,KAAK,CAAC,OAAjF,GAA4F;AACjG,YAAA,QAAQ,EAAE,eADuF;AAEjG,YAAA,OAAO,EAAE,KAAK,CAAC;AAFkF,WAA5F,CAAN;AAIA;AACD,OAfD;AAgBA;AACD,GA9C6B;AAAA,CAA9B;;AAgDO,SAAe,SAAf,CAAyB,MAAzB;AAAA,kCAA2D;AAAA,QAAlB,UAAkB,uEAAL,KAAK;;AACjE,QAAI,UAAJ,EAAgB;AACf,oBAAM,qBAAqB,CAAC,MAAD,CAA3B;AACA;;AAED,UAAM,MAAM,iBAAS,KAAK,CAAC,aAAN,CAAoB,MAApB,CAAT,CAAZ;;AAEA,QAAI,CAAA,MAAM,SAAN,IAAA,MAAM,WAAN,YAAA,MAAM,CAAE,aAAR,MAA0B,CAA9B,EAAiC;AAChC,oBAAM,KAAK,CAAC,gBAAN,CAAuB,MAAvB,CAAN;AACA,aAAO,IAAP;AACA;;AAED,WAAO,KAAP;AACA,GAbM;AAAA","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { settings } from '../../../settings/server';\nimport * as Mailer from '../../../mailer';\nimport { Users } from '../../../models/server/raw/index';\nimport { IUser } from '../../../../definition/IUser';\n\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\t\tprojection: { language: 1, emails: 1 },\n\t});\n\tif (!user) {\n\t\tthrow new Meteor.Error('invalid-user');\n\t}\n\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }: { verified: boolean }) => verified).map((e) => e.address);\n\tif (!addresses?.length) {\n\t\treturn;\n\t}\n\n\tconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\tconst text = `\n\t${t('Your_TOTP_has_been_reset')}\n\n\t${t('TOTP_Reset_Other_Key_Warning')}\n\t`;\n\tconst html = `\n\t\t<p>${t('Your_TOTP_has_been_reset')}</p>\n\t\t<p>${t('TOTP_Reset_Other_Key_Warning')}</p>\n\t`;\n\n\tconst from = settings.get('From_Email');\n\tconst subject = t('TOTP_reset_email');\n\n\tfor (const address of addresses) {\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tMailer.send({\n\t\t\t\t\tto: address,\n\t\t\t\t\tfrom,\n\t\t\t\t\tsubject,\n\t\t\t\t\ttext,\n\t\t\t\t\thtml,\n\t\t\t\t} as any);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Meteor.Error('error-email-send-failed', `Error trying to send email: ${error.message}`, {\n\t\t\t\t\tfunction: 'resetUserTOTP',\n\t\t\t\t\tmessage: error.message,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n\nexport async function resetTOTP(userId: string, notifyUser = false): Promise<boolean> {\n\tif (notifyUser) {\n\t\tawait sendResetNotification(userId);\n\t}\n\n\tconst result = await Users.resetTOTPById(userId);\n\n\tif (result?.modifiedCount === 1) {\n\t\tawait Users.unsetLoginTokens(userId);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"9e709ff5216c786acc05a4a2c8a4c4f614738f16"}
