{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/index.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/2fa/server/code/index.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/index.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/index.ts","sourceRoot":"","sources":["app/2fa/server/code/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAGhE,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAS/C,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AACzC,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;AAC3C,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC;AAEjE,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAsB,CAAC;AAE1D,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC5C,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAE9C,MAAM,UAAU,mCAAmC,CAAC,IAAW,EAAE,IAAa;IAC7E,IAAI,IAAI,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACnC,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC9B;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACnF,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,IAAW;IAClD,OAAO,CACN,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC;SACtB,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAC9C,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAC7B,CAAC;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,MAAc;IAC7C,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE;QAChC,MAAM,EAAE;YACP,QAAQ,EAAE,CAAC;YACX,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,CAAC;YACd,eAAe,EAAE,CAAC;YAClB,mBAAmB,EAAE,CAAC;YACtB,oBAAoB,EAAE,CAAC;YACvB,mBAAmB,EAAE,CAAC;YACtB,6BAA6B,EAAE,CAAC;SAChC;KACD,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,UAA6B;IACzE,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,SAAS,EAAE,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC;QAC/C,aAAa,EAAE,UAAU,CAAC,aAAa;KACvC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,SAAS,eAAe,CAAC,OAAa,IAAI,IAAI,EAAE;IAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,8CAA8C,CAAW,EAAE,EAAE,CAAC,CAAC;IAEzG,IAAI,WAAW,IAAI,CAAC,EAAE;QACrB,OAAO;KACP;IAED,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,WAAW,CAAC,CAAC;IAEvD,OAAO,OAAO,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,UAA6B,EAAE,IAAW,EAAE,OAA0B;IAC1G,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,YAAY,CAAC,CAAC;IAEpG,IAAI,CAAC,WAAW,EAAE;QACjB,OAAO,KAAK,CAAC;KACb;IAED,6CAA6C;IAC7C,IAAI,OAAO,CAAC,mBAAmB,EAAE;QAChC,OAAO,KAAK,CAAC;KACb;IAED,IAAI,WAAW,CAAC,eAAe,KAAK,IAAI,EAAE;QACzC,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,OAAO,CAAC,iBAAiB,KAAK,IAAI,EAAE;QACvC,OAAO,KAAK,CAAC;KACb;IAED,+CAA+C;IAC/C,MAAM,yBAAyB,GAAG,IAAI,CAAC,SAAS,IAAI,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpF,IAAI,yBAAyB,IAAI,yBAAyB,IAAI,IAAI,IAAI,EAAE,EAAE;QACzE,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,CAAC,WAAW,CAAC,wBAAwB,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE;QAClF,OAAO,KAAK,CAAC;KACb;IAED,IAAI,WAAW,CAAC,wBAAwB,GAAG,IAAI,IAAI,EAAE,EAAE;QACtD,OAAO,KAAK,CAAC;KACb;IAED,IAAI,WAAW,CAAC,uBAAuB,KAAK,4BAA4B,CAAC,UAAU,CAAC,EAAE;QACrF,OAAO,KAAK,CAAC;KACb;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,UAA6B,EAAE,IAAW;IAC/E,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAE5D,MAAM,OAAO,GAAG,eAAe,EAAE,CAAC;IAClC,IAAI,CAAC,OAAO,EAAE;QACb,OAAO;KACP;IAED,KAAK,CAAC,sDAAsD,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,4BAA4B,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;AACzI,CAAC;AAUD,MAAM,qBAAqB,GAAG,CAAC,IAAW,EAAE,MAA0B,EAAE,OAA0B,EAA0B,EAAE;IAC7H,sFAAsF;IACtF,MAAM,cAAc,GAAG,mCAAmC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzE,IAAI,cAAc,EAAE;QACnB,OAAO,cAAc,CAAC;KACtB;IAED,0EAA0E;IAC1E,IAAI,OAAO,CAAC,mBAAmB,EAAE;QAChC,OAAO,qBAAqB,CAAC;KAC7B;IAED,wCAAwC;IACxC,IAAI,CAAC,OAAO,CAAC,uBAAuB,IAAI,qBAAqB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;QAC7G,OAAO,qBAAqB,CAAC;KAC7B;AACF,CAAC,CAAC;AAEF,MAAM,UAAU,gBAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,UAAU,EAAqB;IACnG,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;QAC1D,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0CAA0C,CAAC,EAAE;QAC9D,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC7B,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;KAC7B;IAED,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,UAAU,EAAE,WAAW,EAAE,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE;QAC1G,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAC5C,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;KAChD;IAED,IAAI,UAAU,IAAI,oBAAoB,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,EAAE;QAClE,OAAO,IAAI,CAAC;KACZ;IAED,qEAAqE;IACrE,MAAM,cAAc,GAAG,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACpE,IAAI,CAAC,cAAc,EAAE;QACpB,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,CAAC,IAAI,EAAE;QACV,MAAM,IAAI,GAAG,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,gBAAgB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAEvD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE;YACxD,MAAM,EAAE,cAAc,CAAC,IAAI;YAC3B,GAAG,IAAI;YACP,gBAAgB;SAChB,CAAC,CAAC;KACH;IAED,MAAM,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAE7E,IAAI,CAAC,KAAK,EAAE;QACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;KACxF;IAED,IAAI,OAAO,CAAC,iBAAiB,KAAK,IAAI,IAAI,UAAU,EAAE;QACrD,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;KACxC;IAED,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import crypto from 'crypto';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../../settings/server';\nimport { TOTPCheck } from './TOTPCheck';\nimport { EmailCheck } from './EmailCheck';\nimport { PasswordCheckFallback } from './PasswordCheckFallback';\nimport { IUser } from '../../../../definition/IUser';\nimport { ICodeCheck } from './ICodeCheck';\nimport { Users } from '../../../models/server';\nimport { IMethodConnection } from '../../../../definition/IMethodThisType';\n\nexport interface ITwoFactorOptions {\n\tdisablePasswordFallback?: boolean;\n\tdisableRememberMe?: boolean;\n\trequireSecondFactor?: boolean; // whether any two factor should be required\n}\n\nexport const totpCheck = new TOTPCheck();\nexport const emailCheck = new EmailCheck();\nexport const passwordCheckFallback = new PasswordCheckFallback();\n\nexport const checkMethods = new Map<string, ICodeCheck>();\n\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nexport function getMethodByNameOrFirstActiveForUser(user: IUser, name?: string): ICodeCheck | undefined {\n\tif (name && checkMethods.has(name)) {\n\t\treturn checkMethods.get(name);\n\t}\n\n\treturn Array.from(checkMethods.values()).find((method) => method.isEnabled(user));\n}\n\nexport function getAvailableMethodNames(user: IUser): string[] | [] {\n\treturn (\n\t\tArray.from(checkMethods)\n\t\t\t.filter(([, method]) => method.isEnabled(user))\n\t\t\t.map(([name]) => name) || []\n\t);\n}\n\nexport function getUserForCheck(userId: string): IUser {\n\treturn Users.findOneById(userId, {\n\t\tfields: {\n\t\t\t'emails': 1,\n\t\t\t'language': 1,\n\t\t\t'createdAt': 1,\n\t\t\t'services.totp': 1,\n\t\t\t'services.email2fa': 1,\n\t\t\t'services.emailCode': 1,\n\t\t\t'services.password': 1,\n\t\t\t'services.resume.loginTokens': 1,\n\t\t},\n\t});\n}\n\nexport function getFingerprintFromConnection(connection: IMethodConnection): string {\n\tconst data = JSON.stringify({\n\t\tuserAgent: connection.httpHeaders['user-agent'],\n\t\tclientAddress: connection.clientAddress,\n\t});\n\n\treturn crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate(from: Date = new Date()): Date | undefined {\n\tconst rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor') as string, 10);\n\n\tif (rememberFor <= 0) {\n\t\treturn;\n\t}\n\n\tconst expires = new Date(from);\n\texpires.setSeconds(expires.getSeconds() + rememberFor);\n\n\treturn expires;\n}\n\nexport function isAuthorizedForToken(connection: IMethodConnection, user: IUser, options: ITwoFactorOptions): boolean {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\tconst tokenObject = user.services?.resume?.loginTokens?.find((i) => i.hashedToken === currentToken);\n\n\tif (!tokenObject) {\n\t\treturn false;\n\t}\n\n\t// if any two factor is required, early abort\n\tif (options.requireSecondFactor) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.bypassTwoFactor === true) {\n\t\treturn true;\n\t}\n\n\tif (options.disableRememberMe === true) {\n\t\treturn false;\n\t}\n\n\t// remember user right after their registration\n\tconst rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\tif (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n\t\treturn true;\n\t}\n\n\tif (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function rememberAuthorization(connection: IMethodConnection, user: IUser): void {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\n\tconst expires = getRememberDate();\n\tif (!expires) {\n\t\treturn;\n\t}\n\n\tUsers.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(user._id, currentToken, getFingerprintFromConnection(connection), expires);\n}\n\ninterface ICheckCodeForUser {\n\tuser: IUser | string;\n\tcode?: string;\n\tmethod?: string;\n\toptions?: ITwoFactorOptions;\n\tconnection?: IMethodConnection;\n}\n\nconst getSecondFactorMethod = (user: IUser, method: string | undefined, options: ITwoFactorOptions): ICodeCheck | undefined => {\n\t// try first getting one of the available methods or the one that was already provided\n\tconst selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\tif (selectedMethod) {\n\t\treturn selectedMethod;\n\t}\n\n\t// if none found but a second factor is required, chose the password check\n\tif (options.requireSecondFactor) {\n\t\treturn passwordCheckFallback;\n\t}\n\n\t// check if password fallback is enabled\n\tif (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n\t\treturn passwordCheckFallback;\n\t}\n};\n\nexport function checkCodeForUser({ user, code, method, options = {}, connection }: ICheckCodeForUser): boolean {\n\tif (process.env.TEST_MODE && !options.requireSecondFactor) {\n\t\treturn true;\n\t}\n\n\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\treturn true;\n\t}\n\n\tif (typeof user === 'string') {\n\t\tuser = getUserForCheck(user);\n\t}\n\n\tif (!code && !method && connection?.httpHeaders?.['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n\t\tcode = connection.httpHeaders['x-2fa-code'];\n\t\tmethod = connection.httpHeaders['x-2fa-method'];\n\t}\n\n\tif (connection && isAuthorizedForToken(connection, user, options)) {\n\t\treturn true;\n\t}\n\n\t// select a second factor method or return if none is found/available\n\tconst selectedMethod = getSecondFactorMethod(user, method, options);\n\tif (!selectedMethod) {\n\t\treturn true;\n\t}\n\n\tif (!code) {\n\t\tconst data = selectedMethod.processInvalidCode(user);\n\t\tconst availableMethods = getAvailableMethodNames(user);\n\n\t\tthrow new Meteor.Error('totp-required', 'TOTP Required', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tconst valid = selectedMethod.verify(user, code, options.requireSecondFactor);\n\n\tif (!valid) {\n\t\tthrow new Meteor.Error('totp-invalid', 'TOTP Invalid', { method: selectedMethod.name });\n\t}\n\n\tif (options.disableRememberMe !== true && connection) {\n\t\trememberAuthorization(connection, user);\n\t}\n\n\treturn true;\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/2fa/server/code/index.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/2fa/server/code/index.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  totpCheck: () => totpCheck,\n  emailCheck: () => emailCheck,\n  passwordCheckFallback: () => passwordCheckFallback,\n  checkMethods: () => checkMethods,\n  getMethodByNameOrFirstActiveForUser: () => getMethodByNameOrFirstActiveForUser,\n  getAvailableMethodNames: () => getAvailableMethodNames,\n  getUserForCheck: () => getUserForCheck,\n  getFingerprintFromConnection: () => getFingerprintFromConnection,\n  isAuthorizedForToken: () => isAuthorizedForToken,\n  rememberAuthorization: () => rememberAuthorization,\n  checkCodeForUser: () => checkCodeForUser\n});\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet TOTPCheck;\nmodule.link(\"./TOTPCheck\", {\n  TOTPCheck(v) {\n    TOTPCheck = v;\n  }\n\n}, 4);\nlet EmailCheck;\nmodule.link(\"./EmailCheck\", {\n  EmailCheck(v) {\n    EmailCheck = v;\n  }\n\n}, 5);\nlet PasswordCheckFallback;\nmodule.link(\"./PasswordCheckFallback\", {\n  PasswordCheckFallback(v) {\n    PasswordCheckFallback = v;\n  }\n\n}, 6);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 7);\nconst totpCheck = new TOTPCheck();\nconst emailCheck = new EmailCheck();\nconst passwordCheckFallback = new PasswordCheckFallback();\nconst checkMethods = new Map();\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nfunction getMethodByNameOrFirstActiveForUser(user, name) {\n  if (name && checkMethods.has(name)) {\n    return checkMethods.get(name);\n  }\n\n  return Array.from(checkMethods.values()).find(method => method.isEnabled(user));\n}\n\nfunction getAvailableMethodNames(user) {\n  return Array.from(checkMethods).filter(_ref => {\n    let [, method] = _ref;\n    return method.isEnabled(user);\n  }).map(_ref2 => {\n    let [name] = _ref2;\n    return name;\n  }) || [];\n}\n\nfunction getUserForCheck(userId) {\n  return Users.findOneById(userId, {\n    fields: {\n      'emails': 1,\n      'language': 1,\n      'createdAt': 1,\n      'services.totp': 1,\n      'services.email2fa': 1,\n      'services.emailCode': 1,\n      'services.password': 1,\n      'services.resume.loginTokens': 1\n    }\n  });\n}\n\nfunction getFingerprintFromConnection(connection) {\n  const data = JSON.stringify({\n    userAgent: connection.httpHeaders['user-agent'],\n    clientAddress: connection.clientAddress\n  });\n  return crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate() {\n  let from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  const rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor'), 10);\n\n  if (rememberFor <= 0) {\n    return;\n  }\n\n  const expires = new Date(from);\n  expires.setSeconds(expires.getSeconds() + rememberFor);\n  return expires;\n}\n\nfunction isAuthorizedForToken(connection, user, options) {\n  var _user$services, _user$services$resume, _user$services$resume2;\n\n  const currentToken = Accounts._getLoginToken(connection.id);\n\n  const tokenObject = (_user$services = user.services) === null || _user$services === void 0 ? void 0 : (_user$services$resume = _user$services.resume) === null || _user$services$resume === void 0 ? void 0 : (_user$services$resume2 = _user$services$resume.loginTokens) === null || _user$services$resume2 === void 0 ? void 0 : _user$services$resume2.find(i => i.hashedToken === currentToken);\n\n  if (!tokenObject) {\n    return false;\n  } // if any two factor is required, early abort\n\n\n  if (options.requireSecondFactor) {\n    return false;\n  }\n\n  if (tokenObject.bypassTwoFactor === true) {\n    return true;\n  }\n\n  if (options.disableRememberMe === true) {\n    return false;\n  } // remember user right after their registration\n\n\n  const rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\n  if (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n    return true;\n  }\n\n  if (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n    return false;\n  }\n\n  if (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n    return false;\n  }\n\n  if (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction rememberAuthorization(connection, user) {\n  const currentToken = Accounts._getLoginToken(connection.id);\n\n  const expires = getRememberDate();\n\n  if (!expires) {\n    return;\n  }\n\n  Users.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(user._id, currentToken, getFingerprintFromConnection(connection), expires);\n}\n\nconst getSecondFactorMethod = (user, method, options) => {\n  // try first getting one of the available methods or the one that was already provided\n  const selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\n  if (selectedMethod) {\n    return selectedMethod;\n  } // if none found but a second factor is required, chose the password check\n\n\n  if (options.requireSecondFactor) {\n    return passwordCheckFallback;\n  } // check if password fallback is enabled\n\n\n  if (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n    return passwordCheckFallback;\n  }\n};\n\nfunction checkCodeForUser(_ref3) {\n  var _connection$httpHeade;\n\n  let {\n    user,\n    code,\n    method,\n    options = {},\n    connection\n  } = _ref3;\n\n  if (process.env.TEST_MODE && !options.requireSecondFactor) {\n    return true;\n  }\n\n  if (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n    return true;\n  }\n\n  if (typeof user === 'string') {\n    user = getUserForCheck(user);\n  }\n\n  if (!code && !method && connection !== null && connection !== void 0 && (_connection$httpHeade = connection.httpHeaders) !== null && _connection$httpHeade !== void 0 && _connection$httpHeade['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n    code = connection.httpHeaders['x-2fa-code'];\n    method = connection.httpHeaders['x-2fa-method'];\n  }\n\n  if (connection && isAuthorizedForToken(connection, user, options)) {\n    return true;\n  } // select a second factor method or return if none is found/available\n\n\n  const selectedMethod = getSecondFactorMethod(user, method, options);\n\n  if (!selectedMethod) {\n    return true;\n  }\n\n  if (!code) {\n    const data = selectedMethod.processInvalidCode(user);\n    const availableMethods = getAvailableMethodNames(user);\n    throw new Meteor.Error('totp-required', 'TOTP Required', _objectSpread(_objectSpread({\n      method: selectedMethod.name\n    }, data), {}, {\n      availableMethods\n    }));\n  }\n\n  const valid = selectedMethod.verify(user, code, options.requireSecondFactor);\n\n  if (!valid) {\n    throw new Meteor.Error('totp-invalid', 'TOTP Invalid', {\n      method: selectedMethod.name\n    });\n  }\n\n  if (options.disableRememberMe !== true && connection) {\n    rememberAuthorization(connection, user);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["app/2fa/server/code/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../../settings/server';\nimport { TOTPCheck } from './TOTPCheck';\nimport { EmailCheck } from './EmailCheck';\nimport { PasswordCheckFallback } from './PasswordCheckFallback';\nimport { IUser } from '../../../../definition/IUser';\nimport { ICodeCheck } from './ICodeCheck';\nimport { Users } from '../../../models/server';\nimport { IMethodConnection } from '../../../../definition/IMethodThisType';\n\nexport interface ITwoFactorOptions {\n\tdisablePasswordFallback?: boolean;\n\tdisableRememberMe?: boolean;\n\trequireSecondFactor?: boolean; // whether any two factor should be required\n}\n\nexport const totpCheck = new TOTPCheck();\nexport const emailCheck = new EmailCheck();\nexport const passwordCheckFallback = new PasswordCheckFallback();\n\nexport const checkMethods = new Map<string, ICodeCheck>();\n\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nexport function getMethodByNameOrFirstActiveForUser(user: IUser, name?: string): ICodeCheck | undefined {\n\tif (name && checkMethods.has(name)) {\n\t\treturn checkMethods.get(name);\n\t}\n\n\treturn Array.from(checkMethods.values()).find((method) => method.isEnabled(user));\n}\n\nexport function getAvailableMethodNames(user: IUser): string[] | [] {\n\treturn (\n\t\tArray.from(checkMethods)\n\t\t\t.filter(([, method]) => method.isEnabled(user))\n\t\t\t.map(([name]) => name) || []\n\t);\n}\n\nexport function getUserForCheck(userId: string): IUser {\n\treturn Users.findOneById(userId, {\n\t\tfields: {\n\t\t\t'emails': 1,\n\t\t\t'language': 1,\n\t\t\t'createdAt': 1,\n\t\t\t'services.totp': 1,\n\t\t\t'services.email2fa': 1,\n\t\t\t'services.emailCode': 1,\n\t\t\t'services.password': 1,\n\t\t\t'services.resume.loginTokens': 1,\n\t\t},\n\t});\n}\n\nexport function getFingerprintFromConnection(connection: IMethodConnection): string {\n\tconst data = JSON.stringify({\n\t\tuserAgent: connection.httpHeaders['user-agent'],\n\t\tclientAddress: connection.clientAddress,\n\t});\n\n\treturn crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate(from: Date = new Date()): Date | undefined {\n\tconst rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor') as string, 10);\n\n\tif (rememberFor <= 0) {\n\t\treturn;\n\t}\n\n\tconst expires = new Date(from);\n\texpires.setSeconds(expires.getSeconds() + rememberFor);\n\n\treturn expires;\n}\n\nexport function isAuthorizedForToken(connection: IMethodConnection, user: IUser, options: ITwoFactorOptions): boolean {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\tconst tokenObject = user.services?.resume?.loginTokens?.find((i) => i.hashedToken === currentToken);\n\n\tif (!tokenObject) {\n\t\treturn false;\n\t}\n\n\t// if any two factor is required, early abort\n\tif (options.requireSecondFactor) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.bypassTwoFactor === true) {\n\t\treturn true;\n\t}\n\n\tif (options.disableRememberMe === true) {\n\t\treturn false;\n\t}\n\n\t// remember user right after their registration\n\tconst rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\tif (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n\t\treturn true;\n\t}\n\n\tif (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function rememberAuthorization(connection: IMethodConnection, user: IUser): void {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\n\tconst expires = getRememberDate();\n\tif (!expires) {\n\t\treturn;\n\t}\n\n\tUsers.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(user._id, currentToken, getFingerprintFromConnection(connection), expires);\n}\n\ninterface ICheckCodeForUser {\n\tuser: IUser | string;\n\tcode?: string;\n\tmethod?: string;\n\toptions?: ITwoFactorOptions;\n\tconnection?: IMethodConnection;\n}\n\nconst getSecondFactorMethod = (user: IUser, method: string | undefined, options: ITwoFactorOptions): ICodeCheck | undefined => {\n\t// try first getting one of the available methods or the one that was already provided\n\tconst selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\tif (selectedMethod) {\n\t\treturn selectedMethod;\n\t}\n\n\t// if none found but a second factor is required, chose the password check\n\tif (options.requireSecondFactor) {\n\t\treturn passwordCheckFallback;\n\t}\n\n\t// check if password fallback is enabled\n\tif (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n\t\treturn passwordCheckFallback;\n\t}\n};\n\nexport function checkCodeForUser({ user, code, method, options = {}, connection }: ICheckCodeForUser): boolean {\n\tif (process.env.TEST_MODE && !options.requireSecondFactor) {\n\t\treturn true;\n\t}\n\n\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\treturn true;\n\t}\n\n\tif (typeof user === 'string') {\n\t\tuser = getUserForCheck(user);\n\t}\n\n\tif (!code && !method && connection?.httpHeaders?.['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n\t\tcode = connection.httpHeaders['x-2fa-code'];\n\t\tmethod = connection.httpHeaders['x-2fa-method'];\n\t}\n\n\tif (connection && isAuthorizedForToken(connection, user, options)) {\n\t\treturn true;\n\t}\n\n\t// select a second factor method or return if none is found/available\n\tconst selectedMethod = getSecondFactorMethod(user, method, options);\n\tif (!selectedMethod) {\n\t\treturn true;\n\t}\n\n\tif (!code) {\n\t\tconst data = selectedMethod.processInvalidCode(user);\n\t\tconst availableMethods = getAvailableMethodNames(user);\n\n\t\tthrow new Meteor.Error('totp-required', 'TOTP Required', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tconst valid = selectedMethod.verify(user, code, options.requireSecondFactor);\n\n\tif (!valid) {\n\t\tthrow new Meteor.Error('totp-invalid', 'TOTP Invalid', { method: selectedMethod.name });\n\t}\n\n\tif (options.disableRememberMe !== true && connection) {\n\t\trememberAuthorization(connection, user);\n\t}\n\n\treturn true;\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"82bf88538d8c748552cee31a2d54df737d01b9cb"}
