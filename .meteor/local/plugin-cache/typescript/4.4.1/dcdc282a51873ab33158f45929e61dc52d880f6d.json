{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/methods/uploadFileToWebdav.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/webdav/server/methods/uploadFileToWebdav.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/methods/uploadFileToWebdav.ts","inputSourceMap":{"version":3,"file":"app/webdav/server/methods/uploadFileToWebdav.ts","sourceRoot":"","sources":["app/webdav/server/methods/uploadFileToWebdav.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AAEjE,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC;AAE3C,MAAM,CAAC,OAAO,CAAC;IACd,KAAK,CAAC,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI;QACjD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE;YACrB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE;gBAC5D,MAAM,EAAE,oBAAoB;aAC5B,CAAC,CAAC;SACH;QAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,4BAA4B,CAAC,EAAE;YAChD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,gCAAgC,EAAE;gBAC7E,MAAM,EAAE,oBAAoB;aAC5B,CAAC,CAAC;SACH;QAED,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,EAAE;YACb,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,wBAAwB,EAAE;gBACzE,MAAM,EAAE,oBAAoB;aAC5B,CAAC,CAAC;SACH;QAED,MAAM,YAAY,GAAG,sBAAsB,CAAC;QAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErC,IAAI;YACH,MAAM,IAAI,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAChE,gEAAgE;YAChE,MAAM,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,MAAM,CAAC,eAAe,CAAC,GAAG,YAAY,IAAI,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YACtF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACf,aAAa;YACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEpB,IAAI,KAAK,CAAC,QAAQ,EAAE;gBACnB,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAClC,IAAI,MAAM,KAAK,GAAG,EAAE;oBACnB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;iBAC9D;gBACD,IAAI,MAAM,KAAK,GAAG,EAAE;oBACnB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;iBAC5D;gBACD,IAAI,MAAM,KAAK,GAAG,EAAE;oBACnB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;iBAChE;aACD;YACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;SACvD;IACF,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../settings/server';\nimport { Logger } from '../../../logger/server';\nimport { getWebdavCredentials } from './getWebdavCredentials';\nimport { WebdavAccounts } from '../../../models/server/raw';\nimport { WebdavClientAdapter } from '../lib/webdavClientAdapter';\n\nconst logger = new Logger('WebDAV_Upload');\n\nMeteor.methods({\n\tasync uploadFileToWebdav(accountId, fileData, name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid User', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Webdav_Integration_Enabled')) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'WebDAV Integration Not Allowed', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tconst account = await WebdavAccounts.findOneById(accountId);\n\t\tif (!account) {\n\t\t\tthrow new Meteor.Error('error-invalid-account', 'Invalid WebDAV Account', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tconst uploadFolder = 'Rocket.Chat Uploads/';\n\t\tconst buffer = Buffer.from(fileData);\n\n\t\ttry {\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\tawait client.createDirectory(uploadFolder).catch(() => {});\n\t\t\tawait client.putFileContents(`${uploadFolder}/${name}`, buffer, { overwrite: false });\n\t\t\treturn { success: true };\n\t\t} catch (error) {\n\t\t\t// @ts-ignore\n\t\t\tlogger.error(error);\n\n\t\t\tif (error.response) {\n\t\t\t\tconst { status } = error.response;\n\t\t\t\tif (status === 404) {\n\t\t\t\t\treturn { success: false, message: 'webdav-server-not-found' };\n\t\t\t\t}\n\t\t\t\tif (status === 401) {\n\t\t\t\t\treturn { success: false, message: 'error-invalid-account' };\n\t\t\t\t}\n\t\t\t\tif (status === 412) {\n\t\t\t\t\treturn { success: false, message: 'Duplicate_file_name_found' };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { success: false, message: 'FileUpload_Error' };\n\t\t}\n\t},\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/webdav/server/methods/uploadFileToWebdav.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/webdav/server/methods/uploadFileToWebdav.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.link(\"../../../logger/server\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet getWebdavCredentials;\nmodule.link(\"./getWebdavCredentials\", {\n  getWebdavCredentials(v) {\n    getWebdavCredentials = v;\n  }\n\n}, 3);\nlet WebdavAccounts;\nmodule.link(\"../../../models/server/raw\", {\n  WebdavAccounts(v) {\n    WebdavAccounts = v;\n  }\n\n}, 4);\nlet WebdavClientAdapter;\nmodule.link(\"../lib/webdavClientAdapter\", {\n  WebdavClientAdapter(v) {\n    WebdavClientAdapter = v;\n  }\n\n}, 5);\nconst logger = new Logger('WebDAV_Upload');\nMeteor.methods({\n  uploadFileToWebdav(accountId, fileData, name) {\n    return Promise.asyncApply(() => {\n      if (!Meteor.userId()) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid User', {\n          method: 'uploadFileToWebdav'\n        });\n      }\n\n      if (!settings.get('Webdav_Integration_Enabled')) {\n        throw new Meteor.Error('error-not-allowed', 'WebDAV Integration Not Allowed', {\n          method: 'uploadFileToWebdav'\n        });\n      }\n\n      const account = Promise.await(WebdavAccounts.findOneById(accountId));\n\n      if (!account) {\n        throw new Meteor.Error('error-invalid-account', 'Invalid WebDAV Account', {\n          method: 'uploadFileToWebdav'\n        });\n      }\n\n      const uploadFolder = 'Rocket.Chat Uploads/';\n      const buffer = Buffer.from(fileData);\n\n      try {\n        const cred = getWebdavCredentials(account);\n        const client = new WebdavClientAdapter(account.serverURL, cred); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n        Promise.await(client.createDirectory(uploadFolder).catch(() => {}));\n        Promise.await(client.putFileContents(\"\".concat(uploadFolder, \"/\").concat(name), buffer, {\n          overwrite: false\n        }));\n        return {\n          success: true\n        };\n      } catch (error) {\n        // @ts-ignore\n        logger.error(error);\n\n        if (error.response) {\n          const {\n            status\n          } = error.response;\n\n          if (status === 404) {\n            return {\n              success: false,\n              message: 'webdav-server-not-found'\n            };\n          }\n\n          if (status === 401) {\n            return {\n              success: false,\n              message: 'error-invalid-account'\n            };\n          }\n\n          if (status === 412) {\n            return {\n              success: false,\n              message: 'Duplicate_file_name_found'\n            };\n          }\n        }\n\n        return {\n          success: false,\n          message: 'FileUpload_Error'\n        };\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["app/webdav/server/methods/uploadFileToWebdav.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../settings/server';\nimport { Logger } from '../../../logger/server';\nimport { getWebdavCredentials } from './getWebdavCredentials';\nimport { WebdavAccounts } from '../../../models/server/raw';\nimport { WebdavClientAdapter } from '../lib/webdavClientAdapter';\n\nconst logger = new Logger('WebDAV_Upload');\n\nMeteor.methods({\n\tasync uploadFileToWebdav(accountId, fileData, name) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid User', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Webdav_Integration_Enabled')) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'WebDAV Integration Not Allowed', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tconst account = await WebdavAccounts.findOneById(accountId);\n\t\tif (!account) {\n\t\t\tthrow new Meteor.Error('error-invalid-account', 'Invalid WebDAV Account', {\n\t\t\t\tmethod: 'uploadFileToWebdav',\n\t\t\t});\n\t\t}\n\n\t\tconst uploadFolder = 'Rocket.Chat Uploads/';\n\t\tconst buffer = Buffer.from(fileData);\n\n\t\ttry {\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\t\tawait client.createDirectory(uploadFolder).catch(() => {});\n\t\t\tawait client.putFileContents(`${uploadFolder}/${name}`, buffer, { overwrite: false });\n\t\t\treturn { success: true };\n\t\t} catch (error) {\n\t\t\t// @ts-ignore\n\t\t\tlogger.error(error);\n\n\t\t\tif (error.response) {\n\t\t\t\tconst { status } = error.response;\n\t\t\t\tif (status === 404) {\n\t\t\t\t\treturn { success: false, message: 'webdav-server-not-found' };\n\t\t\t\t}\n\t\t\t\tif (status === 401) {\n\t\t\t\t\treturn { success: false, message: 'error-invalid-account' };\n\t\t\t\t}\n\t\t\t\tif (status === 412) {\n\t\t\t\t\treturn { success: false, message: 'Duplicate_file_name_found' };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { success: false, message: 'FileUpload_Error' };\n\t\t}\n\t},\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"dcdc282a51873ab33158f45929e61dc52d880f6d"}
