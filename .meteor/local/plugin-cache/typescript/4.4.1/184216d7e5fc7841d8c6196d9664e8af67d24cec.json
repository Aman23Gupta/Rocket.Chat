{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/cloud/server/functions/getConfirmationPoll.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/cloud/server/functions/getConfirmationPoll.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/cloud/server/functions/getConfirmationPoll.ts","inputSourceMap":{"version":3,"file":"app/cloud/server/functions/getConfirmationPoll.ts","sourceRoot":"","sources":["app/cloud/server/functions/getConfirmationPoll.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAEnC,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAC;AAGpE,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,UAAkB;IAC3D,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAE3C,IAAI,MAAM,CAAC;IACX,IAAI;QACH,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,yCAAyC,UAAU,EAAE,CAAC,CAAC;KACpF;IAAC,OAAO,CAAC,EAAE;QACX,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YAC3D,YAAY,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SACrG;aAAM;YACN,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACtB;QAED,MAAM,CAAC,CAAC;KACR;IAED,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;IAExB,IAAI,CAAC,IAAI,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC1E;IAED,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import { HTTP } from 'meteor/http';\n\nimport { settings } from '../../../settings/server';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { CloudConfirmationPollData } from '../../../../definition/ICloud';\n\nexport async function getConfirmationPoll(deviceCode: string): Promise<CloudConfirmationPollData> {\n\tconst cloudUrl = settings.get('Cloud_Url');\n\n\tlet result;\n\ttry {\n\t\tresult = HTTP.get(`${cloudUrl}/api/v2/register/workspace/poll?token=${deviceCode}`);\n\t} catch (e) {\n\t\tif (e.response && e.response.data && e.response.data.error) {\n\t\t\tSystemLogger.error(`Failed to register with Rocket.Chat Cloud. ErrorCode: ${e.response.data.error}`);\n\t\t} else {\n\t\t\tSystemLogger.error(e);\n\t\t}\n\n\t\tthrow e;\n\t}\n\n\tconst { data } = result;\n\n\tif (!data) {\n\t\tthrow new Error('Failed to retrieve registration confirmation poll data');\n\t}\n\n\treturn data;\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/cloud/server/functions/getConfirmationPoll.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/cloud/server/functions/getConfirmationPoll.ts"}},"code":"module.export({\n  getConfirmationPoll: () => getConfirmationPoll\n});\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 2);\n\nfunction getConfirmationPoll(deviceCode) {\n  return Promise.asyncApply(() => {\n    const cloudUrl = settings.get('Cloud_Url');\n    let result;\n\n    try {\n      result = HTTP.get(\"\".concat(cloudUrl, \"/api/v2/register/workspace/poll?token=\").concat(deviceCode));\n    } catch (e) {\n      if (e.response && e.response.data && e.response.data.error) {\n        SystemLogger.error(\"Failed to register with Rocket.Chat Cloud. ErrorCode: \".concat(e.response.data.error));\n      } else {\n        SystemLogger.error(e);\n      }\n\n      throw e;\n    }\n\n    const {\n      data\n    } = result;\n\n    if (!data) {\n      throw new Error('Failed to retrieve registration confirmation poll data');\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["app/cloud/server/functions/getConfirmationPoll.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAa;AAAE,EAAA,mBAAmB,EAAC,MAAA;AAAtB,CAAb;AAAmC,IAAA,IAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,IAAA,CAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,0BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,YAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sCAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAM5B,SAAe,mBAAf,CAAmC,UAAnC;AAAA,kCAAqD;AAC3D,UAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,WAAb,CAAjB;AAEA,QAAI,MAAJ;;AACA,QAAI;AACH,MAAA,MAAM,GAAG,IAAI,CAAC,GAAL,WAAY,QAAZ,mDAA6D,UAA7D,EAAT;AACA,KAFD,CAEE,OAAO,CAAP,EAAU;AACX,UAAI,CAAC,CAAC,QAAF,IAAc,CAAC,CAAC,QAAF,CAAW,IAAzB,IAAiC,CAAC,CAAC,QAAF,CAAW,IAAX,CAAgB,KAArD,EAA4D;AAC3D,QAAA,YAAY,CAAC,KAAb,iEAA4E,CAAC,CAAC,QAAF,CAAW,IAAX,CAAgB,KAA5F;AACA,OAFD,MAEO;AACN,QAAA,YAAY,CAAC,KAAb,CAAmB,CAAnB;AACA;;AAED,YAAM,CAAN;AACA;;AAED,UAAM;AAAE,MAAA;AAAF,QAAW,MAAjB;;AAEA,QAAI,CAAC,IAAL,EAAW;AACV,YAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACA;;AAED,WAAO,IAAP;AACA,GAvBM;AAAA","sourcesContent":["import { HTTP } from 'meteor/http';\n\nimport { settings } from '../../../settings/server';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { CloudConfirmationPollData } from '../../../../definition/ICloud';\n\nexport async function getConfirmationPoll(deviceCode: string): Promise<CloudConfirmationPollData> {\n\tconst cloudUrl = settings.get('Cloud_Url');\n\n\tlet result;\n\ttry {\n\t\tresult = HTTP.get(`${cloudUrl}/api/v2/register/workspace/poll?token=${deviceCode}`);\n\t} catch (e) {\n\t\tif (e.response && e.response.data && e.response.data.error) {\n\t\t\tSystemLogger.error(`Failed to register with Rocket.Chat Cloud. ErrorCode: ${e.response.data.error}`);\n\t\t} else {\n\t\t\tSystemLogger.error(e);\n\t\t}\n\n\t\tthrow e;\n\t}\n\n\tconst { data } = result;\n\n\tif (!data) {\n\t\tthrow new Error('Failed to retrieve registration confirmation poll data');\n\t}\n\n\treturn data;\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"184216d7e5fc7841d8c6196d9664e8af67d24cec"}
