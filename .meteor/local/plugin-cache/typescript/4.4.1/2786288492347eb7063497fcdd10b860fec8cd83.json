{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/VirtualDataConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/VirtualDataConverter.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/VirtualDataConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/VirtualDataConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/VirtualDataConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\n\nimport type {\n\tIImportUserRecord,\n\tIImportChannelRecord,\n\tIImportMessageRecord,\n\tIImportRecord,\n\tIImportRecordType,\n\tIImportData,\n} from '../../../../definition/IImportRecord';\nimport { IImportChannel } from '../../../../definition/IImportChannel';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport type { IConverterOptions } from './ImportDataConverter';\n\nexport class VirtualDataConverter extends ImportDataConverter {\n\tprotected _userRecords: Array<IImportUserRecord>;\n\n\tprotected _channelRecords: Array<IImportChannelRecord>;\n\n\tprotected _messageRecords: Array<IImportMessageRecord>;\n\n\tprotected useVirtual: boolean;\n\n\tconstructor(virtual = true, options?: IConverterOptions) {\n\t\tsuper(options);\n\n\t\tthis.useVirtual = virtual;\n\t\tif (virtual) {\n\t\t\tthis.clearVirtualData();\n\t\t}\n\t}\n\n\tpublic clearImportData(): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.clearImportData();\n\t\t}\n\n\t\tthis.clearVirtualData();\n\t}\n\n\tpublic clearSuccessfullyImportedData(): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.clearSuccessfullyImportedData();\n\t\t}\n\n\t\tthis.clearVirtualData();\n\t}\n\n\tpublic findDMForImportedUsers(...users: Array<string>): IImportChannel | undefined {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.findDMForImportedUsers(...users);\n\t\t}\n\n\t\t// The original method is only used by the hipchat importer so we probably don't need to implement this on the virtual converter.\n\t\treturn undefined;\n\t}\n\n\tprotected addObject(type: IImportRecordType, data: IImportData, options: Record<string, any> = {}): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.addObject(type, data, options);\n\t\t}\n\n\t\tconst list = this.getObjectList(type);\n\n\t\tlist.push({\n\t\t\t_id: Random.id(),\n\t\t\tdata,\n\t\t\tdataType: type,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tprotected async getUsersToImport(): Promise<Array<IImportUserRecord>> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getUsersToImport();\n\t\t}\n\n\t\treturn this._userRecords;\n\t}\n\n\tprotected saveError(importId: string, error: Error): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.saveError(importId, error);\n\t\t}\n\n\t\tconst record = this.getVirtualRecordById(importId);\n\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!record.errors) {\n\t\t\trecord.errors = [];\n\t\t}\n\n\t\trecord.errors.push({\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack,\n\t\t});\n\t}\n\n\tprotected skipRecord(_id: string): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.skipRecord(_id);\n\t\t}\n\n\t\tconst record = this.getVirtualRecordById(_id);\n\n\t\tif (record) {\n\t\t\trecord.skipped = true;\n\t\t}\n\t}\n\n\tprotected async getMessagesToImport(): Promise<IImportMessageRecord[]> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getMessagesToImport();\n\t\t}\n\n\t\treturn this._messageRecords;\n\t}\n\n\tprotected async getChannelsToImport(): Promise<IImportChannelRecord[]> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getChannelsToImport();\n\t\t}\n\n\t\treturn this._channelRecords;\n\t}\n\n\tprivate clearVirtualData(): void {\n\t\tthis._userRecords = [];\n\t\tthis._channelRecords = [];\n\t\tthis._messageRecords = [];\n\t}\n\n\tprivate getObjectList(type: IImportRecordType): Array<IImportRecord> {\n\t\tswitch (type) {\n\t\t\tcase 'user':\n\t\t\t\treturn this._userRecords;\n\t\t\tcase 'channel':\n\t\t\t\treturn this._channelRecords;\n\t\t\tcase 'message':\n\t\t\t\treturn this._messageRecords;\n\t\t}\n\t}\n\n\tprivate getVirtualRecordById(id: string): IImportRecord | undefined {\n\t\tfor (const store of [this._userRecords, this._channelRecords, this._messageRecords]) {\n\t\t\tfor (const record of store) {\n\t\t\t\tif (record._id === id) {\n\t\t\t\t\treturn record;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/VirtualDataConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/VirtualDataConverter.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  VirtualDataConverter: () => VirtualDataConverter\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet ImportDataConverter;\nmodule.link(\"./ImportDataConverter\", {\n  ImportDataConverter(v) {\n    ImportDataConverter = v;\n  }\n\n}, 1);\n\nclass VirtualDataConverter extends ImportDataConverter {\n  constructor() {\n    let virtual = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    super(options);\n    this._userRecords = void 0;\n    this._channelRecords = void 0;\n    this._messageRecords = void 0;\n    this.useVirtual = void 0;\n    this.useVirtual = virtual;\n\n    if (virtual) {\n      this.clearVirtualData();\n    }\n  }\n\n  clearImportData() {\n    if (!this.useVirtual) {\n      return super.clearImportData();\n    }\n\n    this.clearVirtualData();\n  }\n\n  clearSuccessfullyImportedData() {\n    if (!this.useVirtual) {\n      return super.clearSuccessfullyImportedData();\n    }\n\n    this.clearVirtualData();\n  }\n\n  findDMForImportedUsers() {\n    if (!this.useVirtual) {\n      return super.findDMForImportedUsers(...arguments);\n    } // The original method is only used by the hipchat importer so we probably don't need to implement this on the virtual converter.\n\n\n    return undefined;\n  }\n\n  addObject(type, data) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!this.useVirtual) {\n      return super.addObject(type, data, options);\n    }\n\n    const list = this.getObjectList(type);\n    list.push(_objectSpread({\n      _id: Random.id(),\n      data,\n      dataType: type\n    }, options));\n  }\n\n  getUsersToImport() {\n    return Promise.asyncApply(() => {\n      if (!this.useVirtual) {\n        return super.getUsersToImport();\n      }\n\n      return this._userRecords;\n    });\n  }\n\n  saveError(importId, error) {\n    if (!this.useVirtual) {\n      return super.saveError(importId, error);\n    }\n\n    const record = this.getVirtualRecordById(importId);\n\n    if (!record) {\n      return;\n    }\n\n    if (!record.errors) {\n      record.errors = [];\n    }\n\n    record.errors.push({\n      message: error.message,\n      stack: error.stack\n    });\n  }\n\n  skipRecord(_id) {\n    if (!this.useVirtual) {\n      return super.skipRecord(_id);\n    }\n\n    const record = this.getVirtualRecordById(_id);\n\n    if (record) {\n      record.skipped = true;\n    }\n  }\n\n  getMessagesToImport() {\n    return Promise.asyncApply(() => {\n      if (!this.useVirtual) {\n        return super.getMessagesToImport();\n      }\n\n      return this._messageRecords;\n    });\n  }\n\n  getChannelsToImport() {\n    return Promise.asyncApply(() => {\n      if (!this.useVirtual) {\n        return super.getChannelsToImport();\n      }\n\n      return this._channelRecords;\n    });\n  }\n\n  clearVirtualData() {\n    this._userRecords = [];\n    this._channelRecords = [];\n    this._messageRecords = [];\n  }\n\n  getObjectList(type) {\n    switch (type) {\n      case 'user':\n        return this._userRecords;\n\n      case 'channel':\n        return this._channelRecords;\n\n      case 'message':\n        return this._messageRecords;\n    }\n  }\n\n  getVirtualRecordById(id) {\n    for (const store of [this._userRecords, this._channelRecords, this._messageRecords]) {\n      for (const record of store) {\n        if (record._id === id) {\n          return record;\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["app/importer/server/classes/VirtualDataConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\n\nimport type {\n\tIImportUserRecord,\n\tIImportChannelRecord,\n\tIImportMessageRecord,\n\tIImportRecord,\n\tIImportRecordType,\n\tIImportData,\n} from '../../../../definition/IImportRecord';\nimport { IImportChannel } from '../../../../definition/IImportChannel';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport type { IConverterOptions } from './ImportDataConverter';\n\nexport class VirtualDataConverter extends ImportDataConverter {\n\tprotected _userRecords: Array<IImportUserRecord>;\n\n\tprotected _channelRecords: Array<IImportChannelRecord>;\n\n\tprotected _messageRecords: Array<IImportMessageRecord>;\n\n\tprotected useVirtual: boolean;\n\n\tconstructor(virtual = true, options?: IConverterOptions) {\n\t\tsuper(options);\n\n\t\tthis.useVirtual = virtual;\n\t\tif (virtual) {\n\t\t\tthis.clearVirtualData();\n\t\t}\n\t}\n\n\tpublic clearImportData(): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.clearImportData();\n\t\t}\n\n\t\tthis.clearVirtualData();\n\t}\n\n\tpublic clearSuccessfullyImportedData(): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.clearSuccessfullyImportedData();\n\t\t}\n\n\t\tthis.clearVirtualData();\n\t}\n\n\tpublic findDMForImportedUsers(...users: Array<string>): IImportChannel | undefined {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.findDMForImportedUsers(...users);\n\t\t}\n\n\t\t// The original method is only used by the hipchat importer so we probably don't need to implement this on the virtual converter.\n\t\treturn undefined;\n\t}\n\n\tprotected addObject(type: IImportRecordType, data: IImportData, options: Record<string, any> = {}): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.addObject(type, data, options);\n\t\t}\n\n\t\tconst list = this.getObjectList(type);\n\n\t\tlist.push({\n\t\t\t_id: Random.id(),\n\t\t\tdata,\n\t\t\tdataType: type,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tprotected async getUsersToImport(): Promise<Array<IImportUserRecord>> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getUsersToImport();\n\t\t}\n\n\t\treturn this._userRecords;\n\t}\n\n\tprotected saveError(importId: string, error: Error): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.saveError(importId, error);\n\t\t}\n\n\t\tconst record = this.getVirtualRecordById(importId);\n\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!record.errors) {\n\t\t\trecord.errors = [];\n\t\t}\n\n\t\trecord.errors.push({\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack,\n\t\t});\n\t}\n\n\tprotected skipRecord(_id: string): void {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.skipRecord(_id);\n\t\t}\n\n\t\tconst record = this.getVirtualRecordById(_id);\n\n\t\tif (record) {\n\t\t\trecord.skipped = true;\n\t\t}\n\t}\n\n\tprotected async getMessagesToImport(): Promise<IImportMessageRecord[]> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getMessagesToImport();\n\t\t}\n\n\t\treturn this._messageRecords;\n\t}\n\n\tprotected async getChannelsToImport(): Promise<IImportChannelRecord[]> {\n\t\tif (!this.useVirtual) {\n\t\t\treturn super.getChannelsToImport();\n\t\t}\n\n\t\treturn this._channelRecords;\n\t}\n\n\tprivate clearVirtualData(): void {\n\t\tthis._userRecords = [];\n\t\tthis._channelRecords = [];\n\t\tthis._messageRecords = [];\n\t}\n\n\tprivate getObjectList(type: IImportRecordType): Array<IImportRecord> {\n\t\tswitch (type) {\n\t\t\tcase 'user':\n\t\t\t\treturn this._userRecords;\n\t\t\tcase 'channel':\n\t\t\t\treturn this._channelRecords;\n\t\t\tcase 'message':\n\t\t\t\treturn this._messageRecords;\n\t\t}\n\t}\n\n\tprivate getVirtualRecordById(id: string): IImportRecord | undefined {\n\t\tfor (const store of [this._userRecords, this._channelRecords, this._messageRecords]) {\n\t\t\tfor (const record of store) {\n\t\t\t\tif (record._id === id) {\n\t\t\t\t\treturn record;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"2786288492347eb7063497fcdd10b860fec8cd83"}
