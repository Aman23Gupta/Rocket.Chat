{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox_Incoming.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/features/EmailInbox/EmailInbox_Incoming.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox_Incoming.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox_Incoming.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox_Incoming.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport stripHtml from 'string-strip-html';\nimport { Random } from 'meteor/random';\nimport { ParsedMail, Attachment } from 'mailparser';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { Livechat } from '../../../app/livechat/server/lib/Livechat';\nimport { LivechatRooms, LivechatVisitors, Messages } from '../../../app/models/server';\nimport { FileUpload } from '../../../app/file-upload/server';\nimport { QueueManager } from '../../../app/livechat/server/lib/QueueManager';\nimport { settings } from '../../../app/settings/server';\nimport { logger } from './logger';\nimport { OmnichannelSourceType } from '../../../definition/IRoom';\n\ntype FileAttachment = {\n\ttitle: string;\n\ttitle_link: string;\n\timage_url?: string;\n\timage_type?: string;\n\timage_size?: string;\n\timage_dimensions?: string;\n\taudio_url?: string;\n\taudio_type?: string;\n\taudio_size?: string;\n\tvideo_url?: string;\n\tvideo_type?: string;\n\tvideo_size?: string;\n};\n\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\nfunction getGuestByEmail(email: string, name: string, department = ''): any {\n\tlogger.debug(`Attempt to register a guest for ${email} on department: ${department}`);\n\tconst guest = LivechatVisitors.findOneGuestByEmailAddress(email);\n\n\tif (guest) {\n\t\tlogger.debug(`Guest with email ${email} found with id ${guest._id}`);\n\t\tif (guest.department !== department) {\n\t\t\tlogger.debug({\n\t\t\t\tmsg: 'Switching departments for guest',\n\t\t\t\tguest,\n\t\t\t\tpreviousDepartment: guest.department,\n\t\t\t\tnewDepartment: department,\n\t\t\t});\n\t\t\tif (!department) {\n\t\t\t\tLivechatVisitors.removeDepartmentById(guest._id);\n\t\t\t\tdelete guest.department;\n\t\t\t\treturn guest;\n\t\t\t}\n\t\t\tLivechat.setDepartmentForGuest({ token: guest.token, department });\n\t\t\treturn LivechatVisitors.findOneById(guest._id, {});\n\t\t}\n\t\treturn guest;\n\t}\n\n\tlogger.debug({\n\t\tmsg: 'Creating a new Omnichannel guest for visitor with email',\n\t\temail,\n\t});\n\tconst userId = Livechat.registerGuest({\n\t\ttoken: Random.id(),\n\t\tname: name || email,\n\t\temail,\n\t\tdepartment,\n\t\tphone: undefined,\n\t\tusername: undefined,\n\t\tconnectionData: undefined,\n\t\tid: undefined,\n\t});\n\n\tconst newGuest = LivechatVisitors.findOneById(userId, {});\n\tlogger.debug(`Guest ${userId} for visitor ${email} created`);\n\tif (newGuest) {\n\t\treturn newGuest;\n\t}\n\n\tthrow new Error('Error getting guest');\n}\n\nasync function uploadAttachment(attachment: Attachment, rid: string, visitorToken: string): Promise<FileAttachment> {\n\tconst details = {\n\t\tname: attachment.filename,\n\t\tsize: attachment.size,\n\t\ttype: attachment.contentType,\n\t\trid,\n\t\tvisitorToken,\n\t};\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\treturn new Promise((resolve, reject) => {\n\t\tfileStore.insert(details, attachment.content, function (err: any, file: any) {\n\t\t\tif (err) {\n\t\t\t\treject(new Error(err));\n\t\t\t}\n\n\t\t\tconst url = FileUpload.getPath(`${file._id}/${encodeURI(file.name)}`);\n\n\t\t\tconst attachment: FileAttachment = {\n\t\t\t\ttitle: file.name,\n\t\t\t\ttitle_link: url,\n\t\t\t};\n\n\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\tattachment.image_url = url;\n\t\t\t\tattachment.image_type = file.type;\n\t\t\t\tattachment.image_size = file.size;\n\t\t\t\tattachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n\t\t\t}\n\n\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\tattachment.audio_url = url;\n\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\tattachment.audio_size = file.size;\n\t\t\t}\n\n\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\tattachment.video_url = url;\n\t\t\t\tattachment.video_type = file.type;\n\t\t\t\tattachment.video_size = file.size;\n\t\t\t}\n\n\t\t\tresolve(attachment);\n\t\t});\n\t});\n}\n\nexport async function onEmailReceived(email: ParsedMail, inbox: string, department = ''): Promise<void> {\n\tlogger.debug(`New email conversation received on inbox ${inbox}. Will be assigned to department ${department}`);\n\tif (!email.from?.value?.[0]?.address) {\n\t\treturn;\n\t}\n\n\tconst references = typeof email.references === 'string' ? [email.references] : email.references;\n\n\tconst thread = references?.[0] ?? email.messageId;\n\n\tlogger.debug(`Fetching guest for visitor ${email.from.value[0].address}`);\n\tconst guest = getGuestByEmail(email.from.value[0].address, email.from.value[0].name, department);\n\n\tlogger.debug(`Guest ${guest._id} obtained. Attempting to find or create a room on department ${department}`);\n\n\tlet room = LivechatRooms.findOneByVisitorTokenAndEmailThreadAndDepartment(guest.token, thread, department, {});\n\n\tlogger.debug({\n\t\tmsg: 'Room found for guest',\n\t\troom,\n\t\tguest,\n\t});\n\n\tif (room?.closedAt) {\n\t\tlogger.debug(`Room ${room?._id} is closed. Reopening`);\n\t\troom = await QueueManager.unarchiveRoom(room);\n\t}\n\n\tlet msg = email.text;\n\n\tif (email.html) {\n\t\t// Try to remove the signature and history\n\t\tmsg = stripHtml(email.html.replace(/<div name=\"messageSignatureSection.+/s, '')).result;\n\t}\n\n\tconst rid = room?._id ?? Random.id();\n\tconst msgId = Random.id();\n\n\tlogger.debug(`Sending email message to room ${rid} for visitor ${guest._id}. Conversation assigned to department ${department}`);\n\tLivechat.sendMessage({\n\t\tguest,\n\t\tmessage: {\n\t\t\t_id: msgId,\n\t\t\tgroupable: false,\n\t\t\tmsg,\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\ttext: t('Reply_via_Email'),\n\t\t\t\t\t\t\tmsg: 'msg',\n\t\t\t\t\t\t\tmsgId,\n\t\t\t\t\t\t\tmsg_in_chat_window: true,\n\t\t\t\t\t\t\tmsg_processing_type: 'respondWithQuotedMessage',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\tblocks: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'context',\n\t\t\t\t\telements: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\t\ttext: `**${t('From')}:** ${email.from.text}\\n**${t('Subject')}:** ${email.subject}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'section',\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: msg,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\trid,\n\t\t\temail: {\n\t\t\t\treferences,\n\t\t\t\tmessageId: email.messageId,\n\t\t\t},\n\t\t},\n\t\troomInfo: {\n\t\t\temail: {\n\t\t\t\tinbox,\n\t\t\t\tthread,\n\t\t\t\treplyTo: email.from.value[0].address,\n\t\t\t\tsubject: email.subject,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.EMAIL,\n\t\t\t\tid: inbox,\n\t\t\t\talias: 'email-inbox',\n\t\t\t},\n\t\t},\n\t\tagent: undefined,\n\t})\n\t\t.then(async () => {\n\t\t\tif (!email.attachments.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst attachments = [];\n\t\t\tfor await (const attachment of email.attachments) {\n\t\t\t\tif (attachment.type !== 'attachment') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tattachments.push(await uploadAttachment(attachment, rid, guest.token));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tLivechat.logger.error('Error uploading attachment from email', e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMessages.update(\n\t\t\t\t{ _id: msgId },\n\t\t\t\t{\n\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\tattachments: {\n\t\t\t\t\t\t\t$each: attachments,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t})\n\t\t.catch((err) => {\n\t\t\tLivechat.logger.error({\n\t\t\t\tmsg: 'Error receiving email',\n\t\t\t\terr,\n\t\t\t});\n\t\t});\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/features/EmailInbox/EmailInbox_Incoming.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/features/EmailInbox/EmailInbox_Incoming.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  onEmailReceived: () => onEmailReceived\n});\nlet stripHtml;\nmodule.link(\"string-strip-html\", {\n  default(v) {\n    stripHtml = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 2);\nlet Livechat;\nmodule.link(\"../../../app/livechat/server/lib/Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 3);\nlet LivechatRooms, LivechatVisitors, Messages;\nmodule.link(\"../../../app/models/server\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 4);\nlet FileUpload;\nmodule.link(\"../../../app/file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 5);\nlet QueueManager;\nmodule.link(\"../../../app/livechat/server/lib/QueueManager\", {\n  QueueManager(v) {\n    QueueManager = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 8);\nlet OmnichannelSourceType;\nmodule.link(\"../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 9);\nconst language = settings.get('Language') || 'en';\n\nconst t = s => TAPi18n.__(s, {\n  lng: language\n});\n\nfunction getGuestByEmail(email, name) {\n  let department = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  logger.debug(\"Attempt to register a guest for \".concat(email, \" on department: \").concat(department));\n  const guest = LivechatVisitors.findOneGuestByEmailAddress(email);\n\n  if (guest) {\n    logger.debug(\"Guest with email \".concat(email, \" found with id \").concat(guest._id));\n\n    if (guest.department !== department) {\n      logger.debug({\n        msg: 'Switching departments for guest',\n        guest,\n        previousDepartment: guest.department,\n        newDepartment: department\n      });\n\n      if (!department) {\n        LivechatVisitors.removeDepartmentById(guest._id);\n        delete guest.department;\n        return guest;\n      }\n\n      Livechat.setDepartmentForGuest({\n        token: guest.token,\n        department\n      });\n      return LivechatVisitors.findOneById(guest._id, {});\n    }\n\n    return guest;\n  }\n\n  logger.debug({\n    msg: 'Creating a new Omnichannel guest for visitor with email',\n    email\n  });\n  const userId = Livechat.registerGuest({\n    token: Random.id(),\n    name: name || email,\n    email,\n    department,\n    phone: undefined,\n    username: undefined,\n    connectionData: undefined,\n    id: undefined\n  });\n  const newGuest = LivechatVisitors.findOneById(userId, {});\n  logger.debug(\"Guest \".concat(userId, \" for visitor \").concat(email, \" created\"));\n\n  if (newGuest) {\n    return newGuest;\n  }\n\n  throw new Error('Error getting guest');\n}\n\nfunction uploadAttachment(attachment, rid, visitorToken) {\n  return Promise.asyncApply(() => {\n    const details = {\n      name: attachment.filename,\n      size: attachment.size,\n      type: attachment.contentType,\n      rid,\n      visitorToken\n    };\n    const fileStore = FileUpload.getStore('Uploads');\n    return new Promise((resolve, reject) => {\n      fileStore.insert(details, attachment.content, function (err, file) {\n        if (err) {\n          reject(new Error(err));\n        }\n\n        const url = FileUpload.getPath(\"\".concat(file._id, \"/\").concat(encodeURI(file.name)));\n        const attachment = {\n          title: file.name,\n          title_link: url\n        };\n\n        if (/^image\\/.+/.test(file.type)) {\n          attachment.image_url = url;\n          attachment.image_type = file.type;\n          attachment.image_size = file.size;\n          attachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n        }\n\n        if (/^audio\\/.+/.test(file.type)) {\n          attachment.audio_url = url;\n          attachment.audio_type = file.type;\n          attachment.audio_size = file.size;\n        }\n\n        if (/^video\\/.+/.test(file.type)) {\n          attachment.video_url = url;\n          attachment.video_type = file.type;\n          attachment.video_size = file.size;\n        }\n\n        resolve(attachment);\n      });\n    });\n  });\n}\n\nfunction onEmailReceived(email, inbox) {\n  return Promise.asyncApply(() => {\n    var _email$from, _email$from$value, _email$from$value$, _references$, _room, _room$_id, _room3;\n\n    let department = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    logger.debug(\"New email conversation received on inbox \".concat(inbox, \". Will be assigned to department \").concat(department));\n\n    if (!((_email$from = email.from) !== null && _email$from !== void 0 && (_email$from$value = _email$from.value) !== null && _email$from$value !== void 0 && (_email$from$value$ = _email$from$value[0]) !== null && _email$from$value$ !== void 0 && _email$from$value$.address)) {\n      return;\n    }\n\n    const references = typeof email.references === 'string' ? [email.references] : email.references;\n    const thread = (_references$ = references === null || references === void 0 ? void 0 : references[0]) !== null && _references$ !== void 0 ? _references$ : email.messageId;\n    logger.debug(\"Fetching guest for visitor \".concat(email.from.value[0].address));\n    const guest = getGuestByEmail(email.from.value[0].address, email.from.value[0].name, department);\n    logger.debug(\"Guest \".concat(guest._id, \" obtained. Attempting to find or create a room on department \").concat(department));\n    let room = LivechatRooms.findOneByVisitorTokenAndEmailThreadAndDepartment(guest.token, thread, department, {});\n    logger.debug({\n      msg: 'Room found for guest',\n      room,\n      guest\n    });\n\n    if ((_room = room) !== null && _room !== void 0 && _room.closedAt) {\n      var _room2;\n\n      logger.debug(\"Room \".concat((_room2 = room) === null || _room2 === void 0 ? void 0 : _room2._id, \" is closed. Reopening\"));\n      room = Promise.await(QueueManager.unarchiveRoom(room));\n    }\n\n    let msg = email.text;\n\n    if (email.html) {\n      // Try to remove the signature and history\n      msg = stripHtml(email.html.replace(/<div name=\"messageSignatureSection.+/s, '')).result;\n    }\n\n    const rid = (_room$_id = (_room3 = room) === null || _room3 === void 0 ? void 0 : _room3._id) !== null && _room$_id !== void 0 ? _room$_id : Random.id();\n    const msgId = Random.id();\n    logger.debug(\"Sending email message to room \".concat(rid, \" for visitor \").concat(guest._id, \". Conversation assigned to department \").concat(department));\n    Livechat.sendMessage({\n      guest,\n      message: {\n        _id: msgId,\n        groupable: false,\n        msg,\n        attachments: [{\n          actions: [{\n            type: 'button',\n            text: t('Reply_via_Email'),\n            msg: 'msg',\n            msgId,\n            msg_in_chat_window: true,\n            msg_processing_type: 'respondWithQuotedMessage'\n          }]\n        }],\n        blocks: [{\n          type: 'context',\n          elements: [{\n            type: 'mrkdwn',\n            text: \"**\".concat(t('From'), \":** \").concat(email.from.text, \"\\n**\").concat(t('Subject'), \":** \").concat(email.subject)\n          }]\n        }, {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: msg\n          }\n        }],\n        rid,\n        email: {\n          references,\n          messageId: email.messageId\n        }\n      },\n      roomInfo: {\n        email: {\n          inbox,\n          thread,\n          replyTo: email.from.value[0].address,\n          subject: email.subject\n        },\n        source: {\n          type: OmnichannelSourceType.EMAIL,\n          id: inbox,\n          alias: 'email-inbox'\n        }\n      },\n      agent: undefined\n    }).then(() => Promise.asyncApply(() => {\n      if (!email.attachments.length) {\n        return;\n      }\n\n      const attachments = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(email.attachments), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const attachment = _step.value;\n\n          if (attachment.type !== 'attachment') {\n            continue;\n          }\n\n          try {\n            attachments.push(Promise.await(uploadAttachment(attachment, rid, guest.token)));\n          } catch (e) {\n            Livechat.logger.error('Error uploading attachment from email', e);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      Messages.update({\n        _id: msgId\n      }, {\n        $addToSet: {\n          attachments: {\n            $each: attachments\n          }\n        }\n      });\n    })).catch(err => {\n      Livechat.logger.error({\n        msg: 'Error receiving email',\n        err\n      });\n    });\n  });\n}","map":{"version":3,"sources":["server/features/EmailInbox/EmailInbox_Incoming.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport stripHtml from 'string-strip-html';\nimport { Random } from 'meteor/random';\nimport { ParsedMail, Attachment } from 'mailparser';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { Livechat } from '../../../app/livechat/server/lib/Livechat';\nimport { LivechatRooms, LivechatVisitors, Messages } from '../../../app/models/server';\nimport { FileUpload } from '../../../app/file-upload/server';\nimport { QueueManager } from '../../../app/livechat/server/lib/QueueManager';\nimport { settings } from '../../../app/settings/server';\nimport { logger } from './logger';\nimport { OmnichannelSourceType } from '../../../definition/IRoom';\n\ntype FileAttachment = {\n\ttitle: string;\n\ttitle_link: string;\n\timage_url?: string;\n\timage_type?: string;\n\timage_size?: string;\n\timage_dimensions?: string;\n\taudio_url?: string;\n\taudio_type?: string;\n\taudio_size?: string;\n\tvideo_url?: string;\n\tvideo_type?: string;\n\tvideo_size?: string;\n};\n\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => TAPi18n.__(s, { lng: language });\n\nfunction getGuestByEmail(email: string, name: string, department = ''): any {\n\tlogger.debug(`Attempt to register a guest for ${email} on department: ${department}`);\n\tconst guest = LivechatVisitors.findOneGuestByEmailAddress(email);\n\n\tif (guest) {\n\t\tlogger.debug(`Guest with email ${email} found with id ${guest._id}`);\n\t\tif (guest.department !== department) {\n\t\t\tlogger.debug({\n\t\t\t\tmsg: 'Switching departments for guest',\n\t\t\t\tguest,\n\t\t\t\tpreviousDepartment: guest.department,\n\t\t\t\tnewDepartment: department,\n\t\t\t});\n\t\t\tif (!department) {\n\t\t\t\tLivechatVisitors.removeDepartmentById(guest._id);\n\t\t\t\tdelete guest.department;\n\t\t\t\treturn guest;\n\t\t\t}\n\t\t\tLivechat.setDepartmentForGuest({ token: guest.token, department });\n\t\t\treturn LivechatVisitors.findOneById(guest._id, {});\n\t\t}\n\t\treturn guest;\n\t}\n\n\tlogger.debug({\n\t\tmsg: 'Creating a new Omnichannel guest for visitor with email',\n\t\temail,\n\t});\n\tconst userId = Livechat.registerGuest({\n\t\ttoken: Random.id(),\n\t\tname: name || email,\n\t\temail,\n\t\tdepartment,\n\t\tphone: undefined,\n\t\tusername: undefined,\n\t\tconnectionData: undefined,\n\t\tid: undefined,\n\t});\n\n\tconst newGuest = LivechatVisitors.findOneById(userId, {});\n\tlogger.debug(`Guest ${userId} for visitor ${email} created`);\n\tif (newGuest) {\n\t\treturn newGuest;\n\t}\n\n\tthrow new Error('Error getting guest');\n}\n\nasync function uploadAttachment(attachment: Attachment, rid: string, visitorToken: string): Promise<FileAttachment> {\n\tconst details = {\n\t\tname: attachment.filename,\n\t\tsize: attachment.size,\n\t\ttype: attachment.contentType,\n\t\trid,\n\t\tvisitorToken,\n\t};\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\treturn new Promise((resolve, reject) => {\n\t\tfileStore.insert(details, attachment.content, function (err: any, file: any) {\n\t\t\tif (err) {\n\t\t\t\treject(new Error(err));\n\t\t\t}\n\n\t\t\tconst url = FileUpload.getPath(`${file._id}/${encodeURI(file.name)}`);\n\n\t\t\tconst attachment: FileAttachment = {\n\t\t\t\ttitle: file.name,\n\t\t\t\ttitle_link: url,\n\t\t\t};\n\n\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\tattachment.image_url = url;\n\t\t\t\tattachment.image_type = file.type;\n\t\t\t\tattachment.image_size = file.size;\n\t\t\t\tattachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n\t\t\t}\n\n\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\tattachment.audio_url = url;\n\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\tattachment.audio_size = file.size;\n\t\t\t}\n\n\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\tattachment.video_url = url;\n\t\t\t\tattachment.video_type = file.type;\n\t\t\t\tattachment.video_size = file.size;\n\t\t\t}\n\n\t\t\tresolve(attachment);\n\t\t});\n\t});\n}\n\nexport async function onEmailReceived(email: ParsedMail, inbox: string, department = ''): Promise<void> {\n\tlogger.debug(`New email conversation received on inbox ${inbox}. Will be assigned to department ${department}`);\n\tif (!email.from?.value?.[0]?.address) {\n\t\treturn;\n\t}\n\n\tconst references = typeof email.references === 'string' ? [email.references] : email.references;\n\n\tconst thread = references?.[0] ?? email.messageId;\n\n\tlogger.debug(`Fetching guest for visitor ${email.from.value[0].address}`);\n\tconst guest = getGuestByEmail(email.from.value[0].address, email.from.value[0].name, department);\n\n\tlogger.debug(`Guest ${guest._id} obtained. Attempting to find or create a room on department ${department}`);\n\n\tlet room = LivechatRooms.findOneByVisitorTokenAndEmailThreadAndDepartment(guest.token, thread, department, {});\n\n\tlogger.debug({\n\t\tmsg: 'Room found for guest',\n\t\troom,\n\t\tguest,\n\t});\n\n\tif (room?.closedAt) {\n\t\tlogger.debug(`Room ${room?._id} is closed. Reopening`);\n\t\troom = await QueueManager.unarchiveRoom(room);\n\t}\n\n\tlet msg = email.text;\n\n\tif (email.html) {\n\t\t// Try to remove the signature and history\n\t\tmsg = stripHtml(email.html.replace(/<div name=\"messageSignatureSection.+/s, '')).result;\n\t}\n\n\tconst rid = room?._id ?? Random.id();\n\tconst msgId = Random.id();\n\n\tlogger.debug(`Sending email message to room ${rid} for visitor ${guest._id}. Conversation assigned to department ${department}`);\n\tLivechat.sendMessage({\n\t\tguest,\n\t\tmessage: {\n\t\t\t_id: msgId,\n\t\t\tgroupable: false,\n\t\t\tmsg,\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\ttext: t('Reply_via_Email'),\n\t\t\t\t\t\t\tmsg: 'msg',\n\t\t\t\t\t\t\tmsgId,\n\t\t\t\t\t\t\tmsg_in_chat_window: true,\n\t\t\t\t\t\t\tmsg_processing_type: 'respondWithQuotedMessage',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\tblocks: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'context',\n\t\t\t\t\telements: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\t\ttext: `**${t('From')}:** ${email.from.text}\\n**${t('Subject')}:** ${email.subject}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'section',\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: msg,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\trid,\n\t\t\temail: {\n\t\t\t\treferences,\n\t\t\t\tmessageId: email.messageId,\n\t\t\t},\n\t\t},\n\t\troomInfo: {\n\t\t\temail: {\n\t\t\t\tinbox,\n\t\t\t\tthread,\n\t\t\t\treplyTo: email.from.value[0].address,\n\t\t\t\tsubject: email.subject,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.EMAIL,\n\t\t\t\tid: inbox,\n\t\t\t\talias: 'email-inbox',\n\t\t\t},\n\t\t},\n\t\tagent: undefined,\n\t})\n\t\t.then(async () => {\n\t\t\tif (!email.attachments.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst attachments = [];\n\t\t\tfor await (const attachment of email.attachments) {\n\t\t\t\tif (attachment.type !== 'attachment') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tattachments.push(await uploadAttachment(attachment, rid, guest.token));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tLivechat.logger.error('Error uploading attachment from email', e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMessages.update(\n\t\t\t\t{ _id: msgId },\n\t\t\t\t{\n\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\tattachments: {\n\t\t\t\t\t\t\t$each: attachments,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t})\n\t\t.catch((err) => {\n\t\t\tLivechat.logger.error({\n\t\t\t\tmsg: 'Error receiving email',\n\t\t\t\terr,\n\t\t\t});\n\t\t});\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"af50e0292a2edfe287de69a6e23a762aaa1200ad"}
