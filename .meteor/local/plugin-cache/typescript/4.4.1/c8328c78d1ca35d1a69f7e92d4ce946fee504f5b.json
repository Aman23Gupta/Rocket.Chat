{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Uploads.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Uploads.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Uploads.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/Uploads.ts","sourceRoot":"","sources":["app/models/server/raw/Uploads.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAc3D,OAAO,EAAE,OAAO,EAAsC,MAAM,WAAW,CAAC;AAGxE,MAAM,aAAa,GAAG,CAAC,QAAoB,EAAQ,EAAE;IACpD,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;QACnB,OAAO;KACP;IAED,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,OAAO,UAAW,SAAQ,OAAU;IAC/B,OAAO,GAAyB,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEvH,wBAAwB,CAAC,MAAc,EAAE,UAAkB,EAAE,QAAgB,EAAE,KAAa;QAC3F,MAAM,SAAS,GAAG;YACjB,GAAG,EAAE,MAAM;YACX,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE;gBACR,GAAG,EAAE,IAAI;aACT;YAED,GAAG,CAAC,UAAU,IAAI,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;YAClF,GAAG,CAAC,QAAQ,IAAI,QAAQ,KAAK,KAAK,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;SAC9D,CAAC;QAEF,MAAM,WAAW,GAAG;YACnB,KAAK;YACL,IAAI,EAAE;gBACL,UAAU,EAAE,CAAC,CAAC;aACd;YACD,UAAU,EAAE;gBACX,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,GAAG,EAAE,CAAC;gBACN,IAAI,EAAE,CAAC;gBACP,WAAW,EAAE,CAAC;gBACd,IAAI,EAAE,CAAC;gBACP,GAAG,EAAE,CAAC;gBACN,UAAU,EAAE,CAAC;gBACb,SAAS,EAAE,CAAC;aACZ;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,QAA2B,EAAE,OAAoC;QACvE,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxB,OAAO,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM,CACL,MAAsB,EACtB,MAAmC,EACnC,OAAgD;QAEhD,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;YACpC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;YAC3C,aAAa,CAAC,MAAM,CAAC,CAAC;SACtB;QAED,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,KAAa,EAAE,IAAsB,EAAE,KAAa;QACxF,MAAM,QAAQ,GAAG;YAChB,MAAM;YACN,KAAK;YACL,QAAQ,EAAE,KAAK;YACf,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,CAAC;YACX,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;YACrC,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,GAAG,IAAI;YACP,GAAG,KAAK;SACR,CAAC;QAEF,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,MAAc,EAAE,IAAY;QACpE,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO;SACP;QAED,MAAM,MAAM,GAAG;YACd,GAAG,EAAE,MAAM;YACX,MAAM;SACN,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,CAAC;aACX;SACD,CAAC;QAEF,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAE/C,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;IACxC,CAAC;CACD","sourcesContent":["// TODO: Lib imports should not exists inside the raw models\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport {\n\tCollectionInsertOneOptions,\n\tCursor,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n\tInsertOneWriteOpResult,\n\tUpdateOneOptions,\n\tUpdateQuery,\n\tUpdateWriteOpResult,\n\tWithId,\n\tWriteOpResult,\n} from 'mongodb';\n\nimport { BaseRaw, IndexSpecification, InsertionModel } from './BaseRaw';\nimport { IUpload as T } from '../../../../definition/IUpload';\n\nconst fillTypeGroup = (fileData: Partial<T>): void => {\n\tif (!fileData.type) {\n\t\treturn;\n\t}\n\n\tfileData.typeGroup = fileData.type.split('/').shift();\n};\n\nexport class UploadsRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { rid: 1 } }, { key: { uploadedAt: 1 } }, { key: { typeGroup: 1 } }];\n\n\tfindNotHiddenFilesOfRoom(roomId: string, searchText: string, fileType: string, limit: number): Cursor<T> {\n\t\tconst fileQuery = {\n\t\t\trid: roomId,\n\t\t\tcomplete: true,\n\t\t\tuploading: false,\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\t...(searchText && { name: { $regex: new RegExp(escapeRegExp(searchText), 'i') } }),\n\t\t\t...(fileType && fileType !== 'all' && { typeGroup: fileType }),\n\t\t};\n\n\t\tconst fileOptions = {\n\t\t\tlimit,\n\t\t\tsort: {\n\t\t\t\tuploadedAt: -1,\n\t\t\t},\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\trid: 1,\n\t\t\t\tname: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\ttype: 1,\n\t\t\t\turl: 1,\n\t\t\t\tuploadedAt: 1,\n\t\t\t\ttypeGroup: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(fileQuery, fileOptions);\n\t}\n\n\tinsert(fileData: InsertionModel<T>, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tfillTypeGroup(fileData);\n\t\treturn super.insertOne(fileData, options);\n\t}\n\n\tupdate(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<WriteOpResult> {\n\t\tif ('$set' in update && update.$set) {\n\t\t\tfillTypeGroup(update.$set);\n\t\t} else if ('type' in update && update.type) {\n\t\t\tfillTypeGroup(update);\n\t\t}\n\n\t\treturn super.update(filter, update, options);\n\t}\n\n\tasync insertFileInit(userId: string, store: string, file: { name: string }, extra: object): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tconst fileData = {\n\t\t\tuserId,\n\t\t\tstore,\n\t\t\tcomplete: false,\n\t\t\tuploading: true,\n\t\t\tprogress: 0,\n\t\t\textension: file.name.split('.').pop(),\n\t\t\tuploadedAt: new Date(),\n\t\t\t...file,\n\t\t\t...extra,\n\t\t};\n\n\t\tfillTypeGroup(fileData);\n\t\treturn this.insert(fileData);\n\t}\n\n\tasync updateFileComplete(fileId: string, userId: string, file: object): Promise<UpdateWriteOpResult | undefined> {\n\t\tif (!fileId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst filter = {\n\t\t\t_id: fileId,\n\t\t\tuserId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcomplete: true,\n\t\t\t\tuploading: false,\n\t\t\t\tprogress: 1,\n\t\t\t},\n\t\t};\n\n\t\tupdate.$set = Object.assign(file, update.$set);\n\n\t\tfillTypeGroup(update.$set);\n\t\treturn this.updateOne(filter, update);\n\t}\n\n\tasync deleteFile(fileId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.deleteOne({ _id: fileId });\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Uploads.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Uploads.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  UploadsRaw: () => UploadsRaw\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\n\nconst fillTypeGroup = fileData => {\n  if (!fileData.type) {\n    return;\n  }\n\n  fileData.typeGroup = fileData.type.split('/').shift();\n};\n\nclass UploadsRaw extends BaseRaw {\n  constructor() {\n    super(...arguments);\n    this.indexes = [{\n      key: {\n        rid: 1\n      }\n    }, {\n      key: {\n        uploadedAt: 1\n      }\n    }, {\n      key: {\n        typeGroup: 1\n      }\n    }];\n  }\n\n  findNotHiddenFilesOfRoom(roomId, searchText, fileType, limit) {\n    const fileQuery = _objectSpread(_objectSpread({\n      rid: roomId,\n      complete: true,\n      uploading: false,\n      _hidden: {\n        $ne: true\n      }\n    }, searchText && {\n      name: {\n        $regex: new RegExp(escapeRegExp(searchText), 'i')\n      }\n    }), fileType && fileType !== 'all' && {\n      typeGroup: fileType\n    });\n\n    const fileOptions = {\n      limit,\n      sort: {\n        uploadedAt: -1\n      },\n      projection: {\n        _id: 1,\n        userId: 1,\n        rid: 1,\n        name: 1,\n        description: 1,\n        type: 1,\n        url: 1,\n        uploadedAt: 1,\n        typeGroup: 1\n      }\n    };\n    return this.find(fileQuery, fileOptions);\n  }\n\n  insert(fileData, options) {\n    fillTypeGroup(fileData);\n    return super.insertOne(fileData, options);\n  }\n\n  update(filter, update, options) {\n    if ('$set' in update && update.$set) {\n      fillTypeGroup(update.$set);\n    } else if ('type' in update && update.type) {\n      fillTypeGroup(update);\n    }\n\n    return super.update(filter, update, options);\n  }\n\n  insertFileInit(userId, store, file, extra) {\n    return Promise.asyncApply(() => {\n      const fileData = _objectSpread(_objectSpread({\n        userId,\n        store,\n        complete: false,\n        uploading: true,\n        progress: 0,\n        extension: file.name.split('.').pop(),\n        uploadedAt: new Date()\n      }, file), extra);\n\n      fillTypeGroup(fileData);\n      return this.insert(fileData);\n    });\n  }\n\n  updateFileComplete(fileId, userId, file) {\n    return Promise.asyncApply(() => {\n      if (!fileId) {\n        return;\n      }\n\n      const filter = {\n        _id: fileId,\n        userId\n      };\n      const update = {\n        $set: {\n          complete: true,\n          uploading: false,\n          progress: 1\n        }\n      };\n      update.$set = Object.assign(file, update.$set);\n      fillTypeGroup(update.$set);\n      return this.updateOne(filter, update);\n    });\n  }\n\n  deleteFile(fileId) {\n    return Promise.asyncApply(() => {\n      return this.deleteOne({\n        _id: fileId\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Uploads.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: Lib imports should not exists inside the raw models\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport {\n\tCollectionInsertOneOptions,\n\tCursor,\n\tDeleteWriteOpResultObject,\n\tFilterQuery,\n\tInsertOneWriteOpResult,\n\tUpdateOneOptions,\n\tUpdateQuery,\n\tUpdateWriteOpResult,\n\tWithId,\n\tWriteOpResult,\n} from 'mongodb';\n\nimport { BaseRaw, IndexSpecification, InsertionModel } from './BaseRaw';\nimport { IUpload as T } from '../../../../definition/IUpload';\n\nconst fillTypeGroup = (fileData: Partial<T>): void => {\n\tif (!fileData.type) {\n\t\treturn;\n\t}\n\n\tfileData.typeGroup = fileData.type.split('/').shift();\n};\n\nexport class UploadsRaw extends BaseRaw<T> {\n\tprotected indexes: IndexSpecification[] = [{ key: { rid: 1 } }, { key: { uploadedAt: 1 } }, { key: { typeGroup: 1 } }];\n\n\tfindNotHiddenFilesOfRoom(roomId: string, searchText: string, fileType: string, limit: number): Cursor<T> {\n\t\tconst fileQuery = {\n\t\t\trid: roomId,\n\t\t\tcomplete: true,\n\t\t\tuploading: false,\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\t...(searchText && { name: { $regex: new RegExp(escapeRegExp(searchText), 'i') } }),\n\t\t\t...(fileType && fileType !== 'all' && { typeGroup: fileType }),\n\t\t};\n\n\t\tconst fileOptions = {\n\t\t\tlimit,\n\t\t\tsort: {\n\t\t\t\tuploadedAt: -1,\n\t\t\t},\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\trid: 1,\n\t\t\t\tname: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\ttype: 1,\n\t\t\t\turl: 1,\n\t\t\t\tuploadedAt: 1,\n\t\t\t\ttypeGroup: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(fileQuery, fileOptions);\n\t}\n\n\tinsert(fileData: InsertionModel<T>, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tfillTypeGroup(fileData);\n\t\treturn super.insertOne(fileData, options);\n\t}\n\n\tupdate(\n\t\tfilter: FilterQuery<T>,\n\t\tupdate: UpdateQuery<T> | Partial<T>,\n\t\toptions?: UpdateOneOptions & { multi?: boolean },\n\t): Promise<WriteOpResult> {\n\t\tif ('$set' in update && update.$set) {\n\t\t\tfillTypeGroup(update.$set);\n\t\t} else if ('type' in update && update.type) {\n\t\t\tfillTypeGroup(update);\n\t\t}\n\n\t\treturn super.update(filter, update, options);\n\t}\n\n\tasync insertFileInit(userId: string, store: string, file: { name: string }, extra: object): Promise<InsertOneWriteOpResult<WithId<T>>> {\n\t\tconst fileData = {\n\t\t\tuserId,\n\t\t\tstore,\n\t\t\tcomplete: false,\n\t\t\tuploading: true,\n\t\t\tprogress: 0,\n\t\t\textension: file.name.split('.').pop(),\n\t\t\tuploadedAt: new Date(),\n\t\t\t...file,\n\t\t\t...extra,\n\t\t};\n\n\t\tfillTypeGroup(fileData);\n\t\treturn this.insert(fileData);\n\t}\n\n\tasync updateFileComplete(fileId: string, userId: string, file: object): Promise<UpdateWriteOpResult | undefined> {\n\t\tif (!fileId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst filter = {\n\t\t\t_id: fileId,\n\t\t\tuserId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcomplete: true,\n\t\t\t\tuploading: false,\n\t\t\t\tprogress: 1,\n\t\t\t},\n\t\t};\n\n\t\tupdate.$set = Object.assign(file, update.$set);\n\n\t\tfillTypeGroup(update.$set);\n\t\treturn this.updateOne(filter, update);\n\t}\n\n\tasync deleteFile(fileId: string): Promise<DeleteWriteOpResultObject> {\n\t\treturn this.deleteOne({ _id: fileId });\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"c8328c78d1ca35d1a69f7e92d4ce946fee504f5b"}
