{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/cron/federation.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/cron/federation.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/cron/federation.ts","inputSourceMap":{"version":3,"file":"server/cron/federation.ts","sourceRoot":"","sources":["server/cron/federation.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveSRV, resolveTXT } from '../../app/federation/server/functions/resolveDNS';\nimport { settings, settingsRegistry } from '../../app/settings/server';\nimport { SettingValue } from '../../definition/ISetting';\nimport { dispatchEvent } from '../../app/federation/server/handler';\nimport { getFederationDomain } from '../../app/federation/server/lib/getFederationDomain';\nimport { eventTypes } from '../../app/models/server/models/FederationEvents';\nimport { Users, Settings } from '../../app/models/server/raw';\n\nfunction updateSetting(id: string, value: SettingValue | null): void {\n\tif (value !== null) {\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tsettingsRegistry.add(id, value);\n\t\t} else {\n\t\t\tSettings.updateValueById(id, value);\n\t\t}\n\t} else {\n\t\tSettings.updateValueById(id, undefined);\n\t}\n}\n\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst rocketChatProtocol = protocol.slice(0, -1);\n\n\tconst federationDomain = settings.get('FEDERATION_Domain') as string;\n\n\t// Load public key info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-public-key.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n\t}\n\n\t// Load legacy tcp protocol info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-tcp-protocol.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedProtocolTXT', null);\n\t}\n\n\t// Load SRV info\n\ttry {\n\t\t// If there is a protocol entry on DNS, we use it\n\t\tconst protocol = (settings.get('FEDERATION_ResolvedProtocolTXT') as string) ? 'tcp' : rocketChatProtocol;\n\n\t\tconst resolvedSRV = await resolveSRV(`_rocketchat._${protocol}.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedSRV', '{}');\n\t}\n\n\t// Test if federation is healthy\n\ttry {\n\t\tdispatchEvent([getFederationDomain()], {\n\t\t\ttype: eventTypes.PING,\n\t\t});\n\n\t\tupdateSetting('FEDERATION_Healthy', true);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_Healthy', false);\n\t}\n\n\t// If federation is healthy, check if there are remote users\n\tif (settings.get('FEDERATION_Healthy') as boolean) {\n\t\tconst user = await Users.findOne({ isRemote: true });\n\n\t\tupdateSetting('FEDERATION_Populated', !!user);\n\t}\n}\n\nexport function federationCron(SyncedCron: any): void {\n\tsettings.watch('FEDERATION_Enabled', (value) => {\n\t\tif (!value) {\n\t\t\treturn SyncedCron.remove('Federation');\n\t\t}\n\t\tSyncedCron.add({\n\t\t\tname: 'Federation',\n\t\t\tschedule(parser: any) {\n\t\t\t\treturn parser.cron('* * * * *');\n\t\t\t},\n\t\t\tjob: runFederation,\n\t\t});\n\t});\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/cron/federation.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/cron/federation.ts"}},"code":"module.export({\n  federationCron: () => federationCron\n});\nlet resolveSRV, resolveTXT;\nmodule.link(\"../../app/federation/server/functions/resolveDNS\", {\n  resolveSRV(v) {\n    resolveSRV = v;\n  },\n\n  resolveTXT(v) {\n    resolveTXT = v;\n  }\n\n}, 0);\nlet settings, settingsRegistry;\nmodule.link(\"../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  },\n\n  settingsRegistry(v) {\n    settingsRegistry = v;\n  }\n\n}, 1);\nlet dispatchEvent;\nmodule.link(\"../../app/federation/server/handler\", {\n  dispatchEvent(v) {\n    dispatchEvent = v;\n  }\n\n}, 2);\nlet getFederationDomain;\nmodule.link(\"../../app/federation/server/lib/getFederationDomain\", {\n  getFederationDomain(v) {\n    getFederationDomain = v;\n  }\n\n}, 3);\nlet eventTypes;\nmodule.link(\"../../app/models/server/models/FederationEvents\", {\n  eventTypes(v) {\n    eventTypes = v;\n  }\n\n}, 4);\nlet Users, Settings;\nmodule.link(\"../../app/models/server/raw\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Settings(v) {\n    Settings = v;\n  }\n\n}, 5);\n\nfunction updateSetting(id, value) {\n  if (value !== null) {\n    const setting = settings.get(id);\n\n    if (setting === undefined) {\n      settingsRegistry.add(id, value);\n    } else {\n      Settings.updateValueById(id, value);\n    }\n  } else {\n    Settings.updateValueById(id, undefined);\n  }\n}\n\nfunction runFederation() {\n  return Promise.asyncApply(() => {\n    // Get the settings\n    const siteUrl = settings.get('Site_Url');\n    const {\n      protocol\n    } = new URL(siteUrl);\n    const rocketChatProtocol = protocol.slice(0, -1);\n    const federationDomain = settings.get('FEDERATION_Domain'); // Load public key info\n\n    try {\n      const resolvedTXT = Promise.await(resolveTXT(\"rocketchat-public-key.\".concat(federationDomain)));\n      updateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n    } catch (err) {\n      updateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n    } // Load legacy tcp protocol info\n\n\n    try {\n      const resolvedTXT = Promise.await(resolveTXT(\"rocketchat-tcp-protocol.\".concat(federationDomain)));\n      updateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n    } catch (err) {\n      updateSetting('FEDERATION_ResolvedProtocolTXT', null);\n    } // Load SRV info\n\n\n    try {\n      // If there is a protocol entry on DNS, we use it\n      const protocol = settings.get('FEDERATION_ResolvedProtocolTXT') ? 'tcp' : rocketChatProtocol;\n      const resolvedSRV = Promise.await(resolveSRV(\"_rocketchat._\".concat(protocol, \".\").concat(federationDomain)));\n      updateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n    } catch (err) {\n      updateSetting('FEDERATION_ResolvedSRV', '{}');\n    } // Test if federation is healthy\n\n\n    try {\n      dispatchEvent([getFederationDomain()], {\n        type: eventTypes.PING\n      });\n      updateSetting('FEDERATION_Healthy', true);\n    } catch (err) {\n      updateSetting('FEDERATION_Healthy', false);\n    } // If federation is healthy, check if there are remote users\n\n\n    if (settings.get('FEDERATION_Healthy')) {\n      const user = Promise.await(Users.findOne({\n        isRemote: true\n      }));\n      updateSetting('FEDERATION_Populated', !!user);\n    }\n  });\n}\n\nfunction federationCron(SyncedCron) {\n  settings.watch('FEDERATION_Enabled', value => {\n    if (!value) {\n      return SyncedCron.remove('Federation');\n    }\n\n    SyncedCron.add({\n      name: 'Federation',\n\n      schedule(parser) {\n        return parser.cron('* * * * *');\n      },\n\n      job: runFederation\n    });\n  });\n}","map":{"version":3,"sources":["server/cron/federation.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveSRV, resolveTXT } from '../../app/federation/server/functions/resolveDNS';\nimport { settings, settingsRegistry } from '../../app/settings/server';\nimport { SettingValue } from '../../definition/ISetting';\nimport { dispatchEvent } from '../../app/federation/server/handler';\nimport { getFederationDomain } from '../../app/federation/server/lib/getFederationDomain';\nimport { eventTypes } from '../../app/models/server/models/FederationEvents';\nimport { Users, Settings } from '../../app/models/server/raw';\n\nfunction updateSetting(id: string, value: SettingValue | null): void {\n\tif (value !== null) {\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tsettingsRegistry.add(id, value);\n\t\t} else {\n\t\t\tSettings.updateValueById(id, value);\n\t\t}\n\t} else {\n\t\tSettings.updateValueById(id, undefined);\n\t}\n}\n\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst rocketChatProtocol = protocol.slice(0, -1);\n\n\tconst federationDomain = settings.get('FEDERATION_Domain') as string;\n\n\t// Load public key info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-public-key.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n\t}\n\n\t// Load legacy tcp protocol info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-tcp-protocol.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedProtocolTXT', null);\n\t}\n\n\t// Load SRV info\n\ttry {\n\t\t// If there is a protocol entry on DNS, we use it\n\t\tconst protocol = (settings.get('FEDERATION_ResolvedProtocolTXT') as string) ? 'tcp' : rocketChatProtocol;\n\n\t\tconst resolvedSRV = await resolveSRV(`_rocketchat._${protocol}.${federationDomain}`);\n\t\tupdateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_ResolvedSRV', '{}');\n\t}\n\n\t// Test if federation is healthy\n\ttry {\n\t\tdispatchEvent([getFederationDomain()], {\n\t\t\ttype: eventTypes.PING,\n\t\t});\n\n\t\tupdateSetting('FEDERATION_Healthy', true);\n\t} catch (err) {\n\t\tupdateSetting('FEDERATION_Healthy', false);\n\t}\n\n\t// If federation is healthy, check if there are remote users\n\tif (settings.get('FEDERATION_Healthy') as boolean) {\n\t\tconst user = await Users.findOne({ isRemote: true });\n\n\t\tupdateSetting('FEDERATION_Populated', !!user);\n\t}\n}\n\nexport function federationCron(SyncedCron: any): void {\n\tsettings.watch('FEDERATION_Enabled', (value) => {\n\t\tif (!value) {\n\t\t\treturn SyncedCron.remove('Federation');\n\t\t}\n\t\tSyncedCron.add({\n\t\t\tname: 'Federation',\n\t\t\tschedule(parser: any) {\n\t\t\t\treturn parser.cron('* * * * *');\n\t\t\t},\n\t\t\tjob: runFederation,\n\t\t});\n\t});\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"8031ef4d1322c47cf144215cf9e119b49f0ce3f5"}
