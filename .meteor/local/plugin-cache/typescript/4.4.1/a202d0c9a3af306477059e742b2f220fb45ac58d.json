{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/parsers/Response.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/parsers/Response.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/parsers/Response.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/parsers/Response.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/parsers/Response.ts"],"names":[],"mappings":"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","sourcesContent":["import xmldom from 'xmldom';\nimport xmlenc from 'xml-encryption';\nimport xmlCrypto from 'xml-crypto';\n\nimport { SAMLUtils } from '../Utils';\nimport { StatusCode } from '../constants';\nimport { IServiceProviderOptions } from '../../definition/IServiceProviderOptions';\nimport { IResponseValidateCallback } from '../../definition/callbacks';\nimport { ISAMLAssertion } from '../../definition/ISAMLAssertion';\n\ntype XmlParent = Element | Document;\n\nexport class ResponseParser {\n\tserviceProviderOptions: IServiceProviderOptions;\n\n\tconstructor(serviceProviderOptions: IServiceProviderOptions) {\n\t\tthis.serviceProviderOptions = serviceProviderOptions;\n\t}\n\n\tpublic validate(xml: string, callback: IResponseValidateCallback): void {\n\t\t// We currently use RelayState to save SAML provider\n\t\tSAMLUtils.log(`Validating response with relay state: ${xml}`);\n\n\t\tconst doc = new xmldom.DOMParser().parseFromString(xml, 'text/xml');\n\t\tif (!doc) {\n\t\t\treturn callback('No Doc Found');\n\t\t}\n\n\t\tconst allResponses = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'Response');\n\t\tif (allResponses.length === 0) {\n\t\t\treturn this._checkLogoutResponse(doc, callback);\n\t\t}\n\n\t\tif (allResponses.length !== 1) {\n\t\t\treturn callback(new Error('Too many SAML responses'), null, false);\n\t\t}\n\t\tconst response = allResponses[0];\n\t\tSAMLUtils.log('Got response');\n\n\t\tSAMLUtils.log('Verify status');\n\t\tconst statusValidateObj = SAMLUtils.validateStatus(doc);\n\t\tif (!statusValidateObj.success) {\n\t\t\tif (!statusValidateObj.statusCode) {\n\t\t\t\treturn callback(new Error('Missing StatusCode'), null, false);\n\t\t\t}\n\n\t\t\tif (statusValidateObj.statusCode === StatusCode.responder && statusValidateObj.message) {\n\t\t\t\treturn callback(new Error(statusValidateObj.message), null, false);\n\t\t\t}\n\n\t\t\treturn callback(new Error(`Status is: ${statusValidateObj.statusCode}`), null, false);\n\t\t}\n\t\tSAMLUtils.log('Status ok');\n\n\t\tlet assertion: XmlParent;\n\t\tlet assertionData: ISAMLAssertion;\n\t\tlet issuer;\n\n\t\ttry {\n\t\t\tassertionData = this.getAssertion(response, xml);\n\t\t\tassertion = assertionData.assertion;\n\n\t\t\tthis.verifySignatures(response, assertionData, xml);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tconst profile: Record<string, any> = {};\n\n\t\tif (response.hasAttribute('InResponseTo')) {\n\t\t\tprofile.inResponseToId = response.getAttribute('InResponseTo');\n\t\t}\n\n\t\ttry {\n\t\t\tissuer = this.getIssuer(assertion);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tif (issuer) {\n\t\t\tprofile.issuer = issuer.textContent;\n\t\t}\n\n\t\tconst subject = this.getSubject(assertion);\n\t\tif (subject) {\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tif (nameID) {\n\t\t\t\tprofile.nameID = nameID.textContent;\n\n\t\t\t\tif (nameID.hasAttribute('Format')) {\n\t\t\t\t\tprofile.nameIDFormat = nameID.getAttribute('Format');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.validateSubjectConditions(subject);\n\t\t\t} catch (e) {\n\t\t\t\treturn callback(e, null, false);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.validateAssertionConditions(assertion);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tconst authnStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnStatement')[0];\n\n\t\tif (authnStatement) {\n\t\t\tif (authnStatement.hasAttribute('SessionIndex')) {\n\t\t\t\tprofile.sessionIndex = authnStatement.getAttribute('SessionIndex');\n\t\t\t\tSAMLUtils.log(`Session Index: ${profile.sessionIndex}`);\n\t\t\t} else {\n\t\t\t\tSAMLUtils.log('No Session Index Found');\n\t\t\t}\n\t\t} else {\n\t\t\tSAMLUtils.log('No AuthN Statement found');\n\t\t}\n\n\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tif (attributeStatement) {\n\t\t\tthis.mapAttributes(attributeStatement, profile);\n\t\t} else {\n\t\t\tSAMLUtils.log('No Attribute Statement found in SAML response.');\n\t\t}\n\n\t\tif (!profile.email && profile.nameID && profile.nameIDFormat && profile.nameIDFormat.indexOf('emailAddress') >= 0) {\n\t\t\tprofile.email = profile.nameID;\n\t\t}\n\n\t\tconst profileKeys = Object.keys(profile);\n\t\tfor (let i = 0; i < profileKeys.length; i++) {\n\t\t\tconst key = profileKeys[i];\n\n\t\t\tif (key.match(/\\./)) {\n\t\t\t\tprofile[key.replace(/\\./g, '-')] = profile[key];\n\t\t\t\tdelete profile[key];\n\t\t\t}\n\t\t}\n\n\t\tSAMLUtils.log({ msg: 'NameID', profile });\n\t\treturn callback(null, profile, false);\n\t}\n\n\tprivate _checkLogoutResponse(doc: Document, callback: IResponseValidateCallback): void {\n\t\tconst logoutResponse = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'LogoutResponse');\n\t\tif (!logoutResponse.length) {\n\t\t\treturn callback(new Error('Unknown SAML response message'), null, false);\n\t\t}\n\n\t\tSAMLUtils.log('Verify status');\n\t\tconst statusValidateObj = SAMLUtils.validateStatus(doc);\n\t\tif (!statusValidateObj.success) {\n\t\t\treturn callback(new Error(`Status is: ${statusValidateObj.statusCode}`), null, false);\n\t\t}\n\t\tSAMLUtils.log('Status ok');\n\n\t\t// @ToDo: Check if this situation is still used\n\t\treturn callback(null, null, true);\n\t}\n\n\tprivate getAssertion(response: Element, xml: string): ISAMLAssertion {\n\t\tconst allAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n\t\tconst allEncrypedAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedAssertion');\n\n\t\tif (allAssertions.length + allEncrypedAssertions.length > 1) {\n\t\t\tthrow new Error('Too many SAML assertions');\n\t\t}\n\n\t\tlet assertion: XmlParent = allAssertions[0];\n\t\tconst encAssertion = allEncrypedAssertions[0];\n\t\tlet newXml = null;\n\n\t\tif (typeof encAssertion !== 'undefined') {\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\tconst encData = encAssertion.getElementsByTagNameNS('*', 'EncryptedData')[0];\n\t\t\txmlenc.decrypt(encData, options, function (err, result) {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t}\n\n\t\t\t\tconst document = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n\t\t\t\tif (!document) {\n\t\t\t\t\tthrow new Error('Failed to decrypt SAML assertion');\n\t\t\t\t}\n\n\t\t\t\tconst decryptedAssertions = document.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n\t\t\t\tif (decryptedAssertions.length) {\n\t\t\t\t\tassertion = decryptedAssertions[0];\n\t\t\t\t}\n\n\t\t\t\tnewXml = result;\n\t\t\t});\n\t\t}\n\n\t\tif (!assertion) {\n\t\t\tthrow new Error('Missing SAML assertion');\n\t\t}\n\n\t\treturn {\n\t\t\tassertion,\n\t\t\txml: newXml || xml,\n\t\t};\n\t}\n\n\tprivate verifySignatures(response: Element, assertionData: ISAMLAssertion, xml: string): void {\n\t\tif (!this.serviceProviderOptions.cert) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst signatureType = this.serviceProviderOptions.signatureValidationType;\n\n\t\tconst checkEither = signatureType === 'Either';\n\t\tconst checkResponse = signatureType === 'Response' || signatureType === 'All' || checkEither;\n\t\tconst checkAssertion = signatureType === 'Assertion' || signatureType === 'All' || checkEither;\n\t\tlet anyValidSignature = false;\n\n\t\tif (checkResponse) {\n\t\t\tSAMLUtils.log('Verify Document Signature');\n\t\t\tif (!this.validateResponseSignature(xml, this.serviceProviderOptions.cert, response)) {\n\t\t\t\tif (!checkEither) {\n\t\t\t\t\tSAMLUtils.log('Document Signature WRONG');\n\t\t\t\t\tthrow new Error('Invalid Signature');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanyValidSignature = true;\n\t\t\t}\n\t\t\tSAMLUtils.log('Document Signature OK');\n\t\t}\n\n\t\tif (checkAssertion) {\n\t\t\tSAMLUtils.log('Verify Assertion Signature');\n\t\t\tif (!this.validateAssertionSignature(assertionData.xml, this.serviceProviderOptions.cert, assertionData.assertion)) {\n\t\t\t\tif (!checkEither) {\n\t\t\t\t\tSAMLUtils.log('Assertion Signature WRONG');\n\t\t\t\t\tthrow new Error('Invalid Assertion signature');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanyValidSignature = true;\n\t\t\t}\n\t\t\tSAMLUtils.log('Assertion Signature OK');\n\t\t}\n\n\t\tif (checkEither && !anyValidSignature) {\n\t\t\tSAMLUtils.log('No Valid Signature');\n\t\t\tthrow new Error('No valid SAML Signature found');\n\t\t}\n\t}\n\n\tprivate validateResponseSignature(xml: string, cert: string, response: Element): boolean {\n\t\treturn this.validateSignatureChildren(xml, cert, response);\n\t}\n\n\tprivate validateAssertionSignature(xml: string, cert: string, assertion: XmlParent): boolean {\n\t\treturn this.validateSignatureChildren(xml, cert, assertion);\n\t}\n\n\tprivate validateSignatureChildren(xml: string, cert: string, parent: XmlParent): boolean {\n\t\tconst xpathSigQuery = \".//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\";\n\t\tconst signatures = xmlCrypto.xpath(parent, xpathSigQuery) as Array<Element>;\n\t\tlet signature = null;\n\n\t\tfor (const sign of signatures) {\n\t\t\tif (sign.parentNode !== parent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Too many signatures\n\t\t\tif (signature) {\n\t\t\t\tSAMLUtils.log('Failed to validate SAML signature: Too Many Signatures');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tsignature = sign;\n\t\t}\n\n\t\tif (!signature) {\n\t\t\tSAMLUtils.log('Failed to validate SAML signature: Signature not found');\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.validateSignature(xml, cert, signature);\n\t}\n\n\tprivate validateSignature(xml: string, cert: string, signature: Element): any {\n\t\tconst sig = new xmlCrypto.SignedXml();\n\n\t\tsig.keyInfoProvider = {\n\t\t\tgetKeyInfo: (/* key*/): string => '<X509Data></X509Data>',\n\t\t\t// @ts-ignore - the definition file must be wrong\n\t\t\tgetKey: (/* keyInfo*/): string => SAMLUtils.certToPEM(cert),\n\t\t};\n\n\t\tsig.loadSignature(signature);\n\n\t\tconst result = sig.checkSignature(xml);\n\t\tif (!result && sig.validationErrors) {\n\t\t\tSAMLUtils.log(sig.validationErrors);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getIssuer(assertion: XmlParent): any {\n\t\tconst issuers = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Issuer');\n\t\tif (issuers.length > 1) {\n\t\t\tthrow new Error('Too many Issuers');\n\t\t}\n\n\t\treturn issuers[0];\n\t}\n\n\tprivate getSubject(assertion: XmlParent): XmlParent {\n\t\tlet subject: XmlParent = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Subject')[0];\n\t\tconst encSubject = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedID')[0];\n\n\t\tif (typeof encSubject !== 'undefined') {\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\txmlenc.decrypt(encSubject.getElementsByTagNameNS('*', 'EncryptedData')[0], options, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t}\n\t\t\t\tsubject = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n\t\t\t});\n\t\t}\n\n\t\treturn subject;\n\t}\n\n\tprivate validateSubjectConditions(subject: XmlParent): void {\n\t\tconst subjectConfirmation = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmation')[0];\n\t\tif (subjectConfirmation) {\n\t\t\tconst subjectConfirmationData = subjectConfirmation.getElementsByTagNameNS(\n\t\t\t\t'urn:oasis:names:tc:SAML:2.0:assertion',\n\t\t\t\t'SubjectConfirmationData',\n\t\t\t)[0];\n\t\t\tif (subjectConfirmationData && !this.validateNotBeforeNotOnOrAfterAssertions(subjectConfirmationData)) {\n\t\t\t\tthrow new Error('NotBefore / NotOnOrAfter assertion failed');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateNotBeforeNotOnOrAfterAssertions(element: Element): boolean {\n\t\tconst sysnow = new Date();\n\t\tconst allowedclockdrift = this.serviceProviderOptions.allowedClockDrift || 0;\n\n\t\tconst now = new Date(sysnow.getTime() + allowedclockdrift);\n\n\t\tif (element.hasAttribute('NotBefore')) {\n\t\t\tconst notBefore: string | null = element.getAttribute('NotBefore');\n\n\t\t\tif (!notBefore) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst date = new Date(notBefore);\n\t\t\tif (now < date) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (element.hasAttribute('NotOnOrAfter')) {\n\t\t\tconst notOnOrAfter: string | null = element.getAttribute('NotOnOrAfter');\n\t\t\tif (!notOnOrAfter) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst date = new Date(notOnOrAfter);\n\n\t\t\tif (now >= date) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate validateAssertionConditions(assertion: XmlParent): void {\n\t\tconst conditions = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Conditions')[0];\n\t\tif (conditions && !this.validateNotBeforeNotOnOrAfterAssertions(conditions)) {\n\t\t\tthrow new Error('NotBefore / NotOnOrAfter assertion failed');\n\t\t}\n\t}\n\n\tprivate mapAttributes(attributeStatement: Element, profile: Record<string, any>): void {\n\t\tSAMLUtils.log(`Attribute Statement found in SAML response: ${attributeStatement}`);\n\t\tconst attributes = attributeStatement.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute');\n\t\tSAMLUtils.log(`Attributes will be processed: ${attributes.length}`);\n\n\t\tif (attributes) {\n\t\t\tfor (let i = 0; i < attributes.length; i++) {\n\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tlet value;\n\t\t\t\tif (values.length === 1) {\n\t\t\t\t\tvalue = values[0].textContent;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = [];\n\t\t\t\t\tfor (let j = 0; j < values.length; j++) {\n\t\t\t\t\t\tvalue.push(values[j].textContent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst key = attributes[i].getAttribute('Name');\n\t\t\t\tif (key) {\n\t\t\t\t\tSAMLUtils.log(`Name:  ${attributes[i]}`);\n\t\t\t\t\tSAMLUtils.log(`Adding attribute from SAML response to profile: ${key} = ${value}`);\n\t\t\t\t\tprofile[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tSAMLUtils.log('No Attributes found in SAML attribute statement.');\n\t\t}\n\n\t\tif (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\n\t\t\t// See http://www.incommonfederation.org/attributesummary.html for definition of attribute OIDs\n\t\t\tprofile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\n\t\t}\n\n\t\tif (!profile.email && profile['urn:oid:1.2.840.113549.1.9.1']) {\n\t\t\tprofile.email = profile['urn:oid:1.2.840.113549.1.9.1'];\n\t\t}\n\n\t\tif (!profile.displayName && profile['urn:oid:2.16.840.1.113730.3.1.241']) {\n\t\t\tprofile.displayName = profile['urn:oid:2.16.840.1.113730.3.1.241'];\n\t\t}\n\n\t\tif (!profile.eppn && profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6']) {\n\t\t\tprofile.eppn = profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6'];\n\t\t}\n\n\t\tif (!profile.email && profile.mail) {\n\t\t\tprofile.email = profile.mail;\n\t\t}\n\n\t\tif (!profile.cn && profile['urn:oid:2.5.4.3']) {\n\t\t\tprofile.cn = profile['urn:oid:2.5.4.3'];\n\t\t}\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/meteor-accounts-saml/server/lib/parsers/Response.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/parsers/Response.ts"}},"code":"module.export({\n  ResponseParser: () => ResponseParser\n});\nlet xmldom;\nmodule.link(\"xmldom\", {\n  default(v) {\n    xmldom = v;\n  }\n\n}, 0);\nlet xmlenc;\nmodule.link(\"xml-encryption\", {\n  default(v) {\n    xmlenc = v;\n  }\n\n}, 1);\nlet xmlCrypto;\nmodule.link(\"xml-crypto\", {\n  default(v) {\n    xmlCrypto = v;\n  }\n\n}, 2);\nlet SAMLUtils;\nmodule.link(\"../Utils\", {\n  SAMLUtils(v) {\n    SAMLUtils = v;\n  }\n\n}, 3);\nlet StatusCode;\nmodule.link(\"../constants\", {\n  StatusCode(v) {\n    StatusCode = v;\n  }\n\n}, 4);\n\nclass ResponseParser {\n  constructor(serviceProviderOptions) {\n    this.serviceProviderOptions = void 0;\n    this.serviceProviderOptions = serviceProviderOptions;\n  }\n\n  validate(xml, callback) {\n    // We currently use RelayState to save SAML provider\n    SAMLUtils.log(\"Validating response with relay state: \".concat(xml));\n    const doc = new xmldom.DOMParser().parseFromString(xml, 'text/xml');\n\n    if (!doc) {\n      return callback('No Doc Found');\n    }\n\n    const allResponses = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'Response');\n\n    if (allResponses.length === 0) {\n      return this._checkLogoutResponse(doc, callback);\n    }\n\n    if (allResponses.length !== 1) {\n      return callback(new Error('Too many SAML responses'), null, false);\n    }\n\n    const response = allResponses[0];\n    SAMLUtils.log('Got response');\n    SAMLUtils.log('Verify status');\n    const statusValidateObj = SAMLUtils.validateStatus(doc);\n\n    if (!statusValidateObj.success) {\n      if (!statusValidateObj.statusCode) {\n        return callback(new Error('Missing StatusCode'), null, false);\n      }\n\n      if (statusValidateObj.statusCode === StatusCode.responder && statusValidateObj.message) {\n        return callback(new Error(statusValidateObj.message), null, false);\n      }\n\n      return callback(new Error(\"Status is: \".concat(statusValidateObj.statusCode)), null, false);\n    }\n\n    SAMLUtils.log('Status ok');\n    let assertion;\n    let assertionData;\n    let issuer;\n\n    try {\n      assertionData = this.getAssertion(response, xml);\n      assertion = assertionData.assertion;\n      this.verifySignatures(response, assertionData, xml);\n    } catch (e) {\n      return callback(e, null, false);\n    }\n\n    const profile = {};\n\n    if (response.hasAttribute('InResponseTo')) {\n      profile.inResponseToId = response.getAttribute('InResponseTo');\n    }\n\n    try {\n      issuer = this.getIssuer(assertion);\n    } catch (e) {\n      return callback(e, null, false);\n    }\n\n    if (issuer) {\n      profile.issuer = issuer.textContent;\n    }\n\n    const subject = this.getSubject(assertion);\n\n    if (subject) {\n      const nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\n      if (nameID) {\n        profile.nameID = nameID.textContent;\n\n        if (nameID.hasAttribute('Format')) {\n          profile.nameIDFormat = nameID.getAttribute('Format');\n        }\n      }\n\n      try {\n        this.validateSubjectConditions(subject);\n      } catch (e) {\n        return callback(e, null, false);\n      }\n    }\n\n    try {\n      this.validateAssertionConditions(assertion);\n    } catch (e) {\n      return callback(e, null, false);\n    }\n\n    const authnStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnStatement')[0];\n\n    if (authnStatement) {\n      if (authnStatement.hasAttribute('SessionIndex')) {\n        profile.sessionIndex = authnStatement.getAttribute('SessionIndex');\n        SAMLUtils.log(\"Session Index: \".concat(profile.sessionIndex));\n      } else {\n        SAMLUtils.log('No Session Index Found');\n      }\n    } else {\n      SAMLUtils.log('No AuthN Statement found');\n    }\n\n    const attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\n    if (attributeStatement) {\n      this.mapAttributes(attributeStatement, profile);\n    } else {\n      SAMLUtils.log('No Attribute Statement found in SAML response.');\n    }\n\n    if (!profile.email && profile.nameID && profile.nameIDFormat && profile.nameIDFormat.indexOf('emailAddress') >= 0) {\n      profile.email = profile.nameID;\n    }\n\n    const profileKeys = Object.keys(profile);\n\n    for (let i = 0; i < profileKeys.length; i++) {\n      const key = profileKeys[i];\n\n      if (key.match(/\\./)) {\n        profile[key.replace(/\\./g, '-')] = profile[key];\n        delete profile[key];\n      }\n    }\n\n    SAMLUtils.log({\n      msg: 'NameID',\n      profile\n    });\n    return callback(null, profile, false);\n  }\n\n  _checkLogoutResponse(doc, callback) {\n    const logoutResponse = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'LogoutResponse');\n\n    if (!logoutResponse.length) {\n      return callback(new Error('Unknown SAML response message'), null, false);\n    }\n\n    SAMLUtils.log('Verify status');\n    const statusValidateObj = SAMLUtils.validateStatus(doc);\n\n    if (!statusValidateObj.success) {\n      return callback(new Error(\"Status is: \".concat(statusValidateObj.statusCode)), null, false);\n    }\n\n    SAMLUtils.log('Status ok'); // @ToDo: Check if this situation is still used\n\n    return callback(null, null, true);\n  }\n\n  getAssertion(response, xml) {\n    const allAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n    const allEncrypedAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedAssertion');\n\n    if (allAssertions.length + allEncrypedAssertions.length > 1) {\n      throw new Error('Too many SAML assertions');\n    }\n\n    let assertion = allAssertions[0];\n    const encAssertion = allEncrypedAssertions[0];\n    let newXml = null;\n\n    if (typeof encAssertion !== 'undefined') {\n      const options = {\n        key: this.serviceProviderOptions.privateKey\n      };\n      const encData = encAssertion.getElementsByTagNameNS('*', 'EncryptedData')[0];\n      xmlenc.decrypt(encData, options, function (err, result) {\n        if (err) {\n          SAMLUtils.error(err);\n        }\n\n        const document = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n\n        if (!document) {\n          throw new Error('Failed to decrypt SAML assertion');\n        }\n\n        const decryptedAssertions = document.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n\n        if (decryptedAssertions.length) {\n          assertion = decryptedAssertions[0];\n        }\n\n        newXml = result;\n      });\n    }\n\n    if (!assertion) {\n      throw new Error('Missing SAML assertion');\n    }\n\n    return {\n      assertion,\n      xml: newXml || xml\n    };\n  }\n\n  verifySignatures(response, assertionData, xml) {\n    if (!this.serviceProviderOptions.cert) {\n      return;\n    }\n\n    const signatureType = this.serviceProviderOptions.signatureValidationType;\n    const checkEither = signatureType === 'Either';\n    const checkResponse = signatureType === 'Response' || signatureType === 'All' || checkEither;\n    const checkAssertion = signatureType === 'Assertion' || signatureType === 'All' || checkEither;\n    let anyValidSignature = false;\n\n    if (checkResponse) {\n      SAMLUtils.log('Verify Document Signature');\n\n      if (!this.validateResponseSignature(xml, this.serviceProviderOptions.cert, response)) {\n        if (!checkEither) {\n          SAMLUtils.log('Document Signature WRONG');\n          throw new Error('Invalid Signature');\n        }\n      } else {\n        anyValidSignature = true;\n      }\n\n      SAMLUtils.log('Document Signature OK');\n    }\n\n    if (checkAssertion) {\n      SAMLUtils.log('Verify Assertion Signature');\n\n      if (!this.validateAssertionSignature(assertionData.xml, this.serviceProviderOptions.cert, assertionData.assertion)) {\n        if (!checkEither) {\n          SAMLUtils.log('Assertion Signature WRONG');\n          throw new Error('Invalid Assertion signature');\n        }\n      } else {\n        anyValidSignature = true;\n      }\n\n      SAMLUtils.log('Assertion Signature OK');\n    }\n\n    if (checkEither && !anyValidSignature) {\n      SAMLUtils.log('No Valid Signature');\n      throw new Error('No valid SAML Signature found');\n    }\n  }\n\n  validateResponseSignature(xml, cert, response) {\n    return this.validateSignatureChildren(xml, cert, response);\n  }\n\n  validateAssertionSignature(xml, cert, assertion) {\n    return this.validateSignatureChildren(xml, cert, assertion);\n  }\n\n  validateSignatureChildren(xml, cert, parent) {\n    const xpathSigQuery = \".//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\";\n    const signatures = xmlCrypto.xpath(parent, xpathSigQuery);\n    let signature = null;\n\n    for (const sign of signatures) {\n      if (sign.parentNode !== parent) {\n        continue;\n      } // Too many signatures\n\n\n      if (signature) {\n        SAMLUtils.log('Failed to validate SAML signature: Too Many Signatures');\n        return false;\n      }\n\n      signature = sign;\n    }\n\n    if (!signature) {\n      SAMLUtils.log('Failed to validate SAML signature: Signature not found');\n      return false;\n    }\n\n    return this.validateSignature(xml, cert, signature);\n  }\n\n  validateSignature(xml, cert, signature) {\n    const sig = new xmlCrypto.SignedXml();\n    sig.keyInfoProvider = {\n      getKeyInfo: () => '<X509Data></X509Data>',\n      // @ts-ignore - the definition file must be wrong\n      getKey: () => SAMLUtils.certToPEM(cert)\n    };\n    sig.loadSignature(signature);\n    const result = sig.checkSignature(xml);\n\n    if (!result && sig.validationErrors) {\n      SAMLUtils.log(sig.validationErrors);\n    }\n\n    return result;\n  }\n\n  getIssuer(assertion) {\n    const issuers = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Issuer');\n\n    if (issuers.length > 1) {\n      throw new Error('Too many Issuers');\n    }\n\n    return issuers[0];\n  }\n\n  getSubject(assertion) {\n    let subject = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Subject')[0];\n    const encSubject = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedID')[0];\n\n    if (typeof encSubject !== 'undefined') {\n      const options = {\n        key: this.serviceProviderOptions.privateKey\n      };\n      xmlenc.decrypt(encSubject.getElementsByTagNameNS('*', 'EncryptedData')[0], options, (err, result) => {\n        if (err) {\n          SAMLUtils.error(err);\n        }\n\n        subject = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n      });\n    }\n\n    return subject;\n  }\n\n  validateSubjectConditions(subject) {\n    const subjectConfirmation = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmation')[0];\n\n    if (subjectConfirmation) {\n      const subjectConfirmationData = subjectConfirmation.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmationData')[0];\n\n      if (subjectConfirmationData && !this.validateNotBeforeNotOnOrAfterAssertions(subjectConfirmationData)) {\n        throw new Error('NotBefore / NotOnOrAfter assertion failed');\n      }\n    }\n  }\n\n  validateNotBeforeNotOnOrAfterAssertions(element) {\n    const sysnow = new Date();\n    const allowedclockdrift = this.serviceProviderOptions.allowedClockDrift || 0;\n    const now = new Date(sysnow.getTime() + allowedclockdrift);\n\n    if (element.hasAttribute('NotBefore')) {\n      const notBefore = element.getAttribute('NotBefore');\n\n      if (!notBefore) {\n        return false;\n      }\n\n      const date = new Date(notBefore);\n\n      if (now < date) {\n        return false;\n      }\n    }\n\n    if (element.hasAttribute('NotOnOrAfter')) {\n      const notOnOrAfter = element.getAttribute('NotOnOrAfter');\n\n      if (!notOnOrAfter) {\n        return false;\n      }\n\n      const date = new Date(notOnOrAfter);\n\n      if (now >= date) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  validateAssertionConditions(assertion) {\n    const conditions = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Conditions')[0];\n\n    if (conditions && !this.validateNotBeforeNotOnOrAfterAssertions(conditions)) {\n      throw new Error('NotBefore / NotOnOrAfter assertion failed');\n    }\n  }\n\n  mapAttributes(attributeStatement, profile) {\n    SAMLUtils.log(\"Attribute Statement found in SAML response: \".concat(attributeStatement));\n    const attributes = attributeStatement.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute');\n    SAMLUtils.log(\"Attributes will be processed: \".concat(attributes.length));\n\n    if (attributes) {\n      for (let i = 0; i < attributes.length; i++) {\n        const values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n        let value;\n\n        if (values.length === 1) {\n          value = values[0].textContent;\n        } else {\n          value = [];\n\n          for (let j = 0; j < values.length; j++) {\n            value.push(values[j].textContent);\n          }\n        }\n\n        const key = attributes[i].getAttribute('Name');\n\n        if (key) {\n          SAMLUtils.log(\"Name:  \".concat(attributes[i]));\n          SAMLUtils.log(\"Adding attribute from SAML response to profile: \".concat(key, \" = \").concat(value));\n          profile[key] = value;\n        }\n      }\n    } else {\n      SAMLUtils.log('No Attributes found in SAML attribute statement.');\n    }\n\n    if (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\n      // See http://www.incommonfederation.org/attributesummary.html for definition of attribute OIDs\n      profile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\n    }\n\n    if (!profile.email && profile['urn:oid:1.2.840.113549.1.9.1']) {\n      profile.email = profile['urn:oid:1.2.840.113549.1.9.1'];\n    }\n\n    if (!profile.displayName && profile['urn:oid:2.16.840.1.113730.3.1.241']) {\n      profile.displayName = profile['urn:oid:2.16.840.1.113730.3.1.241'];\n    }\n\n    if (!profile.eppn && profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6']) {\n      profile.eppn = profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6'];\n    }\n\n    if (!profile.email && profile.mail) {\n      profile.email = profile.mail;\n    }\n\n    if (!profile.cn && profile['urn:oid:2.5.4.3']) {\n      profile.cn = profile['urn:oid:2.5.4.3'];\n    }\n  }\n\n}","map":{"version":3,"sources":["app/meteor-accounts-saml/server/lib/parsers/Response.ts"],"names":[],"mappings":"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","sourcesContent":["import xmldom from 'xmldom';\nimport xmlenc from 'xml-encryption';\nimport xmlCrypto from 'xml-crypto';\n\nimport { SAMLUtils } from '../Utils';\nimport { StatusCode } from '../constants';\nimport { IServiceProviderOptions } from '../../definition/IServiceProviderOptions';\nimport { IResponseValidateCallback } from '../../definition/callbacks';\nimport { ISAMLAssertion } from '../../definition/ISAMLAssertion';\n\ntype XmlParent = Element | Document;\n\nexport class ResponseParser {\n\tserviceProviderOptions: IServiceProviderOptions;\n\n\tconstructor(serviceProviderOptions: IServiceProviderOptions) {\n\t\tthis.serviceProviderOptions = serviceProviderOptions;\n\t}\n\n\tpublic validate(xml: string, callback: IResponseValidateCallback): void {\n\t\t// We currently use RelayState to save SAML provider\n\t\tSAMLUtils.log(`Validating response with relay state: ${xml}`);\n\n\t\tconst doc = new xmldom.DOMParser().parseFromString(xml, 'text/xml');\n\t\tif (!doc) {\n\t\t\treturn callback('No Doc Found');\n\t\t}\n\n\t\tconst allResponses = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'Response');\n\t\tif (allResponses.length === 0) {\n\t\t\treturn this._checkLogoutResponse(doc, callback);\n\t\t}\n\n\t\tif (allResponses.length !== 1) {\n\t\t\treturn callback(new Error('Too many SAML responses'), null, false);\n\t\t}\n\t\tconst response = allResponses[0];\n\t\tSAMLUtils.log('Got response');\n\n\t\tSAMLUtils.log('Verify status');\n\t\tconst statusValidateObj = SAMLUtils.validateStatus(doc);\n\t\tif (!statusValidateObj.success) {\n\t\t\tif (!statusValidateObj.statusCode) {\n\t\t\t\treturn callback(new Error('Missing StatusCode'), null, false);\n\t\t\t}\n\n\t\t\tif (statusValidateObj.statusCode === StatusCode.responder && statusValidateObj.message) {\n\t\t\t\treturn callback(new Error(statusValidateObj.message), null, false);\n\t\t\t}\n\n\t\t\treturn callback(new Error(`Status is: ${statusValidateObj.statusCode}`), null, false);\n\t\t}\n\t\tSAMLUtils.log('Status ok');\n\n\t\tlet assertion: XmlParent;\n\t\tlet assertionData: ISAMLAssertion;\n\t\tlet issuer;\n\n\t\ttry {\n\t\t\tassertionData = this.getAssertion(response, xml);\n\t\t\tassertion = assertionData.assertion;\n\n\t\t\tthis.verifySignatures(response, assertionData, xml);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tconst profile: Record<string, any> = {};\n\n\t\tif (response.hasAttribute('InResponseTo')) {\n\t\t\tprofile.inResponseToId = response.getAttribute('InResponseTo');\n\t\t}\n\n\t\ttry {\n\t\t\tissuer = this.getIssuer(assertion);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tif (issuer) {\n\t\t\tprofile.issuer = issuer.textContent;\n\t\t}\n\n\t\tconst subject = this.getSubject(assertion);\n\t\tif (subject) {\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tif (nameID) {\n\t\t\t\tprofile.nameID = nameID.textContent;\n\n\t\t\t\tif (nameID.hasAttribute('Format')) {\n\t\t\t\t\tprofile.nameIDFormat = nameID.getAttribute('Format');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.validateSubjectConditions(subject);\n\t\t\t} catch (e) {\n\t\t\t\treturn callback(e, null, false);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.validateAssertionConditions(assertion);\n\t\t} catch (e) {\n\t\t\treturn callback(e, null, false);\n\t\t}\n\n\t\tconst authnStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AuthnStatement')[0];\n\n\t\tif (authnStatement) {\n\t\t\tif (authnStatement.hasAttribute('SessionIndex')) {\n\t\t\t\tprofile.sessionIndex = authnStatement.getAttribute('SessionIndex');\n\t\t\t\tSAMLUtils.log(`Session Index: ${profile.sessionIndex}`);\n\t\t\t} else {\n\t\t\t\tSAMLUtils.log('No Session Index Found');\n\t\t\t}\n\t\t} else {\n\t\t\tSAMLUtils.log('No AuthN Statement found');\n\t\t}\n\n\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tif (attributeStatement) {\n\t\t\tthis.mapAttributes(attributeStatement, profile);\n\t\t} else {\n\t\t\tSAMLUtils.log('No Attribute Statement found in SAML response.');\n\t\t}\n\n\t\tif (!profile.email && profile.nameID && profile.nameIDFormat && profile.nameIDFormat.indexOf('emailAddress') >= 0) {\n\t\t\tprofile.email = profile.nameID;\n\t\t}\n\n\t\tconst profileKeys = Object.keys(profile);\n\t\tfor (let i = 0; i < profileKeys.length; i++) {\n\t\t\tconst key = profileKeys[i];\n\n\t\t\tif (key.match(/\\./)) {\n\t\t\t\tprofile[key.replace(/\\./g, '-')] = profile[key];\n\t\t\t\tdelete profile[key];\n\t\t\t}\n\t\t}\n\n\t\tSAMLUtils.log({ msg: 'NameID', profile });\n\t\treturn callback(null, profile, false);\n\t}\n\n\tprivate _checkLogoutResponse(doc: Document, callback: IResponseValidateCallback): void {\n\t\tconst logoutResponse = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'LogoutResponse');\n\t\tif (!logoutResponse.length) {\n\t\t\treturn callback(new Error('Unknown SAML response message'), null, false);\n\t\t}\n\n\t\tSAMLUtils.log('Verify status');\n\t\tconst statusValidateObj = SAMLUtils.validateStatus(doc);\n\t\tif (!statusValidateObj.success) {\n\t\t\treturn callback(new Error(`Status is: ${statusValidateObj.statusCode}`), null, false);\n\t\t}\n\t\tSAMLUtils.log('Status ok');\n\n\t\t// @ToDo: Check if this situation is still used\n\t\treturn callback(null, null, true);\n\t}\n\n\tprivate getAssertion(response: Element, xml: string): ISAMLAssertion {\n\t\tconst allAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n\t\tconst allEncrypedAssertions = response.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedAssertion');\n\n\t\tif (allAssertions.length + allEncrypedAssertions.length > 1) {\n\t\t\tthrow new Error('Too many SAML assertions');\n\t\t}\n\n\t\tlet assertion: XmlParent = allAssertions[0];\n\t\tconst encAssertion = allEncrypedAssertions[0];\n\t\tlet newXml = null;\n\n\t\tif (typeof encAssertion !== 'undefined') {\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\tconst encData = encAssertion.getElementsByTagNameNS('*', 'EncryptedData')[0];\n\t\t\txmlenc.decrypt(encData, options, function (err, result) {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t}\n\n\t\t\t\tconst document = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n\t\t\t\tif (!document) {\n\t\t\t\t\tthrow new Error('Failed to decrypt SAML assertion');\n\t\t\t\t}\n\n\t\t\t\tconst decryptedAssertions = document.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Assertion');\n\t\t\t\tif (decryptedAssertions.length) {\n\t\t\t\t\tassertion = decryptedAssertions[0];\n\t\t\t\t}\n\n\t\t\t\tnewXml = result;\n\t\t\t});\n\t\t}\n\n\t\tif (!assertion) {\n\t\t\tthrow new Error('Missing SAML assertion');\n\t\t}\n\n\t\treturn {\n\t\t\tassertion,\n\t\t\txml: newXml || xml,\n\t\t};\n\t}\n\n\tprivate verifySignatures(response: Element, assertionData: ISAMLAssertion, xml: string): void {\n\t\tif (!this.serviceProviderOptions.cert) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst signatureType = this.serviceProviderOptions.signatureValidationType;\n\n\t\tconst checkEither = signatureType === 'Either';\n\t\tconst checkResponse = signatureType === 'Response' || signatureType === 'All' || checkEither;\n\t\tconst checkAssertion = signatureType === 'Assertion' || signatureType === 'All' || checkEither;\n\t\tlet anyValidSignature = false;\n\n\t\tif (checkResponse) {\n\t\t\tSAMLUtils.log('Verify Document Signature');\n\t\t\tif (!this.validateResponseSignature(xml, this.serviceProviderOptions.cert, response)) {\n\t\t\t\tif (!checkEither) {\n\t\t\t\t\tSAMLUtils.log('Document Signature WRONG');\n\t\t\t\t\tthrow new Error('Invalid Signature');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanyValidSignature = true;\n\t\t\t}\n\t\t\tSAMLUtils.log('Document Signature OK');\n\t\t}\n\n\t\tif (checkAssertion) {\n\t\t\tSAMLUtils.log('Verify Assertion Signature');\n\t\t\tif (!this.validateAssertionSignature(assertionData.xml, this.serviceProviderOptions.cert, assertionData.assertion)) {\n\t\t\t\tif (!checkEither) {\n\t\t\t\t\tSAMLUtils.log('Assertion Signature WRONG');\n\t\t\t\t\tthrow new Error('Invalid Assertion signature');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanyValidSignature = true;\n\t\t\t}\n\t\t\tSAMLUtils.log('Assertion Signature OK');\n\t\t}\n\n\t\tif (checkEither && !anyValidSignature) {\n\t\t\tSAMLUtils.log('No Valid Signature');\n\t\t\tthrow new Error('No valid SAML Signature found');\n\t\t}\n\t}\n\n\tprivate validateResponseSignature(xml: string, cert: string, response: Element): boolean {\n\t\treturn this.validateSignatureChildren(xml, cert, response);\n\t}\n\n\tprivate validateAssertionSignature(xml: string, cert: string, assertion: XmlParent): boolean {\n\t\treturn this.validateSignatureChildren(xml, cert, assertion);\n\t}\n\n\tprivate validateSignatureChildren(xml: string, cert: string, parent: XmlParent): boolean {\n\t\tconst xpathSigQuery = \".//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\";\n\t\tconst signatures = xmlCrypto.xpath(parent, xpathSigQuery) as Array<Element>;\n\t\tlet signature = null;\n\n\t\tfor (const sign of signatures) {\n\t\t\tif (sign.parentNode !== parent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Too many signatures\n\t\t\tif (signature) {\n\t\t\t\tSAMLUtils.log('Failed to validate SAML signature: Too Many Signatures');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tsignature = sign;\n\t\t}\n\n\t\tif (!signature) {\n\t\t\tSAMLUtils.log('Failed to validate SAML signature: Signature not found');\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.validateSignature(xml, cert, signature);\n\t}\n\n\tprivate validateSignature(xml: string, cert: string, signature: Element): any {\n\t\tconst sig = new xmlCrypto.SignedXml();\n\n\t\tsig.keyInfoProvider = {\n\t\t\tgetKeyInfo: (/* key*/): string => '<X509Data></X509Data>',\n\t\t\t// @ts-ignore - the definition file must be wrong\n\t\t\tgetKey: (/* keyInfo*/): string => SAMLUtils.certToPEM(cert),\n\t\t};\n\n\t\tsig.loadSignature(signature);\n\n\t\tconst result = sig.checkSignature(xml);\n\t\tif (!result && sig.validationErrors) {\n\t\t\tSAMLUtils.log(sig.validationErrors);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getIssuer(assertion: XmlParent): any {\n\t\tconst issuers = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Issuer');\n\t\tif (issuers.length > 1) {\n\t\t\tthrow new Error('Too many Issuers');\n\t\t}\n\n\t\treturn issuers[0];\n\t}\n\n\tprivate getSubject(assertion: XmlParent): XmlParent {\n\t\tlet subject: XmlParent = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Subject')[0];\n\t\tconst encSubject = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'EncryptedID')[0];\n\n\t\tif (typeof encSubject !== 'undefined') {\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\txmlenc.decrypt(encSubject.getElementsByTagNameNS('*', 'EncryptedData')[0], options, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t}\n\t\t\t\tsubject = new xmldom.DOMParser().parseFromString(result, 'text/xml');\n\t\t\t});\n\t\t}\n\n\t\treturn subject;\n\t}\n\n\tprivate validateSubjectConditions(subject: XmlParent): void {\n\t\tconst subjectConfirmation = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'SubjectConfirmation')[0];\n\t\tif (subjectConfirmation) {\n\t\t\tconst subjectConfirmationData = subjectConfirmation.getElementsByTagNameNS(\n\t\t\t\t'urn:oasis:names:tc:SAML:2.0:assertion',\n\t\t\t\t'SubjectConfirmationData',\n\t\t\t)[0];\n\t\t\tif (subjectConfirmationData && !this.validateNotBeforeNotOnOrAfterAssertions(subjectConfirmationData)) {\n\t\t\t\tthrow new Error('NotBefore / NotOnOrAfter assertion failed');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateNotBeforeNotOnOrAfterAssertions(element: Element): boolean {\n\t\tconst sysnow = new Date();\n\t\tconst allowedclockdrift = this.serviceProviderOptions.allowedClockDrift || 0;\n\n\t\tconst now = new Date(sysnow.getTime() + allowedclockdrift);\n\n\t\tif (element.hasAttribute('NotBefore')) {\n\t\t\tconst notBefore: string | null = element.getAttribute('NotBefore');\n\n\t\t\tif (!notBefore) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst date = new Date(notBefore);\n\t\t\tif (now < date) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (element.hasAttribute('NotOnOrAfter')) {\n\t\t\tconst notOnOrAfter: string | null = element.getAttribute('NotOnOrAfter');\n\t\t\tif (!notOnOrAfter) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst date = new Date(notOnOrAfter);\n\n\t\t\tif (now >= date) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate validateAssertionConditions(assertion: XmlParent): void {\n\t\tconst conditions = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Conditions')[0];\n\t\tif (conditions && !this.validateNotBeforeNotOnOrAfterAssertions(conditions)) {\n\t\t\tthrow new Error('NotBefore / NotOnOrAfter assertion failed');\n\t\t}\n\t}\n\n\tprivate mapAttributes(attributeStatement: Element, profile: Record<string, any>): void {\n\t\tSAMLUtils.log(`Attribute Statement found in SAML response: ${attributeStatement}`);\n\t\tconst attributes = attributeStatement.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'Attribute');\n\t\tSAMLUtils.log(`Attributes will be processed: ${attributes.length}`);\n\n\t\tif (attributes) {\n\t\t\tfor (let i = 0; i < attributes.length; i++) {\n\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tlet value;\n\t\t\t\tif (values.length === 1) {\n\t\t\t\t\tvalue = values[0].textContent;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = [];\n\t\t\t\t\tfor (let j = 0; j < values.length; j++) {\n\t\t\t\t\t\tvalue.push(values[j].textContent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst key = attributes[i].getAttribute('Name');\n\t\t\t\tif (key) {\n\t\t\t\t\tSAMLUtils.log(`Name:  ${attributes[i]}`);\n\t\t\t\t\tSAMLUtils.log(`Adding attribute from SAML response to profile: ${key} = ${value}`);\n\t\t\t\t\tprofile[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tSAMLUtils.log('No Attributes found in SAML attribute statement.');\n\t\t}\n\n\t\tif (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\n\t\t\t// See http://www.incommonfederation.org/attributesummary.html for definition of attribute OIDs\n\t\t\tprofile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\n\t\t}\n\n\t\tif (!profile.email && profile['urn:oid:1.2.840.113549.1.9.1']) {\n\t\t\tprofile.email = profile['urn:oid:1.2.840.113549.1.9.1'];\n\t\t}\n\n\t\tif (!profile.displayName && profile['urn:oid:2.16.840.1.113730.3.1.241']) {\n\t\t\tprofile.displayName = profile['urn:oid:2.16.840.1.113730.3.1.241'];\n\t\t}\n\n\t\tif (!profile.eppn && profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6']) {\n\t\t\tprofile.eppn = profile['urn:oid:1.3.6.1.4.1.5923.1.1.1.6'];\n\t\t}\n\n\t\tif (!profile.email && profile.mail) {\n\t\t\tprofile.email = profile.mail;\n\t\t}\n\n\t\tif (!profile.cn && profile['urn:oid:2.5.4.3']) {\n\t\t\tprofile.cn = profile['urn:oid:2.5.4.3'];\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"a202d0c9a3af306477059e742b2f220fb45ac58d"}
