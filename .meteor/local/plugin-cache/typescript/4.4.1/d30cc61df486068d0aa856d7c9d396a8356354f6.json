{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/teams-mention/server/index.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/teams-mention/server/index.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/teams-mention/server/index.ts","inputSourceMap":{"version":3,"file":"ee/app/teams-mention/server/index.ts","sourceRoot":"","sources":["ee/app/teams-mention/server/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;AAC7D,OAAO,EAAE,cAAc,EAAE,MAAM,wCAAwC,CAAC;AACxE,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAU9C,SAAS,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/B,qCAAqC;IACrC,uBAAuB,CAAC,eAAe,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;IACzE,uBAAuB,CAAC,eAAe,EAAE,cAAc,EAAE,wBAAwB,CAAC,CAAC;IAEnF,SAAS,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,UAAoB,EAAE,KAAiC,EAAE,EAAE;QAC9F,MAAM,EAAE,aAAa,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;QAEtC,MAAM,OAAO,GAAG,aAAa,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QAE3F,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE;YACrB,OAAO,UAAU,CAAC;SAClB;QAED,MAAM,OAAO,GAAkB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/G,UAAU,CAAC,IAAI,CACd,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,EAAsB,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAC5H,CAAC;QAEF,OAAO,UAAU,CAAC;IACnB,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { onLicense } from '../../license/server';\nimport { overwriteClassOnLicense } from '../../license/server/license';\nimport { SpotlightEnterprise } from './EESpotlight';\nimport { Spotlight } from '../../../../server/lib/spotlight';\nimport { MentionQueries } from '../../../../app/mentions/server/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { MentionQueriesEnterprise } from './EEMentionQueries';\nimport { Team } from '../../../../server/sdk';\nimport { ITeamMember } from '../../../../definition/ITeam';\nimport { IMessage } from '../../../../definition/IMessage';\n\ninterface IExtraDataForNotification {\n\tuserMentions: any[];\n\totherMentions: any[];\n\tmessage: IMessage;\n}\n\nonLicense('teams-mention', () => {\n\t// Override spotlight with EE version\n\toverwriteClassOnLicense('teams-mention', Spotlight, SpotlightEnterprise);\n\toverwriteClassOnLicense('teams-mention', MentionQueries, MentionQueriesEnterprise);\n\n\tcallbacks.add('beforeGetMentions', (mentionIds: string[], extra?: IExtraDataForNotification) => {\n\t\tconst { otherMentions } = extra ?? {};\n\n\t\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);\n\n\t\tif (!teamIds?.length) {\n\t\t\treturn mentionIds;\n\t\t}\n\n\t\tconst members: ITeamMember[] = Promise.await(Team.getMembersByTeamIds(teamIds, { projection: { userId: 1 } }));\n\t\tmentionIds.push(\n\t\t\t...new Set(members.map(({ userId }: { userId: string }) => userId).filter((userId: string) => !mentionIds.includes(userId))),\n\t\t);\n\n\t\treturn mentionIds;\n\t});\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/teams-mention/server/index.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/teams-mention/server/index.ts"}},"code":"let onLicense;\nmodule.link(\"../../license/server\", {\n  onLicense(v) {\n    onLicense = v;\n  }\n\n}, 0);\nlet overwriteClassOnLicense;\nmodule.link(\"../../license/server/license\", {\n  overwriteClassOnLicense(v) {\n    overwriteClassOnLicense = v;\n  }\n\n}, 1);\nlet SpotlightEnterprise;\nmodule.link(\"./EESpotlight\", {\n  SpotlightEnterprise(v) {\n    SpotlightEnterprise = v;\n  }\n\n}, 2);\nlet Spotlight;\nmodule.link(\"../../../../server/lib/spotlight\", {\n  Spotlight(v) {\n    Spotlight = v;\n  }\n\n}, 3);\nlet MentionQueries;\nmodule.link(\"../../../../app/mentions/server/server\", {\n  MentionQueries(v) {\n    MentionQueries = v;\n  }\n\n}, 4);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 5);\nlet MentionQueriesEnterprise;\nmodule.link(\"./EEMentionQueries\", {\n  MentionQueriesEnterprise(v) {\n    MentionQueriesEnterprise = v;\n  }\n\n}, 6);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 7);\nonLicense('teams-mention', () => {\n  // Override spotlight with EE version\n  overwriteClassOnLicense('teams-mention', Spotlight, SpotlightEnterprise);\n  overwriteClassOnLicense('teams-mention', MentionQueries, MentionQueriesEnterprise);\n  callbacks.add('beforeGetMentions', (mentionIds, extra) => {\n    const {\n      otherMentions\n    } = extra !== null && extra !== void 0 ? extra : {};\n    const teamIds = otherMentions === null || otherMentions === void 0 ? void 0 : otherMentions.filter(_ref => {\n      let {\n        type\n      } = _ref;\n      return type === 'team';\n    }).map(_ref2 => {\n      let {\n        _id\n      } = _ref2;\n      return _id;\n    });\n\n    if (!(teamIds !== null && teamIds !== void 0 && teamIds.length)) {\n      return mentionIds;\n    }\n\n    const members = Promise.await(Team.getMembersByTeamIds(teamIds, {\n      projection: {\n        userId: 1\n      }\n    }));\n    mentionIds.push(...new Set(members.map(_ref3 => {\n      let {\n        userId\n      } = _ref3;\n      return userId;\n    }).filter(userId => !mentionIds.includes(userId))));\n    return mentionIds;\n  });\n});","map":{"version":3,"sources":["ee/app/teams-mention/server/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { onLicense } from '../../license/server';\nimport { overwriteClassOnLicense } from '../../license/server/license';\nimport { SpotlightEnterprise } from './EESpotlight';\nimport { Spotlight } from '../../../../server/lib/spotlight';\nimport { MentionQueries } from '../../../../app/mentions/server/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { MentionQueriesEnterprise } from './EEMentionQueries';\nimport { Team } from '../../../../server/sdk';\nimport { ITeamMember } from '../../../../definition/ITeam';\nimport { IMessage } from '../../../../definition/IMessage';\n\ninterface IExtraDataForNotification {\n\tuserMentions: any[];\n\totherMentions: any[];\n\tmessage: IMessage;\n}\n\nonLicense('teams-mention', () => {\n\t// Override spotlight with EE version\n\toverwriteClassOnLicense('teams-mention', Spotlight, SpotlightEnterprise);\n\toverwriteClassOnLicense('teams-mention', MentionQueries, MentionQueriesEnterprise);\n\n\tcallbacks.add('beforeGetMentions', (mentionIds: string[], extra?: IExtraDataForNotification) => {\n\t\tconst { otherMentions } = extra ?? {};\n\n\t\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);\n\n\t\tif (!teamIds?.length) {\n\t\t\treturn mentionIds;\n\t\t}\n\n\t\tconst members: ITeamMember[] = Promise.await(Team.getMembersByTeamIds(teamIds, { projection: { userId: 1 } }));\n\t\tmentionIds.push(\n\t\t\t...new Set(members.map(({ userId }: { userId: string }) => userId).filter((userId: string) => !mentionIds.includes(userId))),\n\t\t);\n\n\t\treturn mentionIds;\n\t});\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"d30cc61df486068d0aa856d7c9d396a8356354f6"}
