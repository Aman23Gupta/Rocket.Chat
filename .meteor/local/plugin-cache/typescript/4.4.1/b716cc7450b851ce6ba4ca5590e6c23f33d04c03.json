{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/NpsVote.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/NpsVote.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/NpsVote.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/NpsVote.ts","sourceRoot":"","sources":["app/models/server/raw/NpsVote.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectId, Collection, Cursor, FindOneOptions, UpdateWriteOpResult, WithoutProjection } from 'mongodb';\n\nimport { INpsVote, INpsVoteStatus } from '../../../../definition/INps';\nimport { BaseRaw } from './BaseRaw';\n\ntype T = INpsVote;\nexport class NpsVoteRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { npsId: 1, status: 1, sentAt: 1 } }, { key: { npsId: 1, identifier: 1 } }]);\n\t}\n\n\tfindNotSentByNpsId(npsId: string, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\treturn this.col.find(query, options).sort({ ts: 1 }).limit(1000);\n\t}\n\n\tfindByNpsIdAndStatus(npsId: string, status: INpsVoteStatus, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\treturn this.col.find(query, options);\n\t}\n\n\tfindByNpsId(npsId: string, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\treturn this.col.find(query, options);\n\t}\n\n\tsave(vote: Omit<T, '_id' | '_updatedAt'>): Promise<UpdateWriteOpResult> {\n\t\tconst { npsId, identifier } = vote;\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...vote,\n\t\t\t\t_updatedAt: new Date(),\n\t\t\t},\n\t\t\t$setOnInsert: {\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateOne(query, update, { upsert: true });\n\t}\n\n\tupdateVotesToSent(voteIds: string[]): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\t_id: { $in: voteIds },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.SENT,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateMany(query, update);\n\t}\n\n\tupdateOldSendingToNewByNpsId(npsId: string): Promise<UpdateWriteOpResult> {\n\t\tconst fiveMinutes = new Date();\n\t\tfiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\tsentAt: { $lt: fiveMinutes },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tsentAt: 1 as 1, // why do you do this to me TypeScript?\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/NpsVote.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/NpsVote.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  NpsVoteRaw: () => NpsVoteRaw\n});\nlet ObjectId;\nmodule.link(\"mongodb\", {\n  ObjectId(v) {\n    ObjectId = v;\n  }\n\n}, 0);\nlet INpsVoteStatus;\nmodule.link(\"../../../../definition/INps\", {\n  INpsVoteStatus(v) {\n    INpsVoteStatus = v;\n  }\n\n}, 1);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 2);\n\nclass NpsVoteRaw extends BaseRaw {\n  constructor(col, trash) {\n    super(col, trash);\n    this.col = void 0;\n    this.col = col;\n    this.col.createIndexes([{\n      key: {\n        npsId: 1,\n        status: 1,\n        sentAt: 1\n      }\n    }, {\n      key: {\n        npsId: 1,\n        identifier: 1\n      }\n    }]);\n  }\n\n  findNotSentByNpsId(npsId, options) {\n    const query = {\n      npsId,\n      status: INpsVoteStatus.NEW\n    };\n    return this.col.find(query, options).sort({\n      ts: 1\n    }).limit(1000);\n  }\n\n  findByNpsIdAndStatus(npsId, status, options) {\n    const query = {\n      npsId,\n      status\n    };\n    return this.col.find(query, options);\n  }\n\n  findByNpsId(npsId, options) {\n    const query = {\n      npsId\n    };\n    return this.col.find(query, options);\n  }\n\n  save(vote) {\n    const {\n      npsId,\n      identifier\n    } = vote;\n    const query = {\n      npsId,\n      identifier\n    };\n    const update = {\n      $set: _objectSpread(_objectSpread({}, vote), {}, {\n        _updatedAt: new Date()\n      }),\n      $setOnInsert: {\n        _id: new ObjectId().toHexString()\n      }\n    };\n    return this.col.updateOne(query, update, {\n      upsert: true\n    });\n  }\n\n  updateVotesToSent(voteIds) {\n    const query = {\n      _id: {\n        $in: voteIds\n      }\n    };\n    const update = {\n      $set: {\n        status: INpsVoteStatus.SENT\n      }\n    };\n    return this.col.updateMany(query, update);\n  }\n\n  updateOldSendingToNewByNpsId(npsId) {\n    const fiveMinutes = new Date();\n    fiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n    const query = {\n      npsId,\n      status: INpsVoteStatus.SENDING,\n      sentAt: {\n        $lt: fiveMinutes\n      }\n    };\n    const update = {\n      $set: {\n        status: INpsVoteStatus.NEW\n      },\n      $unset: {\n        sentAt: 1 // why do you do this to me TypeScript?\n\n      }\n    };\n    return this.col.updateMany(query, update);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/NpsVote.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectId, Collection, Cursor, FindOneOptions, UpdateWriteOpResult, WithoutProjection } from 'mongodb';\n\nimport { INpsVote, INpsVoteStatus } from '../../../../definition/INps';\nimport { BaseRaw } from './BaseRaw';\n\ntype T = INpsVote;\nexport class NpsVoteRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { npsId: 1, status: 1, sentAt: 1 } }, { key: { npsId: 1, identifier: 1 } }]);\n\t}\n\n\tfindNotSentByNpsId(npsId: string, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\treturn this.col.find(query, options).sort({ ts: 1 }).limit(1000);\n\t}\n\n\tfindByNpsIdAndStatus(npsId: string, status: INpsVoteStatus, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\treturn this.col.find(query, options);\n\t}\n\n\tfindByNpsId(npsId: string, options?: WithoutProjection<FindOneOptions<T>>): Cursor<T> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\treturn this.col.find(query, options);\n\t}\n\n\tsave(vote: Omit<T, '_id' | '_updatedAt'>): Promise<UpdateWriteOpResult> {\n\t\tconst { npsId, identifier } = vote;\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...vote,\n\t\t\t\t_updatedAt: new Date(),\n\t\t\t},\n\t\t\t$setOnInsert: {\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateOne(query, update, { upsert: true });\n\t}\n\n\tupdateVotesToSent(voteIds: string[]): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\t_id: { $in: voteIds },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.SENT,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateMany(query, update);\n\t}\n\n\tupdateOldSendingToNewByNpsId(npsId: string): Promise<UpdateWriteOpResult> {\n\t\tconst fiveMinutes = new Date();\n\t\tfiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\tsentAt: { $lt: fiveMinutes },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tsentAt: 1 as 1, // why do you do this to me TypeScript?\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"b716cc7450b851ce6ba4ca5590e6c23f33d04c03"}
