{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Multiple.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { AbstractBusinessHourBehavior, IBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../../definition/ILivechatBusinessHour';\nimport { LivechatDepartmentRaw } from '../../../../../app/models/server/raw/LivechatDepartment';\nimport { LivechatDepartmentAgentsRaw } from '../../../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { LivechatDepartment, LivechatDepartmentAgents } from '../../../../../app/models/server/raw';\nimport { filterBusinessHoursThatMustBeOpened } from '../../../../../app/livechat/server/business-hour/Helper';\nimport { closeBusinessHour, openBusinessHour, removeBusinessHourByAgentIds } from './Helper';\nimport { ILivechatDepartment } from '../../../../../definition/ILivechatDepartment';\nimport { bhLogger } from '../lib/logger';\n\ninterface IBusinessHoursExtraProperties extends ILivechatBusinessHour {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n}\n\nexport class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior implements IBusinessHourBehavior {\n\tprivate DepartmentsRepository: LivechatDepartmentRaw = LivechatDepartment;\n\n\tprivate DepartmentsAgentsRepository: LivechatDepartmentAgentsRaw = LivechatDepartmentAgents;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n\t\tthis.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n\t\tthis.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n\t}\n\n\tasync onStartBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t\tawait this.UsersRepository.updateLivechatStatusBasedOnBusinessHours();\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tfields: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tfor (const businessHour of businessHoursToOpen) {\n\t\t\tthis.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync openBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tthis.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync closeBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tthis.closeBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync afterSaveBusinessHours(businessHourData: IBusinessHoursExtraProperties): Promise<void> {\n\t\tconst departments = businessHourData.departmentsToApplyBusinessHour?.split(',').filter(Boolean);\n\t\tconst currentDepartments = businessHourData.departments?.map((dept: any) => dept._id);\n\t\tconst toRemove = [...(currentDepartments || []).filter((dept: Record<string, any>) => !departments.includes(dept._id))];\n\t\tawait this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tconst businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map((businessHour) => businessHour._id);\n\t\tif (!businessHourIdToOpen.length) {\n\t\t\treturn closeBusinessHour(businessHour);\n\t\t}\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tasync onAddAgentToDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await this.DepartmentsRepository.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tawait removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\t\tif (!department.businessHourId) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n\t\treturn options;\n\t}\n\n\tasync onRemoveAgentFromDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await this.DepartmentsRepository.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tfields: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n\t}\n\n\tasync onRemoveDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { department, agentsIds } = options;\n\t\tif (!department || !agentsIds?.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst deletedDepartment = LivechatDepartment.trashFindOneById(department._id);\n\t\treturn this.handleRemoveAgentsFromDepartments(deletedDepartment, agentsIds, options);\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\tconst isWithinBushinessHours = await this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t\tif (isWithinBushinessHours) {\n\t\t\treturn true;\n\t\t}\n\n\t\tbhLogger.debug(`No active business hour found for agent with id: ${agentId} based on user's cache. Attempting to recheck the status`);\n\n\t\t// double check to see if user is actually within business hours\n\t\t// this is required since the cache of businessHour Ids we maintain within user's collection might be stale\n\t\t// in many scenario's like, if the agent is created when a business is active,\n\t\t// or if a normal user is converted to agent when a business hour is active\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tfields: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst openedBusinessHours = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tif (!openedBusinessHours.length) {\n\t\t\tbhLogger.debug(`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },\n\t\t\t{ projection: { agentId: 1, departmentId: 1 } },\n\t\t).toArray();\n\n\t\tif (agentDepartments.length) {\n\t\t\t// check if any one these departments have a opened business hour linked to it\n\t\t\tconst departmentsWithActiveBH = await LivechatDepartment.findEnabledByListOfBusinessHourIdsAndDepartmentIds(\n\t\t\t\topenedBusinessHours.map(({ _id }) => _id),\n\t\t\t\tagentDepartments.map(({ departmentId }) => departmentId),\n\t\t\t\t{ projection: { _id: 1, businessHourId: 1 } },\n\t\t\t).toArray();\n\n\t\t\tif (!departmentsWithActiveBH.length) {\n\t\t\t\tbhLogger.debug(\n\t\t\t\t\t`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found for any of the departments connected to the agent`,\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId);\n\t\t\tawait this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n\n\t\t\tbhLogger.debug(\n\t\t\t\t`Business hour status recheck passed for agentId: ${agentId}. Found following business hours to be active:`,\n\t\t\t\tactiveBusinessHoursForAgent,\n\t\t\t);\n\t\t\treturn true;\n\t\t}\n\n\t\t// check if default businessHour is active\n\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\tif (isDefaultBHActive?._id) {\n\t\t\tawait this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\n\t\t\tbhLogger.debug(`Business hour status recheck passed for agentId: ${agentId}. Found default business hour to be active`);\n\t\t\treturn true;\n\t\t}\n\n\t\tbhLogger.debug(`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found`);\n\n\t\treturn false;\n\t}\n\n\tprivate async handleRemoveAgentsFromDepartments(department: Record<string, any>, agentsIds: string[], options: any): Promise<any> {\n\t\tconst agentIdsWithoutDepartment = [];\n\t\tconst agentIdsToRemoveCurrentBusinessHour = [];\n\t\tfor await (const agentId of agentsIds) {\n\t\t\tif ((await this.DepartmentsAgentsRepository.findByAgentId(agentId).count()) === 0) {\n\t\t\t\tagentIdsWithoutDepartment.push(agentId);\n\t\t\t}\n\t\t\tif (!(await this.DepartmentsAgentsRepository.findAgentsByAgentIdAndBusinessHourId(agentId, department.businessHourId)).length) {\n\t\t\t\t// eslint-disable-line no-await-in-loop\n\t\t\t\tagentIdsToRemoveCurrentBusinessHour.push(agentId);\n\t\t\t}\n\t\t}\n\t\tif (department.businessHourId) {\n\t\t\tawait removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n\t\t}\n\t\tif (!agentIdsWithoutDepartment.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n\t\treturn options;\n\t}\n\n\tprivate async openBusinessHour(businessHour: Record<string, any>): Promise<void> {\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tprivate async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(\n\t\tbusinessHourId: string,\n\t\tdepartmentsToRemove: string[],\n\t): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst agentIds = (await this.DepartmentsAgentsRepository.findByDepartmentIds(departmentsToRemove).toArray()).map(\n\t\t\t(dept: any) => dept.agentId,\n\t\t);\n\t\tawait removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async closeBusinessHour(businessHour: Record<string, any>): Promise<void> {\n\t\tcloseBusinessHour(businessHour);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  MultipleBusinessHoursBehavior: () => MultipleBusinessHoursBehavior\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet AbstractBusinessHourBehavior;\nmodule.link(\"../../../../../app/livechat/server/business-hour/AbstractBusinessHour\", {\n  AbstractBusinessHourBehavior(v) {\n    AbstractBusinessHourBehavior = v;\n  }\n\n}, 1);\nlet LivechatBusinessHourTypes;\nmodule.link(\"../../../../../definition/ILivechatBusinessHour\", {\n  LivechatBusinessHourTypes(v) {\n    LivechatBusinessHourTypes = v;\n  }\n\n}, 2);\nlet LivechatDepartment, LivechatDepartmentAgents;\nmodule.link(\"../../../../../app/models/server/raw\", {\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  LivechatDepartmentAgents(v) {\n    LivechatDepartmentAgents = v;\n  }\n\n}, 3);\nlet filterBusinessHoursThatMustBeOpened;\nmodule.link(\"../../../../../app/livechat/server/business-hour/Helper\", {\n  filterBusinessHoursThatMustBeOpened(v) {\n    filterBusinessHoursThatMustBeOpened = v;\n  }\n\n}, 4);\nlet closeBusinessHour, openBusinessHour, removeBusinessHourByAgentIds;\nmodule.link(\"./Helper\", {\n  closeBusinessHour(v) {\n    closeBusinessHour = v;\n  },\n\n  openBusinessHour(v) {\n    openBusinessHour = v;\n  },\n\n  removeBusinessHourByAgentIds(v) {\n    removeBusinessHourByAgentIds = v;\n  }\n\n}, 5);\nlet bhLogger;\nmodule.link(\"../lib/logger\", {\n  bhLogger(v) {\n    bhLogger = v;\n  }\n\n}, 6);\n\nclass MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior {\n  constructor() {\n    super();\n    this.DepartmentsRepository = LivechatDepartment;\n    this.DepartmentsAgentsRepository = LivechatDepartmentAgents;\n    this.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n    this.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n    this.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n  }\n\n  onStartBusinessHours() {\n    return Promise.asyncApply(() => {\n      Promise.await(this.UsersRepository.removeBusinessHoursFromAllUsers());\n      Promise.await(this.UsersRepository.updateLivechatStatusBasedOnBusinessHours());\n      const currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n      const day = currentTime.format('dddd');\n      const activeBusinessHours = Promise.await(this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n        fields: {\n          workHours: 1,\n          timezone: 1,\n          type: 1,\n          active: 1\n        }\n      }));\n      const businessHoursToOpen = Promise.await(filterBusinessHoursThatMustBeOpened(activeBusinessHours));\n\n      for (const businessHour of businessHoursToOpen) {\n        this.openBusinessHour(businessHour);\n      }\n    });\n  }\n\n  openBusinessHoursByDayAndHour(day, hour) {\n    return Promise.asyncApply(() => {\n      const businessHours = Promise.await(this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n        fields: {\n          _id: 1,\n          type: 1\n        }\n      }));\n\n      for (const businessHour of businessHours) {\n        this.openBusinessHour(businessHour);\n      }\n    });\n  }\n\n  closeBusinessHoursByDayAndHour(day, hour) {\n    return Promise.asyncApply(() => {\n      const businessHours = Promise.await(this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n        fields: {\n          _id: 1,\n          type: 1\n        }\n      }));\n\n      for (const businessHour of businessHours) {\n        this.closeBusinessHour(businessHour);\n      }\n    });\n  }\n\n  afterSaveBusinessHours(businessHourData) {\n    return Promise.asyncApply(() => {\n      var _businessHourData$dep, _businessHourData$dep2;\n\n      const departments = (_businessHourData$dep = businessHourData.departmentsToApplyBusinessHour) === null || _businessHourData$dep === void 0 ? void 0 : _businessHourData$dep.split(',').filter(Boolean);\n      const currentDepartments = (_businessHourData$dep2 = businessHourData.departments) === null || _businessHourData$dep2 === void 0 ? void 0 : _businessHourData$dep2.map(dept => dept._id);\n      const toRemove = [...(currentDepartments || []).filter(dept => !departments.includes(dept._id))];\n      Promise.await(this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove));\n      const businessHour = Promise.await(this.BusinessHourRepository.findOneById(businessHourData._id));\n\n      if (!businessHour) {\n        return;\n      }\n\n      const businessHourIdToOpen = Promise.await(filterBusinessHoursThatMustBeOpened([businessHour])).map(businessHour => businessHour._id);\n\n      if (!businessHourIdToOpen.length) {\n        return closeBusinessHour(businessHour);\n      }\n\n      return openBusinessHour(businessHour);\n    });\n  }\n\n  onAddAgentToDepartment() {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        departmentId,\n        agentsId\n      } = options;\n      const department = Promise.await(this.DepartmentsRepository.findOneById(departmentId, {\n        projection: {\n          businessHourId: 1\n        }\n      }));\n\n      if (!department || !agentsId.length) {\n        return options;\n      }\n\n      const defaultBusinessHour = Promise.await(this.BusinessHourRepository.findOneDefaultBusinessHour());\n\n      if (!defaultBusinessHour) {\n        return options;\n      }\n\n      Promise.await(removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id));\n\n      if (!department.businessHourId) {\n        return options;\n      }\n\n      const businessHour = Promise.await(this.BusinessHourRepository.findOneById(department.businessHourId));\n\n      if (!businessHour) {\n        return options;\n      }\n\n      const businessHourToOpen = Promise.await(filterBusinessHoursThatMustBeOpened([businessHour]));\n\n      if (!businessHourToOpen.length) {\n        return options;\n      }\n\n      Promise.await(this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id));\n      return options;\n    });\n  }\n\n  onRemoveAgentFromDepartment() {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        departmentId,\n        agentsId\n      } = options;\n      const department = Promise.await(this.DepartmentsRepository.findOneById(departmentId, {\n        fields: {\n          businessHourId: 1\n        }\n      }));\n\n      if (!department || !agentsId.length) {\n        return options;\n      }\n\n      return this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n    });\n  }\n\n  onRemoveDepartment() {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        department,\n        agentsIds\n      } = options;\n\n      if (!department || !(agentsIds !== null && agentsIds !== void 0 && agentsIds.length)) {\n        return options;\n      }\n\n      const deletedDepartment = LivechatDepartment.trashFindOneById(department._id);\n      return this.handleRemoveAgentsFromDepartments(deletedDepartment, agentsIds, options);\n    });\n  }\n\n  allowAgentChangeServiceStatus(agentId) {\n    return Promise.asyncApply(() => {\n      const isWithinBushinessHours = Promise.await(this.UsersRepository.isAgentWithinBusinessHours(agentId));\n\n      if (isWithinBushinessHours) {\n        return true;\n      }\n\n      bhLogger.debug(\"No active business hour found for agent with id: \".concat(agentId, \" based on user's cache. Attempting to recheck the status\")); // double check to see if user is actually within business hours\n      // this is required since the cache of businessHour Ids we maintain within user's collection might be stale\n      // in many scenario's like, if the agent is created when a business is active,\n      // or if a normal user is converted to agent when a business hour is active\n\n      const currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n      const day = currentTime.format('dddd');\n      const activeBusinessHours = Promise.await(this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n        fields: {\n          workHours: 1,\n          timezone: 1,\n          type: 1,\n          active: 1\n        }\n      }));\n      const openedBusinessHours = Promise.await(filterBusinessHoursThatMustBeOpened(activeBusinessHours));\n\n      if (!openedBusinessHours.length) {\n        bhLogger.debug(\"Business hour status recheck failed for agentId: \".concat(agentId, \". No opened business hour found\"));\n        return false;\n      }\n\n      const agentDepartments = Promise.await(LivechatDepartmentAgents.find({\n        departmentEnabled: true,\n        agentId\n      }, {\n        projection: {\n          agentId: 1,\n          departmentId: 1\n        }\n      }).toArray());\n\n      if (agentDepartments.length) {\n        // check if any one these departments have a opened business hour linked to it\n        const departmentsWithActiveBH = Promise.await(LivechatDepartment.findEnabledByListOfBusinessHourIdsAndDepartmentIds(openedBusinessHours.map(_ref => {\n          let {\n            _id\n          } = _ref;\n          return _id;\n        }), agentDepartments.map(_ref2 => {\n          let {\n            departmentId\n          } = _ref2;\n          return departmentId;\n        }), {\n          projection: {\n            _id: 1,\n            businessHourId: 1\n          }\n        }).toArray());\n\n        if (!departmentsWithActiveBH.length) {\n          bhLogger.debug(\"Business hour status recheck failed for agentId: \".concat(agentId, \". No opened business hour found for any of the departments connected to the agent\"));\n          return false;\n        }\n\n        const activeBusinessHoursForAgent = departmentsWithActiveBH.map(_ref3 => {\n          let {\n            businessHourId\n          } = _ref3;\n          return businessHourId;\n        });\n        Promise.await(this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId));\n        bhLogger.debug(\"Business hour status recheck passed for agentId: \".concat(agentId, \". Found following business hours to be active:\"), activeBusinessHoursForAgent);\n        return true;\n      } // check if default businessHour is active\n\n\n      const isDefaultBHActive = openedBusinessHours.find(_ref4 => {\n        let {\n          type\n        } = _ref4;\n        return type === LivechatBusinessHourTypes.DEFAULT;\n      });\n\n      if (isDefaultBHActive !== null && isDefaultBHActive !== void 0 && isDefaultBHActive._id) {\n        Promise.await(this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId));\n        bhLogger.debug(\"Business hour status recheck passed for agentId: \".concat(agentId, \". Found default business hour to be active\"));\n        return true;\n      }\n\n      bhLogger.debug(\"Business hour status recheck failed for agentId: \".concat(agentId, \". No opened business hour found\"));\n      return false;\n    });\n  }\n\n  handleRemoveAgentsFromDepartments(department, agentsIds, options) {\n    return Promise.asyncApply(() => {\n      const agentIdsWithoutDepartment = [];\n      const agentIdsToRemoveCurrentBusinessHour = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(agentsIds), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const agentId = _step.value;\n\n          if (Promise.await(this.DepartmentsAgentsRepository.findByAgentId(agentId).count()) === 0) {\n            agentIdsWithoutDepartment.push(agentId);\n          }\n\n          if (!Promise.await(this.DepartmentsAgentsRepository.findAgentsByAgentIdAndBusinessHourId(agentId, department.businessHourId)).length) {\n            // eslint-disable-line no-await-in-loop\n            agentIdsToRemoveCurrentBusinessHour.push(agentId);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (department.businessHourId) {\n        Promise.await(removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId));\n      }\n\n      if (!agentIdsWithoutDepartment.length) {\n        return options;\n      }\n\n      const defaultBusinessHour = Promise.await(this.BusinessHourRepository.findOneDefaultBusinessHour());\n\n      if (!defaultBusinessHour) {\n        return options;\n      }\n\n      const businessHourToOpen = Promise.await(filterBusinessHoursThatMustBeOpened([defaultBusinessHour]));\n\n      if (!businessHourToOpen.length) {\n        return options;\n      }\n\n      Promise.await(this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id));\n      return options;\n    });\n  }\n\n  openBusinessHour(businessHour) {\n    return Promise.asyncApply(() => {\n      return openBusinessHour(businessHour);\n    });\n  }\n\n  removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourId, departmentsToRemove) {\n    return Promise.asyncApply(() => {\n      if (!departmentsToRemove.length) {\n        return;\n      }\n\n      const agentIds = Promise.await(this.DepartmentsAgentsRepository.findByDepartmentIds(departmentsToRemove).toArray()).map(dept => dept.agentId);\n      Promise.await(removeBusinessHourByAgentIds(agentIds, businessHourId));\n    });\n  }\n\n  closeBusinessHour(businessHour) {\n    return Promise.asyncApply(() => {\n      closeBusinessHour(businessHour);\n    });\n  }\n\n}","map":{"version":3,"sources":["ee/app/livechat-enterprise/server/business-hour/Multiple.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { AbstractBusinessHourBehavior, IBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { ILivechatBusinessHour, LivechatBusinessHourTypes } from '../../../../../definition/ILivechatBusinessHour';\nimport { LivechatDepartmentRaw } from '../../../../../app/models/server/raw/LivechatDepartment';\nimport { LivechatDepartmentAgentsRaw } from '../../../../../app/models/server/raw/LivechatDepartmentAgents';\nimport { LivechatDepartment, LivechatDepartmentAgents } from '../../../../../app/models/server/raw';\nimport { filterBusinessHoursThatMustBeOpened } from '../../../../../app/livechat/server/business-hour/Helper';\nimport { closeBusinessHour, openBusinessHour, removeBusinessHourByAgentIds } from './Helper';\nimport { ILivechatDepartment } from '../../../../../definition/ILivechatDepartment';\nimport { bhLogger } from '../lib/logger';\n\ninterface IBusinessHoursExtraProperties extends ILivechatBusinessHour {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n}\n\nexport class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior implements IBusinessHourBehavior {\n\tprivate DepartmentsRepository: LivechatDepartmentRaw = LivechatDepartment;\n\n\tprivate DepartmentsAgentsRepository: LivechatDepartmentAgentsRaw = LivechatDepartmentAgents;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n\t\tthis.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n\t\tthis.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n\t}\n\n\tasync onStartBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t\tawait this.UsersRepository.updateLivechatStatusBasedOnBusinessHours();\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tfields: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tfor (const businessHour of businessHoursToOpen) {\n\t\t\tthis.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync openBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tthis.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync closeBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tthis.closeBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync afterSaveBusinessHours(businessHourData: IBusinessHoursExtraProperties): Promise<void> {\n\t\tconst departments = businessHourData.departmentsToApplyBusinessHour?.split(',').filter(Boolean);\n\t\tconst currentDepartments = businessHourData.departments?.map((dept: any) => dept._id);\n\t\tconst toRemove = [...(currentDepartments || []).filter((dept: Record<string, any>) => !departments.includes(dept._id))];\n\t\tawait this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tconst businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map((businessHour) => businessHour._id);\n\t\tif (!businessHourIdToOpen.length) {\n\t\t\treturn closeBusinessHour(businessHour);\n\t\t}\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tasync onAddAgentToDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await this.DepartmentsRepository.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tawait removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\t\tif (!department.businessHourId) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n\t\treturn options;\n\t}\n\n\tasync onRemoveAgentFromDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await this.DepartmentsRepository.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tfields: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n\t}\n\n\tasync onRemoveDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { department, agentsIds } = options;\n\t\tif (!department || !agentsIds?.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst deletedDepartment = LivechatDepartment.trashFindOneById(department._id);\n\t\treturn this.handleRemoveAgentsFromDepartments(deletedDepartment, agentsIds, options);\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\tconst isWithinBushinessHours = await this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t\tif (isWithinBushinessHours) {\n\t\t\treturn true;\n\t\t}\n\n\t\tbhLogger.debug(`No active business hour found for agent with id: ${agentId} based on user's cache. Attempting to recheck the status`);\n\n\t\t// double check to see if user is actually within business hours\n\t\t// this is required since the cache of businessHour Ids we maintain within user's collection might be stale\n\t\t// in many scenario's like, if the agent is created when a business is active,\n\t\t// or if a normal user is converted to agent when a business hour is active\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tfields: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst openedBusinessHours = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tif (!openedBusinessHours.length) {\n\t\t\tbhLogger.debug(`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },\n\t\t\t{ projection: { agentId: 1, departmentId: 1 } },\n\t\t).toArray();\n\n\t\tif (agentDepartments.length) {\n\t\t\t// check if any one these departments have a opened business hour linked to it\n\t\t\tconst departmentsWithActiveBH = await LivechatDepartment.findEnabledByListOfBusinessHourIdsAndDepartmentIds(\n\t\t\t\topenedBusinessHours.map(({ _id }) => _id),\n\t\t\t\tagentDepartments.map(({ departmentId }) => departmentId),\n\t\t\t\t{ projection: { _id: 1, businessHourId: 1 } },\n\t\t\t).toArray();\n\n\t\t\tif (!departmentsWithActiveBH.length) {\n\t\t\t\tbhLogger.debug(\n\t\t\t\t\t`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found for any of the departments connected to the agent`,\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId);\n\t\t\tawait this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n\n\t\t\tbhLogger.debug(\n\t\t\t\t`Business hour status recheck passed for agentId: ${agentId}. Found following business hours to be active:`,\n\t\t\t\tactiveBusinessHoursForAgent,\n\t\t\t);\n\t\t\treturn true;\n\t\t}\n\n\t\t// check if default businessHour is active\n\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\tif (isDefaultBHActive?._id) {\n\t\t\tawait this.UsersRepository.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\n\t\t\tbhLogger.debug(`Business hour status recheck passed for agentId: ${agentId}. Found default business hour to be active`);\n\t\t\treturn true;\n\t\t}\n\n\t\tbhLogger.debug(`Business hour status recheck failed for agentId: ${agentId}. No opened business hour found`);\n\n\t\treturn false;\n\t}\n\n\tprivate async handleRemoveAgentsFromDepartments(department: Record<string, any>, agentsIds: string[], options: any): Promise<any> {\n\t\tconst agentIdsWithoutDepartment = [];\n\t\tconst agentIdsToRemoveCurrentBusinessHour = [];\n\t\tfor await (const agentId of agentsIds) {\n\t\t\tif ((await this.DepartmentsAgentsRepository.findByAgentId(agentId).count()) === 0) {\n\t\t\t\tagentIdsWithoutDepartment.push(agentId);\n\t\t\t}\n\t\t\tif (!(await this.DepartmentsAgentsRepository.findAgentsByAgentIdAndBusinessHourId(agentId, department.businessHourId)).length) {\n\t\t\t\t// eslint-disable-line no-await-in-loop\n\t\t\t\tagentIdsToRemoveCurrentBusinessHour.push(agentId);\n\t\t\t}\n\t\t}\n\t\tif (department.businessHourId) {\n\t\t\tawait removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n\t\t}\n\t\tif (!agentIdsWithoutDepartment.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n\t\treturn options;\n\t}\n\n\tprivate async openBusinessHour(businessHour: Record<string, any>): Promise<void> {\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tprivate async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(\n\t\tbusinessHourId: string,\n\t\tdepartmentsToRemove: string[],\n\t): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst agentIds = (await this.DepartmentsAgentsRepository.findByDepartmentIds(departmentsToRemove).toArray()).map(\n\t\t\t(dept: any) => dept.agentId,\n\t\t);\n\t\tawait removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async closeBusinessHour(businessHour: Record<string, any>): Promise<void> {\n\t\tcloseBusinessHour(businessHour);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"9f2a33acb5b0d60f59602050d4bd767062cee656"}
