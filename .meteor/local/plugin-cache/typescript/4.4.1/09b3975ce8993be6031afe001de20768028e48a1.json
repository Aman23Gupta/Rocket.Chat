{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Nps.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Nps.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Nps.ts","inputSourceMap":{"version":3,"file":"app/models/server/raw/Nps.ts","sourceRoot":"","sources":["app/models/server/raw/Nps.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAQ,SAAS,EAAE,MAAM,6BAA6B,CAAC;AAG9D,MAAM,OAAO,MAAO,SAAQ,OAAU;IACT;IAA5B,YAA4B,GAAkB,EAAE,KAAqB;QACpE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QADS,QAAG,GAAH,GAAG,CAAe;QAG7C,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,wCAAwC;IACxC,KAAK,CAAC,6BAA6B;QAClC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,IAAI;YACtB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QACF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,OAAO;aACzB;SACD,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAE5F,OAAO,KAAK,CAAC;IACd,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,4BAA4B;QACjC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,OAAO;YACzB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,gBAAgB,CAAC,GAAgB,EAAE,MAAsB;QACxD,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM;aACN;SACD,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC,EACJ,GAAG,EACH,OAAO,EACP,QAAQ,EACR,SAAS,EACT,MAAM,GAC+D;QACrE,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CACxB;YACC,GAAG;SACH,EACD;YACC,IAAI,EAAE;gBACL,OAAO;gBACP,UAAU,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,YAAY,EAAE;gBACb,QAAQ;gBACR,SAAS;gBACT,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM;aACN;SACD,EACD;YACC,MAAM,EAAE,IAAI;SACZ,CACD,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,MAAiB;QACjC,MAAM,KAAK,GAAG;YACb,MAAM;SACN,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,MAAM;aACxB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;CACD","sourcesContent":["import { UpdateWriteOpResult, Collection } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { INps, NPSStatus } from '../../../../definition/INps';\n\ntype T = INps;\nexport class NpsRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { status: 1, expireAt: 1 } }]);\n\t}\n\n\t// get expired surveys still in progress\n\tasync getOpenExpiredAndStartSending(): Promise<INps | undefined> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.SENDING,\n\t\t\t},\n\t\t};\n\t\tconst { value } = await this.col.findOneAndUpdate(query, update, { sort: { expireAt: 1 } });\n\n\t\treturn value;\n\t}\n\n\t// get expired surveys already sending results\n\tasync getOpenExpiredAlreadySending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.SENDING,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\n\t\treturn this.col.findOne(query);\n\t}\n\n\tupdateStatusById(_id: INps['_id'], status: INps['status']): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tsave({\n\t\t_id,\n\t\tstartAt,\n\t\texpireAt,\n\t\tcreatedBy,\n\t\tstatus,\n\t}: Pick<INps, '_id' | 'startAt' | 'expireAt' | 'createdBy' | 'status'>): Promise<UpdateWriteOpResult> {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstartAt,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\texpireAt,\n\t\t\t\t\tcreatedBy,\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\tstatus,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseAllByStatus(status: NPSStatus): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tstatus,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.CLOSED,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Nps.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Nps.ts"}},"code":"module.export({\n  NpsRaw: () => NpsRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\nlet NPSStatus;\nmodule.link(\"../../../../definition/INps\", {\n  NPSStatus(v) {\n    NPSStatus = v;\n  }\n\n}, 1);\n\nclass NpsRaw extends BaseRaw {\n  constructor(col, trash) {\n    super(col, trash);\n    this.col = void 0;\n    this.col = col;\n    this.col.createIndexes([{\n      key: {\n        status: 1,\n        expireAt: 1\n      }\n    }]);\n  } // get expired surveys still in progress\n\n\n  getOpenExpiredAndStartSending() {\n    return Promise.asyncApply(() => {\n      const today = new Date();\n      const query = {\n        status: NPSStatus.OPEN,\n        expireAt: {\n          $lte: today\n        }\n      };\n      const update = {\n        $set: {\n          status: NPSStatus.SENDING\n        }\n      };\n      const {\n        value\n      } = Promise.await(this.col.findOneAndUpdate(query, update, {\n        sort: {\n          expireAt: 1\n        }\n      }));\n      return value;\n    });\n  } // get expired surveys already sending results\n\n\n  getOpenExpiredAlreadySending() {\n    return Promise.asyncApply(() => {\n      const today = new Date();\n      const query = {\n        status: NPSStatus.SENDING,\n        expireAt: {\n          $lte: today\n        }\n      };\n      return this.col.findOne(query);\n    });\n  }\n\n  updateStatusById(_id, status) {\n    const update = {\n      $set: {\n        status\n      }\n    };\n    return this.col.updateOne({\n      _id\n    }, update);\n  }\n\n  save(_ref) {\n    let {\n      _id,\n      startAt,\n      expireAt,\n      createdBy,\n      status\n    } = _ref;\n    return this.col.updateOne({\n      _id\n    }, {\n      $set: {\n        startAt,\n        _updatedAt: new Date()\n      },\n      $setOnInsert: {\n        expireAt,\n        createdBy,\n        createdAt: new Date(),\n        status\n      }\n    }, {\n      upsert: true\n    });\n  }\n\n  closeAllByStatus(status) {\n    const query = {\n      status\n    };\n    const update = {\n      $set: {\n        status: NPSStatus.CLOSED\n      }\n    };\n    return this.col.updateMany(query, update);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Nps.ts"],"names":[],"mappings":"AAEA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,MAAS,EAAA,MAAM;AAAf,CAAT;AAAmC,IAAC,OAAD;AAAC,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAI9B,MAAO,MAAP,SAAsB,OAAtB,CAAgC;AACrC,EAAA,WAAA,CAA4B,GAA5B,EAAgD,KAAhD,EAAqE;AACpE,UAAM,GAAN,EAAW,KAAX;AADoE,SAAzC,GAAyC;AAAzC,SAAA,GAAA,GAAA,GAAA;AAG3B,SAAK,GAAL,CAAS,aAAT,CAAuB,CAAC;AAAE,MAAA,GAAG,EAAE;AAAE,QAAA,MAAM,EAAE,CAAV;AAAa,QAAA,QAAQ,EAAE;AAAvB;AAAP,KAAD,CAAvB;AACA,GALoC,CAOrC;;;AACM,EAAA,6BAA6B;AAAA,oCAAA;AAClC,YAAM,KAAK,GAAG,IAAI,IAAJ,EAAd;AAEA,YAAM,KAAK,GAAG;AACb,QAAA,MAAM,EAAE,SAAS,CAAC,IADL;AAEb,QAAA,QAAQ,EAAE;AAAE,UAAA,IAAI,EAAE;AAAR;AAFG,OAAd;AAIA,YAAM,MAAM,GAAG;AACd,QAAA,IAAI,EAAE;AACL,UAAA,MAAM,EAAE,SAAS,CAAC;AADb;AADQ,OAAf;AAKA,YAAM;AAAE,QAAA;AAAF,wBAAkB,KAAK,GAAL,CAAS,gBAAT,CAA0B,KAA1B,EAAiC,MAAjC,EAAyC;AAAE,QAAA,IAAI,EAAE;AAAE,UAAA,QAAQ,EAAE;AAAZ;AAAR,OAAzC,CAAlB,CAAN;AAEA,aAAO,KAAP;AACA,KAfkC;AAAA,GARE,CAyBrC;;;AACM,EAAA,4BAA4B;AAAA,oCAAA;AACjC,YAAM,KAAK,GAAG,IAAI,IAAJ,EAAd;AAEA,YAAM,KAAK,GAAG;AACb,QAAA,MAAM,EAAE,SAAS,CAAC,OADL;AAEb,QAAA,QAAQ,EAAE;AAAE,UAAA,IAAI,EAAE;AAAR;AAFG,OAAd;AAKA,aAAO,KAAK,GAAL,CAAS,OAAT,CAAiB,KAAjB,CAAP;AACA,KATiC;AAAA;;AAWlC,EAAA,gBAAgB,CAAC,GAAD,EAAmB,MAAnB,EAAyC;AACxD,UAAM,MAAM,GAAG;AACd,MAAA,IAAI,EAAE;AACL,QAAA;AADK;AADQ,KAAf;AAKA,WAAO,KAAK,GAAL,CAAS,SAAT,CAAmB;AAAE,MAAA;AAAF,KAAnB,EAA4B,MAA5B,CAAP;AACA;;AAED,EAAA,IAAI,OAMkE;AAAA,QANjE;AACJ,MAAA,GADI;AAEJ,MAAA,OAFI;AAGJ,MAAA,QAHI;AAIJ,MAAA,SAJI;AAKJ,MAAA;AALI,KAMiE;AACrE,WAAO,KAAK,GAAL,CAAS,SAAT,CACN;AACC,MAAA;AADD,KADM,EAIN;AACC,MAAA,IAAI,EAAE;AACL,QAAA,OADK;AAEL,QAAA,UAAU,EAAE,IAAI,IAAJ;AAFP,OADP;AAKC,MAAA,YAAY,EAAE;AACb,QAAA,QADa;AAEb,QAAA,SAFa;AAGb,QAAA,SAAS,EAAE,IAAI,IAAJ,EAHE;AAIb,QAAA;AAJa;AALf,KAJM,EAgBN;AACC,MAAA,MAAM,EAAE;AADT,KAhBM,CAAP;AAoBA;;AAED,EAAA,gBAAgB,CAAC,MAAD,EAAkB;AACjC,UAAM,KAAK,GAAG;AACb,MAAA;AADa,KAAd;AAIA,UAAM,MAAM,GAAG;AACd,MAAA,IAAI,EAAE;AACL,QAAA,MAAM,EAAE,SAAS,CAAC;AADb;AADQ,KAAf;AAMA,WAAO,KAAK,GAAL,CAAS,UAAT,CAAoB,KAApB,EAA2B,MAA3B,CAAP;AACA;;AAvFoC","sourcesContent":["import { UpdateWriteOpResult, Collection } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { INps, NPSStatus } from '../../../../definition/INps';\n\ntype T = INps;\nexport class NpsRaw extends BaseRaw<T> {\n\tconstructor(public readonly col: Collection<T>, trash?: Collection<T>) {\n\t\tsuper(col, trash);\n\n\t\tthis.col.createIndexes([{ key: { status: 1, expireAt: 1 } }]);\n\t}\n\n\t// get expired surveys still in progress\n\tasync getOpenExpiredAndStartSending(): Promise<INps | undefined> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.SENDING,\n\t\t\t},\n\t\t};\n\t\tconst { value } = await this.col.findOneAndUpdate(query, update, { sort: { expireAt: 1 } });\n\n\t\treturn value;\n\t}\n\n\t// get expired surveys already sending results\n\tasync getOpenExpiredAlreadySending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.SENDING,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\n\t\treturn this.col.findOne(query);\n\t}\n\n\tupdateStatusById(_id: INps['_id'], status: INps['status']): Promise<UpdateWriteOpResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tsave({\n\t\t_id,\n\t\tstartAt,\n\t\texpireAt,\n\t\tcreatedBy,\n\t\tstatus,\n\t}: Pick<INps, '_id' | 'startAt' | 'expireAt' | 'createdBy' | 'status'>): Promise<UpdateWriteOpResult> {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstartAt,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\texpireAt,\n\t\t\t\t\tcreatedBy,\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\tstatus,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseAllByStatus(status: NPSStatus): Promise<UpdateWriteOpResult> {\n\t\tconst query = {\n\t\t\tstatus,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.CLOSED,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"09b3975ce8993be6031afe001de20768028e48a1"}
