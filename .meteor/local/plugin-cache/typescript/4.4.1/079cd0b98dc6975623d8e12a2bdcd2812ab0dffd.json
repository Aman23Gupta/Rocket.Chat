{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/team/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/team/service.ts","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/team/service.ts","inputSourceMap":{"version":3,"file":"server/services/team/service.ts","sourceRoot":"","sources":["server/services/team/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Db, FindOneOptions, FilterQuery, WithoutProjection } from 'mongodb';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { checkUsernameAvailability } from '../../../app/lib/server/functions';\nimport { addUserToRoom } from '../../../app/lib/server/functions/addUserToRoom';\nimport { removeUserFromRoom } from '../../../app/lib/server/functions/removeUserFromRoom';\nimport { getSubscribedRoomsForUserWithDetails } from '../../../app/lib/server/functions/getRoomsWithSingleOwner';\nimport type { InsertionModel } from '../../../app/models/server/raw/BaseRaw';\nimport { MessagesRaw } from '../../../app/models/server/raw/Messages';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { TeamRaw } from '../../../app/models/server/raw/Team';\nimport { TeamMemberRaw } from '../../../app/models/server/raw/TeamMember';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IPaginationOptions, IQueryOptions, IRecordsWithTotal, ITeam, ITeamMember, ITeamStats, TEAM_TYPE } from '../../../definition/ITeam';\nimport { IUser } from '../../../definition/IUser';\nimport { Room, Authorization } from '../../sdk';\nimport {\n\tIListRoomsFilter,\n\tITeamAutocompleteResult,\n\tITeamCreateParams,\n\tITeamInfo,\n\tITeamMemberInfo,\n\tITeamMemberParams,\n\tITeamService,\n\tITeamUpdateData,\n} from '../../sdk/types/ITeamService';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { canAccessRoom } from '../authorization/canAccessRoom';\nimport { saveRoomName } from '../../../app/channel-settings/server';\nimport { saveRoomType } from '../../../app/channel-settings/server/functions/saveRoomType';\nimport { ISubscription } from '../../../definition/ISubscription';\n\nexport class TeamService extends ServiceClass implements ITeamService {\n\tprotected name = 'team';\n\n\tprivate TeamModel: TeamRaw;\n\n\tprivate RoomsModel: RoomsRaw;\n\n\tprivate SubscriptionsModel: SubscriptionsRaw;\n\n\tprivate Users: UsersRaw;\n\n\tprivate TeamMembersModel: TeamMemberRaw;\n\n\tprivate MessagesModel: MessagesRaw;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.RoomsModel = new RoomsRaw(db.collection('rocketchat_room'));\n\t\tthis.Users = new UsersRaw(db.collection('users'));\n\t\tthis.SubscriptionsModel = new SubscriptionsRaw(db.collection('rocketchat_subscription'), {\n\t\t\tUsers: this.Users,\n\t\t});\n\t\tthis.TeamModel = new TeamRaw(db.collection('rocketchat_team'));\n\t\tthis.TeamMembersModel = new TeamMemberRaw(db.collection('rocketchat_team_member'));\n\t\tthis.MessagesModel = new MessagesRaw(db.collection('rocketchat_message'));\n\t}\n\n\tasync create(uid: string, { team, room = { name: team.name, extraData: {} }, members, owner }: ITeamCreateParams): Promise<ITeam> {\n\t\tif (!checkUsernameAvailability(team.name)) {\n\t\t\tthrow new Error('team-name-already-exists');\n\t\t}\n\n\t\tconst existingRoom = await this.RoomsModel.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tif (existingRoom && existingRoom._id !== room.id) {\n\t\t\tthrow new Error('room-name-already-exists');\n\t\t}\n\n\t\tconst createdBy = await this.Users.findOneById<Pick<IUser, 'username' | '_id'>>(uid, {\n\t\t\tprojection: { username: 1 },\n\t\t});\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\t// TODO add validations to `data` and `members`\n\n\t\tconst membersResult = await this.Users.findActiveByIds(members, {\n\t\t\tprojection: { username: 1, _id: 0 },\n\t\t}).toArray();\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\n\t\tconst teamData = {\n\t\t\t...team,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t\t_updatedAt: new Date(), // TODO how to avoid having to do this?\n\t\t\troomId: '', // this will be populated at the end\n\t\t};\n\n\t\ttry {\n\t\t\tconst result = await this.TeamModel.insertOne(teamData);\n\t\t\tconst teamId = result.insertedId;\n\t\t\t// the same uid can be passed at 3 positions: owner, member list or via caller\n\t\t\t// if the owner is present, remove it from the members list\n\t\t\t// if the owner is not present, remove the caller from the members list\n\t\t\tconst excludeFromMembers = owner ? [owner] : [uid];\n\n\t\t\t// filter empty strings and falsy values from members list\n\t\t\tconst membersList: Array<InsertionModel<ITeamMember>> =\n\t\t\t\tmembers\n\t\t\t\t\t?.filter(Boolean)\n\t\t\t\t\t.filter((memberId) => !excludeFromMembers.includes(memberId))\n\t\t\t\t\t.map((memberId) => ({\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tuserId: memberId,\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tcreatedBy,\n\t\t\t\t\t})) || [];\n\n\t\t\tmembersList.push({\n\t\t\t\tteamId,\n\t\t\t\tuserId: owner || uid,\n\t\t\t\troles: ['owner'],\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy,\n\t\t\t});\n\n\t\t\tawait this.TeamMembersModel.insertMany(membersList);\n\n\t\t\tlet roomId = room.id;\n\t\t\tif (roomId) {\n\t\t\t\tawait this.RoomsModel.setTeamMainById(roomId, teamId);\n\t\t\t} else {\n\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\n\t\t\t\tconst newRoom = {\n\t\t\t\t\t...room,\n\t\t\t\t\ttype: roomType,\n\t\t\t\t\tname: team.name,\n\t\t\t\t\tmembers: memberUsernames,\n\t\t\t\t\textraData: {\n\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\troomId = createdRoom._id;\n\t\t\t}\n\n\t\t\tawait this.TeamModel.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new Error('error-team-creation');\n\t\t}\n\t}\n\n\tasync update(uid: string, teamId: string, updateData: ITeamUpdateData): Promise<void> {\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, updateRoom = true } = updateData;\n\n\t\tif (updateRoom && name) {\n\t\t\tsaveRoomName(team.roomId, name, user);\n\t\t}\n\n\t\tif (updateRoom && typeof type !== 'undefined') {\n\t\t\tsaveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n\t\t}\n\n\t\tawait this.TeamModel.updateNameAndType(teamId, updateData);\n\t}\n\n\tasync findBySubscribedUserIds(userId: string, callerId?: string): Promise<ITeam[]> {\n\t\tconst unfilteredTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },\n\t\t}).toArray();\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\n\t\tlet teamIds = unfilteredTeamIds;\n\n\t\tif (callerId) {\n\t\t\tconst publicTeams = await this.TeamModel.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray();\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst privateTeamIds = unfilteredTeamIds.filter((teamId) => !publicTeamIds.includes(teamId));\n\n\t\t\tconst privateTeams = await this.TeamMembersModel.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },\n\t\t\t}).toArray();\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tteamIds = unfilteredTeamIds.filter((teamId) => visibleTeamIds.includes(teamId));\n\t\t}\n\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\n\t\tconst results = await this.TeamModel.findByIds(teamIds).toArray();\n\t\treturn results.map((team) => ({\n\t\t\t...team,\n\t\t\tisOwner: ownedTeams.includes(team._id),\n\t\t}));\n\t}\n\n\tsearch(userId: string, term: string | RegExp): Promise<ITeam[]>;\n\n\tsearch(userId: string, term: string | RegExp, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tsearch<P>(userId: string, term: string | RegExp, options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync search<P>(\n\t\tuserId: string,\n\t\tterm: string | RegExp,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\tif (typeof term === 'string') {\n\t\t\tterm = new RegExp(`^${escapeRegExp(term)}`, 'i');\n\t\t}\n\n\t\tconst userTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\n\t\treturn options\n\t\t\t? this.TeamModel.findByNameAndTeamIds(term, teamIds, options).toArray()\n\t\t\t: this.TeamModel.findByNameAndTeamIds(term, teamIds).toArray();\n\t}\n\n\tasync list(\n\t\tuid: string,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\t{ sort, query }: IQueryOptions<ITeam> = { sort: {} },\n\t): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst userTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tif (teamIds.length === 0) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst cursor = this.TeamModel.findByIds(\n\t\t\tteamIds,\n\t\t\t{\n\t\t\t\t...(sort && { sort }),\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t\tquery,\n\t\t);\n\n\t\tconst records = await cursor.toArray();\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst rooms = this.RoomsModel.findByTeamId(record._id);\n\t\t\tconst users = this.TeamMembersModel.findByTeamId(record._id);\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await rooms.count(),\n\t\t\t\tnumberOfUsers: await users.count(),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync listAll({ offset, count }: IPaginationOptions = { offset: 0, count: 50 }): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst cursor = this.TeamModel.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t);\n\n\t\tconst records = await cursor.toArray();\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst rooms = this.RoomsModel.findByTeamId(record._id);\n\t\t\tconst users = this.TeamMembersModel.findByTeamId(record._id);\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await rooms.count(),\n\t\t\t\tnumberOfUsers: await users.count(),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tlistByNames(names: Array<string>): Promise<ITeam[]>;\n\n\tlistByNames(names: Array<string>, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tlistByNames<P>(names: Array<string>, options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync listByNames<P>(\n\t\tnames: Array<string>,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<P[] | ITeam[]> {\n\t\tif (options === undefined) {\n\t\t\treturn this.TeamModel.findByNames(names).toArray();\n\t\t}\n\t\treturn this.TeamModel.findByNames(names, options).toArray();\n\t}\n\n\tasync listByIds(ids: Array<string>, options?: FindOneOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn this.TeamModel.findByIds(ids, options).toArray();\n\t}\n\n\tasync addRooms(uid: string, rooms: Array<string>, teamId: string): Promise<Array<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rooms) {\n\t\t\tthrow new Error('missing-rooms');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById(teamId, { projection: { _id: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\t// at this point, we already checked for the permission\n\t\t// so we just need to check if the user can see the room\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tconst rids = rooms.filter((rid) => rid && typeof rid === 'string');\n\t\tconst validRooms = await this.RoomsModel.findManyByRoomIds(rids).toArray();\n\t\tif (validRooms.length < rids.length) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\t// validate access for every room first\n\t\tfor await (const room of validRooms) {\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tfor await (const room of validRooms) {\n\t\t\tif (room.teamId) {\n\t\t\t\tthrow new Error('room-already-on-team');\n\t\t\t}\n\n\t\t\tif (!(await this.SubscriptionsModel.isUserInRole(uid, 'owner', room._id))) {\n\t\t\t\tthrow new Error('error-no-owner-channel');\n\t\t\t}\n\n\t\t\troom.teamId = teamId;\n\t\t}\n\n\t\tthis.RoomsModel.setTeamByIds(rids, teamId);\n\t\treturn validRooms;\n\t}\n\n\tasync removeRoom(uid: string, rid: string, teamId: string, canRemoveAnyRoom = false): Promise<IRoom> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await this.RoomsModel.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!canRemoveAnyRoom) {\n\t\t\tconst user = await this.Users.findOneById(uid);\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById(teamId, { projection: { _id: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tif (room.teamId !== teamId) {\n\t\t\tthrow new Error('room-not-on-that-team');\n\t\t}\n\n\t\tdelete room.teamId;\n\t\tdelete room.teamDefault;\n\t\tthis.RoomsModel.unsetTeamById(room._id);\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tasync unsetTeamIdOfRooms(teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tawait this.RoomsModel.unsetTeamId(teamId);\n\t}\n\n\tasync updateRoom(uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom = false): Promise<IRoom> {\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await this.RoomsModel.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tif (!canUpdateAnyRoom) {\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\t\troom.teamDefault = isDefault;\n\t\tthis.RoomsModel.setTeamDefaultById(rid, isDefault);\n\n\t\tif (room.teamDefault) {\n\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\n\t\t\tteamMembers.records.map((m) => addUserToRoom(room._id, m.user, user));\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P>(uid: string, options: FindOneOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P>(\n\t\tuid: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\tthis.TeamMembersModel.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn this.TeamMembersModel.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, '_id' | 'type'>>(teamId, {\n\t\t\tprojection: { _id: 1, type: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst { getAllRooms, allowPrivateTeam, name, isDefault } = filter;\n\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tif (getAllRooms) {\n\t\t\tconst teamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, { skip, limit });\n\t\t\treturn {\n\t\t\t\ttotal: await teamRoomsCursor.count(),\n\t\t\t\trecords: await teamRoomsCursor.toArray(),\n\t\t\t};\n\t\t}\n\n\t\tconst user = await this.Users.findOneById<{ __rooms: string[] }>(uid, {\n\t\t\tprojection: { __rooms: 1 },\n\t\t});\n\t\tconst userRooms = user?.__rooms;\n\t\tconst validTeamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\n\t\treturn {\n\t\t\ttotal: await validTeamRoomsCursor.count(),\n\t\t\trecords: await validTeamRoomsCursor.toArray(),\n\t\t};\n\t}\n\n\tasync listRoomsOfUser(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tallowPrivateTeam: boolean,\n\t\tshowCanDeleteOnly: boolean,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await this.TeamModel.findOneById(teamId, {});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tconst teamRooms = await this.RoomsModel.findByTeamId(teamId, {\n\t\t\tprojection: { _id: 1, t: 1 },\n\t\t}).toArray();\n\t\tlet teamRoomIds: any[];\n\t\tif (showCanDeleteOnly) {\n\t\t\tfor await (const room of teamRooms) {\n\t\t\t\tconst roomType = room.t;\n\t\t\t\tconst canDeleteRoom = await Authorization.hasPermission(userId, roomType === 'c' ? 'delete-c' : 'delete-p', room._id);\n\t\t\t\troom.userCanDelete = canDeleteRoom;\n\t\t\t}\n\n\t\t\tteamRoomIds = teamRooms.filter((room) => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map((room) => room._id);\n\t\t} else {\n\t\t\tteamRoomIds = teamRooms.filter((room) => room.t === 'p' || room.t === 'c').map((room) => room._id);\n\t\t}\n\n\t\tconst subscriptionsCursor = this.SubscriptionsModel.findByUserIdAndRoomIds(userId, teamRoomIds);\n\t\tconst subscriptionRoomIds = (await subscriptionsCursor.toArray()).map((subscription) => subscription.rid);\n\t\tconst availableRoomsCursor = this.RoomsModel.findManyByRoomIds(subscriptionRoomIds, {\n\t\t\tskip,\n\t\t\tlimit,\n\t\t});\n\t\tconst rooms = await availableRoomsCursor.toArray();\n\t\tconst roomData = getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n\t\tconst records = [];\n\n\t\tfor (const room of rooms) {\n\t\t\tconst roomInfo = roomData.find((data) => data.rid === room._id);\n\t\t\troom.isLastOwner = roomInfo.userIsLastOwner;\n\t\t\trecords.push(room);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await availableRoomsCursor.count(),\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync getMatchingTeamRooms(teamId: string, rids: Array<string>): Promise<Array<string>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tif (!rids) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(rids)) {\n\t\t\tthrow new Error('invalid-list-of-rooms');\n\t\t}\n\n\t\tconst rooms = await this.RoomsModel.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },\n\t\t}).toArray();\n\t\treturn rooms.map(({ _id }: { _id: string }) => _id);\n\t}\n\n\tasync getMembersByTeamIds(teamIds: Array<string>, options: FindOneOptions<ITeamMember>): Promise<Array<ITeamMember>> {\n\t\treturn this.TeamMembersModel.findByTeamIds(teamIds, options).toArray();\n\t}\n\n\tasync members(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tcanSeeAll: boolean,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\tquery: FilterQuery<IUser> = {},\n\t): Promise<IRecordsWithTotal<ITeamMemberInfo>> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (!isMember && !canSeeAll) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst users = await this.Users.find({ ...query }).toArray();\n\t\tconst userIds = users.map((m) => m._id);\n\t\tconst cursor = this.TeamMembersModel.findMembersInfoByTeamId(teamId, count, offset, {\n\t\t\tuserId: { $in: userIds },\n\t\t});\n\n\t\tconst records = await cursor.toArray();\n\t\tconst results: ITeamMemberInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst user = users.find((u) => u._id === record.userId);\n\t\t\tresults.push({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tstatus: user.status,\n\t\t\t\t},\n\t\t\t\troles: record.roles,\n\t\t\t\tcreatedBy: {\n\t\t\t\t\t_id: record.createdBy._id,\n\t\t\t\t\tusername: record.createdBy.username,\n\t\t\t\t},\n\t\t\t\tcreatedAt: record.createdAt,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync addMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<void> {\n\t\tconst createdBy = await this.Users.findOneById(uid, { projection: { username: 1 } });\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tfor await (const member of members) {\n\t\t\tconst user = await this.Users.findOneById(member.userId, { projection: { username: 1 } });\n\t\t\tawait addUserToRoom(team.roomId, user, createdBy, false);\n\n\t\t\tif (member.roles) {\n\t\t\t\tawait this.addRolesToMember(teamId, member.userId, member.roles);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateMember(teamId: string, member: ITeamMemberParams): Promise<void> {\n\t\tif (!member.userId) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst memberUpdate: Partial<ITeamMember> = {\n\t\t\troles: member.roles ? member.roles : [],\n\t\t};\n\n\t\tawait this.TeamMembersModel.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate);\n\t}\n\n\tasync removeMember(teamId: string, userId: string): Promise<void> {\n\t\tawait this.TeamMembersModel.deleteByUserIdAndTeamId(userId, teamId);\n\t}\n\n\tasync removeMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<boolean> {\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await this.Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },\n\t\t}).toArray();\n\t\tconst byUser = await this.Users.findOneById(uid, { projection: { _id: 1, username: 1 } });\n\n\t\tfor await (const member of members) {\n\t\t\tif (!member.userId) {\n\t\t\t\tthrow new Error('invalid-user');\n\t\t\t}\n\n\t\t\tconst existingMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(member.userId, team._id);\n\t\t\tif (!existingMember) {\n\t\t\t\tthrow new Error('member-does-not-exist');\n\t\t\t}\n\n\t\t\tif (existingMember.roles?.includes('owner')) {\n\t\t\t\tconst owners = this.TeamMembersModel.findByTeamIdAndRole(team._id, 'owner');\n\t\t\t\tconst totalOwners = await owners.count();\n\t\t\t\tif (totalOwners === 1) {\n\t\t\t\t\tthrow new Error('last-owner-can-not-be-removed');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.TeamMembersModel.removeById(existingMember._id);\n\t\t\tconst removedUser = usersToRemove.find((u) => u._id === existingMember.userId);\n\t\t\tremoveUserFromRoom(team.roomId, removedUser, {\n\t\t\t\tbyUser: uid !== member.userId ? byUser : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync insertMemberOnTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await this.TeamModel.findOneById(teamId);\n\t\t\t\tconst user = await this.Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait addUserToRoom(team.roomId, user, inviter, false);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeMemberFromTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await this.TeamModel.findOneById(teamId);\n\t\t\t\tconst user = await this.Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait removeUserFromRoom(team.roomId, user);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeAllMembersFromTeam(teamId: string): Promise<void> {\n\t\tconst team = await this.TeamModel.findOneById(teamId);\n\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.TeamMembersModel.deleteByTeamId(team._id);\n\t}\n\n\tasync addMember(inviter: IUser, userId: string, teamId: string): Promise<boolean> {\n\t\tconst isAlreadyAMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (isAlreadyAMember) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet inviterData = {} as Pick<IUser, '_id' | 'username'>;\n\t\tif (inviter) {\n\t\t\tinviterData = { _id: inviter._id, username: inviter.username };\n\t\t}\n\n\t\tconst member = (await this.TeamMembersModel.createOneByTeamIdAndUserId(teamId, userId, inviterData)).ops[0];\n\t\tawait this.addMembersToDefaultRooms(inviter, teamId, [member]);\n\n\t\treturn true;\n\t}\n\n\tgetAllPublicTeams(): Promise<ITeam[]>;\n\n\tgetAllPublicTeams(options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tgetAllPublicTeams<P>(options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync getAllPublicTeams<P>(\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\treturn options ? this.TeamModel.findByType(TEAM_TYPE.PUBLIC, options).toArray() : this.TeamModel.findByType(TEAM_TYPE.PUBLIC).toArray();\n\t}\n\n\tasync getOneById<P>(teamId: string, options?: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<ITeam | P | null> {\n\t\tif (options === undefined) {\n\t\t\treturn this.TeamModel.findOneById(teamId);\n\t\t}\n\t\treturn this.TeamModel.findOneById(teamId, options);\n\t}\n\n\tasync getOneByName(teamName: string | RegExp): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam | null>;\n\n\tasync getOneByName<P>(teamName: string | RegExp, options: FindOneOptions<P>): Promise<P | null>;\n\n\tasync getOneByName<P>(\n\t\tteamName: string | RegExp,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam | null | P> {\n\t\tif (!options) {\n\t\t\treturn this.TeamModel.findOneByName(teamName);\n\t\t}\n\t\treturn this.TeamModel.findOneByName(teamName, options);\n\t}\n\n\tasync getOneByMainRoomId(roomId: string): Promise<Pick<ITeam, '_id'> | null> {\n\t\treturn this.TeamModel.findOneByMainRoomId<Pick<ITeam, '_id'>>(roomId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t}\n\n\tasync getOneByRoomId(roomId: string): Promise<ITeam | null> {\n\t\tconst room = await this.RoomsModel.findOneById(roomId);\n\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\n\t\treturn this.TeamModel.findOneById(room.teamId);\n\t}\n\n\tasync addRolesToMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await this.TeamMembersModel.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync removeRolesFromMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await this.TeamMembersModel.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync getInfoByName(teamName: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn this.TeamModel.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\tname: teamName,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync getInfoById(teamId: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn this.TeamModel.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\t_id: teamId,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync addMembersToDefaultRooms(inviter: IUser, teamId: string, members: Array<Partial<ITeamMember>>): Promise<void> {\n\t\tconst defaultRooms = await this.RoomsModel.findDefaultRoomsForTeam(teamId).toArray();\n\t\tconst users = await this.Users.findActiveByIds(members.map((member) => member.userId)).toArray();\n\n\t\tdefaultRooms.map(async (room) => {\n\t\t\t// at this point, users are already part of the team so we won't check for membership\n\t\t\tfor await (const user of users) {\n\t\t\t\t// add each user to the default room\n\t\t\t\taddUserToRoom(room._id, user, inviter, false);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync deleteById(teamId: string): Promise<boolean> {\n\t\treturn !!(await this.TeamModel.deleteOneById(teamId));\n\t}\n\n\tasync deleteByName(teamName: string): Promise<boolean> {\n\t\treturn !!(await this.TeamModel.deleteOneByName(teamName));\n\t}\n\n\tasync getStatistics(): Promise<ITeamStats> {\n\t\tconst stats = {} as ITeamStats;\n\t\tconst teams = this.TeamModel.find({});\n\t\tconst teamsArray = await teams.toArray();\n\n\t\tstats.totalTeams = await teams.count();\n\t\tstats.teamStats = [];\n\n\t\tfor await (const team of teamsArray) {\n\t\t\t// exclude the main room from the stats\n\t\t\tconst teamRooms = await this.RoomsModel.find({\n\t\t\t\tteamId: team._id,\n\t\t\t\tteamMain: { $exists: false },\n\t\t\t}).toArray();\n\t\t\tconst roomIds = teamRooms.map((r) => r._id);\n\t\t\tconst [totalMessagesInTeam, defaultRooms, totalMembers] = await Promise.all([\n\t\t\t\tthis.MessagesModel.find({ rid: { $in: roomIds } }).count(),\n\t\t\t\tthis.RoomsModel.findDefaultRoomsForTeam(team._id).count(),\n\t\t\t\tthis.TeamMembersModel.findByTeamId(team._id).count(),\n\t\t\t]);\n\n\t\t\tconst teamData = {\n\t\t\t\tteamId: team._id,\n\t\t\t\tmainRoom: team.roomId,\n\t\t\t\ttotalRooms: teamRooms.length,\n\t\t\t\ttotalMessages: totalMessagesInTeam,\n\t\t\t\ttotalPublicRooms: teamRooms.filter((r) => r.t === 'c').length,\n\t\t\t\ttotalPrivateRooms: teamRooms.filter((r) => r.t !== 'c').length,\n\t\t\t\ttotalDefaultRooms: defaultRooms,\n\t\t\t\ttotalMembers,\n\t\t\t};\n\n\t\t\tstats.teamStats.push(teamData);\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tasync autocomplete(uid: string, name: string): Promise<ITeamAutocompleteResult[]> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst subscriptions = await this.SubscriptionsModel.find<Pick<ISubscription, 'rid'>>(\n\t\t\t{ 'u._id': uid },\n\t\t\t{ projection: { rid: 1 } },\n\t\t).toArray();\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\n\t\tconst rooms = await this.RoomsModel.find<ITeamAutocompleteResult>(\n\t\t\t{\n\t\t\t\tteamMain: true,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_id: { $in: subscriptionIds },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tfname: 1,\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t\tlimit: 10,\n\t\t\t\tsort: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tfname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\treturn rooms;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/services/team/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/team/service.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 1);\nmodule.export({\n  TeamService: () => TeamService\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet checkUsernameAvailability;\nmodule.link(\"../../../app/lib/server/functions\", {\n  checkUsernameAvailability(v) {\n    checkUsernameAvailability = v;\n  }\n\n}, 1);\nlet addUserToRoom;\nmodule.link(\"../../../app/lib/server/functions/addUserToRoom\", {\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  }\n\n}, 2);\nlet removeUserFromRoom;\nmodule.link(\"../../../app/lib/server/functions/removeUserFromRoom\", {\n  removeUserFromRoom(v) {\n    removeUserFromRoom = v;\n  }\n\n}, 3);\nlet getSubscribedRoomsForUserWithDetails;\nmodule.link(\"../../../app/lib/server/functions/getRoomsWithSingleOwner\", {\n  getSubscribedRoomsForUserWithDetails(v) {\n    getSubscribedRoomsForUserWithDetails = v;\n  }\n\n}, 4);\nlet MessagesRaw;\nmodule.link(\"../../../app/models/server/raw/Messages\", {\n  MessagesRaw(v) {\n    MessagesRaw = v;\n  }\n\n}, 5);\nlet RoomsRaw;\nmodule.link(\"../../../app/models/server/raw/Rooms\", {\n  RoomsRaw(v) {\n    RoomsRaw = v;\n  }\n\n}, 6);\nlet SubscriptionsRaw;\nmodule.link(\"../../../app/models/server/raw/Subscriptions\", {\n  SubscriptionsRaw(v) {\n    SubscriptionsRaw = v;\n  }\n\n}, 7);\nlet TeamRaw;\nmodule.link(\"../../../app/models/server/raw/Team\", {\n  TeamRaw(v) {\n    TeamRaw = v;\n  }\n\n}, 8);\nlet TeamMemberRaw;\nmodule.link(\"../../../app/models/server/raw/TeamMember\", {\n  TeamMemberRaw(v) {\n    TeamMemberRaw = v;\n  }\n\n}, 9);\nlet UsersRaw;\nmodule.link(\"../../../app/models/server/raw/Users\", {\n  UsersRaw(v) {\n    UsersRaw = v;\n  }\n\n}, 10);\nlet TEAM_TYPE;\nmodule.link(\"../../../definition/ITeam\", {\n  TEAM_TYPE(v) {\n    TEAM_TYPE = v;\n  }\n\n}, 11);\nlet Room, Authorization;\nmodule.link(\"../../sdk\", {\n  Room(v) {\n    Room = v;\n  },\n\n  Authorization(v) {\n    Authorization = v;\n  }\n\n}, 12);\nlet ServiceClass;\nmodule.link(\"../../sdk/types/ServiceClass\", {\n  ServiceClass(v) {\n    ServiceClass = v;\n  }\n\n}, 13);\nlet canAccessRoom;\nmodule.link(\"../authorization/canAccessRoom\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 14);\nlet saveRoomName;\nmodule.link(\"../../../app/channel-settings/server\", {\n  saveRoomName(v) {\n    saveRoomName = v;\n  }\n\n}, 15);\nlet saveRoomType;\nmodule.link(\"../../../app/channel-settings/server/functions/saveRoomType\", {\n  saveRoomType(v) {\n    saveRoomType = v;\n  }\n\n}, 16);\n\nclass TeamService extends ServiceClass {\n  constructor(db) {\n    super();\n    this.name = 'team';\n    this.TeamModel = void 0;\n    this.RoomsModel = void 0;\n    this.SubscriptionsModel = void 0;\n    this.Users = void 0;\n    this.TeamMembersModel = void 0;\n    this.MessagesModel = void 0;\n    this.RoomsModel = new RoomsRaw(db.collection('rocketchat_room'));\n    this.Users = new UsersRaw(db.collection('users'));\n    this.SubscriptionsModel = new SubscriptionsRaw(db.collection('rocketchat_subscription'), {\n      Users: this.Users\n    });\n    this.TeamModel = new TeamRaw(db.collection('rocketchat_team'));\n    this.TeamMembersModel = new TeamMemberRaw(db.collection('rocketchat_team_member'));\n    this.MessagesModel = new MessagesRaw(db.collection('rocketchat_message'));\n  }\n\n  create(uid, _ref) {\n    return Promise.asyncApply(() => {\n      let {\n        team,\n        room = {\n          name: team.name,\n          extraData: {}\n        },\n        members,\n        owner\n      } = _ref;\n\n      if (!checkUsernameAvailability(team.name)) {\n        throw new Error('team-name-already-exists');\n      }\n\n      const existingRoom = Promise.await(this.RoomsModel.findOneByName(team.name, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (existingRoom && existingRoom._id !== room.id) {\n        throw new Error('room-name-already-exists');\n      }\n\n      const createdBy = Promise.await(this.Users.findOneById(uid, {\n        projection: {\n          username: 1\n        }\n      }));\n\n      if (!createdBy) {\n        throw new Error('invalid-user');\n      } // TODO add validations to `data` and `members`\n\n\n      const membersResult = Promise.await(this.Users.findActiveByIds(members, {\n        projection: {\n          username: 1,\n          _id: 0\n        }\n      }).toArray());\n      const memberUsernames = membersResult.map(_ref2 => {\n        let {\n          username\n        } = _ref2;\n        return username;\n      });\n\n      const teamData = _objectSpread(_objectSpread({}, team), {}, {\n        createdAt: new Date(),\n        createdBy,\n        _updatedAt: new Date(),\n        roomId: '' // this will be populated at the end\n\n      });\n\n      try {\n        const result = Promise.await(this.TeamModel.insertOne(teamData));\n        const teamId = result.insertedId; // the same uid can be passed at 3 positions: owner, member list or via caller\n        // if the owner is present, remove it from the members list\n        // if the owner is not present, remove the caller from the members list\n\n        const excludeFromMembers = owner ? [owner] : [uid]; // filter empty strings and falsy values from members list\n\n        const membersList = (members === null || members === void 0 ? void 0 : members.filter(Boolean).filter(memberId => !excludeFromMembers.includes(memberId)).map(memberId => ({\n          teamId,\n          userId: memberId,\n          createdAt: new Date(),\n          createdBy\n        }))) || [];\n        membersList.push({\n          teamId,\n          userId: owner || uid,\n          roles: ['owner'],\n          createdAt: new Date(),\n          createdBy\n        });\n        Promise.await(this.TeamMembersModel.insertMany(membersList));\n        let roomId = room.id;\n\n        if (roomId) {\n          Promise.await(this.RoomsModel.setTeamMainById(roomId, teamId));\n        } else {\n          const roomType = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\n          const newRoom = _objectSpread(_objectSpread({}, room), {}, {\n            type: roomType,\n            name: team.name,\n            members: memberUsernames,\n            extraData: _objectSpread(_objectSpread({}, room.extraData), {}, {\n              teamId,\n              teamMain: true\n            })\n          });\n\n          const createdRoom = Promise.await(Room.create(owner || uid, newRoom));\n          roomId = createdRoom._id;\n        }\n\n        Promise.await(this.TeamModel.updateMainRoomForTeam(teamId, roomId));\n        teamData.roomId = roomId;\n        return _objectSpread({\n          _id: teamId\n        }, teamData);\n      } catch (e) {\n        throw new Error('error-team-creation');\n      }\n    });\n  }\n\n  update(uid, teamId, updateData) {\n    return Promise.asyncApply(() => {\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          roomId: 1\n        }\n      }));\n\n      if (!team) {\n        return;\n      }\n\n      const user = Promise.await(this.Users.findOneById(uid));\n\n      if (!user) {\n        return;\n      }\n\n      const {\n        name,\n        type,\n        updateRoom = true\n      } = updateData;\n\n      if (updateRoom && name) {\n        saveRoomName(team.roomId, name, user);\n      }\n\n      if (updateRoom && typeof type !== 'undefined') {\n        saveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n      }\n\n      Promise.await(this.TeamModel.updateNameAndType(teamId, updateData));\n    });\n  }\n\n  findBySubscribedUserIds(userId, callerId) {\n    return Promise.asyncApply(() => {\n      const unfilteredTeams = Promise.await(this.TeamMembersModel.findByUserId(userId, {\n        projection: {\n          teamId: 1,\n          roles: 1\n        }\n      }).toArray());\n      const unfilteredTeamIds = unfilteredTeams.map(_ref3 => {\n        let {\n          teamId\n        } = _ref3;\n        return teamId;\n      });\n      let teamIds = unfilteredTeamIds;\n\n      if (callerId) {\n        const publicTeams = Promise.await(this.TeamModel.findByIdsAndType(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n          projection: {\n            _id: 1\n          }\n        }).toArray());\n        const publicTeamIds = publicTeams.map(_ref4 => {\n          let {\n            _id\n          } = _ref4;\n          return _id;\n        });\n        const privateTeamIds = unfilteredTeamIds.filter(teamId => !publicTeamIds.includes(teamId));\n        const privateTeams = Promise.await(this.TeamMembersModel.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n          projection: {\n            teamId: 1\n          }\n        }).toArray());\n        const visibleTeamIds = privateTeams.map(_ref5 => {\n          let {\n            teamId\n          } = _ref5;\n          return teamId;\n        }).concat(publicTeamIds);\n        teamIds = unfilteredTeamIds.filter(teamId => visibleTeamIds.includes(teamId));\n      }\n\n      const ownedTeams = unfilteredTeams.filter(_ref6 => {\n        let {\n          roles = []\n        } = _ref6;\n        return roles.includes('owner');\n      }).map(_ref7 => {\n        let {\n          teamId\n        } = _ref7;\n        return teamId;\n      });\n      const results = Promise.await(this.TeamModel.findByIds(teamIds).toArray());\n      return results.map(team => _objectSpread(_objectSpread({}, team), {}, {\n        isOwner: ownedTeams.includes(team._id)\n      }));\n    });\n  }\n\n  search(userId, term, options) {\n    return Promise.asyncApply(() => {\n      if (typeof term === 'string') {\n        term = new RegExp(\"^\".concat(escapeRegExp(term)), 'i');\n      }\n\n      const userTeams = Promise.await(this.TeamMembersModel.findByUserId(userId, {\n        projection: {\n          teamId: 1\n        }\n      }).toArray());\n      const teamIds = userTeams.map(_ref8 => {\n        let {\n          teamId\n        } = _ref8;\n        return teamId;\n      });\n      return options ? this.TeamModel.findByNameAndTeamIds(term, teamIds, options).toArray() : this.TeamModel.findByNameAndTeamIds(term, teamIds).toArray();\n    });\n  }\n\n  list(uid) {\n    return Promise.asyncApply(() => {\n      let {\n        offset,\n        count\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        offset: 0,\n        count: 50\n      };\n      let {\n        sort,\n        query\n      } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        sort: {}\n      };\n      const userTeams = Promise.await(this.TeamMembersModel.findByUserId(uid, {\n        projection: {\n          teamId: 1\n        }\n      }).toArray());\n      const teamIds = userTeams.map(_ref9 => {\n        let {\n          teamId\n        } = _ref9;\n        return teamId;\n      });\n\n      if (teamIds.length === 0) {\n        return {\n          total: 0,\n          records: []\n        };\n      }\n\n      const cursor = this.TeamModel.findByIds(teamIds, _objectSpread(_objectSpread({}, sort && {\n        sort\n      }), {}, {\n        limit: count,\n        skip: offset\n      }), query);\n      const records = Promise.await(cursor.toArray());\n      const results = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(records), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const record = _step.value;\n          const rooms = this.RoomsModel.findByTeamId(record._id);\n          const users = this.TeamMembersModel.findByTeamId(record._id);\n          results.push(_objectSpread(_objectSpread({}, record), {}, {\n            rooms: Promise.await(rooms.count()),\n            numberOfUsers: Promise.await(users.count())\n          }));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        total: Promise.await(cursor.count()),\n        records: results\n      };\n    });\n  }\n\n  listAll() {\n    return Promise.asyncApply(() => {\n      let {\n        offset,\n        count\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        offset: 0,\n        count: 50\n      };\n      const cursor = this.TeamModel.find({}, {\n        limit: count,\n        skip: offset\n      });\n      const records = Promise.await(cursor.toArray());\n      const results = [];\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(records), _step2; _iteratorAbruptCompletion2 = !(_step2 = Promise.await(_iterator2.next())).done; _iteratorAbruptCompletion2 = false) {\n          const record = _step2.value;\n          const rooms = this.RoomsModel.findByTeamId(record._id);\n          const users = this.TeamMembersModel.findByTeamId(record._id);\n          results.push(_objectSpread(_objectSpread({}, record), {}, {\n            rooms: Promise.await(rooms.count()),\n            numberOfUsers: Promise.await(users.count())\n          }));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            Promise.await(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return {\n        total: Promise.await(cursor.count()),\n        records: results\n      };\n    });\n  }\n\n  listByNames(names, options) {\n    return Promise.asyncApply(() => {\n      if (options === undefined) {\n        return this.TeamModel.findByNames(names).toArray();\n      }\n\n      return this.TeamModel.findByNames(names, options).toArray();\n    });\n  }\n\n  listByIds(ids, options) {\n    return Promise.asyncApply(() => {\n      return this.TeamModel.findByIds(ids, options).toArray();\n    });\n  }\n\n  addRooms(uid, rooms, teamId) {\n    return Promise.asyncApply(() => {\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      if (!rooms) {\n        throw new Error('missing-rooms');\n      }\n\n      if (!uid) {\n        throw new Error('missing-userId');\n      }\n\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!team) {\n        throw new Error('invalid-team');\n      } // at this point, we already checked for the permission\n      // so we just need to check if the user can see the room\n\n\n      const user = Promise.await(this.Users.findOneById(uid));\n      const rids = rooms.filter(rid => rid && typeof rid === 'string');\n      const validRooms = Promise.await(this.RoomsModel.findManyByRoomIds(rids).toArray());\n\n      if (validRooms.length < rids.length) {\n        throw new Error('invalid-room');\n      } // validate access for every room first\n\n\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n\n      var _iteratorError3;\n\n      try {\n        for (var _iterator3 = _asyncIterator(validRooms), _step3; _iteratorAbruptCompletion3 = !(_step3 = Promise.await(_iterator3.next())).done; _iteratorAbruptCompletion3 = false) {\n          const room = _step3.value;\n          const canSeeRoom = Promise.await(canAccessRoom(room, user));\n\n          if (!canSeeRoom) {\n            throw new Error('invalid-room');\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            Promise.await(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorAbruptCompletion4 = false;\n      var _didIteratorError4 = false;\n\n      var _iteratorError4;\n\n      try {\n        for (var _iterator4 = _asyncIterator(validRooms), _step4; _iteratorAbruptCompletion4 = !(_step4 = Promise.await(_iterator4.next())).done; _iteratorAbruptCompletion4 = false) {\n          const room = _step4.value;\n\n          if (room.teamId) {\n            throw new Error('room-already-on-team');\n          }\n\n          if (!Promise.await(this.SubscriptionsModel.isUserInRole(uid, 'owner', room._id))) {\n            throw new Error('error-no-owner-channel');\n          }\n\n          room.teamId = teamId;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n            Promise.await(_iterator4.return());\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.RoomsModel.setTeamByIds(rids, teamId);\n      return validRooms;\n    });\n  }\n\n  removeRoom(uid, rid, teamId) {\n    return Promise.asyncApply(() => {\n      let canRemoveAnyRoom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      if (!rid) {\n        throw new Error('missing-roomId');\n      }\n\n      if (!uid) {\n        throw new Error('missing-userId');\n      }\n\n      const room = Promise.await(this.RoomsModel.findOneById(rid));\n\n      if (!room) {\n        throw new Error('invalid-room');\n      }\n\n      if (!canRemoveAnyRoom) {\n        const user = Promise.await(this.Users.findOneById(uid));\n        const canSeeRoom = Promise.await(canAccessRoom(room, user));\n\n        if (!canSeeRoom) {\n          throw new Error('invalid-room');\n        }\n      }\n\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!team) {\n        throw new Error('invalid-team');\n      }\n\n      if (room.teamId !== teamId) {\n        throw new Error('room-not-on-that-team');\n      }\n\n      delete room.teamId;\n      delete room.teamDefault;\n      this.RoomsModel.unsetTeamById(room._id);\n      return _objectSpread({}, room);\n    });\n  }\n\n  unsetTeamIdOfRooms(teamId) {\n    return Promise.asyncApply(() => {\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      Promise.await(this.RoomsModel.unsetTeamId(teamId));\n    });\n  }\n\n  updateRoom(uid, rid, isDefault) {\n    return Promise.asyncApply(() => {\n      let canUpdateAnyRoom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!rid) {\n        throw new Error('missing-roomId');\n      }\n\n      if (!uid) {\n        throw new Error('missing-userId');\n      }\n\n      const room = Promise.await(this.RoomsModel.findOneById(rid));\n\n      if (!room) {\n        throw new Error('invalid-room');\n      }\n\n      const user = Promise.await(this.Users.findOneById(uid));\n\n      if (!canUpdateAnyRoom) {\n        const canSeeRoom = Promise.await(canAccessRoom(room, user));\n\n        if (!canSeeRoom) {\n          throw new Error('invalid-room');\n        }\n      }\n\n      if (!room.teamId) {\n        throw new Error('room-not-on-team');\n      }\n\n      room.teamDefault = isDefault;\n      this.RoomsModel.setTeamDefaultById(rid, isDefault);\n\n      if (room.teamDefault) {\n        const teamMembers = Promise.await(this.members(uid, room.teamId, true, undefined, undefined));\n        teamMembers.records.map(m => addUserToRoom(room._id, m.user, user));\n      }\n\n      return _objectSpread({}, room);\n    });\n  }\n\n  listTeamsBySubscriberUserId(uid, options) {\n    if (options) {\n      this.TeamMembersModel.findByUserId(uid, options).toArray();\n    }\n\n    return this.TeamMembersModel.findByUserId(uid).toArray();\n  }\n\n  listRooms(uid, teamId, filter) {\n    return Promise.asyncApply(() => {\n      let {\n        offset: skip,\n        count: limit\n      } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        offset: 0,\n        count: 50\n      };\n\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          _id: 1,\n          type: 1\n        }\n      }));\n\n      if (!team) {\n        throw new Error('invalid-team');\n      }\n\n      const {\n        getAllRooms,\n        allowPrivateTeam,\n        name,\n        isDefault\n      } = filter;\n      const isMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId));\n\n      if (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n        throw new Error('user-not-on-private-team');\n      }\n\n      if (getAllRooms) {\n        const teamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, {\n          skip,\n          limit\n        });\n        return {\n          total: Promise.await(teamRoomsCursor.count()),\n          records: Promise.await(teamRoomsCursor.toArray())\n        };\n      }\n\n      const user = Promise.await(this.Users.findOneById(uid, {\n        projection: {\n          __rooms: 1\n        }\n      }));\n      const userRooms = user === null || user === void 0 ? void 0 : user.__rooms;\n      const validTeamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, {\n        skip,\n        limit\n      });\n      return {\n        total: Promise.await(validTeamRoomsCursor.count()),\n        records: Promise.await(validTeamRoomsCursor.toArray())\n      };\n    });\n  }\n\n  listRoomsOfUser(uid, teamId, userId, allowPrivateTeam, showCanDeleteOnly) {\n    return Promise.asyncApply(() => {\n      let {\n        offset: skip,\n        count: limit\n      } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n        offset: 0,\n        count: 50\n      };\n\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {}));\n\n      if (!team) {\n        throw new Error('invalid-team');\n      }\n\n      const isMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId));\n\n      if (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n        throw new Error('user-not-on-private-team');\n      }\n\n      const teamRooms = Promise.await(this.RoomsModel.findByTeamId(teamId, {\n        projection: {\n          _id: 1,\n          t: 1\n        }\n      }).toArray());\n      let teamRoomIds;\n\n      if (showCanDeleteOnly) {\n        var _iteratorAbruptCompletion5 = false;\n        var _didIteratorError5 = false;\n\n        var _iteratorError5;\n\n        try {\n          for (var _iterator5 = _asyncIterator(teamRooms), _step5; _iteratorAbruptCompletion5 = !(_step5 = Promise.await(_iterator5.next())).done; _iteratorAbruptCompletion5 = false) {\n            const room = _step5.value;\n            const roomType = room.t;\n            const canDeleteRoom = Promise.await(Authorization.hasPermission(userId, roomType === 'c' ? 'delete-c' : 'delete-p', room._id));\n            room.userCanDelete = canDeleteRoom;\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n              Promise.await(_iterator5.return());\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n\n        teamRoomIds = teamRooms.filter(room => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map(room => room._id);\n      } else {\n        teamRoomIds = teamRooms.filter(room => room.t === 'p' || room.t === 'c').map(room => room._id);\n      }\n\n      const subscriptionsCursor = this.SubscriptionsModel.findByUserIdAndRoomIds(userId, teamRoomIds);\n      const subscriptionRoomIds = Promise.await(subscriptionsCursor.toArray()).map(subscription => subscription.rid);\n      const availableRoomsCursor = this.RoomsModel.findManyByRoomIds(subscriptionRoomIds, {\n        skip,\n        limit\n      });\n      const rooms = Promise.await(availableRoomsCursor.toArray());\n      const roomData = getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n      const records = [];\n\n      for (const room of rooms) {\n        const roomInfo = roomData.find(data => data.rid === room._id);\n        room.isLastOwner = roomInfo.userIsLastOwner;\n        records.push(room);\n      }\n\n      return {\n        total: Promise.await(availableRoomsCursor.count()),\n        records\n      };\n    });\n  }\n\n  getMatchingTeamRooms(teamId, rids) {\n    return Promise.asyncApply(() => {\n      if (!teamId) {\n        throw new Error('missing-teamId');\n      }\n\n      if (!rids) {\n        return [];\n      }\n\n      if (!Array.isArray(rids)) {\n        throw new Error('invalid-list-of-rooms');\n      }\n\n      const rooms = Promise.await(this.RoomsModel.findByTeamIdAndRoomsId(teamId, rids, {\n        projection: {\n          _id: 1\n        }\n      }).toArray());\n      return rooms.map(_ref10 => {\n        let {\n          _id\n        } = _ref10;\n        return _id;\n      });\n    });\n  }\n\n  getMembersByTeamIds(teamIds, options) {\n    return Promise.asyncApply(() => {\n      return this.TeamMembersModel.findByTeamIds(teamIds, options).toArray();\n    });\n  }\n\n  members(uid, teamId, canSeeAll) {\n    return Promise.asyncApply(() => {\n      let {\n        offset,\n        count\n      } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        offset: 0,\n        count: 50\n      };\n      let query = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      const isMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId));\n\n      if (!isMember && !canSeeAll) {\n        return {\n          total: 0,\n          records: []\n        };\n      }\n\n      const users = Promise.await(this.Users.find(_objectSpread({}, query)).toArray());\n      const userIds = users.map(m => m._id);\n      const cursor = this.TeamMembersModel.findMembersInfoByTeamId(teamId, count, offset, {\n        userId: {\n          $in: userIds\n        }\n      });\n      const records = Promise.await(cursor.toArray());\n      const results = [];\n      var _iteratorAbruptCompletion6 = false;\n      var _didIteratorError6 = false;\n\n      var _iteratorError6;\n\n      try {\n        for (var _iterator6 = _asyncIterator(records), _step6; _iteratorAbruptCompletion6 = !(_step6 = Promise.await(_iterator6.next())).done; _iteratorAbruptCompletion6 = false) {\n          const record = _step6.value;\n          const user = users.find(u => u._id === record.userId);\n          results.push({\n            user: {\n              _id: user._id,\n              username: user.username,\n              name: user.name,\n              status: user.status\n            },\n            roles: record.roles,\n            createdBy: {\n              _id: record.createdBy._id,\n              username: record.createdBy.username\n            },\n            createdAt: record.createdAt\n          });\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n            Promise.await(_iterator6.return());\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return {\n        total: Promise.await(cursor.count()),\n        records: results\n      };\n    });\n  }\n\n  addMembers(uid, teamId, members) {\n    return Promise.asyncApply(() => {\n      const createdBy = Promise.await(this.Users.findOneById(uid, {\n        projection: {\n          username: 1\n        }\n      }));\n\n      if (!createdBy) {\n        throw new Error('invalid-user');\n      }\n\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          roomId: 1\n        }\n      }));\n\n      if (!team) {\n        throw new Error('team-does-not-exist');\n      }\n\n      var _iteratorAbruptCompletion7 = false;\n      var _didIteratorError7 = false;\n\n      var _iteratorError7;\n\n      try {\n        for (var _iterator7 = _asyncIterator(members), _step7; _iteratorAbruptCompletion7 = !(_step7 = Promise.await(_iterator7.next())).done; _iteratorAbruptCompletion7 = false) {\n          const member = _step7.value;\n          const user = Promise.await(this.Users.findOneById(member.userId, {\n            projection: {\n              username: 1\n            }\n          }));\n          Promise.await(addUserToRoom(team.roomId, user, createdBy, false));\n\n          if (member.roles) {\n            Promise.await(this.addRolesToMember(teamId, member.userId, member.roles));\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n            Promise.await(_iterator7.return());\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    });\n  }\n\n  updateMember(teamId, member) {\n    return Promise.asyncApply(() => {\n      if (!member.userId) {\n        throw new Error('invalid-user');\n      }\n\n      const memberUpdate = {\n        roles: member.roles ? member.roles : []\n      };\n      Promise.await(this.TeamMembersModel.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate));\n    });\n  }\n\n  removeMember(teamId, userId) {\n    return Promise.asyncApply(() => {\n      Promise.await(this.TeamMembersModel.deleteByUserIdAndTeamId(userId, teamId));\n    });\n  }\n\n  removeMembers(uid, teamId, members) {\n    return Promise.asyncApply(() => {\n      const team = Promise.await(this.TeamModel.findOneById(teamId, {\n        projection: {\n          _id: 1,\n          roomId: 1\n        }\n      }));\n\n      if (!team) {\n        throw new Error('team-does-not-exist');\n      }\n\n      const membersIds = members.map(m => m.userId);\n      const usersToRemove = Promise.await(this.Users.findByIds(membersIds, {\n        projection: {\n          _id: 1,\n          username: 1\n        }\n      }).toArray());\n      const byUser = Promise.await(this.Users.findOneById(uid, {\n        projection: {\n          _id: 1,\n          username: 1\n        }\n      }));\n      var _iteratorAbruptCompletion8 = false;\n      var _didIteratorError8 = false;\n\n      var _iteratorError8;\n\n      try {\n        for (var _iterator8 = _asyncIterator(members), _step8; _iteratorAbruptCompletion8 = !(_step8 = Promise.await(_iterator8.next())).done; _iteratorAbruptCompletion8 = false) {\n          var _existingMember$roles;\n\n          const member = _step8.value;\n\n          if (!member.userId) {\n            throw new Error('invalid-user');\n          }\n\n          const existingMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(member.userId, team._id));\n\n          if (!existingMember) {\n            throw new Error('member-does-not-exist');\n          }\n\n          if ((_existingMember$roles = existingMember.roles) !== null && _existingMember$roles !== void 0 && _existingMember$roles.includes('owner')) {\n            const owners = this.TeamMembersModel.findByTeamIdAndRole(team._id, 'owner');\n            const totalOwners = Promise.await(owners.count());\n\n            if (totalOwners === 1) {\n              throw new Error('last-owner-can-not-be-removed');\n            }\n          }\n\n          this.TeamMembersModel.removeById(existingMember._id);\n          const removedUser = usersToRemove.find(u => u._id === existingMember.userId);\n          removeUserFromRoom(team.roomId, removedUser, {\n            byUser: uid !== member.userId ? byUser : undefined\n          });\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n            Promise.await(_iterator8.return());\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      return true;\n    });\n  }\n\n  insertMemberOnTeams(userId, teamIds) {\n    return Promise.asyncApply(() => {\n      const inviter = {\n        _id: 'rocket.cat',\n        username: 'rocket.cat'\n      };\n      Promise.await(Promise.all(teamIds.map(teamId => Promise.asyncApply(() => {\n        const team = Promise.await(this.TeamModel.findOneById(teamId));\n        const user = Promise.await(this.Users.findOneById(userId));\n\n        if (!team || !user) {\n          return;\n        }\n\n        Promise.await(addUserToRoom(team.roomId, user, inviter, false));\n      }))));\n    });\n  }\n\n  removeMemberFromTeams(userId, teamIds) {\n    return Promise.asyncApply(() => {\n      Promise.await(Promise.all(teamIds.map(teamId => Promise.asyncApply(() => {\n        const team = Promise.await(this.TeamModel.findOneById(teamId));\n        const user = Promise.await(this.Users.findOneById(userId));\n\n        if (!team || !user) {\n          return;\n        }\n\n        Promise.await(removeUserFromRoom(team.roomId, user));\n      }))));\n    });\n  }\n\n  removeAllMembersFromTeam(teamId) {\n    return Promise.asyncApply(() => {\n      const team = Promise.await(this.TeamModel.findOneById(teamId));\n\n      if (!team) {\n        return;\n      }\n\n      Promise.await(this.TeamMembersModel.deleteByTeamId(team._id));\n    });\n  }\n\n  addMember(inviter, userId, teamId) {\n    return Promise.asyncApply(() => {\n      const isAlreadyAMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (isAlreadyAMember) {\n        return false;\n      }\n\n      let inviterData = {};\n\n      if (inviter) {\n        inviterData = {\n          _id: inviter._id,\n          username: inviter.username\n        };\n      }\n\n      const member = Promise.await(this.TeamMembersModel.createOneByTeamIdAndUserId(teamId, userId, inviterData)).ops[0];\n      Promise.await(this.addMembersToDefaultRooms(inviter, teamId, [member]));\n      return true;\n    });\n  }\n\n  getAllPublicTeams(options) {\n    return Promise.asyncApply(() => {\n      return options ? this.TeamModel.findByType(TEAM_TYPE.PUBLIC, options).toArray() : this.TeamModel.findByType(TEAM_TYPE.PUBLIC).toArray();\n    });\n  }\n\n  getOneById(teamId, options) {\n    return Promise.asyncApply(() => {\n      if (options === undefined) {\n        return this.TeamModel.findOneById(teamId);\n      }\n\n      return this.TeamModel.findOneById(teamId, options);\n    });\n  }\n\n  getOneByName(teamName, options) {\n    return Promise.asyncApply(() => {\n      if (!options) {\n        return this.TeamModel.findOneByName(teamName);\n      }\n\n      return this.TeamModel.findOneByName(teamName, options);\n    });\n  }\n\n  getOneByMainRoomId(roomId) {\n    return Promise.asyncApply(() => {\n      return this.TeamModel.findOneByMainRoomId(roomId, {\n        projection: {\n          _id: 1\n        }\n      });\n    });\n  }\n\n  getOneByRoomId(roomId) {\n    return Promise.asyncApply(() => {\n      const room = Promise.await(this.RoomsModel.findOneById(roomId));\n\n      if (!room) {\n        throw new Error('invalid-room');\n      }\n\n      if (!room.teamId) {\n        throw new Error('room-not-on-team');\n      }\n\n      return this.TeamModel.findOneById(room.teamId);\n    });\n  }\n\n  addRolesToMember(teamId, userId, roles) {\n    return Promise.asyncApply(() => {\n      const isMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!isMember) {\n        // TODO should this throw an error instead?\n        return false;\n      }\n\n      return !!Promise.await(this.TeamMembersModel.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n    });\n  }\n\n  removeRolesFromMember(teamId, userId, roles) {\n    return Promise.asyncApply(() => {\n      const isMember = Promise.await(this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!isMember) {\n        // TODO should this throw an error instead?\n        return false;\n      }\n\n      return !!Promise.await(this.TeamMembersModel.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n    });\n  }\n\n  getInfoByName(teamName) {\n    return Promise.asyncApply(() => {\n      return this.TeamModel.findOne({\n        name: teamName\n      }, {\n        projection: {\n          usernames: 0\n        }\n      });\n    });\n  }\n\n  getInfoById(teamId) {\n    return Promise.asyncApply(() => {\n      return this.TeamModel.findOne({\n        _id: teamId\n      }, {\n        projection: {\n          usernames: 0\n        }\n      });\n    });\n  }\n\n  addMembersToDefaultRooms(inviter, teamId, members) {\n    return Promise.asyncApply(() => {\n      const defaultRooms = Promise.await(this.RoomsModel.findDefaultRoomsForTeam(teamId).toArray());\n      const users = Promise.await(this.Users.findActiveByIds(members.map(member => member.userId)).toArray());\n      defaultRooms.map(room => Promise.asyncApply(() => {\n        // at this point, users are already part of the team so we won't check for membership\n        var _iteratorAbruptCompletion9 = false;\n        var _didIteratorError9 = false;\n\n        var _iteratorError9;\n\n        try {\n          for (var _iterator9 = _asyncIterator(users), _step9; _iteratorAbruptCompletion9 = !(_step9 = Promise.await(_iterator9.next())).done; _iteratorAbruptCompletion9 = false) {\n            const user = _step9.value;\n            // add each user to the default room\n            addUserToRoom(room._id, user, inviter, false);\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion9 && _iterator9.return != null) {\n              Promise.await(_iterator9.return());\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n      }));\n    });\n  }\n\n  deleteById(teamId) {\n    return Promise.asyncApply(() => {\n      return !!Promise.await(this.TeamModel.deleteOneById(teamId));\n    });\n  }\n\n  deleteByName(teamName) {\n    return Promise.asyncApply(() => {\n      return !!Promise.await(this.TeamModel.deleteOneByName(teamName));\n    });\n  }\n\n  getStatistics() {\n    return Promise.asyncApply(() => {\n      const stats = {};\n      const teams = this.TeamModel.find({});\n      const teamsArray = Promise.await(teams.toArray());\n      stats.totalTeams = Promise.await(teams.count());\n      stats.teamStats = [];\n      var _iteratorAbruptCompletion10 = false;\n      var _didIteratorError10 = false;\n\n      var _iteratorError10;\n\n      try {\n        for (var _iterator10 = _asyncIterator(teamsArray), _step10; _iteratorAbruptCompletion10 = !(_step10 = Promise.await(_iterator10.next())).done; _iteratorAbruptCompletion10 = false) {\n          const team = _step10.value;\n          // exclude the main room from the stats\n          const teamRooms = Promise.await(this.RoomsModel.find({\n            teamId: team._id,\n            teamMain: {\n              $exists: false\n            }\n          }).toArray());\n          const roomIds = teamRooms.map(r => r._id);\n          const [totalMessagesInTeam, defaultRooms, totalMembers] = Promise.await(Promise.all([this.MessagesModel.find({\n            rid: {\n              $in: roomIds\n            }\n          }).count(), this.RoomsModel.findDefaultRoomsForTeam(team._id).count(), this.TeamMembersModel.findByTeamId(team._id).count()]));\n          const teamData = {\n            teamId: team._id,\n            mainRoom: team.roomId,\n            totalRooms: teamRooms.length,\n            totalMessages: totalMessagesInTeam,\n            totalPublicRooms: teamRooms.filter(r => r.t === 'c').length,\n            totalPrivateRooms: teamRooms.filter(r => r.t !== 'c').length,\n            totalDefaultRooms: defaultRooms,\n            totalMembers\n          };\n          stats.teamStats.push(teamData);\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion10 && _iterator10.return != null) {\n            Promise.await(_iterator10.return());\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      return stats;\n    });\n  }\n\n  autocomplete(uid, name) {\n    return Promise.asyncApply(() => {\n      const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n      const subscriptions = Promise.await(this.SubscriptionsModel.find({\n        'u._id': uid\n      }, {\n        projection: {\n          rid: 1\n        }\n      }).toArray());\n      const subscriptionIds = subscriptions.map(_ref11 => {\n        let {\n          rid\n        } = _ref11;\n        return rid;\n      });\n      const rooms = Promise.await(this.RoomsModel.find({\n        teamMain: true,\n        $and: [{\n          $or: [{\n            name: nameRegex\n          }, {\n            fname: nameRegex\n          }]\n        }, {\n          $or: [{\n            t: 'c'\n          }, {\n            _id: {\n              $in: subscriptionIds\n            }\n          }]\n        }]\n      }, {\n        projection: {\n          fname: 1,\n          teamId: 1,\n          name: 1,\n          t: 1,\n          avatarETag: 1\n        },\n        limit: 10,\n        sort: {\n          name: 1,\n          fname: 1\n        }\n      }).toArray());\n      return rooms;\n    });\n  }\n\n}","map":{"version":3,"sources":["server/services/team/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Db, FindOneOptions, FilterQuery, WithoutProjection } from 'mongodb';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { checkUsernameAvailability } from '../../../app/lib/server/functions';\nimport { addUserToRoom } from '../../../app/lib/server/functions/addUserToRoom';\nimport { removeUserFromRoom } from '../../../app/lib/server/functions/removeUserFromRoom';\nimport { getSubscribedRoomsForUserWithDetails } from '../../../app/lib/server/functions/getRoomsWithSingleOwner';\nimport type { InsertionModel } from '../../../app/models/server/raw/BaseRaw';\nimport { MessagesRaw } from '../../../app/models/server/raw/Messages';\nimport { RoomsRaw } from '../../../app/models/server/raw/Rooms';\nimport { SubscriptionsRaw } from '../../../app/models/server/raw/Subscriptions';\nimport { TeamRaw } from '../../../app/models/server/raw/Team';\nimport { TeamMemberRaw } from '../../../app/models/server/raw/TeamMember';\nimport { UsersRaw } from '../../../app/models/server/raw/Users';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IPaginationOptions, IQueryOptions, IRecordsWithTotal, ITeam, ITeamMember, ITeamStats, TEAM_TYPE } from '../../../definition/ITeam';\nimport { IUser } from '../../../definition/IUser';\nimport { Room, Authorization } from '../../sdk';\nimport {\n\tIListRoomsFilter,\n\tITeamAutocompleteResult,\n\tITeamCreateParams,\n\tITeamInfo,\n\tITeamMemberInfo,\n\tITeamMemberParams,\n\tITeamService,\n\tITeamUpdateData,\n} from '../../sdk/types/ITeamService';\nimport { ServiceClass } from '../../sdk/types/ServiceClass';\nimport { canAccessRoom } from '../authorization/canAccessRoom';\nimport { saveRoomName } from '../../../app/channel-settings/server';\nimport { saveRoomType } from '../../../app/channel-settings/server/functions/saveRoomType';\nimport { ISubscription } from '../../../definition/ISubscription';\n\nexport class TeamService extends ServiceClass implements ITeamService {\n\tprotected name = 'team';\n\n\tprivate TeamModel: TeamRaw;\n\n\tprivate RoomsModel: RoomsRaw;\n\n\tprivate SubscriptionsModel: SubscriptionsRaw;\n\n\tprivate Users: UsersRaw;\n\n\tprivate TeamMembersModel: TeamMemberRaw;\n\n\tprivate MessagesModel: MessagesRaw;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.RoomsModel = new RoomsRaw(db.collection('rocketchat_room'));\n\t\tthis.Users = new UsersRaw(db.collection('users'));\n\t\tthis.SubscriptionsModel = new SubscriptionsRaw(db.collection('rocketchat_subscription'), {\n\t\t\tUsers: this.Users,\n\t\t});\n\t\tthis.TeamModel = new TeamRaw(db.collection('rocketchat_team'));\n\t\tthis.TeamMembersModel = new TeamMemberRaw(db.collection('rocketchat_team_member'));\n\t\tthis.MessagesModel = new MessagesRaw(db.collection('rocketchat_message'));\n\t}\n\n\tasync create(uid: string, { team, room = { name: team.name, extraData: {} }, members, owner }: ITeamCreateParams): Promise<ITeam> {\n\t\tif (!checkUsernameAvailability(team.name)) {\n\t\t\tthrow new Error('team-name-already-exists');\n\t\t}\n\n\t\tconst existingRoom = await this.RoomsModel.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tif (existingRoom && existingRoom._id !== room.id) {\n\t\t\tthrow new Error('room-name-already-exists');\n\t\t}\n\n\t\tconst createdBy = await this.Users.findOneById<Pick<IUser, 'username' | '_id'>>(uid, {\n\t\t\tprojection: { username: 1 },\n\t\t});\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\t// TODO add validations to `data` and `members`\n\n\t\tconst membersResult = await this.Users.findActiveByIds(members, {\n\t\t\tprojection: { username: 1, _id: 0 },\n\t\t}).toArray();\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\n\t\tconst teamData = {\n\t\t\t...team,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t\t_updatedAt: new Date(), // TODO how to avoid having to do this?\n\t\t\troomId: '', // this will be populated at the end\n\t\t};\n\n\t\ttry {\n\t\t\tconst result = await this.TeamModel.insertOne(teamData);\n\t\t\tconst teamId = result.insertedId;\n\t\t\t// the same uid can be passed at 3 positions: owner, member list or via caller\n\t\t\t// if the owner is present, remove it from the members list\n\t\t\t// if the owner is not present, remove the caller from the members list\n\t\t\tconst excludeFromMembers = owner ? [owner] : [uid];\n\n\t\t\t// filter empty strings and falsy values from members list\n\t\t\tconst membersList: Array<InsertionModel<ITeamMember>> =\n\t\t\t\tmembers\n\t\t\t\t\t?.filter(Boolean)\n\t\t\t\t\t.filter((memberId) => !excludeFromMembers.includes(memberId))\n\t\t\t\t\t.map((memberId) => ({\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tuserId: memberId,\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tcreatedBy,\n\t\t\t\t\t})) || [];\n\n\t\t\tmembersList.push({\n\t\t\t\tteamId,\n\t\t\t\tuserId: owner || uid,\n\t\t\t\troles: ['owner'],\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy,\n\t\t\t});\n\n\t\t\tawait this.TeamMembersModel.insertMany(membersList);\n\n\t\t\tlet roomId = room.id;\n\t\t\tif (roomId) {\n\t\t\t\tawait this.RoomsModel.setTeamMainById(roomId, teamId);\n\t\t\t} else {\n\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\n\t\t\t\tconst newRoom = {\n\t\t\t\t\t...room,\n\t\t\t\t\ttype: roomType,\n\t\t\t\t\tname: team.name,\n\t\t\t\t\tmembers: memberUsernames,\n\t\t\t\t\textraData: {\n\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\troomId = createdRoom._id;\n\t\t\t}\n\n\t\t\tawait this.TeamModel.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new Error('error-team-creation');\n\t\t}\n\t}\n\n\tasync update(uid: string, teamId: string, updateData: ITeamUpdateData): Promise<void> {\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, updateRoom = true } = updateData;\n\n\t\tif (updateRoom && name) {\n\t\t\tsaveRoomName(team.roomId, name, user);\n\t\t}\n\n\t\tif (updateRoom && typeof type !== 'undefined') {\n\t\t\tsaveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n\t\t}\n\n\t\tawait this.TeamModel.updateNameAndType(teamId, updateData);\n\t}\n\n\tasync findBySubscribedUserIds(userId: string, callerId?: string): Promise<ITeam[]> {\n\t\tconst unfilteredTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },\n\t\t}).toArray();\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\n\t\tlet teamIds = unfilteredTeamIds;\n\n\t\tif (callerId) {\n\t\t\tconst publicTeams = await this.TeamModel.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray();\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst privateTeamIds = unfilteredTeamIds.filter((teamId) => !publicTeamIds.includes(teamId));\n\n\t\t\tconst privateTeams = await this.TeamMembersModel.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },\n\t\t\t}).toArray();\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tteamIds = unfilteredTeamIds.filter((teamId) => visibleTeamIds.includes(teamId));\n\t\t}\n\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\n\t\tconst results = await this.TeamModel.findByIds(teamIds).toArray();\n\t\treturn results.map((team) => ({\n\t\t\t...team,\n\t\t\tisOwner: ownedTeams.includes(team._id),\n\t\t}));\n\t}\n\n\tsearch(userId: string, term: string | RegExp): Promise<ITeam[]>;\n\n\tsearch(userId: string, term: string | RegExp, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tsearch<P>(userId: string, term: string | RegExp, options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync search<P>(\n\t\tuserId: string,\n\t\tterm: string | RegExp,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\tif (typeof term === 'string') {\n\t\t\tterm = new RegExp(`^${escapeRegExp(term)}`, 'i');\n\t\t}\n\n\t\tconst userTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\n\t\treturn options\n\t\t\t? this.TeamModel.findByNameAndTeamIds(term, teamIds, options).toArray()\n\t\t\t: this.TeamModel.findByNameAndTeamIds(term, teamIds).toArray();\n\t}\n\n\tasync list(\n\t\tuid: string,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\t{ sort, query }: IQueryOptions<ITeam> = { sort: {} },\n\t): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst userTeams = await this.TeamMembersModel.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tif (teamIds.length === 0) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst cursor = this.TeamModel.findByIds(\n\t\t\tteamIds,\n\t\t\t{\n\t\t\t\t...(sort && { sort }),\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t\tquery,\n\t\t);\n\n\t\tconst records = await cursor.toArray();\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst rooms = this.RoomsModel.findByTeamId(record._id);\n\t\t\tconst users = this.TeamMembersModel.findByTeamId(record._id);\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await rooms.count(),\n\t\t\t\tnumberOfUsers: await users.count(),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync listAll({ offset, count }: IPaginationOptions = { offset: 0, count: 50 }): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst cursor = this.TeamModel.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t);\n\n\t\tconst records = await cursor.toArray();\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst rooms = this.RoomsModel.findByTeamId(record._id);\n\t\t\tconst users = this.TeamMembersModel.findByTeamId(record._id);\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await rooms.count(),\n\t\t\t\tnumberOfUsers: await users.count(),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tlistByNames(names: Array<string>): Promise<ITeam[]>;\n\n\tlistByNames(names: Array<string>, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tlistByNames<P>(names: Array<string>, options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync listByNames<P>(\n\t\tnames: Array<string>,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<P[] | ITeam[]> {\n\t\tif (options === undefined) {\n\t\t\treturn this.TeamModel.findByNames(names).toArray();\n\t\t}\n\t\treturn this.TeamModel.findByNames(names, options).toArray();\n\t}\n\n\tasync listByIds(ids: Array<string>, options?: FindOneOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn this.TeamModel.findByIds(ids, options).toArray();\n\t}\n\n\tasync addRooms(uid: string, rooms: Array<string>, teamId: string): Promise<Array<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rooms) {\n\t\t\tthrow new Error('missing-rooms');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById(teamId, { projection: { _id: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\t// at this point, we already checked for the permission\n\t\t// so we just need to check if the user can see the room\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tconst rids = rooms.filter((rid) => rid && typeof rid === 'string');\n\t\tconst validRooms = await this.RoomsModel.findManyByRoomIds(rids).toArray();\n\t\tif (validRooms.length < rids.length) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\t// validate access for every room first\n\t\tfor await (const room of validRooms) {\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tfor await (const room of validRooms) {\n\t\t\tif (room.teamId) {\n\t\t\t\tthrow new Error('room-already-on-team');\n\t\t\t}\n\n\t\t\tif (!(await this.SubscriptionsModel.isUserInRole(uid, 'owner', room._id))) {\n\t\t\t\tthrow new Error('error-no-owner-channel');\n\t\t\t}\n\n\t\t\troom.teamId = teamId;\n\t\t}\n\n\t\tthis.RoomsModel.setTeamByIds(rids, teamId);\n\t\treturn validRooms;\n\t}\n\n\tasync removeRoom(uid: string, rid: string, teamId: string, canRemoveAnyRoom = false): Promise<IRoom> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await this.RoomsModel.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!canRemoveAnyRoom) {\n\t\t\tconst user = await this.Users.findOneById(uid);\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById(teamId, { projection: { _id: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tif (room.teamId !== teamId) {\n\t\t\tthrow new Error('room-not-on-that-team');\n\t\t}\n\n\t\tdelete room.teamId;\n\t\tdelete room.teamDefault;\n\t\tthis.RoomsModel.unsetTeamById(room._id);\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tasync unsetTeamIdOfRooms(teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tawait this.RoomsModel.unsetTeamId(teamId);\n\t}\n\n\tasync updateRoom(uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom = false): Promise<IRoom> {\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await this.RoomsModel.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await this.Users.findOneById(uid);\n\t\tif (!canUpdateAnyRoom) {\n\t\t\tconst canSeeRoom = await canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\t\troom.teamDefault = isDefault;\n\t\tthis.RoomsModel.setTeamDefaultById(rid, isDefault);\n\n\t\tif (room.teamDefault) {\n\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\n\t\t\tteamMembers.records.map((m) => addUserToRoom(room._id, m.user, user));\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: WithoutProjection<FindOneOptions<ITeamMember>>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P>(uid: string, options: FindOneOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P>(\n\t\tuid: string,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeamMember>> | FindOneOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\tthis.TeamMembersModel.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn this.TeamMembersModel.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, '_id' | 'type'>>(teamId, {\n\t\t\tprojection: { _id: 1, type: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst { getAllRooms, allowPrivateTeam, name, isDefault } = filter;\n\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tif (getAllRooms) {\n\t\t\tconst teamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, { skip, limit });\n\t\t\treturn {\n\t\t\t\ttotal: await teamRoomsCursor.count(),\n\t\t\t\trecords: await teamRoomsCursor.toArray(),\n\t\t\t};\n\t\t}\n\n\t\tconst user = await this.Users.findOneById<{ __rooms: string[] }>(uid, {\n\t\t\tprojection: { __rooms: 1 },\n\t\t});\n\t\tconst userRooms = user?.__rooms;\n\t\tconst validTeamRoomsCursor = this.RoomsModel.findByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\n\t\treturn {\n\t\t\ttotal: await validTeamRoomsCursor.count(),\n\t\t\trecords: await validTeamRoomsCursor.toArray(),\n\t\t};\n\t}\n\n\tasync listRoomsOfUser(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tallowPrivateTeam: boolean,\n\t\tshowCanDeleteOnly: boolean,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await this.TeamModel.findOneById(teamId, {});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tconst teamRooms = await this.RoomsModel.findByTeamId(teamId, {\n\t\t\tprojection: { _id: 1, t: 1 },\n\t\t}).toArray();\n\t\tlet teamRoomIds: any[];\n\t\tif (showCanDeleteOnly) {\n\t\t\tfor await (const room of teamRooms) {\n\t\t\t\tconst roomType = room.t;\n\t\t\t\tconst canDeleteRoom = await Authorization.hasPermission(userId, roomType === 'c' ? 'delete-c' : 'delete-p', room._id);\n\t\t\t\troom.userCanDelete = canDeleteRoom;\n\t\t\t}\n\n\t\t\tteamRoomIds = teamRooms.filter((room) => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map((room) => room._id);\n\t\t} else {\n\t\t\tteamRoomIds = teamRooms.filter((room) => room.t === 'p' || room.t === 'c').map((room) => room._id);\n\t\t}\n\n\t\tconst subscriptionsCursor = this.SubscriptionsModel.findByUserIdAndRoomIds(userId, teamRoomIds);\n\t\tconst subscriptionRoomIds = (await subscriptionsCursor.toArray()).map((subscription) => subscription.rid);\n\t\tconst availableRoomsCursor = this.RoomsModel.findManyByRoomIds(subscriptionRoomIds, {\n\t\t\tskip,\n\t\t\tlimit,\n\t\t});\n\t\tconst rooms = await availableRoomsCursor.toArray();\n\t\tconst roomData = getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n\t\tconst records = [];\n\n\t\tfor (const room of rooms) {\n\t\t\tconst roomInfo = roomData.find((data) => data.rid === room._id);\n\t\t\troom.isLastOwner = roomInfo.userIsLastOwner;\n\t\t\trecords.push(room);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await availableRoomsCursor.count(),\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync getMatchingTeamRooms(teamId: string, rids: Array<string>): Promise<Array<string>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tif (!rids) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(rids)) {\n\t\t\tthrow new Error('invalid-list-of-rooms');\n\t\t}\n\n\t\tconst rooms = await this.RoomsModel.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },\n\t\t}).toArray();\n\t\treturn rooms.map(({ _id }: { _id: string }) => _id);\n\t}\n\n\tasync getMembersByTeamIds(teamIds: Array<string>, options: FindOneOptions<ITeamMember>): Promise<Array<ITeamMember>> {\n\t\treturn this.TeamMembersModel.findByTeamIds(teamIds, options).toArray();\n\t}\n\n\tasync members(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tcanSeeAll: boolean,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\tquery: FilterQuery<IUser> = {},\n\t): Promise<IRecordsWithTotal<ITeamMemberInfo>> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (!isMember && !canSeeAll) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst users = await this.Users.find({ ...query }).toArray();\n\t\tconst userIds = users.map((m) => m._id);\n\t\tconst cursor = this.TeamMembersModel.findMembersInfoByTeamId(teamId, count, offset, {\n\t\t\tuserId: { $in: userIds },\n\t\t});\n\n\t\tconst records = await cursor.toArray();\n\t\tconst results: ITeamMemberInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tconst user = users.find((u) => u._id === record.userId);\n\t\t\tresults.push({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tstatus: user.status,\n\t\t\t\t},\n\t\t\t\troles: record.roles,\n\t\t\t\tcreatedBy: {\n\t\t\t\t\t_id: record.createdBy._id,\n\t\t\t\t\tusername: record.createdBy.username,\n\t\t\t\t},\n\t\t\t\tcreatedAt: record.createdAt,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await cursor.count(),\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync addMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<void> {\n\t\tconst createdBy = await this.Users.findOneById(uid, { projection: { username: 1 } });\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tfor await (const member of members) {\n\t\t\tconst user = await this.Users.findOneById(member.userId, { projection: { username: 1 } });\n\t\t\tawait addUserToRoom(team.roomId, user, createdBy, false);\n\n\t\t\tif (member.roles) {\n\t\t\t\tawait this.addRolesToMember(teamId, member.userId, member.roles);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateMember(teamId: string, member: ITeamMemberParams): Promise<void> {\n\t\tif (!member.userId) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst memberUpdate: Partial<ITeamMember> = {\n\t\t\troles: member.roles ? member.roles : [],\n\t\t};\n\n\t\tawait this.TeamMembersModel.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate);\n\t}\n\n\tasync removeMember(teamId: string, userId: string): Promise<void> {\n\t\tawait this.TeamMembersModel.deleteByUserIdAndTeamId(userId, teamId);\n\t}\n\n\tasync removeMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<boolean> {\n\t\tconst team = await this.TeamModel.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await this.Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },\n\t\t}).toArray();\n\t\tconst byUser = await this.Users.findOneById(uid, { projection: { _id: 1, username: 1 } });\n\n\t\tfor await (const member of members) {\n\t\t\tif (!member.userId) {\n\t\t\t\tthrow new Error('invalid-user');\n\t\t\t}\n\n\t\t\tconst existingMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(member.userId, team._id);\n\t\t\tif (!existingMember) {\n\t\t\t\tthrow new Error('member-does-not-exist');\n\t\t\t}\n\n\t\t\tif (existingMember.roles?.includes('owner')) {\n\t\t\t\tconst owners = this.TeamMembersModel.findByTeamIdAndRole(team._id, 'owner');\n\t\t\t\tconst totalOwners = await owners.count();\n\t\t\t\tif (totalOwners === 1) {\n\t\t\t\t\tthrow new Error('last-owner-can-not-be-removed');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.TeamMembersModel.removeById(existingMember._id);\n\t\t\tconst removedUser = usersToRemove.find((u) => u._id === existingMember.userId);\n\t\t\tremoveUserFromRoom(team.roomId, removedUser, {\n\t\t\t\tbyUser: uid !== member.userId ? byUser : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync insertMemberOnTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await this.TeamModel.findOneById(teamId);\n\t\t\t\tconst user = await this.Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait addUserToRoom(team.roomId, user, inviter, false);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeMemberFromTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await this.TeamModel.findOneById(teamId);\n\t\t\t\tconst user = await this.Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait removeUserFromRoom(team.roomId, user);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeAllMembersFromTeam(teamId: string): Promise<void> {\n\t\tconst team = await this.TeamModel.findOneById(teamId);\n\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.TeamMembersModel.deleteByTeamId(team._id);\n\t}\n\n\tasync addMember(inviter: IUser, userId: string, teamId: string): Promise<boolean> {\n\t\tconst isAlreadyAMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (isAlreadyAMember) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet inviterData = {} as Pick<IUser, '_id' | 'username'>;\n\t\tif (inviter) {\n\t\t\tinviterData = { _id: inviter._id, username: inviter.username };\n\t\t}\n\n\t\tconst member = (await this.TeamMembersModel.createOneByTeamIdAndUserId(teamId, userId, inviterData)).ops[0];\n\t\tawait this.addMembersToDefaultRooms(inviter, teamId, [member]);\n\n\t\treturn true;\n\t}\n\n\tgetAllPublicTeams(): Promise<ITeam[]>;\n\n\tgetAllPublicTeams(options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam[]>;\n\n\tgetAllPublicTeams<P>(options: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync getAllPublicTeams<P>(\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\treturn options ? this.TeamModel.findByType(TEAM_TYPE.PUBLIC, options).toArray() : this.TeamModel.findByType(TEAM_TYPE.PUBLIC).toArray();\n\t}\n\n\tasync getOneById<P>(teamId: string, options?: FindOneOptions<P extends ITeam ? ITeam : P>): Promise<ITeam | P | null> {\n\t\tif (options === undefined) {\n\t\t\treturn this.TeamModel.findOneById(teamId);\n\t\t}\n\t\treturn this.TeamModel.findOneById(teamId, options);\n\t}\n\n\tasync getOneByName(teamName: string | RegExp): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options: WithoutProjection<FindOneOptions<ITeam>>): Promise<ITeam | null>;\n\n\tasync getOneByName<P>(teamName: string | RegExp, options: FindOneOptions<P>): Promise<P | null>;\n\n\tasync getOneByName<P>(\n\t\tteamName: string | RegExp,\n\t\toptions?: undefined | WithoutProjection<FindOneOptions<ITeam>> | FindOneOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam | null | P> {\n\t\tif (!options) {\n\t\t\treturn this.TeamModel.findOneByName(teamName);\n\t\t}\n\t\treturn this.TeamModel.findOneByName(teamName, options);\n\t}\n\n\tasync getOneByMainRoomId(roomId: string): Promise<Pick<ITeam, '_id'> | null> {\n\t\treturn this.TeamModel.findOneByMainRoomId<Pick<ITeam, '_id'>>(roomId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t}\n\n\tasync getOneByRoomId(roomId: string): Promise<ITeam | null> {\n\t\tconst room = await this.RoomsModel.findOneById(roomId);\n\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\n\t\treturn this.TeamModel.findOneById(room.teamId);\n\t}\n\n\tasync addRolesToMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await this.TeamMembersModel.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync removeRolesFromMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await this.TeamMembersModel.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await this.TeamMembersModel.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync getInfoByName(teamName: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn this.TeamModel.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\tname: teamName,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync getInfoById(teamId: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn this.TeamModel.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\t_id: teamId,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync addMembersToDefaultRooms(inviter: IUser, teamId: string, members: Array<Partial<ITeamMember>>): Promise<void> {\n\t\tconst defaultRooms = await this.RoomsModel.findDefaultRoomsForTeam(teamId).toArray();\n\t\tconst users = await this.Users.findActiveByIds(members.map((member) => member.userId)).toArray();\n\n\t\tdefaultRooms.map(async (room) => {\n\t\t\t// at this point, users are already part of the team so we won't check for membership\n\t\t\tfor await (const user of users) {\n\t\t\t\t// add each user to the default room\n\t\t\t\taddUserToRoom(room._id, user, inviter, false);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync deleteById(teamId: string): Promise<boolean> {\n\t\treturn !!(await this.TeamModel.deleteOneById(teamId));\n\t}\n\n\tasync deleteByName(teamName: string): Promise<boolean> {\n\t\treturn !!(await this.TeamModel.deleteOneByName(teamName));\n\t}\n\n\tasync getStatistics(): Promise<ITeamStats> {\n\t\tconst stats = {} as ITeamStats;\n\t\tconst teams = this.TeamModel.find({});\n\t\tconst teamsArray = await teams.toArray();\n\n\t\tstats.totalTeams = await teams.count();\n\t\tstats.teamStats = [];\n\n\t\tfor await (const team of teamsArray) {\n\t\t\t// exclude the main room from the stats\n\t\t\tconst teamRooms = await this.RoomsModel.find({\n\t\t\t\tteamId: team._id,\n\t\t\t\tteamMain: { $exists: false },\n\t\t\t}).toArray();\n\t\t\tconst roomIds = teamRooms.map((r) => r._id);\n\t\t\tconst [totalMessagesInTeam, defaultRooms, totalMembers] = await Promise.all([\n\t\t\t\tthis.MessagesModel.find({ rid: { $in: roomIds } }).count(),\n\t\t\t\tthis.RoomsModel.findDefaultRoomsForTeam(team._id).count(),\n\t\t\t\tthis.TeamMembersModel.findByTeamId(team._id).count(),\n\t\t\t]);\n\n\t\t\tconst teamData = {\n\t\t\t\tteamId: team._id,\n\t\t\t\tmainRoom: team.roomId,\n\t\t\t\ttotalRooms: teamRooms.length,\n\t\t\t\ttotalMessages: totalMessagesInTeam,\n\t\t\t\ttotalPublicRooms: teamRooms.filter((r) => r.t === 'c').length,\n\t\t\t\ttotalPrivateRooms: teamRooms.filter((r) => r.t !== 'c').length,\n\t\t\t\ttotalDefaultRooms: defaultRooms,\n\t\t\t\ttotalMembers,\n\t\t\t};\n\n\t\t\tstats.teamStats.push(teamData);\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tasync autocomplete(uid: string, name: string): Promise<ITeamAutocompleteResult[]> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst subscriptions = await this.SubscriptionsModel.find<Pick<ISubscription, 'rid'>>(\n\t\t\t{ 'u._id': uid },\n\t\t\t{ projection: { rid: 1 } },\n\t\t).toArray();\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\n\t\tconst rooms = await this.RoomsModel.find<ITeamAutocompleteResult>(\n\t\t\t{\n\t\t\t\tteamMain: true,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_id: { $in: subscriptionIds },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tfname: 1,\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t\tlimit: 10,\n\t\t\t\tsort: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tfname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\treturn rooms;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"079cd0b98dc6975623d8e12a2bdcd2812ab0dffd"}
