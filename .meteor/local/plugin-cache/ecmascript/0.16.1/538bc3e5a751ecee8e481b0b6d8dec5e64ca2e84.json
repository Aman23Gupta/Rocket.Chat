{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/misc.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/misc.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/misc.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/misc.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/misc.js"}},"code":"let crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 4);\nlet DDPRateLimiter;\nmodule.link(\"meteor/ddp-rate-limiter\", {\n  DDPRateLimiter(v) {\n    DDPRateLimiter = v;\n  }\n\n}, 5);\nlet escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeHTML(v) {\n    escapeHTML = v;\n  }\n\n}, 6);\nlet hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 7);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 8);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 9);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 10);\nlet getDefaultUserFields;\nmodule.link(\"../../../utils/server/functions/getDefaultUserFields\", {\n  getDefaultUserFields(v) {\n    getDefaultUserFields = v;\n  }\n\n}, 11);\nlet getURL;\nmodule.link(\"../../../utils/lib/getURL\", {\n  getURL(v) {\n    getURL = v;\n  }\n\n}, 12);\nlet getLogs;\nmodule.link(\"../../../../server/stream/stdout\", {\n  getLogs(v) {\n    getLogs = v;\n  }\n\n}, 13);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 14);\n\n/**\n * @openapi\n *  /api/v1/me:\n *    get:\n *      description: Gets user data of the authenticated user\n *      security:\n *        - authenticated: []\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      name:\n *                        type: string\n *                      username:\n *                        type: string\n *                      nickname:\n *                        type: string\n *                      emails:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            address:\n *                              type: string\n *                            verified:\n *                              type: boolean\n *                      email:\n *                        type: string\n *                      status:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusDefault:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusText:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusConnection:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      bio:\n *                        type: string\n *                      avatarOrigin:\n *                        type: string\n *                        enum: [none, local, upload, url]\n *                      utcOffset:\n *                        type: number\n *                      language:\n *                        type: string\n *                      settings:\n *                        type: object\n *                        properties:\n *                          preferences:\n *                            type: object\n *                      enableAutoAway:\n *                        type: boolean\n *                      idleTimeLimit:\n *                        type: number\n *                      roles:\n *                        type: array\n *                      active:\n *                        type: boolean\n *                      defaultRoom:\n *                        type: string\n *                      customFields:\n *                        type: array\n *                      requirePasswordChange:\n *                        type: boolean\n *                      requirePasswordChangeReason:\n *                        type: string\n *                      services:\n *                        type: object\n *                        properties:\n *                          github:\n *                            type: object\n *                          gitlab:\n *                            type: object\n *                          tokenpass:\n *                            type: object\n *                          blockstack:\n *                            type: object\n *                          password:\n *                            type: object\n *                            properties:\n *                              exists:\n *                                type: boolean\n *                          totp:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                          email2fa:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                      statusLivechat:\n *                        type: string\n *                        enum: [available, 'not-available']\n *                      banners:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            title:\n *                              type: string\n *                            text:\n *                              type: string\n *                            textArguments:\n *                              type: array\n *                              items: {}\n *                            modifiers:\n *                              type: array\n *                              items:\n *                                type: string\n *                            infoUrl:\n *                              type: string\n *                      oauth:\n *                        type: object\n *                        properties:\n *                          authorizedClients:\n *                            type: array\n *                            items:\n *                              type: string\n *                      _updatedAt:\n *                        type: string\n *                        format: date-time\n *                      avatarETag:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute('me', {\n  authRequired: true\n}, {\n  get() {\n    var _user$services, _user$services$passwo;\n\n    const fields = getDefaultUserFields();\n    const user = Users.findOneById(this.userId, {\n      fields\n    }); // The password hash shouldn't be leaked but the client may need to know if it exists.\n\n    if (user !== null && user !== void 0 && (_user$services = user.services) !== null && _user$services !== void 0 && (_user$services$passwo = _user$services.password) !== null && _user$services$passwo !== void 0 && _user$services$passwo.bcrypt) {\n      user.services.password.exists = true;\n      delete user.services.password.bcrypt;\n    }\n\n    return API.v1.success(this.getUserInfo(user));\n  }\n\n});\nlet onlineCache = 0;\nlet onlineCacheDate = 0;\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute('shield.svg', {\n  authRequired: false,\n  rateLimiterOptions: {\n    numRequestsAllowed: 60,\n    intervalTimeInMS: 60000\n  }\n}, {\n  get() {\n    const {\n      type,\n      icon\n    } = this.queryParams;\n    let {\n      channel,\n      name\n    } = this.queryParams;\n\n    if (!settings.get('API_Enable_Shields')) {\n      throw new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n        route: '/api/v1/shield.svg'\n      });\n    }\n\n    const types = settings.get('API_Shield_Types');\n\n    if (type && types !== '*' && !types.split(',').map(t => t.trim()).includes(type)) {\n      throw new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n        route: '/api/v1/shield.svg'\n      });\n    }\n\n    const hideIcon = icon === 'false';\n\n    if (hideIcon && (!name || !name.trim())) {\n      return API.v1.failure('Name cannot be empty when icon is hidden');\n    }\n\n    let text;\n    let backgroundColor = '#4c1';\n\n    switch (type) {\n      case 'online':\n        if (Date.now() - onlineCacheDate > cacheInvalid) {\n          onlineCache = Users.findUsersNotOffline().count();\n          onlineCacheDate = Date.now();\n        }\n\n        text = \"\".concat(onlineCache, \" \").concat(TAPi18n.__('Online'));\n        break;\n\n      case 'channel':\n        if (!channel) {\n          return API.v1.failure('Shield channel is required for type \"channel\"');\n        }\n\n        text = \"#\".concat(channel);\n        break;\n\n      case 'user':\n        if (settings.get('API_Shield_user_require_auth') && !this.getLoggedInUser()) {\n          return API.v1.failure('You must be logged in to do this.');\n        }\n\n        const user = this.getUserFromParams(); // Respect the server's choice for using their real names or not\n\n        if (user.name && settings.get('UI_Use_Real_Name')) {\n          text = \"\".concat(user.name);\n        } else {\n          text = \"@\".concat(user.username);\n        }\n\n        switch (user.status) {\n          case 'online':\n            backgroundColor = '#1fb31f';\n            break;\n\n          case 'away':\n            backgroundColor = '#dc9b01';\n            break;\n\n          case 'busy':\n            backgroundColor = '#bc2031';\n            break;\n\n          case 'offline':\n            backgroundColor = '#a5a1a1';\n        }\n\n        break;\n\n      default:\n        text = TAPi18n.__('Join_Chat').toUpperCase();\n    }\n\n    const iconSize = hideIcon ? 7 : 24;\n    const leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n    const rightSize = text.length * 6 + 20;\n    const width = leftSize + rightSize;\n    const height = 20;\n    channel = escapeHTML(channel);\n    text = escapeHTML(text);\n    name = escapeHTML(name);\n    return {\n      headers: {\n        'Content-Type': 'image/svg+xml;charset=utf-8'\n      },\n      body: \"\\n\\t\\t\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"\".concat(width, \"\\\" height=\\\"\").concat(height, \"\\\">\\n\\t\\t\\t\\t\\t<linearGradient id=\\\"b\\\" x2=\\\"0\\\" y2=\\\"100%\\\">\\n\\t\\t\\t\\t\\t\\t<stop offset=\\\"0\\\" stop-color=\\\"#bbb\\\" stop-opacity=\\\".1\\\"/>\\n\\t\\t\\t\\t\\t\\t<stop offset=\\\"1\\\" stop-opacity=\\\".1\\\"/>\\n\\t\\t\\t\\t\\t</linearGradient>\\n\\t\\t\\t\\t\\t<mask id=\\\"a\\\">\\n\\t\\t\\t\\t\\t\\t<rect width=\\\"\").concat(width, \"\\\" height=\\\"\").concat(height, \"\\\" rx=\\\"3\\\" fill=\\\"#fff\\\"/>\\n\\t\\t\\t\\t\\t</mask>\\n\\t\\t\\t\\t\\t<g mask=\\\"url(#a)\\\">\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"#555\\\" d=\\\"M0 0h\").concat(leftSize, \"v\").concat(height, \"H0z\\\"/>\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"\").concat(backgroundColor, \"\\\" d=\\\"M\").concat(leftSize, \" 0h\").concat(rightSize, \"v\").concat(height, \"H\").concat(leftSize, \"z\\\"/>\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"url(#b)\\\" d=\\\"M0 0h\").concat(width, \"v\").concat(height, \"H0z\\\"/>\\n\\t\\t\\t\\t\\t</g>\\n\\t\\t\\t\\t\\t\\t\").concat(hideIcon ? '' : \"<image x=\\\"5\\\" y=\\\"3\\\" width=\\\"14\\\" height=\\\"14\\\" xlink:href=\\\"\".concat(getURL('/assets/favicon.svg', {\n        full: true\n      }), \"\\\"/>\"), \"\\n\\t\\t\\t\\t\\t<g fill=\\\"#fff\\\" font-family=\\\"DejaVu Sans,Verdana,Geneva,sans-serif\\\" font-size=\\\"11\\\">\\n\\t\\t\\t\\t\\t\\t\").concat(name ? \"<text x=\\\"\".concat(iconSize, \"\\\" y=\\\"15\\\" fill=\\\"#010101\\\" fill-opacity=\\\".3\\\">\").concat(name, \"</text>\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(iconSize, \"\\\" y=\\\"14\\\">\").concat(name, \"</text>\") : '', \"\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(leftSize + 7, \"\\\" y=\\\"15\\\" fill=\\\"#010101\\\" fill-opacity=\\\".3\\\">\").concat(text, \"</text>\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(leftSize + 7, \"\\\" y=\\\"14\\\">\").concat(text, \"</text>\\n\\t\\t\\t\\t\\t</g>\\n\\t\\t\\t\\t</svg>\\n\\t\\t\\t\").trim().replace(/\\>[\\s]+\\</gm, '><')\n    };\n  }\n\n});\nAPI.v1.addRoute('spotlight', {\n  authRequired: true\n}, {\n  get() {\n    check(this.queryParams, {\n      query: String\n    });\n    const {\n      query\n    } = this.queryParams;\n    const result = Meteor.runAsUser(this.userId, () => Meteor.call('spotlight', query));\n    return API.v1.success(result);\n  }\n\n});\nAPI.v1.addRoute('directory', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      query\n    } = this.parseJsonQuery();\n    const {\n      text,\n      type,\n      workspace = 'local'\n    } = query;\n\n    if (sort && Object.keys(sort).length > 1) {\n      return API.v1.failure('This method support only one \"sort\" parameter');\n    }\n\n    const sortBy = sort ? Object.keys(sort)[0] : undefined;\n    const sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n    const result = Meteor.runAsUser(this.userId, () => Meteor.call('browseChannels', {\n      text,\n      type,\n      workspace,\n      sortBy,\n      sortDirection,\n      offset: Math.max(0, offset),\n      limit: Math.max(0, count)\n    }));\n\n    if (!result) {\n      return API.v1.failure('Please verify the parameters');\n    }\n\n    return API.v1.success({\n      result: result.results,\n      count: result.results.length,\n      offset,\n      total: result.total\n    });\n  }\n\n});\n/**\n * @openapi\n *  /api/v1/stdout.queue:\n *    get:\n *      description: Retrieves last 1000 lines of server logs\n *      security:\n *        - authenticated: ['view-logs']\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      queue:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            string:\n *                              type: string\n *                            ts:\n *                              type: string\n *                              format: date-time\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('stdout.queue', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-logs')) {\n      return API.v1.unauthorized();\n    }\n\n    return API.v1.success({\n      queue: getLogs()\n    });\n  }\n\n});\n\nconst mountResult = _ref => {\n  let {\n    id,\n    error,\n    result\n  } = _ref;\n  return {\n    message: EJSON.stringify({\n      msg: 'result',\n      id,\n      error,\n      result\n    })\n  };\n};\n\nconst methodCall = () => ({\n  post() {\n    check(this.bodyParams, {\n      message: String\n    });\n    const {\n      method,\n      params,\n      id\n    } = EJSON.parse(this.bodyParams.message);\n    const connectionId = this.token || crypto.createHash('md5').update(this.requestIp + this.request.headers['user-agent']).digest('hex');\n    const rateLimiterInput = {\n      userId: this.userId,\n      clientAddress: this.requestIp,\n      type: 'method',\n      name: method,\n      connectionId\n    };\n\n    try {\n      DDPRateLimiter._increment(rateLimiterInput);\n\n      const rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\n      if (!rateLimitResult.allowed) {\n        throw new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n          timeToReset: rateLimitResult.timeToReset\n        });\n      }\n\n      const result = Meteor.call(method, ...params);\n      return API.v1.success(mountResult({\n        id,\n        result\n      }));\n    } catch (error) {\n      SystemLogger.error(\"Exception while invoking method \".concat(method), error.message);\n\n      if (settings.get('Log_Level') === '2') {\n        Meteor._debug(\"Exception while invoking method \".concat(method), error);\n      }\n\n      return API.v1.success(mountResult({\n        id,\n        error\n      }));\n    }\n  }\n\n}); // had to create two different endpoints for authenticated and non-authenticated calls\n// because restivus does not provide 'this.userId' if 'authRequired: false'\n\n\nAPI.v1.addRoute('method.call/:method', {\n  authRequired: true,\n  rateLimiterOptions: false\n}, methodCall());\nAPI.v1.addRoute('method.callAnon/:method', {\n  authRequired: false,\n  rateLimiterOptions: false\n}, methodCall());","map":{"version":3,"sources":["app/api/server/v1/misc.js"],"names":["crypto","module","link","default","v","Meteor","check","TAPi18n","EJSON","DDPRateLimiter","escapeHTML","hasPermission","Users","settings","API","getDefaultUserFields","getURL","getLogs","SystemLogger","v1","addRoute","authRequired","get","fields","user","findOneById","userId","services","password","bcrypt","exists","success","getUserInfo","onlineCache","onlineCacheDate","cacheInvalid","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","type","icon","queryParams","channel","name","Error","route","types","split","map","t","trim","includes","hideIcon","failure","text","backgroundColor","Date","now","findUsersNotOffline","count","__","getLoggedInUser","getUserFromParams","username","status","toUpperCase","iconSize","leftSize","length","rightSize","width","height","headers","body","full","replace","query","String","result","runAsUser","call","offset","getPaginationItems","sort","parseJsonQuery","workspace","Object","keys","sortBy","undefined","sortDirection","values","Math","max","limit","results","total","unauthorized","queue","mountResult","id","error","message","stringify","msg","methodCall","post","bodyParams","method","params","parse","connectionId","token","createHash","update","requestIp","request","digest","rateLimiterInput","clientAddress","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","_debug"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { EJSON } from 'meteor/ejson';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\n\nimport { hasPermission } from '../../../authorization/server';\nimport { Users } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { getDefaultUserFields } from '../../../utils/server/functions/getDefaultUserFields';\nimport { getURL } from '../../../utils/lib/getURL';\nimport { getLogs } from '../../../../server/stream/stdout';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\n\n/**\n * @openapi\n *  /api/v1/me:\n *    get:\n *      description: Gets user data of the authenticated user\n *      security:\n *        - authenticated: []\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      name:\n *                        type: string\n *                      username:\n *                        type: string\n *                      nickname:\n *                        type: string\n *                      emails:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            address:\n *                              type: string\n *                            verified:\n *                              type: boolean\n *                      email:\n *                        type: string\n *                      status:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusDefault:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusText:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusConnection:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      bio:\n *                        type: string\n *                      avatarOrigin:\n *                        type: string\n *                        enum: [none, local, upload, url]\n *                      utcOffset:\n *                        type: number\n *                      language:\n *                        type: string\n *                      settings:\n *                        type: object\n *                        properties:\n *                          preferences:\n *                            type: object\n *                      enableAutoAway:\n *                        type: boolean\n *                      idleTimeLimit:\n *                        type: number\n *                      roles:\n *                        type: array\n *                      active:\n *                        type: boolean\n *                      defaultRoom:\n *                        type: string\n *                      customFields:\n *                        type: array\n *                      requirePasswordChange:\n *                        type: boolean\n *                      requirePasswordChangeReason:\n *                        type: string\n *                      services:\n *                        type: object\n *                        properties:\n *                          github:\n *                            type: object\n *                          gitlab:\n *                            type: object\n *                          tokenpass:\n *                            type: object\n *                          blockstack:\n *                            type: object\n *                          password:\n *                            type: object\n *                            properties:\n *                              exists:\n *                                type: boolean\n *                          totp:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                          email2fa:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                      statusLivechat:\n *                        type: string\n *                        enum: [available, 'not-available']\n *                      banners:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            title:\n *                              type: string\n *                            text:\n *                              type: string\n *                            textArguments:\n *                              type: array\n *                              items: {}\n *                            modifiers:\n *                              type: array\n *                              items:\n *                                type: string\n *                            infoUrl:\n *                              type: string\n *                      oauth:\n *                        type: object\n *                        properties:\n *                          authorizedClients:\n *                            type: array\n *                            items:\n *                              type: string\n *                      _updatedAt:\n *                        type: string\n *                        format: date-time\n *                      avatarETag:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'me',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst fields = getDefaultUserFields();\n\t\t\tconst user = Users.findOneById(this.userId, { fields });\n\n\t\t\t// The password hash shouldn't be leaked but the client may need to know if it exists.\n\t\t\tif (user?.services?.password?.bcrypt) {\n\t\t\t\tuser.services.password.exists = true;\n\t\t\t\tdelete user.services.password.bcrypt;\n\t\t\t}\n\n\t\t\treturn API.v1.success(this.getUserInfo(user));\n\t\t},\n\t},\n);\n\nlet onlineCache = 0;\nlet onlineCacheDate = 0;\nconst cacheInvalid = 60000; // 1 minute\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{ authRequired: false, rateLimiterOptions: { numRequestsAllowed: 60, intervalTimeInMS: 60000 } },\n\t{\n\t\tget() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tlet { channel, name } = this.queryParams;\n\t\t\tif (!settings.get('API_Enable_Shields')) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst types = settings.get('API_Shield_Types');\n\t\t\tif (\n\t\t\t\ttype &&\n\t\t\t\ttypes !== '*' &&\n\t\t\t\t!types\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((t) => t.trim())\n\t\t\t\t\t.includes(type)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst hideIcon = icon === 'false';\n\t\t\tif (hideIcon && (!name || !name.trim())) {\n\t\t\t\treturn API.v1.failure('Name cannot be empty when icon is hidden');\n\t\t\t}\n\n\t\t\tlet text;\n\t\t\tlet backgroundColor = '#4c1';\n\t\t\tswitch (type) {\n\t\t\t\tcase 'online':\n\t\t\t\t\tif (Date.now() - onlineCacheDate > cacheInvalid) {\n\t\t\t\t\t\tonlineCache = Users.findUsersNotOffline().count();\n\t\t\t\t\t\tonlineCacheDate = Date.now();\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `${onlineCache} ${TAPi18n.__('Online')}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel':\n\t\t\t\t\tif (!channel) {\n\t\t\t\t\t\treturn API.v1.failure('Shield channel is required for type \"channel\"');\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `#${channel}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user':\n\t\t\t\t\tif (settings.get('API_Shield_user_require_auth') && !this.getLoggedInUser()) {\n\t\t\t\t\t\treturn API.v1.failure('You must be logged in to do this.');\n\t\t\t\t\t}\n\t\t\t\t\tconst user = this.getUserFromParams();\n\n\t\t\t\t\t// Respect the server's choice for using their real names or not\n\t\t\t\t\tif (user.name && settings.get('UI_Use_Real_Name')) {\n\t\t\t\t\t\ttext = `${user.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = `@${user.username}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (user.status) {\n\t\t\t\t\t\tcase 'online':\n\t\t\t\t\t\t\tbackgroundColor = '#1fb31f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'away':\n\t\t\t\t\t\t\tbackgroundColor = '#dc9b01';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'busy':\n\t\t\t\t\t\t\tbackgroundColor = '#bc2031';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'offline':\n\t\t\t\t\t\t\tbackgroundColor = '#a5a1a1';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = TAPi18n.__('Join_Chat').toUpperCase();\n\t\t\t}\n\n\t\t\tconst iconSize = hideIcon ? 7 : 24;\n\t\t\tconst leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n\t\t\tconst rightSize = text.length * 6 + 20;\n\t\t\tconst width = leftSize + rightSize;\n\t\t\tconst height = 20;\n\n\t\t\tchannel = escapeHTML(channel);\n\t\t\ttext = escapeHTML(text);\n\t\t\tname = escapeHTML(name);\n\n\t\t\treturn {\n\t\t\t\theaders: { 'Content-Type': 'image/svg+xml;charset=utf-8' },\n\t\t\t\tbody: `\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${width}\" height=\"${height}\">\n\t\t\t\t\t<linearGradient id=\"b\" x2=\"0\" y2=\"100%\">\n\t\t\t\t\t\t<stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/>\n\t\t\t\t\t\t<stop offset=\"1\" stop-opacity=\".1\"/>\n\t\t\t\t\t</linearGradient>\n\t\t\t\t\t<mask id=\"a\">\n\t\t\t\t\t\t<rect width=\"${width}\" height=\"${height}\" rx=\"3\" fill=\"#fff\"/>\n\t\t\t\t\t</mask>\n\t\t\t\t\t<g mask=\"url(#a)\">\n\t\t\t\t\t\t<path fill=\"#555\" d=\"M0 0h${leftSize}v${height}H0z\"/>\n\t\t\t\t\t\t<path fill=\"${backgroundColor}\" d=\"M${leftSize} 0h${rightSize}v${height}H${leftSize}z\"/>\n\t\t\t\t\t\t<path fill=\"url(#b)\" d=\"M0 0h${width}v${height}H0z\"/>\n\t\t\t\t\t</g>\n\t\t\t\t\t\t${hideIcon ? '' : `<image x=\"5\" y=\"3\" width=\"14\" height=\"14\" xlink:href=\"${getURL('/assets/favicon.svg', { full: true })}\"/>`}\n\t\t\t\t\t<g fill=\"#fff\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\">\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t? `<text x=\"${iconSize}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${name}</text>\n\t\t\t\t\t\t<text x=\"${iconSize}\" y=\"14\">${name}</text>`\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${text}</text>\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"14\">${text}</text>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t`\n\t\t\t\t\t.trim()\n\t\t\t\t\t.replace(/\\>[\\s]+\\</gm, '><'),\n\t\t\t};\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'spotlight',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\tquery: String,\n\t\t\t});\n\n\t\t\tconst { query } = this.queryParams;\n\n\t\t\tconst result = Meteor.runAsUser(this.userId, () => Meteor.call('spotlight', query));\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'directory',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, query } = this.parseJsonQuery();\n\n\t\t\tconst { text, type, workspace = 'local' } = query;\n\n\t\t\tif (sort && Object.keys(sort).length > 1) {\n\t\t\t\treturn API.v1.failure('This method support only one \"sort\" parameter');\n\t\t\t}\n\t\t\tconst sortBy = sort ? Object.keys(sort)[0] : undefined;\n\t\t\tconst sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n\n\t\t\tconst result = Meteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('browseChannels', {\n\t\t\t\t\ttext,\n\t\t\t\t\ttype,\n\t\t\t\t\tworkspace,\n\t\t\t\t\tsortBy,\n\t\t\t\t\tsortDirection,\n\t\t\t\t\toffset: Math.max(0, offset),\n\t\t\t\t\tlimit: Math.max(0, count),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure('Please verify the parameters');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: result.results,\n\t\t\t\tcount: result.results.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: result.total,\n\t\t\t});\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/stdout.queue:\n *    get:\n *      description: Retrieves last 1000 lines of server logs\n *      security:\n *        - authenticated: ['view-logs']\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      queue:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            string:\n *                              type: string\n *                            ts:\n *                              type: string\n *                              format: date-time\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'stdout.queue',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-logs')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\treturn API.v1.success({ queue: getLogs() });\n\t\t},\n\t},\n);\n\nconst mountResult = ({ id, error, result }) => ({\n\tmessage: EJSON.stringify({\n\t\tmsg: 'result',\n\t\tid,\n\t\terror,\n\t\tresult,\n\t}),\n});\n\nconst methodCall = () => ({\n\tpost() {\n\t\tcheck(this.bodyParams, {\n\t\t\tmessage: String,\n\t\t});\n\n\t\tconst { method, params, id } = EJSON.parse(this.bodyParams.message);\n\n\t\tconst connectionId =\n\t\t\tthis.token ||\n\t\t\tcrypto\n\t\t\t\t.createHash('md5')\n\t\t\t\t.update(this.requestIp + this.request.headers['user-agent'])\n\t\t\t\t.digest('hex');\n\n\t\tconst rateLimiterInput = {\n\t\t\tuserId: this.userId,\n\t\t\tclientAddress: this.requestIp,\n\t\t\ttype: 'method',\n\t\t\tname: method,\n\t\t\tconnectionId,\n\t\t};\n\n\t\ttry {\n\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst result = Meteor.call(method, ...params);\n\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t} catch (error) {\n\t\t\tSystemLogger.error(`Exception while invoking method ${method}`, error.message);\n\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, error);\n\t\t\t}\n\t\t\treturn API.v1.success(mountResult({ id, error }));\n\t\t}\n\t},\n});\n\n// had to create two different endpoints for authenticated and non-authenticated calls\n// because restivus does not provide 'this.userId' if 'authRequired: false'\nAPI.v1.addRoute('method.call/:method', { authRequired: true, rateLimiterOptions: false }, methodCall());\nAPI.v1.addRoute('method.callAnon/:method', { authRequired: false, rateLimiterOptions: false }, methodCall());\n"]},"sourceType":"module","hash":"538bc3e5a751ecee8e481b0b6d8dec5e64ca2e84"}
