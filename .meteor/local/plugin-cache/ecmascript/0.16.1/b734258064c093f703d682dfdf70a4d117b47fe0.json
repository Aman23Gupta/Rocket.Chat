{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/analytics/dashboards.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/analytics/dashboards.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/analytics/dashboards.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/analytics/dashboards.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/analytics/dashboards.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  findAllChatsStatus: () => findAllChatsStatus,\n  getProductivityMetrics: () => getProductivityMetrics,\n  getAgentsProductivityMetrics: () => getAgentsProductivityMetrics,\n  getConversationsMetrics: () => getConversationsMetrics,\n  findAllChatMetricsByAgent: () => findAllChatMetricsByAgent,\n  findAllChatMetricsByDepartment: () => findAllChatMetricsByDepartment,\n  findAllResponseTimeMetrics: () => findAllResponseTimeMetrics,\n  getChatsMetrics: () => getChatsMetrics,\n  findAllAgentsStatus: () => findAllAgentsStatus\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity;\nmodule.link(\"../../../../models/server/raw\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  LivechatAgentActivity(v) {\n    LivechatAgentActivity = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet Livechat;\nmodule.link(\"../Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 3);\nlet secondsToHHMMSS;\nmodule.link(\"../../../../utils/server\", {\n  secondsToHHMMSS(v) {\n    secondsToHHMMSS = v;\n  }\n\n}, 4);\nlet findPercentageOfAbandonedRoomsAsync, findAllAverageOfChatDurationTimeAsync, findAllAverageWaitingTimeAsync, findAllNumberOfAbandonedRoomsAsync, findAllAverageServiceTimeAsync;\nmodule.link(\"./departments\", {\n  findPercentageOfAbandonedRoomsAsync(v) {\n    findPercentageOfAbandonedRoomsAsync = v;\n  },\n\n  findAllAverageOfChatDurationTimeAsync(v) {\n    findAllAverageOfChatDurationTimeAsync = v;\n  },\n\n  findAllAverageWaitingTimeAsync(v) {\n    findAllAverageWaitingTimeAsync = v;\n  },\n\n  findAllNumberOfAbandonedRoomsAsync(v) {\n    findAllNumberOfAbandonedRoomsAsync = v;\n  },\n\n  findAllAverageServiceTimeAsync(v) {\n    findAllAverageServiceTimeAsync = v;\n  }\n\n}, 5);\n\nconst findAllChatsStatusAsync = _ref => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  return {\n    open: Promise.await(LivechatRooms.countAllOpenChatsBetweenDate({\n      start,\n      end,\n      departmentId\n    })),\n    closed: Promise.await(LivechatRooms.countAllClosedChatsBetweenDate({\n      start,\n      end,\n      departmentId\n    })),\n    queued: Promise.await(LivechatRooms.countAllQueuedChatsBetweenDate({\n      start,\n      end,\n      departmentId\n    })),\n    onhold: Promise.await(LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId))\n  };\n});\n\nconst getProductivityMetricsAsync = _ref2 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined,\n    user = {}\n  } = _ref2;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const totalizers = Livechat.Analytics.getAnalyticsOverviewData({\n    daterange: {\n      from: start,\n      to: end\n    },\n    analyticsOptions: {\n      name: 'Productivity'\n    },\n    departmentId,\n    utcOffset: user.utcOffset,\n    language: user.language || settings.get('Language') || 'en'\n  });\n  const averageWaitingTime = Promise.await(findAllAverageWaitingTimeAsync({\n    start,\n    end,\n    departmentId\n  }));\n  const totalOfWaitingTime = averageWaitingTime.departments.length;\n  const sumOfWaitingTime = averageWaitingTime.departments.reduce((acc, serviceTime) => {\n    acc += serviceTime.averageWaitingTimeInSeconds;\n    return acc;\n  }, 0);\n  const totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n  return {\n    totalizers: [...totalizers, {\n      title: 'Avg_of_waiting_time',\n      value: secondsToHHMMSS(totalOfAvarageWaitingTime)\n    }]\n  };\n});\n\nconst getAgentsProductivityMetricsAsync = _ref3 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined,\n    user = {}\n  } = _ref3;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const averageOfAvailableServiceTime = Promise.await(LivechatAgentActivity.findAllAverageAvailableServiceTime({\n    date: parseInt(moment(start).format('YYYYMMDD')),\n    departmentId\n  }))[0];\n  const averageOfServiceTime = Promise.await(findAllAverageServiceTimeAsync({\n    start,\n    end,\n    departmentId\n  }));\n  const totalizers = Livechat.Analytics.getAnalyticsOverviewData({\n    daterange: {\n      from: start,\n      to: end\n    },\n    analyticsOptions: {\n      name: 'Conversations'\n    },\n    departmentId,\n    utcOffset: user.utcOffset,\n    language: user.language || settings.get('Language') || 'en'\n  });\n  const totalOfServiceTime = averageOfServiceTime.departments.length;\n  const sumOfServiceTime = averageOfServiceTime.departments.reduce((acc, serviceTime) => {\n    acc += serviceTime.averageServiceTimeInSeconds;\n    return acc;\n  }, 0);\n  const totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime ? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds : 0;\n  const totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n  return {\n    totalizers: [...totalizers.filter(metric => metric.title === 'Busiest_time'), {\n      title: 'Avg_of_available_service_time',\n      value: secondsToHHMMSS(totalOfAverageAvailableServiceTime)\n    }, {\n      title: 'Avg_of_service_time',\n      value: secondsToHHMMSS(totalOfAverageServiceTime)\n    }]\n  };\n});\n\nconst getChatsMetricsAsync = _ref4 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref4;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const abandonedRooms = Promise.await(findAllNumberOfAbandonedRoomsAsync({\n    start,\n    end,\n    departmentId\n  }));\n  const averageOfAbandonedRooms = Promise.await(findPercentageOfAbandonedRoomsAsync({\n    start,\n    end,\n    departmentId\n  }));\n  const averageOfChatDurationTime = Promise.await(findAllAverageOfChatDurationTimeAsync({\n    start,\n    end,\n    departmentId\n  }));\n  const totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n  const totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n  const sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce((acc, abandonedRoom) => {\n    acc += abandonedRoom.percentageOfAbandonedChats;\n    return acc;\n  }, 0);\n  const sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce((acc, chatDurationTime) => {\n    acc += chatDurationTime.averageChatDurationTimeInSeconds;\n    return acc;\n  }, 0);\n  const totalAbandonedRooms = abandonedRooms.departments.reduce((acc, item) => {\n    acc += item.abandonedRooms;\n    return acc;\n  }, 0);\n  const totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n  const totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n  return {\n    totalizers: [{\n      title: 'Total_abandoned_chats',\n      value: totalAbandonedRooms\n    }, {\n      title: 'Avg_of_abandoned_chats',\n      value: \"\".concat(totalOfAverageAbandonedRooms, \"%\")\n    }, {\n      title: 'Avg_of_chat_duration_time',\n      value: secondsToHHMMSS(totalOfAverageChatDurationTime)\n    }]\n  };\n});\n\nconst getConversationsMetricsAsync = _ref5 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId,\n    user = {}\n  } = _ref5;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const totalizers = Livechat.Analytics.getAnalyticsOverviewData(_objectSpread(_objectSpread({\n    daterange: {\n      from: start,\n      to: end\n    },\n    analyticsOptions: {\n      name: 'Conversations'\n    }\n  }, departmentId && departmentId !== 'undefined' && {\n    departmentId\n  }), {}, {\n    utcOffset: user.utcOffset,\n    language: user.language || settings.get('Language') || 'en'\n  }));\n  const metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n  const visitorsCount = Promise.await(LivechatVisitors.getVisitorsBetweenDate({\n    start,\n    end,\n    department: departmentId\n  }).count());\n  return {\n    totalizers: [...totalizers.filter(metric => metrics.includes(metric.title)), {\n      title: 'Total_visitors',\n      value: visitorsCount\n    }]\n  };\n});\n\nconst findAllChatMetricsByAgentAsync = _ref6 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref6;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const open = Promise.await(LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n    start,\n    end,\n    departmentId\n  }));\n  const closed = Promise.await(LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n    start,\n    end,\n    departmentId\n  }));\n  const onhold = Promise.await(LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n    start,\n    end,\n    departmentId\n  }));\n  const result = {};\n  (open || []).forEach(agent => {\n    result[agent._id] = {\n      open: agent.chats,\n      closed: 0,\n      onhold: 0\n    };\n  });\n  (closed || []).forEach(agent => {\n    result[agent._id] = {\n      open: result[agent._id] ? result[agent._id].open : 0,\n      closed: agent.chats\n    };\n  });\n  (onhold || []).forEach(agent => {\n    result[agent._id] = _objectSpread(_objectSpread({}, result[agent._id]), {}, {\n      onhold: agent.chats\n    });\n  });\n  return result;\n});\n\nconst findAllAgentsStatusAsync = _ref7 => Promise.asyncApply(() => {\n  let {\n    departmentId = undefined\n  } = _ref7;\n  return Promise.await(Users.countAllAgentsStatus({\n    departmentId\n  }))[0];\n});\n\nconst findAllChatMetricsByDepartmentAsync = _ref8 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref8;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const open = Promise.await(LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n    start,\n    end,\n    departmentId\n  }));\n  const closed = Promise.await(LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n    start,\n    end,\n    departmentId\n  }));\n  const result = {};\n  (open || []).forEach(department => {\n    result[department.name] = {\n      open: department.chats,\n      closed: 0\n    };\n  });\n  (closed || []).forEach(department => {\n    result[department.name] = {\n      open: result[department.name] ? result[department.name].open : 0,\n      closed: department.chats\n    };\n  });\n  return result;\n});\n\nconst findAllResponseTimeMetricsAsync = _ref9 => Promise.asyncApply(() => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref9;\n\n  if (!start || !end) {\n    throw new Error('\"start\" and \"end\" must be provided');\n  }\n\n  const responseTimes = Promise.await(LivechatRooms.calculateResponseTimingsBetweenDates({\n    start,\n    end,\n    departmentId\n  }))[0];\n  const reactionTimes = Promise.await(LivechatRooms.calculateReactionTimingsBetweenDates({\n    start,\n    end,\n    departmentId\n  }))[0];\n  const durationTimings = Promise.await(LivechatRooms.calculateDurationTimingsBetweenDates({\n    start,\n    end,\n    departmentId\n  }))[0];\n  return {\n    response: {\n      avg: responseTimes ? responseTimes.avg : 0,\n      longest: responseTimes ? responseTimes.longest : 0\n    },\n    reaction: {\n      avg: reactionTimes ? reactionTimes.avg : 0,\n      longest: reactionTimes ? reactionTimes.longest : 0\n    },\n    chatDuration: {\n      avg: durationTimings ? durationTimings.avg : 0,\n      longest: durationTimings ? durationTimings.longest : 0\n    }\n  };\n});\n\nconst findAllChatsStatus = _ref10 => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref10;\n  return Promise.await(findAllChatsStatusAsync({\n    start,\n    end,\n    departmentId\n  }));\n};\n\nconst getProductivityMetrics = _ref11 => {\n  let {\n    start,\n    end,\n    departmentId = undefined,\n    user = {}\n  } = _ref11;\n  return Promise.await(getProductivityMetricsAsync({\n    start,\n    end,\n    departmentId,\n    user\n  }));\n};\n\nconst getAgentsProductivityMetrics = _ref12 => {\n  let {\n    start,\n    end,\n    departmentId = undefined,\n    user = {}\n  } = _ref12;\n  return Promise.await(getAgentsProductivityMetricsAsync({\n    start,\n    end,\n    departmentId,\n    user\n  }));\n};\n\nconst getConversationsMetrics = _ref13 => {\n  let {\n    start,\n    end,\n    departmentId = undefined,\n    user = {}\n  } = _ref13;\n  return Promise.await(getConversationsMetricsAsync({\n    start,\n    end,\n    departmentId,\n    user\n  }));\n};\n\nconst findAllChatMetricsByAgent = _ref14 => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref14;\n  return Promise.await(findAllChatMetricsByAgentAsync({\n    start,\n    end,\n    departmentId\n  }));\n};\n\nconst findAllChatMetricsByDepartment = _ref15 => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref15;\n  return Promise.await(findAllChatMetricsByDepartmentAsync({\n    start,\n    end,\n    departmentId\n  }));\n};\n\nconst findAllResponseTimeMetrics = _ref16 => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref16;\n  return Promise.await(findAllResponseTimeMetricsAsync({\n    start,\n    end,\n    departmentId\n  }));\n};\n\nconst getChatsMetrics = _ref17 => {\n  let {\n    start,\n    end,\n    departmentId = undefined\n  } = _ref17;\n  return Promise.await(getChatsMetricsAsync({\n    start,\n    end,\n    departmentId\n  }));\n};\n\nconst findAllAgentsStatus = _ref18 => {\n  let {\n    departmentId = undefined\n  } = _ref18;\n  return Promise.await(findAllAgentsStatusAsync({\n    departmentId\n  }));\n};","map":{"version":3,"sources":["app/livechat/server/lib/analytics/dashboards.js"],"names":["_objectSpread","module","link","default","v","export","findAllChatsStatus","getProductivityMetrics","getAgentsProductivityMetrics","getConversationsMetrics","findAllChatMetricsByAgent","findAllChatMetricsByDepartment","findAllResponseTimeMetrics","getChatsMetrics","findAllAgentsStatus","moment","LivechatRooms","Users","LivechatVisitors","LivechatAgentActivity","settings","Livechat","secondsToHHMMSS","findPercentageOfAbandonedRoomsAsync","findAllAverageOfChatDurationTimeAsync","findAllAverageWaitingTimeAsync","findAllNumberOfAbandonedRoomsAsync","findAllAverageServiceTimeAsync","findAllChatsStatusAsync","start","end","departmentId","undefined","Error","open","countAllOpenChatsBetweenDate","closed","countAllClosedChatsBetweenDate","queued","countAllQueuedChatsBetweenDate","onhold","getOnHoldConversationsBetweenDate","getProductivityMetricsAsync","user","totalizers","Analytics","getAnalyticsOverviewData","daterange","from","to","analyticsOptions","name","utcOffset","language","get","averageWaitingTime","totalOfWaitingTime","departments","length","sumOfWaitingTime","reduce","acc","serviceTime","averageWaitingTimeInSeconds","totalOfAvarageWaitingTime","title","value","getAgentsProductivityMetricsAsync","averageOfAvailableServiceTime","findAllAverageAvailableServiceTime","date","parseInt","format","averageOfServiceTime","totalOfServiceTime","sumOfServiceTime","averageServiceTimeInSeconds","totalOfAverageAvailableServiceTime","averageAvailableServiceTimeInSeconds","totalOfAverageServiceTime","filter","metric","getChatsMetricsAsync","abandonedRooms","averageOfAbandonedRooms","averageOfChatDurationTime","totalOfAbandonedRooms","totalOfChatDurationTime","sumOfPercentageOfAbandonedRooms","abandonedRoom","percentageOfAbandonedChats","sumOfChatDurationTime","chatDurationTime","averageChatDurationTimeInSeconds","totalAbandonedRooms","item","totalOfAverageAbandonedRooms","totalOfAverageChatDurationTime","getConversationsMetricsAsync","metrics","visitorsCount","getVisitorsBetweenDate","department","count","includes","findAllChatMetricsByAgentAsync","countAllOpenChatsByAgentBetweenDate","countAllClosedChatsByAgentBetweenDate","countAllOnHoldChatsByAgentBetweenDate","result","forEach","agent","_id","chats","findAllAgentsStatusAsync","countAllAgentsStatus","findAllChatMetricsByDepartmentAsync","countAllOpenChatsByDepartmentBetweenDate","countAllClosedChatsByDepartmentBetweenDate","findAllResponseTimeMetricsAsync","responseTimes","calculateResponseTimingsBetweenDates","reactionTimes","calculateReactionTimingsBetweenDates","durationTimings","calculateDurationTimingsBetweenDates","response","avg","longest","reaction","chatDuration","Promise","await"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nimport { LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity } from '../../../../models/server/raw';\nimport { settings } from '../../../../settings';\nimport { Livechat } from '../Livechat';\nimport { secondsToHHMMSS } from '../../../../utils/server';\nimport {\n\tfindPercentageOfAbandonedRoomsAsync,\n\tfindAllAverageOfChatDurationTimeAsync,\n\tfindAllAverageWaitingTimeAsync,\n\tfindAllNumberOfAbandonedRoomsAsync,\n\tfindAllAverageServiceTimeAsync,\n} from './departments';\n\nconst findAllChatsStatusAsync = async ({ start, end, departmentId = undefined }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\treturn {\n\t\topen: await LivechatRooms.countAllOpenChatsBetweenDate({ start, end, departmentId }),\n\t\tclosed: await LivechatRooms.countAllClosedChatsBetweenDate({ start, end, departmentId }),\n\t\tqueued: await LivechatRooms.countAllQueuedChatsBetweenDate({ start, end, departmentId }),\n\t\tonhold: await LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId),\n\t};\n};\n\nconst getProductivityMetricsAsync = async ({ start, end, departmentId = undefined, user = {} }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers = Livechat.Analytics.getAnalyticsOverviewData({\n\t\tdaterange: {\n\t\t\tfrom: start,\n\t\t\tto: end,\n\t\t},\n\t\tanalyticsOptions: {\n\t\t\tname: 'Productivity',\n\t\t},\n\t\tdepartmentId,\n\t\tutcOffset: user.utcOffset,\n\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t});\n\tconst averageWaitingTime = await findAllAverageWaitingTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfWaitingTime = averageWaitingTime.departments.length;\n\n\tconst sumOfWaitingTime = averageWaitingTime.departments.reduce((acc, serviceTime) => {\n\t\tacc += serviceTime.averageWaitingTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],\n\t};\n};\n\nconst getAgentsProductivityMetricsAsync = async ({ start, end, departmentId = undefined, user = {} }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst averageOfAvailableServiceTime = (\n\t\tawait LivechatAgentActivity.findAllAverageAvailableServiceTime({\n\t\t\tdate: parseInt(moment(start).format('YYYYMMDD')),\n\t\t\tdepartmentId,\n\t\t})\n\t)[0];\n\tconst averageOfServiceTime = await findAllAverageServiceTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst totalizers = Livechat.Analytics.getAnalyticsOverviewData({\n\t\tdaterange: {\n\t\t\tfrom: start,\n\t\t\tto: end,\n\t\t},\n\t\tanalyticsOptions: {\n\t\t\tname: 'Conversations',\n\t\t},\n\t\tdepartmentId,\n\t\tutcOffset: user.utcOffset,\n\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t});\n\n\tconst totalOfServiceTime = averageOfServiceTime.departments.length;\n\n\tconst sumOfServiceTime = averageOfServiceTime.departments.reduce((acc, serviceTime) => {\n\t\tacc += serviceTime.averageServiceTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric) => metric.title === 'Busiest_time'),\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_available_service_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageAvailableServiceTime),\n\t\t\t},\n\t\t\t{ title: 'Avg_of_service_time', value: secondsToHHMMSS(totalOfAverageServiceTime) },\n\t\t],\n\t};\n};\n\nconst getChatsMetricsAsync = async ({ start, end, departmentId = undefined }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst abandonedRooms = await findAllNumberOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfAbandonedRooms = await findPercentageOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfChatDurationTime = await findAllAverageOfChatDurationTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n\tconst totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n\n\tconst sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce((acc, abandonedRoom) => {\n\t\tacc += abandonedRoom.percentageOfAbandonedChats;\n\t\treturn acc;\n\t}, 0);\n\tconst sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce((acc, chatDurationTime) => {\n\t\tacc += chatDurationTime.averageChatDurationTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalAbandonedRooms = abandonedRooms.departments.reduce((acc, item) => {\n\t\tacc += item.abandonedRooms;\n\t\treturn acc;\n\t}, 0);\n\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },\n\t\t\t{ title: 'Avg_of_abandoned_chats', value: `${totalOfAverageAbandonedRooms}%` },\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_chat_duration_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageChatDurationTime),\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getConversationsMetricsAsync = async ({ start, end, departmentId, user = {} }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers = Livechat.Analytics.getAnalyticsOverviewData({\n\t\tdaterange: {\n\t\t\tfrom: start,\n\t\t\tto: end,\n\t\t},\n\t\tanalyticsOptions: {\n\t\t\tname: 'Conversations',\n\t\t},\n\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\tutcOffset: user.utcOffset,\n\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t});\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.getVisitorsBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartment: departmentId,\n\t}).count();\n\treturn {\n\t\ttotalizers: [...totalizers.filter((metric) => metrics.includes(metric.title)), { title: 'Total_visitors', value: visitorsCount }],\n\t};\n};\n\nconst findAllChatMetricsByAgentAsync = async ({ start, end, departmentId = undefined }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result = {};\n\t(open || []).forEach((agent) => {\n\t\tresult[agent._id] = { open: agent.chats, closed: 0, onhold: 0 };\n\t});\n\t(closed || []).forEach((agent) => {\n\t\tresult[agent._id] = {\n\t\t\topen: result[agent._id] ? result[agent._id].open : 0,\n\t\t\tclosed: agent.chats,\n\t\t};\n\t});\n\t(onhold || []).forEach((agent) => {\n\t\tresult[agent._id] = {\n\t\t\t...result[agent._id],\n\t\t\tonhold: agent.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllAgentsStatusAsync = async ({ departmentId = undefined }) => (await Users.countAllAgentsStatus({ departmentId }))[0];\n\nconst findAllChatMetricsByDepartmentAsync = async ({ start, end, departmentId = undefined }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result = {};\n\t(open || []).forEach((department) => {\n\t\tresult[department.name] = { open: department.chats, closed: 0 };\n\t});\n\t(closed || []).forEach((department) => {\n\t\tresult[department.name] = {\n\t\t\topen: result[department.name] ? result[department.name].open : 0,\n\t\t\tclosed: department.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllResponseTimeMetricsAsync = async ({ start, end, departmentId = undefined }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\n\treturn {\n\t\tresponse: {\n\t\t\tavg: responseTimes ? responseTimes.avg : 0,\n\t\t\tlongest: responseTimes ? responseTimes.longest : 0,\n\t\t},\n\t\treaction: {\n\t\t\tavg: reactionTimes ? reactionTimes.avg : 0,\n\t\t\tlongest: reactionTimes ? reactionTimes.longest : 0,\n\t\t},\n\t\tchatDuration: {\n\t\t\tavg: durationTimings ? durationTimings.avg : 0,\n\t\t\tlongest: durationTimings ? durationTimings.longest : 0,\n\t\t},\n\t};\n};\n\nexport const findAllChatsStatus = ({ start, end, departmentId = undefined }) =>\n\tPromise.await(findAllChatsStatusAsync({ start, end, departmentId }));\nexport const getProductivityMetrics = ({ start, end, departmentId = undefined, user = {} }) =>\n\tPromise.await(getProductivityMetricsAsync({ start, end, departmentId, user }));\nexport const getAgentsProductivityMetrics = ({ start, end, departmentId = undefined, user = {} }) =>\n\tPromise.await(getAgentsProductivityMetricsAsync({ start, end, departmentId, user }));\nexport const getConversationsMetrics = ({ start, end, departmentId = undefined, user = {} }) =>\n\tPromise.await(getConversationsMetricsAsync({ start, end, departmentId, user }));\nexport const findAllChatMetricsByAgent = ({ start, end, departmentId = undefined }) =>\n\tPromise.await(findAllChatMetricsByAgentAsync({ start, end, departmentId }));\nexport const findAllChatMetricsByDepartment = ({ start, end, departmentId = undefined }) =>\n\tPromise.await(findAllChatMetricsByDepartmentAsync({ start, end, departmentId }));\nexport const findAllResponseTimeMetrics = ({ start, end, departmentId = undefined }) =>\n\tPromise.await(findAllResponseTimeMetricsAsync({ start, end, departmentId }));\nexport const getChatsMetrics = ({ start, end, departmentId = undefined }) =>\n\tPromise.await(getChatsMetricsAsync({ start, end, departmentId }));\nexport const findAllAgentsStatus = ({ departmentId = undefined }) => Promise.await(findAllAgentsStatusAsync({ departmentId }));\n"]},"sourceType":"module","hash":"b734258064c093f703d682dfdf70a4d117b47fe0"}
