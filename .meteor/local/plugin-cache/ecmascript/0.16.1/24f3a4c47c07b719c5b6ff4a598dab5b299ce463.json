{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-hipchat-enterprise/server/importer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-hipchat-enterprise/server/importer.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-hipchat-enterprise/server/importer.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-hipchat-enterprise/server/importer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-hipchat-enterprise/server/importer.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  HipChatEnterpriseImporter: () => HipChatEnterpriseImporter\n});\nlet Readable;\nmodule.link(\"stream\", {\n  Readable(v) {\n    Readable = v;\n  }\n\n}, 0);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet Base, ProgressStep;\nmodule.link(\"../../importer/server\", {\n  Base(v) {\n    Base = v;\n  },\n\n  ProgressStep(v) {\n    ProgressStep = v;\n  }\n\n}, 4);\n\nclass HipChatEnterpriseImporter extends Base {\n  constructor(info, importRecord) {\n    super(info, importRecord);\n    this.Readable = Readable;\n    this.zlib = require('zlib');\n    this.tarStream = require('tar-stream');\n    this.extract = this.tarStream.extract();\n    this.path = path;\n  }\n\n  parseData(data) {\n    const dataString = data.toString();\n\n    try {\n      this.logger.debug('parsing file contents');\n      return JSON.parse(dataString);\n    } catch (e) {\n      this.logger.error(e);\n      return false;\n    }\n  }\n\n  prepareUsersFile(file) {\n    return Promise.asyncApply(() => {\n      super.updateProgress(ProgressStep.PREPARING_USERS);\n      let count = 0;\n\n      for (const u of file) {\n        const newUser = {\n          emails: [],\n          importIds: [String(u.User.id)],\n          username: u.User.mention_name,\n          name: u.User.name,\n          avatarUrl: u.User.avatar && \"data:image/png;base64,\".concat(u.User.avatar.replace(/\\n/g, '')),\n          bio: u.User.title || undefined,\n          deleted: u.User.is_deleted,\n          type: 'user'\n        };\n        count++;\n\n        if (u.User.email) {\n          newUser.emails.push(u.User.email);\n        }\n\n        this.converter.addUser(newUser);\n      }\n\n      super.updateRecord({\n        'count.users': count\n      });\n      super.addCountToTotal(count);\n    });\n  }\n\n  prepareRoomsFile(file) {\n    return Promise.asyncApply(() => {\n      super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n      let count = 0;\n\n      for (const r of file) {\n        this.converter.addChannel({\n          u: {\n            _id: r.Room.owner\n          },\n          importIds: [String(r.Room.id)],\n          name: r.Room.name,\n          users: r.Room.members,\n          t: r.Room.privacy === 'private' ? 'p' : 'c',\n          topic: r.Room.topic,\n          ts: new Date(r.Room.created),\n          archived: r.Room.is_archived\n        });\n        count++;\n      }\n\n      super.updateRecord({\n        'count.channels': count\n      });\n      super.addCountToTotal(count);\n    });\n  }\n\n  prepareUserMessagesFile(file) {\n    return Promise.asyncApply(() => {\n      this.logger.debug(\"preparing room with \".concat(file.length, \" messages \"));\n      let count = 0;\n      const dmRooms = [];\n\n      for (const m of file) {\n        if (!m.PrivateUserMessage) {\n          continue;\n        } // If the message id is already on the list, skip it\n\n\n        if (this.preparedMessages[m.PrivateUserMessage.id] !== undefined) {\n          continue;\n        }\n\n        this.preparedMessages[m.PrivateUserMessage.id] = true;\n        const senderId = String(m.PrivateUserMessage.sender.id);\n        const receiverId = String(m.PrivateUserMessage.receiver.id);\n        const users = [senderId, receiverId].sort();\n\n        if (!dmRooms[receiverId]) {\n          dmRooms[receiverId] = this.converter.findDMForImportedUsers(senderId, receiverId);\n\n          if (!dmRooms[receiverId]) {\n            const room = {\n              importIds: [users.join('')],\n              users,\n              t: 'd',\n              ts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0])\n            };\n            this.converter.addChannel(room);\n            dmRooms[receiverId] = room;\n          }\n        }\n\n        const rid = dmRooms[receiverId].importIds[0];\n        const newMessage = this.convertImportedMessage(m.PrivateUserMessage, rid, 'private');\n        count++;\n        this.converter.addMessage(newMessage);\n      }\n\n      return count;\n    });\n  }\n\n  get turndownService() {\n    const TurndownService = Promise.await(module.dynamicImport('turndown')).default;\n    const turndownService = new TurndownService({\n      strongDelimiter: '*',\n      hr: '',\n      br: '\\n'\n    });\n    turndownService.addRule('strikethrough', {\n      filter: 'img',\n\n      replacement(content, node) {\n        const src = node.getAttribute('src') || '';\n        const alt = node.alt || node.title || src;\n        return src ? \"[\".concat(alt, \"](\").concat(src, \")\") : '';\n      }\n\n    });\n    this.turndownService = turndownService;\n    return turndownService;\n  }\n\n  convertImportedMessage(importedMessage, rid, type) {\n    var _importedMessage$atta;\n\n    const idType = type === 'private' ? type : \"\".concat(rid, \"-\").concat(type);\n    const newId = \"hipchatenterprise-\".concat(idType, \"-\").concat(importedMessage.id);\n    const newMessage = {\n      _id: newId,\n      rid,\n      ts: new Date(importedMessage.timestamp.split(' ')[0]),\n      u: {\n        _id: String(importedMessage.sender.id)\n      }\n    };\n    const text = importedMessage.message;\n\n    if (importedMessage.message_format === 'html') {\n      newMessage.msg = this.turndownService.turndown(text);\n    } else if (text.startsWith('/me ')) {\n      newMessage.msg = \"\".concat(text.replace(/\\/me /, '_'), \"_\");\n    } else {\n      newMessage.msg = text;\n    }\n\n    if ((_importedMessage$atta = importedMessage.attachment) !== null && _importedMessage$atta !== void 0 && _importedMessage$atta.url) {\n      const fileId = \"\".concat(importedMessage.id, \"-\").concat(importedMessage.attachment.name || 'attachment');\n      newMessage._importFile = {\n        downloadUrl: importedMessage.attachment.url,\n        id: \"\".concat(fileId),\n        size: importedMessage.attachment.size || 0,\n        name: importedMessage.attachment.name,\n        external: false,\n        source: 'hipchat-enterprise',\n        original: _objectSpread({}, importedMessage.attachment)\n      };\n    }\n\n    return newMessage;\n  }\n\n  prepareRoomMessagesFile(file, rid) {\n    return Promise.asyncApply(() => {\n      this.logger.debug(\"preparing room with \".concat(file.length, \" messages \"));\n      let count = 0;\n\n      for (const m of file) {\n        if (m.UserMessage) {\n          const newMessage = this.convertImportedMessage(m.UserMessage, rid, 'user');\n          this.converter.addMessage(newMessage);\n          count++;\n        } else if (m.NotificationMessage) {\n          const newMessage = this.convertImportedMessage(m.NotificationMessage, rid, 'notif');\n          newMessage.u._id = 'rocket.cat';\n          newMessage.alias = m.NotificationMessage.sender;\n          this.converter.addMessage(newMessage);\n          count++;\n        } else if (m.TopicRoomMessage) {\n          const newMessage = this.convertImportedMessage(m.TopicRoomMessage, rid, 'topic');\n          newMessage.t = 'room_changed_topic';\n          this.converter.addMessage(newMessage);\n          count++;\n        } else if (m.ArchiveRoomMessage) {\n          this.logger.warn('Archived Room Notification was ignored.');\n        } else if (m.GuestAccessMessage) {\n          this.logger.warn('Guess Access Notification was ignored.');\n        } else {\n          this.logger.error(\"HipChat Enterprise importer isn't configured to handle this message:\", m);\n        }\n      }\n\n      return count;\n    });\n  }\n\n  prepareMessagesFile(file, info) {\n    return Promise.asyncApply(() => {\n      super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n      const [type, id] = info.dir.split('/');\n      const roomIdentifier = \"\".concat(type, \"/\").concat(id);\n      super.updateRecord({\n        messagesstatus: roomIdentifier\n      });\n\n      switch (type) {\n        case 'users':\n          return this.prepareUserMessagesFile(file);\n\n        case 'rooms':\n          return this.prepareRoomMessagesFile(file, id);\n\n        default:\n          this.logger.error(\"HipChat Enterprise importer isn't configured to handle \\\"\".concat(type, \"\\\" files (\").concat(info.dir, \").\"));\n          return 0;\n      }\n    });\n  }\n\n  prepareFile(info, data, fileName) {\n    return Promise.asyncApply(() => {\n      const file = this.parseData(data);\n\n      if (file === false) {\n        this.logger.error('failed to parse data');\n        return false;\n      }\n\n      switch (info.base) {\n        case 'users.json':\n          Promise.await(this.prepareUsersFile(file));\n          break;\n\n        case 'rooms.json':\n          Promise.await(this.prepareRoomsFile(file));\n          break;\n\n        case 'history.json':\n          return this.prepareMessagesFile(file, info);\n\n        case 'emoticons.json':\n        case 'metadata.json':\n          break;\n\n        default:\n          this.logger.error(\"HipChat Enterprise importer doesn't know what to do with the file \\\"\".concat(fileName, \"\\\"\"));\n          break;\n      }\n\n      return 0;\n    });\n  }\n\n  prepareUsingLocalFile(fullFilePath) {\n    this.logger.debug('start preparing import operation');\n    this.converter.clearImportData(); // HipChat duplicates direct messages (one for each user)\n    // This object will keep track of messages that have already been prepared so it doesn't try to do it twice\n\n    this.preparedMessages = {};\n    let messageCount = 0;\n    const promise = new Promise((resolve, reject) => {\n      this.extract.on('entry', Meteor.bindEnvironment((header, stream, next) => {\n        this.logger.debug(\"new entry from import file: \".concat(header.name));\n\n        if (!header.name.endsWith('.json')) {\n          stream.resume();\n          return next();\n        }\n\n        const info = this.path.parse(header.name);\n        let pos = 0;\n        let data = Buffer.allocUnsafe(header.size);\n        stream.on('data', Meteor.bindEnvironment(chunk => {\n          data.fill(chunk, pos, pos + chunk.length);\n          pos += chunk.length;\n        }));\n        stream.on('end', Meteor.bindEnvironment(() => Promise.asyncApply(() => {\n          this.logger.info(\"Processing the file: \".concat(header.name));\n          const newMessageCount = Promise.await(this.prepareFile(info, data, header.name));\n          messageCount += newMessageCount;\n          super.updateRecord({\n            'count.messages': messageCount\n          });\n          super.addCountToTotal(newMessageCount);\n          data = undefined;\n          this.logger.debug('next import entry');\n          next();\n        })));\n        stream.on('error', () => next());\n        stream.resume();\n      }));\n      this.extract.on('error', err => {\n        this.logger.error('extract error:', err);\n        reject(new Meteor.Error('error-import-file-extract-error'));\n      });\n      this.extract.on('finish', Meteor.bindEnvironment(() => {\n        resolve();\n      }));\n      const rs = fs.createReadStream(fullFilePath);\n      const gunzip = this.zlib.createGunzip();\n      gunzip.on('error', err => {\n        this.logger.error('extract error:', err);\n        reject(new Meteor.Error('error-import-file-extract-error'));\n      });\n      this.logger.debug('start extracting import file');\n      rs.pipe(gunzip).pipe(this.extract);\n    });\n    return promise;\n  }\n\n}","map":{"version":3,"sources":["app/importer-hipchat-enterprise/server/importer.js"],"names":["_objectSpread","module","link","default","v","export","HipChatEnterpriseImporter","Readable","path","fs","Meteor","Base","ProgressStep","constructor","info","importRecord","zlib","require","tarStream","extract","parseData","data","dataString","toString","logger","debug","JSON","parse","e","error","prepareUsersFile","file","updateProgress","PREPARING_USERS","count","u","newUser","emails","importIds","String","User","id","username","mention_name","name","avatarUrl","avatar","replace","bio","title","undefined","deleted","is_deleted","type","email","push","converter","addUser","updateRecord","addCountToTotal","prepareRoomsFile","PREPARING_CHANNELS","r","addChannel","_id","Room","owner","users","members","t","privacy","topic","ts","Date","created","archived","is_archived","prepareUserMessagesFile","length","dmRooms","m","PrivateUserMessage","preparedMessages","senderId","sender","receiverId","receiver","sort","findDMForImportedUsers","room","join","timestamp","split","rid","newMessage","convertImportedMessage","addMessage","turndownService","TurndownService","Promise","await","strongDelimiter","hr","br","addRule","filter","replacement","content","node","src","getAttribute","alt","importedMessage","idType","newId","text","message","message_format","msg","turndown","startsWith","attachment","url","fileId","_importFile","downloadUrl","size","external","source","original","prepareRoomMessagesFile","UserMessage","NotificationMessage","alias","TopicRoomMessage","ArchiveRoomMessage","warn","GuestAccessMessage","prepareMessagesFile","PREPARING_MESSAGES","dir","roomIdentifier","messagesstatus","prepareFile","fileName","base","prepareUsingLocalFile","fullFilePath","clearImportData","messageCount","promise","resolve","reject","on","bindEnvironment","header","stream","next","endsWith","resume","pos","Buffer","allocUnsafe","chunk","fill","newMessageCount","err","Error","rs","createReadStream","gunzip","createGunzip","pipe"],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport path from 'path';\nimport fs from 'fs';\n\nimport { Meteor } from 'meteor/meteor';\n\nimport { Base, ProgressStep } from '../../importer/server';\n\nexport class HipChatEnterpriseImporter extends Base {\n\tconstructor(info, importRecord) {\n\t\tsuper(info, importRecord);\n\n\t\tthis.Readable = Readable;\n\t\tthis.zlib = require('zlib');\n\t\tthis.tarStream = require('tar-stream');\n\t\tthis.extract = this.tarStream.extract();\n\t\tthis.path = path;\n\t}\n\n\tparseData(data) {\n\t\tconst dataString = data.toString();\n\t\ttry {\n\t\t\tthis.logger.debug('parsing file contents');\n\t\t\treturn JSON.parse(dataString);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tasync prepareUsersFile(file) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tlet count = 0;\n\n\t\tfor (const u of file) {\n\t\t\tconst newUser = {\n\t\t\t\temails: [],\n\t\t\t\timportIds: [String(u.User.id)],\n\t\t\t\tusername: u.User.mention_name,\n\t\t\t\tname: u.User.name,\n\t\t\t\tavatarUrl: u.User.avatar && `data:image/png;base64,${u.User.avatar.replace(/\\n/g, '')}`,\n\t\t\t\tbio: u.User.title || undefined,\n\t\t\t\tdeleted: u.User.is_deleted,\n\t\t\t\ttype: 'user',\n\t\t\t};\n\t\t\tcount++;\n\n\t\t\tif (u.User.email) {\n\t\t\t\tnewUser.emails.push(u.User.email);\n\t\t\t}\n\n\t\t\tthis.converter.addUser(newUser);\n\t\t}\n\n\t\tsuper.updateRecord({ 'count.users': count });\n\t\tsuper.addCountToTotal(count);\n\t}\n\n\tasync prepareRoomsFile(file) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tlet count = 0;\n\n\t\tfor (const r of file) {\n\t\t\tthis.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: r.Room.owner,\n\t\t\t\t},\n\t\t\t\timportIds: [String(r.Room.id)],\n\t\t\t\tname: r.Room.name,\n\t\t\t\tusers: r.Room.members,\n\t\t\t\tt: r.Room.privacy === 'private' ? 'p' : 'c',\n\t\t\t\ttopic: r.Room.topic,\n\t\t\t\tts: new Date(r.Room.created),\n\t\t\t\tarchived: r.Room.is_archived,\n\t\t\t});\n\n\t\t\tcount++;\n\t\t}\n\n\t\tsuper.updateRecord({ 'count.channels': count });\n\t\tsuper.addCountToTotal(count);\n\t}\n\n\tasync prepareUserMessagesFile(file) {\n\t\tthis.logger.debug(`preparing room with ${file.length} messages `);\n\t\tlet count = 0;\n\t\tconst dmRooms = [];\n\n\t\tfor (const m of file) {\n\t\t\tif (!m.PrivateUserMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the message id is already on the list, skip it\n\t\t\tif (this.preparedMessages[m.PrivateUserMessage.id] !== undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.preparedMessages[m.PrivateUserMessage.id] = true;\n\n\t\t\tconst senderId = String(m.PrivateUserMessage.sender.id);\n\t\t\tconst receiverId = String(m.PrivateUserMessage.receiver.id);\n\t\t\tconst users = [senderId, receiverId].sort();\n\n\t\t\tif (!dmRooms[receiverId]) {\n\t\t\t\tdmRooms[receiverId] = this.converter.findDMForImportedUsers(senderId, receiverId);\n\n\t\t\t\tif (!dmRooms[receiverId]) {\n\t\t\t\t\tconst room = {\n\t\t\t\t\t\timportIds: [users.join('')],\n\t\t\t\t\t\tusers,\n\t\t\t\t\t\tt: 'd',\n\t\t\t\t\t\tts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t};\n\t\t\t\t\tthis.converter.addChannel(room);\n\t\t\t\t\tdmRooms[receiverId] = room;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst rid = dmRooms[receiverId].importIds[0];\n\t\t\tconst newMessage = this.convertImportedMessage(m.PrivateUserMessage, rid, 'private');\n\t\t\tcount++;\n\t\t\tthis.converter.addMessage(newMessage);\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tget turndownService() {\n\t\tconst TurndownService = Promise.await(import('turndown')).default;\n\n\t\tconst turndownService = new TurndownService({\n\t\t\tstrongDelimiter: '*',\n\t\t\thr: '',\n\t\t\tbr: '\\n',\n\t\t});\n\n\t\tturndownService.addRule('strikethrough', {\n\t\t\tfilter: 'img',\n\n\t\t\treplacement(content, node) {\n\t\t\t\tconst src = node.getAttribute('src') || '';\n\t\t\t\tconst alt = node.alt || node.title || src;\n\t\t\t\treturn src ? `[${alt}](${src})` : '';\n\t\t\t},\n\t\t});\n\n\t\tthis.turndownService = turndownService;\n\n\t\treturn turndownService;\n\t}\n\n\tconvertImportedMessage(importedMessage, rid, type) {\n\t\tconst idType = type === 'private' ? type : `${rid}-${type}`;\n\t\tconst newId = `hipchatenterprise-${idType}-${importedMessage.id}`;\n\n\t\tconst newMessage = {\n\t\t\t_id: newId,\n\t\t\trid,\n\t\t\tts: new Date(importedMessage.timestamp.split(' ')[0]),\n\t\t\tu: {\n\t\t\t\t_id: String(importedMessage.sender.id),\n\t\t\t},\n\t\t};\n\n\t\tconst text = importedMessage.message;\n\n\t\tif (importedMessage.message_format === 'html') {\n\t\t\tnewMessage.msg = this.turndownService.turndown(text);\n\t\t} else if (text.startsWith('/me ')) {\n\t\t\tnewMessage.msg = `${text.replace(/\\/me /, '_')}_`;\n\t\t} else {\n\t\t\tnewMessage.msg = text;\n\t\t}\n\n\t\tif (importedMessage.attachment?.url) {\n\t\t\tconst fileId = `${importedMessage.id}-${importedMessage.attachment.name || 'attachment'}`;\n\n\t\t\tnewMessage._importFile = {\n\t\t\t\tdownloadUrl: importedMessage.attachment.url,\n\t\t\t\tid: `${fileId}`,\n\t\t\t\tsize: importedMessage.attachment.size || 0,\n\t\t\t\tname: importedMessage.attachment.name,\n\t\t\t\texternal: false,\n\t\t\t\tsource: 'hipchat-enterprise',\n\t\t\t\toriginal: {\n\t\t\t\t\t...importedMessage.attachment,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn newMessage;\n\t}\n\n\tasync prepareRoomMessagesFile(file, rid) {\n\t\tthis.logger.debug(`preparing room with ${file.length} messages `);\n\t\tlet count = 0;\n\n\t\tfor (const m of file) {\n\t\t\tif (m.UserMessage) {\n\t\t\t\tconst newMessage = this.convertImportedMessage(m.UserMessage, rid, 'user');\n\t\t\t\tthis.converter.addMessage(newMessage);\n\t\t\t\tcount++;\n\t\t\t} else if (m.NotificationMessage) {\n\t\t\t\tconst newMessage = this.convertImportedMessage(m.NotificationMessage, rid, 'notif');\n\t\t\t\tnewMessage.u._id = 'rocket.cat';\n\t\t\t\tnewMessage.alias = m.NotificationMessage.sender;\n\n\t\t\t\tthis.converter.addMessage(newMessage);\n\t\t\t\tcount++;\n\t\t\t} else if (m.TopicRoomMessage) {\n\t\t\t\tconst newMessage = this.convertImportedMessage(m.TopicRoomMessage, rid, 'topic');\n\t\t\t\tnewMessage.t = 'room_changed_topic';\n\n\t\t\t\tthis.converter.addMessage(newMessage);\n\t\t\t\tcount++;\n\t\t\t} else if (m.ArchiveRoomMessage) {\n\t\t\t\tthis.logger.warn('Archived Room Notification was ignored.');\n\t\t\t} else if (m.GuestAccessMessage) {\n\t\t\t\tthis.logger.warn('Guess Access Notification was ignored.');\n\t\t\t} else {\n\t\t\t\tthis.logger.error(\"HipChat Enterprise importer isn't configured to handle this message:\", m);\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tasync prepareMessagesFile(file, info) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\n\t\tconst [type, id] = info.dir.split('/');\n\t\tconst roomIdentifier = `${type}/${id}`;\n\n\t\tsuper.updateRecord({ messagesstatus: roomIdentifier });\n\n\t\tswitch (type) {\n\t\t\tcase 'users':\n\t\t\t\treturn this.prepareUserMessagesFile(file);\n\t\t\tcase 'rooms':\n\t\t\t\treturn this.prepareRoomMessagesFile(file, id);\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`HipChat Enterprise importer isn't configured to handle \"${type}\" files (${info.dir}).`);\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\tasync prepareFile(info, data, fileName) {\n\t\tconst file = this.parseData(data);\n\t\tif (file === false) {\n\t\t\tthis.logger.error('failed to parse data');\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (info.base) {\n\t\t\tcase 'users.json':\n\t\t\t\tawait this.prepareUsersFile(file);\n\t\t\t\tbreak;\n\t\t\tcase 'rooms.json':\n\t\t\t\tawait this.prepareRoomsFile(file);\n\t\t\t\tbreak;\n\t\t\tcase 'history.json':\n\t\t\t\treturn this.prepareMessagesFile(file, info);\n\t\t\tcase 'emoticons.json':\n\t\t\tcase 'metadata.json':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`HipChat Enterprise importer doesn't know what to do with the file \"${fileName}\"`);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprepareUsingLocalFile(fullFilePath) {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tthis.converter.clearImportData();\n\n\t\t// HipChat duplicates direct messages (one for each user)\n\t\t// This object will keep track of messages that have already been prepared so it doesn't try to do it twice\n\t\tthis.preparedMessages = {};\n\t\tlet messageCount = 0;\n\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tthis.extract.on(\n\t\t\t\t'entry',\n\t\t\t\tMeteor.bindEnvironment((header, stream, next) => {\n\t\t\t\t\tthis.logger.debug(`new entry from import file: ${header.name}`);\n\t\t\t\t\tif (!header.name.endsWith('.json')) {\n\t\t\t\t\t\tstream.resume();\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst info = this.path.parse(header.name);\n\t\t\t\t\tlet pos = 0;\n\t\t\t\t\tlet data = Buffer.allocUnsafe(header.size);\n\n\t\t\t\t\tstream.on(\n\t\t\t\t\t\t'data',\n\t\t\t\t\t\tMeteor.bindEnvironment((chunk) => {\n\t\t\t\t\t\t\tdata.fill(chunk, pos, pos + chunk.length);\n\t\t\t\t\t\t\tpos += chunk.length;\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\tstream.on(\n\t\t\t\t\t\t'end',\n\t\t\t\t\t\tMeteor.bindEnvironment(async () => {\n\t\t\t\t\t\t\tthis.logger.info(`Processing the file: ${header.name}`);\n\t\t\t\t\t\t\tconst newMessageCount = await this.prepareFile(info, data, header.name);\n\n\t\t\t\t\t\t\tmessageCount += newMessageCount;\n\t\t\t\t\t\t\tsuper.updateRecord({ 'count.messages': messageCount });\n\t\t\t\t\t\t\tsuper.addCountToTotal(newMessageCount);\n\n\t\t\t\t\t\t\tdata = undefined;\n\n\t\t\t\t\t\t\tthis.logger.debug('next import entry');\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\tstream.on('error', () => next());\n\t\t\t\t\tstream.resume();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis.extract.on('error', (err) => {\n\t\t\t\tthis.logger.error('extract error:', err);\n\t\t\t\treject(new Meteor.Error('error-import-file-extract-error'));\n\t\t\t});\n\n\t\t\tthis.extract.on(\n\t\t\t\t'finish',\n\t\t\t\tMeteor.bindEnvironment(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst rs = fs.createReadStream(fullFilePath);\n\t\t\tconst gunzip = this.zlib.createGunzip();\n\n\t\t\tgunzip.on('error', (err) => {\n\t\t\t\tthis.logger.error('extract error:', err);\n\t\t\t\treject(new Meteor.Error('error-import-file-extract-error'));\n\t\t\t});\n\t\t\tthis.logger.debug('start extracting import file');\n\t\t\trs.pipe(gunzip).pipe(this.extract);\n\t\t});\n\n\t\treturn promise;\n\t}\n}\n"]},"sourceType":"module","hash":"24f3a4c47c07b719c5b6ff4a598dab5b299ce463"}
