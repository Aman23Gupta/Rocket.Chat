{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/commands.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/commands.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/commands.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/commands.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/commands.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet objectPath;\nmodule.link(\"object-path\", {\n  default(v) {\n    objectPath = v;\n  }\n\n}, 2);\nlet slashCommands;\nmodule.link(\"../../../utils/server\", {\n  slashCommands(v) {\n    slashCommands = v;\n  }\n\n}, 3);\nlet Messages;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 4);\nlet canAccessRoom;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 5);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 6);\nAPI.v1.addRoute('commands.get', {\n  authRequired: true\n}, {\n  get() {\n    const params = this.queryParams;\n\n    if (typeof params.command !== 'string') {\n      return API.v1.failure('The query param \"command\" must be provided.');\n    }\n\n    const cmd = slashCommands.commands[params.command.toLowerCase()];\n\n    if (!cmd) {\n      return API.v1.failure(\"There is no command in the system by the name of: \".concat(params.command));\n    }\n\n    return API.v1.success({\n      command: cmd\n    });\n  }\n\n}); // TODO: replace with something like client/lib/minimongo\n\nconst processQueryOptionsOnResult = function (result) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (result === undefined || result === null) {\n    return undefined;\n  }\n\n  if (Array.isArray(result)) {\n    if (options.sort) {\n      result = result.sort((a, b) => {\n        let r = 0;\n\n        for (const field in options.sort) {\n          if (options.sort.hasOwnProperty(field)) {\n            const direction = options.sort[field];\n            let valueA;\n            let valueB;\n\n            if (field.indexOf('.') > -1) {\n              valueA = objectPath.get(a, field);\n              valueB = objectPath.get(b, field);\n            } else {\n              valueA = a[field];\n              valueB = b[field];\n            }\n\n            if (valueA > valueB) {\n              r = direction;\n              break;\n            }\n\n            if (valueA < valueB) {\n              r = -direction;\n              break;\n            }\n          }\n        }\n\n        return r;\n      });\n    }\n\n    if (typeof options.skip === 'number') {\n      result.splice(0, options.skip);\n    }\n\n    if (typeof options.limit === 'number' && options.limit !== 0) {\n      result.splice(options.limit);\n    }\n  }\n\n  if (!options.fields) {\n    options.fields = {};\n  }\n\n  const fieldsToRemove = [];\n  const fieldsToGet = [];\n\n  for (const field in options.fields) {\n    if (options.fields.hasOwnProperty(field)) {\n      if (options.fields[field] === 0) {\n        fieldsToRemove.push(field);\n      } else if (options.fields[field] === 1) {\n        fieldsToGet.push(field);\n      }\n    }\n  }\n\n  if (fieldsToRemove.length > 0 && fieldsToGet.length > 0) {\n    console.warn(\"Can't mix remove and get fields\");\n    fieldsToRemove.splice(0, fieldsToRemove.length);\n  }\n\n  if (fieldsToGet.length > 0 && fieldsToGet.indexOf('_id') === -1) {\n    fieldsToGet.push('_id');\n  }\n\n  const pickFields = (obj, fields) => {\n    const picked = {};\n    fields.forEach(field => {\n      if (field.indexOf('.') !== -1) {\n        objectPath.set(picked, field, objectPath.get(obj, field));\n      } else {\n        picked[field] = obj[field];\n      }\n    });\n    return picked;\n  };\n\n  if (fieldsToRemove.length > 0 || fieldsToGet.length > 0) {\n    if (Array.isArray(result)) {\n      result = result.map(record => {\n        if (fieldsToRemove.length > 0) {\n          return Object.fromEntries(Object.entries(record).filter(_ref => {\n            let [key] = _ref;\n            return !fieldsToRemove.includes(key);\n          }));\n        }\n\n        if (fieldsToGet.length > 0) {\n          return pickFields(record, fieldsToGet);\n        }\n\n        return null;\n      });\n    } else {\n      if (fieldsToRemove.length > 0) {\n        return Object.fromEntries(Object.entries(result).filter(_ref2 => {\n          let [key] = _ref2;\n          return !fieldsToRemove.includes(key);\n        }));\n      }\n\n      if (fieldsToGet.length > 0) {\n        return pickFields(result, fieldsToGet);\n      }\n    }\n  }\n\n  return result;\n};\n\nAPI.v1.addRoute('commands.list', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    let commands = Object.values(slashCommands.commands);\n\n    if (query && query.command) {\n      commands = commands.filter(command => command.command === query.command);\n    }\n\n    const totalCount = commands.length;\n    commands = processQueryOptionsOnResult(commands, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    return API.v1.success({\n      commands,\n      offset,\n      count: commands.length,\n      total: totalCount\n    });\n  }\n\n}); // Expects a body of: { command: 'gimme', params: 'any string value', roomId: 'value', triggerId: 'value' }\n\nAPI.v1.addRoute('commands.run', {\n  authRequired: true\n}, {\n  post() {\n    const body = this.bodyParams;\n    const user = this.getLoggedInUser();\n\n    if (typeof body.command !== 'string') {\n      return API.v1.failure('You must provide a command to run.');\n    }\n\n    if (body.params && typeof body.params !== 'string') {\n      return API.v1.failure('The parameters for the command must be a single string.');\n    }\n\n    if (typeof body.roomId !== 'string') {\n      return API.v1.failure(\"The room's id where to execute this command must be provided and be a string.\");\n    }\n\n    if (body.tmid && typeof body.tmid !== 'string') {\n      return API.v1.failure('The tmid parameter when provided must be a string.');\n    }\n\n    const cmd = body.command.toLowerCase();\n\n    if (!slashCommands.commands[cmd]) {\n      return API.v1.failure('The command provided does not exist (or is disabled).');\n    }\n\n    if (!canAccessRoom({\n      _id: body.roomId\n    }, user)) {\n      return API.v1.unauthorized();\n    }\n\n    const params = body.params ? body.params : '';\n    const message = {\n      _id: Random.id(),\n      rid: body.roomId,\n      msg: \"/\".concat(cmd, \" \").concat(params)\n    };\n\n    if (body.tmid) {\n      const thread = Messages.findOneById(body.tmid);\n\n      if (!thread || thread.rid !== body.roomId) {\n        return API.v1.failure('Invalid thread.');\n      }\n\n      message.tmid = body.tmid;\n    }\n\n    const {\n      triggerId\n    } = body;\n    const result = Meteor.runAsUser(user._id, () => slashCommands.run(cmd, params, message, triggerId));\n    return API.v1.success({\n      result\n    });\n  }\n\n});\nAPI.v1.addRoute('commands.preview', {\n  authRequired: true\n}, {\n  // Expects these query params: command: 'giphy', params: 'mine', roomId: 'value'\n  get() {\n    const query = this.queryParams;\n    const user = this.getLoggedInUser();\n\n    if (typeof query.command !== 'string') {\n      return API.v1.failure('You must provide a command to get the previews from.');\n    }\n\n    if (query.params && typeof query.params !== 'string') {\n      return API.v1.failure('The parameters for the command must be a single string.');\n    }\n\n    if (typeof query.roomId !== 'string') {\n      return API.v1.failure(\"The room's id where the previews are being displayed must be provided and be a string.\");\n    }\n\n    const cmd = query.command.toLowerCase();\n\n    if (!slashCommands.commands[cmd]) {\n      return API.v1.failure('The command provided does not exist (or is disabled).');\n    }\n\n    if (!canAccessRoom({\n      _id: query.roomId\n    }, user)) {\n      return API.v1.unauthorized();\n    }\n\n    const params = query.params ? query.params : '';\n    let preview;\n    Meteor.runAsUser(user._id, () => {\n      preview = Meteor.call('getSlashCommandPreviews', {\n        cmd,\n        params,\n        msg: {\n          rid: query.roomId\n        }\n      });\n    });\n    return API.v1.success({\n      preview\n    });\n  },\n\n  // Expects a body format of: { command: 'giphy', params: 'mine', roomId: 'value', tmid: 'value', triggerId: 'value', previewItem: { id: 'sadf8' type: 'image', value: 'https://dev.null/gif' } }\n  post() {\n    const body = this.bodyParams;\n    const user = this.getLoggedInUser();\n\n    if (typeof body.command !== 'string') {\n      return API.v1.failure('You must provide a command to run the preview item on.');\n    }\n\n    if (body.params && typeof body.params !== 'string') {\n      return API.v1.failure('The parameters for the command must be a single string.');\n    }\n\n    if (typeof body.roomId !== 'string') {\n      return API.v1.failure(\"The room's id where the preview is being executed in must be provided and be a string.\");\n    }\n\n    if (typeof body.previewItem === 'undefined') {\n      return API.v1.failure('The preview item being executed must be provided.');\n    }\n\n    if (!body.previewItem.id || !body.previewItem.type || typeof body.previewItem.value === 'undefined') {\n      return API.v1.failure('The preview item being executed is in the wrong format.');\n    }\n\n    if (body.tmid && typeof body.tmid !== 'string') {\n      return API.v1.failure('The tmid parameter when provided must be a string.');\n    }\n\n    if (body.triggerId && typeof body.triggerId !== 'string') {\n      return API.v1.failure('The triggerId parameter when provided must be a string.');\n    }\n\n    const cmd = body.command.toLowerCase();\n\n    if (!slashCommands.commands[cmd]) {\n      return API.v1.failure('The command provided does not exist (or is disabled).');\n    }\n\n    if (!canAccessRoom({\n      _id: body.roomId\n    }, user)) {\n      return API.v1.unauthorized();\n    }\n\n    const params = body.params ? body.params : '';\n    const message = {\n      rid: body.roomId\n    };\n\n    if (body.tmid) {\n      const thread = Messages.findOneById(body.tmid);\n\n      if (!thread || thread.rid !== body.roomId) {\n        return API.v1.failure('Invalid thread.');\n      }\n\n      message.tmid = body.tmid;\n    }\n\n    Meteor.runAsUser(user._id, () => {\n      Meteor.call('executeSlashCommandPreview', {\n        cmd,\n        params,\n        msg: {\n          rid: body.roomId,\n          tmid: body.tmid\n        }\n      }, body.previewItem, body.triggerId);\n    });\n    return API.v1.success();\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/commands.js"],"names":["Meteor","module","link","v","Random","objectPath","default","slashCommands","Messages","canAccessRoom","API","v1","addRoute","authRequired","get","params","queryParams","command","failure","cmd","commands","toLowerCase","success","processQueryOptionsOnResult","result","options","undefined","Array","isArray","sort","a","b","r","field","hasOwnProperty","direction","valueA","valueB","indexOf","skip","splice","limit","fields","fieldsToRemove","fieldsToGet","push","length","console","warn","pickFields","obj","picked","forEach","set","map","record","Object","fromEntries","entries","filter","key","includes","offset","count","getPaginationItems","query","parseJsonQuery","values","totalCount","name","total","post","body","bodyParams","user","getLoggedInUser","roomId","tmid","_id","unauthorized","message","id","rid","msg","thread","findOneById","triggerId","runAsUser","run","preview","call","previewItem","type","value"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport objectPath from 'object-path';\n\nimport { slashCommands } from '../../../utils/server';\nimport { Messages } from '../../../models/server';\nimport { canAccessRoom } from '../../../authorization/server';\nimport { API } from '../api';\n\nAPI.v1.addRoute(\n\t'commands.get',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst params = this.queryParams;\n\n\t\t\tif (typeof params.command !== 'string') {\n\t\t\t\treturn API.v1.failure('The query param \"command\" must be provided.');\n\t\t\t}\n\n\t\t\tconst cmd = slashCommands.commands[params.command.toLowerCase()];\n\n\t\t\tif (!cmd) {\n\t\t\t\treturn API.v1.failure(`There is no command in the system by the name of: ${params.command}`);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ command: cmd });\n\t\t},\n\t},\n);\n\n// TODO: replace with something like client/lib/minimongo\nconst processQueryOptionsOnResult = (result, options = {}) => {\n\tif (result === undefined || result === null) {\n\t\treturn undefined;\n\t}\n\n\tif (Array.isArray(result)) {\n\t\tif (options.sort) {\n\t\t\tresult = result.sort((a, b) => {\n\t\t\t\tlet r = 0;\n\t\t\t\tfor (const field in options.sort) {\n\t\t\t\t\tif (options.sort.hasOwnProperty(field)) {\n\t\t\t\t\t\tconst direction = options.sort[field];\n\t\t\t\t\t\tlet valueA;\n\t\t\t\t\t\tlet valueB;\n\t\t\t\t\t\tif (field.indexOf('.') > -1) {\n\t\t\t\t\t\t\tvalueA = objectPath.get(a, field);\n\t\t\t\t\t\t\tvalueB = objectPath.get(b, field);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalueA = a[field];\n\t\t\t\t\t\t\tvalueB = b[field];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (valueA > valueB) {\n\t\t\t\t\t\t\tr = direction;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (valueA < valueB) {\n\t\t\t\t\t\t\tr = -direction;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t});\n\t\t}\n\n\t\tif (typeof options.skip === 'number') {\n\t\t\tresult.splice(0, options.skip);\n\t\t}\n\n\t\tif (typeof options.limit === 'number' && options.limit !== 0) {\n\t\t\tresult.splice(options.limit);\n\t\t}\n\t}\n\n\tif (!options.fields) {\n\t\toptions.fields = {};\n\t}\n\n\tconst fieldsToRemove = [];\n\tconst fieldsToGet = [];\n\n\tfor (const field in options.fields) {\n\t\tif (options.fields.hasOwnProperty(field)) {\n\t\t\tif (options.fields[field] === 0) {\n\t\t\t\tfieldsToRemove.push(field);\n\t\t\t} else if (options.fields[field] === 1) {\n\t\t\t\tfieldsToGet.push(field);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (fieldsToRemove.length > 0 && fieldsToGet.length > 0) {\n\t\tconsole.warn(\"Can't mix remove and get fields\");\n\t\tfieldsToRemove.splice(0, fieldsToRemove.length);\n\t}\n\n\tif (fieldsToGet.length > 0 && fieldsToGet.indexOf('_id') === -1) {\n\t\tfieldsToGet.push('_id');\n\t}\n\n\tconst pickFields = (obj, fields) => {\n\t\tconst picked = {};\n\t\tfields.forEach((field) => {\n\t\t\tif (field.indexOf('.') !== -1) {\n\t\t\t\tobjectPath.set(picked, field, objectPath.get(obj, field));\n\t\t\t} else {\n\t\t\t\tpicked[field] = obj[field];\n\t\t\t}\n\t\t});\n\t\treturn picked;\n\t};\n\n\tif (fieldsToRemove.length > 0 || fieldsToGet.length > 0) {\n\t\tif (Array.isArray(result)) {\n\t\t\tresult = result.map((record) => {\n\t\t\t\tif (fieldsToRemove.length > 0) {\n\t\t\t\t\treturn Object.fromEntries(Object.entries(record).filter(([key]) => !fieldsToRemove.includes(key)));\n\t\t\t\t}\n\n\t\t\t\tif (fieldsToGet.length > 0) {\n\t\t\t\t\treturn pickFields(record, fieldsToGet);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t});\n\t\t} else {\n\t\t\tif (fieldsToRemove.length > 0) {\n\t\t\t\treturn Object.fromEntries(Object.entries(result).filter(([key]) => !fieldsToRemove.includes(key)));\n\t\t\t}\n\n\t\t\tif (fieldsToGet.length > 0) {\n\t\t\t\treturn pickFields(result, fieldsToGet);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nAPI.v1.addRoute(\n\t'commands.list',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tlet commands = Object.values(slashCommands.commands);\n\n\t\t\tif (query && query.command) {\n\t\t\t\tcommands = commands.filter((command) => command.command === query.command);\n\t\t\t}\n\n\t\t\tconst totalCount = commands.length;\n\t\t\tcommands = processQueryOptionsOnResult(commands, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcommands,\n\t\t\t\toffset,\n\t\t\t\tcount: commands.length,\n\t\t\t\ttotal: totalCount,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Expects a body of: { command: 'gimme', params: 'any string value', roomId: 'value', triggerId: 'value' }\nAPI.v1.addRoute(\n\t'commands.run',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst body = this.bodyParams;\n\t\t\tconst user = this.getLoggedInUser();\n\n\t\t\tif (typeof body.command !== 'string') {\n\t\t\t\treturn API.v1.failure('You must provide a command to run.');\n\t\t\t}\n\n\t\t\tif (body.params && typeof body.params !== 'string') {\n\t\t\t\treturn API.v1.failure('The parameters for the command must be a single string.');\n\t\t\t}\n\n\t\t\tif (typeof body.roomId !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The room's id where to execute this command must be provided and be a string.\");\n\t\t\t}\n\n\t\t\tif (body.tmid && typeof body.tmid !== 'string') {\n\t\t\t\treturn API.v1.failure('The tmid parameter when provided must be a string.');\n\t\t\t}\n\n\t\t\tconst cmd = body.command.toLowerCase();\n\t\t\tif (!slashCommands.commands[cmd]) {\n\t\t\t\treturn API.v1.failure('The command provided does not exist (or is disabled).');\n\t\t\t}\n\n\t\t\tif (!canAccessRoom({ _id: body.roomId }, user)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst params = body.params ? body.params : '';\n\t\t\tconst message = {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid: body.roomId,\n\t\t\t\tmsg: `/${cmd} ${params}`,\n\t\t\t};\n\n\t\t\tif (body.tmid) {\n\t\t\t\tconst thread = Messages.findOneById(body.tmid);\n\t\t\t\tif (!thread || thread.rid !== body.roomId) {\n\t\t\t\t\treturn API.v1.failure('Invalid thread.');\n\t\t\t\t}\n\t\t\t\tmessage.tmid = body.tmid;\n\t\t\t}\n\n\t\t\tconst { triggerId } = body;\n\n\t\t\tconst result = Meteor.runAsUser(user._id, () => slashCommands.run(cmd, params, message, triggerId));\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'commands.preview',\n\t{ authRequired: true },\n\t{\n\t\t// Expects these query params: command: 'giphy', params: 'mine', roomId: 'value'\n\t\tget() {\n\t\t\tconst query = this.queryParams;\n\t\t\tconst user = this.getLoggedInUser();\n\n\t\t\tif (typeof query.command !== 'string') {\n\t\t\t\treturn API.v1.failure('You must provide a command to get the previews from.');\n\t\t\t}\n\n\t\t\tif (query.params && typeof query.params !== 'string') {\n\t\t\t\treturn API.v1.failure('The parameters for the command must be a single string.');\n\t\t\t}\n\n\t\t\tif (typeof query.roomId !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The room's id where the previews are being displayed must be provided and be a string.\");\n\t\t\t}\n\n\t\t\tconst cmd = query.command.toLowerCase();\n\t\t\tif (!slashCommands.commands[cmd]) {\n\t\t\t\treturn API.v1.failure('The command provided does not exist (or is disabled).');\n\t\t\t}\n\n\t\t\tif (!canAccessRoom({ _id: query.roomId }, user)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst params = query.params ? query.params : '';\n\n\t\t\tlet preview;\n\t\t\tMeteor.runAsUser(user._id, () => {\n\t\t\t\tpreview = Meteor.call('getSlashCommandPreviews', {\n\t\t\t\t\tcmd,\n\t\t\t\t\tparams,\n\t\t\t\t\tmsg: { rid: query.roomId },\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn API.v1.success({ preview });\n\t\t},\n\t\t// Expects a body format of: { command: 'giphy', params: 'mine', roomId: 'value', tmid: 'value', triggerId: 'value', previewItem: { id: 'sadf8' type: 'image', value: 'https://dev.null/gif' } }\n\t\tpost() {\n\t\t\tconst body = this.bodyParams;\n\t\t\tconst user = this.getLoggedInUser();\n\n\t\t\tif (typeof body.command !== 'string') {\n\t\t\t\treturn API.v1.failure('You must provide a command to run the preview item on.');\n\t\t\t}\n\n\t\t\tif (body.params && typeof body.params !== 'string') {\n\t\t\t\treturn API.v1.failure('The parameters for the command must be a single string.');\n\t\t\t}\n\n\t\t\tif (typeof body.roomId !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The room's id where the preview is being executed in must be provided and be a string.\");\n\t\t\t}\n\n\t\t\tif (typeof body.previewItem === 'undefined') {\n\t\t\t\treturn API.v1.failure('The preview item being executed must be provided.');\n\t\t\t}\n\n\t\t\tif (!body.previewItem.id || !body.previewItem.type || typeof body.previewItem.value === 'undefined') {\n\t\t\t\treturn API.v1.failure('The preview item being executed is in the wrong format.');\n\t\t\t}\n\n\t\t\tif (body.tmid && typeof body.tmid !== 'string') {\n\t\t\t\treturn API.v1.failure('The tmid parameter when provided must be a string.');\n\t\t\t}\n\n\t\t\tif (body.triggerId && typeof body.triggerId !== 'string') {\n\t\t\t\treturn API.v1.failure('The triggerId parameter when provided must be a string.');\n\t\t\t}\n\n\t\t\tconst cmd = body.command.toLowerCase();\n\t\t\tif (!slashCommands.commands[cmd]) {\n\t\t\t\treturn API.v1.failure('The command provided does not exist (or is disabled).');\n\t\t\t}\n\n\t\t\tif (!canAccessRoom({ _id: body.roomId }, user)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst params = body.params ? body.params : '';\n\t\t\tconst message = {\n\t\t\t\trid: body.roomId,\n\t\t\t};\n\n\t\t\tif (body.tmid) {\n\t\t\t\tconst thread = Messages.findOneById(body.tmid);\n\t\t\t\tif (!thread || thread.rid !== body.roomId) {\n\t\t\t\t\treturn API.v1.failure('Invalid thread.');\n\t\t\t\t}\n\t\t\t\tmessage.tmid = body.tmid;\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(user._id, () => {\n\t\t\t\tMeteor.call(\n\t\t\t\t\t'executeSlashCommandPreview',\n\t\t\t\t\t{\n\t\t\t\t\t\tcmd,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tmsg: { rid: body.roomId, tmid: body.tmid },\n\t\t\t\t\t},\n\t\t\t\t\tbody.previewItem,\n\t\t\t\t\tbody.triggerId,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"55d11d08621128d361dd77c283bb9de488cd780a"}
