{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/ui-utils/client/lib/RoomManager.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-utils/client/lib/RoomManager.js"}},"code":"module.export({\n  RoomManager: () => RoomManager\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n\n}, 1);\nlet Session;\nmodule.link(\"meteor/session\", {\n  Session(v) {\n    Session = v;\n  }\n\n}, 2);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 3);\nlet Blaze;\nmodule.link(\"meteor/blaze\", {\n  Blaze(v) {\n    Blaze = v;\n  }\n\n}, 4);\nlet FlowRouter;\nmodule.link(\"meteor/kadira:flow-router\", {\n  FlowRouter(v) {\n    FlowRouter = v;\n  }\n\n}, 5);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 6);\nlet fireGlobalEvent;\nmodule.link(\"../../../../client/lib/utils/fireGlobalEvent\", {\n  fireGlobalEvent(v) {\n    fireGlobalEvent = v;\n  }\n\n}, 7);\nlet upsertMessage, RoomHistoryManager;\nmodule.link(\"./RoomHistoryManager\", {\n  upsertMessage(v) {\n    upsertMessage = v;\n  },\n\n  RoomHistoryManager(v) {\n    RoomHistoryManager = v;\n  }\n\n}, 8);\nlet mainReady;\nmodule.link(\"./mainReady\", {\n  mainReady(v) {\n    mainReady = v;\n  }\n\n}, 9);\nlet menu;\nmodule.link(\"./menu\", {\n  menu(v) {\n    menu = v;\n  }\n\n}, 10);\nlet roomTypes;\nmodule.link(\"../../../utils\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 11);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 12);\nlet Notifications;\nmodule.link(\"../../../notifications\", {\n  Notifications(v) {\n    Notifications = v;\n  }\n\n}, 13);\nlet CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription, ChatRoom;\nmodule.link(\"../../../models\", {\n  CachedChatRoom(v) {\n    CachedChatRoom = v;\n  },\n\n  ChatMessage(v) {\n    ChatMessage = v;\n  },\n\n  ChatSubscription(v) {\n    ChatSubscription = v;\n  },\n\n  CachedChatSubscription(v) {\n    CachedChatSubscription = v;\n  },\n\n  ChatRoom(v) {\n    ChatRoom = v;\n  }\n\n}, 14);\nlet CachedCollectionManager;\nmodule.link(\"../../../ui-cached-collection\", {\n  CachedCollectionManager(v) {\n    CachedCollectionManager = v;\n  }\n\n}, 15);\nlet getConfig;\nmodule.link(\"../../../../client/lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n\n}, 16);\nlet ROOM_DATA_STREAM;\nmodule.link(\"../../../utils/stream/constants\", {\n  ROOM_DATA_STREAM(v) {\n    ROOM_DATA_STREAM = v;\n  }\n\n}, 17);\nlet callWithErrorHandling;\nmodule.link(\"../../../../client/lib/utils/callWithErrorHandling\", {\n  callWithErrorHandling(v) {\n    callWithErrorHandling = v;\n  }\n\n}, 18);\nlet NewRoomManager;\nmodule.link(\"../../../../client/lib/RoomManager\", {\n  RoomManager(v) {\n    NewRoomManager = v;\n  }\n\n}, 19);\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen')) || 5;\n\nconst onDeleteMessageStream = msg => {\n  ChatMessage.remove({\n    _id: msg._id\n  }); // remove thread refenrece from deleted message\n\n  ChatMessage.update({\n    tmid: msg._id\n  }, {\n    $unset: {\n      tmid: 1\n    }\n  }, {\n    multi: true\n  });\n};\n\nconst onDeleteMessageBulkStream = _ref => {\n  let {\n    rid,\n    ts,\n    excludePinned,\n    ignoreDiscussion,\n    users\n  } = _ref;\n  const query = {\n    rid,\n    ts\n  };\n\n  if (excludePinned) {\n    query.pinned = {\n      $ne: true\n    };\n  }\n\n  if (ignoreDiscussion) {\n    query.drid = {\n      $exists: false\n    };\n  }\n\n  if (users && users.length) {\n    query['u.username'] = {\n      $in: users\n    };\n  }\n\n  ChatMessage.remove(query);\n};\n\nconst RoomManager = new function () {\n  const openedRooms = {};\n  const msgStream = new Meteor.Streamer('room-messages');\n  const roomStream = new Meteor.Streamer(ROOM_DATA_STREAM);\n  const onlineUsers = new ReactiveVar({});\n  const Dep = new Tracker.Dependency();\n\n  const handleTrackSettingsChange = msg => {\n    const openedRoom = Tracker.nonreactive(() => Session.get('openedRoom'));\n\n    if (openedRoom !== msg.rid) {\n      return;\n    }\n\n    Tracker.nonreactive(() => {\n      if (msg.t === 'room_changed_privacy') {\n        const type = FlowRouter.current().route.name === 'channel' ? 'c' : 'p';\n        RoomManager.close(type + FlowRouter.getParam('name'));\n        const subscription = ChatSubscription.findOne({\n          rid: msg.rid\n        });\n        const route = subscription.t === 'c' ? 'channel' : 'group';\n        FlowRouter.go(route, {\n          name: subscription.name\n        }, FlowRouter.current().queryParams);\n      }\n\n      if (msg.t === 'r') {\n        const room = ChatRoom.findOne(msg.rid);\n\n        if (room.name !== FlowRouter.getParam('name')) {\n          RoomManager.close(room.t + FlowRouter.getParam('name'));\n          roomTypes.openRouteLink(room.t, room, FlowRouter.current().queryParams);\n        }\n      }\n    });\n  };\n\n  const Cls = class {\n    static initClass() {\n      this.prototype.openedRooms = openedRooms;\n      this.prototype.onlineUsers = onlineUsers;\n      this.prototype.roomStream = roomStream;\n      this.prototype.computation = Tracker.autorun(() => {\n        const ready = CachedChatRoom.ready.get() && mainReady.get();\n\n        if (ready !== true) {\n          return;\n        }\n\n        const user = Meteor.user();\n        Tracker.nonreactive(() => Object.entries(openedRooms).forEach(_ref2 => {\n          let [typeName, record] = _ref2;\n\n          if (record.active !== true || record.ready === true) {\n            return;\n          }\n\n          const type = typeName.substr(0, 1);\n          const name = typeName.substr(1);\n          const room = roomTypes.findRoom(type, name, user);\n\n          if (room != null) {\n            record.rid = room._id;\n            RoomHistoryManager.getMoreIfIsEmpty(room._id);\n\n            if (record.streamActive !== true) {\n              record.streamActive = true;\n              msgStream.on(record.rid, async msg => {\n                // Should not send message to room if room has not loaded all the current messages\n                if (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n                  return;\n                } // Do not load command messages into channel\n\n\n                if (msg.t !== 'command') {\n                  const subscription = ChatSubscription.findOne({\n                    rid: record.rid\n                  }, {\n                    reactive: false\n                  });\n                  const isNew = !ChatMessage.findOne({\n                    _id: msg._id,\n                    temp: {\n                      $ne: true\n                    }\n                  });\n                  upsertMessage({\n                    msg,\n                    subscription\n                  });\n                  msg.room = {\n                    type,\n                    name\n                  };\n\n                  if (isNew) {\n                    menu.updateUnreadBars();\n                    callbacks.run('streamNewMessage', msg);\n                  }\n                }\n\n                msg.name = room.name;\n                Tracker.afterFlush(() => RoomManager.updateMentionsMarksOfRoom(typeName));\n                handleTrackSettingsChange(msg);\n                callbacks.run('streamMessage', msg);\n                return fireGlobalEvent('new-message', msg);\n              });\n              Notifications.onRoom(record.rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\n              Notifications.onRoom(record.rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n            }\n          }\n\n          record.ready = true;\n        }));\n        Dep.changed();\n      });\n    }\n\n    getOpenedRoomByRid(rid) {\n      return Object.keys(openedRooms).map(typeName => openedRooms[typeName]).find(openedRoom => openedRoom.rid === rid);\n    }\n\n    close(typeName) {\n      if (openedRooms[typeName]) {\n        if (openedRooms[typeName].rid != null) {\n          msgStream.removeAllListeners(openedRooms[typeName].rid);\n          Notifications.unRoom(openedRooms[typeName].rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\n          Notifications.unRoom(openedRooms[typeName].rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n        }\n\n        openedRooms[typeName].ready = false;\n        openedRooms[typeName].active = false;\n\n        if (openedRooms[typeName].template != null) {\n          try {\n            Blaze.remove(openedRooms[typeName].template);\n          } catch (e) {\n            console.error('Error removing template from DOM', e);\n          }\n        }\n\n        delete openedRooms[typeName].dom;\n        delete openedRooms[typeName].template;\n        const {\n          rid\n        } = openedRooms[typeName];\n        delete openedRooms[typeName];\n\n        if (rid != null) {\n          NewRoomManager.close(rid);\n          return RoomHistoryManager.clear(rid);\n        }\n      }\n    }\n\n    closeOlderRooms() {\n      if (Object.keys(openedRooms).length <= maxRoomsOpen) {\n        return;\n      }\n\n      const roomsToClose = _.sortBy(_.values(openedRooms), 'lastSeen').reverse().slice(maxRoomsOpen);\n\n      return Array.from(roomsToClose).map(roomToClose => this.close(roomToClose.typeName));\n    }\n\n    closeAllRooms() {\n      Object.keys(openedRooms).forEach(key => {\n        const openedRoom = openedRooms[key];\n        this.close(openedRoom.typeName);\n      });\n      Session.set('openedRoom');\n    }\n\n    open(typeName) {\n      if (openedRooms[typeName] == null) {\n        openedRooms[typeName] = {\n          typeName,\n          active: false,\n          ready: false,\n          unreadSince: new ReactiveVar(undefined)\n        };\n      }\n\n      openedRooms[typeName].lastSeen = new Date();\n\n      if (openedRooms[typeName].ready) {\n        this.closeOlderRooms();\n      }\n\n      if (CachedChatSubscription.ready.get() === true) {\n        if (openedRooms[typeName].active !== true) {\n          openedRooms[typeName].active = true;\n\n          if (this.computation) {\n            this.computation.invalidate();\n          }\n        }\n      }\n\n      return {\n        ready() {\n          Dep.depend();\n          return openedRooms[typeName].ready;\n        }\n\n      };\n    }\n\n    existsDomOfRoom(typeName) {\n      const room = openedRooms[typeName];\n      return (room != null ? room.dom : undefined) != null;\n    }\n\n    updateUserStatus(user, status, utcOffset) {\n      const onlineUsersValue = onlineUsers.curValue;\n\n      if (status === 'offline') {\n        delete onlineUsersValue[user.username];\n      } else {\n        onlineUsersValue[user.username] = {\n          _id: user._id,\n          status,\n          utcOffset\n        };\n      }\n\n      return onlineUsers.set(onlineUsersValue);\n    }\n\n    updateMentionsMarksOfRoom() {// const [ticksBar] = dom.getElementsByClassName('ticks-bar');\n      // const [messagesBox] = dom.getElementsByClassName('messages-box');\n      // const scrollTop = $('> .wrapper', messagesBox).scrollTop() - 50;\n      // const totalHeight = $(' > .wrapper > ul', messagesBox).height() + 40;\n      // if (!ticksBar) {\n      // \treturn;\n      // }\n      // // TODO: thread quotes should NOT have mention links at all\n      // const mentionsSelector = '.message .body .mention-link--me, .message .body .mention-link--group';\n      // ticksBar.innerHTML = Array.from(messagesBox?.querySelectorAll(mentionsSelector) || [])\n      // \t.map((mentionLink) => {\n      // \t\tconst topOffset = $(mentionLink).offset().top + scrollTop;\n      // \t\tconst percent = (100 / totalHeight) * topOffset;\n      // \t\tconst className = [\n      // \t\t\t'tick',\n      // \t\t\tmentionLink.classList.contains('mention-link--me') && 'tick--me',\n      // \t\t\tmentionLink.classList.contains('mention-link--group') && 'tick--group',\n      // \t\t].filter(Boolean).join(' ');\n      // \t\treturn `<div class=\"${ className }\" style=\"top: ${ percent }%;\"></div>`;\n      // \t})\n      // \t.join('');\n    }\n\n  };\n  Cls.initClass();\n  return new Cls();\n}();\n\nconst loadMissedMessages = async function (rid) {\n  const lastMessage = ChatMessage.findOne({\n    rid,\n    _hidden: {\n      $ne: true\n    },\n    temp: {\n      $exists: false\n    }\n  }, {\n    sort: {\n      ts: -1\n    },\n    limit: 1\n  });\n\n  if (lastMessage == null) {\n    return;\n  }\n\n  try {\n    const result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\n    if (result) {\n      const subscription = ChatSubscription.findOne({\n        rid\n      });\n      return Promise.all(Array.from(result).map(msg => upsertMessage({\n        msg,\n        subscription\n      })));\n    }\n\n    return [];\n  } catch (error) {\n    return [];\n  }\n};\n\nlet connectionWasOnline = true;\nTracker.autorun(function () {\n  const {\n    connected\n  } = Meteor.connection.status();\n\n  if (connected === true && connectionWasOnline === false && RoomManager.openedRooms != null) {\n    Object.keys(RoomManager.openedRooms).forEach(key => {\n      const value = RoomManager.openedRooms[key];\n\n      if (value.rid != null) {\n        loadMissedMessages(value.rid);\n      }\n    });\n  }\n\n  connectionWasOnline = connected;\n});\nMeteor.startup(() => {\n  // Reload rooms after login\n  let currentUsername = undefined;\n  Tracker.autorun(() => {\n    const user = Meteor.user();\n\n    if (currentUsername === undefined && (user != null ? user.username : undefined) != null) {\n      currentUsername = user.username;\n      RoomManager.closeAllRooms();\n      const {\n        roomTypes: types\n      } = roomTypes; // Reload only if the current route is a channel route\n\n      const roomType = Object.keys(types).find(key => types[key].route && types[key].route.name === FlowRouter.current().route.name);\n\n      if (roomType) {\n        FlowRouter.reload();\n      }\n    }\n  });\n  ChatMessage.find().observe({\n    removed(record) {\n      if (RoomManager.getOpenedRoomByRid(record.rid) != null) {\n        const recordBefore = ChatMessage.findOne({\n          ts: {\n            $lt: record.ts\n          }\n        }, {\n          sort: {\n            ts: -1\n          }\n        });\n\n        if (recordBefore != null) {\n          ChatMessage.update({\n            _id: recordBefore._id\n          }, {\n            $set: {\n              tick: new Date()\n            }\n          });\n        }\n\n        const recordAfter = ChatMessage.findOne({\n          ts: {\n            $gt: record.ts\n          }\n        }, {\n          sort: {\n            ts: 1\n          }\n        });\n\n        if (recordAfter != null) {\n          return ChatMessage.update({\n            _id: recordAfter._id\n          }, {\n            $set: {\n              tick: new Date()\n            }\n          });\n        }\n      }\n    }\n\n  });\n});\nTracker.autorun(function () {\n  if (Meteor.userId()) {\n    return Notifications.onUser('message', function (msg) {\n      msg.u = msg.u || {\n        username: 'rocket.cat'\n      };\n      msg.private = true;\n      return ChatMessage.upsert({\n        _id: msg._id\n      }, msg);\n    });\n  }\n});\ncallbacks.add('afterLogoutCleanUp', () => RoomManager.closeAllRooms(), callbacks.priority.MEDIUM, 'roommanager-after-logout-cleanup');\nCachedCollectionManager.onLogin(() => {\n  Notifications.onUser('subscriptions-changed', (action, sub) => {\n    const ignored = sub && sub.ignored ? {\n      $nin: sub.ignored\n    } : {\n      $exists: true\n    };\n    ChatMessage.update({\n      rid: sub.rid,\n      ignored\n    }, {\n      $unset: {\n        ignored: true\n      }\n    }, {\n      multi: true\n    });\n\n    if (sub && sub.ignored) {\n      ChatMessage.update({\n        'rid': sub.rid,\n        't': {\n          $ne: 'command'\n        },\n        'u._id': {\n          $in: sub.ignored\n        }\n      }, {\n        $set: {\n          ignored: true\n        }\n      }, {\n        multi: true\n      });\n    }\n  });\n});","map":{"version":3,"sources":["app/ui-utils/client/lib/RoomManager.js"],"names":["module","export","RoomManager","Meteor","link","v","ReactiveVar","Session","Tracker","Blaze","FlowRouter","_","default","fireGlobalEvent","upsertMessage","RoomHistoryManager","mainReady","menu","roomTypes","callbacks","Notifications","CachedChatRoom","ChatMessage","ChatSubscription","CachedChatSubscription","ChatRoom","CachedCollectionManager","getConfig","ROOM_DATA_STREAM","callWithErrorHandling","NewRoomManager","maxRoomsOpen","parseInt","onDeleteMessageStream","msg","remove","_id","update","tmid","$unset","multi","onDeleteMessageBulkStream","rid","ts","excludePinned","ignoreDiscussion","users","query","pinned","$ne","drid","$exists","length","$in","openedRooms","msgStream","Streamer","roomStream","onlineUsers","Dep","Dependency","handleTrackSettingsChange","openedRoom","nonreactive","get","t","type","current","route","name","close","getParam","subscription","findOne","go","queryParams","room","openRouteLink","Cls","initClass","prototype","computation","autorun","ready","user","Object","entries","forEach","typeName","record","active","substr","findRoom","getMoreIfIsEmpty","streamActive","on","hasMoreNext","reactive","isNew","temp","updateUnreadBars","run","afterFlush","updateMentionsMarksOfRoom","onRoom","changed","getOpenedRoomByRid","keys","map","find","removeAllListeners","unRoom","template","e","console","error","dom","clear","closeOlderRooms","roomsToClose","sortBy","values","reverse","slice","Array","from","roomToClose","closeAllRooms","key","set","open","unreadSince","undefined","lastSeen","Date","invalidate","depend","existsDomOfRoom","updateUserStatus","status","utcOffset","onlineUsersValue","curValue","username","loadMissedMessages","lastMessage","_hidden","sort","limit","result","Promise","all","connectionWasOnline","connected","connection","value","startup","currentUsername","types","roomType","reload","observe","removed","recordBefore","$lt","$set","tick","recordAfter","$gt","userId","onUser","u","private","upsert","add","priority","MEDIUM","onLogin","action","sub","ignored","$nin"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Session } from 'meteor/session';\nimport { Tracker } from 'meteor/tracker';\nimport { Blaze } from 'meteor/blaze';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport _ from 'underscore';\n\nimport { fireGlobalEvent } from '../../../../client/lib/utils/fireGlobalEvent';\nimport { upsertMessage, RoomHistoryManager } from './RoomHistoryManager';\nimport { mainReady } from './mainReady';\nimport { menu } from './menu';\nimport { roomTypes } from '../../../utils';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Notifications } from '../../../notifications';\nimport { CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription, ChatRoom } from '../../../models';\nimport { CachedCollectionManager } from '../../../ui-cached-collection';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { ROOM_DATA_STREAM } from '../../../utils/stream/constants';\nimport { callWithErrorHandling } from '../../../../client/lib/utils/callWithErrorHandling';\nimport { RoomManager as NewRoomManager } from '../../../../client/lib/RoomManager';\n\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen')) || 5;\n\nconst onDeleteMessageStream = (msg) => {\n\tChatMessage.remove({ _id: msg._id });\n\n\t// remove thread refenrece from deleted message\n\tChatMessage.update({ tmid: msg._id }, { $unset: { tmid: 1 } }, { multi: true });\n};\nconst onDeleteMessageBulkStream = ({ rid, ts, excludePinned, ignoreDiscussion, users }) => {\n\tconst query = { rid, ts };\n\tif (excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\tif (ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (users && users.length) {\n\t\tquery['u.username'] = { $in: users };\n\t}\n\tChatMessage.remove(query);\n};\n\nexport const RoomManager = new (function () {\n\tconst openedRooms = {};\n\tconst msgStream = new Meteor.Streamer('room-messages');\n\tconst roomStream = new Meteor.Streamer(ROOM_DATA_STREAM);\n\tconst onlineUsers = new ReactiveVar({});\n\tconst Dep = new Tracker.Dependency();\n\n\tconst handleTrackSettingsChange = (msg) => {\n\t\tconst openedRoom = Tracker.nonreactive(() => Session.get('openedRoom'));\n\t\tif (openedRoom !== msg.rid) {\n\t\t\treturn;\n\t\t}\n\n\t\tTracker.nonreactive(() => {\n\t\t\tif (msg.t === 'room_changed_privacy') {\n\t\t\t\tconst type = FlowRouter.current().route.name === 'channel' ? 'c' : 'p';\n\t\t\t\tRoomManager.close(type + FlowRouter.getParam('name'));\n\n\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: msg.rid });\n\t\t\t\tconst route = subscription.t === 'c' ? 'channel' : 'group';\n\t\t\t\tFlowRouter.go(route, { name: subscription.name }, FlowRouter.current().queryParams);\n\t\t\t}\n\n\t\t\tif (msg.t === 'r') {\n\t\t\t\tconst room = ChatRoom.findOne(msg.rid);\n\t\t\t\tif (room.name !== FlowRouter.getParam('name')) {\n\t\t\t\t\tRoomManager.close(room.t + FlowRouter.getParam('name'));\n\t\t\t\t\troomTypes.openRouteLink(room.t, room, FlowRouter.current().queryParams);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconst Cls = class {\n\t\tstatic initClass() {\n\t\t\tthis.prototype.openedRooms = openedRooms;\n\t\t\tthis.prototype.onlineUsers = onlineUsers;\n\t\t\tthis.prototype.roomStream = roomStream;\n\t\t\tthis.prototype.computation = Tracker.autorun(() => {\n\t\t\t\tconst ready = CachedChatRoom.ready.get() && mainReady.get();\n\t\t\t\tif (ready !== true) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst user = Meteor.user();\n\t\t\t\tTracker.nonreactive(() =>\n\t\t\t\t\tObject.entries(openedRooms).forEach(([typeName, record]) => {\n\t\t\t\t\t\tif (record.active !== true || record.ready === true) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst type = typeName.substr(0, 1);\n\t\t\t\t\t\tconst name = typeName.substr(1);\n\n\t\t\t\t\t\tconst room = roomTypes.findRoom(type, name, user);\n\n\t\t\t\t\t\tif (room != null) {\n\t\t\t\t\t\t\trecord.rid = room._id;\n\t\t\t\t\t\t\tRoomHistoryManager.getMoreIfIsEmpty(room._id);\n\t\t\t\t\t\t\tif (record.streamActive !== true) {\n\t\t\t\t\t\t\t\trecord.streamActive = true;\n\t\t\t\t\t\t\t\tmsgStream.on(record.rid, async (msg) => {\n\t\t\t\t\t\t\t\t\t// Should not send message to room if room has not loaded all the current messages\n\t\t\t\t\t\t\t\t\tif (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Do not load command messages into channel\n\t\t\t\t\t\t\t\t\tif (msg.t !== 'command') {\n\t\t\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\t\t\tconst isNew = !ChatMessage.findOne({ _id: msg._id, temp: { $ne: true } });\n\t\t\t\t\t\t\t\t\t\tupsertMessage({ msg, subscription });\n\n\t\t\t\t\t\t\t\t\t\tmsg.room = {\n\t\t\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tif (isNew) {\n\t\t\t\t\t\t\t\t\t\t\tmenu.updateUnreadBars();\n\t\t\t\t\t\t\t\t\t\t\tcallbacks.run('streamNewMessage', msg);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmsg.name = room.name;\n\t\t\t\t\t\t\t\t\tTracker.afterFlush(() => RoomManager.updateMentionsMarksOfRoom(typeName));\n\n\t\t\t\t\t\t\t\t\thandleTrackSettingsChange(msg);\n\n\t\t\t\t\t\t\t\t\tcallbacks.run('streamMessage', msg);\n\n\t\t\t\t\t\t\t\t\treturn fireGlobalEvent('new-message', msg);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tNotifications.onRoom(record.rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\t\t\t\tNotifications.onRoom(record.rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trecord.ready = true;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tDep.changed();\n\t\t\t});\n\t\t}\n\n\t\tgetOpenedRoomByRid(rid) {\n\t\t\treturn Object.keys(openedRooms)\n\t\t\t\t.map((typeName) => openedRooms[typeName])\n\t\t\t\t.find((openedRoom) => openedRoom.rid === rid);\n\t\t}\n\n\t\tclose(typeName) {\n\t\t\tif (openedRooms[typeName]) {\n\t\t\t\tif (openedRooms[typeName].rid != null) {\n\t\t\t\t\tmsgStream.removeAllListeners(openedRooms[typeName].rid);\n\t\t\t\t\tNotifications.unRoom(openedRooms[typeName].rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\tNotifications.unRoom(openedRooms[typeName].rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n\t\t\t\t}\n\n\t\t\t\topenedRooms[typeName].ready = false;\n\t\t\t\topenedRooms[typeName].active = false;\n\t\t\t\tif (openedRooms[typeName].template != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBlaze.remove(openedRooms[typeName].template);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Error removing template from DOM', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelete openedRooms[typeName].dom;\n\t\t\t\tdelete openedRooms[typeName].template;\n\n\t\t\t\tconst { rid } = openedRooms[typeName];\n\t\t\t\tdelete openedRooms[typeName];\n\n\t\t\t\tif (rid != null) {\n\t\t\t\t\tNewRoomManager.close(rid);\n\t\t\t\t\treturn RoomHistoryManager.clear(rid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcloseOlderRooms() {\n\t\t\tif (Object.keys(openedRooms).length <= maxRoomsOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roomsToClose = _.sortBy(_.values(openedRooms), 'lastSeen').reverse().slice(maxRoomsOpen);\n\t\t\treturn Array.from(roomsToClose).map((roomToClose) => this.close(roomToClose.typeName));\n\t\t}\n\n\t\tcloseAllRooms() {\n\t\t\tObject.keys(openedRooms).forEach((key) => {\n\t\t\t\tconst openedRoom = openedRooms[key];\n\t\t\t\tthis.close(openedRoom.typeName);\n\t\t\t});\n\t\t\tSession.set('openedRoom');\n\t\t}\n\n\t\topen(typeName) {\n\t\t\tif (openedRooms[typeName] == null) {\n\t\t\t\topenedRooms[typeName] = {\n\t\t\t\t\ttypeName,\n\t\t\t\t\tactive: false,\n\t\t\t\t\tready: false,\n\t\t\t\t\tunreadSince: new ReactiveVar(undefined),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\topenedRooms[typeName].lastSeen = new Date();\n\n\t\t\tif (openedRooms[typeName].ready) {\n\t\t\t\tthis.closeOlderRooms();\n\t\t\t}\n\n\t\t\tif (CachedChatSubscription.ready.get() === true) {\n\t\t\t\tif (openedRooms[typeName].active !== true) {\n\t\t\t\t\topenedRooms[typeName].active = true;\n\t\t\t\t\tif (this.computation) {\n\t\t\t\t\t\tthis.computation.invalidate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tready() {\n\t\t\t\t\tDep.depend();\n\t\t\t\t\treturn openedRooms[typeName].ready;\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\texistsDomOfRoom(typeName) {\n\t\t\tconst room = openedRooms[typeName];\n\t\t\treturn (room != null ? room.dom : undefined) != null;\n\t\t}\n\n\t\tupdateUserStatus(user, status, utcOffset) {\n\t\t\tconst onlineUsersValue = onlineUsers.curValue;\n\n\t\t\tif (status === 'offline') {\n\t\t\t\tdelete onlineUsersValue[user.username];\n\t\t\t} else {\n\t\t\t\tonlineUsersValue[user.username] = {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tstatus,\n\t\t\t\t\tutcOffset,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn onlineUsers.set(onlineUsersValue);\n\t\t}\n\n\t\tupdateMentionsMarksOfRoom(/* typeName */) {\n\t\t\t// const [ticksBar] = dom.getElementsByClassName('ticks-bar');\n\t\t\t// const [messagesBox] = dom.getElementsByClassName('messages-box');\n\t\t\t// const scrollTop = $('> .wrapper', messagesBox).scrollTop() - 50;\n\t\t\t// const totalHeight = $(' > .wrapper > ul', messagesBox).height() + 40;\n\t\t\t// if (!ticksBar) {\n\t\t\t// \treturn;\n\t\t\t// }\n\t\t\t// // TODO: thread quotes should NOT have mention links at all\n\t\t\t// const mentionsSelector = '.message .body .mention-link--me, .message .body .mention-link--group';\n\t\t\t// ticksBar.innerHTML = Array.from(messagesBox?.querySelectorAll(mentionsSelector) || [])\n\t\t\t// \t.map((mentionLink) => {\n\t\t\t// \t\tconst topOffset = $(mentionLink).offset().top + scrollTop;\n\t\t\t// \t\tconst percent = (100 / totalHeight) * topOffset;\n\t\t\t// \t\tconst className = [\n\t\t\t// \t\t\t'tick',\n\t\t\t// \t\t\tmentionLink.classList.contains('mention-link--me') && 'tick--me',\n\t\t\t// \t\t\tmentionLink.classList.contains('mention-link--group') && 'tick--group',\n\t\t\t// \t\t].filter(Boolean).join(' ');\n\t\t\t// \t\treturn `<div class=\"${ className }\" style=\"top: ${ percent }%;\"></div>`;\n\t\t\t// \t})\n\t\t\t// \t.join('');\n\t\t}\n\t};\n\tCls.initClass();\n\treturn new Cls();\n})();\n\nconst loadMissedMessages = async function (rid) {\n\tconst lastMessage = ChatMessage.findOne({ rid, _hidden: { $ne: true }, temp: { $exists: false } }, { sort: { ts: -1 }, limit: 1 });\n\n\tif (lastMessage == null) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tif (result) {\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\treturn Promise.all(Array.from(result).map((msg) => upsertMessage({ msg, subscription })));\n\t\t}\n\t\treturn [];\n\t} catch (error) {\n\t\treturn [];\n\t}\n};\n\nlet connectionWasOnline = true;\nTracker.autorun(function () {\n\tconst { connected } = Meteor.connection.status();\n\n\tif (connected === true && connectionWasOnline === false && RoomManager.openedRooms != null) {\n\t\tObject.keys(RoomManager.openedRooms).forEach((key) => {\n\t\t\tconst value = RoomManager.openedRooms[key];\n\t\t\tif (value.rid != null) {\n\t\t\t\tloadMissedMessages(value.rid);\n\t\t\t}\n\t\t});\n\t}\n\tconnectionWasOnline = connected;\n});\n\nMeteor.startup(() => {\n\t// Reload rooms after login\n\tlet currentUsername = undefined;\n\tTracker.autorun(() => {\n\t\tconst user = Meteor.user();\n\t\tif (currentUsername === undefined && (user != null ? user.username : undefined) != null) {\n\t\t\tcurrentUsername = user.username;\n\t\t\tRoomManager.closeAllRooms();\n\t\t\tconst { roomTypes: types } = roomTypes;\n\n\t\t\t// Reload only if the current route is a channel route\n\t\t\tconst roomType = Object.keys(types).find((key) => types[key].route && types[key].route.name === FlowRouter.current().route.name);\n\t\t\tif (roomType) {\n\t\t\t\tFlowRouter.reload();\n\t\t\t}\n\t\t}\n\t});\n\n\tChatMessage.find().observe({\n\t\tremoved(record) {\n\t\t\tif (RoomManager.getOpenedRoomByRid(record.rid) != null) {\n\t\t\t\tconst recordBefore = ChatMessage.findOne({ ts: { $lt: record.ts } }, { sort: { ts: -1 } });\n\t\t\t\tif (recordBefore != null) {\n\t\t\t\t\tChatMessage.update({ _id: recordBefore._id }, { $set: { tick: new Date() } });\n\t\t\t\t}\n\n\t\t\t\tconst recordAfter = ChatMessage.findOne({ ts: { $gt: record.ts } }, { sort: { ts: 1 } });\n\t\t\t\tif (recordAfter != null) {\n\t\t\t\t\treturn ChatMessage.update({ _id: recordAfter._id }, { $set: { tick: new Date() } });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n});\n\nTracker.autorun(function () {\n\tif (Meteor.userId()) {\n\t\treturn Notifications.onUser('message', function (msg) {\n\t\t\tmsg.u = msg.u || { username: 'rocket.cat' };\n\t\t\tmsg.private = true;\n\n\t\t\treturn ChatMessage.upsert({ _id: msg._id }, msg);\n\t\t});\n\t}\n});\n\ncallbacks.add('afterLogoutCleanUp', () => RoomManager.closeAllRooms(), callbacks.priority.MEDIUM, 'roommanager-after-logout-cleanup');\n\nCachedCollectionManager.onLogin(() => {\n\tNotifications.onUser('subscriptions-changed', (action, sub) => {\n\t\tconst ignored = sub && sub.ignored ? { $nin: sub.ignored } : { $exists: true };\n\n\t\tChatMessage.update({ rid: sub.rid, ignored }, { $unset: { ignored: true } }, { multi: true });\n\t\tif (sub && sub.ignored) {\n\t\t\tChatMessage.update(\n\t\t\t\t{ 'rid': sub.rid, 't': { $ne: 'command' }, 'u._id': { $in: sub.ignored } },\n\t\t\t\t{ $set: { ignored: true } },\n\t\t\t\t{ multi: true },\n\t\t\t);\n\t\t}\n\t});\n});\n"]},"sourceType":"module","hash":"a071ec16c35043be1d16ca14a00a225e91c0c940"}
