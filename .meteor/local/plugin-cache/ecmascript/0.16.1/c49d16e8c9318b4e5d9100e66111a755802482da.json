{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImporterBase.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/ImporterBase.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImporterBase.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer/server/classes/ImporterBase.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/ImporterBase.js"}},"code":"module.export({\n  Base: () => Base\n});\nlet http;\nmodule.link(\"http\", {\n  default(v) {\n    http = v;\n  }\n\n}, 0);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 1);\nlet https;\nmodule.link(\"https\", {\n  default(v) {\n    https = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet AdmZip;\nmodule.link(\"adm-zip\", {\n  default(v) {\n    AdmZip = v;\n  }\n\n}, 4);\nlet getFileType;\nmodule.link(\"file-type\", {\n  default(v) {\n    getFileType = v;\n  }\n\n}, 5);\nlet Progress;\nmodule.link(\"./ImporterProgress\", {\n  Progress(v) {\n    Progress = v;\n  }\n\n}, 6);\nlet ImporterWebsocket;\nmodule.link(\"./ImporterWebsocket\", {\n  ImporterWebsocket(v) {\n    ImporterWebsocket = v;\n  }\n\n}, 7);\nlet ProgressStep;\nmodule.link(\"../../lib/ImporterProgressStep\", {\n  ProgressStep(v) {\n    ProgressStep = v;\n  }\n\n}, 8);\nlet ImporterInfo;\nmodule.link(\"../../lib/ImporterInfo\", {\n  ImporterInfo(v) {\n    ImporterInfo = v;\n  }\n\n}, 9);\nlet RawImports;\nmodule.link(\"../models/RawImports\", {\n  RawImports(v) {\n    RawImports = v;\n  }\n\n}, 10);\nlet Settings, Imports;\nmodule.link(\"../../../models\", {\n  Settings(v) {\n    Settings = v;\n  },\n\n  Imports(v) {\n    Imports = v;\n  }\n\n}, 11);\nlet Logger;\nmodule.link(\"../../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 12);\nlet ImportDataConverter;\nmodule.link(\"./ImportDataConverter\", {\n  ImportDataConverter(v) {\n    ImportDataConverter = v;\n  }\n\n}, 13);\nlet ImportData;\nmodule.link(\"../../../models/server\", {\n  ImportData(v) {\n    ImportData = v;\n  }\n\n}, 14);\nlet t;\nmodule.link(\"../../../utils/server\", {\n  t(v) {\n    t = v;\n  }\n\n}, 15);\nlet Selection, SelectionChannel, SelectionUser;\nmodule.link(\"..\", {\n  Selection(v) {\n    Selection = v;\n  },\n\n  SelectionChannel(v) {\n    SelectionChannel = v;\n  },\n\n  SelectionUser(v) {\n    SelectionUser = v;\n  }\n\n}, 16);\n\nclass Base {\n  /**\n   * Constructs a new importer, adding an empty collection, AdmZip property, and empty users & channels\n   *\n   * @param {string} name The importer's name.\n   * @param {string} description The i18n string which describes the importer\n   * @param {string} mimeType The expected file type.\n   */\n  constructor(info, importRecord) {\n    if (!(info instanceof ImporterInfo)) {\n      throw new Error('Information passed in must be a valid ImporterInfo instance.');\n    }\n\n    this.http = http;\n    this.https = https;\n    this.AdmZip = AdmZip;\n    this.getFileType = getFileType;\n    this.converter = new ImportDataConverter();\n    this.prepare = this.prepare.bind(this);\n    this.startImport = this.startImport.bind(this);\n    this.getProgress = this.getProgress.bind(this);\n    this.updateProgress = this.updateProgress.bind(this);\n    this.addCountToTotal = this.addCountToTotal.bind(this);\n    this.addCountCompleted = this.addCountCompleted.bind(this);\n    this.updateRecord = this.updateRecord.bind(this);\n    this.info = info;\n    this.logger = new Logger(\"\".concat(this.info.name, \" Importer\"));\n    this.converter.setLogger(this.logger);\n    this.progress = new Progress(this.info.key, this.info.name);\n    this.collection = RawImports;\n    const userId = Meteor.userId();\n\n    if (importRecord) {\n      this.logger.debug('Found existing import operation');\n      this.importRecord = importRecord;\n      this.progress.step = this.importRecord.status;\n    } else {\n      this.logger.debug('Starting new import operation');\n      const importId = Imports.insert({\n        type: this.info.name,\n        importerKey: this.info.key,\n        ts: Date.now(),\n        status: this.progress.step,\n        valid: true,\n        user: userId\n      });\n      this.importRecord = Imports.findOne(importId);\n    }\n\n    this.users = {};\n    this.channels = {};\n    this.messages = {};\n    this.oldSettings = {};\n    this.logger.debug(\"Constructed a new \".concat(info.name, \" Importer.\"));\n  }\n  /**\n   * Registers the file name and content type on the import operation\n   *\n   * @param {string} fileName The name of the uploaded file.\n   * @param {string} contentType The sent file type.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  startFileUpload(fileName, contentType) {\n    this.updateProgress(ProgressStep.UPLOADING);\n    return this.updateRecord({\n      file: fileName,\n      contentType\n    });\n  }\n  /**\n   * Takes the uploaded file and extracts the users, channels, and messages from it.\n   *\n   * @param {string} fullFilePath the full path of the uploaded file\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  prepareUsingLocalFile(fullFilePath) {\n    const file = fs.readFileSync(fullFilePath);\n    const buffer = Buffer.isBuffer(file) ? file : Buffer.from(file);\n    const {\n      contentType\n    } = this.importRecord;\n    const fileName = this.importRecord.file;\n    const data = buffer.toString('base64');\n    const dataURI = \"data:\".concat(contentType, \";base64,\").concat(data);\n    return this.prepare(dataURI, contentType, fileName, true);\n  }\n  /**\n   * Takes the uploaded file and extracts the users, channels, and messages from it.\n   *\n   * @param {string} dataURI Base64 string of the uploaded file\n   * @param {string} sentContentType The sent file type.\n   * @param {string} fileName The name of the uploaded file.\n   * @param {boolean} skipTypeCheck Optional property that says to not check the type provided.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  prepare(dataURI, sentContentType, fileName, skipTypeCheck) {\n    this.collection.remove({});\n\n    if (!skipTypeCheck) {\n      const fileType = this.getFileType(Buffer.from(dataURI.split(',')[1], 'base64'));\n      this.logger.debug('Uploaded file information is:', fileType);\n      this.logger.debug('Expected file type is:', this.info.mimeType);\n\n      if (!fileType || fileType.mime !== this.info.mimeType) {\n        this.logger.warn(\"Invalid file uploaded for the \".concat(this.info.name, \" importer.\"));\n        this.updateProgress(ProgressStep.ERROR);\n        throw new Meteor.Error('error-invalid-file-uploaded', \"Invalid file uploaded to import \".concat(this.info.name, \" data from.\"), {\n          step: 'prepare'\n        });\n      }\n    }\n\n    this.updateProgress(ProgressStep.PREPARING_STARTED);\n    return this.updateRecord({\n      file: fileName\n    });\n  }\n  /**\n   * Starts the import process. The implementing method should defer\n   * as soon as the selection is set, so the user who started the process\n   * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n   * The returned object should be the progress.\n   *\n   * @param {Selection} importSelection The selection data.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  startImport(importSelection) {\n    if (!(importSelection instanceof Selection)) {\n      throw new Error(\"Invalid Selection data provided to the \".concat(this.info.name, \" importer.\"));\n    } else if (importSelection.users === undefined) {\n      throw new Error(\"Users in the selected data wasn't found, it must but at least an empty array for the \".concat(this.info.name, \" importer.\"));\n    } else if (importSelection.channels === undefined) {\n      throw new Error(\"Channels in the selected data wasn't found, it must but at least an empty array for the \".concat(this.info.name, \" importer.\"));\n    }\n\n    this.updateProgress(ProgressStep.IMPORTING_STARTED);\n    this.reloadCount();\n    const started = Date.now();\n    const startedByUserId = Meteor.userId();\n\n    const beforeImportFn = (data, type) => {\n      switch (type) {\n        case 'channel':\n          {\n            const id = data.t === 'd' ? '__directMessages__' : data.importIds[0];\n\n            for (const channel of importSelection.channels) {\n              if (channel.channel_id === id) {\n                return channel.do_import;\n              }\n            }\n\n            return false;\n          }\n\n        case 'user':\n          {\n            const id = data.importIds[0];\n\n            for (const user of importSelection.users) {\n              if (user.user_id === id) {\n                return user.do_import;\n              }\n            }\n\n            return false;\n          }\n      }\n\n      return true;\n    };\n\n    const afterImportFn = () => {\n      this.addCountCompleted(1);\n    };\n\n    Meteor.defer(() => {\n      try {\n        this.updateProgress(ProgressStep.IMPORTING_USERS);\n        this.converter.convertUsers({\n          beforeImportFn,\n          afterImportFn\n        });\n        this.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n        this.converter.convertChannels(startedByUserId, {\n          beforeImportFn,\n          afterImportFn\n        });\n        this.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n        this.converter.convertMessages({\n          afterImportFn\n        });\n        this.updateProgress(ProgressStep.FINISHING);\n        Meteor.defer(() => {\n          this.converter.clearSuccessfullyImportedData();\n        });\n        this.updateProgress(ProgressStep.DONE);\n      } catch (e) {\n        this.logger.error(e);\n        this.updateProgress(ProgressStep.ERROR);\n      }\n\n      const timeTook = Date.now() - started;\n      this.logger.log(\"Import took \".concat(timeTook, \" milliseconds.\"));\n    });\n    return this.getProgress();\n  }\n  /**\n   * Gets the progress of this import.\n   *\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  getProgress() {\n    return this.progress;\n  }\n  /**\n   * Updates the progress step of this importer.\n   * It also changes some internal settings at various stages of the import.\n   * This way the importer can adjust user/room information at will.\n   *\n   * @param {ProgressStep} step The progress step which this import is currently at.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  updateProgress(step) {\n    this.progress.step = step;\n\n    switch (step) {\n      case ProgressStep.IMPORTING_STARTED:\n        this.oldSettings.Accounts_AllowedDomainsList = Settings.findOneById('Accounts_AllowedDomainsList').value;\n        Settings.updateValueById('Accounts_AllowedDomainsList', '');\n        this.oldSettings.Accounts_AllowUsernameChange = Settings.findOneById('Accounts_AllowUsernameChange').value;\n        Settings.updateValueById('Accounts_AllowUsernameChange', true);\n        this.oldSettings.FileUpload_MaxFileSize = Settings.findOneById('FileUpload_MaxFileSize').value;\n        Settings.updateValueById('FileUpload_MaxFileSize', -1);\n        this.oldSettings.FileUpload_MediaTypeWhiteList = Settings.findOneById('FileUpload_MediaTypeWhiteList').value;\n        Settings.updateValueById('FileUpload_MediaTypeWhiteList', '*');\n        this.oldSettings.FileUpload_MediaTypeBlackList = Settings.findOneById('FileUpload_MediaTypeBlackList').value;\n        Settings.updateValueById('FileUpload_MediaTypeBlackList', '');\n        this.oldSettings.UI_Allow_room_names_with_special_chars = Settings.findOneById('UI_Allow_room_names_with_special_chars').value;\n        Settings.updateValueById('UI_Allow_room_names_with_special_chars', true);\n        break;\n\n      case ProgressStep.DONE:\n      case ProgressStep.ERROR:\n      case ProgressStep.CANCELLED:\n        Settings.updateValueById('Accounts_AllowedDomainsList', this.oldSettings.Accounts_AllowedDomainsList);\n        Settings.updateValueById('Accounts_AllowUsernameChange', this.oldSettings.Accounts_AllowUsernameChange);\n        Settings.updateValueById('FileUpload_MaxFileSize', this.oldSettings.FileUpload_MaxFileSize);\n        Settings.updateValueById('FileUpload_MediaTypeWhiteList', this.oldSettings.FileUpload_MediaTypeWhiteList);\n        Settings.updateValueById('FileUpload_MediaTypeBlackList', this.oldSettings.FileUpload_MediaTypeBlackList);\n        Settings.updateValueById('UI_Allow_room_names_with_special_chars', this.oldSettings.UI_Allow_room_names_with_special_chars);\n        break;\n    }\n\n    this.logger.debug(\"\".concat(this.info.name, \" is now at \").concat(step, \".\"));\n    this.updateRecord({\n      status: this.progress.step\n    });\n    this.reportProgress();\n    return this.progress;\n  }\n\n  reloadCount() {\n    if (!this.importRecord.count) {\n      this.progress.count.total = 0;\n      this.progress.count.completed = 0;\n    }\n\n    this.progress.count.total = this.importRecord.count.total || 0;\n    this.progress.count.completed = this.importRecord.count.completed || 0;\n  }\n  /**\n   * Adds the passed in value to the total amount of items needed to complete.\n   *\n   * @param {number} count The amount to add to the total count of items.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  addCountToTotal(count) {\n    this.progress.count.total += count;\n    this.updateRecord({\n      'count.total': this.progress.count.total\n    });\n    return this.progress;\n  }\n  /**\n   * Adds the passed in value to the total amount of items completed.\n   *\n   * @param {number} count The amount to add to the total count of finished items.\n   * @returns {Progress} The progress record of the import.\n   */\n\n\n  addCountCompleted(count) {\n    this.progress.count.completed += count; // Only update the database every 500 records\n    // Or the completed is greater than or equal to the total amount\n\n    if (this.progress.count.completed % 500 === 0 || this.progress.count.completed >= this.progress.count.total) {\n      this.updateRecord({\n        'count.completed': this.progress.count.completed\n      });\n      this.reportProgress();\n    } else if (!this._reportProgressHandler) {\n      this._reportProgressHandler = setTimeout(() => {\n        this.reportProgress();\n      }, 250);\n    }\n\n    this.logger.log(\"\".concat(this.progress.count.completed, \" messages imported\"));\n    return this.progress;\n  }\n  /**\n   * Sends an updated progress to the websocket\n   */\n\n\n  reportProgress() {\n    if (this._reportProgressHandler) {\n      clearTimeout(this._reportProgressHandler);\n      this._reportProgressHandler = false;\n    }\n\n    ImporterWebsocket.progressUpdated(this.progress);\n  }\n  /**\n   * Registers error information on a specific user from the import record\n   *\n   * @param {int} the user id\n   * @param {object} an exception object\n   */\n\n\n  addUserError(userId, error) {\n    Imports.model.update({\n      '_id': this.importRecord._id,\n      'fileData.users.user_id': userId\n    }, {\n      $set: {\n        'fileData.users.$.error': error,\n        'hasErrors': true\n      }\n    });\n  }\n\n  addMessageError(error, msg) {\n    Imports.model.update({\n      _id: this.importRecord._id\n    }, {\n      $push: {\n        errors: {\n          error,\n          msg\n        }\n      },\n      $set: {\n        hasErrors: true\n      }\n    });\n  }\n  /**\n   * Updates the import record with the given fields being `set`.\n   *\n   * @param {any} fields The fields to set, it should be an object with key/values.\n   * @returns {Imports} The import record.\n   */\n\n\n  updateRecord(fields) {\n    Imports.update({\n      _id: this.importRecord._id\n    }, {\n      $set: fields\n    });\n    this.importRecord = Imports.findOne(this.importRecord._id);\n    return this.importRecord;\n  }\n\n  buildSelection() {\n    this.updateProgress(ProgressStep.USER_SELECTION);\n    const users = ImportData.getAllUsersForSelection();\n    const channels = ImportData.getAllChannelsForSelection();\n    const hasDM = ImportData.checkIfDirectMessagesExists();\n    const selectionUsers = users.map(u => new SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true));\n    const selectionChannels = channels.map(c => new SelectionChannel(c.data.importIds[0], c.data.name, Boolean(c.data.archived), true, c.data.t === 'p', undefined, c.data.t === 'd'));\n    const selectionMessages = ImportData.countMessages();\n\n    if (hasDM) {\n      selectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, undefined, true));\n    }\n\n    const results = new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n    return results;\n  }\n\n}","map":{"version":3,"sources":["app/importer/server/classes/ImporterBase.js"],"names":["module","export","Base","http","link","default","v","fs","https","Meteor","AdmZip","getFileType","Progress","ImporterWebsocket","ProgressStep","ImporterInfo","RawImports","Settings","Imports","Logger","ImportDataConverter","ImportData","t","Selection","SelectionChannel","SelectionUser","constructor","info","importRecord","Error","converter","prepare","bind","startImport","getProgress","updateProgress","addCountToTotal","addCountCompleted","updateRecord","logger","name","setLogger","progress","key","collection","userId","debug","step","status","importId","insert","type","importerKey","ts","Date","now","valid","user","findOne","users","channels","messages","oldSettings","startFileUpload","fileName","contentType","UPLOADING","file","prepareUsingLocalFile","fullFilePath","readFileSync","buffer","Buffer","isBuffer","from","data","toString","dataURI","sentContentType","skipTypeCheck","remove","fileType","split","mimeType","mime","warn","ERROR","PREPARING_STARTED","importSelection","undefined","IMPORTING_STARTED","reloadCount","started","startedByUserId","beforeImportFn","id","importIds","channel","channel_id","do_import","user_id","afterImportFn","defer","IMPORTING_USERS","convertUsers","IMPORTING_CHANNELS","convertChannels","IMPORTING_MESSAGES","convertMessages","FINISHING","clearSuccessfullyImportedData","DONE","e","error","timeTook","log","Accounts_AllowedDomainsList","findOneById","value","updateValueById","Accounts_AllowUsernameChange","FileUpload_MaxFileSize","FileUpload_MediaTypeWhiteList","FileUpload_MediaTypeBlackList","UI_Allow_room_names_with_special_chars","CANCELLED","reportProgress","count","total","completed","_reportProgressHandler","setTimeout","clearTimeout","progressUpdated","addUserError","model","update","_id","$set","addMessageError","msg","$push","errors","hasErrors","fields","buildSelection","USER_SELECTION","getAllUsersForSelection","getAllChannelsForSelection","hasDM","checkIfDirectMessagesExists","selectionUsers","map","u","username","emails","Boolean","deleted","selectionChannels","c","archived","selectionMessages","countMessages","push","results"],"mappings":"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","sourcesContent":["import http from 'http';\nimport fs from 'fs';\nimport https from 'https';\n\nimport { Meteor } from 'meteor/meteor';\nimport AdmZip from 'adm-zip';\nimport getFileType from 'file-type';\n\nimport { Progress } from './ImporterProgress';\nimport { ImporterWebsocket } from './ImporterWebsocket';\nimport { ProgressStep } from '../../lib/ImporterProgressStep';\nimport { ImporterInfo } from '../../lib/ImporterInfo';\nimport { RawImports } from '../models/RawImports';\nimport { Settings, Imports } from '../../../models';\nimport { Logger } from '../../../logger';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport { ImportData } from '../../../models/server';\nimport { t } from '../../../utils/server';\nimport { Selection, SelectionChannel, SelectionUser } from '..';\n\n/**\n * Base class for all of the importers.\n */\nexport class Base {\n\t/**\n\t * Constructs a new importer, adding an empty collection, AdmZip property, and empty users & channels\n\t *\n\t * @param {string} name The importer's name.\n\t * @param {string} description The i18n string which describes the importer\n\t * @param {string} mimeType The expected file type.\n\t */\n\tconstructor(info, importRecord) {\n\t\tif (!(info instanceof ImporterInfo)) {\n\t\t\tthrow new Error('Information passed in must be a valid ImporterInfo instance.');\n\t\t}\n\n\t\tthis.http = http;\n\t\tthis.https = https;\n\t\tthis.AdmZip = AdmZip;\n\t\tthis.getFileType = getFileType;\n\t\tthis.converter = new ImportDataConverter();\n\n\t\tthis.prepare = this.prepare.bind(this);\n\t\tthis.startImport = this.startImport.bind(this);\n\t\tthis.getProgress = this.getProgress.bind(this);\n\t\tthis.updateProgress = this.updateProgress.bind(this);\n\t\tthis.addCountToTotal = this.addCountToTotal.bind(this);\n\t\tthis.addCountCompleted = this.addCountCompleted.bind(this);\n\t\tthis.updateRecord = this.updateRecord.bind(this);\n\n\t\tthis.info = info;\n\n\t\tthis.logger = new Logger(`${this.info.name} Importer`);\n\t\tthis.converter.setLogger(this.logger);\n\n\t\tthis.progress = new Progress(this.info.key, this.info.name);\n\t\tthis.collection = RawImports;\n\n\t\tconst userId = Meteor.userId();\n\n\t\tif (importRecord) {\n\t\t\tthis.logger.debug('Found existing import operation');\n\t\t\tthis.importRecord = importRecord;\n\t\t\tthis.progress.step = this.importRecord.status;\n\t\t} else {\n\t\t\tthis.logger.debug('Starting new import operation');\n\t\t\tconst importId = Imports.insert({\n\t\t\t\ttype: this.info.name,\n\t\t\t\timporterKey: this.info.key,\n\t\t\t\tts: Date.now(),\n\t\t\t\tstatus: this.progress.step,\n\t\t\t\tvalid: true,\n\t\t\t\tuser: userId,\n\t\t\t});\n\t\t\tthis.importRecord = Imports.findOne(importId);\n\t\t}\n\n\t\tthis.users = {};\n\t\tthis.channels = {};\n\t\tthis.messages = {};\n\t\tthis.oldSettings = {};\n\n\t\tthis.logger.debug(`Constructed a new ${info.name} Importer.`);\n\t}\n\n\t/**\n\t * Registers the file name and content type on the import operation\n\t *\n\t * @param {string} fileName The name of the uploaded file.\n\t * @param {string} contentType The sent file type.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tstartFileUpload(fileName, contentType) {\n\t\tthis.updateProgress(ProgressStep.UPLOADING);\n\t\treturn this.updateRecord({ file: fileName, contentType });\n\t}\n\n\t/**\n\t * Takes the uploaded file and extracts the users, channels, and messages from it.\n\t *\n\t * @param {string} fullFilePath the full path of the uploaded file\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tprepareUsingLocalFile(fullFilePath) {\n\t\tconst file = fs.readFileSync(fullFilePath);\n\t\tconst buffer = Buffer.isBuffer(file) ? file : Buffer.from(file);\n\n\t\tconst { contentType } = this.importRecord;\n\t\tconst fileName = this.importRecord.file;\n\n\t\tconst data = buffer.toString('base64');\n\t\tconst dataURI = `data:${contentType};base64,${data}`;\n\n\t\treturn this.prepare(dataURI, contentType, fileName, true);\n\t}\n\n\t/**\n\t * Takes the uploaded file and extracts the users, channels, and messages from it.\n\t *\n\t * @param {string} dataURI Base64 string of the uploaded file\n\t * @param {string} sentContentType The sent file type.\n\t * @param {string} fileName The name of the uploaded file.\n\t * @param {boolean} skipTypeCheck Optional property that says to not check the type provided.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tprepare(dataURI, sentContentType, fileName, skipTypeCheck) {\n\t\tthis.collection.remove({});\n\t\tif (!skipTypeCheck) {\n\t\t\tconst fileType = this.getFileType(Buffer.from(dataURI.split(',')[1], 'base64'));\n\t\t\tthis.logger.debug('Uploaded file information is:', fileType);\n\t\t\tthis.logger.debug('Expected file type is:', this.info.mimeType);\n\n\t\t\tif (!fileType || fileType.mime !== this.info.mimeType) {\n\t\t\t\tthis.logger.warn(`Invalid file uploaded for the ${this.info.name} importer.`);\n\t\t\t\tthis.updateProgress(ProgressStep.ERROR);\n\t\t\t\tthrow new Meteor.Error('error-invalid-file-uploaded', `Invalid file uploaded to import ${this.info.name} data from.`, {\n\t\t\t\t\tstep: 'prepare',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.updateProgress(ProgressStep.PREPARING_STARTED);\n\t\treturn this.updateRecord({ file: fileName });\n\t}\n\n\t/**\n\t * Starts the import process. The implementing method should defer\n\t * as soon as the selection is set, so the user who started the process\n\t * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n\t * The returned object should be the progress.\n\t *\n\t * @param {Selection} importSelection The selection data.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tstartImport(importSelection) {\n\t\tif (!(importSelection instanceof Selection)) {\n\t\t\tthrow new Error(`Invalid Selection data provided to the ${this.info.name} importer.`);\n\t\t} else if (importSelection.users === undefined) {\n\t\t\tthrow new Error(`Users in the selected data wasn't found, it must but at least an empty array for the ${this.info.name} importer.`);\n\t\t} else if (importSelection.channels === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t`Channels in the selected data wasn't found, it must but at least an empty array for the ${this.info.name} importer.`,\n\t\t\t);\n\t\t}\n\n\t\tthis.updateProgress(ProgressStep.IMPORTING_STARTED);\n\t\tthis.reloadCount();\n\t\tconst started = Date.now();\n\t\tconst startedByUserId = Meteor.userId();\n\n\t\tconst beforeImportFn = (data, type) => {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'channel': {\n\t\t\t\t\tconst id = data.t === 'd' ? '__directMessages__' : data.importIds[0];\n\t\t\t\t\tfor (const channel of importSelection.channels) {\n\t\t\t\t\t\tif (channel.channel_id === id) {\n\t\t\t\t\t\t\treturn channel.do_import;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcase 'user': {\n\t\t\t\t\tconst id = data.importIds[0];\n\t\t\t\t\tfor (const user of importSelection.users) {\n\t\t\t\t\t\tif (user.user_id === id) {\n\t\t\t\t\t\t\treturn user.do_import;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\tconst afterImportFn = () => {\n\t\t\tthis.addCountCompleted(1);\n\t\t};\n\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tthis.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tthis.converter.convertUsers({ beforeImportFn, afterImportFn });\n\n\t\t\t\tthis.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.converter.convertChannels(startedByUserId, { beforeImportFn, afterImportFn });\n\n\t\t\t\tthis.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tthis.converter.convertMessages({ afterImportFn });\n\n\t\t\t\tthis.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tMeteor.defer(() => {\n\t\t\t\t\tthis.converter.clearSuccessfullyImportedData();\n\t\t\t\t});\n\n\t\t\t\tthis.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tthis.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`Import took ${timeTook} milliseconds.`);\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\t/**\n\t * Gets the progress of this import.\n\t *\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tgetProgress() {\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Updates the progress step of this importer.\n\t * It also changes some internal settings at various stages of the import.\n\t * This way the importer can adjust user/room information at will.\n\t *\n\t * @param {ProgressStep} step The progress step which this import is currently at.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\tupdateProgress(step) {\n\t\tthis.progress.step = step;\n\n\t\tswitch (step) {\n\t\t\tcase ProgressStep.IMPORTING_STARTED:\n\t\t\t\tthis.oldSettings.Accounts_AllowedDomainsList = Settings.findOneById('Accounts_AllowedDomainsList').value;\n\t\t\t\tSettings.updateValueById('Accounts_AllowedDomainsList', '');\n\n\t\t\t\tthis.oldSettings.Accounts_AllowUsernameChange = Settings.findOneById('Accounts_AllowUsernameChange').value;\n\t\t\t\tSettings.updateValueById('Accounts_AllowUsernameChange', true);\n\n\t\t\t\tthis.oldSettings.FileUpload_MaxFileSize = Settings.findOneById('FileUpload_MaxFileSize').value;\n\t\t\t\tSettings.updateValueById('FileUpload_MaxFileSize', -1);\n\n\t\t\t\tthis.oldSettings.FileUpload_MediaTypeWhiteList = Settings.findOneById('FileUpload_MediaTypeWhiteList').value;\n\t\t\t\tSettings.updateValueById('FileUpload_MediaTypeWhiteList', '*');\n\n\t\t\t\tthis.oldSettings.FileUpload_MediaTypeBlackList = Settings.findOneById('FileUpload_MediaTypeBlackList').value;\n\t\t\t\tSettings.updateValueById('FileUpload_MediaTypeBlackList', '');\n\n\t\t\t\tthis.oldSettings.UI_Allow_room_names_with_special_chars = Settings.findOneById('UI_Allow_room_names_with_special_chars').value;\n\t\t\t\tSettings.updateValueById('UI_Allow_room_names_with_special_chars', true);\n\t\t\t\tbreak;\n\t\t\tcase ProgressStep.DONE:\n\t\t\tcase ProgressStep.ERROR:\n\t\t\tcase ProgressStep.CANCELLED:\n\t\t\t\tSettings.updateValueById('Accounts_AllowedDomainsList', this.oldSettings.Accounts_AllowedDomainsList);\n\t\t\t\tSettings.updateValueById('Accounts_AllowUsernameChange', this.oldSettings.Accounts_AllowUsernameChange);\n\t\t\t\tSettings.updateValueById('FileUpload_MaxFileSize', this.oldSettings.FileUpload_MaxFileSize);\n\t\t\t\tSettings.updateValueById('FileUpload_MediaTypeWhiteList', this.oldSettings.FileUpload_MediaTypeWhiteList);\n\t\t\t\tSettings.updateValueById('FileUpload_MediaTypeBlackList', this.oldSettings.FileUpload_MediaTypeBlackList);\n\t\t\t\tSettings.updateValueById('UI_Allow_room_names_with_special_chars', this.oldSettings.UI_Allow_room_names_with_special_chars);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.logger.debug(`${this.info.name} is now at ${step}.`);\n\t\tthis.updateRecord({ status: this.progress.step });\n\n\t\tthis.reportProgress();\n\n\t\treturn this.progress;\n\t}\n\n\treloadCount() {\n\t\tif (!this.importRecord.count) {\n\t\t\tthis.progress.count.total = 0;\n\t\t\tthis.progress.count.completed = 0;\n\t\t}\n\n\t\tthis.progress.count.total = this.importRecord.count.total || 0;\n\t\tthis.progress.count.completed = this.importRecord.count.completed || 0;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items needed to complete.\n\t *\n\t * @param {number} count The amount to add to the total count of items.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\taddCountToTotal(count) {\n\t\tthis.progress.count.total += count;\n\t\tthis.updateRecord({ 'count.total': this.progress.count.total });\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items completed.\n\t *\n\t * @param {number} count The amount to add to the total count of finished items.\n\t * @returns {Progress} The progress record of the import.\n\t */\n\taddCountCompleted(count) {\n\t\tthis.progress.count.completed += count;\n\n\t\t// Only update the database every 500 records\n\t\t// Or the completed is greater than or equal to the total amount\n\t\tif (this.progress.count.completed % 500 === 0 || this.progress.count.completed >= this.progress.count.total) {\n\t\t\tthis.updateRecord({ 'count.completed': this.progress.count.completed });\n\t\t\tthis.reportProgress();\n\t\t} else if (!this._reportProgressHandler) {\n\t\t\tthis._reportProgressHandler = setTimeout(() => {\n\t\t\t\tthis.reportProgress();\n\t\t\t}, 250);\n\t\t}\n\n\t\tthis.logger.log(`${this.progress.count.completed} messages imported`);\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Sends an updated progress to the websocket\n\t */\n\treportProgress() {\n\t\tif (this._reportProgressHandler) {\n\t\t\tclearTimeout(this._reportProgressHandler);\n\t\t\tthis._reportProgressHandler = false;\n\t\t}\n\t\tImporterWebsocket.progressUpdated(this.progress);\n\t}\n\n\t/**\n\t * Registers error information on a specific user from the import record\n\t *\n\t * @param {int} the user id\n\t * @param {object} an exception object\n\t */\n\taddUserError(userId, error) {\n\t\tImports.model.update(\n\t\t\t{\n\t\t\t\t'_id': this.importRecord._id,\n\t\t\t\t'fileData.users.user_id': userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'fileData.users.$.error': error,\n\t\t\t\t\t'hasErrors': true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\taddMessageError(error, msg) {\n\t\tImports.model.update(\n\t\t\t{\n\t\t\t\t_id: this.importRecord._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tmsg,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\thasErrors: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * Updates the import record with the given fields being `set`.\n\t *\n\t * @param {any} fields The fields to set, it should be an object with key/values.\n\t * @returns {Imports} The import record.\n\t */\n\tupdateRecord(fields) {\n\t\tImports.update({ _id: this.importRecord._id }, { $set: fields });\n\t\tthis.importRecord = Imports.findOne(this.importRecord._id);\n\n\t\treturn this.importRecord;\n\t}\n\n\tbuildSelection() {\n\t\tthis.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\tconst users = ImportData.getAllUsersForSelection();\n\t\tconst channels = ImportData.getAllChannelsForSelection();\n\t\tconst hasDM = ImportData.checkIfDirectMessagesExists();\n\n\t\tconst selectionUsers = users.map(\n\t\t\t(u) =>\n\t\t\t\tnew SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true),\n\t\t);\n\t\tconst selectionChannels = channels.map(\n\t\t\t(c) =>\n\t\t\t\tnew SelectionChannel(\n\t\t\t\t\tc.data.importIds[0],\n\t\t\t\t\tc.data.name,\n\t\t\t\t\tBoolean(c.data.archived),\n\t\t\t\t\ttrue,\n\t\t\t\t\tc.data.t === 'p',\n\t\t\t\t\tundefined,\n\t\t\t\t\tc.data.t === 'd',\n\t\t\t\t),\n\t\t);\n\t\tconst selectionMessages = ImportData.countMessages();\n\n\t\tif (hasDM) {\n\t\t\tselectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, undefined, true));\n\t\t}\n\n\t\tconst results = new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\n\t\treturn results;\n\t}\n}\n"]},"sourceType":"module","hash":"c49d16e8c9318b4e5d9100e66111a755802482da"}
