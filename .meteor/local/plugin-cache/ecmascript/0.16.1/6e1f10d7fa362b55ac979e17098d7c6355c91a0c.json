{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/methods/getChannelHistory.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/methods/getChannelHistory.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/methods/getChannelHistory.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/methods/getChannelHistory.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/methods/getChannelHistory.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 3);\nlet Subscriptions, Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 6);\nlet getHiddenSystemMessages;\nmodule.link(\"../lib/getHiddenSystemMessages\", {\n  getHiddenSystemMessages(v) {\n    getHiddenSystemMessages = v;\n  }\n\n}, 7);\nMeteor.methods({\n  getChannelHistory(_ref) {\n    let {\n      rid,\n      latest,\n      oldest,\n      inclusive,\n      offset = 0,\n      count = 20,\n      unreads,\n      showThreadMessages = true\n    } = _ref;\n    check(rid, String);\n\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'getChannelHistory'\n      });\n    }\n\n    const fromUserId = Meteor.userId();\n    const room = Rooms.findOneById(rid);\n\n    if (!room) {\n      return false;\n    }\n\n    if (!canAccessRoom(room, {\n      _id: fromUserId\n    })) {\n      return false;\n    } // Make sure they can access the room\n\n\n    if (room.t === 'c' && !hasPermission(fromUserId, 'preview-c-room') && !Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, {\n      fields: {\n        _id: 1\n      }\n    })) {\n      return false;\n    } // Ensure latest is always defined.\n\n\n    if (_.isUndefined(latest)) {\n      latest = new Date();\n    } // Verify oldest is a date if it exists\n\n\n    if (!_.isUndefined(oldest) && !_.isDate(oldest)) {\n      throw new Meteor.Error('error-invalid-date', 'Invalid date', {\n        method: 'getChannelHistory'\n      });\n    }\n\n    const hiddenMessageTypes = getHiddenSystemMessages(room);\n    const options = {\n      sort: {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    };\n\n    if (!settings.get('Message_ShowEditedStatus')) {\n      options.fields = {\n        editedAt: 0\n      };\n    }\n\n    const records = _.isUndefined(oldest) ? Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(rid, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).fetch() : Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).fetch();\n    const messages = normalizeMessagesForUser(records, fromUserId);\n\n    if (unreads) {\n      let unreadNotLoaded = 0;\n      let firstUnread = undefined;\n\n      if (!_.isUndefined(oldest)) {\n        const firstMsg = messages[messages.length - 1];\n\n        if (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {\n          const unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, firstMsg.ts, hiddenMessageTypes, {\n            limit: 1,\n            sort: {\n              ts: 1\n            }\n          }, showThreadMessages);\n          firstUnread = unreadMessages.fetch()[0];\n          unreadNotLoaded = unreadMessages.count();\n        }\n      }\n\n      return {\n        messages: messages || [],\n        firstUnread,\n        unreadNotLoaded\n      };\n    }\n\n    return {\n      messages: messages || []\n    };\n  }\n\n});","map":{"version":3,"sources":["app/lib/server/methods/getChannelHistory.js"],"names":["Meteor","module","link","v","check","_","default","canAccessRoom","hasPermission","Subscriptions","Messages","Rooms","settings","normalizeMessagesForUser","getHiddenSystemMessages","methods","getChannelHistory","rid","latest","oldest","inclusive","offset","count","unreads","showThreadMessages","String","userId","Error","method","fromUserId","room","findOneById","_id","t","findOneByRoomIdAndUserId","fields","isUndefined","Date","isDate","hiddenMessageTypes","options","sort","ts","skip","limit","get","editedAt","records","findVisibleByRoomIdBeforeTimestampNotContainingTypes","fetch","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","messages","unreadNotLoaded","firstUnread","undefined","firstMsg","length","unreadMessages"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nMeteor.methods({\n\tgetChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tconst room = Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!canAccessRoom(room, { _id: fromUserId })) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!hasPermission(fromUserId, 'preview-c-room') &&\n\t\t\t!Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { fields: { _id: 1 } })\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (_.isUndefined(latest)) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\t\tif (!_.isUndefined(oldest) && !_.isDate(oldest)) {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room);\n\n\t\tconst options = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tif (!settings.get('Message_ShowEditedStatus')) {\n\t\t\toptions.fields = { editedAt: 0 };\n\t\t}\n\n\t\tconst records = _.isUndefined(oldest)\n\t\t\t? Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch()\n\t\t\t: Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\toldest,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch();\n\n\t\tconst messages = normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (!_.isUndefined(oldest)) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = unreadMessages.fetch()[0];\n\t\t\t\t\tunreadNotLoaded = unreadMessages.count();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"]},"sourceType":"module","hash":"6e1f10d7fa362b55ac979e17098d7c6355c91a0c"}
