{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/subscriptions.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/subscriptions.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/subscriptions.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/subscriptions.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/subscriptions.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Subscriptions;\nmodule.link(\"../../../models\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 3);\nAPI.v1.addRoute('subscriptions.get', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      updatedSince\n    } = this.queryParams;\n    let updatedSinceDate;\n\n    if (updatedSince) {\n      if (isNaN(Date.parse(updatedSince))) {\n        throw new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n      } else {\n        updatedSinceDate = new Date(updatedSince);\n      }\n    }\n\n    let result;\n    Meteor.runAsUser(this.userId, () => {\n      result = Meteor.call('subscriptions/get', updatedSinceDate);\n    });\n\n    if (Array.isArray(result)) {\n      result = {\n        update: result,\n        remove: []\n      };\n    }\n\n    return API.v1.success(result);\n  }\n\n});\nAPI.v1.addRoute('subscriptions.getOne', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.requestParams();\n\n    if (!roomId) {\n      return API.v1.failure(\"The 'roomId' param is required\");\n    }\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n    return API.v1.success({\n      subscription\n    });\n  }\n\n});\n/**\n\tThis API is suppose to mark any room as read.\n\n\tMethod: POST\n\tRoute: api/v1/subscriptions.read\n\tParams:\n\t\t- rid: The rid of the room to be marked as read.\n */\n\nAPI.v1.addRoute('subscriptions.read', {\n  authRequired: true\n}, {\n  post() {\n    check(this.bodyParams, {\n      rid: String\n    });\n    Meteor.runAsUser(this.userId, () => Meteor.call('readMessages', this.bodyParams.rid));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('subscriptions.unread', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      roomId,\n      firstUnreadMessage\n    } = this.bodyParams;\n\n    if (!roomId && firstUnreadMessage && !firstUnreadMessage._id) {\n      return API.v1.failure('At least one of \"roomId\" or \"firstUnreadMessage._id\" params is required');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('unreadMessages', firstUnreadMessage, roomId));\n    return API.v1.success();\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/subscriptions.js"],"names":["Meteor","module","link","v","check","Subscriptions","API","v1","addRoute","authRequired","get","updatedSince","queryParams","updatedSinceDate","isNaN","Date","parse","Error","result","runAsUser","userId","call","Array","isArray","update","remove","success","roomId","requestParams","failure","subscription","findOneByRoomIdAndUserId","post","bodyParams","rid","String","firstUnreadMessage","_id"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { Subscriptions } from '../../../models';\nimport { API } from '../api';\n\nAPI.v1.addRoute(\n\t'subscriptions.get',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t\t} else {\n\t\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tresult = Meteor.call('subscriptions/get', updatedSinceDate);\n\t\t\t});\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult = {\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.requestParams();\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tsubscription,\n\t\t\t});\n\t\t},\n\t},\n);\n\n/**\n\tThis API is suppose to mark any room as read.\n\n\tMethod: POST\n\tRoute: api/v1/subscriptions.read\n\tParams:\n\t\t- rid: The rid of the room to be marked as read.\n */\nAPI.v1.addRoute(\n\t'subscriptions.read',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('readMessages', this.bodyParams.rid));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.unread',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { roomId, firstUnreadMessage } = this.bodyParams;\n\t\t\tif (!roomId && firstUnreadMessage && !firstUnreadMessage._id) {\n\t\t\t\treturn API.v1.failure('At least one of \"roomId\" or \"firstUnreadMessage._id\" params is required');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('unreadMessages', firstUnreadMessage, roomId));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"40bdda17f8e4d4370b8c42bd5d09c5d1743d615a"}
