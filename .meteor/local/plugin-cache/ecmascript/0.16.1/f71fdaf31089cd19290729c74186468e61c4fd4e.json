{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/apn.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push/server/apn.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/apn.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/apn.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push/server/apn.js"}},"code":"module.export({\n  sendAPN: () => sendAPN,\n  initAPN: () => initAPN\n});\nlet apn;\nmodule.link(\"apn\", {\n  default(v) {\n    apn = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 2);\nlet apnConnection;\n\nconst sendAPN = _ref => {\n  let {\n    userToken,\n    notification,\n    _removeToken\n  } = _ref;\n\n  if (typeof notification.apn === 'object') {\n    notification = Object.assign({}, notification, notification.apn);\n  }\n\n  const priority = notification.priority || notification.priority === 0 ? notification.priority : 10;\n  const note = new apn.Notification();\n  note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n\n  note.badge = notification.badge;\n  note.sound = notification.sound;\n\n  if (notification.contentAvailable != null) {\n    note.setContentAvailable(notification.contentAvailable);\n  } // adds category support for iOS8 custom actions as described here:\n  // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n  // RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n\n\n  note.category = notification.category;\n  note.body = notification.text;\n  note.title = notification.title;\n\n  if (notification.notId != null) {\n    note.threadId = String(notification.notId);\n  } // Allow the user to set payload data\n\n\n  note.payload = notification.payload ? {\n    ejson: EJSON.stringify(notification.payload)\n  } : {};\n  note.payload.messageFrom = notification.from;\n  note.priority = priority; // Store the token on the note so we can reference it if there was an error\n\n  note.token = userToken;\n  note.topic = notification.topic;\n  note.mutableContent = 1;\n  apnConnection.send(note, userToken).then(response => {\n    response.failed.forEach(failure => {\n      logger.debug(\"Got error code \".concat(failure.status, \" for token \").concat(userToken));\n\n      if (['400', '410'].includes(failure.status)) {\n        logger.debug(\"Removing token \".concat(userToken));\n\n        _removeToken({\n          apn: userToken\n        });\n      }\n    });\n  });\n};\n\nconst initAPN = _ref2 => {\n  let {\n    options,\n    absoluteUrl\n  } = _ref2;\n  logger.debug('APN configured'); // Allow production to be a general option for push notifications\n\n  if (options.production === Boolean(options.production)) {\n    options.apn.production = options.production;\n  } // Give the user warnings about development settings\n\n\n  if (options.apn.development) {\n    // This flag is normally set by the configuration file\n    logger.warn('WARNING: Push APN is using development key and certificate');\n  } else if (options.apn.gateway) {\n    // We check the apn gateway i the options, we could risk shipping\n    // server into production while using the production configuration.\n    // On the other hand we could be in development but using the production\n    // configuration. And finally we could have configured an unknown apn\n    // gateway (this could change in the future - but a warning about typos\n    // can save hours of debugging)\n    //\n    // Warn about gateway configurations - it's more a guide\n    if (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n      // Using the development sandbox\n      logger.warn('WARNING: Push APN is in development mode');\n    } else if (options.apn.gateway === 'gateway.push.apple.com') {\n      // In production - but warn if we are running on localhost\n      if (/http:\\/\\/localhost/.test(absoluteUrl)) {\n        logger.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n      }\n    } else {\n      // Warn about gateways we dont know about\n      logger.warn(\"WARNING: Push APN unknown gateway \\\"\".concat(options.apn.gateway, \"\\\"\"));\n    }\n  } else if (options.apn.production) {\n    if (/http:\\/\\/localhost/.test(absoluteUrl)) {\n      logger.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n    }\n  } else {\n    logger.warn('WARNING: Push APN is in development mode');\n  } // Check certificate data\n\n\n  if (!options.apn.cert || !options.apn.cert.length) {\n    logger.error('ERROR: Push server could not find cert');\n  } // Check key data\n\n\n  if (!options.apn.key || !options.apn.key.length) {\n    logger.error('ERROR: Push server could not find key');\n  } // Rig apn connection\n\n\n  try {\n    apnConnection = new apn.Provider(options.apn);\n  } catch (e) {\n    logger.error('Error trying to initialize APN');\n    logger.error(e);\n  }\n};","map":{"version":3,"sources":["app/push/server/apn.js"],"names":["module","export","sendAPN","initAPN","apn","link","default","v","EJSON","logger","apnConnection","userToken","notification","_removeToken","Object","assign","priority","note","Notification","expiry","Math","floor","Date","now","badge","sound","contentAvailable","setContentAvailable","category","body","text","title","notId","threadId","String","payload","ejson","stringify","messageFrom","from","token","topic","mutableContent","send","then","response","failed","forEach","failure","debug","status","includes","options","absoluteUrl","production","Boolean","development","warn","gateway","test","cert","length","error","key","Provider","e"],"mappings":"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","sourcesContent":["import apn from 'apn';\nimport { EJSON } from 'meteor/ejson';\n\nimport { logger } from './logger';\n\nlet apnConnection;\n\nexport const sendAPN = ({ userToken, notification, _removeToken }) => {\n\tif (typeof notification.apn === 'object') {\n\t\tnotification = Object.assign({}, notification, notification.apn);\n\t}\n\n\tconst priority = notification.priority || notification.priority === 0 ? notification.priority : 10;\n\n\tconst note = new apn.Notification();\n\n\tnote.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n\tnote.badge = notification.badge;\n\tnote.sound = notification.sound;\n\n\tif (notification.contentAvailable != null) {\n\t\tnote.setContentAvailable(notification.contentAvailable);\n\t}\n\n\t// adds category support for iOS8 custom actions as described here:\n\t// https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n\t// RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n\tnote.category = notification.category;\n\n\tnote.body = notification.text;\n\tnote.title = notification.title;\n\n\tif (notification.notId != null) {\n\t\tnote.threadId = String(notification.notId);\n\t}\n\n\t// Allow the user to set payload data\n\tnote.payload = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n\tnote.payload.messageFrom = notification.from;\n\tnote.priority = priority;\n\n\t// Store the token on the note so we can reference it if there was an error\n\tnote.token = userToken;\n\tnote.topic = notification.topic;\n\tnote.mutableContent = 1;\n\n\tapnConnection.send(note, userToken).then((response) => {\n\t\tresponse.failed.forEach((failure) => {\n\t\t\tlogger.debug(`Got error code ${failure.status} for token ${userToken}`);\n\n\t\t\tif (['400', '410'].includes(failure.status)) {\n\t\t\t\tlogger.debug(`Removing token ${userToken}`);\n\t\t\t\t_removeToken({\n\t\t\t\t\tapn: userToken,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n\nexport const initAPN = ({ options, absoluteUrl }) => {\n\tlogger.debug('APN configured');\n\n\t// Allow production to be a general option for push notifications\n\tif (options.production === Boolean(options.production)) {\n\t\toptions.apn.production = options.production;\n\t}\n\n\t// Give the user warnings about development settings\n\tif (options.apn.development) {\n\t\t// This flag is normally set by the configuration file\n\t\tlogger.warn('WARNING: Push APN is using development key and certificate');\n\t} else if (options.apn.gateway) {\n\t\t// We check the apn gateway i the options, we could risk shipping\n\t\t// server into production while using the production configuration.\n\t\t// On the other hand we could be in development but using the production\n\t\t// configuration. And finally we could have configured an unknown apn\n\t\t// gateway (this could change in the future - but a warning about typos\n\t\t// can save hours of debugging)\n\t\t//\n\t\t// Warn about gateway configurations - it's more a guide\n\n\t\tif (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n\t\t\t// Using the development sandbox\n\t\t\tlogger.warn('WARNING: Push APN is in development mode');\n\t\t} else if (options.apn.gateway === 'gateway.push.apple.com') {\n\t\t\t// In production - but warn if we are running on localhost\n\t\t\tif (/http:\\/\\/localhost/.test(absoluteUrl)) {\n\t\t\t\tlogger.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n\t\t\t}\n\t\t} else {\n\t\t\t// Warn about gateways we dont know about\n\t\t\tlogger.warn(`WARNING: Push APN unknown gateway \"${options.apn.gateway}\"`);\n\t\t}\n\t} else if (options.apn.production) {\n\t\tif (/http:\\/\\/localhost/.test(absoluteUrl)) {\n\t\t\tlogger.warn('WARNING: Push APN is configured to production mode - but server is running from localhost');\n\t\t}\n\t} else {\n\t\tlogger.warn('WARNING: Push APN is in development mode');\n\t}\n\n\t// Check certificate data\n\tif (!options.apn.cert || !options.apn.cert.length) {\n\t\tlogger.error('ERROR: Push server could not find cert');\n\t}\n\n\t// Check key data\n\tif (!options.apn.key || !options.apn.key.length) {\n\t\tlogger.error('ERROR: Push server could not find key');\n\t}\n\n\t// Rig apn connection\n\ttry {\n\t\tapnConnection = new apn.Provider(options.apn);\n\t} catch (e) {\n\t\tlogger.error('Error trying to initialize APN');\n\t\tlogger.error(e);\n\t}\n};\n"]},"sourceType":"module","hash":"f71fdaf31089cd19290729c74186468e61c4fd4e"}
