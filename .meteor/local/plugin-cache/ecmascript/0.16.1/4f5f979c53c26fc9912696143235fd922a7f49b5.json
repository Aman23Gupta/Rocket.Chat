{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/autotranslate.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/autotranslate.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/autotranslate.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/autotranslate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/autotranslate.js"}},"code":"module.export({\n  TranslationProviderRegistry: () => TranslationProviderRegistry,\n  AutoTranslate: () => AutoTranslate\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeHTML(v) {\n    escapeHTML = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\nlet Subscriptions, Messages;\nmodule.link(\"../../models\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 5);\nlet Markdown;\nmodule.link(\"../../markdown/server\", {\n  Markdown(v) {\n    Markdown = v;\n  }\n\n}, 6);\nlet Logger;\nmodule.link(\"../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 7);\nconst Providers = Symbol('Providers');\nconst Provider = Symbol('Provider');\n/**\n * This class allows translation providers to\n * register,load and also returns the active provider.\n */\n\nclass TranslationProviderRegistry {\n  /**\n   * Registers the translation provider into the registry.\n   * @param {*} provider\n   */\n  static registerProvider(provider) {\n    // get provider information\n    const metadata = provider._getProviderMetadata();\n\n    TranslationProviderRegistry[Providers][metadata.name] = provider;\n  }\n  /**\n   * Return the active Translation provider\n   */\n\n\n  static getActiveProvider() {\n    return TranslationProviderRegistry.enabled ? TranslationProviderRegistry[Providers][TranslationProviderRegistry[Provider]] : undefined;\n  }\n\n  static getSupportedLanguages() {\n    var _TranslationProviderR;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return TranslationProviderRegistry.enabled ? (_TranslationProviderR = TranslationProviderRegistry.getActiveProvider()) === null || _TranslationProviderR === void 0 ? void 0 : _TranslationProviderR.getSupportedLanguages(...args) : undefined;\n  }\n\n  static translateMessage() {\n    var _TranslationProviderR2;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return TranslationProviderRegistry.enabled ? (_TranslationProviderR2 = TranslationProviderRegistry.getActiveProvider()) === null || _TranslationProviderR2 === void 0 ? void 0 : _TranslationProviderR2.translateMessage(...args) : undefined;\n  }\n\n  static getProviders() {\n    return Object.values(TranslationProviderRegistry[Providers]);\n  }\n\n  static setCurrentProvider(provider) {\n    if (provider === TranslationProviderRegistry[Provider]) {\n      return;\n    }\n\n    TranslationProviderRegistry[Provider] = provider;\n    TranslationProviderRegistry.registerCallbacks();\n  }\n\n  static setEnable(enabled) {\n    TranslationProviderRegistry.enabled = enabled;\n    TranslationProviderRegistry.registerCallbacks();\n  }\n\n  static registerCallbacks() {\n    if (!TranslationProviderRegistry.enabled) {\n      callbacks.remove('afterSaveMessage', 'autotranslate');\n      return;\n    }\n\n    const provider = TranslationProviderRegistry.getActiveProvider();\n\n    if (!provider) {\n      return;\n    }\n\n    callbacks.add('afterSaveMessage', provider.translateMessage.bind(provider), callbacks.priority.MEDIUM, 'autotranslate');\n  }\n\n}\n\nTranslationProviderRegistry[Providers] = {};\nTranslationProviderRegistry.enabled = false;\nTranslationProviderRegistry[Provider] = null;\n\nclass AutoTranslate {\n  /**\n   * Encapsulate the api key and provider settings.\n   * @constructor\n   */\n  constructor() {\n    this.name = '';\n    this.languages = [];\n    this.supportedLanguages = {};\n  }\n  /**\n   * Extracts non-translatable parts of a message\n   * @param {object} message\n   * @return {object} message\n   */\n\n\n  tokenize(message) {\n    if (!message.tokens || !Array.isArray(message.tokens)) {\n      message.tokens = [];\n    }\n\n    message = this.tokenizeEmojis(message);\n    message = this.tokenizeCode(message);\n    message = this.tokenizeURLs(message);\n    message = this.tokenizeMentions(message);\n    return message;\n  }\n\n  tokenizeEmojis(message) {\n    let count = message.tokens.length;\n    message.msg = message.msg.replace(/:[+\\w\\d]+:/g, function (match) {\n      const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n      message.tokens.push({\n        token,\n        text: match\n      });\n      return token;\n    });\n    return message;\n  }\n\n  tokenizeURLs(message) {\n    let count = message.tokens.length;\n    const schemes = settings.get('Markdown_SupportSchemesForLink').split(',').join('|'); // Support ![alt text](http://image url) and [text](http://link)\n\n    message.msg = message.msg.replace(new RegExp(\"(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\)]+\\\\))\"), 'gm'), function (match, pre, text, post) {\n      const pretoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n      message.tokens.push({\n        token: pretoken,\n        text: pre\n      });\n      const posttoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n      message.tokens.push({\n        token: posttoken,\n        text: post\n      });\n      return pretoken + text + posttoken;\n    }); // Support <http://link|Text>\n\n    message.msg = message.msg.replace(new RegExp(\"((?:<|&lt;)(?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))\"), 'gm'), function (match, pre, text, post) {\n      const pretoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n      message.tokens.push({\n        token: pretoken,\n        text: pre\n      });\n      const posttoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n      message.tokens.push({\n        token: posttoken,\n        text: post\n      });\n      return pretoken + text + posttoken;\n    });\n    return message;\n  }\n\n  tokenizeCode(message) {\n    let count = message.tokens.length;\n    message.html = message.msg;\n    message = Markdown.parseMessageNotEscaped(message); // Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n\n    const regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n    message.msg = message.msg.replace(regexWrappedParagraph, '');\n\n    for (const tokenIndex in message.tokens) {\n      if (message.tokens.hasOwnProperty(tokenIndex)) {\n        const {\n          token\n        } = message.tokens[tokenIndex];\n\n        if (token.indexOf('notranslate') === -1) {\n          const newToken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          message.msg = message.msg.replace(token, newToken);\n          message.tokens[tokenIndex].token = newToken;\n        }\n      }\n    }\n\n    return message;\n  }\n\n  tokenizeMentions(message) {\n    let count = message.tokens.length;\n\n    if (message.mentions && message.mentions.length > 0) {\n      message.mentions.forEach(mention => {\n        message.msg = message.msg.replace(new RegExp(\"(@\".concat(mention.username, \")\"), 'gm'), match => {\n          const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          message.tokens.push({\n            token,\n            text: match\n          });\n          return token;\n        });\n      });\n    }\n\n    if (message.channels && message.channels.length > 0) {\n      message.channels.forEach(channel => {\n        message.msg = message.msg.replace(new RegExp(\"(#\".concat(channel.name, \")\"), 'gm'), match => {\n          const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          message.tokens.push({\n            token,\n            text: match\n          });\n          return token;\n        });\n      });\n    }\n\n    return message;\n  }\n\n  deTokenize(message) {\n    if (message.tokens && message.tokens.length > 0) {\n      for (const {\n        token,\n        text,\n        noHtml\n      } of message.tokens) {\n        message.msg = message.msg.replace(token, () => noHtml || text);\n      }\n    }\n\n    return message.msg;\n  }\n  /**\n   * Triggers the translation of the prepared (tokenized) message\n   * and persists the result\n   * @public\n   * @param {object} message\n   * @param {object} room\n   * @param {object} targetLanguage\n   * @returns {object} unmodified message object.\n   */\n\n\n  translateMessage(message, room, targetLanguage) {\n    let targetLanguages;\n\n    if (targetLanguage) {\n      targetLanguages = [targetLanguage];\n    } else {\n      targetLanguages = Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, message.u && message.u._id);\n    }\n\n    if (message.msg) {\n      Meteor.defer(() => {\n        let targetMessage = Object.assign({}, message);\n        targetMessage.html = escapeHTML(String(targetMessage.msg));\n        targetMessage = this.tokenize(targetMessage);\n\n        const translations = this._translateMessage(targetMessage, targetLanguages);\n\n        if (!_.isEmpty(translations)) {\n          Messages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider]);\n        }\n      });\n    }\n\n    if (message.attachments && message.attachments.length > 0) {\n      Meteor.defer(() => {\n        for (const index in message.attachments) {\n          if (message.attachments.hasOwnProperty(index)) {\n            const attachment = message.attachments[index];\n\n            if (attachment.description || attachment.text) {\n              const translations = this._translateAttachmentDescriptions(attachment, targetLanguages);\n\n              if (!_.isEmpty(translations)) {\n                Messages.addAttachmentTranslations(message._id, index, translations);\n              }\n            }\n          }\n        }\n      });\n    }\n\n    return Messages.findOneById(message._id);\n  }\n  /**\n   * Returns metadata information about the service provider which is used by\n   * the generic implementation\n   * @abstract\n   * @protected\n   * @returns { name, displayName, settings }\n  \t};\n   */\n\n\n  _getProviderMetadata() {\n    Logger.warn('must be implemented by subclass!', '_getProviderMetadata');\n  }\n  /**\n   * Provides the possible languages _from_ which a message can be translated into a target language\n   * @abstract\n   * @protected\n   * @param {string} target - the language into which shall be translated\n   * @returns [{ language, name }]\n   */\n\n\n  getSupportedLanguages(target) {\n    Logger.warn('must be implemented by subclass!', 'getSupportedLanguages', target);\n  }\n  /**\n   * Performs the actual translation of a message,\n   * usually by sending a REST API call to the service provider.\n   * @abstract\n   * @protected\n   * @param {object} message\n   * @param {object} targetLanguages\n   * @return {object}\n   */\n\n\n  _translateMessage(message, targetLanguages) {\n    Logger.warn('must be implemented by subclass!', '_translateMessage', message, targetLanguages);\n  }\n  /**\n   * Performs the actual translation of an attachment (precisely its description),\n   * usually by sending a REST API call to the service provider.\n   * @abstract\n   * @param {object} attachment\n   * @param {object} targetLanguages\n   * @returns {object} translated messages for each target language\n   */\n\n\n  _translateAttachmentDescriptions(attachment, targetLanguages) {\n    Logger.warn('must be implemented by subclass!', '_translateAttachmentDescriptions', attachment, targetLanguages);\n  }\n\n}\n\nMeteor.startup(() => {\n  /** Register the active service provider on the 'AfterSaveMessage' callback.\n   *  So the registered provider will be invoked when a message is saved.\n   *  All the other inactive service provider must be deactivated.\n   */\n  settings.watch('AutoTranslate_ServiceProvider', providerName => {\n    TranslationProviderRegistry.setCurrentProvider(providerName);\n  }); // Get Auto Translate Active flag\n\n  settings.watch('AutoTranslate_Enabled', value => {\n    TranslationProviderRegistry.setEnable(value);\n  });\n});","map":{"version":3,"sources":["app/autotranslate/server/autotranslate.js"],"names":["module","export","TranslationProviderRegistry","AutoTranslate","Meteor","link","v","_","default","escapeHTML","settings","callbacks","Subscriptions","Messages","Markdown","Logger","Providers","Symbol","Provider","registerProvider","provider","metadata","_getProviderMetadata","name","getActiveProvider","enabled","undefined","getSupportedLanguages","args","translateMessage","getProviders","Object","values","setCurrentProvider","registerCallbacks","setEnable","remove","add","bind","priority","MEDIUM","constructor","languages","supportedLanguages","tokenize","message","tokens","Array","isArray","tokenizeEmojis","tokenizeCode","tokenizeURLs","tokenizeMentions","count","length","msg","replace","match","token","push","text","schemes","get","split","join","RegExp","pre","post","pretoken","posttoken","html","parseMessageNotEscaped","regexWrappedParagraph","tokenIndex","hasOwnProperty","indexOf","newToken","mentions","forEach","mention","username","channels","channel","deTokenize","noHtml","room","targetLanguage","targetLanguages","getAutoTranslateLanguagesByRoomAndNotUser","_id","u","defer","targetMessage","assign","String","translations","_translateMessage","isEmpty","addTranslations","attachments","index","attachment","description","_translateAttachmentDescriptions","addAttachmentTranslations","findOneById","warn","target","startup","watch","providerName","value"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\n\nimport { settings } from '../../settings/server';\nimport { callbacks } from '../../../lib/callbacks';\nimport { Subscriptions, Messages } from '../../models';\nimport { Markdown } from '../../markdown/server';\nimport { Logger } from '../../logger';\n\nconst Providers = Symbol('Providers');\nconst Provider = Symbol('Provider');\n\n/**\n * This class allows translation providers to\n * register,load and also returns the active provider.\n */\nexport class TranslationProviderRegistry {\n\tstatic [Providers] = {};\n\n\tstatic enabled = false;\n\n\tstatic [Provider] = null;\n\n\t/**\n\t * Registers the translation provider into the registry.\n\t * @param {*} provider\n\t */\n\tstatic registerProvider(provider) {\n\t\t// get provider information\n\t\tconst metadata = provider._getProviderMetadata();\n\t\tTranslationProviderRegistry[Providers][metadata.name] = provider;\n\t}\n\n\t/**\n\t * Return the active Translation provider\n\t */\n\tstatic getActiveProvider() {\n\t\treturn TranslationProviderRegistry.enabled ? TranslationProviderRegistry[Providers][TranslationProviderRegistry[Provider]] : undefined;\n\t}\n\n\tstatic getSupportedLanguages(...args) {\n\t\treturn TranslationProviderRegistry.enabled\n\t\t\t? TranslationProviderRegistry.getActiveProvider()?.getSupportedLanguages(...args)\n\t\t\t: undefined;\n\t}\n\n\tstatic translateMessage(...args) {\n\t\treturn TranslationProviderRegistry.enabled ? TranslationProviderRegistry.getActiveProvider()?.translateMessage(...args) : undefined;\n\t}\n\n\tstatic getProviders() {\n\t\treturn Object.values(TranslationProviderRegistry[Providers]);\n\t}\n\n\tstatic setCurrentProvider(provider) {\n\t\tif (provider === TranslationProviderRegistry[Provider]) {\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Provider] = provider;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic setEnable(enabled) {\n\t\tTranslationProviderRegistry.enabled = enabled;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic registerCallbacks() {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\tcallbacks.remove('afterSaveMessage', 'autotranslate');\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.add('afterSaveMessage', provider.translateMessage.bind(provider), callbacks.priority.MEDIUM, 'autotranslate');\n\t}\n}\n\n/**\n * Generic auto translate base implementation.\n * This class provides generic parts of implementation for\n * tokenization, detokenization, call back register and unregister.\n * @abstract\n * @class\n */\nexport class AutoTranslate {\n\t/**\n\t * Encapsulate the api key and provider settings.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.name = '';\n\t\tthis.languages = [];\n\t\tthis.supportedLanguages = {};\n\t}\n\n\t/**\n\t * Extracts non-translatable parts of a message\n\t * @param {object} message\n\t * @return {object} message\n\t */\n\ttokenize(message) {\n\t\tif (!message.tokens || !Array.isArray(message.tokens)) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\t\tmessage = this.tokenizeEmojis(message);\n\t\tmessage = this.tokenizeCode(message);\n\t\tmessage = this.tokenizeURLs(message);\n\t\tmessage = this.tokenizeMentions(message);\n\t\treturn message;\n\t}\n\n\ttokenizeEmojis(message) {\n\t\tlet count = message.tokens.length;\n\t\tmessage.msg = message.msg.replace(/:[+\\w\\d]+:/g, function (match) {\n\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\tmessage.tokens.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: match,\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t}\n\n\ttokenizeURLs(message) {\n\t\tlet count = message.tokens.length;\n\n\t\tconst schemes = settings.get('Markdown_SupportSchemesForLink').split(',').join('|');\n\n\t\t// Support ![alt text](http://image url) and [text](http://link)\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:${schemes}):\\\\/\\\\/[^\\\\)]+\\\\))`, 'gm'),\n\t\t\tfunction (match, pre, text, post) {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\t// Support <http://link|Text>\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`((?:<|&lt;)(?:${schemes}):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))`, 'gm'),\n\t\t\tfunction (match, pre, text, post) {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\treturn message;\n\t}\n\n\ttokenizeCode(message) {\n\t\tlet count = message.tokens.length;\n\t\tmessage.html = message.msg;\n\t\tmessage = Markdown.parseMessageNotEscaped(message);\n\n\t\t// Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n\t\tconst regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n\t\tmessage.msg = message.msg.replace(regexWrappedParagraph, '');\n\n\t\tfor (const tokenIndex in message.tokens) {\n\t\t\tif (message.tokens.hasOwnProperty(tokenIndex)) {\n\t\t\t\tconst { token } = message.tokens[tokenIndex];\n\t\t\t\tif (token.indexOf('notranslate') === -1) {\n\t\t\t\t\tconst newToken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.msg = message.msg.replace(token, newToken);\n\t\t\t\t\tmessage.tokens[tokenIndex].token = newToken;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t}\n\n\ttokenizeMentions(message) {\n\t\tlet count = message.tokens.length;\n\n\t\tif (message.mentions && message.mentions.length > 0) {\n\t\t\tmessage.mentions.forEach((mention) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(@${mention.username})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (message.channels && message.channels.length > 0) {\n\t\t\tmessage.channels.forEach((channel) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(#${channel.name})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tdeTokenize(message) {\n\t\tif (message.tokens && message.tokens.length > 0) {\n\t\t\tfor (const { token, text, noHtml } of message.tokens) {\n\t\t\t\tmessage.msg = message.msg.replace(token, () => noHtml || text);\n\t\t\t}\n\t\t}\n\t\treturn message.msg;\n\t}\n\n\t/**\n\t * Triggers the translation of the prepared (tokenized) message\n\t * and persists the result\n\t * @public\n\t * @param {object} message\n\t * @param {object} room\n\t * @param {object} targetLanguage\n\t * @returns {object} unmodified message object.\n\t */\n\ttranslateMessage(message, room, targetLanguage) {\n\t\tlet targetLanguages;\n\t\tif (targetLanguage) {\n\t\t\ttargetLanguages = [targetLanguage];\n\t\t} else {\n\t\t\ttargetLanguages = Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, message.u && message.u._id);\n\t\t}\n\t\tif (message.msg) {\n\t\t\tMeteor.defer(() => {\n\t\t\t\tlet targetMessage = Object.assign({}, message);\n\t\t\t\ttargetMessage.html = escapeHTML(String(targetMessage.msg));\n\t\t\t\ttargetMessage = this.tokenize(targetMessage);\n\n\t\t\t\tconst translations = this._translateMessage(targetMessage, targetLanguages);\n\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\tMessages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (message.attachments && message.attachments.length > 0) {\n\t\t\tMeteor.defer(() => {\n\t\t\t\tfor (const index in message.attachments) {\n\t\t\t\t\tif (message.attachments.hasOwnProperty(index)) {\n\t\t\t\t\t\tconst attachment = message.attachments[index];\n\t\t\t\t\t\tif (attachment.description || attachment.text) {\n\t\t\t\t\t\t\tconst translations = this._translateAttachmentDescriptions(attachment, targetLanguages);\n\t\t\t\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\t\t\t\tMessages.addAttachmentTranslations(message._id, index, translations);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Messages.findOneById(message._id);\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider which is used by\n\t * the generic implementation\n\t * @abstract\n\t * @protected\n\t * @returns { name, displayName, settings }\n\t\t};\n\t */\n\t_getProviderMetadata() {\n\t\tLogger.warn('must be implemented by subclass!', '_getProviderMetadata');\n\t}\n\n\t/**\n\t * Provides the possible languages _from_ which a message can be translated into a target language\n\t * @abstract\n\t * @protected\n\t * @param {string} target - the language into which shall be translated\n\t * @returns [{ language, name }]\n\t */\n\tgetSupportedLanguages(target) {\n\t\tLogger.warn('must be implemented by subclass!', 'getSupportedLanguages', target);\n\t}\n\n\t/**\n\t * Performs the actual translation of a message,\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @protected\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @return {object}\n\t */\n\t_translateMessage(message, targetLanguages) {\n\t\tLogger.warn('must be implemented by subclass!', '_translateMessage', message, targetLanguages);\n\t}\n\n\t/**\n\t * Performs the actual translation of an attachment (precisely its description),\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\t_translateAttachmentDescriptions(attachment, targetLanguages) {\n\t\tLogger.warn('must be implemented by subclass!', '_translateAttachmentDescriptions', attachment, targetLanguages);\n\t}\n}\n\nMeteor.startup(() => {\n\t/** Register the active service provider on the 'AfterSaveMessage' callback.\n\t *  So the registered provider will be invoked when a message is saved.\n\t *  All the other inactive service provider must be deactivated.\n\t */\n\tsettings.watch('AutoTranslate_ServiceProvider', (providerName) => {\n\t\tTranslationProviderRegistry.setCurrentProvider(providerName);\n\t});\n\n\t// Get Auto Translate Active flag\n\tsettings.watch('AutoTranslate_Enabled', (value) => {\n\t\tTranslationProviderRegistry.setEnable(value);\n\t});\n});\n"]},"sourceType":"module","hash":"4f5f979c53c26fc9912696143235fd922a7f49b5"}
