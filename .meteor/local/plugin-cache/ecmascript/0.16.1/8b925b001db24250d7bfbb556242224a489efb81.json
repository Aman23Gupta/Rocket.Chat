{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Messages.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/Messages.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Messages.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Messages.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/Messages.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Messages: () => Messages\n});\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 2);\nlet Rooms;\nmodule.link(\"./Rooms\", {\n  default(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings/server/functions/settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\n\nclass Messages extends Base {\n  constructor() {\n    super('message');\n\n    this.addAttachmentTranslations = function (messageId, attachmentIndex, translations) {\n      const updateObj = {};\n      Object.keys(translations).forEach(key => {\n        const translation = translations[key];\n        updateObj[\"attachments.\".concat(attachmentIndex, \".translations.\").concat(key)] = translation;\n      });\n      return this.update({\n        _id: messageId\n      }, {\n        $set: updateObj\n      });\n    };\n\n    this.tryEnsureIndex({\n      rid: 1,\n      ts: 1,\n      _updatedAt: 1\n    });\n    this.tryEnsureIndex({\n      ts: 1\n    });\n    this.tryEnsureIndex({\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      editedAt: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'editedBy._id': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      't': 1,\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      expireAt: 1\n    }, {\n      expireAfterSeconds: 0\n    });\n    this.tryEnsureIndex({\n      msg: 'text'\n    });\n    this.tryEnsureIndex({\n      'file._id': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'mentions.username': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      pinned: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      snippeted: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      location: '2dsphere'\n    });\n    this.tryEnsureIndex({\n      slackTs: 1,\n      slackBotId: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      unread: 1\n    }, {\n      sparse: true\n    }); // discussions\n\n    this.tryEnsureIndex({\n      drid: 1\n    }, {\n      sparse: true\n    }); // threads\n\n    this.tryEnsureIndex({\n      tmid: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      tcount: 1,\n      tlm: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      rid: 1,\n      tlm: -1\n    }, {\n      partialFilterExpression: {\n        tcount: {\n          $exists: true\n        }\n      }\n    }); // used for the List Threads\n\n    this.tryEnsureIndex({\n      rid: 1,\n      tcount: 1\n    }); // used for the List Threads Count\n    // livechat\n\n    this.tryEnsureIndex({\n      'navigation.token': 1\n    }, {\n      sparse: true\n    });\n  }\n\n  setReactions(messageId, reactions) {\n    return this.update({\n      _id: messageId\n    }, {\n      $set: {\n        reactions\n      }\n    });\n  }\n\n  keepHistoryForToken(token) {\n    return this.update({\n      'navigation.token': token,\n      'expireAt': {\n        $exists: true\n      }\n    }, {\n      $unset: {\n        expireAt: 1\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  setRoomIdByToken(token, rid) {\n    return this.update({\n      'navigation.token': token,\n      'rid': null\n    }, {\n      $set: {\n        rid\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  createRoomArchivedByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-archived', roomId, '', user);\n  }\n\n  createRoomUnarchivedByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-unarchived', roomId, '', user);\n  }\n\n  createRoomSetReadOnlyByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-set-read-only', roomId, '', user);\n  }\n\n  createRoomRemovedReadOnlyByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-removed-read-only', roomId, '', user);\n  }\n\n  createRoomAllowedReactingByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-allowed-reacting', roomId, '', user);\n  }\n\n  createRoomDisallowedReactingByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-disallowed-reacting', roomId, '', user);\n  }\n\n  unsetReactions(messageId) {\n    return this.update({\n      _id: messageId\n    }, {\n      $unset: {\n        reactions: 1\n      }\n    });\n  }\n\n  deleteOldOTRMessages(roomId, ts) {\n    const query = {\n      rid: roomId,\n      t: 'otr',\n      ts: {\n        $lte: ts\n      }\n    };\n    return this.remove(query);\n  }\n\n  updateOTRAck(_id, otrAck) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        otrAck\n      }\n    };\n    return this.update(query, update);\n  }\n\n  createRoomSettingsChangedWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData);\n  }\n\n  createRoomRenamedWithRoomIdRoomNameAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('r', roomId, roomName, user, extraData);\n  }\n\n  addTranslations(messageId, translations, providerName) {\n    const updateObj = {\n      translationProvider: providerName\n    };\n    Object.keys(translations).forEach(key => {\n      const translation = translations[key];\n      updateObj[\"translations.\".concat(key)] = translation;\n    });\n    return this.update({\n      _id: messageId\n    }, {\n      $set: updateObj\n    });\n  }\n\n  setImportFileRocketChatAttachment(importFileId, rocketChatUrl, attachment) {\n    const query = {\n      '_importFile.id': importFileId\n    };\n    return this.update(query, {\n      $set: {\n        '_importFile.rocketChatUrl': rocketChatUrl,\n        '_importFile.downloaded': true\n      },\n      $addToSet: {\n        attachments: attachment\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  countVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $gte: afterTimestamp,\n        $lte: beforeTimestamp\n      }\n    };\n    return this.find(query, options).count();\n  } // FIND\n\n\n  findByMention(username, options) {\n    const query = {\n      'mentions.username': username\n    };\n    return this.find(query, options);\n  }\n\n  findFilesByUserId(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      'u._id': userId,\n      'file._id': {\n        $exists: true\n      }\n    };\n    return this.find(query, _objectSpread({\n      fields: {\n        'file._id': 1\n      }\n    }, options));\n  }\n\n  findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned) {\n    let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ts = arguments.length > 3 ? arguments[3] : undefined;\n    let users = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    let ignoreThreads = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    const query = {\n      rid,\n      ts,\n      'file._id': {\n        $exists: true\n      }\n    };\n\n    if (excludePinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreThreads) {\n      query.tmid = {\n        $exists: 0\n      };\n      query.tcount = {\n        $exists: 0\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, _objectSpread({\n      fields: {\n        'file._id': 1\n      }\n    }, options));\n  }\n\n  findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts) {\n    let users = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const query = {\n      rid,\n      ts,\n      drid: {\n        $exists: 1\n      }\n    };\n\n    if (excludePinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleByMentionAndRoomId(username, rid, options) {\n    const query = {\n      '_hidden': {\n        $ne: true\n      },\n      'mentions.username': username,\n      rid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomId(rid, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByIds(ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      },\n      _hidden: {\n        $ne: true\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleThreadByThreadId(tmid, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      tmid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdNotContainingTypes(roomId, types, options) {\n    let showThreadMessages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findInvisibleByRoomId(roomId, options) {\n    const query = {\n      _hidden: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $gt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findForUpdates(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      _updatedAt: {\n        $gt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $lt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options) {\n    let showThreadMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let inclusive = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        [inclusive ? '$lte' : '$lt']: timestamp\n      }\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types, options) {\n    let showThreadMessages = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let inclusive = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        [inclusive ? '$gte' : '$gt']: afterTimestamp,\n        [inclusive ? '$lte' : '$lt']: beforeTimestamp\n      }\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      $or: [{\n        ts: {\n          $gt: timestamp\n        }\n      }, {\n        editedAt: {\n          $gt: timestamp\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findStarredByUserAtRoom(userId, roomId, options) {\n    const query = {\n      '_hidden': {\n        $ne: true\n      },\n      'starred._id': userId,\n      'rid': roomId\n    };\n    return this.find(query, options);\n  }\n\n  findPinnedByRoom(roomId, options) {\n    const query = {\n      t: {\n        $ne: 'rm'\n      },\n      _hidden: {\n        $ne: true\n      },\n      pinned: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  findSnippetedByRoom(roomId, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      snippeted: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  getLastTimestamp() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fields: {\n        _id: 0,\n        ts: 1\n      }\n    };\n    options.sort = {\n      ts: -1\n    };\n    options.limit = 1;\n    const [message] = this.find({}, options).fetch();\n    return message === null || message === void 0 ? void 0 : message.ts;\n  }\n\n  findByRoomIdAndMessageIds(rid, messageIds, options) {\n    const query = {\n      rid,\n      _id: {\n        $in: messageIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {\n    const query = {\n      slackBotId,\n      slackTs\n    };\n    return this.findOne(query);\n  }\n\n  findOneBySlackTs(slackTs) {\n    const query = {\n      slackTs\n    };\n    return this.findOne(query);\n  }\n\n  findOneByRoomIdAndMessageId(rid, messageId, options) {\n    const query = {\n      rid,\n      _id: messageId\n    };\n    return this.findOne(query, options);\n  }\n\n  findByRoomIdAndType(roomId, type, options) {\n    const query = {\n      rid: roomId,\n      t: type\n    };\n\n    if (options == null) {\n      options = {};\n    }\n\n    return this.find(query, options);\n  }\n\n  findByRoomId(roomId, options) {\n    const query = {\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  getLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {\n    const query = {\n      rid,\n      _hidden: {\n        $ne: true\n      },\n      t: {\n        $exists: false\n      },\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    };\n\n    if (messageId) {\n      query._id = {\n        $ne: messageId\n      };\n    }\n\n    const options = {\n      sort: {\n        ts: -1\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  cloneAndSaveAsHistoryById(_id, user) {\n    const record = this.findOneById(_id);\n    record._hidden = true;\n    record.parent = record._id;\n    record.editedAt = new Date();\n    record.editedBy = {\n      _id: user._id,\n      username: user.username\n    };\n    delete record._id;\n    return this.insert(record);\n  } // UPDATE\n\n\n  setHiddenById(_id, hidden) {\n    if (hidden == null) {\n      hidden = true;\n    }\n\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        _hidden: hidden\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAsDeletedByIdAndUser(_id, user) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        msg: '',\n        t: 'rm',\n        urls: [],\n        mentions: [],\n        attachments: [],\n        reactions: [],\n        editedAt: new Date(),\n        editedBy: {\n          _id: user._id,\n          username: user.username\n        }\n      },\n      $unset: {\n        md: 1,\n        blocks: 1,\n        tshow: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {\n    if (pinned == null) {\n      pinned = true;\n    }\n\n    if (pinnedAt == null) {\n      pinnedAt = 0;\n    }\n\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        pinned,\n        pinnedAt: pinnedAt || new Date(),\n        pinnedBy\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {\n    if (snippeted == null) {\n      snippeted = true;\n    }\n\n    if (snippetedAt == null) {\n      snippetedAt = 0;\n    }\n\n    const query = {\n      _id: message._id\n    };\n    const msg = \"```\".concat(message.msg, \"```\");\n    const update = {\n      $set: {\n        msg,\n        snippeted,\n        snippetedAt: snippetedAt || new Date(),\n        snippetedBy,\n        snippetName\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setUrlsById(_id, urls) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        urls\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateAllUsernamesByUserId(userId, username) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'u.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateUsernameOfEditByUserId(userId, username) {\n    const query = {\n      'editedBy._id': userId\n    };\n    const update = {\n      $set: {\n        'editedBy.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {\n    const query = {\n      _id,\n      'mentions.username': oldUsername\n    };\n    const update = {\n      $set: {\n        'mentions.$.username': newUsername,\n        'msg': newMessage\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateUserStarById(_id, userId, starred) {\n    let update;\n    const query = {\n      _id\n    };\n\n    if (starred) {\n      update = {\n        $addToSet: {\n          starred: {\n            _id: userId\n          }\n        }\n      };\n    } else {\n      update = {\n        $pull: {\n          starred: {\n            _id: userId\n          }\n        }\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  upgradeEtsToEditAt() {\n    const query = {\n      ets: {\n        $exists: 1\n      }\n    };\n    const update = {\n      $rename: {\n        ets: 'editedAt'\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setMessageAttachments(_id, attachments) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        attachments\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        slackBotId,\n        slackTs\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unlinkUserId(userId, newUserId, newUsername, newNameAlias) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'alias': newNameAlias,\n        'u._id': newUserId,\n        'u.username': newUsername,\n        'u.name': undefined\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  } // INSERT\n\n\n  createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    _.extend(record, extraData);\n\n    record._id = this.insertOrUpsert(record);\n    Rooms.incMsgCountById(roomId, 1);\n    return record;\n  }\n\n  createNavigationHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_navigation_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    _.extend(record, extraData);\n\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createTransferHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_transfer_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    Object.assign(record, extraData);\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createTranscriptHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_transcript_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    Object.assign(record, extraData);\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createUserJoinWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);\n  }\n\n  createUserJoinTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ujt', roomId, message, user, extraData);\n  }\n\n  createUserJoinWithRoomIdAndUserDiscussion(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ut', roomId, message, user, extraData);\n  }\n\n  createUserLeaveWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);\n  }\n\n  createUserLeaveTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ult', roomId, message, user, extraData);\n  }\n\n  createUserRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);\n  }\n\n  createUserAddedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);\n  }\n\n  createCommandWithRoomIdAndUser(command, roomId, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);\n  }\n\n  createUserMutedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);\n  }\n\n  createUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);\n  }\n\n  createNewModeratorWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);\n  }\n\n  createModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);\n  }\n\n  createNewOwnerWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);\n  }\n\n  createOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);\n  }\n\n  createNewLeaderWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);\n  }\n\n  createLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);\n  }\n\n  createSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);\n  }\n\n  createSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);\n  } // REMOVE\n\n\n  removeById(_id) {\n    const query = {\n      _id\n    };\n    return this.remove(query);\n  }\n\n  removeByRoomId(roomId) {\n    const query = {\n      rid: roomId\n    };\n    return this.remove(query);\n  }\n\n  removeByRoomIds(rids) {\n    return this.remove({\n      rid: {\n        $in: rids\n      }\n    });\n  }\n\n  findThreadsByRoomIdPinnedTimestampAndUsers(_ref, options) {\n    let {\n      rid,\n      pinned,\n      ignoreDiscussion = true,\n      ts,\n      users = []\n    } = _ref;\n    const query = {\n      rid,\n      ts,\n      tlm: {\n        $exists: 1\n      },\n      tcount: {\n        $exists: 1\n      }\n    };\n\n    if (pinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (users.length > 0) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  removeByIdPinnedTimestampLimitAndUsers(rid, pinned) {\n    let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ts = arguments.length > 3 ? arguments[3] : undefined;\n    let limit = arguments.length > 4 ? arguments[4] : undefined;\n    let users = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    let ignoreThreads = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n    const query = {\n      rid,\n      ts\n    };\n\n    if (pinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (ignoreThreads) {\n      query.tmid = {\n        $exists: 0\n      };\n      query.tcount = {\n        $exists: 0\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    if (!limit) {\n      const count = this.remove(query); // decrease message count\n\n      Rooms.decreaseMessageCountById(rid, count);\n      return count;\n    }\n\n    const messagesToDelete = this.find(query, {\n      fields: {\n        _id: 1\n      },\n      limit\n    }).map(_ref2 => {\n      let {\n        _id\n      } = _ref2;\n      return _id;\n    });\n    const count = this.remove({\n      _id: {\n        $in: messagesToDelete\n      }\n    }); // decrease message count\n\n    Rooms.decreaseMessageCountById(rid, count);\n    return count;\n  }\n\n  removeByUserId(userId) {\n    const query = {\n      'u._id': userId\n    };\n    return this.remove(query);\n  }\n\n  getMessageByFileId(fileID) {\n    return this.findOne({\n      'file._id': fileID\n    });\n  }\n\n  getMessageByFileIdAndUsername(fileID, userId) {\n    const query = {\n      'file._id': fileID,\n      'u._id': userId\n    };\n    const options = {\n      fields: {\n        unread: 0,\n        mentions: 0,\n        channels: 0,\n        groupable: 0\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  setAsRead(rid, until) {\n    return this.update({\n      rid,\n      unread: true,\n      ts: {\n        $lt: until\n      }\n    }, {\n      $unset: {\n        unread: 1\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  setAsReadById(_id) {\n    return this.update({\n      _id\n    }, {\n      $unset: {\n        unread: 1\n      }\n    });\n  }\n\n  findUnreadMessagesByRoomAndDate(rid, after) {\n    const query = {\n      unread: true,\n      rid\n    };\n\n    if (after) {\n      query.ts = {\n        $gt: after\n      };\n    }\n\n    return this.find(query, {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n  /**\n   * Copy metadata from the discussion to the system message in the parent channel\n   * which links to the discussion.\n   * Since we don't pass this metadata into the model's function, it is not a subject\n   * to race conditions: If multiple updates occur, the current state will be updated\n   * only if the new state of the discussion room is really newer.\n   */\n\n\n  refreshDiscussionMetadata(_ref3) {\n    let {\n      rid\n    } = _ref3;\n\n    if (!rid) {\n      return false;\n    }\n\n    const {\n      lm: dlm,\n      msgs: dcount\n    } = Rooms.findOneById(rid, {\n      fields: {\n        msgs: 1,\n        lm: 1\n      }\n    });\n    const query = {\n      drid: rid\n    };\n    return this.update(query, {\n      $set: {\n        dcount,\n        dlm\n      }\n    }, {\n      multi: 1\n    });\n  } // //////////////////////////////////////////////////////////////////\n  // threads\n\n\n  countThreads() {\n    return this.find({\n      tcount: {\n        $exists: true\n      }\n    }).count();\n  }\n\n  removeThreadRefByThreadId(tmid) {\n    const query = {\n      tmid\n    };\n    const update = {\n      $unset: {\n        tmid: 1\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateRepliesByThreadId(tmid, replies, ts) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $addToSet: {\n        replies: {\n          $each: replies\n        }\n      },\n      $set: {\n        tlm: ts\n      },\n      $inc: {\n        tcount: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  getThreadFollowsByThreadId(tmid) {\n    const msg = this.findOneById(tmid, {\n      fields: {\n        replies: 1\n      }\n    });\n    return msg && msg.replies;\n  }\n\n  getFirstReplyTsByThreadId(tmid) {\n    return this.findOne({\n      tmid\n    }, {\n      fields: {\n        ts: 1\n      },\n      sort: {\n        ts: 1\n      }\n    });\n  }\n\n  unsetThreadByThreadId(tmid) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $unset: {\n        tcount: 1,\n        tlm: 1,\n        replies: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateThreadLastMessageAndCountByThreadId(tmid, tlm, tcount) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $set: {\n        tlm\n      },\n      $inc: {\n        tcount\n      }\n    };\n    return this.update(query, update);\n  }\n\n  addThreadFollowerByThreadId(tmid, userId) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $addToSet: {\n        replies: userId\n      }\n    };\n    return this.update(query, update);\n  }\n\n  removeThreadFollowerByThreadId(tmid, userId) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $pull: {\n        replies: userId\n      }\n    };\n    return this.update(query, update);\n  }\n\n  findThreadsByRoomId(rid, skip, limit) {\n    return this.find({\n      rid,\n      tcount: {\n        $exists: true\n      }\n    }, {\n      sort: {\n        tlm: -1\n      },\n      skip,\n      limit\n    });\n  }\n\n  findAgentLastMessageByVisitorLastMessageTs(roomId, visitorLastMessageTs) {\n    const query = {\n      rid: roomId,\n      ts: {\n        $gt: visitorLastMessageTs\n      },\n      token: {\n        $exists: false\n      }\n    };\n    return this.findOne(query, {\n      sort: {\n        ts: 1\n      }\n    });\n  }\n\n  findAllImportedMessagesWithFilesToDownload() {\n    const query = {\n      '_importFile.downloadUrl': {\n        $exists: true\n      },\n      '_importFile.rocketChatUrl': {\n        $exists: false\n      },\n      '_importFile.downloaded': {\n        $ne: true\n      },\n      '_importFile.external': {\n        $ne: true\n      }\n    };\n    return this.find(query);\n  }\n\n  decreaseReplyCountById(_id) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const query = {\n      _id\n    };\n    const update = {\n      $inc: {\n        tcount: inc\n      }\n    };\n    return this.update(query, update);\n  }\n\n}\n\nmodule.exportDefault(new Messages());","map":{"version":3,"sources":["app/models/server/models/Messages.js"],"names":["_objectSpread","module","link","default","v","export","Messages","Match","_","Base","Rooms","settings","constructor","addAttachmentTranslations","messageId","attachmentIndex","translations","updateObj","Object","keys","forEach","key","translation","update","_id","$set","tryEnsureIndex","rid","ts","_updatedAt","editedAt","sparse","expireAt","expireAfterSeconds","msg","pinned","snippeted","location","slackTs","slackBotId","unread","drid","tmid","tcount","tlm","partialFilterExpression","$exists","setReactions","reactions","keepHistoryForToken","token","$unset","multi","setRoomIdByToken","createRoomArchivedByRoomIdAndUser","roomId","user","createWithTypeRoomIdMessageAndUser","createRoomUnarchivedByRoomIdAndUser","createRoomSetReadOnlyByRoomIdAndUser","createRoomRemovedReadOnlyByRoomIdAndUser","createRoomAllowedReactingByRoomIdAndUser","createRoomDisallowedReactingByRoomIdAndUser","unsetReactions","deleteOldOTRMessages","query","t","$lte","remove","updateOTRAck","otrAck","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","type","message","extraData","createRoomRenamedWithRoomIdRoomNameAndUser","roomName","addTranslations","providerName","translationProvider","setImportFileRocketChatAttachment","importFileId","rocketChatUrl","attachment","$addToSet","attachments","countVisibleByRoomIdBetweenTimestampsInclusive","afterTimestamp","beforeTimestamp","options","_hidden","$ne","$gte","find","count","findByMention","username","findFilesByUserId","userId","fields","findFilesByRoomIdPinnedTimestampAndUsers","excludePinned","ignoreDiscussion","users","ignoreThreads","length","$in","findDiscussionByRoomIdPinnedTimestampAndUsers","findVisibleByMentionAndRoomId","findVisibleByRoomId","findVisibleByIds","ids","findVisibleThreadByThreadId","findVisibleByRoomIdNotContainingTypes","types","showThreadMessages","$or","tshow","test","String","$nin","findInvisibleByRoomId","findVisibleByRoomIdAfterTimestamp","timestamp","$gt","findForUpdates","findVisibleByRoomIdBeforeTimestamp","$lt","findVisibleByRoomIdBeforeTimestampNotContainingTypes","inclusive","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","findVisibleCreatedOrEditedAfterTimestamp","findStarredByUserAtRoom","findPinnedByRoom","findSnippetedByRoom","getLastTimestamp","sort","limit","fetch","findByRoomIdAndMessageIds","messageIds","findOneBySlackBotIdAndSlackTs","findOne","findOneBySlackTs","findOneByRoomIdAndMessageId","findByRoomIdAndType","findByRoomId","getLastVisibleMessageSentWithNoTypeByRoomId","cloneAndSaveAsHistoryById","record","findOneById","parent","Date","editedBy","insert","setHiddenById","hidden","setAsDeletedByIdAndUser","urls","mentions","md","blocks","setPinnedByIdAndUserId","pinnedBy","pinnedAt","setSnippetedByIdAndUserId","snippetName","snippetedBy","snippetedAt","setUrlsById","updateAllUsernamesByUserId","updateUsernameOfEditByUserId","updateUsernameAndMessageOfMentionByIdAndOldUsername","oldUsername","newUsername","newMessage","updateUserStarById","starred","$pull","upgradeEtsToEditAt","ets","$rename","setMessageAttachments","setSlackBotIdAndSlackTs","unlinkUserId","newUserId","newNameAlias","undefined","u","groupable","get","extend","insertOrUpsert","incMsgCountById","createNavigationHistoryWithRoomIdMessageAndUser","createTransferHistoryWithRoomIdMessageAndUser","assign","createTranscriptHistoryWithRoomIdMessageAndUser","createUserJoinWithRoomIdAndUser","createUserJoinTeamWithRoomIdAndUser","createUserJoinWithRoomIdAndUserDiscussion","createUserLeaveWithRoomIdAndUser","createUserLeaveTeamWithRoomIdAndUser","createUserRemovedWithRoomIdAndUser","createUserAddedWithRoomIdAndUser","createCommandWithRoomIdAndUser","command","createUserMutedWithRoomIdAndUser","createUserUnmutedWithRoomIdAndUser","createNewModeratorWithRoomIdAndUser","createModeratorRemovedWithRoomIdAndUser","createNewOwnerWithRoomIdAndUser","createOwnerRemovedWithRoomIdAndUser","createNewLeaderWithRoomIdAndUser","createLeaderRemovedWithRoomIdAndUser","createSubscriptionRoleAddedWithRoomIdAndUser","createSubscriptionRoleRemovedWithRoomIdAndUser","removeById","removeByRoomId","removeByRoomIds","rids","findThreadsByRoomIdPinnedTimestampAndUsers","removeByIdPinnedTimestampLimitAndUsers","decreaseMessageCountById","messagesToDelete","map","removeByUserId","getMessageByFileId","fileID","getMessageByFileIdAndUsername","channels","setAsRead","until","setAsReadById","findUnreadMessagesByRoomAndDate","after","refreshDiscussionMetadata","lm","dlm","msgs","dcount","countThreads","removeThreadRefByThreadId","updateRepliesByThreadId","replies","$each","$inc","getThreadFollowsByThreadId","getFirstReplyTsByThreadId","unsetThreadByThreadId","updateThreadLastMessageAndCountByThreadId","addThreadFollowerByThreadId","removeThreadFollowerByThreadId","findThreadsByRoomId","skip","findAgentLastMessageByVisitorLastMessageTs","visitorLastMessageTs","findAllImportedMessagesWithFilesToDownload","decreaseReplyCountById","inc","exportDefault"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { Base } from './_Base';\nimport Rooms from './Rooms';\nimport { settings } from '../../../settings/server/functions/settings';\n\nexport class Messages extends Base {\n\tconstructor() {\n\t\tsuper('message');\n\n\t\tthis.tryEnsureIndex({ rid: 1, ts: 1, _updatedAt: 1 });\n\t\tthis.tryEnsureIndex({ ts: 1 });\n\t\tthis.tryEnsureIndex({ 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ editedAt: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'editedBy._id': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 't': 1, 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ expireAt: 1 }, { expireAfterSeconds: 0 });\n\t\tthis.tryEnsureIndex({ msg: 'text' });\n\t\tthis.tryEnsureIndex({ 'file._id': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'mentions.username': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ pinned: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ snippeted: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ location: '2dsphere' });\n\t\tthis.tryEnsureIndex({ slackTs: 1, slackBotId: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ unread: 1 }, { sparse: true });\n\n\t\t// discussions\n\t\tthis.tryEnsureIndex({ drid: 1 }, { sparse: true });\n\t\t// threads\n\t\tthis.tryEnsureIndex({ tmid: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ tcount: 1, tlm: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ rid: 1, tlm: -1 }, { partialFilterExpression: { tcount: { $exists: true } } }); // used for the List Threads\n\t\tthis.tryEnsureIndex({ rid: 1, tcount: 1 }); // used for the List Threads Count\n\t\t// livechat\n\t\tthis.tryEnsureIndex({ 'navigation.token': 1 }, { sparse: true });\n\t}\n\n\tsetReactions(messageId, reactions) {\n\t\treturn this.update({ _id: messageId }, { $set: { reactions } });\n\t}\n\n\tkeepHistoryForToken(token) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'expireAt': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\texpireAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tsetRoomIdByToken(token, rid) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'rid': null,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\trid,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcreateRoomArchivedByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-archived', roomId, '', user);\n\t}\n\n\tcreateRoomUnarchivedByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-unarchived', roomId, '', user);\n\t}\n\n\tcreateRoomSetReadOnlyByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-set-read-only', roomId, '', user);\n\t}\n\n\tcreateRoomRemovedReadOnlyByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-removed-read-only', roomId, '', user);\n\t}\n\n\tcreateRoomAllowedReactingByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-allowed-reacting', roomId, '', user);\n\t}\n\n\tcreateRoomDisallowedReactingByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-disallowed-reacting', roomId, '', user);\n\t}\n\n\tunsetReactions(messageId) {\n\t\treturn this.update({ _id: messageId }, { $unset: { reactions: 1 } });\n\t}\n\n\tdeleteOldOTRMessages(roomId, ts) {\n\t\tconst query = { rid: roomId, t: 'otr', ts: { $lte: ts } };\n\t\treturn this.remove(query);\n\t}\n\n\tupdateOTRAck(_id, otrAck) {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { otrAck } };\n\t\treturn this.update(query, update);\n\t}\n\n\tcreateRoomSettingsChangedWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData);\n\t}\n\n\tcreateRoomRenamedWithRoomIdRoomNameAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('r', roomId, roomName, user, extraData);\n\t}\n\n\taddTranslations(messageId, translations, providerName) {\n\t\tconst updateObj = { translationProvider: providerName };\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`translations.${key}`] = translation;\n\t\t});\n\t\treturn this.update({ _id: messageId }, { $set: updateObj });\n\t}\n\n\taddAttachmentTranslations = function (messageId, attachmentIndex, translations) {\n\t\tconst updateObj = {};\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`attachments.${attachmentIndex}.translations.${key}`] = translation;\n\t\t});\n\t\treturn this.update({ _id: messageId }, { $set: updateObj });\n\t};\n\n\tsetImportFileRocketChatAttachment(importFileId, rocketChatUrl, attachment) {\n\t\tconst query = {\n\t\t\t'_importFile.id': importFileId,\n\t\t};\n\n\t\treturn this.update(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'_importFile.rocketChatUrl': rocketChatUrl,\n\t\t\t\t\t'_importFile.downloaded': true,\n\t\t\t\t},\n\t\t\t\t$addToSet: {\n\t\t\t\t\tattachments: attachment,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gte: afterTimestamp,\n\t\t\t\t$lte: beforeTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options).count();\n\t}\n\n\t// FIND\n\tfindByMention(username, options) {\n\t\tconst query = { 'mentions.username': username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindFilesByUserId(userId, options = {}) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\t\treturn this.find(query, { fields: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindFilesByRoomIdPinnedTimestampAndUsers(\n\t\trid,\n\t\texcludePinned,\n\t\tignoreDiscussion = true,\n\t\tts,\n\t\tusers = [],\n\t\tignoreThreads = true,\n\t\toptions = {},\n\t) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\n\t\tif (excludePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: 0 };\n\t\t\tquery.tcount = { $exists: 0 };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, { fields: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, users = [], options = {}) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\tdrid: { $exists: 1 },\n\t\t};\n\n\t\tif (excludePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByMentionAndRoomId(username, rid, options) {\n\t\tconst query = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomId(rid, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: { $in: ids },\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleThreadByThreadId(tmid, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\ttmid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypes(roomId, types, options, showThreadMessages = true) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindInvisibleByRoomId(roomId, options) {\n\t\tconst query = {\n\t\t\t_hidden: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindForUpdates(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$lt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options, showThreadMessages = true, inclusive = false) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$lte' : '$lt']: timestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId,\n\t\tafterTimestamp,\n\t\tbeforeTimestamp,\n\t\ttypes,\n\t\toptions,\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: { $ne: true },\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tts: {\n\t\t\t\t\t\t$gt: timestamp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\teditedAt: {\n\t\t\t\t\t\t$gt: timestamp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindStarredByUserAtRoom(userId, roomId, options) {\n\t\tconst query = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': userId,\n\t\t\t'rid': roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPinnedByRoom(roomId, options) {\n\t\tconst query = {\n\t\t\tt: { $ne: 'rm' },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindSnippetedByRoom(roomId, options) {\n\t\tconst query = {\n\t\t\t_hidden: { $ne: true },\n\t\t\tsnippeted: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastTimestamp(options = { fields: { _id: 0, ts: 1 } }) {\n\t\toptions.sort = { ts: -1 };\n\t\toptions.limit = 1;\n\t\tconst [message] = this.find({}, options).fetch();\n\t\treturn message?.ts;\n\t}\n\n\tfindByRoomIdAndMessageIds(rid, messageIds, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: {\n\t\t\t\t$in: messageIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {\n\t\tconst query = {\n\t\t\tslackBotId,\n\t\t\tslackTs,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneBySlackTs(slackTs) {\n\t\tconst query = { slackTs };\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid, messageId, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByRoomIdAndType(roomId, type, options) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: type,\n\t\t};\n\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId, options) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $exists: false },\n\t\t\t$or: [{ tmid: { $exists: false } }, { tshow: true }],\n\t\t};\n\n\t\tif (messageId) {\n\t\t\tquery._id = { $ne: messageId };\n\t\t}\n\n\t\tconst options = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcloneAndSaveAsHistoryById(_id, user) {\n\t\tconst record = this.findOneById(_id);\n\t\trecord._hidden = true;\n\t\trecord.parent = record._id;\n\t\trecord.editedAt = new Date();\n\t\trecord.editedBy = {\n\t\t\t_id: user._id,\n\t\t\tusername: user.username,\n\t\t};\n\t\tdelete record._id;\n\t\treturn this.insert(record);\n\t}\n\n\t// UPDATE\n\tsetHiddenById(_id, hidden) {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAsDeletedByIdAndUser(_id, user) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: [],\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {\n\t\tif (pinned == null) {\n\t\t\tpinned = true;\n\t\t}\n\t\tif (pinnedAt == null) {\n\t\t\tpinnedAt = 0;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tpinned,\n\t\t\t\tpinnedAt: pinnedAt || new Date(),\n\t\t\t\tpinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {\n\t\tif (snippeted == null) {\n\t\t\tsnippeted = true;\n\t\t}\n\t\tif (snippetedAt == null) {\n\t\t\tsnippetedAt = 0;\n\t\t}\n\t\tconst query = { _id: message._id };\n\n\t\tconst msg = `\\`\\`\\`${message.msg}\\`\\`\\``;\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmsg,\n\t\t\t\tsnippeted,\n\t\t\t\tsnippetedAt: snippetedAt || new Date(),\n\t\t\t\tsnippetedBy,\n\t\t\t\tsnippetName,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetUrlsById(_id, urls) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\turls,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateAllUsernamesByUserId(userId, username) {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateUsernameOfEditByUserId(userId, username) {\n\t\tconst query = { 'editedBy._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'editedBy.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'mentions.username': oldUsername,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'mentions.$.username': newUsername,\n\t\t\t\t'msg': newMessage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateUserStarById(_id, userId, starred) {\n\t\tlet update;\n\t\tconst query = { _id };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupgradeEtsToEditAt() {\n\t\tconst query = { ets: { $exists: 1 } };\n\n\t\tconst update = {\n\t\t\t$rename: {\n\t\t\t\tets: 'editedAt',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetMessageAttachments(_id, attachments) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tslackBotId,\n\t\t\t\tslackTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunlinkUserId(userId, newUserId, newUsername, newNameAlias) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'alias': newNameAlias,\n\t\t\t\t'u._id': newUserId,\n\t\t\t\t'u.username': newUsername,\n\t\t\t\t'u.name': undefined,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\t// INSERT\n\tcreateWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\n\t\t_.extend(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\tRooms.incMsgCountById(roomId, 1);\n\t\treturn record;\n\t}\n\n\tcreateNavigationHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_navigation_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\n\t\t_.extend(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateTransferHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_transfer_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\t\tObject.assign(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateTranscriptHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_transcript_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\t\tObject.assign(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateUserJoinWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);\n\t}\n\n\tcreateUserJoinTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ujt', roomId, message, user, extraData);\n\t}\n\n\tcreateUserJoinWithRoomIdAndUserDiscussion(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ut', roomId, message, user, extraData);\n\t}\n\n\tcreateUserLeaveWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);\n\t}\n\n\tcreateUserLeaveTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ult', roomId, message, user, extraData);\n\t}\n\n\tcreateUserRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);\n\t}\n\n\tcreateUserAddedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);\n\t}\n\n\tcreateCommandWithRoomIdAndUser(command, roomId, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);\n\t}\n\n\tcreateUserMutedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);\n\t}\n\n\tcreateUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);\n\t}\n\n\tcreateNewModeratorWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);\n\t}\n\n\tcreateModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateNewOwnerWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);\n\t}\n\n\tcreateOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateNewLeaderWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);\n\t}\n\n\tcreateLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);\n\t}\n\n\tcreateSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\tconst query = { _id };\n\n\t\treturn this.remove(query);\n\t}\n\n\tremoveByRoomId(roomId) {\n\t\tconst query = { rid: roomId };\n\n\t\treturn this.remove(query);\n\t}\n\n\tremoveByRoomIds(rids) {\n\t\treturn this.remove({ rid: { $in: rids } });\n\t}\n\n\tfindThreadsByRoomIdPinnedTimestampAndUsers({ rid, pinned, ignoreDiscussion = true, ts, users = [] }, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\ttlm: { $exists: 1 },\n\t\t\ttcount: { $exists: 1 },\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length > 0) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tremoveByIdPinnedTimestampLimitAndUsers(rid, pinned, ignoreDiscussion = true, ts, limit, users = [], ignoreThreads = true) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: 0 };\n\t\t\tquery.tcount = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\tif (!limit) {\n\t\t\tconst count = this.remove(query);\n\n\t\t\t// decrease message count\n\t\t\tRooms.decreaseMessageCountById(rid, count);\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst messagesToDelete = this.find(query, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t\tlimit,\n\t\t}).map(({ _id }) => _id);\n\n\t\tconst count = this.remove({\n\t\t\t_id: {\n\t\t\t\t$in: messagesToDelete,\n\t\t\t},\n\t\t});\n\n\t\t// decrease message count\n\t\tRooms.decreaseMessageCountById(rid, count);\n\n\t\treturn count;\n\t}\n\n\tremoveByUserId(userId) {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.remove(query);\n\t}\n\n\tgetMessageByFileId(fileID) {\n\t\treturn this.findOne({ 'file._id': fileID });\n\t}\n\n\tgetMessageByFileIdAndUsername(fileID, userId) {\n\t\tconst query = {\n\t\t\t'file._id': fileID,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\tunread: 0,\n\t\t\t\tmentions: 0,\n\t\t\t\tchannels: 0,\n\t\t\t\tgroupable: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetAsRead(rid, until) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAsReadById(_id) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindUnreadMessagesByRoomAndDate(rid, after) {\n\t\tconst query = {\n\t\t\tunread: true,\n\t\t\trid,\n\t\t};\n\n\t\tif (after) {\n\t\t\tquery.ts = { $gt: after };\n\t\t}\n\n\t\treturn this.find(query, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Copy metadata from the discussion to the system message in the parent channel\n\t * which links to the discussion.\n\t * Since we don't pass this metadata into the model's function, it is not a subject\n\t * to race conditions: If multiple updates occur, the current state will be updated\n\t * only if the new state of the discussion room is really newer.\n\t */\n\trefreshDiscussionMetadata({ rid }) {\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst { lm: dlm, msgs: dcount } = Rooms.findOneById(rid, {\n\t\t\tfields: {\n\t\t\t\tmsgs: 1,\n\t\t\t\tlm: 1,\n\t\t\t},\n\t\t});\n\n\t\tconst query = {\n\t\t\tdrid: rid,\n\t\t};\n\n\t\treturn this.update(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdcount,\n\t\t\t\t\tdlm,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ multi: 1 },\n\t\t);\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tcountThreads() {\n\t\treturn this.find({ tcount: { $exists: true } }).count();\n\t}\n\n\tremoveThreadRefByThreadId(tmid) {\n\t\tconst query = { tmid };\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateRepliesByThreadId(tmid, replies, ts) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: {\n\t\t\t\t\t$each: replies,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\ttlm: ts,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tgetThreadFollowsByThreadId(tmid) {\n\t\tconst msg = this.findOneById(tmid, { fields: { replies: 1 } });\n\t\treturn msg && msg.replies;\n\t}\n\n\tgetFirstReplyTsByThreadId(tmid) {\n\t\treturn this.findOne({ tmid }, { fields: { ts: 1 }, sort: { ts: 1 } });\n\t}\n\n\tunsetThreadByThreadId(tmid) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\ttcount: 1,\n\t\t\t\ttlm: 1,\n\t\t\t\treplies: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateThreadLastMessageAndCountByThreadId(tmid, tlm, tcount) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\ttlm,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\taddThreadFollowerByThreadId(tmid, userId) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tremoveThreadFollowerByThreadId(tmid, userId) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tfindThreadsByRoomId(rid, skip, limit) {\n\t\treturn this.find({ rid, tcount: { $exists: true } }, { sort: { tlm: -1 }, skip, limit });\n\t}\n\n\tfindAgentLastMessageByVisitorLastMessageTs(roomId, visitorLastMessageTs) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tts: { $gt: visitorLastMessageTs },\n\t\t\ttoken: { $exists: false },\n\t\t};\n\n\t\treturn this.findOne(query, { sort: { ts: 1 } });\n\t}\n\n\tfindAllImportedMessagesWithFilesToDownload() {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tdecreaseReplyCountById(_id, inc = -1) {\n\t\tconst query = { _id };\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\ttcount: inc,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update);\n\t}\n}\n\nexport default new Messages();\n"]},"sourceType":"module","hash":"8b925b001db24250d7bfbb556242224a489efb81"}
