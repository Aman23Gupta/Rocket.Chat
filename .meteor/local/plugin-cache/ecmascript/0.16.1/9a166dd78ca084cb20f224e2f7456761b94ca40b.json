{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/updateGroupDMsName.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/updateGroupDMsName.js"}},"code":"module.export({\n  updateGroupDMsName: () => updateGroupDMsName\n});\nlet Rooms, Subscriptions, Users;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 0);\n\nconst getFname = members => members.map(_ref => {\n  let {\n    name,\n    username\n  } = _ref;\n  return name || username;\n}).join(', ');\n\nconst getName = members => members.map(_ref2 => {\n  let {\n    username\n  } = _ref2;\n  return username;\n}).join(',');\n\nfunction getUsersWhoAreInTheSameGroupDMsAs(user) {\n  // add all users to single array so we can fetch details from them all at once\n  const rooms = Rooms.findGroupDMsByUids(user._id, {\n    fields: {\n      uids: 1\n    }\n  });\n\n  if (rooms.count() === 0) {\n    return;\n  }\n\n  const userIds = new Set();\n  const users = new Map();\n  rooms.forEach(room => room.uids.forEach(uid => uid !== user._id && userIds.add(uid)));\n  Users.findByIds([...userIds], {\n    fields: {\n      username: 1,\n      name: 1\n    }\n  }).forEach(user => users.set(user._id, user));\n  return users;\n}\n\nfunction sortUsersAlphabetically(u1, u2) {\n  return (u1.name || u1.username).localeCompare(u2.name || u2.username);\n}\n\nconst updateGroupDMsName = userThatChangedName => {\n  if (!userThatChangedName.username) {\n    return;\n  }\n\n  const users = getUsersWhoAreInTheSameGroupDMsAs(userThatChangedName);\n\n  if (!users) {\n    return;\n  }\n\n  users.set(userThatChangedName._id, userThatChangedName);\n  const rooms = Rooms.findGroupDMsByUids(userThatChangedName._id, {\n    fields: {\n      uids: 1\n    }\n  });\n\n  const getMembers = uids => uids.map(uid => users.get(uid)).filter(Boolean); // loop rooms to update the subcriptions from them all\n\n\n  rooms.forEach(room => {\n    const members = getMembers(room.uids);\n    const sortedMembers = members.sort(sortUsersAlphabetically);\n    const subs = Subscriptions.findByRoomId(room._id, {\n      fields: {\n        '_id': 1,\n        'u._id': 1\n      }\n    });\n    subs.forEach(sub => {\n      const otherMembers = sortedMembers.filter(_ref3 => {\n        let {\n          _id\n        } = _ref3;\n        return _id !== sub.u._id;\n      });\n      Subscriptions.updateNameAndFnameById(sub._id, getName(otherMembers), getFname(otherMembers));\n    });\n  });\n};","map":{"version":3,"sources":["app/lib/server/functions/updateGroupDMsName.js"],"names":["module","export","updateGroupDMsName","Rooms","Subscriptions","Users","link","v","getFname","members","map","name","username","join","getName","getUsersWhoAreInTheSameGroupDMsAs","user","rooms","findGroupDMsByUids","_id","fields","uids","count","userIds","Set","users","Map","forEach","room","uid","add","findByIds","set","sortUsersAlphabetically","u1","u2","localeCompare","userThatChangedName","getMembers","get","filter","Boolean","sortedMembers","sort","subs","findByRoomId","sub","otherMembers","u","updateNameAndFnameById"],"mappings":"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","sourcesContent":["import { Rooms, Subscriptions, Users } from '../../../models/server';\n\nconst getFname = (members) => members.map(({ name, username }) => name || username).join(', ');\nconst getName = (members) => members.map(({ username }) => username).join(',');\n\nfunction getUsersWhoAreInTheSameGroupDMsAs(user) {\n\t// add all users to single array so we can fetch details from them all at once\n\tconst rooms = Rooms.findGroupDMsByUids(user._id, { fields: { uids: 1 } });\n\tif (rooms.count() === 0) {\n\t\treturn;\n\t}\n\n\tconst userIds = new Set();\n\tconst users = new Map();\n\n\trooms.forEach((room) => room.uids.forEach((uid) => uid !== user._id && userIds.add(uid)));\n\n\tUsers.findByIds([...userIds], { fields: { username: 1, name: 1 } }).forEach((user) => users.set(user._id, user));\n\n\treturn users;\n}\n\nfunction sortUsersAlphabetically(u1, u2) {\n\treturn (u1.name || u1.username).localeCompare(u2.name || u2.username);\n}\n\nexport const updateGroupDMsName = (userThatChangedName) => {\n\tif (!userThatChangedName.username) {\n\t\treturn;\n\t}\n\n\tconst users = getUsersWhoAreInTheSameGroupDMsAs(userThatChangedName);\n\tif (!users) {\n\t\treturn;\n\t}\n\n\tusers.set(userThatChangedName._id, userThatChangedName);\n\n\tconst rooms = Rooms.findGroupDMsByUids(userThatChangedName._id, { fields: { uids: 1 } });\n\n\tconst getMembers = (uids) => uids.map((uid) => users.get(uid)).filter(Boolean);\n\n\t// loop rooms to update the subcriptions from them all\n\trooms.forEach((room) => {\n\t\tconst members = getMembers(room.uids);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { fields: { '_id': 1, 'u._id': 1 } });\n\t\tsubs.forEach((sub) => {\n\t\t\tconst otherMembers = sortedMembers.filter(({ _id }) => _id !== sub.u._id);\n\t\t\tSubscriptions.updateNameAndFnameById(sub._id, getName(otherMembers), getFname(otherMembers));\n\t\t});\n\t});\n};\n"]},"sourceType":"module","hash":"9a166dd78ca084cb20f224e2f7456761b94ca40b"}
