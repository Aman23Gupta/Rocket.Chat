{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/hooks/afterAddedToRoom.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/hooks/afterAddedToRoom.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/hooks/afterAddedToRoom.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/hooks/afterAddedToRoom.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/hooks/afterAddedToRoom.js"}},"code":"module.export({\n  definition: () => definition\n});\nlet clientLogger;\nmodule.link(\"../lib/logger\", {\n  clientLogger(v) {\n    clientLogger = v;\n  }\n\n}, 0);\nlet getFederatedRoomData, hasExternalDomain, isLocalUser, checkRoomType, checkRoomDomainsLength;\nmodule.link(\"../functions/helpers\", {\n  getFederatedRoomData(v) {\n    getFederatedRoomData = v;\n  },\n\n  hasExternalDomain(v) {\n    hasExternalDomain = v;\n  },\n\n  isLocalUser(v) {\n    isLocalUser = v;\n  },\n\n  checkRoomType(v) {\n    checkRoomType = v;\n  },\n\n  checkRoomDomainsLength(v) {\n    checkRoomDomainsLength = v;\n  }\n\n}, 1);\nlet FederationRoomEvents, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  FederationRoomEvents(v) {\n    FederationRoomEvents = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nlet normalizers;\nmodule.link(\"../normalizers\", {\n  normalizers(v) {\n    normalizers = v;\n  }\n\n}, 3);\nlet doAfterCreateRoom;\nmodule.link(\"./afterCreateRoom\", {\n  doAfterCreateRoom(v) {\n    doAfterCreateRoom = v;\n  }\n\n}, 4);\nlet getFederationDomain;\nmodule.link(\"../lib/getFederationDomain\", {\n  getFederationDomain(v) {\n    getFederationDomain = v;\n  }\n\n}, 5);\nlet dispatchEvent;\nmodule.link(\"../handler\", {\n  dispatchEvent(v) {\n    dispatchEvent = v;\n  }\n\n}, 6);\n\nfunction afterAddedToRoom(involvedUsers, room) {\n  return Promise.asyncApply(() => {\n    const {\n      user: addedUser\n    } = involvedUsers;\n    const localDomain = getFederationDomain();\n\n    if (!hasExternalDomain(room) && isLocalUser(addedUser, localDomain)) {\n      return involvedUsers;\n    }\n\n    clientLogger.debug({\n      msg: 'afterAddedToRoom',\n      involvedUsers,\n      room\n    }); // If there are not federated users on this room, ignore it\n\n    const {\n      users,\n      subscriptions\n    } = getFederatedRoomData(room); // Load the subscription\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, addedUser._id);\n\n    try {\n      // If the room is not on the allowed types, ignore\n      if (!checkRoomType(room)) {\n        throw new Error('Channels cannot be federated');\n      } //\n      // Check if the room is already federated, if it is not, create the genesis event\n      //\n\n\n      if (!room.federation) {\n        //\n        // Create the room with everything\n        //\n        Promise.await(doAfterCreateRoom(room, users, subscriptions));\n      } else {\n        //\n        // Normalize the room's federation status\n        //\n        // Get the users domains\n        const domainsAfterAdd = [];\n        users.forEach(user => {\n          if (user.hasOwnProperty('federation') && !domainsAfterAdd.includes(user.federation.origin)) {\n            domainsAfterAdd.push(user.federation.origin);\n          }\n        }); // Check if the number of domains is allowed\n\n        if (!checkRoomDomainsLength(domainsAfterAdd)) {\n          throw new Error(\"Cannot federate rooms with more than \".concat(process.env.FEDERATED_DOMAINS_LENGTH || 10, \" domains\"));\n        } //\n        // Create the user add event\n        //\n\n\n        const normalizedSourceUser = normalizers.normalizeUser(addedUser);\n        const normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n        const addUserEvent = Promise.await(FederationRoomEvents.createAddUserEvent(localDomain, room._id, normalizedSourceUser, normalizedSourceSubscription, domainsAfterAdd)); // Dispatch the events\n\n        dispatchEvent(domainsAfterAdd, addUserEvent);\n      }\n    } catch (err) {\n      // Remove the user subscription from the room\n      Subscriptions.remove({\n        _id: subscription._id\n      });\n      clientLogger.error({\n        msg: 'afterAddedToRoom => Could not add user:',\n        err\n      });\n    }\n\n    return involvedUsers;\n  });\n}\n\nconst definition = {\n  hook: 'afterAddedToRoom',\n  callback: (roomOwner, room) => Promise.await(afterAddedToRoom(roomOwner, room)),\n  id: 'federation-after-added-to-room'\n};","map":{"version":3,"sources":["app/federation/server/hooks/afterAddedToRoom.js"],"names":["module","export","definition","clientLogger","link","v","getFederatedRoomData","hasExternalDomain","isLocalUser","checkRoomType","checkRoomDomainsLength","FederationRoomEvents","Subscriptions","normalizers","doAfterCreateRoom","getFederationDomain","dispatchEvent","afterAddedToRoom","involvedUsers","room","user","addedUser","localDomain","debug","msg","users","subscriptions","subscription","findOneByRoomIdAndUserId","_id","Error","federation","domainsAfterAdd","forEach","hasOwnProperty","includes","origin","push","process","env","FEDERATED_DOMAINS_LENGTH","normalizedSourceUser","normalizeUser","normalizedSourceSubscription","normalizeSubscription","addUserEvent","createAddUserEvent","err","remove","error","hook","callback","roomOwner","Promise","await","id"],"mappings":"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","sourcesContent":["import { clientLogger } from '../lib/logger';\nimport { getFederatedRoomData, hasExternalDomain, isLocalUser, checkRoomType, checkRoomDomainsLength } from '../functions/helpers';\nimport { FederationRoomEvents, Subscriptions } from '../../../models/server';\nimport { normalizers } from '../normalizers';\nimport { doAfterCreateRoom } from './afterCreateRoom';\nimport { getFederationDomain } from '../lib/getFederationDomain';\nimport { dispatchEvent } from '../handler';\n\nasync function afterAddedToRoom(involvedUsers, room) {\n\tconst { user: addedUser } = involvedUsers;\n\n\tconst localDomain = getFederationDomain();\n\n\tif (!hasExternalDomain(room) && isLocalUser(addedUser, localDomain)) {\n\t\treturn involvedUsers;\n\t}\n\n\tclientLogger.debug({ msg: 'afterAddedToRoom', involvedUsers, room });\n\n\t// If there are not federated users on this room, ignore it\n\tconst { users, subscriptions } = getFederatedRoomData(room);\n\n\t// Load the subscription\n\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, addedUser._id);\n\n\ttry {\n\t\t// If the room is not on the allowed types, ignore\n\t\tif (!checkRoomType(room)) {\n\t\t\tthrow new Error('Channels cannot be federated');\n\t\t}\n\n\t\t//\n\t\t// Check if the room is already federated, if it is not, create the genesis event\n\t\t//\n\t\tif (!room.federation) {\n\t\t\t//\n\t\t\t// Create the room with everything\n\t\t\t//\n\n\t\t\tawait doAfterCreateRoom(room, users, subscriptions);\n\t\t} else {\n\t\t\t//\n\t\t\t// Normalize the room's federation status\n\t\t\t//\n\n\t\t\t// Get the users domains\n\t\t\tconst domainsAfterAdd = [];\n\t\t\tusers.forEach((user) => {\n\t\t\t\tif (user.hasOwnProperty('federation') && !domainsAfterAdd.includes(user.federation.origin)) {\n\t\t\t\t\tdomainsAfterAdd.push(user.federation.origin);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if the number of domains is allowed\n\t\t\tif (!checkRoomDomainsLength(domainsAfterAdd)) {\n\t\t\t\tthrow new Error(`Cannot federate rooms with more than ${process.env.FEDERATED_DOMAINS_LENGTH || 10} domains`);\n\t\t\t}\n\n\t\t\t//\n\t\t\t// Create the user add event\n\t\t\t//\n\n\t\t\tconst normalizedSourceUser = normalizers.normalizeUser(addedUser);\n\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n\n\t\t\tconst addUserEvent = await FederationRoomEvents.createAddUserEvent(\n\t\t\t\tlocalDomain,\n\t\t\t\troom._id,\n\t\t\t\tnormalizedSourceUser,\n\t\t\t\tnormalizedSourceSubscription,\n\t\t\t\tdomainsAfterAdd,\n\t\t\t);\n\n\t\t\t// Dispatch the events\n\t\t\tdispatchEvent(domainsAfterAdd, addUserEvent);\n\t\t}\n\t} catch (err) {\n\t\t// Remove the user subscription from the room\n\t\tSubscriptions.remove({ _id: subscription._id });\n\n\t\tclientLogger.error({ msg: 'afterAddedToRoom => Could not add user:', err });\n\t}\n\n\treturn involvedUsers;\n}\n\nexport const definition = {\n\thook: 'afterAddedToRoom',\n\tcallback: (roomOwner, room) => Promise.await(afterAddedToRoom(roomOwner, room)),\n\tid: 'federation-after-added-to-room',\n};\n"]},"sourceType":"module","hash":"18bfe9c84f306f8a227ee93684c7db77c2efe02a"}
