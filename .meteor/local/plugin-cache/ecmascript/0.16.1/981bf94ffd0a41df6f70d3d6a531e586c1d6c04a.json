{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/endpoints/requestFromLatest.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/endpoints/requestFromLatest.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/endpoints/requestFromLatest.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/endpoints/requestFromLatest.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/endpoints/requestFromLatest.js"}},"code":"let EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet API;\nmodule.link(\"../../../api/server\", {\n  API(v) {\n    API = v;\n  }\n\n}, 1);\nlet serverLogger;\nmodule.link(\"../lib/logger\", {\n  serverLogger(v) {\n    serverLogger = v;\n  }\n\n}, 2);\nlet FederationRoomEvents;\nmodule.link(\"../../../models/server\", {\n  FederationRoomEvents(v) {\n    FederationRoomEvents = v;\n  }\n\n}, 3);\nlet decryptIfNeeded;\nmodule.link(\"../lib/crypt\", {\n  decryptIfNeeded(v) {\n    decryptIfNeeded = v;\n  }\n\n}, 4);\nlet isFederationEnabled;\nmodule.link(\"../lib/isFederationEnabled\", {\n  isFederationEnabled(v) {\n    isFederationEnabled = v;\n  }\n\n}, 5);\nlet dispatchEvents;\nmodule.link(\"../handler\", {\n  dispatchEvents(v) {\n    dispatchEvents = v;\n  }\n\n}, 6);\nAPI.v1.addRoute('federation.events.requestFromLatest', {\n  authRequired: false\n}, {\n  post() {\n    if (!isFederationEnabled()) {\n      return API.v1.failure('Federation not enabled');\n    } //\n    // Decrypt the payload if needed\n\n\n    let payload;\n\n    try {\n      payload = Promise.await(decryptIfNeeded(this.request, this.bodyParams));\n    } catch (err) {\n      return API.v1.failure('Could not decrypt payload');\n    }\n\n    const {\n      fromDomain,\n      contextType,\n      contextQuery,\n      latestEventIds\n    } = EJSON.fromJSONValue(payload);\n    serverLogger.debug({\n      msg: 'federation.events.requestFromLatest',\n      contextType,\n      contextQuery,\n      latestEventIds\n    });\n    let EventsModel; // Define the model for the context\n\n    switch (contextType) {\n      case 'room':\n        EventsModel = FederationRoomEvents;\n        break;\n    }\n\n    let missingEvents = [];\n\n    if (latestEventIds.length) {\n      // Get the oldest event from the latestEventIds\n      const oldestEvent = EventsModel.findOne({\n        _id: {\n          $in: latestEventIds\n        }\n      }, {\n        $sort: {\n          timestamp: 1\n        }\n      });\n\n      if (!oldestEvent) {\n        return;\n      } // Get all the missing events on this context, after the oldest one\n\n\n      missingEvents = EventsModel.find({\n        _id: {\n          $nin: latestEventIds\n        },\n        context: contextQuery,\n        timestamp: {\n          $gte: oldestEvent.timestamp\n        }\n      }, {\n        sort: {\n          timestamp: 1\n        }\n      }).fetch();\n    } else {\n      // If there are no latest events, send all of them\n      missingEvents = EventsModel.find({\n        context: contextQuery\n      }, {\n        sort: {\n          timestamp: 1\n        }\n      }).fetch();\n    } // Dispatch all the events, on the same request\n\n\n    Promise.await(dispatchEvents([fromDomain], missingEvents));\n    return API.v1.success();\n  }\n\n});","map":{"version":3,"sources":["app/federation/server/endpoints/requestFromLatest.js"],"names":["EJSON","module","link","v","API","serverLogger","FederationRoomEvents","decryptIfNeeded","isFederationEnabled","dispatchEvents","v1","addRoute","authRequired","post","failure","payload","Promise","await","request","bodyParams","err","fromDomain","contextType","contextQuery","latestEventIds","fromJSONValue","debug","msg","EventsModel","missingEvents","length","oldestEvent","findOne","_id","$in","$sort","timestamp","find","$nin","context","$gte","sort","fetch","success"],"mappings":"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","sourcesContent":["import { EJSON } from 'meteor/ejson';\n\nimport { API } from '../../../api/server';\nimport { serverLogger } from '../lib/logger';\nimport { FederationRoomEvents } from '../../../models/server';\nimport { decryptIfNeeded } from '../lib/crypt';\nimport { isFederationEnabled } from '../lib/isFederationEnabled';\nimport { dispatchEvents } from '../handler';\n\nAPI.v1.addRoute(\n\t'federation.events.requestFromLatest',\n\t{ authRequired: false },\n\t{\n\t\tpost() {\n\t\t\tif (!isFederationEnabled()) {\n\t\t\t\treturn API.v1.failure('Federation not enabled');\n\t\t\t}\n\n\t\t\t//\n\t\t\t// Decrypt the payload if needed\n\t\t\tlet payload;\n\n\t\t\ttry {\n\t\t\t\tpayload = Promise.await(decryptIfNeeded(this.request, this.bodyParams));\n\t\t\t} catch (err) {\n\t\t\t\treturn API.v1.failure('Could not decrypt payload');\n\t\t\t}\n\n\t\t\tconst { fromDomain, contextType, contextQuery, latestEventIds } = EJSON.fromJSONValue(payload);\n\n\t\t\tserverLogger.debug({\n\t\t\t\tmsg: 'federation.events.requestFromLatest',\n\t\t\t\tcontextType,\n\t\t\t\tcontextQuery,\n\t\t\t\tlatestEventIds,\n\t\t\t});\n\n\t\t\tlet EventsModel;\n\n\t\t\t// Define the model for the context\n\t\t\tswitch (contextType) {\n\t\t\t\tcase 'room':\n\t\t\t\t\tEventsModel = FederationRoomEvents;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet missingEvents = [];\n\n\t\t\tif (latestEventIds.length) {\n\t\t\t\t// Get the oldest event from the latestEventIds\n\t\t\t\tconst oldestEvent = EventsModel.findOne({ _id: { $in: latestEventIds } }, { $sort: { timestamp: 1 } });\n\n\t\t\t\tif (!oldestEvent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Get all the missing events on this context, after the oldest one\n\t\t\t\tmissingEvents = EventsModel.find(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: { $nin: latestEventIds },\n\t\t\t\t\t\tcontext: contextQuery,\n\t\t\t\t\t\ttimestamp: { $gte: oldestEvent.timestamp },\n\t\t\t\t\t},\n\t\t\t\t\t{ sort: { timestamp: 1 } },\n\t\t\t\t).fetch();\n\t\t\t} else {\n\t\t\t\t// If there are no latest events, send all of them\n\t\t\t\tmissingEvents = EventsModel.find({ context: contextQuery }, { sort: { timestamp: 1 } }).fetch();\n\t\t\t}\n\n\t\t\t// Dispatch all the events, on the same request\n\t\t\tPromise.await(dispatchEvents([fromDomain], missingEvents));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"981bf94ffd0a41df6f70d3d6a531e586c1d6c04a"}
