{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/sms/server/services/mobex.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/sms/server/services/mobex.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/sms/server/services/mobex.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/sms/server/services/mobex.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/sms/server/services/mobex.js"}},"code":"let HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 0);\nlet Base64;\nmodule.link(\"meteor/base64\", {\n  Base64(v) {\n    Base64 = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet SMS;\nmodule.link(\"../SMS\", {\n  SMS(v) {\n    SMS = v;\n  }\n\n}, 3);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 4);\n\nclass Mobex {\n  constructor() {\n    this.address = settings.get('SMS_Mobex_gateway_address');\n    this.restAddress = settings.get('SMS_Mobex_restful_address');\n    this.username = settings.get('SMS_Mobex_username');\n    this.password = settings.get('SMS_Mobex_password');\n    this.from = settings.get('SMS_Mobex_from_number');\n  }\n\n  parse(data) {\n    let numMedia = 0;\n    const returnData = {\n      from: data.from,\n      to: data.to,\n      body: data.content\n    };\n\n    if (data.NumMedia) {\n      numMedia = parseInt(data.NumMedia, 10);\n    }\n\n    if (isNaN(numMedia)) {\n      SystemLogger.error(\"Error parsing NumMedia \".concat(data.NumMedia));\n      return returnData;\n    }\n\n    returnData.media = [];\n\n    for (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n      const media = {\n        url: '',\n        contentType: ''\n      };\n      const mediaUrl = data[\"MediaUrl\".concat(mediaIndex)];\n      const contentType = data[\"MediaContentType\".concat(mediaIndex)];\n      media.url = mediaUrl;\n      media.contentType = contentType;\n      returnData.media.push(media);\n    }\n\n    return returnData;\n  }\n\n  send(fromNumber, toNumber, message) {\n    let username = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let password = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let address = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let currentFrom = this.from;\n    let currentUsername = this.username;\n    let currentAddress = this.address;\n    let currentPassword = this.password;\n\n    if (fromNumber) {\n      currentFrom = fromNumber;\n    }\n\n    if (username && password) {\n      currentUsername = username;\n      currentPassword = password;\n    }\n\n    if (address) {\n      currentAddress = address;\n    }\n\n    const strippedTo = toNumber.replace(/\\D/g, '');\n    const result = {\n      isSuccess: false,\n      resultMsg: 'An unknown error happened'\n    };\n\n    try {\n      const response = HTTP.call('GET', \"\".concat(currentAddress, \"/send?username=\").concat(currentUsername, \"&password=\").concat(currentPassword, \"&to=\").concat(strippedTo, \"&from=\").concat(currentFrom, \"&content=\").concat(message));\n\n      if (response.statusCode === 200) {\n        result.resultMsg = response.content;\n        result.isSuccess = true;\n      } else {\n        result.resultMsg = \"Could not able to send SMS. Code:  \".concat(response.statusCode);\n      }\n    } catch (e) {\n      result.resultMsg = \"Error while sending SMS with Mobex. Detail: \".concat(e);\n      SystemLogger.error('Error while sending SMS with Mobex', e);\n    }\n\n    return result;\n  }\n\n  sendBatch(fromNumber, toNumbersArr, message) {\n    return Promise.asyncApply(() => {\n      let currentFrom = this.from;\n\n      if (fromNumber) {\n        currentFrom = fromNumber;\n      }\n\n      const result = {\n        isSuccess: false,\n        resultMsg: 'An unknown error happened',\n        response: false\n      };\n      const userPass = \"\".concat(this.username, \":\").concat(this.password);\n      const authToken = Base64.encode(userPass);\n\n      try {\n        const response = Promise.await(HTTP.call('POST', \"\".concat(this.restAddress, \"/secure/sendbatch\"), {\n          headers: {\n            Authorization: \"Basic \".concat(authToken)\n          },\n          data: {\n            messages: [{\n              to: toNumbersArr,\n              from: currentFrom,\n              content: message\n            }]\n          }\n        }));\n        result.isSuccess = true;\n        result.resultMsg = 'Success';\n        result.response = response;\n      } catch (e) {\n        result.resultMsg = \"Error while sending SMS with Mobex. Detail: \".concat(e);\n        SystemLogger.error('Error while sending SMS with Mobex', e);\n      }\n\n      return result;\n    });\n  }\n\n  response() {\n    return {\n      headers: {\n        'Content-Type': 'text/xml'\n      },\n      body: 'ACK/Jasmin'\n    };\n  }\n\n  error(error) {\n    let message = '';\n\n    if (error.reason) {\n      message = \"<Message>\".concat(error.reason, \"</Message>\");\n    }\n\n    return {\n      headers: {\n        'Content-Type': 'text/xml'\n      },\n      body: \"<Response>\".concat(message, \"</Response>\")\n    };\n  }\n\n}\n\nSMS.registerService('mobex', Mobex);","map":{"version":3,"sources":["app/sms/server/services/mobex.js"],"names":["HTTP","module","link","v","Base64","settings","SMS","SystemLogger","Mobex","constructor","address","get","restAddress","username","password","from","parse","data","numMedia","returnData","to","body","content","NumMedia","parseInt","isNaN","error","media","mediaIndex","url","contentType","mediaUrl","push","send","fromNumber","toNumber","message","currentFrom","currentUsername","currentAddress","currentPassword","strippedTo","replace","result","isSuccess","resultMsg","response","call","statusCode","e","sendBatch","toNumbersArr","userPass","authToken","encode","headers","Authorization","messages","reason","registerService"],"mappings":"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","sourcesContent":["import { HTTP } from 'meteor/http';\nimport { Base64 } from 'meteor/base64';\n\nimport { settings } from '../../../settings';\nimport { SMS } from '../SMS';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\n\nclass Mobex {\n\tconstructor() {\n\t\tthis.address = settings.get('SMS_Mobex_gateway_address');\n\t\tthis.restAddress = settings.get('SMS_Mobex_restful_address');\n\t\tthis.username = settings.get('SMS_Mobex_username');\n\t\tthis.password = settings.get('SMS_Mobex_password');\n\t\tthis.from = settings.get('SMS_Mobex_from_number');\n\t}\n\n\tparse(data) {\n\t\tlet numMedia = 0;\n\n\t\tconst returnData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.content,\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tsend(fromNumber, toNumber, message, username = null, password = null, address = null) {\n\t\tlet currentFrom = this.from;\n\t\tlet currentUsername = this.username;\n\t\tlet currentAddress = this.address;\n\t\tlet currentPassword = this.password;\n\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\t\tif (username && password) {\n\t\t\tcurrentUsername = username;\n\t\t\tcurrentPassword = password;\n\t\t}\n\t\tif (address) {\n\t\t\tcurrentAddress = address;\n\t\t}\n\n\t\tconst strippedTo = toNumber.replace(/\\D/g, '');\n\t\tconst result = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call(\n\t\t\t\t'GET',\n\t\t\t\t`${currentAddress}/send?username=${currentUsername}&password=${currentPassword}&to=${strippedTo}&from=${currentFrom}&content=${message}`,\n\t\t\t);\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tresult.resultMsg = response.content;\n\t\t\t\tresult.isSuccess = true;\n\t\t\t} else {\n\t\t\t\tresult.resultMsg = `Could not able to send SMS. Code:  ${response.statusCode}`;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${e}`;\n\t\t\tSystemLogger.error('Error while sending SMS with Mobex', e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync sendBatch(fromNumber, toNumbersArr, message) {\n\t\tlet currentFrom = this.from;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\n\t\tconst result = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t\tresponse: false,\n\t\t};\n\n\t\tconst userPass = `${this.username}:${this.password}`;\n\n\t\tconst authToken = Base64.encode(userPass);\n\n\t\ttry {\n\t\t\tconst response = await HTTP.call('POST', `${this.restAddress}/secure/sendbatch`, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Basic ${authToken}`,\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tto: toNumbersArr,\n\t\t\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\t\t\tcontent: message,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tresult.isSuccess = true;\n\t\t\tresult.resultMsg = 'Success';\n\t\t\tresult.response = response;\n\t\t} catch (e) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${e}`;\n\t\t\tSystemLogger.error('Error while sending SMS with Mobex', e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tresponse(/* message */) {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: 'ACK/Jasmin',\n\t\t};\n\t}\n\n\terror(error) {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n\nSMS.registerService('mobex', Mobex);\n"]},"sourceType":"module","hash":"77901291fae7ff8d884597f5a27f017331161989"}
