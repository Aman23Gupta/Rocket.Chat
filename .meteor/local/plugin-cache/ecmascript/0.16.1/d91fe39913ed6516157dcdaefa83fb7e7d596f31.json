{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/auditing/server/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/auditing/server/methods.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/auditing/server/methods.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/auditing/server/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/auditing/server/methods.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet DDPRateLimiter;\nmodule.link(\"meteor/ddp-rate-limiter\", {\n  DDPRateLimiter(v) {\n    DDPRateLimiter = v;\n  }\n\n}, 3);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 4);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 5);\nlet AuditLog;\nmodule.link(\"./auditLog\", {\n  default(v) {\n    AuditLog = v;\n  }\n\n}, 6);\nlet LivechatRooms, Rooms, Messages, Users;\nmodule.link(\"../../../../app/models/server\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 7);\nlet hasPermission;\nmodule.link(\"../../../../app/authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 8);\n\nconst getValue = room => room && {\n  rids: [room._id],\n  name: room.name\n};\n\nconst getUsersIdFromUserName = usersName => {\n  const user = usersName && Users.findByUsername({\n    $in: usersName\n  });\n  return user.map(userId => userId._id);\n};\n\nconst getRoomInfoByAuditParams = _ref => {\n  let {\n    type,\n    roomId,\n    users,\n    visitor,\n    agent\n  } = _ref;\n\n  if (roomId) {\n    return getValue(Rooms.findOne({\n      _id: roomId\n    }));\n  }\n\n  if (type === 'd') {\n    return getValue(Rooms.findDirectRoomContainingAllUsernames(users));\n  }\n\n  if (type === 'l') {\n    console.warn('Deprecation Warning! This method will be removed in the next version (4.0.0)');\n    const rooms = LivechatRooms.findByVisitorIdAndAgentId(visitor, agent, {\n      fields: {\n        _id: 1\n      }\n    }).fetch();\n    return rooms && rooms.length && {\n      rids: rooms.map(_ref2 => {\n        let {\n          _id\n        } = _ref2;\n        return _id;\n      }),\n      name: TAPi18n.__('Omnichannel')\n    };\n  }\n};\n\nMeteor.methods({\n  auditGetOmnichannelMessages(_ref3) {\n    let {\n      startDate,\n      endDate,\n      users,\n      msg,\n      type,\n      visitor,\n      agent\n    } = _ref3;\n    check(startDate, Date);\n    check(endDate, Date);\n    const user = Meteor.user();\n\n    if (!hasPermission(user._id, 'can-audit')) {\n      throw new Meteor.Error('Not allowed');\n    }\n\n    const rooms = LivechatRooms.findByVisitorIdAndAgentId(visitor, agent !== 'all' && agent, {\n      fields: {\n        _id: 1\n      }\n    }).fetch();\n    const roomsData = rooms && rooms.length && {\n      rids: rooms.map(_ref4 => {\n        let {\n          _id\n        } = _ref4;\n        return _id;\n      }),\n      name: TAPi18n.__('Omnichannel')\n    };\n    const {\n      rids,\n      name\n    } = roomsData;\n    const query = {\n      rid: {\n        $in: rids\n      },\n      ts: {\n        $gt: startDate,\n        $lt: endDate\n      }\n    };\n\n    if (msg) {\n      const regex = new RegExp(s.trim(escapeRegExp(msg)), 'i');\n      query.msg = regex;\n    }\n\n    const messages = Messages.find(query).fetch(); // Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n    AuditLog.insert({\n      ts: new Date(),\n      results: messages.length,\n      u: user,\n      fields: {\n        msg,\n        users,\n        rids,\n        room: name,\n        startDate,\n        endDate,\n        type,\n        visitor,\n        agent\n      }\n    });\n    return messages;\n  },\n\n  auditGetMessages(_ref5) {\n    let {\n      rid: roomId,\n      startDate,\n      endDate,\n      users,\n      msg,\n      type,\n      visitor,\n      agent\n    } = _ref5;\n    check(startDate, Date);\n    check(endDate, Date);\n    const user = Meteor.user();\n\n    if (!hasPermission(user._id, 'can-audit')) {\n      throw new Meteor.Error('Not allowed');\n    }\n\n    let rids;\n    let name;\n    const query = {\n      ts: {\n        $gt: startDate,\n        $lt: endDate\n      }\n    };\n\n    if (type === 'u') {\n      const usersId = getUsersIdFromUserName(users);\n      query['u._id'] = {\n        $in: usersId\n      };\n    } else {\n      const roomInfo = getRoomInfoByAuditParams({\n        type,\n        roomId,\n        users,\n        visitor,\n        agent\n      });\n\n      if (!roomInfo) {\n        throw new Meteor.Error('Room doesn`t exist');\n      }\n\n      rids = roomInfo.rids;\n      name = roomInfo.name;\n      query.rid = {\n        $in: rids\n      };\n    }\n\n    if (msg) {\n      const regex = new RegExp(s.trim(escapeRegExp(msg)), 'i');\n      query.msg = regex;\n    }\n\n    const messages = Messages.find(query).fetch(); // Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n    AuditLog.insert({\n      ts: new Date(),\n      results: messages.length,\n      u: user,\n      fields: {\n        msg,\n        users,\n        rids,\n        room: name,\n        startDate,\n        endDate,\n        type,\n        visitor,\n        agent\n      }\n    });\n    return messages;\n  },\n\n  auditGetAuditions(_ref6) {\n    let {\n      startDate,\n      endDate\n    } = _ref6;\n    check(startDate, Date);\n    check(endDate, Date);\n\n    if (!hasPermission(Meteor.userId(), 'can-audit-log')) {\n      throw new Meteor.Error('Not allowed');\n    }\n\n    return AuditLog.find({\n      // 'u._id': userId,\n      ts: {\n        $gt: startDate,\n        $lt: endDate\n      }\n    }).fetch();\n  }\n\n});\nDDPRateLimiter.addRule({\n  type: 'method',\n  name: 'auditGetAuditions',\n\n  userId() {\n    return true;\n  }\n\n}, 10, 60000);\nDDPRateLimiter.addRule({\n  type: 'method',\n  name: 'auditGetMessages',\n\n  userId() {\n    return true;\n  }\n\n}, 10, 60000);","map":{"version":3,"sources":["ee/app/auditing/server/methods.js"],"names":["Meteor","module","link","v","s","default","check","DDPRateLimiter","TAPi18n","escapeRegExp","AuditLog","LivechatRooms","Rooms","Messages","Users","hasPermission","getValue","room","rids","_id","name","getUsersIdFromUserName","usersName","user","findByUsername","$in","map","userId","getRoomInfoByAuditParams","type","roomId","users","visitor","agent","findOne","findDirectRoomContainingAllUsernames","console","warn","rooms","findByVisitorIdAndAgentId","fields","fetch","length","__","methods","auditGetOmnichannelMessages","startDate","endDate","msg","Date","Error","roomsData","query","rid","ts","$gt","$lt","regex","RegExp","trim","messages","find","insert","results","u","auditGetMessages","usersId","roomInfo","auditGetAuditions","addRule"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport s from 'underscore.string';\nimport { check } from 'meteor/check';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport AuditLog from './auditLog';\nimport { LivechatRooms, Rooms, Messages, Users } from '../../../../app/models/server';\nimport { hasPermission } from '../../../../app/authorization/server';\n\nconst getValue = (room) => room && { rids: [room._id], name: room.name };\n\nconst getUsersIdFromUserName = (usersName) => {\n\tconst user = usersName && Users.findByUsername({ $in: usersName });\n\treturn user.map((userId) => userId._id);\n};\n\nconst getRoomInfoByAuditParams = ({ type, roomId, users, visitor, agent }) => {\n\tif (roomId) {\n\t\treturn getValue(Rooms.findOne({ _id: roomId }));\n\t}\n\n\tif (type === 'd') {\n\t\treturn getValue(Rooms.findDirectRoomContainingAllUsernames(users));\n\t}\n\n\tif (type === 'l') {\n\t\tconsole.warn('Deprecation Warning! This method will be removed in the next version (4.0.0)');\n\t\tconst rooms = LivechatRooms.findByVisitorIdAndAgentId(visitor, agent, {\n\t\t\tfields: { _id: 1 },\n\t\t}).fetch();\n\t\treturn rooms && rooms.length && { rids: rooms.map(({ _id }) => _id), name: TAPi18n.__('Omnichannel') };\n\t}\n};\n\nMeteor.methods({\n\tauditGetOmnichannelMessages({ startDate, endDate, users, msg, type, visitor, agent }) {\n\t\tcheck(startDate, Date);\n\t\tcheck(endDate, Date);\n\n\t\tconst user = Meteor.user();\n\t\tif (!hasPermission(user._id, 'can-audit')) {\n\t\t\tthrow new Meteor.Error('Not allowed');\n\t\t}\n\n\t\tconst rooms = LivechatRooms.findByVisitorIdAndAgentId(visitor, agent !== 'all' && agent, {\n\t\t\tfields: { _id: 1 },\n\t\t}).fetch();\n\t\tconst roomsData = rooms && rooms.length && { rids: rooms.map(({ _id }) => _id), name: TAPi18n.__('Omnichannel') };\n\n\t\tconst { rids, name } = roomsData;\n\n\t\tconst query = {\n\t\t\trid: { $in: rids },\n\t\t\tts: {\n\t\t\t\t$gt: startDate,\n\t\t\t\t$lt: endDate,\n\t\t\t},\n\t\t};\n\n\t\tif (msg) {\n\t\t\tconst regex = new RegExp(s.trim(escapeRegExp(msg)), 'i');\n\t\t\tquery.msg = regex;\n\t\t}\n\t\tconst messages = Messages.find(query).fetch();\n\n\t\t// Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n\t\tAuditLog.insert({\n\t\t\tts: new Date(),\n\t\t\tresults: messages.length,\n\t\t\tu: user,\n\t\t\tfields: { msg, users, rids, room: name, startDate, endDate, type, visitor, agent },\n\t\t});\n\n\t\treturn messages;\n\t},\n\tauditGetMessages({ rid: roomId, startDate, endDate, users, msg, type, visitor, agent }) {\n\t\tcheck(startDate, Date);\n\t\tcheck(endDate, Date);\n\n\t\tconst user = Meteor.user();\n\t\tif (!hasPermission(user._id, 'can-audit')) {\n\t\t\tthrow new Meteor.Error('Not allowed');\n\t\t}\n\n\t\tlet rids;\n\t\tlet name;\n\n\t\tconst query = {\n\t\t\tts: {\n\t\t\t\t$gt: startDate,\n\t\t\t\t$lt: endDate,\n\t\t\t},\n\t\t};\n\n\t\tif (type === 'u') {\n\t\t\tconst usersId = getUsersIdFromUserName(users);\n\t\t\tquery['u._id'] = { $in: usersId };\n\t\t} else {\n\t\t\tconst roomInfo = getRoomInfoByAuditParams({ type, roomId, users, visitor, agent });\n\t\t\tif (!roomInfo) {\n\t\t\t\tthrow new Meteor.Error('Room doesn`t exist');\n\t\t\t}\n\n\t\t\trids = roomInfo.rids;\n\t\t\tname = roomInfo.name;\n\t\t\tquery.rid = { $in: rids };\n\t\t}\n\n\t\tif (msg) {\n\t\t\tconst regex = new RegExp(s.trim(escapeRegExp(msg)), 'i');\n\t\t\tquery.msg = regex;\n\t\t}\n\n\t\tconst messages = Messages.find(query).fetch();\n\n\t\t// Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n\t\tAuditLog.insert({\n\t\t\tts: new Date(),\n\t\t\tresults: messages.length,\n\t\t\tu: user,\n\t\t\tfields: { msg, users, rids, room: name, startDate, endDate, type, visitor, agent },\n\t\t});\n\n\t\treturn messages;\n\t},\n\tauditGetAuditions({ startDate, endDate }) {\n\t\tcheck(startDate, Date);\n\t\tcheck(endDate, Date);\n\t\tif (!hasPermission(Meteor.userId(), 'can-audit-log')) {\n\t\t\tthrow new Meteor.Error('Not allowed');\n\t\t}\n\t\treturn AuditLog.find({\n\t\t\t// 'u._id': userId,\n\t\t\tts: {\n\t\t\t\t$gt: startDate,\n\t\t\t\t$lt: endDate,\n\t\t\t},\n\t\t}).fetch();\n\t},\n});\n\nDDPRateLimiter.addRule(\n\t{\n\t\ttype: 'method',\n\t\tname: 'auditGetAuditions',\n\t\tuserId(/* userId*/) {\n\t\t\treturn true;\n\t\t},\n\t},\n\t10,\n\t60000,\n);\n\nDDPRateLimiter.addRule(\n\t{\n\t\ttype: 'method',\n\t\tname: 'auditGetMessages',\n\t\tuserId(/* userId*/) {\n\t\t\treturn true;\n\t\t},\n\t},\n\t10,\n\t60000,\n);\n"]},"sourceType":"module","hash":"d91fe39913ed6516157dcdaefa83fb7e7d596f31"}
