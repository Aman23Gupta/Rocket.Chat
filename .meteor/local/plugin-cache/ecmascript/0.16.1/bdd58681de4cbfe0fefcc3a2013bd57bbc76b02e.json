{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatRooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/LivechatRooms.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatRooms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/LivechatRooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/LivechatRooms.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  LivechatRoomsRaw: () => LivechatRoomsRaw\n});\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 0);\nlet getValue;\nmodule.link(\"../../../settings/server/raw\", {\n  getValue(v) {\n    getValue = v;\n  }\n\n}, 1);\n\nclass LivechatRoomsRaw extends BaseRaw {\n  getQueueMetrics(_ref) {\n    let {\n      departmentId,\n      agentId,\n      includeOfflineAgents,\n      options = {}\n    } = _ref;\n    const match = {\n      $match: {\n        t: 'l',\n        open: true,\n        servedBy: {\n          $exists: true\n        }\n      }\n    };\n    const matchUsers = {\n      $match: {}\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    if (agentId) {\n      matchUsers.$match['user._id'] = agentId;\n    }\n\n    if (!includeOfflineAgents) {\n      matchUsers.$match['user.status'] = {\n        $ne: 'offline'\n      };\n      matchUsers.$match['user.statusLivechat'] = {\n        $eq: 'available'\n      };\n    }\n\n    const departmentsLookup = {\n      $lookup: {\n        from: 'rocketchat_livechat_department',\n        localField: 'departmentId',\n        foreignField: '_id',\n        as: 'departments'\n      }\n    };\n    const departmentsUnwind = {\n      $unwind: {\n        path: '$departments',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const departmentsGroup = {\n      $group: {\n        _id: {\n          departmentId: '$departmentId',\n          name: '$departments.name',\n          room: '$$ROOT'\n        }\n      }\n    };\n    const usersLookup = {\n      $lookup: {\n        from: 'users',\n        localField: '_id.room.servedBy._id',\n        foreignField: '_id',\n        as: 'user'\n      }\n    };\n    const usersUnwind = {\n      $unwind: {\n        path: '$user',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const usersGroup = {\n      $group: {\n        _id: {\n          userId: '$user._id',\n          username: '$user.username',\n          status: '$user.status',\n          departmentId: '$_id.departmentId',\n          departmentName: '$_id.name'\n        },\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: 0,\n        user: {\n          _id: '$_id.userId',\n          username: '$_id.username',\n          status: '$_id.status'\n        },\n        department: {\n          _id: {\n            $ifNull: ['$_id.departmentId', null]\n          },\n          name: {\n            $ifNull: ['$_id.departmentName', null]\n          }\n        },\n        chats: 1\n      }\n    };\n    const firstParams = [match, departmentsLookup, departmentsUnwind, departmentsGroup, usersLookup, usersUnwind];\n\n    if (Object.keys(matchUsers.$match)) {\n      firstParams.push(matchUsers);\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        chats: -1\n      }\n    };\n    const params = [...firstParams, usersGroup, project, sort];\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params).toArray();\n  }\n\n  findAllNumberOfAbandonedRooms(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end,\n        departmentId,\n        onlyCount = false,\n        options = {}\n      } = _ref2;\n      const match = {\n        $match: {\n          't': 'l',\n          'metrics.visitorInactivity': {\n            $gte: Promise.await(getValue('Livechat_visitor_inactivity_timeout'))\n          },\n          'ts': {\n            $gte: new Date(start)\n          },\n          'closedAt': {\n            $lte: new Date(end)\n          }\n        }\n      };\n      const group = {\n        $group: {\n          _id: {\n            _id: null,\n            departmentId: '$departmentId'\n          },\n          abandonedRooms: {\n            $sum: 1\n          }\n        }\n      };\n      const project = {\n        $project: {\n          _id: {\n            $ifNull: ['$_id.departmentId', null]\n          },\n          abandonedRooms: 1\n        }\n      };\n\n      if (departmentId && departmentId !== 'undefined') {\n        match.$match.departmentId = departmentId;\n      }\n\n      const sort = {\n        $sort: options.sort || {\n          name: 1\n        }\n      };\n      const params = [match, group, project, sort];\n\n      if (onlyCount) {\n        params.push({\n          $count: 'total'\n        });\n        return this.col.aggregate(params);\n      }\n\n      if (options.offset) {\n        params.push({\n          $skip: options.offset\n        });\n      }\n\n      if (options.count) {\n        params.push({\n          $limit: options.count\n        });\n      }\n\n      return this.col.aggregate(params);\n    });\n  }\n\n  findPercentageOfAbandonedRooms(_ref3) {\n    return Promise.asyncApply(() => {\n      let {\n        start,\n        end,\n        departmentId,\n        onlyCount = false,\n        options = {}\n      } = _ref3;\n      const match = {\n        $match: {\n          t: 'l',\n          ts: {\n            $gte: new Date(start),\n            $lte: new Date(end)\n          }\n        }\n      };\n      const group = {\n        $group: {\n          _id: {\n            _id: null,\n            departmentId: '$departmentId'\n          },\n          rooms: {\n            $sum: 1\n          },\n          abandonedChats: {\n            $sum: {\n              $cond: [{\n                $and: [{\n                  $ifNull: ['$metrics.visitorInactivity', false]\n                }, {\n                  $gte: ['$metrics.visitorInactivity', Promise.await(getValue('Livechat_visitor_inactivity_timeout'))]\n                }]\n              }, 1, 0]\n            }\n          }\n        }\n      };\n      const project = {\n        $project: {\n          _id: {\n            $ifNull: ['$_id.departmentId', null]\n          },\n          percentageOfAbandonedChats: {\n            $floor: {\n              $cond: [{\n                $eq: ['$rooms', 0]\n              }, 0, {\n                $divide: [{\n                  $multiply: ['$abandonedChats', 100]\n                }, '$rooms']\n              }]\n            }\n          }\n        }\n      };\n\n      if (departmentId && departmentId !== 'undefined') {\n        match.$match.departmentId = departmentId;\n      }\n\n      const sort = {\n        $sort: options.sort || {\n          name: 1\n        }\n      };\n      const params = [match, group, project, sort];\n\n      if (onlyCount) {\n        params.push({\n          $count: 'total'\n        });\n        return this.col.aggregate(params);\n      }\n\n      if (options.offset) {\n        params.push({\n          $skip: options.offset\n        });\n      }\n\n      if (options.count) {\n        params.push({\n          $limit: options.count\n        });\n      }\n\n      return this.col.aggregate(params);\n    });\n  }\n\n  findAllAverageOfChatDurationTime(_ref4) {\n    let {\n      start,\n      end,\n      departmentId,\n      onlyCount = false,\n      options = {}\n    } = _ref4;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start)\n        },\n        closedAt: {\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departmentId'\n        },\n        rooms: {\n          $sum: 1\n        },\n        chatsDuration: {\n          $sum: '$metrics.chatDuration'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        averageChatDurationTimeInSeconds: {\n          $ceil: {\n            $cond: [{\n              $eq: ['$rooms', 0]\n            }, 0, {\n              $divide: ['$chatsDuration', '$rooms']\n            }]\n          }\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findAllAverageWaitingTime(_ref5) {\n    let {\n      start,\n      end,\n      departmentId,\n      onlyCount = false,\n      options = {}\n    } = _ref5;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        },\n        waitingResponse: {\n          $ne: true\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departmentId'\n        },\n        rooms: {\n          $sum: 1\n        },\n        chatsFirstResponses: {\n          $sum: '$metrics.response.ft'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        averageWaitingTimeInSeconds: {\n          $ceil: {\n            $cond: [{\n              $eq: ['$rooms', 0]\n            }, 0, {\n              $divide: ['$chatsFirstResponses', '$rooms']\n            }]\n          }\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findAllRooms(_ref6) {\n    let {\n      start,\n      end,\n      answered,\n      departmentId,\n      onlyCount = false,\n      options = {}\n    } = _ref6;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n\n    if (answered !== undefined) {\n      match.$match.waitingResponse = {\n        [answered ? '$ne' : '$eq']: true\n      };\n    }\n\n    const group = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departmentId'\n        },\n        rooms: {\n          $sum: 1\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        rooms: 1\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findAllServiceTime(_ref7) {\n    let {\n      start,\n      end,\n      departmentId,\n      onlyCount = false,\n      options = {}\n    } = _ref7;\n    const match = {\n      $match: {\n        't': 'l',\n        'ts': {\n          $gte: new Date(start)\n        },\n        'closedAt': {\n          $lte: new Date(end)\n        },\n        'metrics.serviceTimeDuration': {\n          $exists: true\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departmentId'\n        },\n        rooms: {\n          $sum: 1\n        },\n        serviceTimeDuration: {\n          $sum: '$metrics.serviceTimeDuration'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        chats: '$rooms',\n        serviceTimeDuration: {\n          $ceil: '$serviceTimeDuration'\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findAllNumberOfTransferredRooms(_ref8) {\n    let {\n      start,\n      end,\n      departmentId,\n      options = {}\n    } = _ref8;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const departmentsLookup = {\n      $lookup: {\n        from: 'rocketchat_livechat_department',\n        localField: 'departmentId',\n        foreignField: '_id',\n        as: 'departments'\n      }\n    };\n    const departmentsUnwind = {\n      $unwind: {\n        path: '$departments',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const departmentsGroup = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departments._id',\n          name: '$departments.name'\n        },\n        rooms: {\n          $push: '$$ROOT'\n        }\n      }\n    };\n    const departmentsProject = {\n      $project: {\n        _id: '$_id.departmentId',\n        name: '$_id.name',\n        rooms: 1\n      }\n    };\n    const roomsUnwind = {\n      $unwind: {\n        path: '$rooms',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const messagesLookup = {\n      $lookup: {\n        from: 'rocketchat_message',\n        localField: 'rooms._id',\n        foreignField: 'rid',\n        as: 'messages'\n      }\n    };\n    const messagesProject = {\n      $project: {\n        _id: 1,\n        name: 1,\n        messages: {\n          $filter: {\n            input: '$messages',\n            as: 'message',\n            cond: {\n              $and: [{\n                $eq: ['$$message.t', 'livechat_transfer_history']\n              }]\n            }\n          }\n        }\n      }\n    };\n    const transferProject = {\n      $project: {\n        name: 1,\n        transfers: {\n          $size: {\n            $ifNull: ['$messages', []]\n          }\n        }\n      }\n    };\n    const transferGroup = {\n      $group: {\n        _id: {\n          departmentId: '$_id',\n          name: '$name'\n        },\n        numberOfTransferredRooms: {\n          $sum: '$transfers'\n        }\n      }\n    };\n    const presentationProject = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        name: {\n          $ifNull: ['$_id.name', null]\n        },\n        numberOfTransferredRooms: 1\n      }\n    };\n    const firstParams = [match, departmentsLookup, departmentsUnwind];\n\n    if (departmentId && departmentId !== 'undefined') {\n      firstParams.push({\n        $match: {\n          'departments._id': departmentId\n        }\n      });\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [...firstParams, departmentsGroup, departmentsProject, roomsUnwind, messagesLookup, messagesProject, transferProject, transferGroup, presentationProject, sort];\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params, {\n      allowDiskUse: true\n    }).toArray();\n  }\n\n  countAllOpenChatsBetweenDate(_ref9) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref9;\n    const query = {\n      't': 'l',\n      'metrics.chatDuration': {\n        $exists: false\n      },\n      '$or': [{\n        onHold: {\n          $exists: false\n        }\n      }, {\n        onHold: {\n          $exists: true,\n          $eq: false\n        }\n      }],\n      'servedBy': {\n        $exists: true\n      },\n      'ts': {\n        $gte: new Date(start),\n        $lte: new Date(end)\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      query.departmentId = departmentId;\n    }\n\n    return this.find(query).count();\n  }\n\n  countAllClosedChatsBetweenDate(_ref10) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref10;\n    const query = {\n      't': 'l',\n      'metrics.chatDuration': {\n        $exists: true\n      },\n      'ts': {\n        $gte: new Date(start),\n        $lte: new Date(end)\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      query.departmentId = departmentId;\n    }\n\n    return this.find(query).count();\n  }\n\n  countAllQueuedChatsBetweenDate(_ref11) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref11;\n    const query = {\n      t: 'l',\n      servedBy: {\n        $exists: false\n      },\n      open: true,\n      ts: {\n        $gte: new Date(start),\n        $lte: new Date(end)\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      query.departmentId = departmentId;\n    }\n\n    return this.find(query).count();\n  }\n\n  countAllOpenChatsByAgentBetweenDate(_ref12) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref12;\n    const match = {\n      $match: {\n        't': 'l',\n        'servedBy.username': {\n          $exists: true\n        },\n        'open': true,\n        '$or': [{\n          onHold: {\n            $exists: false\n          }\n        }, {\n          onHold: {\n            $exists: true,\n            $eq: false\n          }\n        }],\n        'ts': {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: '$servedBy.username',\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group]).toArray();\n  }\n\n  countAllOnHoldChatsByAgentBetweenDate(_ref13) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref13;\n    const match = {\n      $match: {\n        't': 'l',\n        'servedBy.username': {\n          $exists: true\n        },\n        'open': true,\n        'onHold': {\n          $exists: true,\n          $eq: true\n        },\n        'ts': {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: '$servedBy.username',\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group]).toArray();\n  }\n\n  countAllClosedChatsByAgentBetweenDate(_ref14) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref14;\n    const match = {\n      $match: {\n        't': 'l',\n        'open': {\n          $exists: false\n        },\n        'servedBy.username': {\n          $exists: true\n        },\n        'ts': {\n          $gte: new Date(start)\n        },\n        'closedAt': {\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: '$servedBy.username',\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group]).toArray();\n  }\n\n  countAllOpenChatsByDepartmentBetweenDate(_ref15) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref15;\n    const match = {\n      $match: {\n        t: 'l',\n        open: true,\n        departmentId: {\n          $exists: true\n        },\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const lookup = {\n      $lookup: {\n        from: 'rocketchat_livechat_department',\n        localField: 'departmentId',\n        foreignField: '_id',\n        as: 'departments'\n      }\n    };\n    const unwind = {\n      $unwind: {\n        path: '$departments',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: '$departments._id',\n          name: '$departments.name'\n        },\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: '$_id._id',\n        name: '$_id.name',\n        chats: 1\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const params = [match, lookup, unwind, group, project];\n    return this.col.aggregate(params).toArray();\n  }\n\n  countAllClosedChatsByDepartmentBetweenDate(_ref16) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref16;\n    const match = {\n      $match: {\n        t: 'l',\n        open: {\n          $exists: false\n        },\n        departmentId: {\n          $exists: true\n        },\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const lookup = {\n      $lookup: {\n        from: 'rocketchat_livechat_department',\n        localField: 'departmentId',\n        foreignField: '_id',\n        as: 'departments'\n      }\n    };\n    const unwind = {\n      $unwind: {\n        path: '$departments',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: '$departments._id',\n          name: '$departments.name'\n        },\n        chats: {\n          $sum: 1\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: '$_id._id',\n        name: '$_id.name',\n        chats: 1\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const params = [match, lookup, unwind, group, project];\n    return this.col.aggregate(params).toArray();\n  }\n\n  calculateResponseTimingsBetweenDates(_ref17) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref17;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: null,\n        sumResponseAvg: {\n          $sum: '$metrics.response.avg'\n        },\n        roomsWithResponseTime: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $ifNull: ['$metrics.response.avg', false]\n              }]\n            }, 1, 0]\n          }\n        },\n        maxFirstResponse: {\n          $max: '$metrics.response.ft'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        avg: {\n          $trunc: {\n            $cond: [{\n              $eq: ['$roomsWithResponseTime', 0]\n            }, 0, {\n              $divide: ['$sumResponseAvg', '$roomsWithResponseTime']\n            }]\n          }\n        },\n        longest: '$maxFirstResponse'\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group, project]).toArray();\n  }\n\n  calculateReactionTimingsBetweenDates(_ref18) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref18;\n    const match = {\n      $match: {\n        t: 'l',\n        ts: {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: null,\n        sumReactionFirstResponse: {\n          $sum: '$metrics.reaction.ft'\n        },\n        roomsWithFirstReaction: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $ifNull: ['$metrics.reaction.ft', false]\n              }]\n            }, 1, 0]\n          }\n        },\n        maxFirstReaction: {\n          $max: '$metrics.reaction.ft'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        avg: {\n          $trunc: {\n            $cond: [{\n              $eq: ['$roomsWithFirstReaction', 0]\n            }, 0, {\n              $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction']\n            }]\n          }\n        },\n        longest: '$maxFirstReaction'\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group, project]).toArray();\n  }\n\n  calculateDurationTimingsBetweenDates(_ref19) {\n    let {\n      start,\n      end,\n      departmentId\n    } = _ref19;\n    const match = {\n      $match: {\n        't': 'l',\n        'ts': {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        },\n        'metrics.chatDuration': {\n          $exists: true\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: null,\n        sumChatDuration: {\n          $sum: '$metrics.chatDuration'\n        },\n        roomsWithChatDuration: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $ifNull: ['$metrics.chatDuration', false]\n              }]\n            }, 1, 0]\n          }\n        },\n        maxChatDuration: {\n          $max: '$metrics.chatDuration'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        avg: {\n          $trunc: {\n            $cond: [{\n              $eq: ['$roomsWithChatDuration', 0]\n            }, 0, {\n              $divide: ['$sumChatDuration', '$roomsWithChatDuration']\n            }]\n          }\n        },\n        longest: '$maxChatDuration'\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    return this.col.aggregate([match, group, project]).toArray();\n  }\n\n  findAllAverageOfServiceTime(_ref20) {\n    let {\n      start,\n      end,\n      departmentId,\n      onlyCount = false,\n      options = {}\n    } = _ref20;\n    const match = {\n      $match: {\n        't': 'l',\n        'ts': {\n          $gte: new Date(start),\n          $lte: new Date(end)\n        },\n        'responseBy.lastMessageTs': {\n          $exists: true\n        },\n        'servedBy.ts': {\n          $exists: true\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: null,\n          departmentId: '$departmentId'\n        },\n        rooms: {\n          $sum: 1\n        },\n        allServiceTime: {\n          $sum: {\n            $divide: [{\n              $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts']\n            }, 1000]\n          }\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: {\n          $ifNull: ['$_id.departmentId', null]\n        },\n        averageServiceTimeInSeconds: {\n          $ceil: {\n            $cond: [{\n              $eq: ['$rooms', 0]\n            }, 0, {\n              $divide: ['$allServiceTime', '$rooms']\n            }]\n          }\n        }\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      match.$match.departmentId = departmentId;\n    }\n\n    const sort = {\n      $sort: options.sort || {\n        name: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findByVisitorId(visitorId, options) {\n    const query = {\n      't': 'l',\n      'v._id': visitorId\n    };\n    return this.find(query, options);\n  }\n\n  findRoomsByVisitorIdAndMessageWithCriteria(_ref21) {\n    let {\n      visitorId,\n      searchText,\n      open,\n      served,\n      onlyCount = false,\n      options = {}\n    } = _ref21;\n    const match = {\n      $match: _objectSpread(_objectSpread({\n        'v._id': visitorId\n      }, open !== undefined && {\n        open: {\n          $exists: open\n        }\n      }), served !== undefined && {\n        servedBy: {\n          $exists: served\n        }\n      })\n    };\n    const lookup = {\n      $lookup: {\n        from: 'rocketchat_message',\n        localField: '_id',\n        foreignField: 'rid',\n        as: 'messages'\n      }\n    };\n    const matchMessages = searchText && {\n      $match: {\n        'messages.msg': {\n          $regex: \".*\".concat(searchText, \".*\")\n        }\n      }\n    };\n    const params = [match, lookup];\n\n    if (matchMessages) {\n      params.push(matchMessages);\n    }\n\n    const project = {\n      $project: {\n        fname: 1,\n        ts: 1,\n        v: 1,\n        msgs: 1,\n        servedBy: 1,\n        closedAt: 1,\n        closedBy: 1,\n        closer: 1,\n        tags: 1,\n        closingMessage: {\n          $filter: {\n            input: '$messages',\n            as: 'messages',\n            cond: {\n              $eq: ['$$messages.t', 'livechat-close']\n            }\n          }\n        }\n      }\n    };\n    const unwindClosingMsg = {\n      $unwind: {\n        path: '$closingMessage',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const sort = {\n      $sort: options.sort || {\n        ts: -1\n      }\n    };\n    params.push(project, unwindClosingMsg, sort);\n\n    if (onlyCount) {\n      params.push({\n        $count: 'count'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.skip) {\n      params.push({\n        $skip: options.skip\n      });\n    }\n\n    if (options.limit) {\n      params.push({\n        $limit: options.limit\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findRoomsWithCriteria(_ref22) {\n    let {\n      agents,\n      roomName,\n      departmentId,\n      open,\n      served,\n      createdAt,\n      closedAt,\n      tags,\n      customFields,\n      visitorId,\n      roomIds,\n      onhold,\n      options = {}\n    } = _ref22;\n    const query = {\n      t: 'l'\n    };\n\n    if (agents) {\n      query.$or = [{\n        'servedBy._id': {\n          $in: agents\n        }\n      }, {\n        'servedBy.username': {\n          $in: agents\n        }\n      }];\n    }\n\n    if (roomName) {\n      query.fname = new RegExp(roomName, 'i');\n    }\n\n    if (departmentId && departmentId !== 'undefined') {\n      query.departmentId = departmentId;\n    }\n\n    if (open !== undefined) {\n      query.open = {\n        $exists: open\n      };\n      query.onHold = {\n        $ne: true\n      };\n    }\n\n    if (served !== undefined) {\n      query.servedBy = {\n        $exists: served\n      };\n    }\n\n    if (visitorId && visitorId !== 'undefined') {\n      query['v._id'] = visitorId;\n    }\n\n    if (createdAt) {\n      query.ts = {};\n\n      if (createdAt.start) {\n        query.ts.$gte = new Date(createdAt.start);\n      }\n\n      if (createdAt.end) {\n        query.ts.$lte = new Date(createdAt.end);\n      }\n    }\n\n    if (closedAt) {\n      query.closedAt = {};\n\n      if (closedAt.start) {\n        query.closedAt.$gte = new Date(closedAt.start);\n      }\n\n      if (closedAt.end) {\n        query.closedAt.$lte = new Date(closedAt.end);\n      }\n    }\n\n    if (tags) {\n      query.tags = {\n        $in: tags\n      };\n    }\n\n    if (customFields) {\n      query.$and = Object.keys(customFields).map(key => ({\n        [\"livechatData.\".concat(key)]: new RegExp(customFields[key], 'i')\n      }));\n    }\n\n    if (roomIds) {\n      query._id = {\n        $in: roomIds\n      };\n    }\n\n    if (onhold) {\n      query.onHold = {\n        $exists: true,\n        $eq: onhold\n      };\n    }\n\n    return this.find(query, {\n      sort: options.sort || {\n        name: 1\n      },\n      skip: options.offset,\n      limit: options.count\n    });\n  }\n\n  getOnHoldConversationsBetweenDate(from, to, departmentId) {\n    const query = {\n      onHold: {\n        $exists: true,\n        $eq: true\n      },\n      ts: {\n        $gte: new Date(from),\n        // ISO Date, ts >= date.gte\n        $lt: new Date(to) // ISODate, ts < date.lt\n\n      }\n    };\n\n    if (departmentId && departmentId !== 'undefined') {\n      query.departmentId = departmentId;\n    }\n\n    return this.find(query).count();\n  }\n\n  findAllServiceTimeByAgent(_ref23) {\n    let {\n      start,\n      end,\n      onlyCount = false,\n      options = {}\n    } = _ref23;\n    const match = {\n      $match: {\n        't': 'l',\n        'servedBy._id': {\n          $exists: true\n        },\n        'metrics.serviceTimeDuration': {\n          $exists: true\n        },\n        'ts': {\n          $gte: start,\n          $lte: end\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: '$servedBy._id',\n          username: '$servedBy.username'\n        },\n        chats: {\n          $sum: 1\n        },\n        serviceTimeDuration: {\n          $sum: '$metrics.serviceTimeDuration'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: '$_id._id',\n        username: '$_id.username',\n        chats: 1,\n        serviceTimeDuration: {\n          $ceil: '$serviceTimeDuration'\n        }\n      }\n    };\n    const sort = {\n      $sort: options.sort || {\n        username: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findAllAverageServiceTimeByAgents(_ref24) {\n    let {\n      start,\n      end,\n      onlyCount = false,\n      options = {}\n    } = _ref24;\n    const match = {\n      $match: {\n        't': 'l',\n        'servedBy._id': {\n          $exists: true\n        },\n        'metrics.serviceTimeDuration': {\n          $exists: true\n        },\n        'ts': {\n          $gte: start,\n          $lte: end\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: {\n          _id: '$servedBy._id',\n          username: '$servedBy.username'\n        },\n        chats: {\n          $sum: 1\n        },\n        serviceTimeDuration: {\n          $sum: '$metrics.serviceTimeDuration'\n        }\n      }\n    };\n    const project = {\n      $project: {\n        _id: '$_id._id',\n        username: '$_id.username',\n        name: '$_id.name',\n        active: '$_id.active',\n        averageServiceTimeInSeconds: {\n          $ceil: {\n            $cond: [{\n              $eq: ['$chats', 0]\n            }, 0, {\n              $divide: ['$serviceTimeDuration', '$chats']\n            }]\n          }\n        }\n      }\n    };\n    const sort = {\n      $sort: options.sort || {\n        username: 1\n      }\n    };\n    const params = [match, group, project, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n      return this.col.aggregate(params);\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  setDepartmentByRoomId(roomId, departmentId) {\n    return this.update({\n      _id: roomId\n    }, {\n      $set: {\n        departmentId\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/LivechatRooms.js"],"names":["_objectSpread","module","link","default","v","export","LivechatRoomsRaw","BaseRaw","getValue","getQueueMetrics","departmentId","agentId","includeOfflineAgents","options","match","$match","t","open","servedBy","$exists","matchUsers","$ne","$eq","departmentsLookup","$lookup","from","localField","foreignField","as","departmentsUnwind","$unwind","path","preserveNullAndEmptyArrays","departmentsGroup","$group","_id","name","room","usersLookup","usersUnwind","usersGroup","userId","username","status","departmentName","chats","$sum","project","$project","user","department","$ifNull","firstParams","Object","keys","push","sort","$sort","params","offset","$skip","count","$limit","col","aggregate","toArray","findAllNumberOfAbandonedRooms","start","end","onlyCount","$gte","Date","$lte","group","abandonedRooms","$count","findPercentageOfAbandonedRooms","ts","rooms","abandonedChats","$cond","$and","percentageOfAbandonedChats","$floor","$divide","$multiply","findAllAverageOfChatDurationTime","closedAt","chatsDuration","averageChatDurationTimeInSeconds","$ceil","findAllAverageWaitingTime","waitingResponse","chatsFirstResponses","averageWaitingTimeInSeconds","findAllRooms","answered","undefined","findAllServiceTime","serviceTimeDuration","findAllNumberOfTransferredRooms","$push","departmentsProject","roomsUnwind","messagesLookup","messagesProject","messages","$filter","input","cond","transferProject","transfers","$size","transferGroup","numberOfTransferredRooms","presentationProject","allowDiskUse","countAllOpenChatsBetweenDate","query","onHold","find","countAllClosedChatsBetweenDate","countAllQueuedChatsBetweenDate","countAllOpenChatsByAgentBetweenDate","countAllOnHoldChatsByAgentBetweenDate","countAllClosedChatsByAgentBetweenDate","countAllOpenChatsByDepartmentBetweenDate","lookup","unwind","countAllClosedChatsByDepartmentBetweenDate","calculateResponseTimingsBetweenDates","sumResponseAvg","roomsWithResponseTime","maxFirstResponse","$max","avg","$trunc","longest","calculateReactionTimingsBetweenDates","sumReactionFirstResponse","roomsWithFirstReaction","maxFirstReaction","calculateDurationTimingsBetweenDates","sumChatDuration","roomsWithChatDuration","maxChatDuration","findAllAverageOfServiceTime","allServiceTime","$subtract","averageServiceTimeInSeconds","findByVisitorId","visitorId","findRoomsByVisitorIdAndMessageWithCriteria","searchText","served","matchMessages","$regex","fname","msgs","closedBy","closer","tags","closingMessage","unwindClosingMsg","skip","limit","findRoomsWithCriteria","agents","roomName","createdAt","customFields","roomIds","onhold","$or","$in","RegExp","map","key","getOnHoldConversationsBetweenDate","to","$lt","findAllServiceTimeByAgent","findAllAverageServiceTimeByAgents","active","setDepartmentByRoomId","roomId","update","$set"],"mappings":"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","sourcesContent":["import { BaseRaw } from './BaseRaw';\nimport { getValue } from '../../../settings/server/raw';\n\nexport class LivechatRoomsRaw extends BaseRaw {\n\tgetQueueMetrics({ departmentId, agentId, includeOfflineAgents, options = {} }) {\n\t\tconst match = { $match: { t: 'l', open: true, servedBy: { $exists: true } } };\n\t\tconst matchUsers = { $match: {} };\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tif (agentId) {\n\t\t\tmatchUsers.$match['user._id'] = agentId;\n\t\t}\n\t\tif (!includeOfflineAgents) {\n\t\t\tmatchUsers.$match['user.status'] = { $ne: 'offline' };\n\t\t\tmatchUsers.$match['user.statusLivechat'] = { $eq: 'available' };\n\t\t}\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t\troom: '$$ROOT',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst usersLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: '_id.room.servedBy._id',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst usersUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst usersGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tuserId: '$user._id',\n\t\t\t\t\tusername: '$user.username',\n\t\t\t\t\tstatus: '$user.status',\n\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\tdepartmentName: '$_id.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tuser: {\n\t\t\t\t\t_id: '$_id.userId',\n\t\t\t\t\tusername: '$_id.username',\n\t\t\t\t\tstatus: '$_id.status',\n\t\t\t\t},\n\t\t\t\tdepartment: {\n\t\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\t\tname: { $ifNull: ['$_id.departmentName', null] },\n\t\t\t\t},\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [match, departmentsLookup, departmentsUnwind, departmentsGroup, usersLookup, usersUnwind];\n\t\tif (Object.keys(matchUsers.$match)) {\n\t\t\tfirstParams.push(matchUsers);\n\t\t}\n\t\tconst sort = { $sort: options.sort || { chats: -1 } };\n\t\tconst params = [...firstParams, usersGroup, project, sort];\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tasync findAllNumberOfAbandonedRooms({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'metrics.visitorInactivity': {\n\t\t\t\t\t$gte: await getValue('Livechat_visitor_inactivity_timeout'),\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tabandonedRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tabandonedRooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tasync findPercentageOfAbandonedRooms({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tabandonedChats: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ $ifNull: ['$metrics.visitorInactivity', false] },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$gte: ['$metrics.visitorInactivity', await getValue('Livechat_visitor_inactivity_timeout')],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tpercentageOfAbandonedChats: {\n\t\t\t\t\t$floor: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: [{ $multiply: ['$abandonedChats', 100] }, '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllAverageOfChatDurationTime({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start) },\n\t\t\t\tclosedAt: { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageChatDurationTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsDuration', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllAverageWaitingTime({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\twaitingResponse: { $ne: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsFirstResponses: { $sum: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageWaitingTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsFirstResponses', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllRooms({ start, end, answered, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tif (answered !== undefined) {\n\t\t\tmatch.$match.waitingResponse = { [answered ? '$ne' : '$eq']: true };\n\t\t}\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllServiceTime({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tchats: '$rooms',\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllNumberOfTransferredRooms({ start, end, departmentId, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\trooms: { $push: '$$ROOT' },\n\t\t\t},\n\t\t};\n\t\tconst departmentsProject = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\tname: '$_id.name',\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst roomsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$rooms',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: 'rooms._id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $eq: ['$$message.t', 'livechat_transfer_history'] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst transferProject = {\n\t\t\t$project: {\n\t\t\t\tname: 1,\n\t\t\t\ttransfers: { $size: { $ifNull: ['$messages', []] } },\n\t\t\t},\n\t\t};\n\t\tconst transferGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tdepartmentId: '$_id',\n\t\t\t\t\tname: '$name',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: '$transfers' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tname: { $ifNull: ['$_id.name', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [match, departmentsLookup, departmentsUnwind];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'departments._id': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [\n\t\t\t...firstParams,\n\t\t\tdepartmentsGroup,\n\t\t\tdepartmentsProject,\n\t\t\troomsUnwind,\n\t\t\tmessagesLookup,\n\t\t\tmessagesProject,\n\t\t\ttransferProject,\n\t\t\ttransferGroup,\n\t\t\tpresentationProject,\n\t\t\tsort,\n\t\t];\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true }).toArray();\n\t}\n\n\tcountAllOpenChatsBetweenDate({ start, end, departmentId }) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'$or': [\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t'servedBy': { $exists: true },\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.find(query).count();\n\t}\n\n\tcountAllClosedChatsBetweenDate({ start, end, departmentId }) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.find(query).count();\n\t}\n\n\tcountAllQueuedChatsBetweenDate({ start, end, departmentId }) {\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\tservedBy: { $exists: false },\n\t\t\topen: true,\n\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.find(query).count();\n\t}\n\n\tcountAllOpenChatsByAgentBetweenDate({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy.username': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'$or': [\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group]).toArray();\n\t}\n\n\tcountAllOnHoldChatsByAgentBetweenDate({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy.username': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'onHold': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$eq: true,\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group]).toArray();\n\t}\n\n\tcountAllClosedChatsByAgentBetweenDate({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'open': { $exists: false },\n\t\t\t\t'servedBy.username': { $exists: true },\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group]).toArray();\n\t}\n\n\tcountAllOpenChatsByDepartmentBetweenDate({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: true,\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tcountAllClosedChatsByDepartmentBetweenDate({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: { $exists: false },\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tcalculateResponseTimingsBetweenDates({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumResponseAvg: {\n\t\t\t\t\t$sum: '$metrics.response.avg',\n\t\t\t\t},\n\t\t\t\troomsWithResponseTime: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.response.avg', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstResponse: { $max: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithResponseTime', 0] }, 0, { $divide: ['$sumResponseAvg', '$roomsWithResponseTime'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstResponse',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project]).toArray();\n\t}\n\n\tcalculateReactionTimingsBetweenDates({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumReactionFirstResponse: {\n\t\t\t\t\t$sum: '$metrics.reaction.ft',\n\t\t\t\t},\n\t\t\t\troomsWithFirstReaction: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.reaction.ft', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstReaction: { $max: '$metrics.reaction.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithFirstReaction', 0] }, 0, { $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstReaction',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project]).toArray();\n\t}\n\n\tcalculateDurationTimingsBetweenDates({ start, end, departmentId }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'metrics.chatDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumChatDuration: {\n\t\t\t\t\t$sum: '$metrics.chatDuration',\n\t\t\t\t},\n\t\t\t\troomsWithChatDuration: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.chatDuration', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxChatDuration: { $max: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithChatDuration', 0] }, 0, { $divide: ['$sumChatDuration', '$roomsWithChatDuration'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxChatDuration',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project]).toArray();\n\t}\n\n\tfindAllAverageOfServiceTime({ start, end, departmentId, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'responseBy.lastMessageTs': { $exists: true },\n\t\t\t\t'servedBy.ts': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tallServiceTime: {\n\t\t\t\t\t$sum: { $divide: [{ $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts'] }, 1000] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allServiceTime', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindByVisitorId(visitorId, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsByVisitorIdAndMessageWithCriteria({ visitorId, searchText, open, served, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t'v._id': visitorId,\n\t\t\t\t...(open !== undefined && { open: { $exists: open } }),\n\t\t\t\t...(served !== undefined && { servedBy: { $exists: served } }),\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst matchMessages = searchText && {\n\t\t\t$match: { 'messages.msg': { $regex: `.*${searchText}.*` } },\n\t\t};\n\n\t\tconst params = [match, lookup];\n\n\t\tif (matchMessages) {\n\t\t\tparams.push(matchMessages);\n\t\t}\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tfname: 1,\n\t\t\t\tts: 1,\n\t\t\t\tv: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosingMessage: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t\tcond: { $eq: ['$$messages.t', 'livechat-close'] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst unwindClosingMsg = {\n\t\t\t$unwind: { path: '$closingMessage', preserveNullAndEmptyArrays: true },\n\t\t};\n\t\tconst sort = { $sort: options.sort || { ts: -1 } };\n\n\t\tparams.push(project, unwindClosingMsg, sort);\n\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'count' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\n\t\tif (options.skip) {\n\t\t\tparams.push({ $skip: options.skip });\n\t\t}\n\n\t\tif (options.limit) {\n\t\t\tparams.push({ $limit: options.limit });\n\t\t}\n\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindRoomsWithCriteria({\n\t\tagents,\n\t\troomName,\n\t\tdepartmentId,\n\t\topen,\n\t\tserved,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\ttags,\n\t\tcustomFields,\n\t\tvisitorId,\n\t\troomIds,\n\t\tonhold,\n\t\toptions = {},\n\t}) {\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t};\n\t\tif (agents) {\n\t\t\tquery.$or = [{ 'servedBy._id': { $in: agents } }, { 'servedBy.username': { $in: agents } }];\n\t\t}\n\t\tif (roomName) {\n\t\t\tquery.fname = new RegExp(roomName, 'i');\n\t\t}\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\tif (open !== undefined) {\n\t\t\tquery.open = { $exists: open };\n\t\t\tquery.onHold = { $ne: true };\n\t\t}\n\t\tif (served !== undefined) {\n\t\t\tquery.servedBy = { $exists: served };\n\t\t}\n\t\tif (visitorId && visitorId !== 'undefined') {\n\t\t\tquery['v._id'] = visitorId;\n\t\t}\n\t\tif (createdAt) {\n\t\t\tquery.ts = {};\n\t\t\tif (createdAt.start) {\n\t\t\t\tquery.ts.$gte = new Date(createdAt.start);\n\t\t\t}\n\t\t\tif (createdAt.end) {\n\t\t\t\tquery.ts.$lte = new Date(createdAt.end);\n\t\t\t}\n\t\t}\n\t\tif (closedAt) {\n\t\t\tquery.closedAt = {};\n\t\t\tif (closedAt.start) {\n\t\t\t\tquery.closedAt.$gte = new Date(closedAt.start);\n\t\t\t}\n\t\t\tif (closedAt.end) {\n\t\t\t\tquery.closedAt.$lte = new Date(closedAt.end);\n\t\t\t}\n\t\t}\n\t\tif (tags) {\n\t\t\tquery.tags = { $in: tags };\n\t\t}\n\t\tif (customFields) {\n\t\t\tquery.$and = Object.keys(customFields).map((key) => ({\n\t\t\t\t[`livechatData.${key}`]: new RegExp(customFields[key], 'i'),\n\t\t\t}));\n\t\t}\n\n\t\tif (roomIds) {\n\t\t\tquery._id = { $in: roomIds };\n\t\t}\n\n\t\tif (onhold) {\n\t\t\tquery.onHold = {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: onhold,\n\t\t\t};\n\t\t}\n\n\t\treturn this.find(query, {\n\t\t\tsort: options.sort || { name: 1 },\n\t\t\tskip: options.offset,\n\t\t\tlimit: options.count,\n\t\t});\n\t}\n\n\tgetOnHoldConversationsBetweenDate(from, to, departmentId) {\n\t\tconst query = {\n\t\t\tonHold: {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: new Date(from), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(to), // ISODate, ts < date.lt\n\t\t\t},\n\t\t};\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\n\t\treturn this.find(query).count();\n\t}\n\n\tfindAllServiceTimeByAgent({ start, end, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tchats: 1,\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindAllAverageServiceTimeByAgents({ start, end, onlyCount = false, options = {} }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tactive: '$_id.active',\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$chats', 0] }, 0, { $divide: ['$serviceTimeDuration', '$chats'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tsetDepartmentByRoomId(roomId, departmentId) {\n\t\treturn this.update({ _id: roomId }, { $set: { departmentId } });\n\t}\n}\n"]},"sourceType":"module","hash":"bdd58681de4cbfe0fefcc3a2013bd57bbc76b02e"}
