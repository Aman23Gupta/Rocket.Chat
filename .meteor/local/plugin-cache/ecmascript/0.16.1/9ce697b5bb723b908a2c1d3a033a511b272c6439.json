{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/email/email.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/email/email.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/email/email.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/email/email.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/email/email.js"}},"code":"!function (module1) {\n  let _objectSpread;\n\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n\n  }, 0);\n  module1.export({\n    Email: () => Email,\n    EmailTest: () => EmailTest,\n    EmailInternals: () => EmailInternals\n  });\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n\n  }, 0);\n  let Log;\n  module1.link(\"meteor/logging\", {\n    Log(v) {\n      Log = v;\n    }\n\n  }, 1);\n  let Hook;\n  module1.link(\"meteor/callback-hook\", {\n    Hook(v) {\n      Hook = v;\n    }\n\n  }, 2);\n  let Future;\n  module1.link(\"fibers/future\", {\n    default(v) {\n      Future = v;\n    }\n\n  }, 3);\n  let url;\n  module1.link(\"url\", {\n    default(v) {\n      url = v;\n    }\n\n  }, 4);\n  let nodemailer;\n  module1.link(\"nodemailer\", {\n    default(v) {\n      nodemailer = v;\n    }\n\n  }, 5);\n  let wellKnow;\n  module1.link(\"nodemailer/lib/well-known\", {\n    default(v) {\n      wellKnow = v;\n    }\n\n  }, 6);\n  const Email = {};\n  const EmailTest = {};\n  const EmailInternals = {\n    NpmModules: {\n      mailcomposer: {\n        version: Npm.require('nodemailer/package.json').version,\n        module: Npm.require('nodemailer/lib/mail-composer')\n      },\n      nodemailer: {\n        version: Npm.require('nodemailer/package.json').version,\n        module: Npm.require('nodemailer')\n      }\n    }\n  };\n  const MailComposer = EmailInternals.NpmModules.mailcomposer.module;\n\n  const makeTransport = function (mailUrlString) {\n    const mailUrl = new URL(mailUrlString);\n\n    if (mailUrl.protocol !== 'smtp:' && mailUrl.protocol !== 'smtps:') {\n      throw new Error(\"Email protocol in $MAIL_URL (\" + mailUrlString + \") must be 'smtp' or 'smtps'\");\n    }\n\n    if (mailUrl.protocol === 'smtp:' && mailUrl.port === '465') {\n      Log.debug(\"The $MAIL_URL is 'smtp://...:465'.  \" + \"You probably want 'smtps://' (The 's' enables TLS/SSL) \" + \"since '465' is typically a secure port.\");\n    } // Allow overriding pool setting, but default to true.\n\n\n    if (!mailUrl.query) {\n      mailUrl.query = {};\n    }\n\n    if (!mailUrl.query.pool) {\n      mailUrl.query.pool = 'true';\n    }\n\n    const transport = nodemailer.createTransport(url.format(mailUrl));\n    transport._syncSendMail = Meteor.wrapAsync(transport.sendMail, transport);\n    return transport;\n  }; // More info: https://nodemailer.com/smtp/well-known/\n\n\n  const knownHostsTransport = function () {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    let service, user, password;\n\n    if (url && !settings) {\n      let host = url.split(':')[0];\n      const urlObject = new URL(url);\n\n      if (host === 'http' || host === 'https') {\n        // Look to hostname for service\n        host = urlObject.hostname;\n        user = urlObject.username;\n        password = urlObject.password;\n      } else if (urlObject.protocol && urlObject.username && urlObject.password) {\n        // We have some data from urlObject\n        host = urlObject.protocol.split(':')[0];\n        user = urlObject.username;\n        password = urlObject.password;\n      } else {\n        var _urlObject$pathname$s;\n\n        // We need to disect the URL ourselves to get the data\n        // First get rid of the leading '//' and split to username and the rest\n        const temp = (_urlObject$pathname$s = urlObject.pathname.substring(2)) === null || _urlObject$pathname$s === void 0 ? void 0 : _urlObject$pathname$s.split(':');\n        user = temp[0]; // Now we split by '@' to get password and hostname\n\n        const temp2 = temp[1].split('@');\n        password = temp2[0];\n        host = temp2[1];\n      }\n\n      service = host;\n    }\n\n    if (!wellKnow((settings === null || settings === void 0 ? void 0 : settings.service) || service)) {\n      throw new Error('Could not recognize e-mail service. See list at https://nodemailer.com/smtp/well-known/ for services that we can configure for you.');\n    }\n\n    const transport = nodemailer.createTransport({\n      service: (settings === null || settings === void 0 ? void 0 : settings.service) || service,\n      auth: {\n        user: (settings === null || settings === void 0 ? void 0 : settings.user) || user,\n        pass: (settings === null || settings === void 0 ? void 0 : settings.password) || password\n      }\n    });\n    transport._syncSendMail = Meteor.wrapAsync(transport.sendMail, transport);\n    return transport;\n  };\n\n  EmailTest.knowHostsTransport = knownHostsTransport;\n\n  const getTransport = function () {\n    var _Meteor$settings$pack;\n\n    const packageSettings = ((_Meteor$settings$pack = Meteor.settings.packages) === null || _Meteor$settings$pack === void 0 ? void 0 : _Meteor$settings$pack.email) || {}; // We delay this check until the first call to Email.send, in case someone\n    // set process.env.MAIL_URL in startup code. Then we store in a cache until\n    // process.env.MAIL_URL changes.\n\n    const url = process.env.MAIL_URL;\n\n    if (this.cacheKey === undefined || this.cacheKey !== url || this.cacheKey !== (packageSettings === null || packageSettings === void 0 ? void 0 : packageSettings.service) || 'settings') {\n      if (packageSettings !== null && packageSettings !== void 0 && packageSettings.service && wellKnow(packageSettings.service) || url && wellKnow(new URL(url).hostname) || wellKnow((url === null || url === void 0 ? void 0 : url.split(':')[0]) || '')) {\n        this.cacheKey = packageSettings.service || 'settings';\n        this.cache = knownHostsTransport(packageSettings, url);\n      } else {\n        this.cacheKey = url;\n        this.cache = url ? makeTransport(url, packageSettings) : null;\n      }\n    }\n\n    return this.cache;\n  };\n\n  let nextDevModeMailId = 0;\n  let output_stream = process.stdout; // Testing hooks\n\n  EmailTest.overrideOutputStream = function (stream) {\n    nextDevModeMailId = 0;\n    output_stream = stream;\n  };\n\n  EmailTest.restoreOutputStream = function () {\n    output_stream = process.stdout;\n  };\n\n  const devModeSend = function (mail) {\n    let devModeMailId = nextDevModeMailId++;\n    const stream = output_stream; // This approach does not prevent other writers to stdout from interleaving.\n\n    stream.write(\"====== BEGIN MAIL #\" + devModeMailId + \" ======\\n\");\n    stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" + \"environment variable.)\\n\");\n    const readStream = new MailComposer(mail).compile().createReadStream();\n    readStream.pipe(stream, {\n      end: false\n    });\n    const future = new Future();\n    readStream.on('end', function () {\n      stream.write(\"====== END MAIL #\" + devModeMailId + \" ======\\n\");\n      future.return();\n    });\n    future.wait();\n  };\n\n  const smtpSend = function (transport, mail) {\n    transport._syncSendMail(mail);\n  };\n\n  const sendHooks = new Hook();\n  /**\n   * @summary Hook that runs before email is sent.\n   * @locus Server\n   *\n   * @param f {function} receives the arguments to Email.send and should return true to go\n   * ahead and send the email (or at least, try subsequent hooks), or\n   * false to skip sending.\n   * @returns {{ stop: function, callback: function }}\n   */\n\n  Email.hookSend = function (f) {\n    return sendHooks.register(f);\n  };\n  /**\n   * @summary Overrides sending function with your own.\n   * @locus Server\n   * @since 2.2\n   * @param f {function} function that will receive options from the send function and under `packageSettings` will\n   * include the package settings from Meteor.settings.packages.email for your custom transport to access.\n   */\n\n\n  Email.customTransport = undefined;\n  /**\n   * @summary Send an email. Throws an `Error` on failure to contact mail server\n   * or if mail server returns an error. All fields should match\n   * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n   *\n   * If the `MAIL_URL` environment variable is set, actually sends the email.\n   * Otherwise, prints the contents of the email to standard out.\n   *\n   * Note that this package is based on **nodemailer**, so make sure to refer to\n   * [the documentation](http://nodemailer.com/)\n   * when using the `attachments` or `mailComposer` options.\n   *\n   * @locus Server\n   * @param {Object} options\n   * @param {String} [options.from] \"From:\" address (required)\n   * @param {String|String[]} options.to,cc,bcc,replyTo\n   *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n   * @param {String} [options.inReplyTo] Message-ID this message is replying to\n   * @param {String|String[]} [options.references] Array (or space-separated string) of Message-IDs to refer to\n   * @param {String} [options.messageId] Message-ID for this message; otherwise, will be set to a random value\n   * @param {String} [options.subject]  \"Subject:\" line\n   * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n   * @param {String} [options.watchHtml] Mail body in HTML specific for Apple Watch\n   * @param {String} [options.icalEvent] iCalendar event attachment\n   * @param {Object} [options.headers] Dictionary of custom headers - e.g. `{ \"header name\": \"header value\" }`. To set an object under a header name, use `JSON.stringify` - e.g. `{ \"header name\": JSON.stringify({ tracking: { level: 'full' } }) }`.\n   * @param {Object[]} [options.attachments] Array of attachment objects, as\n   * described in the [nodemailer documentation](https://nodemailer.com/message/attachments/).\n   * @param {MailComposer} [options.mailComposer] A [MailComposer](https://nodemailer.com/extras/mailcomposer/#e-mail-message-fields)\n   * object representing the message to be sent.  Overrides all other options.\n   * You can create a `MailComposer` object via\n   * `new EmailInternals.NpmModules.mailcomposer.module`.\n   */\n\n  Email.send = function (options) {\n    var _Meteor$settings$pack3;\n\n    if (options.mailComposer) {\n      options = options.mailComposer.mail;\n    }\n\n    let send = true;\n    sendHooks.each(hook => {\n      send = hook(options);\n      return send;\n    });\n    if (!send) return;\n    const customTransport = Email.customTransport;\n\n    if (customTransport) {\n      var _Meteor$settings$pack2;\n\n      const packageSettings = ((_Meteor$settings$pack2 = Meteor.settings.packages) === null || _Meteor$settings$pack2 === void 0 ? void 0 : _Meteor$settings$pack2.email) || {};\n      customTransport(_objectSpread({\n        packageSettings\n      }, options));\n      return;\n    }\n\n    if (Meteor.isProduction || process.env.MAIL_URL || (_Meteor$settings$pack3 = Meteor.settings.packages) !== null && _Meteor$settings$pack3 !== void 0 && _Meteor$settings$pack3.email) {\n      const transport = getTransport();\n      smtpSend(transport, options);\n      return;\n    }\n\n    devModeSend(options);\n  };\n}.call(this, module);","map":{"version":3,"sources":["packages/email/email.js"],"names":["_objectSpread","module1","link","default","v","export","Email","EmailTest","EmailInternals","Meteor","Log","Hook","Future","url","nodemailer","wellKnow","NpmModules","mailcomposer","version","Npm","require","module","MailComposer","makeTransport","mailUrlString","mailUrl","URL","protocol","Error","port","debug","query","pool","transport","createTransport","format","_syncSendMail","wrapAsync","sendMail","knownHostsTransport","settings","undefined","service","user","password","host","split","urlObject","hostname","username","temp","pathname","substring","temp2","auth","pass","knowHostsTransport","getTransport","packageSettings","packages","email","process","env","MAIL_URL","cacheKey","cache","nextDevModeMailId","output_stream","stdout","overrideOutputStream","stream","restoreOutputStream","devModeSend","mail","devModeMailId","write","readStream","compile","createReadStream","pipe","end","future","on","return","wait","smtpSend","sendHooks","hookSend","f","register","customTransport","send","options","mailComposer","each","hook","isProduction"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Log } from 'meteor/logging';\nimport { Hook } from 'meteor/callback-hook';\n\nimport Future from 'fibers/future';\nimport url from 'url';\nimport nodemailer from 'nodemailer';\nimport wellKnow from 'nodemailer/lib/well-known';\n\nexport const Email = {};\nexport const EmailTest = {};\n\nexport const EmailInternals = {\n  NpmModules: {\n    mailcomposer: {\n      version: Npm.require('nodemailer/package.json').version,\n      module: Npm.require('nodemailer/lib/mail-composer')\n    },\n    nodemailer: {\n      version: Npm.require('nodemailer/package.json').version,\n      module: Npm.require('nodemailer')\n    }\n  }\n};\n\nconst MailComposer = EmailInternals.NpmModules.mailcomposer.module;\n\nconst makeTransport = function (mailUrlString) {\n  const mailUrl = new URL(mailUrlString);\n\n  if (mailUrl.protocol !== 'smtp:' && mailUrl.protocol !== 'smtps:') {\n    throw new Error(\"Email protocol in $MAIL_URL (\" +\n                    mailUrlString + \") must be 'smtp' or 'smtps'\");\n  }\n\n  if (mailUrl.protocol === 'smtp:' && mailUrl.port === '465') {\n    Log.debug(\"The $MAIL_URL is 'smtp://...:465'.  \" +\n              \"You probably want 'smtps://' (The 's' enables TLS/SSL) \" +\n              \"since '465' is typically a secure port.\");\n  }\n\n  // Allow overriding pool setting, but default to true.\n  if (!mailUrl.query) {\n    mailUrl.query = {};\n  }\n\n  if (!mailUrl.query.pool) {\n    mailUrl.query.pool = 'true';\n  }\n\n  const transport = nodemailer.createTransport(url.format(mailUrl));\n\n  transport._syncSendMail = Meteor.wrapAsync(transport.sendMail, transport);\n  return transport;\n};\n\n// More info: https://nodemailer.com/smtp/well-known/\nconst knownHostsTransport = function(settings = undefined, url = undefined) {\n  let service, user, password;\n  if (url && !settings) {\n    let host = url.split(':')[0];\n    const urlObject = new URL(url);\n    if (host === 'http' || host === 'https') {\n      // Look to hostname for service\n      host = urlObject.hostname;\n      user = urlObject.username;\n      password = urlObject.password;\n    } else if (urlObject.protocol && urlObject.username && urlObject.password) {\n      // We have some data from urlObject\n      host = urlObject.protocol.split(':')[0];\n      user = urlObject.username;\n      password = urlObject.password;\n    } else {\n      // We need to disect the URL ourselves to get the data\n      // First get rid of the leading '//' and split to username and the rest\n      const temp = urlObject.pathname.substring(2)?.split(':');\n      user = temp[0];\n      // Now we split by '@' to get password and hostname\n      const temp2 = temp[1].split('@');\n      password = temp2[0];\n      host = temp2[1];\n    }\n    service = host;\n  }\n\n  if (!wellKnow(settings?.service || service)) {\n    throw new Error('Could not recognize e-mail service. See list at https://nodemailer.com/smtp/well-known/ for services that we can configure for you.');\n  }\n\n  const transport = nodemailer.createTransport({\n    service: settings?.service || service,\n    auth: {\n      user: settings?.user || user,\n      pass: settings?.password || password\n    }\n  });\n\n  transport._syncSendMail = Meteor.wrapAsync(transport.sendMail, transport);\n  return transport;\n};\nEmailTest.knowHostsTransport = knownHostsTransport;\n\nconst getTransport = function() {\n  const packageSettings = Meteor.settings.packages?.email || {};\n  // We delay this check until the first call to Email.send, in case someone\n  // set process.env.MAIL_URL in startup code. Then we store in a cache until\n  // process.env.MAIL_URL changes.\n  const url = process.env.MAIL_URL;\n  if (this.cacheKey === undefined || (this.cacheKey !== url || this.cacheKey !== packageSettings?.service || 'settings')) {\n    if ((packageSettings?.service && wellKnow(packageSettings.service)) || (url && wellKnow(new URL(url).hostname) || wellKnow(url?.split(':')[0] || ''))) {\n      this.cacheKey = packageSettings.service || 'settings';\n      this.cache = knownHostsTransport(packageSettings, url);\n    } else {\n      this.cacheKey = url;\n      this.cache = url ? makeTransport(url, packageSettings) : null;\n    }\n  }\n  return this.cache;\n};\n\nlet nextDevModeMailId = 0;\nlet output_stream = process.stdout;\n\n// Testing hooks\nEmailTest.overrideOutputStream = function (stream) {\n  nextDevModeMailId = 0;\n  output_stream = stream;\n};\n\nEmailTest.restoreOutputStream = function () {\n  output_stream = process.stdout;\n};\n\nconst devModeSend = function (mail) {\n  let devModeMailId = nextDevModeMailId++;\n\n  const stream = output_stream;\n\n  // This approach does not prevent other writers to stdout from interleaving.\n  stream.write(\"====== BEGIN MAIL #\" + devModeMailId + \" ======\\n\");\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +\n               \"environment variable.)\\n\");\n  const readStream = new MailComposer(mail).compile().createReadStream();\n  readStream.pipe(stream, {end: false});\n  const future = new Future;\n  readStream.on('end', function () {\n    stream.write(\"====== END MAIL #\" + devModeMailId + \" ======\\n\");\n    future.return();\n  });\n  future.wait();\n};\n\nconst smtpSend = function (transport, mail) {\n  transport._syncSendMail(mail);\n};\n\nconst sendHooks = new Hook();\n\n/**\n * @summary Hook that runs before email is sent.\n * @locus Server\n *\n * @param f {function} receives the arguments to Email.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n * @returns {{ stop: function, callback: function }}\n */\nEmail.hookSend = function (f) {\n  return sendHooks.register(f);\n};\n\n/**\n * @summary Overrides sending function with your own.\n * @locus Server\n * @since 2.2\n * @param f {function} function that will receive options from the send function and under `packageSettings` will\n * include the package settings from Meteor.settings.packages.email for your custom transport to access.\n */\nEmail.customTransport = undefined;\n\n/**\n * @summary Send an email. Throws an `Error` on failure to contact mail server\n * or if mail server returns an error. All fields should match\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n *\n * If the `MAIL_URL` environment variable is set, actually sends the email.\n * Otherwise, prints the contents of the email to standard out.\n *\n * Note that this package is based on **nodemailer**, so make sure to refer to\n * [the documentation](http://nodemailer.com/)\n * when using the `attachments` or `mailComposer` options.\n *\n * @locus Server\n * @param {Object} options\n * @param {String} [options.from] \"From:\" address (required)\n * @param {String|String[]} options.to,cc,bcc,replyTo\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n * @param {String} [options.inReplyTo] Message-ID this message is replying to\n * @param {String|String[]} [options.references] Array (or space-separated string) of Message-IDs to refer to\n * @param {String} [options.messageId] Message-ID for this message; otherwise, will be set to a random value\n * @param {String} [options.subject]  \"Subject:\" line\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n * @param {String} [options.watchHtml] Mail body in HTML specific for Apple Watch\n * @param {String} [options.icalEvent] iCalendar event attachment\n * @param {Object} [options.headers] Dictionary of custom headers - e.g. `{ \"header name\": \"header value\" }`. To set an object under a header name, use `JSON.stringify` - e.g. `{ \"header name\": JSON.stringify({ tracking: { level: 'full' } }) }`.\n * @param {Object[]} [options.attachments] Array of attachment objects, as\n * described in the [nodemailer documentation](https://nodemailer.com/message/attachments/).\n * @param {MailComposer} [options.mailComposer] A [MailComposer](https://nodemailer.com/extras/mailcomposer/#e-mail-message-fields)\n * object representing the message to be sent.  Overrides all other options.\n * You can create a `MailComposer` object via\n * `new EmailInternals.NpmModules.mailcomposer.module`.\n */\nEmail.send = function (options) {\n  if (options.mailComposer) {\n    options = options.mailComposer.mail;\n  }\n\n  let send = true;\n  sendHooks.each(hook => {\n    send = hook(options);\n    return send;\n  });\n  if (!send) return;\n\n  const customTransport = Email.customTransport;\n  if (customTransport) {\n    const packageSettings = Meteor.settings.packages?.email || {};\n    customTransport({ packageSettings, ...options });\n    return;\n  }\n  if (Meteor.isProduction || process.env.MAIL_URL || Meteor.settings.packages?.email) {\n    const transport = getTransport();\n    smtpSend(transport, options);\n    return;\n  }\n  devModeSend(options);\n};\n"]},"sourceType":"module","hash":"9ce697b5bb723b908a2c1d3a033a511b272c6439"}
