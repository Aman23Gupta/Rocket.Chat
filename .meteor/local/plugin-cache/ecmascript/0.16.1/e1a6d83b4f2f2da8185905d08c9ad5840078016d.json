{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/QueueManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/QueueManager.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/QueueManager.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/QueueManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/QueueManager.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  saveQueueInquiry: () => saveQueueInquiry,\n  queueInquiry: () => queueInquiry,\n  QueueManager: () => QueueManager\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet LivechatRooms, LivechatInquiry, Users;\nmodule.link(\"../../../models/server\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 2);\nlet checkServiceStatus, createLivechatRoom, createLivechatInquiry;\nmodule.link(\"./Helper\", {\n  checkServiceStatus(v) {\n    checkServiceStatus = v;\n  },\n\n  createLivechatRoom(v) {\n    createLivechatRoom = v;\n  },\n\n  createLivechatInquiry(v) {\n    createLivechatInquiry = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\nlet Logger;\nmodule.link(\"../../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 5);\nlet RoutingManager;\nmodule.link(\"./RoutingManager\", {\n  RoutingManager(v) {\n    RoutingManager = v;\n  }\n\n}, 6);\nconst logger = new Logger('QueueManager');\n\nconst saveQueueInquiry = inquiry => {\n  LivechatInquiry.queueInquiry(inquiry._id);\n  callbacks.run('livechat.afterInquiryQueued', inquiry);\n};\n\nconst queueInquiry = (room, inquiry, defaultAgent) => Promise.asyncApply(() => {\n  const inquiryAgent = RoutingManager.delegateAgent(defaultAgent, inquiry);\n  logger.debug(\"Delegating inquiry with id \".concat(inquiry._id, \" to agent \").concat(defaultAgent === null || defaultAgent === void 0 ? void 0 : defaultAgent.username));\n  Promise.await(callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent));\n  inquiry = LivechatInquiry.findOneById(inquiry._id);\n\n  if (inquiry.status === 'ready') {\n    logger.debug(\"Inquiry with id \".concat(inquiry._id, \" is ready. Delegating to agent \").concat(inquiryAgent === null || inquiryAgent === void 0 ? void 0 : inquiryAgent.username));\n    return RoutingManager.delegateInquiry(inquiry, inquiryAgent);\n  }\n});\n\nconst QueueManager = {\n  requestRoom(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        guest,\n        message,\n        roomInfo,\n        agent,\n        extraData\n      } = _ref;\n      logger.debug(\"Requesting a room for guest \".concat(guest._id));\n      check(message, Match.ObjectIncluding({\n        rid: String\n      }));\n      check(guest, Match.ObjectIncluding({\n        _id: String,\n        username: String,\n        status: Match.Maybe(String),\n        department: Match.Maybe(String)\n      }));\n\n      if (!checkServiceStatus({\n        guest,\n        agent\n      })) {\n        logger.debug(\"Cannot create room for visitor \".concat(guest._id, \". No online agents\"));\n        throw new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n      }\n\n      const {\n        rid\n      } = message;\n      const name = roomInfo && roomInfo.fname || guest.name || guest.username;\n      const room = LivechatRooms.findOneById(createLivechatRoom(rid, name, guest, roomInfo, extraData));\n      logger.debug(\"Room for visitor \".concat(guest._id, \" created with id \").concat(room._id));\n      const inquiry = LivechatInquiry.findOneById(createLivechatInquiry({\n        rid,\n        name,\n        guest,\n        message,\n        extraData: _objectSpread(_objectSpread({}, extraData), {}, {\n          source: roomInfo.source\n        })\n      }));\n      logger.debug(\"Generated inquiry for visitor \".concat(guest._id, \" with id \").concat(inquiry._id, \" [Not queued]\"));\n      LivechatRooms.updateRoomCount();\n      Promise.await(queueInquiry(room, inquiry, agent));\n      logger.debug(\"Inquiry \".concat(inquiry._id, \" queued\"));\n      return LivechatRooms.findOneById(rid);\n    });\n  },\n\n  unarchiveRoom() {\n    return Promise.asyncApply(() => {\n      let archivedRoom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        _id: rid,\n        open,\n        closedAt,\n        fname: name,\n        servedBy,\n        v,\n        departmentId: department,\n        lastMessage: message,\n        source = {}\n      } = archivedRoom;\n\n      if (!rid || !closedAt || !!open) {\n        return archivedRoom;\n      }\n\n      logger.debug(\"Attempting to unarchive room with id \".concat(rid));\n      const oldInquiry = LivechatInquiry.findOneByRoomId(rid);\n\n      if (oldInquiry) {\n        logger.debug(\"Removing old inquiry (\".concat(oldInquiry._id, \") for room \").concat(rid));\n        LivechatInquiry.removeByRoomId(rid);\n      }\n\n      const guest = _objectSpread(_objectSpread({}, v), department && {\n        department\n      });\n\n      let defaultAgent;\n\n      if (servedBy && Users.findOneOnlineAgentByUserList(servedBy.username)) {\n        defaultAgent = {\n          agentId: servedBy._id,\n          username: servedBy.username\n        };\n      }\n\n      LivechatRooms.unarchiveOneById(rid);\n      const room = LivechatRooms.findOneById(rid);\n      const inquiry = LivechatInquiry.findOneById(createLivechatInquiry({\n        rid,\n        name,\n        guest,\n        message,\n        extraData: {\n          source\n        }\n      }));\n      logger.debug(\"Generated inquiry for visitor \".concat(v._id, \" with id \").concat(inquiry._id, \" [Not queued]\"));\n      Promise.await(queueInquiry(room, inquiry, defaultAgent));\n      logger.debug(\"Inquiry \".concat(inquiry._id, \" queued\"));\n      return room;\n    });\n  }\n\n};","map":{"version":3,"sources":["app/livechat/server/lib/QueueManager.js"],"names":["_objectSpread","module","link","default","v","export","saveQueueInquiry","queueInquiry","QueueManager","Meteor","Match","check","LivechatRooms","LivechatInquiry","Users","checkServiceStatus","createLivechatRoom","createLivechatInquiry","callbacks","Logger","RoutingManager","logger","inquiry","_id","run","room","defaultAgent","inquiryAgent","delegateAgent","debug","username","findOneById","status","delegateInquiry","requestRoom","guest","message","roomInfo","agent","extraData","ObjectIncluding","rid","String","Maybe","department","Error","name","fname","source","updateRoomCount","unarchiveRoom","archivedRoom","open","closedAt","servedBy","departmentId","lastMessage","oldInquiry","findOneByRoomId","removeByRoomId","findOneOnlineAgentByUserList","agentId","unarchiveOneById"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { LivechatRooms, LivechatInquiry, Users } from '../../../models/server';\nimport { checkServiceStatus, createLivechatRoom, createLivechatInquiry } from './Helper';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Logger } from '../../../logger';\nimport { RoutingManager } from './RoutingManager';\n\nconst logger = new Logger('QueueManager');\n\nexport const saveQueueInquiry = (inquiry) => {\n\tLivechatInquiry.queueInquiry(inquiry._id);\n\tcallbacks.run('livechat.afterInquiryQueued', inquiry);\n};\n\nexport const queueInquiry = async (room, inquiry, defaultAgent) => {\n\tconst inquiryAgent = RoutingManager.delegateAgent(defaultAgent, inquiry);\n\tlogger.debug(`Delegating inquiry with id ${inquiry._id} to agent ${defaultAgent?.username}`);\n\n\tawait callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent);\n\tinquiry = LivechatInquiry.findOneById(inquiry._id);\n\n\tif (inquiry.status === 'ready') {\n\t\tlogger.debug(`Inquiry with id ${inquiry._id} is ready. Delegating to agent ${inquiryAgent?.username}`);\n\t\treturn RoutingManager.delegateInquiry(inquiry, inquiryAgent);\n\t}\n};\n\nexport const QueueManager = {\n\tasync requestRoom({ guest, message, roomInfo, agent, extraData }) {\n\t\tlogger.debug(`Requesting a room for guest ${guest._id}`);\n\t\tcheck(\n\t\t\tmessage,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\trid: String,\n\t\t\t}),\n\t\t);\n\t\tcheck(\n\t\t\tguest,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t}),\n\t\t);\n\n\t\tif (!checkServiceStatus({ guest, agent })) {\n\t\t\tlogger.debug(`Cannot create room for visitor ${guest._id}. No online agents`);\n\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t}\n\n\t\tconst { rid } = message;\n\t\tconst name = (roomInfo && roomInfo.fname) || guest.name || guest.username;\n\n\t\tconst room = LivechatRooms.findOneById(createLivechatRoom(rid, name, guest, roomInfo, extraData));\n\t\tlogger.debug(`Room for visitor ${guest._id} created with id ${room._id}`);\n\n\t\tconst inquiry = LivechatInquiry.findOneById(\n\t\t\tcreateLivechatInquiry({\n\t\t\t\trid,\n\t\t\t\tname,\n\t\t\t\tguest,\n\t\t\t\tmessage,\n\t\t\t\textraData: { ...extraData, source: roomInfo.source },\n\t\t\t}),\n\t\t);\n\t\tlogger.debug(`Generated inquiry for visitor ${guest._id} with id ${inquiry._id} [Not queued]`);\n\n\t\tLivechatRooms.updateRoomCount();\n\n\t\tawait queueInquiry(room, inquiry, agent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued`);\n\n\t\treturn LivechatRooms.findOneById(rid);\n\t},\n\n\tasync unarchiveRoom(archivedRoom = {}) {\n\t\tconst {\n\t\t\t_id: rid,\n\t\t\topen,\n\t\t\tclosedAt,\n\t\t\tfname: name,\n\t\t\tservedBy,\n\t\t\tv,\n\t\t\tdepartmentId: department,\n\t\t\tlastMessage: message,\n\t\t\tsource = {},\n\t\t} = archivedRoom;\n\n\t\tif (!rid || !closedAt || !!open) {\n\t\t\treturn archivedRoom;\n\t\t}\n\n\t\tlogger.debug(`Attempting to unarchive room with id ${rid}`);\n\n\t\tconst oldInquiry = LivechatInquiry.findOneByRoomId(rid);\n\t\tif (oldInquiry) {\n\t\t\tlogger.debug(`Removing old inquiry (${oldInquiry._id}) for room ${rid}`);\n\t\t\tLivechatInquiry.removeByRoomId(rid);\n\t\t}\n\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),\n\t\t};\n\n\t\tlet defaultAgent;\n\t\tif (servedBy && Users.findOneOnlineAgentByUserList(servedBy.username)) {\n\t\t\tdefaultAgent = { agentId: servedBy._id, username: servedBy.username };\n\t\t}\n\n\t\tLivechatRooms.unarchiveOneById(rid);\n\t\tconst room = LivechatRooms.findOneById(rid);\n\t\tconst inquiry = LivechatInquiry.findOneById(createLivechatInquiry({ rid, name, guest, message, extraData: { source } }));\n\t\tlogger.debug(`Generated inquiry for visitor ${v._id} with id ${inquiry._id} [Not queued]`);\n\n\t\tawait queueInquiry(room, inquiry, defaultAgent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued`);\n\n\t\treturn room;\n\t},\n};\n"]},"sourceType":"module","hash":"e1a6d83b4f2f2da8185905d08c9ad5840078016d"}
