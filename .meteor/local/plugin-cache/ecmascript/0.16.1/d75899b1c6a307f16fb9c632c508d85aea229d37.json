{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Helper.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/Helper.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Helper.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Helper.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/Helper.js"}},"code":"const _excluded = [\"customFields\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  allowAgentSkipQueue: () => allowAgentSkipQueue,\n  createLivechatRoom: () => createLivechatRoom,\n  createLivechatInquiry: () => createLivechatInquiry,\n  createLivechatSubscription: () => createLivechatSubscription,\n  removeAgentFromSubscription: () => removeAgentFromSubscription,\n  parseAgentCustomFields: () => parseAgentCustomFields,\n  normalizeAgent: () => normalizeAgent,\n  dispatchAgentDelegated: () => dispatchAgentDelegated,\n  dispatchInquiryQueued: () => dispatchInquiryQueued,\n  forwardRoomToAgent: () => forwardRoomToAgent,\n  updateChatDepartment: () => updateChatDepartment,\n  forwardRoomToDepartment: () => forwardRoomToDepartment,\n  normalizeTransferredByData: () => normalizeTransferredByData,\n  checkServiceStatus: () => checkServiceStatus,\n  userCanTakeInquiry: () => userCanTakeInquiry,\n  updateDepartmentAgents: () => updateDepartmentAgents,\n  validateEmail: () => validateEmail\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 1);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet LivechatTransferEventType;\nmodule.link(\"@rocket.chat/apps-engine/definition/livechat\", {\n  LivechatTransferEventType(v) {\n    LivechatTransferEventType = v;\n  }\n\n}, 3);\nlet hasRole;\nmodule.link(\"../../../authorization\", {\n  hasRole(v) {\n    hasRole = v;\n  }\n\n}, 4);\nlet Messages, LivechatRooms, Rooms, Subscriptions, Users, LivechatInquiry, LivechatDepartment, LivechatDepartmentAgents;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  },\n\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  LivechatDepartmentAgents(v) {\n    LivechatDepartmentAgents = v;\n  }\n\n}, 5);\nlet Livechat;\nmodule.link(\"./Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 6);\nlet RoutingManager;\nmodule.link(\"./RoutingManager\", {\n  RoutingManager(v) {\n    RoutingManager = v;\n  }\n\n}, 7);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 8);\nlet Logger;\nmodule.link(\"../../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 9);\nlet settings;\nmodule.link(\"../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 10);\nlet Apps, AppEvents;\nmodule.link(\"../../../apps/server\", {\n  Apps(v) {\n    Apps = v;\n  },\n\n  AppEvents(v) {\n    AppEvents = v;\n  }\n\n}, 11);\nlet notifications;\nmodule.link(\"../../../notifications/server/lib/Notifications\", {\n  default(v) {\n    notifications = v;\n  }\n\n}, 12);\nlet sendNotification;\nmodule.link(\"../../../lib/server\", {\n  sendNotification(v) {\n    sendNotification = v;\n  }\n\n}, 13);\nlet sendMessage;\nmodule.link(\"../../../lib/server/functions/sendMessage\", {\n  sendMessage(v) {\n    sendMessage = v;\n  }\n\n}, 14);\nlet queueInquiry, saveQueueInquiry;\nmodule.link(\"./QueueManager\", {\n  queueInquiry(v) {\n    queueInquiry = v;\n  },\n\n  saveQueueInquiry(v) {\n    saveQueueInquiry = v;\n  }\n\n}, 15);\nlet OmnichannelSourceType;\nmodule.link(\"../../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 16);\nlet validatorFunc;\nmodule.link(\"../../../../lib/emailValidator\", {\n  validateEmail(v) {\n    validatorFunc = v;\n  }\n\n}, 17);\nconst logger = new Logger('LivechatHelper');\n\nconst allowAgentSkipQueue = agent => {\n  check(agent, Match.ObjectIncluding({\n    agentId: String\n  }));\n  return hasRole(agent.agentId, 'bot');\n};\n\nconst createLivechatRoom = function (rid, name, guest) {\n  let roomInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let extraData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  check(rid, String);\n  check(name, String);\n  check(guest, Match.ObjectIncluding({\n    _id: String,\n    username: String,\n    status: Match.Maybe(String),\n    department: Match.Maybe(String)\n  }));\n  const extraRoomInfo = callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n  const {\n    _id,\n    username,\n    token,\n    department: departmentId,\n    status = 'online'\n  } = guest;\n  const newRoomAt = new Date();\n  logger.debug(\"Creating livechat room for visitor \".concat(_id));\n  const room = Object.assign({\n    _id: rid,\n    msgs: 0,\n    usersCount: 1,\n    lm: newRoomAt,\n    fname: name,\n    t: 'l',\n    ts: newRoomAt,\n    departmentId,\n    v: {\n      _id,\n      username,\n      token,\n      status\n    },\n    cl: false,\n    open: true,\n    waitingResponse: true,\n    // this should be overriden by extraRoomInfo when provided\n    // in case it's not provided, we'll use this \"default\" type\n    source: {\n      type: OmnichannelSourceType.OTHER,\n      alias: 'unknown'\n    },\n    queuedAt: newRoomAt\n  }, extraRoomInfo);\n  const roomId = Rooms.insert(room);\n  Meteor.defer(() => {\n    Apps.triggerEvent(AppEvents.IPostLivechatRoomStarted, room);\n    callbacks.run('livechat.newRoom', room);\n  });\n  sendMessage(guest, {\n    t: 'livechat-started',\n    msg: '',\n    groupable: false\n  }, room);\n  return roomId;\n};\n\nconst createLivechatInquiry = _ref => {\n  let {\n    rid,\n    name,\n    guest,\n    message,\n    initialStatus,\n    extraData = {}\n  } = _ref;\n  check(rid, String);\n  check(name, String);\n  check(guest, Match.ObjectIncluding({\n    _id: String,\n    username: String,\n    status: Match.Maybe(String),\n    department: Match.Maybe(String)\n  }));\n  check(message, Match.ObjectIncluding({\n    msg: String\n  }));\n  const extraInquiryInfo = callbacks.run('livechat.beforeInquiry', extraData);\n  const {\n    _id,\n    username,\n    token,\n    department,\n    status = 'online'\n  } = guest;\n  const {\n    msg\n  } = message;\n  const ts = new Date();\n  logger.debug(\"Creating livechat inquiry for visitor \".concat(_id));\n  const inquiry = Object.assign({\n    rid,\n    name,\n    ts,\n    department,\n    message: msg,\n    status: initialStatus || 'ready',\n    v: {\n      _id,\n      username,\n      token,\n      status\n    },\n    t: 'l',\n    queueOrder: 1,\n    estimatedWaitingTimeQueue: 0,\n    estimatedServiceTimeAt: ts\n  }, extraInquiryInfo);\n  const result = LivechatInquiry.insert(inquiry);\n  logger.debug(\"Inquiry \".concat(result, \" created for visitor \").concat(_id));\n  return result;\n};\n\nconst createLivechatSubscription = (rid, name, guest, agent, department) => {\n  check(rid, String);\n  check(name, String);\n  check(guest, Match.ObjectIncluding({\n    _id: String,\n    username: String,\n    status: Match.Maybe(String)\n  }));\n  check(agent, Match.ObjectIncluding({\n    agentId: String,\n    username: String\n  }));\n  const existingSubscription = Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\n  if (existingSubscription !== null && existingSubscription !== void 0 && existingSubscription._id) {\n    return existingSubscription;\n  }\n\n  const {\n    _id,\n    username,\n    token,\n    status = 'online'\n  } = guest;\n\n  const subscriptionData = _objectSpread({\n    rid,\n    fname: name,\n    alert: true,\n    open: true,\n    unread: 1,\n    userMentions: 1,\n    groupMentions: 0,\n    u: {\n      _id: agent.agentId,\n      username: agent.username\n    },\n    t: 'l',\n    desktopNotifications: 'all',\n    mobilePushNotifications: 'all',\n    emailNotifications: 'all',\n    v: {\n      _id,\n      username,\n      token,\n      status\n    }\n  }, department && {\n    department\n  });\n\n  return Subscriptions.insert(subscriptionData);\n};\n\nconst removeAgentFromSubscription = (rid, _ref2) => {\n  let {\n    _id,\n    username\n  } = _ref2;\n  const room = LivechatRooms.findOneById(rid);\n  const user = Users.findOneById(_id);\n  Subscriptions.removeByRoomIdAndUserId(rid, _id);\n  Messages.createUserLeaveWithRoomIdAndUser(rid, {\n    _id,\n    username\n  });\n  Meteor.defer(() => {\n    Apps.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, {\n      room,\n      user\n    });\n  });\n};\n\nconst parseAgentCustomFields = customFields => {\n  if (!customFields) {\n    return;\n  }\n\n  const externalCustomFields = () => {\n    const accountCustomFields = settings.get('Accounts_CustomFields');\n\n    if (!accountCustomFields || accountCustomFields.trim() === '') {\n      return [];\n    }\n\n    try {\n      const parseCustomFields = JSON.parse(accountCustomFields);\n      return Object.keys(parseCustomFields).filter(customFieldKey => parseCustomFields[customFieldKey].sendToIntegrations === true);\n    } catch (error) {\n      Livechat.logger.error(error);\n      return [];\n    }\n  };\n\n  const externalCF = externalCustomFields();\n  return Object.keys(customFields).reduce((newObj, key) => externalCF.includes(key) ? _objectSpread(_objectSpread({}, newObj), {}, {\n    [key]: customFields[key]\n  }) : newObj, null);\n};\n\nconst normalizeAgent = agentId => {\n  if (!agentId) {\n    return;\n  }\n\n  if (!settings.get('Livechat_show_agent_info')) {\n    return {\n      hiddenInfo: true\n    };\n  }\n\n  const agent = Users.getAgentInfo(agentId);\n\n  const {\n    customFields: agentCustomFields\n  } = agent,\n        extraData = _objectWithoutProperties(agent, _excluded);\n\n  const customFields = parseAgentCustomFields(agentCustomFields);\n  return Object.assign(extraData, _objectSpread({}, customFields && {\n    customFields\n  }));\n};\n\nconst dispatchAgentDelegated = (rid, agentId) => {\n  const agent = normalizeAgent(agentId);\n  notifications.streamLivechatRoom.emit(rid, {\n    type: 'agentData',\n    data: agent\n  });\n};\n\nconst dispatchInquiryQueued = (inquiry, agent) => {\n  if (!(inquiry !== null && inquiry !== void 0 && inquiry._id)) {\n    return;\n  }\n\n  logger.debug(\"Notifying agents of new inquiry \".concat(inquiry._id, \" queued\"));\n  const {\n    department,\n    rid,\n    v\n  } = inquiry;\n  const room = LivechatRooms.findOneById(rid);\n  Meteor.defer(() => callbacks.run('livechat.chatQueued', room));\n\n  if (RoutingManager.getConfig().autoAssignAgent) {\n    return;\n  }\n\n  if (!agent || !allowAgentSkipQueue(agent)) {\n    saveQueueInquiry(inquiry);\n  } // Alert only the online agents of the queued request\n\n\n  const onlineAgents = Livechat.getOnlineAgents(department, agent);\n\n  if (!onlineAgents) {\n    logger.debug('Cannot notify agents of queued inquiry. No online agents found');\n    return;\n  }\n\n  logger.debug(\"Notifying \".concat(onlineAgents.count(), \" agents of new inquiry\"));\n  const notificationUserName = v && (v.name || v.username);\n  onlineAgents.forEach(agent => {\n    if (agent.agentId) {\n      agent = Users.findOneById(agent.agentId);\n    }\n\n    const {\n      _id,\n      active,\n      emails,\n      language,\n      status,\n      statusConnection,\n      username\n    } = agent;\n    sendNotification({\n      // fake a subscription in order to make use of the function defined above\n      subscription: {\n        rid,\n        t: 'l',\n        u: {\n          _id\n        },\n        receiver: [{\n          active,\n          emails,\n          language,\n          status,\n          statusConnection,\n          username\n        }]\n      },\n      sender: v,\n      hasMentionToAll: true,\n      // consider all agents to be in the room\n      hasMentionToHere: false,\n      message: Object.assign({}, {\n        u: v\n      }),\n      // we should use server's language for this type of messages instead of user's\n      notificationMessage: TAPi18n.__('User_started_a_new_conversation', {\n        username: notificationUserName\n      }, language),\n      room: Object.assign(room, {\n        name: TAPi18n.__('New_chat_in_queue', {}, language)\n      }),\n      mentionIds: []\n    });\n  });\n};\n\nconst forwardRoomToAgent = (room, transferData) => Promise.asyncApply(() => {\n  if (!room || !room.open) {\n    return false;\n  }\n\n  logger.debug(\"Forwarding room \".concat(room._id, \" to agent \").concat(transferData.userId));\n  const {\n    userId: agentId,\n    clientAction\n  } = transferData;\n  const user = Users.findOneOnlineAgentById(agentId);\n\n  if (!user) {\n    logger.debug(\"Agent \".concat(agentId, \" is offline. Cannot forward\"));\n    throw new Meteor.Error('error-user-is-offline', 'User is offline', {\n      function: 'forwardRoomToAgent'\n    });\n  }\n\n  const {\n    _id: rid,\n    servedBy: oldServedBy\n  } = room;\n  const inquiry = LivechatInquiry.findOneByRoomId(rid);\n\n  if (!inquiry) {\n    logger.debug(\"No inquiries found for room \".concat(room._id, \". Cannot forward\"));\n    throw new Meteor.Error('error-invalid-inquiry', 'Invalid inquiry', {\n      function: 'forwardRoomToAgent'\n    });\n  }\n\n  if (oldServedBy && agentId === oldServedBy._id) {\n    throw new Meteor.Error('error-selected-agent-room-agent-are-same', 'The selected agent and the room agent are the same', {\n      function: 'forwardRoomToAgent'\n    });\n  }\n\n  const {\n    username\n  } = user;\n  const agent = {\n    agentId,\n    username\n  }; // Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n\n  inquiry.department = undefined; // There are some Enterprise features that may interrupt the forwarding process\n  // Due to that we need to check whether the agent has been changed or not\n\n  logger.debug(\"Forwarding inquiry \".concat(inquiry._id, \" to agent \").concat(agent._id));\n  const roomTaken = Promise.await(RoutingManager.takeInquiry(inquiry, agent, _objectSpread({}, clientAction && {\n    clientAction\n  })));\n\n  if (!roomTaken) {\n    logger.debug(\"Cannot forward inquiry \".concat(inquiry._id));\n    return false;\n  }\n\n  Livechat.saveTransferHistory(room, transferData);\n  const {\n    servedBy\n  } = roomTaken;\n\n  if (servedBy) {\n    if (oldServedBy && servedBy._id !== oldServedBy._id) {\n      RoutingManager.removeAllRoomSubscriptions(room, servedBy);\n    }\n\n    Messages.createUserJoinWithRoomIdAndUser(rid, {\n      _id: servedBy._id,\n      username: servedBy.username\n    });\n    Meteor.defer(() => {\n      Apps.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n        type: LivechatTransferEventType.AGENT,\n        room: rid,\n        from: oldServedBy === null || oldServedBy === void 0 ? void 0 : oldServedBy._id,\n        to: servedBy._id\n      });\n    });\n  }\n\n  logger.debug(\"Inquiry \".concat(inquiry._id, \" taken by agent \").concat(agent._id));\n  callbacks.run('livechat.afterForwardChatToAgent', {\n    rid,\n    servedBy,\n    oldServedBy\n  });\n  return true;\n});\n\nconst updateChatDepartment = _ref3 => {\n  let {\n    rid,\n    newDepartmentId,\n    oldDepartmentId\n  } = _ref3;\n  LivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId);\n  LivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId);\n  Subscriptions.changeDepartmentByRoomId(rid, newDepartmentId);\n  Meteor.defer(() => {\n    Apps.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n      type: LivechatTransferEventType.DEPARTMENT,\n      room: rid,\n      from: oldDepartmentId,\n      to: newDepartmentId\n    });\n  });\n  return callbacks.run('livechat.afterForwardChatToDepartment', {\n    rid,\n    newDepartmentId,\n    oldDepartmentId\n  });\n};\n\nconst forwardRoomToDepartment = (room, guest, transferData) => Promise.asyncApply(() => {\n  if (!room || !room.open) {\n    return false;\n  }\n\n  logger.debug(\"Attempting to forward room \".concat(room._id, \" to department \").concat(transferData.departmentId));\n  callbacks.run('livechat.beforeForwardRoomToDepartment', {\n    room,\n    transferData\n  });\n  const {\n    _id: rid,\n    servedBy: oldServedBy,\n    departmentId: oldDepartmentId\n  } = room;\n  let agent = null;\n  const inquiry = LivechatInquiry.findOneByRoomId(rid);\n\n  if (!inquiry) {\n    logger.debug(\"Cannot forward room \".concat(room._id, \". No inquiries found\"));\n    throw new Meteor.Error('error-transferring-inquiry');\n  }\n\n  const {\n    departmentId\n  } = transferData;\n\n  if (oldDepartmentId === departmentId) {\n    throw new Meteor.Error('error-forwarding-chat-same-department', 'The selected department and the current room department are the same', {\n      function: 'forwardRoomToDepartment'\n    });\n  }\n\n  const {\n    userId: agentId,\n    clientAction\n  } = transferData;\n\n  if (agentId) {\n    logger.debug(\"Forwarding room \".concat(room._id, \" to department \").concat(departmentId, \" (to user \").concat(agentId, \")\"));\n    let user = Users.findOneOnlineAgentById(agentId);\n\n    if (!user) {\n      throw new Meteor.Error('error-user-is-offline', 'User is offline', {\n        function: 'forwardRoomToAgent'\n      });\n    }\n\n    user = LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId);\n\n    if (!user) {\n      throw new Meteor.Error('error-user-not-belong-to-department', 'The selected user does not belong to this department', {\n        function: 'forwardRoomToDepartment'\n      });\n    }\n\n    const {\n      username\n    } = user;\n    agent = {\n      agentId,\n      username\n    };\n  }\n\n  if (!RoutingManager.getConfig().autoAssignAgent) {\n    logger.debug(\"Routing algorithm doesn't support auto assignment (using \".concat(RoutingManager.methodName, \"). Chat will be on department queue\"));\n    Livechat.saveTransferHistory(room, transferData);\n    return RoutingManager.unassignAgent(inquiry, departmentId);\n  } // Fake the department to forward the inquiry - Case the forward process does not success\n  // the inquiry will stay in the same original department\n\n\n  inquiry.department = departmentId;\n  const roomTaken = Promise.await(RoutingManager.delegateInquiry(inquiry, agent, _objectSpread({\n    forwardingToDepartment: {\n      oldDepartmentId\n    }\n  }, clientAction && {\n    clientAction\n  })));\n\n  if (!roomTaken) {\n    logger.debug(\"Cannot forward room \".concat(room._id, \". Unable to delegate inquiry\"));\n    return false;\n  }\n\n  const {\n    servedBy,\n    chatQueued\n  } = roomTaken;\n\n  if (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n    const department = LivechatDepartment.findOneById(departmentId);\n\n    if (!(department !== null && department !== void 0 && department.fallbackForwardDepartment)) {\n      logger.debug(\"Cannot forward room \".concat(room._id, \". Chat assigned to agent \").concat(servedBy._id, \" (Previous was \").concat(oldServedBy._id, \")\"));\n      return false;\n    } // if a chat has a fallback department, attempt to redirect chat to there [EE]\n\n\n    return !!callbacks.run('livechat:onTransferFailure', {\n      room,\n      guest,\n      transferData\n    });\n  }\n\n  Livechat.saveTransferHistory(room, transferData);\n\n  if (oldServedBy) {\n    // if chat is queued then we don't ignore the new servedBy agent bcs at this\n    // point the chat is not assigned to him/her and it is still in the queue\n    RoutingManager.removeAllRoomSubscriptions(room, !chatQueued && servedBy);\n  }\n\n  if (!chatQueued && servedBy) {\n    Messages.createUserJoinWithRoomIdAndUser(rid, servedBy);\n  }\n\n  updateChatDepartment({\n    rid,\n    newDepartmentId: departmentId,\n    oldDepartmentId\n  });\n\n  if (chatQueued) {\n    logger.debug(\"Forwarding succesful. Marking inquiry \".concat(inquiry._id, \" as ready\"));\n    LivechatInquiry.readyInquiry(inquiry._id);\n    LivechatRooms.removeAgentByRoomId(rid);\n    dispatchAgentDelegated(rid, null);\n    const newInquiry = LivechatInquiry.findOneById(inquiry._id);\n    Promise.await(queueInquiry(room, newInquiry));\n    logger.debug(\"Inquiry \".concat(inquiry._id, \" queued succesfully\"));\n  }\n\n  const {\n    token\n  } = guest;\n  Livechat.setDepartmentForGuest({\n    token,\n    department: departmentId\n  });\n  logger.debug(\"Department for visitor with token \".concat(token, \" was updated to \").concat(departmentId));\n  return true;\n});\n\nconst normalizeTransferredByData = (transferredBy, room) => {\n  if (!transferredBy || !room) {\n    throw new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n  }\n\n  const {\n    servedBy: {\n      _id: agentId\n    } = {}\n  } = room;\n  const {\n    _id,\n    username,\n    name,\n    userType: transferType\n  } = transferredBy;\n  const type = transferType || (_id === agentId ? 'agent' : 'user');\n  return _objectSpread(_objectSpread({\n    _id,\n    username\n  }, name && {\n    name\n  }), {}, {\n    type\n  });\n};\n\nconst checkServiceStatus = _ref4 => {\n  let {\n    guest,\n    agent\n  } = _ref4;\n\n  if (!agent) {\n    return Livechat.online(guest.department);\n  }\n\n  const {\n    agentId\n  } = agent;\n  const users = Users.findOnlineAgents(agentId);\n  return users && users.count() > 0;\n};\n\nconst userCanTakeInquiry = user => {\n  check(user, Match.ObjectIncluding({\n    status: String,\n    statusLivechat: String,\n    roles: [String]\n  }));\n  const {\n    roles,\n    status,\n    statusLivechat\n  } = user; // TODO: hasRole when the user has already been fetched from DB\n\n  return status !== 'offline' && statusLivechat === 'available' || roles.includes('bot');\n};\n\nconst updateDepartmentAgents = (departmentId, agents, departmentEnabled) => {\n  check(departmentId, String);\n  check(agents, Match.ObjectIncluding({\n    upsert: Match.Maybe(Array),\n    remove: Match.Maybe(Array)\n  }));\n  const {\n    upsert = [],\n    remove = []\n  } = agents;\n  const agentsRemoved = [];\n  const agentsAdded = [];\n  remove.forEach(_ref5 => {\n    let {\n      agentId\n    } = _ref5;\n    LivechatDepartmentAgents.removeByDepartmentIdAndAgentId(departmentId, agentId);\n    agentsRemoved.push(agentId);\n  });\n\n  if (agentsRemoved.length > 0) {\n    callbacks.runAsync('livechat.removeAgentDepartment', {\n      departmentId,\n      agentsId: agentsRemoved\n    });\n  }\n\n  upsert.forEach(agent => {\n    if (!Users.findOneById(agent.agentId, {\n      fields: {\n        _id: 1\n      }\n    })) {\n      return;\n    }\n\n    LivechatDepartmentAgents.saveAgent({\n      agentId: agent.agentId,\n      departmentId,\n      username: agent.username,\n      count: agent.count ? parseInt(agent.count) : 0,\n      order: agent.order ? parseInt(agent.order) : 0,\n      departmentEnabled\n    });\n    agentsAdded.push(agent.agentId);\n  });\n\n  if (agentsAdded.length > 0) {\n    callbacks.runAsync('livechat.saveAgentDepartment', {\n      departmentId,\n      agentsId: agentsAdded\n    });\n  }\n\n  if (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n    const numAgents = LivechatDepartmentAgents.find({\n      departmentId\n    }).count();\n    LivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n  }\n\n  return true;\n};\n\nconst validateEmail = email => {\n  if (!validatorFunc(email)) {\n    throw new Meteor.Error('error-invalid-email', \"Invalid email \".concat(email), {\n      function: 'Livechat.validateEmail',\n      email\n    });\n  }\n\n  return true;\n};","map":{"version":3,"sources":["app/livechat/server/lib/Helper.js"],"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","export","allowAgentSkipQueue","createLivechatRoom","createLivechatInquiry","createLivechatSubscription","removeAgentFromSubscription","parseAgentCustomFields","normalizeAgent","dispatchAgentDelegated","dispatchInquiryQueued","forwardRoomToAgent","updateChatDepartment","forwardRoomToDepartment","normalizeTransferredByData","checkServiceStatus","userCanTakeInquiry","updateDepartmentAgents","validateEmail","Meteor","TAPi18n","Match","check","LivechatTransferEventType","hasRole","Messages","LivechatRooms","Rooms","Subscriptions","Users","LivechatInquiry","LivechatDepartment","LivechatDepartmentAgents","Livechat","RoutingManager","callbacks","Logger","settings","Apps","AppEvents","notifications","sendNotification","sendMessage","queueInquiry","saveQueueInquiry","OmnichannelSourceType","validatorFunc","logger","agent","ObjectIncluding","agentId","String","rid","name","guest","roomInfo","extraData","_id","username","status","Maybe","department","extraRoomInfo","run","token","departmentId","newRoomAt","Date","debug","room","Object","assign","msgs","usersCount","lm","fname","t","ts","cl","open","waitingResponse","source","type","OTHER","alias","queuedAt","roomId","insert","defer","triggerEvent","IPostLivechatRoomStarted","msg","groupable","message","initialStatus","extraInquiryInfo","inquiry","queueOrder","estimatedWaitingTimeQueue","estimatedServiceTimeAt","result","existingSubscription","findOneByRoomIdAndUserId","subscriptionData","alert","unread","userMentions","groupMentions","u","desktopNotifications","mobilePushNotifications","emailNotifications","findOneById","user","removeByRoomIdAndUserId","createUserLeaveWithRoomIdAndUser","IPostLivechatAgentUnassigned","customFields","externalCustomFields","accountCustomFields","get","trim","parseCustomFields","JSON","parse","keys","filter","customFieldKey","sendToIntegrations","error","externalCF","reduce","newObj","key","includes","hiddenInfo","getAgentInfo","agentCustomFields","streamLivechatRoom","emit","data","getConfig","autoAssignAgent","onlineAgents","getOnlineAgents","count","notificationUserName","forEach","active","emails","language","statusConnection","subscription","receiver","sender","hasMentionToAll","hasMentionToHere","notificationMessage","__","mentionIds","transferData","userId","clientAction","findOneOnlineAgentById","Error","function","servedBy","oldServedBy","findOneByRoomId","undefined","roomTaken","takeInquiry","saveTransferHistory","removeAllRoomSubscriptions","createUserJoinWithRoomIdAndUser","IPostLivechatRoomTransferred","AGENT","from","to","newDepartmentId","oldDepartmentId","changeDepartmentIdByRoomId","changeDepartmentByRoomId","DEPARTMENT","findOneByAgentIdAndDepartmentId","methodName","unassignAgent","delegateInquiry","forwardingToDepartment","chatQueued","fallbackForwardDepartment","readyInquiry","removeAgentByRoomId","newInquiry","setDepartmentForGuest","transferredBy","userType","transferType","online","users","findOnlineAgents","statusLivechat","roles","agents","departmentEnabled","upsert","Array","remove","agentsRemoved","agentsAdded","removeByDepartmentIdAndAgentId","push","length","runAsync","agentsId","fields","saveAgent","parseInt","order","numAgents","find","updateNumAgentsById","email"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { Match, check } from 'meteor/check';\nimport { LivechatTransferEventType } from '@rocket.chat/apps-engine/definition/livechat';\n\nimport { hasRole } from '../../../authorization';\nimport {\n\tMessages,\n\tLivechatRooms,\n\tRooms,\n\tSubscriptions,\n\tUsers,\n\tLivechatInquiry,\n\tLivechatDepartment,\n\tLivechatDepartmentAgents,\n} from '../../../models/server';\nimport { Livechat } from './Livechat';\nimport { RoutingManager } from './RoutingManager';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Logger } from '../../../logger';\nimport { settings } from '../../../settings';\nimport { Apps, AppEvents } from '../../../apps/server';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { sendNotification } from '../../../lib/server';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { queueInquiry, saveQueueInquiry } from './QueueManager';\nimport { OmnichannelSourceType } from '../../../../definition/IRoom';\nimport { validateEmail as validatorFunc } from '../../../../lib/emailValidator';\n\nconst logger = new Logger('LivechatHelper');\n\nexport const allowAgentSkipQueue = (agent) => {\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t}),\n\t);\n\n\treturn hasRole(agent.agentId, 'bot');\n};\n\nexport const createLivechatRoom = (rid, name, guest, roomInfo = {}, extraData = {}) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t}),\n\t);\n\n\tconst extraRoomInfo = callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online' } = guest;\n\tconst newRoomAt = new Date();\n\n\tlogger.debug(`Creating livechat room for visitor ${_id}`);\n\n\tconst room = Object.assign(\n\t\t{\n\t\t\t_id: rid,\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 1,\n\t\t\tlm: newRoomAt,\n\t\t\tfname: name,\n\t\t\tt: 'l',\n\t\t\tts: newRoomAt,\n\t\t\tdepartmentId,\n\t\t\tv: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\ttoken,\n\t\t\t\tstatus,\n\t\t\t},\n\t\t\tcl: false,\n\t\t\topen: true,\n\t\t\twaitingResponse: true,\n\t\t\t// this should be overriden by extraRoomInfo when provided\n\t\t\t// in case it's not provided, we'll use this \"default\" type\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.OTHER,\n\t\t\t\talias: 'unknown',\n\t\t\t},\n\t\t\tqueuedAt: newRoomAt,\n\t\t},\n\t\textraRoomInfo,\n\t);\n\n\tconst roomId = Rooms.insert(room);\n\n\tMeteor.defer(() => {\n\t\tApps.triggerEvent(AppEvents.IPostLivechatRoomStarted, room);\n\t\tcallbacks.run('livechat.newRoom', room);\n\t});\n\n\tsendMessage(guest, { t: 'livechat-started', msg: '', groupable: false }, room);\n\n\treturn roomId;\n};\n\nexport const createLivechatInquiry = ({ rid, name, guest, message, initialStatus, extraData = {} }) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t}),\n\t);\n\tcheck(\n\t\tmessage,\n\t\tMatch.ObjectIncluding({\n\t\t\tmsg: String,\n\t\t}),\n\t);\n\n\tconst extraInquiryInfo = callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = 'online' } = guest;\n\tconst { msg } = message;\n\tconst ts = new Date();\n\n\tlogger.debug(`Creating livechat inquiry for visitor ${_id}`);\n\n\tconst inquiry = Object.assign(\n\t\t{\n\t\t\trid,\n\t\t\tname,\n\t\t\tts,\n\t\t\tdepartment,\n\t\t\tmessage: msg,\n\t\t\tstatus: initialStatus || 'ready',\n\t\t\tv: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\ttoken,\n\t\t\t\tstatus,\n\t\t\t},\n\t\t\tt: 'l',\n\t\t\tqueueOrder: 1,\n\t\t\testimatedWaitingTimeQueue: 0,\n\t\t\testimatedServiceTimeAt: ts,\n\t\t},\n\t\textraInquiryInfo,\n\t);\n\n\tconst result = LivechatInquiry.insert(inquiry);\n\tlogger.debug(`Inquiry ${result} created for visitor ${_id}`);\n\n\treturn result;\n};\n\nexport const createLivechatSubscription = (rid, name, guest, agent, department) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t}),\n\t);\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t\tusername: String,\n\t\t}),\n\t);\n\n\tconst existingSubscription = Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = 'online' } = guest;\n\n\tconst subscriptionData = {\n\t\trid,\n\t\tfname: name,\n\t\talert: true,\n\t\topen: true,\n\t\tunread: 1,\n\t\tuserMentions: 1,\n\t\tgroupMentions: 0,\n\t\tu: {\n\t\t\t_id: agent.agentId,\n\t\t\tusername: agent.username,\n\t\t},\n\t\tt: 'l',\n\t\tdesktopNotifications: 'all',\n\t\tmobilePushNotifications: 'all',\n\t\temailNotifications: 'all',\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t},\n\t\t...(department && { department }),\n\t};\n\n\treturn Subscriptions.insert(subscriptionData);\n};\n\nexport const removeAgentFromSubscription = (rid, { _id, username }) => {\n\tconst room = LivechatRooms.findOneById(rid);\n\tconst user = Users.findOneById(_id);\n\n\tSubscriptions.removeByRoomIdAndUserId(rid, _id);\n\tMessages.createUserLeaveWithRoomIdAndUser(rid, { _id, username });\n\n\tMeteor.defer(() => {\n\t\tApps.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, { room, user });\n\t});\n};\n\nexport const parseAgentCustomFields = (customFields) => {\n\tif (!customFields) {\n\t\treturn;\n\t}\n\n\tconst externalCustomFields = () => {\n\t\tconst accountCustomFields = settings.get('Accounts_CustomFields');\n\t\tif (!accountCustomFields || accountCustomFields.trim() === '') {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {\n\t\t\tLivechat.logger.error(error);\n\t\t\treturn [];\n\t\t}\n\t};\n\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),\n\t\tnull,\n\t);\n};\n\nexport const normalizeAgent = (agentId) => {\n\tif (!agentId) {\n\t\treturn;\n\t}\n\n\tif (!settings.get('Livechat_show_agent_info')) {\n\t\treturn { hiddenInfo: true };\n\t}\n\n\tconst agent = Users.getAgentInfo(agentId);\n\tconst { customFields: agentCustomFields, ...extraData } = agent;\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) });\n};\n\nexport const dispatchAgentDelegated = (rid, agentId) => {\n\tconst agent = normalizeAgent(agentId);\n\n\tnotifications.streamLivechatRoom.emit(rid, {\n\t\ttype: 'agentData',\n\t\tdata: agent,\n\t});\n};\n\nexport const dispatchInquiryQueued = (inquiry, agent) => {\n\tif (!inquiry?._id) {\n\t\treturn;\n\t}\n\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\tconst { department, rid, v } = inquiry;\n\tconst room = LivechatRooms.findOneById(rid);\n\tMeteor.defer(() => callbacks.run('livechat.chatQueued', room));\n\n\tif (RoutingManager.getConfig().autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tif (!agent || !allowAgentSkipQueue(agent)) {\n\t\tsaveQueueInquiry(inquiry);\n\t}\n\n\t// Alert only the online agents of the queued request\n\tconst onlineAgents = Livechat.getOnlineAgents(department, agent);\n\tif (!onlineAgents) {\n\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\treturn;\n\t}\n\n\tlogger.debug(`Notifying ${onlineAgents.count()} agents of new inquiry`);\n\tconst notificationUserName = v && (v.name || v.username);\n\n\tonlineAgents.forEach((agent) => {\n\t\tif (agent.agentId) {\n\t\t\tagent = Users.findOneById(agent.agentId);\n\t\t}\n\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\tsendNotification({\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tt: 'l',\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: Object.assign({}, { u: v }),\n\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\tnotificationMessage: TAPi18n.__('User_started_a_new_conversation', { username: notificationUserName }, language),\n\t\t\troom: Object.assign(room, { name: TAPi18n.__('New_chat_in_queue', {}, language) }),\n\t\t\tmentionIds: [],\n\t\t});\n\t});\n};\n\nexport const forwardRoomToAgent = async (room, transferData) => {\n\tif (!room || !room.open) {\n\t\treturn false;\n\t}\n\n\tlogger.debug(`Forwarding room ${room._id} to agent ${transferData.userId}`);\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tconst user = Users.findOneOnlineAgentById(agentId);\n\tif (!user) {\n\t\tlogger.debug(`Agent ${agentId} is offline. Cannot forward`);\n\t\tthrow new Meteor.Error('error-user-is-offline', 'User is offline', {\n\t\t\tfunction: 'forwardRoomToAgent',\n\t\t});\n\t}\n\n\tconst { _id: rid, servedBy: oldServedBy } = room;\n\tconst inquiry = LivechatInquiry.findOneByRoomId(rid);\n\tif (!inquiry) {\n\t\tlogger.debug(`No inquiries found for room ${room._id}. Cannot forward`);\n\t\tthrow new Meteor.Error('error-invalid-inquiry', 'Invalid inquiry', {\n\t\t\tfunction: 'forwardRoomToAgent',\n\t\t});\n\t}\n\n\tif (oldServedBy && agentId === oldServedBy._id) {\n\t\tthrow new Meteor.Error('error-selected-agent-room-agent-are-same', 'The selected agent and the room agent are the same', {\n\t\t\tfunction: 'forwardRoomToAgent',\n\t\t});\n\t}\n\n\tconst { username } = user;\n\tconst agent = { agentId, username };\n\t// Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n\tinquiry.department = undefined;\n\t// There are some Enterprise features that may interrupt the forwarding process\n\t// Due to that we need to check whether the agent has been changed or not\n\tlogger.debug(`Forwarding inquiry ${inquiry._id} to agent ${agent._id}`);\n\tconst roomTaken = await RoutingManager.takeInquiry(inquiry, agent, {\n\t\t...(clientAction && { clientAction }),\n\t});\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward inquiry ${inquiry._id}`);\n\t\treturn false;\n\t}\n\n\tLivechat.saveTransferHistory(room, transferData);\n\n\tconst { servedBy } = roomTaken;\n\tif (servedBy) {\n\t\tif (oldServedBy && servedBy._id !== oldServedBy._id) {\n\t\t\tRoutingManager.removeAllRoomSubscriptions(room, servedBy);\n\t\t}\n\t\tMessages.createUserJoinWithRoomIdAndUser(rid, {\n\t\t\t_id: servedBy._id,\n\t\t\tusername: servedBy.username,\n\t\t});\n\n\t\tMeteor.defer(() => {\n\t\t\tApps.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\t\ttype: LivechatTransferEventType.AGENT,\n\t\t\t\troom: rid,\n\t\t\t\tfrom: oldServedBy?._id,\n\t\t\t\tto: servedBy._id,\n\t\t\t});\n\t\t});\n\t}\n\n\tlogger.debug(`Inquiry ${inquiry._id} taken by agent ${agent._id}`);\n\tcallbacks.run('livechat.afterForwardChatToAgent', { rid, servedBy, oldServedBy });\n\treturn true;\n};\n\nexport const updateChatDepartment = ({ rid, newDepartmentId, oldDepartmentId }) => {\n\tLivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId);\n\tLivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId);\n\tSubscriptions.changeDepartmentByRoomId(rid, newDepartmentId);\n\n\tMeteor.defer(() => {\n\t\tApps.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\ttype: LivechatTransferEventType.DEPARTMENT,\n\t\t\troom: rid,\n\t\t\tfrom: oldDepartmentId,\n\t\t\tto: newDepartmentId,\n\t\t});\n\t});\n\n\treturn callbacks.run('livechat.afterForwardChatToDepartment', {\n\t\trid,\n\t\tnewDepartmentId,\n\t\toldDepartmentId,\n\t});\n};\n\nexport const forwardRoomToDepartment = async (room, guest, transferData) => {\n\tif (!room || !room.open) {\n\t\treturn false;\n\t}\n\tlogger.debug(`Attempting to forward room ${room._id} to department ${transferData.departmentId}`);\n\n\tcallbacks.run('livechat.beforeForwardRoomToDepartment', { room, transferData });\n\tconst { _id: rid, servedBy: oldServedBy, departmentId: oldDepartmentId } = room;\n\tlet agent = null;\n\n\tconst inquiry = LivechatInquiry.findOneByRoomId(rid);\n\tif (!inquiry) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No inquiries found`);\n\t\tthrow new Meteor.Error('error-transferring-inquiry');\n\t}\n\n\tconst { departmentId } = transferData;\n\tif (oldDepartmentId === departmentId) {\n\t\tthrow new Meteor.Error(\n\t\t\t'error-forwarding-chat-same-department',\n\t\t\t'The selected department and the current room department are the same',\n\t\t\t{ function: 'forwardRoomToDepartment' },\n\t\t);\n\t}\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (agentId) {\n\t\tlogger.debug(`Forwarding room ${room._id} to department ${departmentId} (to user ${agentId})`);\n\t\tlet user = Users.findOneOnlineAgentById(agentId);\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-user-is-offline', 'User is offline', {\n\t\t\t\tfunction: 'forwardRoomToAgent',\n\t\t\t});\n\t\t}\n\t\tuser = LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId);\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-user-not-belong-to-department', 'The selected user does not belong to this department', {\n\t\t\t\tfunction: 'forwardRoomToDepartment',\n\t\t\t});\n\t\t}\n\t\tconst { username } = user;\n\t\tagent = { agentId, username };\n\t}\n\n\tif (!RoutingManager.getConfig().autoAssignAgent) {\n\t\tlogger.debug(\n\t\t\t`Routing algorithm doesn't support auto assignment (using ${RoutingManager.methodName}). Chat will be on department queue`,\n\t\t);\n\t\tLivechat.saveTransferHistory(room, transferData);\n\t\treturn RoutingManager.unassignAgent(inquiry, departmentId);\n\t}\n\n\t// Fake the department to forward the inquiry - Case the forward process does not success\n\t// the inquiry will stay in the same original department\n\tinquiry.department = departmentId;\n\tconst roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, {\n\t\tforwardingToDepartment: { oldDepartmentId },\n\t\t...(clientAction && { clientAction }),\n\t});\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\treturn false;\n\t}\n\n\tconst { servedBy, chatQueued } = roomTaken;\n\tif (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n\t\tconst department = LivechatDepartment.findOneById(departmentId);\n\t\tif (!department?.fallbackForwardDepartment) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Chat assigned to agent ${servedBy._id} (Previous was ${oldServedBy._id})`);\n\t\t\treturn false;\n\t\t}\n\t\t// if a chat has a fallback department, attempt to redirect chat to there [EE]\n\t\treturn !!callbacks.run('livechat:onTransferFailure', { room, guest, transferData });\n\t}\n\n\tLivechat.saveTransferHistory(room, transferData);\n\tif (oldServedBy) {\n\t\t// if chat is queued then we don't ignore the new servedBy agent bcs at this\n\t\t// point the chat is not assigned to him/her and it is still in the queue\n\t\tRoutingManager.removeAllRoomSubscriptions(room, !chatQueued && servedBy);\n\t}\n\tif (!chatQueued && servedBy) {\n\t\tMessages.createUserJoinWithRoomIdAndUser(rid, servedBy);\n\t}\n\n\tupdateChatDepartment({ rid, newDepartmentId: departmentId, oldDepartmentId });\n\n\tif (chatQueued) {\n\t\tlogger.debug(`Forwarding succesful. Marking inquiry ${inquiry._id} as ready`);\n\t\tLivechatInquiry.readyInquiry(inquiry._id);\n\t\tLivechatRooms.removeAgentByRoomId(rid);\n\t\tdispatchAgentDelegated(rid, null);\n\t\tconst newInquiry = LivechatInquiry.findOneById(inquiry._id);\n\t\tawait queueInquiry(room, newInquiry);\n\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued succesfully`);\n\t}\n\n\tconst { token } = guest;\n\tLivechat.setDepartmentForGuest({ token, department: departmentId });\n\tlogger.debug(`Department for visitor with token ${token} was updated to ${departmentId}`);\n\n\treturn true;\n};\n\nexport const normalizeTransferredByData = (transferredBy, room) => {\n\tif (!transferredBy || !room) {\n\t\tthrow new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n\t}\n\tconst { servedBy: { _id: agentId } = {} } = room;\n\tconst { _id, username, name, userType: transferType } = transferredBy;\n\tconst type = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),\n\t\ttype,\n\t};\n};\n\nexport const checkServiceStatus = ({ guest, agent }) => {\n\tif (!agent) {\n\t\treturn Livechat.online(guest.department);\n\t}\n\n\tconst { agentId } = agent;\n\tconst users = Users.findOnlineAgents(agentId);\n\treturn users && users.count() > 0;\n};\n\nexport const userCanTakeInquiry = (user) => {\n\tcheck(\n\t\tuser,\n\t\tMatch.ObjectIncluding({\n\t\t\tstatus: String,\n\t\t\tstatusLivechat: String,\n\t\t\troles: [String],\n\t\t}),\n\t);\n\n\tconst { roles, status, statusLivechat } = user;\n\t// TODO: hasRole when the user has already been fetched from DB\n\treturn (status !== 'offline' && statusLivechat === 'available') || roles.includes('bot');\n};\n\nexport const updateDepartmentAgents = (departmentId, agents, departmentEnabled) => {\n\tcheck(departmentId, String);\n\tcheck(\n\t\tagents,\n\t\tMatch.ObjectIncluding({\n\t\t\tupsert: Match.Maybe(Array),\n\t\t\tremove: Match.Maybe(Array),\n\t\t}),\n\t);\n\n\tconst { upsert = [], remove = [] } = agents;\n\tconst agentsRemoved = [];\n\tconst agentsAdded = [];\n\tremove.forEach(({ agentId }) => {\n\t\tLivechatDepartmentAgents.removeByDepartmentIdAndAgentId(departmentId, agentId);\n\t\tagentsRemoved.push(agentId);\n\t});\n\n\tif (agentsRemoved.length > 0) {\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });\n\t}\n\n\tupsert.forEach((agent) => {\n\t\tif (!Users.findOneById(agent.agentId, { fields: { _id: 1 } })) {\n\t\t\treturn;\n\t\t}\n\n\t\tLivechatDepartmentAgents.saveAgent({\n\t\t\tagentId: agent.agentId,\n\t\t\tdepartmentId,\n\t\t\tusername: agent.username,\n\t\t\tcount: agent.count ? parseInt(agent.count) : 0,\n\t\t\torder: agent.order ? parseInt(agent.order) : 0,\n\t\t\tdepartmentEnabled,\n\t\t});\n\t\tagentsAdded.push(agent.agentId);\n\t});\n\n\tif (agentsAdded.length > 0) {\n\t\tcallbacks.runAsync('livechat.saveAgentDepartment', {\n\t\t\tdepartmentId,\n\t\t\tagentsId: agentsAdded,\n\t\t});\n\t}\n\n\tif (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n\t\tconst numAgents = LivechatDepartmentAgents.find({ departmentId }).count();\n\t\tLivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n\t}\n\n\treturn true;\n};\n\nexport const validateEmail = (email) => {\n\tif (!validatorFunc(email)) {\n\t\tthrow new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {\n\t\t\tfunction: 'Livechat.validateEmail',\n\t\t\temail,\n\t\t});\n\t}\n\treturn true;\n};\n"]},"sourceType":"module","hash":"d75899b1c6a307f16fb9c632c508d85aea229d37"}
