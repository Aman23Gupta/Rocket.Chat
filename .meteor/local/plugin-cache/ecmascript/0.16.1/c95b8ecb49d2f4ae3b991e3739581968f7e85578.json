{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAdapter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/SlackAdapter.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAdapter.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAdapter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/SlackAdapter.js"}},"code":"module.export({\n  default: () => SlackAdapter\n});\nlet url;\nmodule.link(\"url\", {\n  default(v) {\n    url = v;\n  }\n\n}, 0);\nlet http;\nmodule.link(\"http\", {\n  default(v) {\n    http = v;\n  }\n\n}, 1);\nlet https;\nmodule.link(\"https\", {\n  default(v) {\n    https = v;\n  }\n\n}, 2);\nlet RTMClient;\nmodule.link(\"@slack/client\", {\n  RTMClient(v) {\n    RTMClient = v;\n  }\n\n}, 3);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 4);\nlet slackLogger;\nmodule.link(\"./logger\", {\n  slackLogger(v) {\n    slackLogger = v;\n  }\n\n}, 5);\nlet SlackAPI;\nmodule.link(\"./SlackAPI\", {\n  SlackAPI(v) {\n    SlackAPI = v;\n  }\n\n}, 6);\nlet getUserAvatarURL;\nmodule.link(\"../../utils/lib/getUserAvatarURL\", {\n  getUserAvatarURL(v) {\n    getUserAvatarURL = v;\n  }\n\n}, 7);\nlet Messages, Rooms, Users;\nmodule.link(\"../../models\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 8);\nlet settings;\nmodule.link(\"../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 9);\nlet deleteMessage, updateMessage, addUserToRoom, removeUserFromRoom, archiveRoom, unarchiveRoom, sendMessage;\nmodule.link(\"../../lib\", {\n  deleteMessage(v) {\n    deleteMessage = v;\n  },\n\n  updateMessage(v) {\n    updateMessage = v;\n  },\n\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  },\n\n  removeUserFromRoom(v) {\n    removeUserFromRoom = v;\n  },\n\n  archiveRoom(v) {\n    archiveRoom = v;\n  },\n\n  unarchiveRoom(v) {\n    unarchiveRoom = v;\n  },\n\n  sendMessage(v) {\n    sendMessage = v;\n  }\n\n}, 10);\nlet saveRoomName, saveRoomTopic;\nmodule.link(\"../../channel-settings\", {\n  saveRoomName(v) {\n    saveRoomName = v;\n  },\n\n  saveRoomTopic(v) {\n    saveRoomTopic = v;\n  }\n\n}, 11);\nlet FileUpload;\nmodule.link(\"../../file-upload\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 12);\n\nclass SlackAdapter {\n  constructor(slackBridge) {\n    slackLogger.debug('constructor');\n    this.slackBridge = slackBridge;\n    this.rtm = {}; // slack-client Real Time Messaging API\n\n    this.apiToken = {}; // Slack API Token passed in via Connect\n    // On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n\n    this.slackChannelRocketBotMembershipMap = new Map(); // Key=RocketChannelID, Value=SlackChannel\n\n    this.rocket = {};\n    this.messagesBeingSent = [];\n    this.slackBotId = false;\n    this.slackAPI = {};\n  }\n  /**\n   * Connect to the remote Slack server using the passed in token API and register for Slack events\n   * @param apiToken\n   */\n\n\n  connect(apiToken) {\n    this.apiToken = apiToken;\n\n    if (RTMClient != null) {\n      RTMClient.disconnect;\n    }\n\n    this.slackAPI = new SlackAPI(this.apiToken);\n    this.rtm = new RTMClient(this.apiToken);\n    this.rtm.start();\n    this.registerForEvents();\n    Meteor.startup(() => {\n      try {\n        this.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n      } catch (err) {\n        slackLogger.error('Error attempting to connect to Slack', err);\n        this.slackBridge.disconnect();\n      }\n    });\n  }\n  /**\n   * Unregister for slack events and disconnect from Slack\n   */\n\n\n  disconnect() {\n    this.rtm.disconnect && this.rtm.disconnect();\n  }\n\n  setRocket(rocket) {\n    this.rocket = rocket;\n  }\n\n  registerForEvents() {\n    slackLogger.debug('Register for events');\n    this.rtm.on('authenticated', () => {\n      slackLogger.info('Connected to Slack');\n    });\n    this.rtm.on('unable_to_rtm_start', () => {\n      this.slackBridge.disconnect();\n    });\n    this.rtm.on('disconnected', () => {\n      slackLogger.info('Disconnected from Slack');\n      this.slackBridge.disconnect();\n    });\n    /**\n     * Event fired when someone messages a channel the bot is in\n     * {\n     *\ttype: 'message',\n     * \tchannel: [channel_id],\n     * \tuser: [user_id],\n     * \ttext: [message],\n     * \tts: [ts.milli],\n     * \tteam: [team_id],\n     * \tsubtype: [message_subtype],\n     * \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n     * }\n     **/\n\n    this.rtm.on('message', Meteor.bindEnvironment(slackMessage => {\n      slackLogger.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\n      if (slackMessage) {\n        try {\n          this.onMessage(slackMessage);\n        } catch (err) {\n          slackLogger.error('Unhandled error onMessage', err);\n        }\n      }\n    }));\n    this.rtm.on('reaction_added', Meteor.bindEnvironment(reactionMsg => {\n      slackLogger.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\n      if (reactionMsg) {\n        try {\n          this.onReactionAdded(reactionMsg);\n        } catch (err) {\n          slackLogger.error('Unhandled error onReactionAdded', err);\n        }\n      }\n    }));\n    this.rtm.on('reaction_removed', Meteor.bindEnvironment(reactionMsg => {\n      slackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\n      if (reactionMsg) {\n        try {\n          this.onReactionRemoved(reactionMsg);\n        } catch (err) {\n          slackLogger.error('Unhandled error onReactionRemoved', err);\n        }\n      }\n    }));\n    /**\n     * Event fired when someone creates a public channel\n     * {\n     *\ttype: 'channel_created',\n     *\tchannel: {\n     *\t\tid: [channel_id],\n     *\t\tis_channel: true,\n     *\t\tname: [channel_name],\n     *\t\tcreated: [ts],\n     *\t\tcreator: [user_id],\n     *\t\tis_shared: false,\n     *\t\tis_org_shared: false\n     *\t},\n     *\tevent_ts: [ts.milli]\n     * }\n     **/\n\n    this.rtm.on('channel_created', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the bot joins a public channel\n     * {\n     * \ttype: 'channel_joined',\n     * \tchannel: {\n     * \t\tid: [channel_id],\n     * \t\tname: [channel_name],\n     * \t\tis_channel: true,\n     * \t\tcreated: [ts],\n     * \t\tcreator: [user_id],\n     * \t\tis_archived: false,\n     * \t\tis_general: false,\n     * \t\tis_member: true,\n     * \t\tlast_read: [ts.milli],\n     * \t\tlatest: [message_obj],\n     * \t\tunread_count: 0,\n     * \t\tunread_count_display: 0,\n     * \t\tmembers: [ user_ids ],\n     * \t\ttopic: {\n     * \t\t\tvalue: [channel_topic],\n     * \t\t\tcreator: [user_id],\n     * \t\t\tlast_set: 0\n     * \t\t},\n     * \t\tpurpose: {\n     * \t\t\tvalue: [channel_purpose],\n     * \t\t\tcreator: [user_id],\n     * \t\t\tlast_set: 0\n     * \t\t}\n     * \t}\n     * }\n     **/\n\n    this.rtm.on('channel_joined', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the bot leaves (or is removed from) a public channel\n     * {\n     * \ttype: 'channel_left',\n     * \tchannel: [channel_id]\n     * }\n     **/\n\n    this.rtm.on('channel_left', Meteor.bindEnvironment(channelLeftMsg => {\n      slackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n\n      if (channelLeftMsg) {\n        try {\n          this.onChannelLeft(channelLeftMsg);\n        } catch (err) {\n          slackLogger.error('Unhandled error onChannelLeft', err);\n        }\n      }\n    }));\n    /**\n     * Event fired when an archived channel is deleted by an admin\n     * {\n     * \ttype: 'channel_deleted',\n     * \tchannel: [channel_id],\n     *\tevent_ts: [ts.milli]\n     * }\n     **/\n\n    this.rtm.on('channel_deleted', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the channel has its name changed\n     * {\n     * \ttype: 'channel_rename',\n     * \tchannel: {\n     * \t\tid: [channel_id],\n     * \t\tname: [channel_name],\n     * \t\tis_channel: true,\n     * \t\tcreated: [ts]\n     * \t},\n     *\tevent_ts: [ts.milli]\n     * }\n     **/\n\n    this.rtm.on('channel_rename', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the bot joins a private channel\n     * {\n     * \ttype: 'group_joined',\n     * \tchannel: {\n     * \t\tid: [channel_id],\n     * \t\tname: [channel_name],\n     * \t\tis_group: true,\n     * \t\tcreated: [ts],\n     * \t\tcreator: [user_id],\n     * \t\tis_archived: false,\n     * \t\tis_mpim: false,\n     * \t\tis_open: true,\n     * \t\tlast_read: [ts.milli],\n     * \t\tlatest: [message_obj],\n     * \t\tunread_count: 0,\n     * \t\tunread_count_display: 0,\n     * \t\tmembers: [ user_ids ],\n     * \t\ttopic: {\n     * \t\t\tvalue: [channel_topic],\n     * \t\t\tcreator: [user_id],\n     * \t\t\tlast_set: 0\n     * \t\t},\n     * \t\tpurpose: {\n     * \t\t\tvalue: [channel_purpose],\n     * \t\t\tcreator: [user_id],\n     * \t\t\tlast_set: 0\n     * \t\t}\n     * \t}\n     * }\n     **/\n\n    this.rtm.on('group_joined', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the bot leaves (or is removed from) a private channel\n     * {\n     * \ttype: 'group_left',\n     * \tchannel: [channel_id]\n     * }\n     **/\n\n    this.rtm.on('group_left', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when the private channel has its name changed\n     * {\n     * \ttype: 'group_rename',\n     * \tchannel: {\n     * \t\tid: [channel_id],\n     * \t\tname: [channel_name],\n     * \t\tis_group: true,\n     * \t\tcreated: [ts]\n     * \t},\n     *\tevent_ts: [ts.milli]\n     * }\n     **/\n\n    this.rtm.on('group_rename', Meteor.bindEnvironment(() => {}));\n    /**\n     * Event fired when a new user joins the team\n     * {\n     * \ttype: 'team_join',\n     * \tuser:\n     * \t{\n     * \t\tid: [user_id],\n     * \t\tteam_id: [team_id],\n     * \t\tname: [user_name],\n     * \t\tdeleted: false,\n     * \t\tstatus: null,\n     * \t\tcolor: [color_code],\n     * \t\treal_name: '',\n     * \t\ttz: [timezone],\n     * \t\ttz_label: [timezone_label],\n     * \t\ttz_offset: [timezone_offset],\n     * \t\tprofile:\n     * \t\t{\n     * \t\t\tavatar_hash: '',\n     * \t\t\treal_name: '',\n     * \t\t\treal_name_normalized: '',\n     * \t\t\temail: '',\n     * \t\t\timage_24: '',\n     * \t\t\timage_32: '',\n     * \t\t\timage_48: '',\n     * \t\t\timage_72: '',\n     * \t\t\timage_192: '',\n     * \t\t\timage_512: '',\n     * \t\t\tfields: null\n     * \t\t},\n     * \t\tis_admin: false,\n     * \t\tis_owner: false,\n     * \t\tis_primary_owner: false,\n     * \t\tis_restricted: false,\n     * \t\tis_ultra_restricted: false,\n     * \t\tis_bot: false,\n     * \t\tpresence: [user_presence]\n     * \t},\n     * \tcache_ts: [ts]\n     * }\n     **/\n\n    this.rtm.on('team_join', Meteor.bindEnvironment(() => {}));\n  }\n  /*\n   https://api.slack.com/events/reaction_removed\n   */\n\n\n  onReactionRemoved(slackReactionMsg) {\n    if (slackReactionMsg) {\n      if (!this.slackBridge.isReactionsEnabled) {\n        return;\n      }\n\n      const rocketUser = this.rocket.getUser(slackReactionMsg.user); // Lets find our Rocket originated message\n\n      let rocketMsg = Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n      if (!rocketMsg) {\n        // Must have originated from Slack\n        const rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n        rocketMsg = Messages.findOneById(rocketID);\n      }\n\n      if (rocketMsg && rocketUser) {\n        const rocketReaction = \":\".concat(slackReactionMsg.reaction, \":\"); // If the Rocket user has already been removed, then this is an echo back from slack\n\n        if (rocketMsg.reactions) {\n          const theReaction = rocketMsg.reactions[rocketReaction];\n\n          if (theReaction) {\n            if (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n              return; // Reaction already removed\n            }\n          }\n        } else {\n          // Reaction already removed\n          return;\n        } // Stash this away to key off it later so we don't send it back to Slack\n\n\n        this.slackBridge.reactionsMap.set(\"unset\".concat(rocketMsg._id).concat(rocketReaction), rocketUser);\n        slackLogger.debug('Removing reaction from Slack');\n        Meteor.runAsUser(rocketUser._id, () => {\n          Meteor.call('setReaction', rocketReaction, rocketMsg._id);\n        });\n      }\n    }\n  }\n  /*\n   https://api.slack.com/events/reaction_added\n   */\n\n\n  onReactionAdded(slackReactionMsg) {\n    if (slackReactionMsg) {\n      if (!this.slackBridge.isReactionsEnabled) {\n        return;\n      }\n\n      const rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\n      if (rocketUser.roles.includes('bot')) {\n        return;\n      } // Lets find our Rocket originated message\n\n\n      let rocketMsg = Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n      if (!rocketMsg) {\n        // Must have originated from Slack\n        const rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n        rocketMsg = Messages.findOneById(rocketID);\n      }\n\n      if (rocketMsg && rocketUser) {\n        const rocketReaction = \":\".concat(slackReactionMsg.reaction, \":\"); // If the Rocket user has already reacted, then this is Slack echoing back to us\n\n        if (rocketMsg.reactions) {\n          const theReaction = rocketMsg.reactions[rocketReaction];\n\n          if (theReaction) {\n            if (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n              return; // Already reacted\n            }\n          }\n        } // Stash this away to key off it later so we don't send it back to Slack\n\n\n        this.slackBridge.reactionsMap.set(\"set\".concat(rocketMsg._id).concat(rocketReaction), rocketUser);\n        slackLogger.debug('Adding reaction from Slack');\n        Meteor.runAsUser(rocketUser._id, () => {\n          Meteor.call('setReaction', rocketReaction, rocketMsg._id);\n        });\n      }\n    }\n  }\n\n  onChannelLeft(channelLeftMsg) {\n    this.removeSlackChannel(channelLeftMsg.channel);\n  }\n  /**\n   * We have received a message from slack and we need to save/delete/update it into rocket\n   * https://api.slack.com/events/message\n   */\n\n\n  onMessage(slackMessage, isImporting) {\n    const isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\n    if (isAFileShare) {\n      this.processFileShare(slackMessage);\n      return;\n    }\n\n    if (slackMessage.subtype) {\n      switch (slackMessage.subtype) {\n        case 'message_deleted':\n          this.processMessageDeleted(slackMessage);\n          break;\n\n        case 'message_changed':\n          this.processMessageChanged(slackMessage);\n          break;\n\n        case 'channel_join':\n          this.processChannelJoin(slackMessage);\n          break;\n\n        default:\n          // Keeping backwards compatability for now, refactor later\n          this.processNewMessage(slackMessage, isImporting);\n      }\n    } else {\n      // Simple message\n      this.processNewMessage(slackMessage, isImporting);\n    }\n  }\n\n  postFindChannel(rocketChannelName) {\n    slackLogger.debug('Searching for Slack channel or group', rocketChannelName);\n    const channels = this.slackAPI.getChannels();\n\n    if (channels && channels.length > 0) {\n      for (const channel of channels) {\n        if (channel.name === rocketChannelName && channel.is_member === true) {\n          return channel;\n        }\n      }\n    }\n\n    const groups = this.slackAPI.getGroups();\n\n    if (groups && groups.length > 0) {\n      for (const group of groups) {\n        if (group.name === rocketChannelName) {\n          return group;\n        }\n      }\n    }\n  }\n  /**\n   * Retrieves the Slack TS from a Rocket msg that originated from Slack\n   * @param rocketMsg\n   * @returns Slack TS or undefined if not a message that originated from slack\n   * @private\n   */\n\n\n  getTimeStamp(rocketMsg) {\n    // slack-G3KJGGE15-1483081061-000169\n    let slackTS;\n\n    let index = rocketMsg._id.indexOf('slack-');\n\n    if (index === 0) {\n      // This is a msg that originated from Slack\n      slackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n      index = slackTS.indexOf('-');\n      slackTS = slackTS.substr(index + 1, slackTS.length);\n      slackTS = slackTS.replace('-', '.');\n    } else {\n      // This probably originated as a Rocket msg, but has been sent to Slack\n      slackTS = rocketMsg.slackTs;\n    }\n\n    return slackTS;\n  }\n  /**\n   * Adds a slack channel to our collection that the rocketbot is a member of on slack\n   * @param rocketChID\n   * @param slackChID\n   */\n\n\n  addSlackChannel(rocketChID, slackChID) {\n    const ch = this.getSlackChannel(rocketChID);\n\n    if (ch == null) {\n      slackLogger.debug('Added channel', {\n        rocketChID,\n        slackChID\n      });\n      this.slackChannelRocketBotMembershipMap.set(rocketChID, {\n        id: slackChID,\n        family: slackChID.charAt(0) === 'C' ? 'channels' : 'groups'\n      });\n    }\n  }\n\n  removeSlackChannel(slackChID) {\n    const keys = this.slackChannelRocketBotMembershipMap.keys();\n    let slackChannel;\n    let key;\n\n    while ((key = keys.next().value) != null) {\n      slackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n\n      if (slackChannel.id === slackChID) {\n        // Found it, need to delete it\n        this.slackChannelRocketBotMembershipMap.delete(key);\n        break;\n      }\n    }\n  }\n\n  getSlackChannel(rocketChID) {\n    return this.slackChannelRocketBotMembershipMap.get(rocketChID);\n  }\n\n  populateMembershipChannelMapByChannels() {\n    const channels = this.slackAPI.getChannels();\n\n    if (!channels || channels.length <= 0) {\n      return;\n    }\n\n    for (const slackChannel of channels) {\n      const rocketchat_room = Rooms.findOneByName(slackChannel.name, {\n        fields: {\n          _id: 1\n        }\n      }) || Rooms.findOneByImportId(slackChannel.id, {\n        fields: {\n          _id: 1\n        }\n      });\n\n      if (rocketchat_room && slackChannel.is_member) {\n        this.addSlackChannel(rocketchat_room._id, slackChannel.id);\n      }\n    }\n  }\n\n  populateMembershipChannelMapByGroups() {\n    const groups = this.slackAPI.getGroups();\n\n    if (!groups || groups.length <= 0) {\n      return;\n    }\n\n    for (const slackGroup of groups) {\n      const rocketchat_room = Rooms.findOneByName(slackGroup.name, {\n        fields: {\n          _id: 1\n        }\n      }) || Rooms.findOneByImportId(slackGroup.id, {\n        fields: {\n          _id: 1\n        }\n      });\n\n      if (rocketchat_room && slackGroup.is_member) {\n        this.addSlackChannel(rocketchat_room._id, slackGroup.id);\n      }\n    }\n  }\n\n  populateMembershipChannelMap() {\n    slackLogger.debug('Populating channel map');\n    this.populateMembershipChannelMapByChannels();\n    this.populateMembershipChannelMapByGroups();\n  }\n  /*\n   https://api.slack.com/methods/reactions.add\n   */\n\n\n  postReactionAdded(reaction, slackChannel, slackTS) {\n    if (reaction && slackChannel && slackTS) {\n      const data = {\n        token: this.apiToken,\n        name: reaction,\n        channel: slackChannel,\n        timestamp: slackTS\n      };\n      slackLogger.debug('Posting Add Reaction to Slack');\n      const postResult = this.slackAPI.react(data);\n\n      if (postResult) {\n        slackLogger.debug('Reaction added to Slack');\n      }\n    }\n  }\n  /*\n   https://api.slack.com/methods/reactions.remove\n   */\n\n\n  postReactionRemove(reaction, slackChannel, slackTS) {\n    if (reaction && slackChannel && slackTS) {\n      const data = {\n        token: this.apiToken,\n        name: reaction,\n        channel: slackChannel,\n        timestamp: slackTS\n      };\n      slackLogger.debug('Posting Remove Reaction to Slack');\n      const postResult = this.slackAPI.removeReaction(data);\n\n      if (postResult) {\n        slackLogger.debug('Reaction removed from Slack');\n      }\n    }\n  }\n\n  postDeleteMessage(rocketMessage) {\n    if (rocketMessage) {\n      const slackChannel = this.getSlackChannel(rocketMessage.rid);\n\n      if (slackChannel != null) {\n        const data = {\n          token: this.apiToken,\n          ts: this.getTimeStamp(rocketMessage),\n          channel: this.getSlackChannel(rocketMessage.rid).id,\n          as_user: true\n        };\n        slackLogger.debug('Post Delete Message to Slack', data);\n        const postResult = this.slackAPI.removeMessage(data);\n\n        if (postResult) {\n          slackLogger.debug('Message deleted on Slack');\n        }\n      }\n    }\n  }\n\n  storeMessageBeingSent(data) {\n    this.messagesBeingSent.push(data);\n  }\n\n  removeMessageBeingSent(data) {\n    const idx = this.messagesBeingSent.indexOf(data);\n\n    if (idx >= 0) {\n      this.messagesBeingSent.splice(idx, 1);\n    }\n  }\n\n  isMessageBeingSent(username, channel) {\n    if (!this.messagesBeingSent.length) {\n      return false;\n    }\n\n    return this.messagesBeingSent.some(messageData => {\n      if (messageData.username !== username) {\n        return false;\n      }\n\n      if (messageData.channel !== channel) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  postMessage(slackChannel, rocketMessage) {\n    if (slackChannel && slackChannel.id) {\n      let iconUrl = getUserAvatarURL(rocketMessage.u && rocketMessage.u.username);\n\n      if (iconUrl) {\n        iconUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n      }\n\n      const data = {\n        token: this.apiToken,\n        text: rocketMessage.msg,\n        channel: slackChannel.id,\n        username: rocketMessage.u && rocketMessage.u.username,\n        icon_url: iconUrl,\n        link_names: 1\n      };\n\n      if (rocketMessage.tmid) {\n        const tmessage = Messages.findOneById(rocketMessage.tmid);\n\n        if (tmessage && tmessage.slackTs) {\n          data.thread_ts = tmessage.slackTs;\n        }\n      }\n\n      slackLogger.debug('Post Message To Slack', data); // If we don't have the bot id yet and we have multiple slack bridges, we need to keep track of the messages that are being sent\n\n      if (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n        this.storeMessageBeingSent(data);\n      }\n\n      const postResult = this.slackAPI.sendMessage(data);\n\n      if (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n        this.removeMessageBeingSent(data);\n      }\n\n      if (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n        this.slackBotId = postResult.data.message.bot_id;\n        Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n        slackLogger.debug(\"RocketMsgID=\".concat(rocketMessage._id, \" SlackMsgID=\").concat(postResult.data.message.ts, \" SlackBotID=\").concat(postResult.data.message.bot_id));\n      }\n    }\n  }\n  /*\n   https://api.slack.com/methods/chat.update\n   */\n\n\n  postMessageUpdate(slackChannel, rocketMessage) {\n    if (slackChannel && slackChannel.id) {\n      const data = {\n        token: this.apiToken,\n        ts: this.getTimeStamp(rocketMessage),\n        channel: slackChannel.id,\n        text: rocketMessage.msg,\n        as_user: true\n      };\n      slackLogger.debug('Post UpdateMessage To Slack', data);\n      const postResult = this.slackAPI.updateMessage(data);\n\n      if (postResult) {\n        slackLogger.debug('Message updated on Slack');\n      }\n    }\n  }\n\n  processChannelJoin(slackMessage) {\n    slackLogger.debug('Channel join', slackMessage.channel.id);\n    const rocketCh = this.rocket.addChannel(slackMessage.channel);\n\n    if (rocketCh != null) {\n      this.addSlackChannel(rocketCh._id, slackMessage.channel);\n    }\n  }\n\n  processFileShare(slackMessage) {\n    if (!settings.get('SlackBridge_FileUpload_Enabled')) {\n      return;\n    }\n\n    const file = slackMessage.files[0];\n\n    if (file && file.url_private_download !== undefined) {\n      const rocketChannel = this.rocket.getChannel(slackMessage);\n      const rocketUser = this.rocket.getUser(slackMessage.user); // Hack to notify that a file was attempted to be uploaded\n\n      delete slackMessage.subtype; // If the text includes the file link, simply use the same text for the rocket message.\n      // If the link was not included, then use it instead of the message.\n\n      if (slackMessage.text.indexOf(file.permalink) < 0) {\n        slackMessage.text = file.permalink;\n      }\n\n      const ts = new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000);\n      const msgDataDefaults = {\n        _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n        ts,\n        updatedBySlack: true\n      };\n      this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, false);\n    }\n  }\n  /*\n   https://api.slack.com/events/message/message_deleted\n   */\n\n\n  processMessageDeleted(slackMessage) {\n    if (slackMessage.previous_message) {\n      const rocketChannel = this.rocket.getChannel(slackMessage);\n      const rocketUser = Users.findOneById('rocket.cat', {\n        fields: {\n          username: 1\n        }\n      });\n\n      if (rocketChannel && rocketUser) {\n        // Find the Rocket message to delete\n        let rocketMsgObj = Messages.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n        if (!rocketMsgObj) {\n          // Must have been a Slack originated msg\n          const _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\n          rocketMsgObj = Messages.findOneById(_id);\n        }\n\n        if (rocketMsgObj) {\n          deleteMessage(rocketMsgObj, rocketUser);\n          slackLogger.debug('Rocket message deleted by Slack');\n        }\n      }\n    }\n  }\n  /*\n   https://api.slack.com/events/message/message_changed\n   */\n\n\n  processMessageChanged(slackMessage) {\n    if (slackMessage.previous_message) {\n      const currentMsg = Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts)); // Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\n      if (currentMsg && slackMessage.message.text !== currentMsg.msg) {\n        const rocketChannel = this.rocket.getChannel(slackMessage);\n        const rocketUser = slackMessage.previous_message.user ? this.rocket.findUser(slackMessage.previous_message.user) || this.rocket.addUser(slackMessage.previous_message.user) : null;\n        const rocketMsgObj = {\n          // @TODO _id\n          _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n          rid: rocketChannel._id,\n          msg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n          updatedBySlack: true // We don't want to notify slack about this change since Slack initiated it\n\n        };\n        updateMessage(rocketMsgObj, rocketUser);\n        slackLogger.debug('Rocket message updated by Slack');\n      }\n    }\n  }\n  /*\n   This method will get refactored and broken down into single responsibilities\n   */\n\n\n  processNewMessage(slackMessage, isImporting) {\n    const rocketChannel = this.rocket.getChannel(slackMessage);\n    let rocketUser = null;\n\n    if (slackMessage.subtype === 'bot_message') {\n      rocketUser = Users.findOneById('rocket.cat', {\n        fields: {\n          username: 1\n        }\n      });\n    } else {\n      rocketUser = slackMessage.user ? this.rocket.findUser(slackMessage.user) || this.rocket.addUser(slackMessage.user) : null;\n    }\n\n    if (rocketChannel && rocketUser) {\n      const msgDataDefaults = {\n        _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n      };\n\n      if (isImporting) {\n        msgDataDefaults.imported = 'slackbridge';\n      }\n\n      try {\n        this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting, this);\n      } catch (e) {\n        // http://www.mongodb.org/about/contributors/error-codes/\n        // 11000 == duplicate key error\n        if (e.name === 'MongoError' && e.code === 11000) {\n          return;\n        }\n\n        throw e;\n      }\n    }\n  }\n\n  processBotMessage(rocketChannel, slackMessage) {\n    const excludeBotNames = settings.get('SlackBridge_ExcludeBotnames');\n\n    if (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n      return;\n    }\n\n    if (this.slackBotId) {\n      if (slackMessage.bot_id === this.slackBotId) {\n        return;\n      }\n    } else {\n      const slackChannel = this.getSlackChannel(rocketChannel._id);\n\n      if (this.isMessageBeingSent(slackMessage.username || slackMessage.bot_id, slackChannel.id)) {\n        return;\n      }\n    }\n\n    const rocketMsgObj = {\n      msg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n      rid: rocketChannel._id,\n      bot: true,\n      attachments: slackMessage.attachments,\n      username: slackMessage.username || slackMessage.bot_id\n    };\n    this.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\n    if (slackMessage.icons) {\n      rocketMsgObj.emoji = slackMessage.icons.emoji;\n    }\n\n    return rocketMsgObj;\n  }\n\n  processMeMessage(rocketUser, slackMessage) {\n    return this.rocket.addAliasToMsg(rocketUser.username, {\n      msg: \"_\".concat(this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text), \"_\")\n    });\n  }\n\n  processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (isImporting) {\n      Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n        imported: 'slackbridge'\n      });\n    } else {\n      addUserToRoom(rocketChannel._id, rocketUser);\n    }\n  }\n\n  processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (slackMessage.inviter) {\n      const inviter = slackMessage.inviter ? this.rocket.findUser(slackMessage.inviter) || this.rocket.addUser(slackMessage.inviter) : null;\n\n      if (isImporting) {\n        Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n          ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n          u: {\n            _id: inviter._id,\n            username: inviter.username\n          },\n          imported: 'slackbridge'\n        });\n      } else {\n        addUserToRoom(rocketChannel._id, rocketUser, inviter);\n      }\n    }\n  }\n\n  processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (isImporting) {\n      Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n        imported: 'slackbridge'\n      });\n    } else {\n      removeUserFromRoom(rocketChannel._id, rocketUser);\n    }\n  }\n\n  processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (isImporting) {\n      Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, {\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n        imported: 'slackbridge'\n      });\n    } else {\n      saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n    }\n  }\n\n  processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (isImporting) {\n      Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, {\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n        imported: 'slackbridge'\n      });\n    } else {\n      saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n    }\n  }\n\n  processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (isImporting) {\n      Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, {\n        ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n        imported: 'slackbridge'\n      });\n    } else {\n      saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n    }\n  }\n\n  processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n      const details = {\n        message_id: \"slack-\".concat(slackMessage.ts.replace(/\\./g, '-')),\n        name: slackMessage.file.name,\n        size: slackMessage.file.size,\n        type: slackMessage.file.mimetype,\n        rid: rocketChannel._id\n      };\n      return this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n    }\n  }\n\n  processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    if (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n      const rocketMsgObj = {\n        rid: rocketChannel._id,\n        t: 'message_pinned',\n        msg: '',\n        u: {\n          _id: rocketUser._id,\n          username: rocketUser.username\n        },\n        attachments: [{\n          text: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n          author_name: slackMessage.attachments[0].author_subname,\n          author_icon: getUserAvatarURL(slackMessage.attachments[0].author_subname),\n          ts: new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n        }]\n      };\n\n      if (!isImporting) {\n        Messages.setPinnedByIdAndUserId(\"slack-\".concat(slackMessage.attachments[0].channel_id, \"-\").concat(slackMessage.attachments[0].ts.replace(/\\./g, '-')), rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n      }\n\n      return rocketMsgObj;\n    }\n\n    slackLogger.error('Pinned item with no attachment');\n  }\n\n  processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n    switch (slackMessage.subtype) {\n      case 'bot_message':\n        return this.processBotMessage(rocketChannel, slackMessage);\n\n      case 'me_message':\n        return this.processMeMessage(rocketUser, slackMessage);\n\n      case 'channel_join':\n        return this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'group_join':\n        return this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'channel_leave':\n      case 'group_leave':\n        return this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'channel_topic':\n      case 'group_topic':\n        return this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'channel_purpose':\n      case 'group_purpose':\n        return this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'channel_name':\n      case 'group_name':\n        return this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'channel_archive':\n      case 'group_archive':\n        if (!isImporting) {\n          archiveRoom(rocketChannel);\n        }\n\n        return;\n\n      case 'channel_unarchive':\n      case 'group_unarchive':\n        if (!isImporting) {\n          unarchiveRoom(rocketChannel);\n        }\n\n        return;\n\n      case 'file_share':\n        return this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'file_comment':\n        slackLogger.error('File comment not implemented');\n        return;\n\n      case 'file_mention':\n        slackLogger.error('File mentioned not implemented');\n        return;\n\n      case 'pinned_item':\n        return this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n      case 'unpinned_item':\n        slackLogger.error('Unpinned item not implemented');\n    }\n  }\n  /**\n  Uploads the file to the storage.\n  @param [Object] details an object with details about the upload. name, size, type, and rid\n  @param [String] fileUrl url of the file to download/import\n  @param [Object] user the Rocket.Chat user\n  @param [Object] room the Rocket.Chat room\n  @param [Date] timeStamp the timestamp the file was uploaded\n  **/\n  // details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\n\n  uploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n    const requestModule = /https/i.test(slackFileURL) ? https : http;\n    const parsedUrl = url.parse(slackFileURL, true);\n    parsedUrl.headers = {\n      Authorization: \"Bearer \".concat(this.apiToken)\n    };\n    requestModule.get(parsedUrl, Meteor.bindEnvironment(stream => {\n      const fileStore = FileUpload.getStore('Uploads');\n      fileStore.insert(details, stream, (err, file) => {\n        if (err) {\n          throw new Error(err);\n        } else {\n          const url = file.url.replace(Meteor.absoluteUrl(), '/');\n          const attachment = {\n            title: file.name,\n            title_link: url\n          };\n\n          if (/^image\\/.+/.test(file.type)) {\n            attachment.image_url = url;\n            attachment.image_type = file.type;\n            attachment.image_size = file.size;\n            attachment.image_dimensions = file.identify && file.identify.size;\n          }\n\n          if (/^audio\\/.+/.test(file.type)) {\n            attachment.audio_url = url;\n            attachment.audio_type = file.type;\n            attachment.audio_size = file.size;\n          }\n\n          if (/^video\\/.+/.test(file.type)) {\n            attachment.video_url = url;\n            attachment.video_type = file.type;\n            attachment.video_size = file.size;\n          }\n\n          const msg = {\n            rid: details.rid,\n            ts: timeStamp,\n            msg: '',\n            file: {\n              _id: file._id\n            },\n            groupable: false,\n            attachments: [attachment]\n          };\n\n          if (isImporting) {\n            msg.imported = 'slackbridge';\n          }\n\n          if (details.message_id && typeof details.message_id === 'string') {\n            msg._id = details.message_id;\n          }\n\n          return sendMessage(rocketUser, msg, rocketChannel, true);\n        }\n      });\n    }));\n  }\n\n  importFromHistory(family, options) {\n    slackLogger.debug('Importing messages history');\n    const data = this.slackAPI.getHistory(family, options);\n\n    if (Array.isArray(data.messages) && data.messages.length) {\n      let latest = 0;\n\n      for (const message of data.messages.reverse()) {\n        slackLogger.debug('MESSAGE: ', message);\n\n        if (!latest || message.ts > latest) {\n          latest = message.ts;\n        }\n\n        message.channel = options.channel;\n        this.onMessage(message, true);\n      }\n\n      return {\n        has_more: data.has_more,\n        ts: latest\n      };\n    }\n  }\n\n  copyChannelInfo(rid, channelMap) {\n    slackLogger.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n    const channel = this.slackAPI.getRoomInfo(channelMap.id);\n\n    if (channel) {\n      const members = this.slackAPI.getMembers(channelMap.id);\n\n      if (members && Array.isArray(members) && members.length) {\n        for (const member of members) {\n          const user = this.rocket.findUser(member) || this.rocket.addUser(member);\n\n          if (user) {\n            slackLogger.debug('Adding user to room', user.username, rid);\n            addUserToRoom(rid, user, null, true);\n          }\n        }\n      }\n\n      let topic = '';\n      let topic_last_set = 0;\n      let topic_creator = null;\n\n      if (channel && channel.topic && channel.topic.value) {\n        topic = channel.topic.value;\n        topic_last_set = channel.topic.last_set;\n        topic_creator = channel.topic.creator;\n      }\n\n      if (channel && channel.purpose && channel.purpose.value) {\n        if (topic_last_set) {\n          if (topic_last_set < channel.purpose.last_set) {\n            topic = channel.purpose.topic;\n            topic_creator = channel.purpose.creator;\n          }\n        } else {\n          topic = channel.purpose.topic;\n          topic_creator = channel.purpose.creator;\n        }\n      }\n\n      if (topic) {\n        const creator = this.rocket.findUser(topic_creator) || this.rocket.addUser(topic_creator);\n        slackLogger.debug('Setting room topic', rid, topic, creator.username);\n        saveRoomTopic(rid, topic, creator, false);\n      }\n    }\n  }\n\n  copyPins(rid, channelMap) {\n    const items = this.slackAPI.getPins(channelMap.id);\n\n    if (items && Array.isArray(items) && items.length) {\n      for (const pin of items) {\n        if (pin.message) {\n          const user = this.rocket.findUser(pin.message.user);\n          const msgObj = {\n            rid,\n            t: 'message_pinned',\n            msg: '',\n            u: {\n              _id: user._id,\n              username: user.username\n            },\n            attachments: [{\n              text: this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n              author_name: user.username,\n              author_icon: getUserAvatarURL(user.username),\n              ts: new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n            }]\n          };\n          Messages.setPinnedByIdAndUserId(\"slack-\".concat(pin.channel, \"-\").concat(pin.message.ts.replace(/\\./g, '-')), msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n        }\n      }\n    }\n  }\n\n  importMessages(rid, callback) {\n    slackLogger.info('importMessages: ', rid);\n    const rocketchat_room = Rooms.findOneById(rid);\n\n    if (rocketchat_room) {\n      if (this.getSlackChannel(rid)) {\n        this.copyChannelInfo(rid, this.getSlackChannel(rid));\n        slackLogger.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n        let results = this.importFromHistory(this.getSlackChannel(rid).family, {\n          channel: this.getSlackChannel(rid).id,\n          oldest: 1\n        });\n\n        while (results && results.has_more) {\n          results = this.importFromHistory(this.getSlackChannel(rid).family, {\n            channel: this.getSlackChannel(rid).id,\n            oldest: results.ts\n          });\n        }\n\n        slackLogger.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n        this.copyPins(rid, this.getSlackChannel(rid));\n        return callback();\n      }\n\n      const slack_room = this.postFindChannel(rocketchat_room.name);\n\n      if (slack_room) {\n        this.addSlackChannel(rid, slack_room.id);\n        return this.importMessages(rid, callback);\n      }\n\n      slackLogger.error('Could not find Slack room with specified name', rocketchat_room.name);\n      return callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n    }\n\n    slackLogger.error('Could not find Rocket.Chat room with specified id', rid);\n    return callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n  }\n\n}","map":{"version":3,"sources":["app/slackbridge/server/SlackAdapter.js"],"names":["module","export","default","SlackAdapter","url","link","v","http","https","RTMClient","Meteor","slackLogger","SlackAPI","getUserAvatarURL","Messages","Rooms","Users","settings","deleteMessage","updateMessage","addUserToRoom","removeUserFromRoom","archiveRoom","unarchiveRoom","sendMessage","saveRoomName","saveRoomTopic","FileUpload","constructor","slackBridge","debug","rtm","apiToken","slackChannelRocketBotMembershipMap","Map","rocket","messagesBeingSent","slackBotId","slackAPI","connect","disconnect","start","registerForEvents","startup","populateMembershipChannelMap","err","error","setRocket","on","info","bindEnvironment","slackMessage","onMessage","reactionMsg","onReactionAdded","onReactionRemoved","channelLeftMsg","onChannelLeft","slackReactionMsg","isReactionsEnabled","rocketUser","getUser","user","rocketMsg","findOneBySlackTs","item","ts","rocketID","createRocketID","channel","findOneById","rocketReaction","reaction","reactions","theReaction","usernames","indexOf","username","reactionsMap","set","_id","runAsUser","call","roles","includes","removeSlackChannel","isImporting","isAFileShare","files","Array","isArray","length","processFileShare","subtype","processMessageDeleted","processMessageChanged","processChannelJoin","processNewMessage","postFindChannel","rocketChannelName","channels","getChannels","name","is_member","groups","getGroups","group","getTimeStamp","slackTS","index","substr","replace","slackTs","addSlackChannel","rocketChID","slackChID","ch","getSlackChannel","id","family","charAt","keys","slackChannel","key","next","value","get","delete","populateMembershipChannelMapByChannels","rocketchat_room","findOneByName","fields","findOneByImportId","populateMembershipChannelMapByGroups","slackGroup","postReactionAdded","data","token","timestamp","postResult","react","postReactionRemove","removeReaction","postDeleteMessage","rocketMessage","rid","as_user","removeMessage","storeMessageBeingSent","push","removeMessageBeingSent","idx","splice","isMessageBeingSent","some","messageData","postMessage","iconUrl","u","absoluteUrl","text","msg","icon_url","link_names","tmid","tmessage","thread_ts","slackAdapters","statusCode","message","bot_id","setSlackBotIdAndSlackTs","postMessageUpdate","rocketCh","addChannel","file","url_private_download","undefined","rocketChannel","getChannel","permalink","Date","parseInt","split","msgDataDefaults","updatedBySlack","createAndSaveMessage","previous_message","rocketMsgObj","findOneBySlackBotIdAndSlackTs","currentMsg","findUser","addUser","convertSlackMsgTxtToRocketTxtFormat","imported","e","code","processBotMessage","excludeBotNames","match","bot","attachments","addAliasToMsg","icons","emoji","processMeMessage","processChannelJoinMessage","createUserJoinWithRoomIdAndUser","processGroupJoinMessage","inviter","createUserAddedWithRoomIdAndUser","processLeaveMessage","createUserLeaveWithRoomIdAndUser","processTopicMessage","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","topic","processPurposeMessage","purpose","processNameMessage","createRoomRenamedWithRoomIdRoomNameAndUser","processShareMessage","details","message_id","size","type","mimetype","uploadFileFromSlack","processPinnedItemMessage","t","author_name","author_subname","author_icon","setPinnedByIdAndUserId","channel_id","processSubtypedMessage","slackFileURL","timeStamp","requestModule","test","parsedUrl","parse","headers","Authorization","stream","fileStore","getStore","insert","Error","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","importFromHistory","options","getHistory","messages","latest","reverse","has_more","copyChannelInfo","channelMap","getRoomInfo","members","getMembers","member","topic_last_set","topic_creator","last_set","creator","copyPins","items","getPins","pin","msgObj","importMessages","callback","results","oldest","slack_room"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;AAA0C,IAAIC,GAAJ;AAAQJ,MAAM,CAACK,IAAP,CAAY,KAAZ,EAAkB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACF,IAAAA,GAAG,GAACE,CAAJ;AAAM;;AAAlB,CAAlB,EAAsC,CAAtC;AAAyC,IAAIC,IAAJ;AAASP,MAAM,CAACK,IAAP,CAAY,MAAZ,EAAmB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACC,IAAAA,IAAI,GAACD,CAAL;AAAO;;AAAnB,CAAnB,EAAwC,CAAxC;AAA2C,IAAIE,KAAJ;AAAUR,MAAM,CAACK,IAAP,CAAY,OAAZ,EAAoB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACE,IAAAA,KAAK,GAACF,CAAN;AAAQ;;AAApB,CAApB,EAA0C,CAA1C;AAA6C,IAAIG,SAAJ;AAAcT,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACI,EAAAA,SAAS,CAACH,CAAD,EAAG;AAACG,IAAAA,SAAS,GAACH,CAAV;AAAY;;AAA1B,CAA5B,EAAwD,CAAxD;AAA2D,IAAII,MAAJ;AAAWV,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACK,EAAAA,MAAM,CAACJ,CAAD,EAAG;AAACI,IAAAA,MAAM,GAACJ,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIK,WAAJ;AAAgBX,MAAM,CAACK,IAAP,CAAY,UAAZ,EAAuB;AAACM,EAAAA,WAAW,CAACL,CAAD,EAAG;AAACK,IAAAA,WAAW,GAACL,CAAZ;AAAc;;AAA9B,CAAvB,EAAuD,CAAvD;AAA0D,IAAIM,QAAJ;AAAaZ,MAAM,CAACK,IAAP,CAAY,YAAZ,EAAyB;AAACO,EAAAA,QAAQ,CAACN,CAAD,EAAG;AAACM,IAAAA,QAAQ,GAACN,CAAT;AAAW;;AAAxB,CAAzB,EAAmD,CAAnD;AAAsD,IAAIO,gBAAJ;AAAqBb,MAAM,CAACK,IAAP,CAAY,kCAAZ,EAA+C;AAACQ,EAAAA,gBAAgB,CAACP,CAAD,EAAG;AAACO,IAAAA,gBAAgB,GAACP,CAAjB;AAAmB;;AAAxC,CAA/C,EAAyF,CAAzF;AAA4F,IAAIQ,QAAJ,EAAaC,KAAb,EAAmBC,KAAnB;AAAyBhB,MAAM,CAACK,IAAP,CAAY,cAAZ,EAA2B;AAACS,EAAAA,QAAQ,CAACR,CAAD,EAAG;AAACQ,IAAAA,QAAQ,GAACR,CAAT;AAAW,GAAxB;;AAAyBS,EAAAA,KAAK,CAACT,CAAD,EAAG;AAACS,IAAAA,KAAK,GAACT,CAAN;AAAQ,GAA1C;;AAA2CU,EAAAA,KAAK,CAACV,CAAD,EAAG;AAACU,IAAAA,KAAK,GAACV,CAAN;AAAQ;;AAA5D,CAA3B,EAAyF,CAAzF;AAA4F,IAAIW,QAAJ;AAAajB,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA6B;AAACY,EAAAA,QAAQ,CAACX,CAAD,EAAG;AAACW,IAAAA,QAAQ,GAACX,CAAT;AAAW;;AAAxB,CAA7B,EAAuD,CAAvD;AAA0D,IAAIY,aAAJ,EAAkBC,aAAlB,EAAgCC,aAAhC,EAA8CC,kBAA9C,EAAiEC,WAAjE,EAA6EC,aAA7E,EAA2FC,WAA3F;AAAuGxB,MAAM,CAACK,IAAP,CAAY,WAAZ,EAAwB;AAACa,EAAAA,aAAa,CAACZ,CAAD,EAAG;AAACY,IAAAA,aAAa,GAACZ,CAAd;AAAgB,GAAlC;;AAAmCa,EAAAA,aAAa,CAACb,CAAD,EAAG;AAACa,IAAAA,aAAa,GAACb,CAAd;AAAgB,GAApE;;AAAqEc,EAAAA,aAAa,CAACd,CAAD,EAAG;AAACc,IAAAA,aAAa,GAACd,CAAd;AAAgB,GAAtG;;AAAuGe,EAAAA,kBAAkB,CAACf,CAAD,EAAG;AAACe,IAAAA,kBAAkB,GAACf,CAAnB;AAAqB,GAAlJ;;AAAmJgB,EAAAA,WAAW,CAAChB,CAAD,EAAG;AAACgB,IAAAA,WAAW,GAAChB,CAAZ;AAAc,GAAhL;;AAAiLiB,EAAAA,aAAa,CAACjB,CAAD,EAAG;AAACiB,IAAAA,aAAa,GAACjB,CAAd;AAAgB,GAAlN;;AAAmNkB,EAAAA,WAAW,CAAClB,CAAD,EAAG;AAACkB,IAAAA,WAAW,GAAClB,CAAZ;AAAc;;AAAhP,CAAxB,EAA0Q,EAA1Q;AAA8Q,IAAImB,YAAJ,EAAiBC,aAAjB;AAA+B1B,MAAM,CAACK,IAAP,CAAY,wBAAZ,EAAqC;AAACoB,EAAAA,YAAY,CAACnB,CAAD,EAAG;AAACmB,IAAAA,YAAY,GAACnB,CAAb;AAAe,GAAhC;;AAAiCoB,EAAAA,aAAa,CAACpB,CAAD,EAAG;AAACoB,IAAAA,aAAa,GAACpB,CAAd;AAAgB;;AAAlE,CAArC,EAAyG,EAAzG;AAA6G,IAAIqB,UAAJ;AAAe3B,MAAM,CAACK,IAAP,CAAY,mBAAZ,EAAgC;AAACsB,EAAAA,UAAU,CAACrB,CAAD,EAAG;AAACqB,IAAAA,UAAU,GAACrB,CAAX;AAAa;;AAA5B,CAAhC,EAA8D,EAA9D;;AAgB1wC,MAAMH,YAAN,CAAmB;AACjCyB,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxBlB,IAAAA,WAAW,CAACmB,KAAZ,CAAkB,aAAlB;AACA,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKE,GAAL,GAAW,EAAX,CAHwB,CAGT;;AACf,SAAKC,QAAL,GAAgB,EAAhB,CAJwB,CAIJ;AACpB;;AACA,SAAKC,kCAAL,GAA0C,IAAIC,GAAJ,EAA1C,CANwB,CAM6B;;AACrD,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,OAAO,CAACP,QAAD,EAAW;AACjB,SAAKA,QAAL,GAAgBA,QAAhB;;AAEA,QAAIvB,SAAS,IAAI,IAAjB,EAAuB;AACtBA,MAAAA,SAAS,CAAC+B,UAAV;AACA;;AACD,SAAKF,QAAL,GAAgB,IAAI1B,QAAJ,CAAa,KAAKoB,QAAlB,CAAhB;AACA,SAAKD,GAAL,GAAW,IAAItB,SAAJ,CAAc,KAAKuB,QAAnB,CAAX;AACA,SAAKD,GAAL,CAASU,KAAT;AACA,SAAKC,iBAAL;AAEAhC,IAAAA,MAAM,CAACiC,OAAP,CAAe,MAAM;AACpB,UAAI;AACH,aAAKC,4BAAL,GADG,CACkC;AACrC,OAFD,CAEE,OAAOC,GAAP,EAAY;AACblC,QAAAA,WAAW,CAACmC,KAAZ,CAAkB,sCAAlB,EAA0DD,GAA1D;AACA,aAAKhB,WAAL,CAAiBW,UAAjB;AACA;AACD,KAPD;AAQA;AAED;AACD;AACA;;;AACCA,EAAAA,UAAU,GAAG;AACZ,SAAKT,GAAL,CAASS,UAAT,IAAuB,KAAKT,GAAL,CAASS,UAAT,EAAvB;AACA;;AAEDO,EAAAA,SAAS,CAACZ,MAAD,EAAS;AACjB,SAAKA,MAAL,GAAcA,MAAd;AACA;;AAEDO,EAAAA,iBAAiB,GAAG;AACnB/B,IAAAA,WAAW,CAACmB,KAAZ,CAAkB,qBAAlB;AACA,SAAKC,GAAL,CAASiB,EAAT,CAAY,eAAZ,EAA6B,MAAM;AAClCrC,MAAAA,WAAW,CAACsC,IAAZ,CAAiB,oBAAjB;AACA,KAFD;AAIA,SAAKlB,GAAL,CAASiB,EAAT,CAAY,qBAAZ,EAAmC,MAAM;AACxC,WAAKnB,WAAL,CAAiBW,UAAjB;AACA,KAFD;AAIA,SAAKT,GAAL,CAASiB,EAAT,CAAY,cAAZ,EAA4B,MAAM;AACjCrC,MAAAA,WAAW,CAACsC,IAAZ,CAAiB,yBAAjB;AACA,WAAKpB,WAAL,CAAiBW,UAAjB;AACA,KAHD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKT,GAAL,CAASiB,EAAT,CACC,SADD,EAECtC,MAAM,CAACwC,eAAP,CAAwBC,YAAD,IAAkB;AACxCxC,MAAAA,WAAW,CAACmB,KAAZ,CAAkB,wBAAlB,EAA4CqB,YAA5C;;AACA,UAAIA,YAAJ,EAAkB;AACjB,YAAI;AACH,eAAKC,SAAL,CAAeD,YAAf;AACA,SAFD,CAEE,OAAON,GAAP,EAAY;AACblC,UAAAA,WAAW,CAACmC,KAAZ,CAAkB,2BAAlB,EAA+CD,GAA/C;AACA;AACD;AACD,KATD,CAFD;AAcA,SAAKd,GAAL,CAASiB,EAAT,CACC,gBADD,EAECtC,MAAM,CAACwC,eAAP,CAAwBG,WAAD,IAAiB;AACvC1C,MAAAA,WAAW,CAACmB,KAAZ,CAAkB,+BAAlB,EAAmDuB,WAAnD;;AACA,UAAIA,WAAJ,EAAiB;AAChB,YAAI;AACH,eAAKC,eAAL,CAAqBD,WAArB;AACA,SAFD,CAEE,OAAOR,GAAP,EAAY;AACblC,UAAAA,WAAW,CAACmC,KAAZ,CAAkB,iCAAlB,EAAqDD,GAArD;AACA;AACD;AACD,KATD,CAFD;AAcA,SAAKd,GAAL,CAASiB,EAAT,CACC,kBADD,EAECtC,MAAM,CAACwC,eAAP,CAAwBG,WAAD,IAAiB;AACvC1C,MAAAA,WAAW,CAACmB,KAAZ,CAAkB,iCAAlB,EAAqDuB,WAArD;;AACA,UAAIA,WAAJ,EAAiB;AAChB,YAAI;AACH,eAAKE,iBAAL,CAAuBF,WAAvB;AACA,SAFD,CAEE,OAAOR,GAAP,EAAY;AACblC,UAAAA,WAAW,CAACmC,KAAZ,CAAkB,mCAAlB,EAAuDD,GAAvD;AACA;AACD;AACD,KATD,CAFD;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKd,GAAL,CAASiB,EAAT,CACC,iBADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,gBADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,cADD,EAECtC,MAAM,CAACwC,eAAP,CAAwBM,cAAD,IAAoB;AAC1C7C,MAAAA,WAAW,CAACmB,KAAZ,CAAkB,6BAAlB,EAAiD0B,cAAjD;;AACA,UAAIA,cAAJ,EAAoB;AACnB,YAAI;AACH,eAAKC,aAAL,CAAmBD,cAAnB;AACA,SAFD,CAEE,OAAOX,GAAP,EAAY;AACblC,UAAAA,WAAW,CAACmC,KAAZ,CAAkB,+BAAlB,EAAmDD,GAAnD;AACA;AACD;AACD,KATD,CAFD;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKd,GAAL,CAASiB,EAAT,CACC,iBADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,gBADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,cADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,YADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,cADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKnB,GAAL,CAASiB,EAAT,CACC,WADD,EAECtC,MAAM,CAACwC,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAFD;AAIA;AAED;AACD;AACA;;;AA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","sourcesContent":["import url from 'url';\nimport http from 'http';\nimport https from 'https';\n\nimport { RTMClient } from '@slack/client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { slackLogger } from './logger';\nimport { SlackAPI } from './SlackAPI';\nimport { getUserAvatarURL } from '../../utils/lib/getUserAvatarURL';\nimport { Messages, Rooms, Users } from '../../models';\nimport { settings } from '../../settings';\nimport { deleteMessage, updateMessage, addUserToRoom, removeUserFromRoom, archiveRoom, unarchiveRoom, sendMessage } from '../../lib';\nimport { saveRoomName, saveRoomTopic } from '../../channel-settings';\nimport { FileUpload } from '../../file-upload';\n\nexport default class SlackAdapter {\n\tconstructor(slackBridge) {\n\t\tslackLogger.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.rtm = {}; // slack-client Real Time Messaging API\n\t\tthis.apiToken = {}; // Slack API Token passed in via Connect\n\t\t// On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n\t\tthis.slackChannelRocketBotMembershipMap = new Map(); // Key=RocketChannelID, Value=SlackChannel\n\t\tthis.rocket = {};\n\t\tthis.messagesBeingSent = [];\n\t\tthis.slackBotId = false;\n\n\t\tthis.slackAPI = {};\n\t}\n\n\t/**\n\t * Connect to the remote Slack server using the passed in token API and register for Slack events\n\t * @param apiToken\n\t */\n\tconnect(apiToken) {\n\t\tthis.apiToken = apiToken;\n\n\t\tif (RTMClient != null) {\n\t\t\tRTMClient.disconnect;\n\t\t}\n\t\tthis.slackAPI = new SlackAPI(this.apiToken);\n\t\tthis.rtm = new RTMClient(this.apiToken);\n\t\tthis.rtm.start();\n\t\tthis.registerForEvents();\n\n\t\tMeteor.startup(() => {\n\t\t\ttry {\n\t\t\t\tthis.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t} catch (err) {\n\t\t\t\tslackLogger.error('Error attempting to connect to Slack', err);\n\t\t\t\tthis.slackBridge.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Unregister for slack events and disconnect from Slack\n\t */\n\tdisconnect() {\n\t\tthis.rtm.disconnect && this.rtm.disconnect();\n\t}\n\n\tsetRocket(rocket) {\n\t\tthis.rocket = rocket;\n\t}\n\n\tregisterForEvents() {\n\t\tslackLogger.debug('Register for events');\n\t\tthis.rtm.on('authenticated', () => {\n\t\t\tslackLogger.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on('unable_to_rtm_start', () => {\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\tthis.rtm.on('disconnected', () => {\n\t\t\tslackLogger.info('Disconnected from Slack');\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\t/**\n\t\t * Event fired when someone messages a channel the bot is in\n\t\t * {\n\t\t *\ttype: 'message',\n\t\t * \tchannel: [channel_id],\n\t\t * \tuser: [user_id],\n\t\t * \ttext: [message],\n\t\t * \tts: [ts.milli],\n\t\t * \tteam: [team_id],\n\t\t * \tsubtype: [message_subtype],\n\t\t * \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'message',\n\t\t\tMeteor.bindEnvironment((slackMessage) => {\n\t\t\t\tslackLogger.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\t\tif (slackMessage) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.onMessage(slackMessage);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tslackLogger.error('Unhandled error onMessage', err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rtm.on(\n\t\t\t'reaction_added',\n\t\t\tMeteor.bindEnvironment((reactionMsg) => {\n\t\t\t\tslackLogger.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\t\tif (reactionMsg) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.onReactionAdded(reactionMsg);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tslackLogger.error('Unhandled error onReactionAdded', err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.rtm.on(\n\t\t\t'reaction_removed',\n\t\t\tMeteor.bindEnvironment((reactionMsg) => {\n\t\t\t\tslackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\t\tif (reactionMsg) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.onReactionRemoved(reactionMsg);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tslackLogger.error('Unhandled error onReactionRemoved', err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when someone creates a public channel\n\t\t * {\n\t\t *\ttype: 'channel_created',\n\t\t *\tchannel: {\n\t\t *\t\tid: [channel_id],\n\t\t *\t\tis_channel: true,\n\t\t *\t\tname: [channel_name],\n\t\t *\t\tcreated: [ts],\n\t\t *\t\tcreator: [user_id],\n\t\t *\t\tis_shared: false,\n\t\t *\t\tis_org_shared: false\n\t\t *\t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'channel_created',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the bot joins a public channel\n\t\t * {\n\t\t * \ttype: 'channel_joined',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_channel: true,\n\t\t * \t\tcreated: [ts],\n\t\t * \t\tcreator: [user_id],\n\t\t * \t\tis_archived: false,\n\t\t * \t\tis_general: false,\n\t\t * \t\tis_member: true,\n\t\t * \t\tlast_read: [ts.milli],\n\t\t * \t\tlatest: [message_obj],\n\t\t * \t\tunread_count: 0,\n\t\t * \t\tunread_count_display: 0,\n\t\t * \t\tmembers: [ user_ids ],\n\t\t * \t\ttopic: {\n\t\t * \t\t\tvalue: [channel_topic],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t},\n\t\t * \t\tpurpose: {\n\t\t * \t\t\tvalue: [channel_purpose],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t}\n\t\t * \t}\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'channel_joined',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a public channel\n\t\t * {\n\t\t * \ttype: 'channel_left',\n\t\t * \tchannel: [channel_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'channel_left',\n\t\t\tMeteor.bindEnvironment((channelLeftMsg) => {\n\t\t\t\tslackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n\t\t\t\tif (channelLeftMsg) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.onChannelLeft(channelLeftMsg);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tslackLogger.error('Unhandled error onChannelLeft', err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when an archived channel is deleted by an admin\n\t\t * {\n\t\t * \ttype: 'channel_deleted',\n\t\t * \tchannel: [channel_id],\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'channel_deleted',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the channel has its name changed\n\t\t * {\n\t\t * \ttype: 'channel_rename',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_channel: true,\n\t\t * \t\tcreated: [ts]\n\t\t * \t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'channel_rename',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the bot joins a private channel\n\t\t * {\n\t\t * \ttype: 'group_joined',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_group: true,\n\t\t * \t\tcreated: [ts],\n\t\t * \t\tcreator: [user_id],\n\t\t * \t\tis_archived: false,\n\t\t * \t\tis_mpim: false,\n\t\t * \t\tis_open: true,\n\t\t * \t\tlast_read: [ts.milli],\n\t\t * \t\tlatest: [message_obj],\n\t\t * \t\tunread_count: 0,\n\t\t * \t\tunread_count_display: 0,\n\t\t * \t\tmembers: [ user_ids ],\n\t\t * \t\ttopic: {\n\t\t * \t\t\tvalue: [channel_topic],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t},\n\t\t * \t\tpurpose: {\n\t\t * \t\t\tvalue: [channel_purpose],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t}\n\t\t * \t}\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'group_joined',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a private channel\n\t\t * {\n\t\t * \ttype: 'group_left',\n\t\t * \tchannel: [channel_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'group_left',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when the private channel has its name changed\n\t\t * {\n\t\t * \ttype: 'group_rename',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_group: true,\n\t\t * \t\tcreated: [ts]\n\t\t * \t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'group_rename',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\n\t\t/**\n\t\t * Event fired when a new user joins the team\n\t\t * {\n\t\t * \ttype: 'team_join',\n\t\t * \tuser:\n\t\t * \t{\n\t\t * \t\tid: [user_id],\n\t\t * \t\tteam_id: [team_id],\n\t\t * \t\tname: [user_name],\n\t\t * \t\tdeleted: false,\n\t\t * \t\tstatus: null,\n\t\t * \t\tcolor: [color_code],\n\t\t * \t\treal_name: '',\n\t\t * \t\ttz: [timezone],\n\t\t * \t\ttz_label: [timezone_label],\n\t\t * \t\ttz_offset: [timezone_offset],\n\t\t * \t\tprofile:\n\t\t * \t\t{\n\t\t * \t\t\tavatar_hash: '',\n\t\t * \t\t\treal_name: '',\n\t\t * \t\t\treal_name_normalized: '',\n\t\t * \t\t\temail: '',\n\t\t * \t\t\timage_24: '',\n\t\t * \t\t\timage_32: '',\n\t\t * \t\t\timage_48: '',\n\t\t * \t\t\timage_72: '',\n\t\t * \t\t\timage_192: '',\n\t\t * \t\t\timage_512: '',\n\t\t * \t\t\tfields: null\n\t\t * \t\t},\n\t\t * \t\tis_admin: false,\n\t\t * \t\tis_owner: false,\n\t\t * \t\tis_primary_owner: false,\n\t\t * \t\tis_restricted: false,\n\t\t * \t\tis_ultra_restricted: false,\n\t\t * \t\tis_bot: false,\n\t\t * \t\tpresence: [user_presence]\n\t\t * \t},\n\t\t * \tcache_ts: [ts]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on(\n\t\t\t'team_join',\n\t\t\tMeteor.bindEnvironment(() => {}),\n\t\t);\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${slackReactionMsg.reaction}:`;\n\n\t\t\t\t// If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; // Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`unset${rocketMsg._id}${rocketReaction}`, rocketUser);\n\t\t\t\tslackLogger.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${slackReactionMsg.reaction}:`;\n\n\t\t\t\t// If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; // Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`set${rocketMsg._id}${rocketReaction}`, rocketUser);\n\t\t\t\tslackLogger.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tonChannelLeft(channelLeftMsg) {\n\t\tthis.removeSlackChannel(channelLeftMsg.channel);\n\t}\n\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonMessage(slackMessage, isImporting) {\n\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tif (isAFileShare) {\n\t\t\tthis.processFileShare(slackMessage);\n\t\t\treturn;\n\t\t}\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tthis.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t// Simple message\n\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tpostFindChannel(rocketChannelName) {\n\t\tslackLogger.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tconst channels = this.slackAPI.getChannels();\n\t\tif (channels && channels.length > 0) {\n\t\t\tfor (const channel of channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst groups = this.slackAPI.getGroups();\n\t\tif (groups && groups.length > 0) {\n\t\t\tfor (const group of groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetTimeStamp(rocketMsg) {\n\t\t// slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t// This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index + 1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t// This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\t/**\n\t * Adds a slack channel to our collection that the rocketbot is a member of on slack\n\t * @param rocketChID\n\t * @param slackChID\n\t */\n\taddSlackChannel(rocketChID, slackChID) {\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (ch == null) {\n\t\t\tslackLogger.debug('Added channel', { rocketChID, slackChID });\n\t\t\tthis.slackChannelRocketBotMembershipMap.set(rocketChID, {\n\t\t\t\tid: slackChID,\n\t\t\t\tfamily: slackChID.charAt(0) === 'C' ? 'channels' : 'groups',\n\t\t\t});\n\t\t}\n\t}\n\n\tremoveSlackChannel(slackChID) {\n\t\tconst keys = this.slackChannelRocketBotMembershipMap.keys();\n\t\tlet slackChannel;\n\t\tlet key;\n\t\twhile ((key = keys.next().value) != null) {\n\t\t\tslackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n\t\t\tif (slackChannel.id === slackChID) {\n\t\t\t\t// Found it, need to delete it\n\t\t\t\tthis.slackChannelRocketBotMembershipMap.delete(key);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSlackChannel(rocketChID) {\n\t\treturn this.slackChannelRocketBotMembershipMap.get(rocketChID);\n\t}\n\n\tpopulateMembershipChannelMapByChannels() {\n\t\tconst channels = this.slackAPI.getChannels();\n\t\tif (!channels || channels.length <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const slackChannel of channels) {\n\t\t\tconst rocketchat_room =\n\t\t\t\tRooms.findOneByName(slackChannel.name, { fields: { _id: 1 } }) || Rooms.findOneByImportId(slackChannel.id, { fields: { _id: 1 } });\n\t\t\tif (rocketchat_room && slackChannel.is_member) {\n\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackChannel.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMapByGroups() {\n\t\tconst groups = this.slackAPI.getGroups();\n\t\tif (!groups || groups.length <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const slackGroup of groups) {\n\t\t\tconst rocketchat_room =\n\t\t\t\tRooms.findOneByName(slackGroup.name, { fields: { _id: 1 } }) || Rooms.findOneByImportId(slackGroup.id, { fields: { _id: 1 } });\n\t\t\tif (rocketchat_room && slackGroup.is_member) {\n\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackGroup.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMap() {\n\t\tslackLogger.debug('Populating channel map');\n\t\tthis.populateMembershipChannelMapByChannels();\n\t\tthis.populateMembershipChannelMapByGroups();\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAdded(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tslackLogger.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = this.slackAPI.react(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemove(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tslackLogger.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = this.slackAPI.removeReaction(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessage(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketMessage.rid);\n\n\t\t\tif (slackChannel != null) {\n\t\t\t\tconst data = {\n\t\t\t\t\ttoken: this.apiToken,\n\t\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\t\tchannel: this.getSlackChannel(rocketMessage.rid).id,\n\t\t\t\t\tas_user: true,\n\t\t\t\t};\n\n\t\t\t\tslackLogger.debug('Post Delete Message to Slack', data);\n\t\t\t\tconst postResult = this.slackAPI.removeMessage(data);\n\t\t\t\tif (postResult) {\n\t\t\t\t\tslackLogger.debug('Message deleted on Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstoreMessageBeingSent(data) {\n\t\tthis.messagesBeingSent.push(data);\n\t}\n\n\tremoveMessageBeingSent(data) {\n\t\tconst idx = this.messagesBeingSent.indexOf(data);\n\t\tif (idx >= 0) {\n\t\t\tthis.messagesBeingSent.splice(idx, 1);\n\t\t}\n\t}\n\n\tisMessageBeingSent(username, channel) {\n\t\tif (!this.messagesBeingSent.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.messagesBeingSent.some((messageData) => {\n\t\t\tif (messageData.username !== username) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (messageData.channel !== channel) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tpostMessage(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getUserAvatarURL(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1,\n\t\t\t};\n\n\t\t\tif (rocketMessage.tmid) {\n\t\t\t\tconst tmessage = Messages.findOneById(rocketMessage.tmid);\n\t\t\t\tif (tmessage && tmessage.slackTs) {\n\t\t\t\t\tdata.thread_ts = tmessage.slackTs;\n\t\t\t\t}\n\t\t\t}\n\t\t\tslackLogger.debug('Post Message To Slack', data);\n\n\t\t\t// If we don't have the bot id yet and we have multiple slack bridges, we need to keep track of the messages that are being sent\n\t\t\tif (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n\t\t\t\tthis.storeMessageBeingSent(data);\n\t\t\t}\n\n\t\t\tconst postResult = this.slackAPI.sendMessage(data);\n\n\t\t\tif (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n\t\t\t\tthis.removeMessageBeingSent(data);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tpostResult.statusCode === 200 &&\n\t\t\t\tpostResult.data &&\n\t\t\t\tpostResult.data.message &&\n\t\t\t\tpostResult.data.message.bot_id &&\n\t\t\t\tpostResult.data.message.ts\n\t\t\t) {\n\t\t\t\tthis.slackBotId = postResult.data.message.bot_id;\n\t\t\t\tMessages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tslackLogger.debug(\n\t\t\t\t\t`RocketMsgID=${rocketMessage._id} SlackMsgID=${postResult.data.message.ts} SlackBotID=${postResult.data.message.bot_id}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdate(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true,\n\t\t\t};\n\t\t\tslackLogger.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = this.slackAPI.updateMessage(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessChannelJoin(slackMessage) {\n\t\tslackLogger.debug('Channel join', slackMessage.channel.id);\n\t\tconst rocketCh = this.rocket.addChannel(slackMessage.channel);\n\t\tif (rocketCh != null) {\n\t\t\tthis.addSlackChannel(rocketCh._id, slackMessage.channel);\n\t\t}\n\t}\n\n\tprocessFileShare(slackMessage) {\n\t\tif (!settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\t\tconst file = slackMessage.files[0];\n\n\t\tif (file && file.url_private_download !== undefined) {\n\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = this.rocket.getUser(slackMessage.user);\n\n\t\t\t// Hack to notify that a file was attempted to be uploaded\n\t\t\tdelete slackMessage.subtype;\n\n\t\t\t// If the text includes the file link, simply use the same text for the rocket message.\n\t\t\t// If the link was not included, then use it instead of the message.\n\n\t\t\tif (slackMessage.text.indexOf(file.permalink) < 0) {\n\t\t\t\tslackMessage.text = file.permalink;\n\t\t\t}\n\n\t\t\tconst ts = new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000);\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts,\n\t\t\t\tupdatedBySlack: true,\n\t\t\t};\n\n\t\t\tthis.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, false);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t// Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = Messages.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t// Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tdeleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tslackLogger.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t// Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && slackMessage.message.text !== currentMsg.msg) {\n\t\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user\n\t\t\t\t\t? this.rocket.findUser(slackMessage.previous_message.user) || this.rocket.addUser(slackMessage.previous_message.user)\n\t\t\t\t\t: null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t// @TODO _id\n\t\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true, // We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tupdateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tslackLogger.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.rocket.findUser(slackMessage.user) || this.rocket.addUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults.imported = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting, this);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessBotMessage(rocketChannel, slackMessage) {\n\t\tconst excludeBotNames = settings.get('SlackBridge_ExcludeBotnames');\n\t\tif (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.slackBotId) {\n\t\t\tif (slackMessage.bot_id === this.slackBotId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketChannel._id);\n\t\t\tif (this.isMessageBeingSent(slackMessage.username || slackMessage.bot_id, slackChannel.id)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst rocketMsgObj = {\n\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\trid: rocketChannel._id,\n\t\t\tbot: true,\n\t\t\tattachments: slackMessage.attachments,\n\t\t\tusername: slackMessage.username || slackMessage.bot_id,\n\t\t};\n\t\tthis.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\tif (slackMessage.icons) {\n\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t}\n\t\treturn rocketMsgObj;\n\t}\n\n\tprocessMeMessage(rocketUser, slackMessage) {\n\t\treturn this.rocket.addAliasToMsg(rocketUser.username, {\n\t\t\tmsg: `_${this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text)}_`,\n\t\t});\n\t}\n\n\tprocessChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tMessages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\taddUserToRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.inviter) {\n\t\t\tconst inviter = slackMessage.inviter ? this.rocket.findUser(slackMessage.inviter) || this.rocket.addUser(slackMessage.inviter) : null;\n\t\t\tif (isImporting) {\n\t\t\t\tMessages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\tusername: inviter.username,\n\t\t\t\t\t},\n\t\t\t\t\timported: 'slackbridge',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\taddUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tMessages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tremoveUserFromRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tMessages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser(\n\t\t\t\t'room_changed_topic',\n\t\t\t\trocketChannel._id,\n\t\t\t\tslackMessage.topic,\n\t\t\t\trocketUser,\n\t\t\t\t{ ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' },\n\t\t\t);\n\t\t} else {\n\t\t\tsaveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tMessages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser(\n\t\t\t\t'room_changed_topic',\n\t\t\t\trocketChannel._id,\n\t\t\t\tslackMessage.purpose,\n\t\t\t\trocketUser,\n\t\t\t\t{ ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' },\n\t\t\t);\n\t\t} else {\n\t\t\tsaveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tMessages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tsaveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\tconst details = {\n\t\t\t\tmessage_id: `slack-${slackMessage.ts.replace(/\\./g, '-')}`,\n\t\t\t\tname: slackMessage.file.name,\n\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\trid: rocketChannel._id,\n\t\t\t};\n\t\t\treturn this.uploadFileFromSlack(\n\t\t\t\tdetails,\n\t\t\t\tslackMessage.file.url_private_download,\n\t\t\t\trocketUser,\n\t\t\t\trocketChannel,\n\t\t\t\tnew Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\tisImporting,\n\t\t\t);\n\t\t}\n\t}\n\n\tprocessPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\tconst rocketMsgObj = {\n\t\t\t\trid: rocketChannel._id,\n\t\t\t\tt: 'message_pinned',\n\t\t\t\tmsg: '',\n\t\t\t\tu: {\n\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t},\n\t\t\t\tattachments: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t\tauthor_name: slackMessage.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t\tts: new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tif (!isImporting) {\n\t\t\t\tMessages.setPinnedByIdAndUserId(\n\t\t\t\t\t`slack-${slackMessage.attachments[0].channel_id}-${slackMessage.attachments[0].ts.replace(/\\./g, '-')}`,\n\t\t\t\t\trocketMsgObj.u,\n\t\t\t\t\ttrue,\n\t\t\t\t\tnew Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn rocketMsgObj;\n\t\t}\n\t\tslackLogger.error('Pinned item with no attachment');\n\t}\n\n\tprocessSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\treturn this.processBotMessage(rocketChannel, slackMessage);\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.processMeMessage(rocketUser, slackMessage);\n\t\t\tcase 'channel_join':\n\t\t\t\treturn this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'group_join':\n\t\t\t\treturn this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\treturn this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\treturn this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\treturn this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\treturn this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tunarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\treturn this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'file_comment':\n\t\t\t\tslackLogger.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tslackLogger.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\treturn this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'unpinned_item':\n\t\t\t\tslackLogger.error('Unpinned item not implemented');\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t// details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst requestModule = /https/i.test(slackFileURL) ? https : http;\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { Authorization: `Bearer ${this.apiToken}` };\n\t\trequestModule.get(\n\t\t\tparsedUrl,\n\t\t\tMeteor.bindEnvironment((stream) => {\n\t\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\t\tfileStore.insert(details, stream, (err, file) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow new Error(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\t\ttitle_link: url,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst msg = {\n\t\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t_id: file._id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\t\tattachments: [attachment],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (details.message_id && typeof details.message_id === 'string') {\n\t\t\t\t\t\t\tmsg._id = details.message_id;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\timportFromHistory(family, options) {\n\t\tslackLogger.debug('Importing messages history');\n\t\tconst data = this.slackAPI.getHistory(family, options);\n\t\tif (Array.isArray(data.messages) && data.messages.length) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of data.messages.reverse()) {\n\t\t\t\tslackLogger.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopyChannelInfo(rid, channelMap) {\n\t\tslackLogger.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst channel = this.slackAPI.getRoomInfo(channelMap.id);\n\t\tif (channel) {\n\t\t\tconst members = this.slackAPI.getMembers(channelMap.id);\n\t\t\tif (members && Array.isArray(members) && members.length) {\n\t\t\t\tfor (const member of members) {\n\t\t\t\t\tconst user = this.rocket.findUser(member) || this.rocket.addUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tslackLogger.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\taddUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (channel && channel.topic && channel.topic.value) {\n\t\t\t\ttopic = channel.topic.value;\n\t\t\t\ttopic_last_set = channel.topic.last_set;\n\t\t\t\ttopic_creator = channel.topic.creator;\n\t\t\t}\n\n\t\t\tif (channel && channel.purpose && channel.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < channel.purpose.last_set) {\n\t\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.rocket.findUser(topic_creator) || this.rocket.addUser(topic_creator);\n\t\t\t\tslackLogger.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tsaveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst items = this.slackAPI.getPins(channelMap.id);\n\t\tif (items && Array.isArray(items) && items.length) {\n\t\t\tfor (const pin of items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.rocket.findUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t\tauthor_name: user.username,\n\t\t\t\t\t\t\t\tauthor_icon: getUserAvatarURL(user.username),\n\t\t\t\t\t\t\t\tts: new Date(parseInt(pin.message.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\n\t\t\t\t\tMessages.setPinnedByIdAndUserId(\n\t\t\t\t\t\t`slack-${pin.channel}-${pin.message.ts.replace(/\\./g, '-')}`,\n\t\t\t\t\t\tmsgObj.u,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tnew Date(parseInt(pin.message.ts.split('.')[0]) * 1000),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tslackLogger.info('importMessages: ', rid);\n\t\tconst rocketchat_room = Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.getSlackChannel(rid)) {\n\t\t\t\tthis.copyChannelInfo(rid, this.getSlackChannel(rid));\n\n\t\t\t\tslackLogger.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tlet results = this.importFromHistory(this.getSlackChannel(rid).family, {\n\t\t\t\t\tchannel: this.getSlackChannel(rid).id,\n\t\t\t\t\toldest: 1,\n\t\t\t\t});\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.getSlackChannel(rid).family, {\n\t\t\t\t\t\tchannel: this.getSlackChannel(rid).id,\n\t\t\t\t\t\toldest: results.ts,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tslackLogger.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tthis.copyPins(rid, this.getSlackChannel(rid));\n\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tconst slack_room = this.postFindChannel(rocketchat_room.name);\n\t\t\tif (slack_room) {\n\t\t\t\tthis.addSlackChannel(rid, slack_room.id);\n\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t}\n\t\t\tslackLogger.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t}\n\t\tslackLogger.error('Could not find Rocket.Chat room with specified id', rid);\n\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t}\n}\n"]},"sourceType":"module","hash":"c95b8ecb49d2f4ae3b991e3739581968f7e85578"}
