{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/client/lib/roomTypes.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/utils/client/lib/roomTypes.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/client/lib/roomTypes.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/client/lib/roomTypes.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/utils/client/lib/roomTypes.js"}},"code":"module.export({\n  roomTypes: () => roomTypes\n});\nlet FlowRouter;\nmodule.link(\"meteor/kadira:flow-router\", {\n  FlowRouter(v) {\n    FlowRouter = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet RoomTypesCommon;\nmodule.link(\"../../lib/RoomTypesCommon\", {\n  RoomTypesCommon(v) {\n    RoomTypesCommon = v;\n  }\n\n}, 2);\nlet hasAtLeastOnePermission;\nmodule.link(\"../../../authorization\", {\n  hasAtLeastOnePermission(v) {\n    hasAtLeastOnePermission = v;\n  }\n\n}, 3);\nlet ChatRoom, ChatSubscription;\nmodule.link(\"../../../models\", {\n  ChatRoom(v) {\n    ChatRoom = v;\n  },\n\n  ChatSubscription(v) {\n    ChatSubscription = v;\n  }\n\n}, 4);\nconst roomTypes = new class RocketChatRoomTypes extends RoomTypesCommon {\n  checkCondition(roomType) {\n    return roomType.condition == null || roomType.condition();\n  }\n\n  getTypes() {\n    return _.sortBy(this.roomTypesOrder, 'order').map(type => this.roomTypes[type.identifier]).filter(type => !type.condition || type.condition());\n  }\n\n  getIcon(roomData) {\n    if (!roomData || !roomData.t || !this.roomTypes[roomData.t]) {\n      return;\n    }\n\n    return this.roomTypes[roomData.t].getIcon && this.roomTypes[roomData.t].getIcon(roomData) || this.roomTypes[roomData.t].icon;\n  }\n\n  getRoomName(roomType, roomData) {\n    return this.roomTypes[roomType] && this.roomTypes[roomType].roomName && this.roomTypes[roomType].roomName(roomData);\n  }\n\n  getSecondaryRoomName(roomType, roomData) {\n    return this.roomTypes[roomType] && typeof this.roomTypes[roomType].secondaryRoomName === 'function' && this.roomTypes[roomType].secondaryRoomName(roomData);\n  }\n\n  getIdentifiers(e) {\n    const except = [].concat(e);\n\n    const list = _.reject(this.roomTypesOrder, t => except.indexOf(t.identifier) !== -1);\n\n    return _.map(list, t => t.identifier);\n  }\n\n  getUserStatus(roomType, rid) {\n    return this.roomTypes[roomType] && typeof this.roomTypes[roomType].getUserStatus === 'function' && this.roomTypes[roomType].getUserStatus(rid);\n  }\n\n  getRoomType(roomId) {\n    const fields = {\n      t: 1\n    };\n    const room = ChatRoom.findOne({\n      _id: roomId\n    }, {\n      fields\n    });\n    return room && room.t;\n  }\n\n  isLivechatRoom(roomType) {\n    return this.roomTypes[roomType] && typeof this.roomTypes[roomType].isLivechatRoom === 'function' && this.roomTypes[roomType].isLivechatRoom();\n  }\n\n  showQuickActionButtons(roomType) {\n    return this.roomTypes[roomType] && typeof this.roomTypes[roomType].showQuickActionButtons === 'function' && this.roomTypes[roomType].showQuickActionButtons();\n  }\n\n  getUserStatusText(roomType, rid) {\n    return this.roomTypes[roomType] && typeof this.roomTypes[roomType].getUserStatusText === 'function' && this.roomTypes[roomType].getUserStatusText(rid);\n  }\n\n  findRoom(roomType, identifier, user) {\n    return this.roomTypes[roomType] && this.roomTypes[roomType].findRoom(identifier, user);\n  }\n\n  canSendMessage(rid) {\n    return ChatSubscription.find({\n      rid\n    }).count() > 0;\n  }\n\n  readOnly(rid, user) {\n    const fields = {\n      ro: 1,\n      t: 1\n    };\n\n    if (user) {\n      fields.muted = 1;\n      fields.unmuted = 1;\n    }\n\n    const room = ChatRoom.findOne({\n      _id: rid\n    }, {\n      fields\n    });\n    const roomType = room && room.t;\n\n    if (roomType && this.roomTypes[roomType] && this.roomTypes[roomType].readOnly) {\n      return this.roomTypes[roomType].readOnly(rid, user);\n    }\n\n    if (!user) {\n      return room && room.ro;\n    }\n\n    if (room) {\n      if (Array.isArray(room.muted) && room.muted.indexOf(user.username) !== -1) {\n        return true;\n      }\n\n      if (room.ro === true) {\n        if (Array.isArray(room.unmuted) && room.unmuted.indexOf(user.username) !== -1) {\n          return false;\n        }\n\n        if (hasAtLeastOnePermission('post-readonly', room._id)) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  archived(rid) {\n    const room = ChatRoom.findOne({\n      _id: rid\n    }, {\n      fields: {\n        archived: 1\n      }\n    });\n    return room && room.archived === true;\n  }\n\n  verifyCanSendMessage(rid) {\n    const room = ChatRoom.findOne({\n      _id: rid\n    }, {\n      fields: {\n        t: 1\n      }\n    });\n\n    if (!room || !room.t) {\n      return;\n    }\n\n    const roomType = room.t;\n\n    if (this.roomTypes[roomType] && this.roomTypes[roomType].canSendMessage) {\n      return this.roomTypes[roomType].canSendMessage(rid);\n    }\n\n    return this.canSendMessage(rid);\n  }\n\n  verifyShowJoinLink(rid) {\n    const room = ChatRoom.findOne({\n      _id: rid,\n      t: {\n        $exists: true,\n        $ne: null\n      }\n    }, {\n      fields: {\n        t: 1\n      }\n    });\n\n    if (!room || !room.t) {\n      return;\n    }\n\n    const roomType = room.t;\n\n    if (this.roomTypes[roomType] && !this.roomTypes[roomType].showJoinLink) {\n      return false;\n    }\n\n    return this.roomTypes[roomType].showJoinLink(rid);\n  }\n\n  getNotSubscribedTpl(rid) {\n    const room = ChatRoom.findOne({\n      _id: rid,\n      t: {\n        $exists: true,\n        $ne: null\n      }\n    }, {\n      fields: {\n        t: 1\n      }\n    });\n\n    if (!room || !room.t) {\n      return;\n    }\n\n    const roomType = room.t;\n\n    if (this.roomTypes[roomType] && !this.roomTypes[roomType].notSubscribedTpl) {\n      return false;\n    }\n\n    return this.roomTypes[roomType].notSubscribedTpl;\n  }\n\n  getReadOnlyTpl(rid) {\n    const room = ChatRoom.findOne({\n      _id: rid,\n      t: {\n        $exists: true,\n        $ne: null\n      }\n    }, {\n      fields: {\n        t: 1\n      }\n    });\n\n    if (!room || !room.t) {\n      return;\n    }\n\n    const roomType = room.t;\n    return this.roomTypes[roomType] && this.roomTypes[roomType].readOnlyTpl;\n  }\n\n  openRouteLink(roomType, subData, queryParams) {\n    if (!this.roomTypes[roomType]) {\n      return false;\n    }\n\n    let routeData = {};\n\n    if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {\n      routeData = this.roomTypes[roomType].route.link(subData);\n    } else if (subData && subData.name) {\n      routeData = {\n        name: subData.name\n      };\n    }\n\n    return FlowRouter.go(this.roomTypes[roomType].route.name, routeData, queryParams);\n  }\n\n}();","map":{"version":3,"sources":["app/utils/client/lib/roomTypes.js"],"names":["module","export","roomTypes","FlowRouter","link","v","_","default","RoomTypesCommon","hasAtLeastOnePermission","ChatRoom","ChatSubscription","RocketChatRoomTypes","checkCondition","roomType","condition","getTypes","sortBy","roomTypesOrder","map","type","identifier","filter","getIcon","roomData","t","icon","getRoomName","roomName","getSecondaryRoomName","secondaryRoomName","getIdentifiers","e","except","concat","list","reject","indexOf","getUserStatus","rid","getRoomType","roomId","fields","room","findOne","_id","isLivechatRoom","showQuickActionButtons","getUserStatusText","findRoom","user","canSendMessage","find","count","readOnly","ro","muted","unmuted","Array","isArray","username","archived","verifyCanSendMessage","verifyShowJoinLink","$exists","$ne","showJoinLink","getNotSubscribedTpl","notSubscribedTpl","getReadOnlyTpl","readOnlyTpl","openRouteLink","subData","queryParams","routeData","route","name","go"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,SAAS,EAAC,MAAIA;AAAf,CAAd;AAAyC,IAAIC,UAAJ;AAAeH,MAAM,CAACI,IAAP,CAAY,2BAAZ,EAAwC;AAACD,EAAAA,UAAU,CAACE,CAAD,EAAG;AAACF,IAAAA,UAAU,GAACE,CAAX;AAAa;;AAA5B,CAAxC,EAAsE,CAAtE;;AAAyE,IAAIC,CAAJ;;AAAMN,MAAM,CAACI,IAAP,CAAY,YAAZ,EAAyB;AAACG,EAAAA,OAAO,CAACF,CAAD,EAAG;AAACC,IAAAA,CAAC,GAACD,CAAF;AAAI;;AAAhB,CAAzB,EAA2C,CAA3C;AAA8C,IAAIG,eAAJ;AAAoBR,MAAM,CAACI,IAAP,CAAY,2BAAZ,EAAwC;AAACI,EAAAA,eAAe,CAACH,CAAD,EAAG;AAACG,IAAAA,eAAe,GAACH,CAAhB;AAAkB;;AAAtC,CAAxC,EAAgF,CAAhF;AAAmF,IAAII,uBAAJ;AAA4BT,MAAM,CAACI,IAAP,CAAY,wBAAZ,EAAqC;AAACK,EAAAA,uBAAuB,CAACJ,CAAD,EAAG;AAACI,IAAAA,uBAAuB,GAACJ,CAAxB;AAA0B;;AAAtD,CAArC,EAA6F,CAA7F;AAAgG,IAAIK,QAAJ,EAAaC,gBAAb;AAA8BX,MAAM,CAACI,IAAP,CAAY,iBAAZ,EAA8B;AAACM,EAAAA,QAAQ,CAACL,CAAD,EAAG;AAACK,IAAAA,QAAQ,GAACL,CAAT;AAAW,GAAxB;;AAAyBM,EAAAA,gBAAgB,CAACN,CAAD,EAAG;AAACM,IAAAA,gBAAgB,GAACN,CAAjB;AAAmB;;AAAhE,CAA9B,EAAgG,CAAhG;AAO/a,MAAMH,SAAS,GAAG,IAAK,MAAMU,mBAAN,SAAkCJ,eAAlC,CAAkD;AAC/EK,EAAAA,cAAc,CAACC,QAAD,EAAW;AACxB,WAAOA,QAAQ,CAACC,SAAT,IAAsB,IAAtB,IAA8BD,QAAQ,CAACC,SAAT,EAArC;AACA;;AAEDC,EAAAA,QAAQ,GAAG;AACV,WAAOV,CAAC,CAACW,MAAF,CAAS,KAAKC,cAAd,EAA8B,OAA9B,EACLC,GADK,CACAC,IAAD,IAAU,KAAKlB,SAAL,CAAekB,IAAI,CAACC,UAApB,CADT,EAELC,MAFK,CAEGF,IAAD,IAAU,CAACA,IAAI,CAACL,SAAN,IAAmBK,IAAI,CAACL,SAAL,EAF/B,CAAP;AAGA;;AAEDQ,EAAAA,OAAO,CAACC,QAAD,EAAW;AACjB,QAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACC,CAAvB,IAA4B,CAAC,KAAKvB,SAAL,CAAesB,QAAQ,CAACC,CAAxB,CAAjC,EAA6D;AAC5D;AACA;;AACD,WAAQ,KAAKvB,SAAL,CAAesB,QAAQ,CAACC,CAAxB,EAA2BF,OAA3B,IAAsC,KAAKrB,SAAL,CAAesB,QAAQ,CAACC,CAAxB,EAA2BF,OAA3B,CAAmCC,QAAnC,CAAvC,IAAwF,KAAKtB,SAAL,CAAesB,QAAQ,CAACC,CAAxB,EAA2BC,IAA1H;AACA;;AAEDC,EAAAA,WAAW,CAACb,QAAD,EAAWU,QAAX,EAAqB;AAC/B,WAAO,KAAKtB,SAAL,CAAeY,QAAf,KAA4B,KAAKZ,SAAL,CAAeY,QAAf,EAAyBc,QAArD,IAAiE,KAAK1B,SAAL,CAAeY,QAAf,EAAyBc,QAAzB,CAAkCJ,QAAlC,CAAxE;AACA;;AAEDK,EAAAA,oBAAoB,CAACf,QAAD,EAAWU,QAAX,EAAqB;AACxC,WACC,KAAKtB,SAAL,CAAeY,QAAf,KACA,OAAO,KAAKZ,SAAL,CAAeY,QAAf,EAAyBgB,iBAAhC,KAAsD,UADtD,IAEA,KAAK5B,SAAL,CAAeY,QAAf,EAAyBgB,iBAAzB,CAA2CN,QAA3C,CAHD;AAKA;;AAEDO,EAAAA,cAAc,CAACC,CAAD,EAAI;AACjB,UAAMC,MAAM,GAAG,GAAGC,MAAH,CAAUF,CAAV,CAAf;;AACA,UAAMG,IAAI,GAAG7B,CAAC,CAAC8B,MAAF,CAAS,KAAKlB,cAAd,EAA+BO,CAAD,IAAOQ,MAAM,CAACI,OAAP,CAAeZ,CAAC,CAACJ,UAAjB,MAAiC,CAAC,CAAvE,CAAb;;AACA,WAAOf,CAAC,CAACa,GAAF,CAAMgB,IAAN,EAAaV,CAAD,IAAOA,CAAC,CAACJ,UAArB,CAAP;AACA;;AAEDiB,EAAAA,aAAa,CAACxB,QAAD,EAAWyB,GAAX,EAAgB;AAC5B,WACC,KAAKrC,SAAL,CAAeY,QAAf,KACA,OAAO,KAAKZ,SAAL,CAAeY,QAAf,EAAyBwB,aAAhC,KAAkD,UADlD,IAEA,KAAKpC,SAAL,CAAeY,QAAf,EAAyBwB,aAAzB,CAAuCC,GAAvC,CAHD;AAKA;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,UAAMC,MAAM,GAAG;AACdjB,MAAAA,CAAC,EAAE;AADW,KAAf;AAGA,UAAMkB,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CACZ;AACCC,MAAAA,GAAG,EAAEJ;AADN,KADY,EAIZ;AACCC,MAAAA;AADD,KAJY,CAAb;AAQA,WAAOC,IAAI,IAAIA,IAAI,CAAClB,CAApB;AACA;;AAEDqB,EAAAA,cAAc,CAAChC,QAAD,EAAW;AACxB,WACC,KAAKZ,SAAL,CAAeY,QAAf,KAA4B,OAAO,KAAKZ,SAAL,CAAeY,QAAf,EAAyBgC,cAAhC,KAAmD,UAA/E,IAA6F,KAAK5C,SAAL,CAAeY,QAAf,EAAyBgC,cAAzB,EAD9F;AAGA;;AAEDC,EAAAA,sBAAsB,CAACjC,QAAD,EAAW;AAChC,WACC,KAAKZ,SAAL,CAAeY,QAAf,KACA,OAAO,KAAKZ,SAAL,CAAeY,QAAf,EAAyBiC,sBAAhC,KAA2D,UAD3D,IAEA,KAAK7C,SAAL,CAAeY,QAAf,EAAyBiC,sBAAzB,EAHD;AAKA;;AAEDC,EAAAA,iBAAiB,CAAClC,QAAD,EAAWyB,GAAX,EAAgB;AAChC,WACC,KAAKrC,SAAL,CAAeY,QAAf,KACA,OAAO,KAAKZ,SAAL,CAAeY,QAAf,EAAyBkC,iBAAhC,KAAsD,UADtD,IAEA,KAAK9C,SAAL,CAAeY,QAAf,EAAyBkC,iBAAzB,CAA2CT,GAA3C,CAHD;AAKA;;AAEDU,EAAAA,QAAQ,CAACnC,QAAD,EAAWO,UAAX,EAAuB6B,IAAvB,EAA6B;AACpC,WAAO,KAAKhD,SAAL,CAAeY,QAAf,KAA4B,KAAKZ,SAAL,CAAeY,QAAf,EAAyBmC,QAAzB,CAAkC5B,UAAlC,EAA8C6B,IAA9C,CAAnC;AACA;;AAEDC,EAAAA,cAAc,CAACZ,GAAD,EAAM;AACnB,WAAO5B,gBAAgB,CAACyC,IAAjB,CAAsB;AAAEb,MAAAA;AAAF,KAAtB,EAA+Bc,KAA/B,KAAyC,CAAhD;AACA;;AAEDC,EAAAA,QAAQ,CAACf,GAAD,EAAMW,IAAN,EAAY;AACnB,UAAMR,MAAM,GAAG;AACda,MAAAA,EAAE,EAAE,CADU;AAEd9B,MAAAA,CAAC,EAAE;AAFW,KAAf;;AAIA,QAAIyB,IAAJ,EAAU;AACTR,MAAAA,MAAM,CAACc,KAAP,GAAe,CAAf;AACAd,MAAAA,MAAM,CAACe,OAAP,GAAiB,CAAjB;AACA;;AACD,UAAMd,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CACZ;AACCC,MAAAA,GAAG,EAAEN;AADN,KADY,EAIZ;AACCG,MAAAA;AADD,KAJY,CAAb;AASA,UAAM5B,QAAQ,GAAG6B,IAAI,IAAIA,IAAI,CAAClB,CAA9B;;AACA,QAAIX,QAAQ,IAAI,KAAKZ,SAAL,CAAeY,QAAf,CAAZ,IAAwC,KAAKZ,SAAL,CAAeY,QAAf,EAAyBwC,QAArE,EAA+E;AAC9E,aAAO,KAAKpD,SAAL,CAAeY,QAAf,EAAyBwC,QAAzB,CAAkCf,GAAlC,EAAuCW,IAAvC,CAAP;AACA;;AAED,QAAI,CAACA,IAAL,EAAW;AACV,aAAOP,IAAI,IAAIA,IAAI,CAACY,EAApB;AACA;;AAED,QAAIZ,IAAJ,EAAU;AACT,UAAIe,KAAK,CAACC,OAAN,CAAchB,IAAI,CAACa,KAAnB,KAA6Bb,IAAI,CAACa,KAAL,CAAWnB,OAAX,CAAmBa,IAAI,CAACU,QAAxB,MAAsC,CAAC,CAAxE,EAA2E;AAC1E,eAAO,IAAP;AACA;;AAED,UAAIjB,IAAI,CAACY,EAAL,KAAY,IAAhB,EAAsB;AACrB,YAAIG,KAAK,CAACC,OAAN,CAAchB,IAAI,CAACc,OAAnB,KAA+Bd,IAAI,CAACc,OAAL,CAAapB,OAAb,CAAqBa,IAAI,CAACU,QAA1B,MAAwC,CAAC,CAA5E,EAA+E;AAC9E,iBAAO,KAAP;AACA;;AAED,YAAInD,uBAAuB,CAAC,eAAD,EAAkBkC,IAAI,CAACE,GAAvB,CAA3B,EAAwD;AACvD,iBAAO,KAAP;AACA;;AAED,eAAO,IAAP;AACA;AACD;;AAED,WAAO,KAAP;AACA;;AAEDgB,EAAAA,QAAQ,CAACtB,GAAD,EAAM;AACb,UAAMI,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CAAiB;AAAEC,MAAAA,GAAG,EAAEN;AAAP,KAAjB,EAA+B;AAAEG,MAAAA,MAAM,EAAE;AAAEmB,QAAAA,QAAQ,EAAE;AAAZ;AAAV,KAA/B,CAAb;AACA,WAAOlB,IAAI,IAAIA,IAAI,CAACkB,QAAL,KAAkB,IAAjC;AACA;;AAEDC,EAAAA,oBAAoB,CAACvB,GAAD,EAAM;AACzB,UAAMI,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CAAiB;AAAEC,MAAAA,GAAG,EAAEN;AAAP,KAAjB,EAA+B;AAAEG,MAAAA,MAAM,EAAE;AAAEjB,QAAAA,CAAC,EAAE;AAAL;AAAV,KAA/B,CAAb;;AAEA,QAAI,CAACkB,IAAD,IAAS,CAACA,IAAI,CAAClB,CAAnB,EAAsB;AACrB;AACA;;AAED,UAAMX,QAAQ,GAAG6B,IAAI,CAAClB,CAAtB;;AACA,QAAI,KAAKvB,SAAL,CAAeY,QAAf,KAA4B,KAAKZ,SAAL,CAAeY,QAAf,EAAyBqC,cAAzD,EAAyE;AACxE,aAAO,KAAKjD,SAAL,CAAeY,QAAf,EAAyBqC,cAAzB,CAAwCZ,GAAxC,CAAP;AACA;;AACD,WAAO,KAAKY,cAAL,CAAoBZ,GAApB,CAAP;AACA;;AAEDwB,EAAAA,kBAAkB,CAACxB,GAAD,EAAM;AACvB,UAAMI,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CAAiB;AAAEC,MAAAA,GAAG,EAAEN,GAAP;AAAYd,MAAAA,CAAC,EAAE;AAAEuC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,GAAG,EAAE;AAAtB;AAAf,KAAjB,EAAgE;AAAEvB,MAAAA,MAAM,EAAE;AAAEjB,QAAAA,CAAC,EAAE;AAAL;AAAV,KAAhE,CAAb;;AACA,QAAI,CAACkB,IAAD,IAAS,CAACA,IAAI,CAAClB,CAAnB,EAAsB;AACrB;AACA;;AACD,UAAMX,QAAQ,GAAG6B,IAAI,CAAClB,CAAtB;;AACA,QAAI,KAAKvB,SAAL,CAAeY,QAAf,KAA4B,CAAC,KAAKZ,SAAL,CAAeY,QAAf,EAAyBoD,YAA1D,EAAwE;AACvE,aAAO,KAAP;AACA;;AACD,WAAO,KAAKhE,SAAL,CAAeY,QAAf,EAAyBoD,YAAzB,CAAsC3B,GAAtC,CAAP;AACA;;AAED4B,EAAAA,mBAAmB,CAAC5B,GAAD,EAAM;AACxB,UAAMI,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CAAiB;AAAEC,MAAAA,GAAG,EAAEN,GAAP;AAAYd,MAAAA,CAAC,EAAE;AAAEuC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,GAAG,EAAE;AAAtB;AAAf,KAAjB,EAAgE;AAAEvB,MAAAA,MAAM,EAAE;AAAEjB,QAAAA,CAAC,EAAE;AAAL;AAAV,KAAhE,CAAb;;AACA,QAAI,CAACkB,IAAD,IAAS,CAACA,IAAI,CAAClB,CAAnB,EAAsB;AACrB;AACA;;AACD,UAAMX,QAAQ,GAAG6B,IAAI,CAAClB,CAAtB;;AACA,QAAI,KAAKvB,SAAL,CAAeY,QAAf,KAA4B,CAAC,KAAKZ,SAAL,CAAeY,QAAf,EAAyBsD,gBAA1D,EAA4E;AAC3E,aAAO,KAAP;AACA;;AACD,WAAO,KAAKlE,SAAL,CAAeY,QAAf,EAAyBsD,gBAAhC;AACA;;AAEDC,EAAAA,cAAc,CAAC9B,GAAD,EAAM;AACnB,UAAMI,IAAI,GAAGjC,QAAQ,CAACkC,OAAT,CAAiB;AAAEC,MAAAA,GAAG,EAAEN,GAAP;AAAYd,MAAAA,CAAC,EAAE;AAAEuC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,GAAG,EAAE;AAAtB;AAAf,KAAjB,EAAgE;AAAEvB,MAAAA,MAAM,EAAE;AAAEjB,QAAAA,CAAC,EAAE;AAAL;AAAV,KAAhE,CAAb;;AACA,QAAI,CAACkB,IAAD,IAAS,CAACA,IAAI,CAAClB,CAAnB,EAAsB;AACrB;AACA;;AACD,UAAMX,QAAQ,GAAG6B,IAAI,CAAClB,CAAtB;AACA,WAAO,KAAKvB,SAAL,CAAeY,QAAf,KAA4B,KAAKZ,SAAL,CAAeY,QAAf,EAAyBwD,WAA5D;AACA;;AAEDC,EAAAA,aAAa,CAACzD,QAAD,EAAW0D,OAAX,EAAoBC,WAApB,EAAiC;AAC7C,QAAI,CAAC,KAAKvE,SAAL,CAAeY,QAAf,CAAL,EAA+B;AAC9B,aAAO,KAAP;AACA;;AAED,QAAI4D,SAAS,GAAG,EAAhB;;AACA,QAAI,KAAKxE,SAAL,CAAeY,QAAf,KAA4B,KAAKZ,SAAL,CAAeY,QAAf,EAAyB6D,KAArD,IAA8D,KAAKzE,SAAL,CAAeY,QAAf,EAAyB6D,KAAzB,CAA+BvE,IAAjG,EAAuG;AACtGsE,MAAAA,SAAS,GAAG,KAAKxE,SAAL,CAAeY,QAAf,EAAyB6D,KAAzB,CAA+BvE,IAA/B,CAAoCoE,OAApC,CAAZ;AACA,KAFD,MAEO,IAAIA,OAAO,IAAIA,OAAO,CAACI,IAAvB,EAA6B;AACnCF,MAAAA,SAAS,GAAG;AACXE,QAAAA,IAAI,EAAEJ,OAAO,CAACI;AADH,OAAZ;AAGA;;AAED,WAAOzE,UAAU,CAAC0E,EAAX,CAAc,KAAK3E,SAAL,CAAeY,QAAf,EAAyB6D,KAAzB,CAA+BC,IAA7C,EAAmDF,SAAnD,EAA8DD,WAA9D,CAAP;AACA;;AA5M8E,CAAvD,EAAlB","sourcesContent":["import { FlowRouter } from 'meteor/kadira:flow-router';\nimport _ from 'underscore';\n\nimport { RoomTypesCommon } from '../../lib/RoomTypesCommon';\nimport { hasAtLeastOnePermission } from '../../../authorization';\nimport { ChatRoom, ChatSubscription } from '../../../models';\n\nexport const roomTypes = new (class RocketChatRoomTypes extends RoomTypesCommon {\n\tcheckCondition(roomType) {\n\t\treturn roomType.condition == null || roomType.condition();\n\t}\n\n\tgetTypes() {\n\t\treturn _.sortBy(this.roomTypesOrder, 'order')\n\t\t\t.map((type) => this.roomTypes[type.identifier])\n\t\t\t.filter((type) => !type.condition || type.condition());\n\t}\n\n\tgetIcon(roomData) {\n\t\tif (!roomData || !roomData.t || !this.roomTypes[roomData.t]) {\n\t\t\treturn;\n\t\t}\n\t\treturn (this.roomTypes[roomData.t].getIcon && this.roomTypes[roomData.t].getIcon(roomData)) || this.roomTypes[roomData.t].icon;\n\t}\n\n\tgetRoomName(roomType, roomData) {\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].roomName && this.roomTypes[roomType].roomName(roomData);\n\t}\n\n\tgetSecondaryRoomName(roomType, roomData) {\n\t\treturn (\n\t\t\tthis.roomTypes[roomType] &&\n\t\t\ttypeof this.roomTypes[roomType].secondaryRoomName === 'function' &&\n\t\t\tthis.roomTypes[roomType].secondaryRoomName(roomData)\n\t\t);\n\t}\n\n\tgetIdentifiers(e) {\n\t\tconst except = [].concat(e);\n\t\tconst list = _.reject(this.roomTypesOrder, (t) => except.indexOf(t.identifier) !== -1);\n\t\treturn _.map(list, (t) => t.identifier);\n\t}\n\n\tgetUserStatus(roomType, rid) {\n\t\treturn (\n\t\t\tthis.roomTypes[roomType] &&\n\t\t\ttypeof this.roomTypes[roomType].getUserStatus === 'function' &&\n\t\t\tthis.roomTypes[roomType].getUserStatus(rid)\n\t\t);\n\t}\n\n\tgetRoomType(roomId) {\n\t\tconst fields = {\n\t\t\tt: 1,\n\t\t};\n\t\tconst room = ChatRoom.findOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields,\n\t\t\t},\n\t\t);\n\t\treturn room && room.t;\n\t}\n\n\tisLivechatRoom(roomType) {\n\t\treturn (\n\t\t\tthis.roomTypes[roomType] && typeof this.roomTypes[roomType].isLivechatRoom === 'function' && this.roomTypes[roomType].isLivechatRoom()\n\t\t);\n\t}\n\n\tshowQuickActionButtons(roomType) {\n\t\treturn (\n\t\t\tthis.roomTypes[roomType] &&\n\t\t\ttypeof this.roomTypes[roomType].showQuickActionButtons === 'function' &&\n\t\t\tthis.roomTypes[roomType].showQuickActionButtons()\n\t\t);\n\t}\n\n\tgetUserStatusText(roomType, rid) {\n\t\treturn (\n\t\t\tthis.roomTypes[roomType] &&\n\t\t\ttypeof this.roomTypes[roomType].getUserStatusText === 'function' &&\n\t\t\tthis.roomTypes[roomType].getUserStatusText(rid)\n\t\t);\n\t}\n\n\tfindRoom(roomType, identifier, user) {\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].findRoom(identifier, user);\n\t}\n\n\tcanSendMessage(rid) {\n\t\treturn ChatSubscription.find({ rid }).count() > 0;\n\t}\n\n\treadOnly(rid, user) {\n\t\tconst fields = {\n\t\t\tro: 1,\n\t\t\tt: 1,\n\t\t};\n\t\tif (user) {\n\t\t\tfields.muted = 1;\n\t\t\tfields.unmuted = 1;\n\t\t}\n\t\tconst room = ChatRoom.findOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields,\n\t\t\t},\n\t\t);\n\n\t\tconst roomType = room && room.t;\n\t\tif (roomType && this.roomTypes[roomType] && this.roomTypes[roomType].readOnly) {\n\t\t\treturn this.roomTypes[roomType].readOnly(rid, user);\n\t\t}\n\n\t\tif (!user) {\n\t\t\treturn room && room.ro;\n\t\t}\n\n\t\tif (room) {\n\t\t\tif (Array.isArray(room.muted) && room.muted.indexOf(user.username) !== -1) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (room.ro === true) {\n\t\t\t\tif (Array.isArray(room.unmuted) && room.unmuted.indexOf(user.username) !== -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (hasAtLeastOnePermission('post-readonly', room._id)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tarchived(rid) {\n\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { archived: 1 } });\n\t\treturn room && room.archived === true;\n\t}\n\n\tverifyCanSendMessage(rid) {\n\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1 } });\n\n\t\tif (!room || !room.t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst roomType = room.t;\n\t\tif (this.roomTypes[roomType] && this.roomTypes[roomType].canSendMessage) {\n\t\t\treturn this.roomTypes[roomType].canSendMessage(rid);\n\t\t}\n\t\treturn this.canSendMessage(rid);\n\t}\n\n\tverifyShowJoinLink(rid) {\n\t\tconst room = ChatRoom.findOne({ _id: rid, t: { $exists: true, $ne: null } }, { fields: { t: 1 } });\n\t\tif (!room || !room.t) {\n\t\t\treturn;\n\t\t}\n\t\tconst roomType = room.t;\n\t\tif (this.roomTypes[roomType] && !this.roomTypes[roomType].showJoinLink) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.roomTypes[roomType].showJoinLink(rid);\n\t}\n\n\tgetNotSubscribedTpl(rid) {\n\t\tconst room = ChatRoom.findOne({ _id: rid, t: { $exists: true, $ne: null } }, { fields: { t: 1 } });\n\t\tif (!room || !room.t) {\n\t\t\treturn;\n\t\t}\n\t\tconst roomType = room.t;\n\t\tif (this.roomTypes[roomType] && !this.roomTypes[roomType].notSubscribedTpl) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.roomTypes[roomType].notSubscribedTpl;\n\t}\n\n\tgetReadOnlyTpl(rid) {\n\t\tconst room = ChatRoom.findOne({ _id: rid, t: { $exists: true, $ne: null } }, { fields: { t: 1 } });\n\t\tif (!room || !room.t) {\n\t\t\treturn;\n\t\t}\n\t\tconst roomType = room.t;\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].readOnlyTpl;\n\t}\n\n\topenRouteLink(roomType, subData, queryParams) {\n\t\tif (!this.roomTypes[roomType]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet routeData = {};\n\t\tif (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {\n\t\t\trouteData = this.roomTypes[roomType].route.link(subData);\n\t\t} else if (subData && subData.name) {\n\t\t\trouteData = {\n\t\t\t\tname: subData.name,\n\t\t\t};\n\t\t}\n\n\t\treturn FlowRouter.go(this.roomTypes[roomType].route.name, routeData, queryParams);\n\t}\n})();\n"]},"sourceType":"module","hash":"61d05c3a836bec6c0d3008c3deda4431d3f3c8e7"}
