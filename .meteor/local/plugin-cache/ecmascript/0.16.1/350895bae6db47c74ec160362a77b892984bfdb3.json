{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/lib/Helper.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/lib/Helper.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/lib/Helper.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/lib/Helper.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/lib/Helper.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  getMaxNumberSimultaneousChat: () => getMaxNumberSimultaneousChat,\n  normalizeQueueInfo: () => normalizeQueueInfo,\n  dispatchInquiryPosition: () => dispatchInquiryPosition,\n  dispatchWaitingQueueStatus: () => dispatchWaitingQueueStatus,\n  debouncedDispatchWaitingQueueStatus: () => debouncedDispatchWaitingQueueStatus,\n  processWaitingQueue: () => processWaitingQueue,\n  setPredictedVisitorAbandonmentTime: () => setPredictedVisitorAbandonmentTime,\n  updatePredictedVisitorAbandonment: () => updatePredictedVisitorAbandonment,\n  updateQueueInactivityTimeout: () => updateQueueInactivityTimeout,\n  updateRoomPriorityHistory: () => updateRoomPriorityHistory,\n  updateInquiryQueuePriority: () => updateInquiryQueuePriority,\n  removePriorityFromRooms: () => removePriorityFromRooms,\n  updatePriorityInquiries: () => updatePriorityInquiries,\n  getLivechatCustomFields: () => getLivechatCustomFields,\n  getLivechatQueueInfo: () => getLivechatQueueInfo\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet memoizeDebounce;\nmodule.link(\"./debounceByParams\", {\n  memoizeDebounce(v) {\n    memoizeDebounce = v;\n  }\n\n}, 2);\nlet LivechatDepartment, Users, LivechatInquiry, LivechatRooms, Messages, LivechatCustomField;\nmodule.link(\"../../../../../app/models/server\", {\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatCustomField(v) {\n    LivechatCustomField = v;\n  }\n\n}, 3);\nlet RoomRaw;\nmodule.link(\"../../../../../app/models/server/raw\", {\n  Rooms(v) {\n    RoomRaw = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../../../../app/settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet RoutingManager;\nmodule.link(\"../../../../../app/livechat/server/lib/RoutingManager\", {\n  RoutingManager(v) {\n    RoutingManager = v;\n  }\n\n}, 6);\nlet dispatchAgentDelegated;\nmodule.link(\"../../../../../app/livechat/server/lib/Helper\", {\n  dispatchAgentDelegated(v) {\n    dispatchAgentDelegated = v;\n  }\n\n}, 7);\nlet notifications;\nmodule.link(\"../../../../../app/notifications/server/lib/Notifications\", {\n  default(v) {\n    notifications = v;\n  }\n\n}, 8);\nlet logger, helperLogger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  },\n\n  helperLogger(v) {\n    helperLogger = v;\n  }\n\n}, 9);\nlet OmnichannelQueueInactivityMonitor;\nmodule.link(\"./QueueInactivityMonitor\", {\n  OmnichannelQueueInactivityMonitor(v) {\n    OmnichannelQueueInactivityMonitor = v;\n  }\n\n}, 10);\n\nconst getMaxNumberSimultaneousChat = _ref => {\n  let {\n    agentId,\n    departmentId\n  } = _ref;\n\n  if (departmentId) {\n    const department = LivechatDepartment.findOneById(departmentId);\n    const {\n      maxNumberSimultaneousChat\n    } = department || {};\n\n    if (maxNumberSimultaneousChat > 0) {\n      return maxNumberSimultaneousChat;\n    }\n  }\n\n  if (agentId) {\n    const user = Users.getAgentInfo(agentId);\n    const {\n      livechat: {\n        maxNumberSimultaneousChat\n      } = {}\n    } = user || {};\n\n    if (maxNumberSimultaneousChat > 0) {\n      return maxNumberSimultaneousChat;\n    }\n  }\n\n  return settings.get('Livechat_maximum_chats_per_agent');\n};\n\nconst getWaitingQueueMessage = departmentId => {\n  const department = departmentId && LivechatDepartment.findOneById(departmentId);\n\n  if (department && department.waitingQueueMessage) {\n    return department.waitingQueueMessage;\n  }\n\n  return settings.get('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = department => Promise.asyncApply(() => {\n  const numberMostRecentChats = settings.get('Livechat_number_most_recent_chats_estimate_wait_time');\n  const statistics = Promise.await(RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department));\n  const text = getWaitingQueueMessage(department);\n  const message = {\n    text,\n    user: {\n      _id: 'rocket.cat',\n      username: 'rocket.cat'\n    }\n  };\n  return {\n    message,\n    statistics,\n    numberMostRecentChats\n  };\n});\n\nconst getSpotEstimatedWaitTime = (spot, maxNumberSimultaneousChat, avgChatDuration) => {\n  if (!maxNumberSimultaneousChat || !avgChatDuration) {\n    return;\n  } // X = spot\n  // N = maxNumberSimultaneousChat\n  // Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n\n\n  return ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n};\n\nconst normalizeQueueInfo = _ref2 => Promise.asyncApply(() => {\n  let {\n    position,\n    queueInfo,\n    department\n  } = _ref2;\n\n  if (!queueInfo) {\n    queueInfo = Promise.await(getQueueInfo(department));\n  }\n\n  const {\n    message,\n    numberMostRecentChats,\n    statistics: {\n      avgChatDuration\n    } = {}\n  } = queueInfo;\n  const spot = position + 1;\n  const estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n  return {\n    spot,\n    message,\n    estimatedWaitTimeSeconds\n  };\n});\n\nconst dispatchInquiryPosition = (inquiry, queueInfo) => Promise.asyncApply(() => {\n  const {\n    position,\n    department\n  } = inquiry;\n  const data = Promise.await(normalizeQueueInfo({\n    position,\n    queueInfo,\n    department\n  }));\n  const propagateInquiryPosition = Meteor.bindEnvironment(inquiry => {\n    notifications.streamLivechatRoom.emit(inquiry.rid, {\n      type: 'queueData',\n      data\n    });\n  });\n  return setTimeout(() => {\n    propagateInquiryPosition(inquiry);\n  }, 1000);\n});\n\nconst dispatchWaitingQueueStatus = department => Promise.asyncApply(() => {\n  if (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n    return;\n  }\n\n  helperLogger.debug(\"Updating statuses for queue \".concat(department || 'Public'));\n  const queue = Promise.await(LivechatInquiry.getCurrentSortedQueueAsync({\n    department\n  }));\n\n  if (!queue.length) {\n    return;\n  }\n\n  const queueInfo = Promise.await(getQueueInfo(department));\n  queue.forEach(inquiry => {\n    dispatchInquiryPosition(inquiry, queueInfo);\n  });\n});\n\nconst debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n\nconst processWaitingQueue = department => Promise.asyncApply(() => {\n  const queue = department || 'Public';\n  helperLogger.debug(\"Processing items on queue \".concat(queue));\n  const inquiry = LivechatInquiry.getNextInquiryQueued(department);\n\n  if (!inquiry) {\n    helperLogger.debug(\"No items to process on queue \".concat(queue));\n    return;\n  }\n\n  helperLogger.debug(\"Processing inquiry \".concat(inquiry._id, \" from queue \").concat(queue));\n  const {\n    defaultAgent\n  } = inquiry;\n  const room = Promise.await(RoutingManager.delegateInquiry(inquiry, defaultAgent));\n  const propagateAgentDelegated = Meteor.bindEnvironment((rid, agentId) => {\n    dispatchAgentDelegated(rid, agentId);\n  });\n\n  if (room && room.servedBy) {\n    const {\n      _id: rid,\n      servedBy: {\n        _id: agentId\n      }\n    } = room;\n    helperLogger.debug(\"Inquiry \".concat(inquiry._id, \" taken successfully by agent \").concat(agentId, \". Notifying\"));\n    return setTimeout(() => {\n      propagateAgentDelegated(rid, agentId);\n    }, 1000);\n  }\n});\n\nconst setPredictedVisitorAbandonmentTime = room => {\n  if (!room.v || !room.v.lastMessageTs || !settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n    return;\n  }\n\n  let secondsToAdd = settings.get('Livechat_visitor_inactivity_timeout');\n  const department = room.departmentId && LivechatDepartment.findOneById(room.departmentId);\n\n  if (department && department.visitorInactivityTimeoutInSeconds) {\n    secondsToAdd = department.visitorInactivityTimeoutInSeconds;\n  }\n\n  if (secondsToAdd <= 0) {\n    return;\n  }\n\n  const willBeAbandonedAt = moment(room.v.lastMessageTs).add(Number(secondsToAdd), 'seconds').toDate();\n  LivechatRooms.setPredictedVisitorAbandonment(room._id, willBeAbandonedAt);\n};\n\nconst updatePredictedVisitorAbandonment = () => {\n  if (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n    LivechatRooms.unsetPredictedVisitorAbandonment();\n  } else {\n    LivechatRooms.findLivechat({\n      open: true\n    }).forEach(room => setPredictedVisitorAbandonmentTime(room));\n  }\n};\n\nconst updateQueueInactivityTimeout = () => {\n  const queueTimeout = settings.get('Livechat_max_queue_wait_time');\n\n  if (queueTimeout <= 0) {\n    logger.debug('QueueInactivityTimer: Disabling scheduled closing');\n    OmnichannelQueueInactivityMonitor.stop();\n    return;\n  }\n\n  logger.debug('QueueInactivityTimer: Updating estimated inactivity time for queued items');\n  LivechatInquiry.getQueuedInquiries({\n    fields: {\n      _updatedAt: 1\n    }\n  }).forEach(inq => {\n    const aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\n    try {\n      return OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n    } catch (e) {\n      // this will usually happen if other instance attempts to re-create a job\n      logger.error({\n        err: e\n      });\n    }\n  });\n};\n\nconst updateRoomPriorityHistory = (rid, user, priority) => {\n  const history = {\n    priorityData: {\n      definedBy: user,\n      priority: priority || {}\n    }\n  };\n  Messages.createPriorityHistoryWithRoomIdMessageAndUser(rid, '', user, history);\n};\n\nconst updateInquiryQueuePriority = (roomId, priority) => {\n  const inquiry = LivechatInquiry.findOneByRoomId(roomId, {\n    fields: {\n      rid: 1,\n      ts: 1\n    }\n  });\n\n  if (!inquiry) {\n    return;\n  }\n\n  let {\n    ts: estimatedServiceTimeAt\n  } = inquiry;\n  let queueOrder = 1;\n  let estimatedWaitingTimeQueue = 0;\n\n  if (priority) {\n    const {\n      dueTimeInMinutes\n    } = priority;\n    queueOrder = 0;\n    estimatedWaitingTimeQueue = dueTimeInMinutes;\n    estimatedServiceTimeAt = new Date(estimatedServiceTimeAt.setMinutes(estimatedServiceTimeAt.getMinutes() + dueTimeInMinutes));\n  }\n\n  LivechatInquiry.setEstimatedServiceTimeAt(inquiry.rid, {\n    queueOrder,\n    estimatedWaitingTimeQueue,\n    estimatedServiceTimeAt\n  });\n};\n\nconst removePriorityFromRooms = priorityId => {\n  LivechatRooms.findOpenByPriorityId(priorityId).forEach(room => {\n    updateInquiryQueuePriority(room._id);\n  });\n  LivechatRooms.unsetPriorityById(priorityId);\n};\n\nconst updatePriorityInquiries = priority => {\n  if (!priority) {\n    return;\n  }\n\n  const {\n    _id: priorityId\n  } = priority;\n  LivechatRooms.findOpenByPriorityId(priorityId).forEach(room => {\n    updateInquiryQueuePriority(room._id, priority);\n  });\n};\n\nconst getLivechatCustomFields = () => {\n  const customFields = LivechatCustomField.find({\n    visibility: 'visible',\n    scope: 'visitor',\n    public: true\n  }).fetch();\n  return customFields.map(_ref3 => {\n    let {\n      _id,\n      label,\n      regexp,\n      required = false,\n      type,\n      defaultValue = null,\n      options\n    } = _ref3;\n    return _objectSpread({\n      _id,\n      label,\n      regexp,\n      required,\n      type,\n      defaultValue\n    }, options && options !== '' && {\n      options: options.split(',')\n    });\n  });\n};\n\nconst getLivechatQueueInfo = room => Promise.asyncApply(() => {\n  if (!room) {\n    return null;\n  }\n\n  if (!settings.get('Livechat_waiting_queue')) {\n    return null;\n  }\n\n  if (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n    return null;\n  }\n\n  const {\n    _id: rid,\n    departmentId: department\n  } = room;\n  const inquiry = LivechatInquiry.findOneByRoomId(rid, {\n    fields: {\n      _id: 1,\n      status: 1\n    }\n  });\n\n  if (!inquiry) {\n    return null;\n  }\n\n  const {\n    _id,\n    status\n  } = inquiry;\n\n  if (status !== 'queued') {\n    return null;\n  }\n\n  const [inq] = Promise.await(LivechatInquiry.getCurrentSortedQueueAsync({\n    _id,\n    department\n  }));\n\n  if (!inq) {\n    return null;\n  }\n\n  return normalizeQueueInfo(inq);\n});","map":{"version":3,"sources":["ee/app/livechat-enterprise/server/lib/Helper.js"],"names":["_objectSpread","module","link","default","v","export","getMaxNumberSimultaneousChat","normalizeQueueInfo","dispatchInquiryPosition","dispatchWaitingQueueStatus","debouncedDispatchWaitingQueueStatus","processWaitingQueue","setPredictedVisitorAbandonmentTime","updatePredictedVisitorAbandonment","updateQueueInactivityTimeout","updateRoomPriorityHistory","updateInquiryQueuePriority","removePriorityFromRooms","updatePriorityInquiries","getLivechatCustomFields","getLivechatQueueInfo","Meteor","moment","memoizeDebounce","LivechatDepartment","Users","LivechatInquiry","LivechatRooms","Messages","LivechatCustomField","RoomRaw","Rooms","settings","RoutingManager","dispatchAgentDelegated","notifications","logger","helperLogger","OmnichannelQueueInactivityMonitor","agentId","departmentId","department","findOneById","maxNumberSimultaneousChat","user","getAgentInfo","livechat","get","getWaitingQueueMessage","waitingQueueMessage","getQueueInfo","numberMostRecentChats","statistics","getMostRecentAverageChatDurationTime","text","message","_id","username","getSpotEstimatedWaitTime","spot","avgChatDuration","position","queueInfo","estimatedWaitTimeSeconds","inquiry","data","propagateInquiryPosition","bindEnvironment","streamLivechatRoom","emit","rid","type","setTimeout","debug","queue","getCurrentSortedQueueAsync","length","forEach","getNextInquiryQueued","defaultAgent","room","delegateInquiry","propagateAgentDelegated","servedBy","lastMessageTs","secondsToAdd","visitorInactivityTimeoutInSeconds","willBeAbandonedAt","add","Number","toDate","setPredictedVisitorAbandonment","unsetPredictedVisitorAbandonment","findLivechat","open","queueTimeout","stop","getQueuedInquiries","fields","_updatedAt","inq","aggregatedDate","scheduleInquiry","Date","format","e","error","err","priority","history","priorityData","definedBy","createPriorityHistoryWithRoomIdMessageAndUser","roomId","findOneByRoomId","ts","estimatedServiceTimeAt","queueOrder","estimatedWaitingTimeQueue","dueTimeInMinutes","setMinutes","getMinutes","setEstimatedServiceTimeAt","priorityId","findOpenByPriorityId","unsetPriorityById","customFields","find","visibility","scope","public","fetch","map","label","regexp","required","defaultValue","options","split","status"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { memoizeDebounce } from './debounceByParams';\nimport { LivechatDepartment, Users, LivechatInquiry, LivechatRooms, Messages, LivechatCustomField } from '../../../../../app/models/server';\nimport { Rooms as RoomRaw } from '../../../../../app/models/server/raw';\nimport { settings } from '../../../../../app/settings';\nimport { RoutingManager } from '../../../../../app/livechat/server/lib/RoutingManager';\nimport { dispatchAgentDelegated } from '../../../../../app/livechat/server/lib/Helper';\nimport notifications from '../../../../../app/notifications/server/lib/Notifications';\nimport { logger, helperLogger } from './logger';\nimport { OmnichannelQueueInactivityMonitor } from './QueueInactivityMonitor';\n\nexport const getMaxNumberSimultaneousChat = ({ agentId, departmentId }) => {\n\tif (departmentId) {\n\t\tconst department = LivechatDepartment.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat } = department || {};\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\tif (agentId) {\n\t\tconst user = Users.getAgentInfo(agentId);\n\t\tconst { livechat: { maxNumberSimultaneousChat } = {} } = user || {};\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\treturn settings.get('Livechat_maximum_chats_per_agent');\n};\n\nconst getWaitingQueueMessage = (departmentId) => {\n\tconst department = departmentId && LivechatDepartment.findOneById(departmentId);\n\tif (department && department.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department) => {\n\tconst numberMostRecentChats = settings.get('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = getWaitingQueueMessage(department);\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },\n\t};\n\treturn { message, statistics, numberMostRecentChats };\n};\n\nconst getSpotEstimatedWaitTime = (spot, maxNumberSimultaneousChat, avgChatDuration) => {\n\tif (!maxNumberSimultaneousChat || !avgChatDuration) {\n\t\treturn;\n\t}\n\t// X = spot\n\t// N = maxNumberSimultaneousChat\n\t// Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n\treturn ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n};\n\nexport const normalizeQueueInfo = async ({ position, queueInfo, department }) => {\n\tif (!queueInfo) {\n\t\tqueueInfo = await getQueueInfo(department);\n\t}\n\n\tconst { message, numberMostRecentChats, statistics: { avgChatDuration } = {} } = queueInfo;\n\tconst spot = position + 1;\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };\n};\n\nexport const dispatchInquiryPosition = async (inquiry, queueInfo) => {\n\tconst { position, department } = inquiry;\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\tconst propagateInquiryPosition = Meteor.bindEnvironment((inquiry) => {\n\t\tnotifications.streamLivechatRoom.emit(inquiry.rid, {\n\t\t\ttype: 'queueData',\n\t\t\tdata,\n\t\t});\n\t});\n\n\treturn setTimeout(() => {\n\t\tpropagateInquiryPosition(inquiry);\n\t}, 1000);\n};\n\nexport const dispatchWaitingQueueStatus = async (department) => {\n\tif (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn;\n\t}\n\n\thelperLogger.debug(`Updating statuses for queue ${department || 'Public'}`);\n\tconst queue = await LivechatInquiry.getCurrentSortedQueueAsync({ department });\n\n\tif (!queue.length) {\n\t\treturn;\n\t}\n\n\tconst queueInfo = await getQueueInfo(department);\n\tqueue.forEach((inquiry) => {\n\t\tdispatchInquiryPosition(inquiry, queueInfo);\n\t});\n};\n\n// When dealing with lots of queued items we need to make sure to notify their position\n// but we don't need to notify _each_ change that takes place, just their final position\nexport const debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n\nexport const processWaitingQueue = async (department) => {\n\tconst queue = department || 'Public';\n\thelperLogger.debug(`Processing items on queue ${queue}`);\n\tconst inquiry = LivechatInquiry.getNextInquiryQueued(department);\n\tif (!inquiry) {\n\t\thelperLogger.debug(`No items to process on queue ${queue}`);\n\t\treturn;\n\t}\n\n\thelperLogger.debug(`Processing inquiry ${inquiry._id} from queue ${queue}`);\n\tconst { defaultAgent } = inquiry;\n\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent);\n\n\tconst propagateAgentDelegated = Meteor.bindEnvironment((rid, agentId) => {\n\t\tdispatchAgentDelegated(rid, agentId);\n\t});\n\n\tif (room && room.servedBy) {\n\t\tconst {\n\t\t\t_id: rid,\n\t\t\tservedBy: { _id: agentId },\n\t\t} = room;\n\t\thelperLogger.debug(`Inquiry ${inquiry._id} taken successfully by agent ${agentId}. Notifying`);\n\t\treturn setTimeout(() => {\n\t\t\tpropagateAgentDelegated(rid, agentId);\n\t\t}, 1000);\n\t}\n};\n\nexport const setPredictedVisitorAbandonmentTime = (room) => {\n\tif (\n\t\t!room.v ||\n\t\t!room.v.lastMessageTs ||\n\t\t!settings.get('Livechat_abandoned_rooms_action') ||\n\t\tsettings.get('Livechat_abandoned_rooms_action') === 'none'\n\t) {\n\t\treturn;\n\t}\n\n\tlet secondsToAdd = settings.get('Livechat_visitor_inactivity_timeout');\n\n\tconst department = room.departmentId && LivechatDepartment.findOneById(room.departmentId);\n\tif (department && department.visitorInactivityTimeoutInSeconds) {\n\t\tsecondsToAdd = department.visitorInactivityTimeoutInSeconds;\n\t}\n\n\tif (secondsToAdd <= 0) {\n\t\treturn;\n\t}\n\n\tconst willBeAbandonedAt = moment(room.v.lastMessageTs).add(Number(secondsToAdd), 'seconds').toDate();\n\tLivechatRooms.setPredictedVisitorAbandonment(room._id, willBeAbandonedAt);\n};\n\nexport const updatePredictedVisitorAbandonment = () => {\n\tif (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n\t\tLivechatRooms.unsetPredictedVisitorAbandonment();\n\t} else {\n\t\tLivechatRooms.findLivechat({ open: true }).forEach((room) => setPredictedVisitorAbandonmentTime(room));\n\t}\n};\n\nexport const updateQueueInactivityTimeout = () => {\n\tconst queueTimeout = settings.get('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tlogger.debug('QueueInactivityTimer: Disabling scheduled closing');\n\t\tOmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tlogger.debug('QueueInactivityTimer: Updating estimated inactivity time for queued items');\n\tLivechatInquiry.getQueuedInquiries({ fields: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\treturn OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {\n\t\t\t// this will usually happen if other instance attempts to re-create a job\n\t\t\tlogger.error({ err: e });\n\t\t}\n\t});\n};\n\nexport const updateRoomPriorityHistory = (rid, user, priority) => {\n\tconst history = {\n\t\tpriorityData: {\n\t\t\tdefinedBy: user,\n\t\t\tpriority: priority || {},\n\t\t},\n\t};\n\n\tMessages.createPriorityHistoryWithRoomIdMessageAndUser(rid, '', user, history);\n};\n\nexport const updateInquiryQueuePriority = (roomId, priority) => {\n\tconst inquiry = LivechatInquiry.findOneByRoomId(roomId, { fields: { rid: 1, ts: 1 } });\n\tif (!inquiry) {\n\t\treturn;\n\t}\n\n\tlet { ts: estimatedServiceTimeAt } = inquiry;\n\tlet queueOrder = 1;\n\tlet estimatedWaitingTimeQueue = 0;\n\n\tif (priority) {\n\t\tconst { dueTimeInMinutes } = priority;\n\t\tqueueOrder = 0;\n\t\testimatedWaitingTimeQueue = dueTimeInMinutes;\n\t\testimatedServiceTimeAt = new Date(estimatedServiceTimeAt.setMinutes(estimatedServiceTimeAt.getMinutes() + dueTimeInMinutes));\n\t}\n\n\tLivechatInquiry.setEstimatedServiceTimeAt(inquiry.rid, {\n\t\tqueueOrder,\n\t\testimatedWaitingTimeQueue,\n\t\testimatedServiceTimeAt,\n\t});\n};\n\nexport const removePriorityFromRooms = (priorityId) => {\n\tLivechatRooms.findOpenByPriorityId(priorityId).forEach((room) => {\n\t\tupdateInquiryQueuePriority(room._id);\n\t});\n\n\tLivechatRooms.unsetPriorityById(priorityId);\n};\n\nexport const updatePriorityInquiries = (priority) => {\n\tif (!priority) {\n\t\treturn;\n\t}\n\n\tconst { _id: priorityId } = priority;\n\tLivechatRooms.findOpenByPriorityId(priorityId).forEach((room) => {\n\t\tupdateInquiryQueuePriority(room._id, priority);\n\t});\n};\n\nexport const getLivechatCustomFields = () => {\n\tconst customFields = LivechatCustomField.find({\n\t\tvisibility: 'visible',\n\t\tscope: 'visitor',\n\t\tpublic: true,\n\t}).fetch();\n\treturn customFields.map(({ _id, label, regexp, required = false, type, defaultValue = null, options }) => ({\n\t\t_id,\n\t\tlabel,\n\t\tregexp,\n\t\trequired,\n\t\ttype,\n\t\tdefaultValue,\n\t\t...(options && options !== '' && { options: options.split(',') }),\n\t}));\n};\n\nexport const getLivechatQueueInfo = async (room) => {\n\tif (!room) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Livechat_waiting_queue')) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn null;\n\t}\n\n\tconst { _id: rid, departmentId: department } = room;\n\tconst inquiry = LivechatInquiry.findOneByRoomId(rid, { fields: { _id: 1, status: 1 } });\n\tif (!inquiry) {\n\t\treturn null;\n\t}\n\n\tconst { _id, status } = inquiry;\n\tif (status !== 'queued') {\n\t\treturn null;\n\t}\n\n\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({ _id, department });\n\n\tif (!inq) {\n\t\treturn null;\n\t}\n\n\treturn normalizeQueueInfo(inq);\n};\n"]},"sourceType":"module","hash":"350895bae6db47c74ec160362a77b892984bfdb3"}
