{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/room.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/room.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/room.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/room.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/room.js"}},"code":"const _excluded = [\"token\", \"rid\", \"agentId\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet rcSettings;\nmodule.link(\"../../../../settings\", {\n  settings(v) {\n    rcSettings = v;\n  }\n\n}, 4);\nlet Messages, LivechatRooms;\nmodule.link(\"../../../../models\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  }\n\n}, 5);\nlet API;\nmodule.link(\"../../../../api/server\", {\n  API(v) {\n    API = v;\n  }\n\n}, 6);\nlet findGuest, findRoom, getRoom, settings, findAgent, onCheckRoomParams;\nmodule.link(\"../lib/livechat\", {\n  findGuest(v) {\n    findGuest = v;\n  },\n\n  findRoom(v) {\n    findRoom = v;\n  },\n\n  getRoom(v) {\n    getRoom = v;\n  },\n\n  settings(v) {\n    settings = v;\n  },\n\n  findAgent(v) {\n    findAgent = v;\n  },\n\n  onCheckRoomParams(v) {\n    onCheckRoomParams = v;\n  }\n\n}, 7);\nlet Livechat;\nmodule.link(\"../../lib/Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 8);\nlet normalizeTransferredByData;\nmodule.link(\"../../lib/Helper\", {\n  normalizeTransferredByData(v) {\n    normalizeTransferredByData = v;\n  }\n\n}, 9);\nlet findVisitorInfo;\nmodule.link(\"../lib/visitors\", {\n  findVisitorInfo(v) {\n    findVisitorInfo = v;\n  }\n\n}, 10);\nlet OmnichannelSourceType;\nmodule.link(\"../../../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 11);\nAPI.v1.addRoute('livechat/room', {\n  get() {\n    const defaultCheckParams = {\n      token: String,\n      rid: Match.Maybe(String),\n      agentId: Match.Maybe(String)\n    };\n    const extraCheckParams = onCheckRoomParams(defaultCheckParams);\n    check(this.queryParams, extraCheckParams);\n\n    const _this$queryParams = this.queryParams,\n          {\n      token,\n      rid: roomId,\n      agentId\n    } = _this$queryParams,\n          extraParams = _objectWithoutProperties(_this$queryParams, _excluded);\n\n    const guest = findGuest(token);\n\n    if (!guest) {\n      throw new Meteor.Error('invalid-token');\n    }\n\n    let room;\n\n    if (!roomId) {\n      room = LivechatRooms.findOneOpenByVisitorToken(token, {});\n\n      if (room) {\n        return API.v1.success({\n          room,\n          newRoom: false\n        });\n      }\n\n      let agent;\n      const agentObj = agentId && findAgent(agentId);\n\n      if (agentObj) {\n        const {\n          username\n        } = agentObj;\n        agent = {\n          agentId,\n          username\n        };\n      }\n\n      const rid = Random.id();\n      const roomInfo = {\n        source: {\n          type: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API\n        }\n      };\n      room = Promise.await(getRoom({\n        guest,\n        rid,\n        agent,\n        roomInfo,\n        extraParams\n      }));\n      return API.v1.success(room);\n    }\n\n    room = LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});\n\n    if (!room) {\n      throw new Meteor.Error('invalid-room');\n    }\n\n    return API.v1.success({\n      room,\n      newRoom: false\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/room.close', {\n  post() {\n    try {\n      check(this.bodyParams, {\n        rid: String,\n        token: String\n      });\n      const {\n        rid,\n        token\n      } = this.bodyParams;\n      const visitor = findGuest(token);\n\n      if (!visitor) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      if (!room.open) {\n        throw new Meteor.Error('room-closed');\n      }\n\n      const language = rcSettings.get('Language') || 'en';\n\n      const comment = TAPi18n.__('Closed_by_visitor', {\n        lng: language\n      });\n\n      if (!Livechat.closeRoom({\n        visitor,\n        room,\n        comment\n      })) {\n        return API.v1.failure();\n      }\n\n      return API.v1.success({\n        rid,\n        comment\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/room.transfer', {\n  post() {\n    try {\n      check(this.bodyParams, {\n        rid: String,\n        token: String,\n        department: String\n      });\n      const {\n        rid,\n        token,\n        department\n      } = this.bodyParams;\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      let room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      } // update visited page history to not expire\n\n\n      Messages.keepHistoryForToken(token);\n      const {\n        _id,\n        username,\n        name\n      } = guest;\n      const transferredBy = normalizeTransferredByData({\n        _id,\n        username,\n        name,\n        userType: 'visitor'\n      }, room);\n\n      if (!Promise.await(Livechat.transfer(room, guest, {\n        roomId: rid,\n        departmentId: department,\n        transferredBy\n      }))) {\n        return API.v1.failure();\n      }\n\n      room = findRoom(token, rid);\n      return API.v1.success({\n        room\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/room.survey', {\n  post() {\n    try {\n      check(this.bodyParams, {\n        rid: String,\n        token: String,\n        data: [Match.ObjectIncluding({\n          name: String,\n          value: String\n        })]\n      });\n      const {\n        rid,\n        token,\n        data\n      } = this.bodyParams;\n      const visitor = findGuest(token);\n\n      if (!visitor) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      const config = Promise.await(settings());\n\n      if (!config.survey || !config.survey.items || !config.survey.values) {\n        throw new Meteor.Error('invalid-livechat-config');\n      }\n\n      const updateData = {};\n\n      for (const item of data) {\n        if (config.survey.items.includes(item.name) && config.survey.values.includes(item.value) || item.name === 'additionalFeedback') {\n          updateData[item.name] = item.value;\n        }\n      }\n\n      if (Object.keys(updateData).length === 0) {\n        throw new Meteor.Error('invalid-data');\n      }\n\n      if (!LivechatRooms.updateSurveyFeedbackById(room._id, updateData)) {\n        return API.v1.failure();\n      }\n\n      return API.v1.success({\n        rid,\n        data: updateData\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/room.forward', {\n  authRequired: true\n}, {\n  post() {\n    API.v1.success(Meteor.runAsUser(this.userId, () => Meteor.call('livechat:transfer', this.bodyParams)));\n  }\n\n});\nAPI.v1.addRoute('livechat/room.visitor', {\n  authRequired: true\n}, {\n  put() {\n    try {\n      check(this.bodyParams, {\n        rid: String,\n        oldVisitorId: String,\n        newVisitorId: String\n      });\n      const {\n        rid,\n        newVisitorId,\n        oldVisitorId\n      } = this.bodyParams;\n      const {\n        visitor\n      } = Promise.await(findVisitorInfo({\n        userId: this.userId,\n        visitorId: newVisitorId\n      }));\n\n      if (!visitor) {\n        throw new Meteor.Error('invalid-visitor');\n      }\n\n      let room = LivechatRooms.findOneById(rid, {\n        _id: 1\n      }); // TODO: check _id\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      const {\n        v: {\n          _id: roomVisitorId\n        } = {}\n      } = room; // TODO: v it will be undefined\n\n      if (roomVisitorId !== oldVisitorId) {\n        throw new Meteor.Error('invalid-room-visitor');\n      }\n\n      room = Livechat.changeRoomVisitor(this.userId, rid, visitor);\n      return API.v1.success({\n        room\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});","map":{"version":3,"sources":["app/livechat/server/api/v1/room.js"],"names":["_objectWithoutProperties","module","link","default","v","Meteor","Match","check","Random","TAPi18n","rcSettings","settings","Messages","LivechatRooms","API","findGuest","findRoom","getRoom","findAgent","onCheckRoomParams","Livechat","normalizeTransferredByData","findVisitorInfo","OmnichannelSourceType","v1","addRoute","get","defaultCheckParams","token","String","rid","Maybe","agentId","extraCheckParams","queryParams","roomId","extraParams","guest","Error","room","findOneOpenByVisitorToken","success","newRoom","agent","agentObj","username","id","roomInfo","source","type","isWidget","WIDGET","Promise","await","findOneOpenByRoomIdAndVisitorToken","post","bodyParams","visitor","open","language","comment","__","lng","closeRoom","failure","e","department","keepHistoryForToken","_id","name","transferredBy","userType","transfer","departmentId","data","ObjectIncluding","value","config","survey","items","values","updateData","item","includes","Object","keys","length","updateSurveyFeedbackById","authRequired","runAsUser","userId","call","put","oldVisitorId","newVisitorId","visitorId","findOneById","roomVisitorId","changeRoomVisitor"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { settings as rcSettings } from '../../../../settings';\nimport { Messages, LivechatRooms } from '../../../../models';\nimport { API } from '../../../../api/server';\nimport { findGuest, findRoom, getRoom, settings, findAgent, onCheckRoomParams } from '../lib/livechat';\nimport { Livechat } from '../../lib/Livechat';\nimport { normalizeTransferredByData } from '../../lib/Helper';\nimport { findVisitorInfo } from '../lib/visitors';\nimport { OmnichannelSourceType } from '../../../../../definition/IRoom';\n\nAPI.v1.addRoute('livechat/room', {\n\tget() {\n\t\tconst defaultCheckParams = {\n\t\t\ttoken: String,\n\t\t\trid: Match.Maybe(String),\n\t\t\tagentId: Match.Maybe(String),\n\t\t};\n\n\t\tconst extraCheckParams = onCheckRoomParams(defaultCheckParams);\n\n\t\tcheck(this.queryParams, extraCheckParams);\n\n\t\tconst { token, rid: roomId, agentId, ...extraParams } = this.queryParams;\n\n\t\tconst guest = findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\tlet room;\n\t\tif (!roomId) {\n\t\t\troom = LivechatRooms.findOneOpenByVisitorToken(token, {});\n\t\t\tif (room) {\n\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t}\n\n\t\t\tlet agent;\n\t\t\tconst agentObj = agentId && findAgent(agentId);\n\t\t\tif (agentObj) {\n\t\t\t\tconst { username } = agentObj;\n\t\t\t\tagent = { agentId, username };\n\t\t\t}\n\n\t\t\tconst rid = Random.id();\n\t\t\tconst roomInfo = {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\troom = Promise.await(getRoom({ guest, rid, agent, roomInfo, extraParams }));\n\t\t\treturn API.v1.success(room);\n\t\t}\n\n\t\troom = LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t}\n\n\t\treturn API.v1.success({ room, newRoom: false });\n\t},\n});\n\nAPI.v1.addRoute('livechat/room.close', {\n\tpost() {\n\t\ttry {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t\ttoken: String,\n\t\t\t});\n\n\t\t\tconst { rid, token } = this.bodyParams;\n\n\t\t\tconst visitor = findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Meteor.Error('room-closed');\n\t\t\t}\n\n\t\t\tconst language = rcSettings.get('Language') || 'en';\n\t\t\tconst comment = TAPi18n.__('Closed_by_visitor', { lng: language });\n\n\t\t\tif (!Livechat.closeRoom({ visitor, room, comment })) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({ rid, comment });\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute('livechat/room.transfer', {\n\tpost() {\n\t\ttry {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t\ttoken: String,\n\t\t\t\tdepartment: String,\n\t\t\t});\n\n\t\t\tconst { rid, token, department } = this.bodyParams;\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tlet room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\t// update visited page history to not expire\n\t\t\tMessages.keepHistoryForToken(token);\n\n\t\t\tconst { _id, username, name } = guest;\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\n\t\t\tif (!Promise.await(Livechat.transfer(room, guest, { roomId: rid, departmentId: department, transferredBy }))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\troom = findRoom(token, rid);\n\t\t\treturn API.v1.success({ room });\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute('livechat/room.survey', {\n\tpost() {\n\t\ttry {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t\ttoken: String,\n\t\t\t\tdata: [\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tname: String,\n\t\t\t\t\t\tvalue: String,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst { rid, token, data } = this.bodyParams;\n\n\t\t\tconst visitor = findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst config = Promise.await(settings());\n\t\t\tif (!config.survey || !config.survey.items || !config.survey.values) {\n\t\t\t\tthrow new Meteor.Error('invalid-livechat-config');\n\t\t\t}\n\n\t\t\tconst updateData = {};\n\t\t\tfor (const item of data) {\n\t\t\t\tif ((config.survey.items.includes(item.name) && config.survey.values.includes(item.value)) || item.name === 'additionalFeedback') {\n\t\t\t\t\tupdateData[item.name] = item.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(updateData).length === 0) {\n\t\t\t\tthrow new Meteor.Error('invalid-data');\n\t\t\t}\n\n\t\t\tif (!LivechatRooms.updateSurveyFeedbackById(room._id, updateData)) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({ rid, data: updateData });\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute(\n\t'livechat/room.forward',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tAPI.v1.success(Meteor.runAsUser(this.userId, () => Meteor.call('livechat:transfer', this.bodyParams)));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.visitor',\n\t{ authRequired: true },\n\t{\n\t\tput() {\n\t\t\ttry {\n\t\t\t\tcheck(this.bodyParams, {\n\t\t\t\t\trid: String,\n\t\t\t\t\toldVisitorId: String,\n\t\t\t\t\tnewVisitorId: String,\n\t\t\t\t});\n\n\t\t\t\tconst { rid, newVisitorId, oldVisitorId } = this.bodyParams;\n\n\t\t\t\tconst { visitor } = Promise.await(findVisitorInfo({ userId: this.userId, visitorId: newVisitorId }));\n\t\t\t\tif (!visitor) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-visitor');\n\t\t\t\t}\n\n\t\t\t\tlet room = LivechatRooms.findOneById(rid, { _id: 1 }); // TODO: check _id\n\t\t\t\tif (!room) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t\t}\n\n\t\t\t\tconst { v: { _id: roomVisitorId } = {} } = room; // TODO: v it will be undefined\n\t\t\t\tif (roomVisitorId !== oldVisitorId) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-room-visitor');\n\t\t\t\t}\n\n\t\t\t\troom = Livechat.changeRoomVisitor(this.userId, rid, visitor);\n\n\t\t\t\treturn API.v1.success({ room });\n\t\t\t} catch (e) {\n\t\t\t\treturn API.v1.failure(e);\n\t\t\t}\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"09b784e3552c256c31bc3fd512ae3fb513858c4c"}
