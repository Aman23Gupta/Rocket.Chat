{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Contacts.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/Contacts.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Contacts.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Contacts.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/Contacts.js"}},"code":"module.export({\n  Contacts: () => Contacts\n});\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 1);\nlet LivechatVisitors, LivechatCustomField, LivechatRooms, Rooms, LivechatInquiry, Subscriptions;\nmodule.link(\"../../../models\", {\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  LivechatCustomField(v) {\n    LivechatCustomField = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nconst Contacts = {\n  registerContact() {\n    let {\n      token,\n      name,\n      email,\n      phone,\n      username,\n      customFields = {},\n      contactManager = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    check(token, String);\n    let contactId;\n    const updateUser = {\n      $set: {\n        token\n      }\n    };\n    const user = LivechatVisitors.getVisitorByToken(token, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (user) {\n      contactId = user._id;\n    } else {\n      if (!username) {\n        username = LivechatVisitors.getNextVisitorUsername();\n      }\n\n      let existingUser = null;\n\n      if (s.trim(email) !== '' && (existingUser = LivechatVisitors.findOneGuestByEmailAddress(email))) {\n        contactId = existingUser._id;\n      } else {\n        const userData = {\n          username,\n          ts: new Date()\n        };\n        contactId = LivechatVisitors.insert(userData);\n      }\n    }\n\n    updateUser.$set.name = name;\n    updateUser.$set.phone = phone && [{\n      phoneNumber: phone\n    }] || null;\n    updateUser.$set.visitorEmails = email && [{\n      address: email\n    }] || null;\n    const allowedCF = LivechatCustomField.find({\n      scope: 'visitor'\n    }).map(_ref => {\n      let {\n        _id\n      } = _ref;\n      return _id;\n    });\n    const livechatData = Object.keys(customFields).filter(key => allowedCF.includes(key) && customFields[key] !== '' && customFields[key] !== undefined).reduce((obj, key) => {\n      obj[key] = customFields[key];\n      return obj;\n    }, {});\n    updateUser.$set.livechatData = livechatData;\n    updateUser.$set.contactManager = (contactManager === null || contactManager === void 0 ? void 0 : contactManager.username) && {\n      username: contactManager.username\n    } || null;\n    LivechatVisitors.updateById(contactId, updateUser);\n    const rooms = LivechatRooms.findByVisitorId(contactId).fetch();\n    (rooms === null || rooms === void 0 ? void 0 : rooms.length) && rooms.forEach(room => {\n      const {\n        _id: rid\n      } = room;\n      Rooms.setFnameById(rid, name) && LivechatInquiry.setNameByRoomId(rid, name) && Subscriptions.updateDisplayNameByRoomId(rid, name);\n    });\n    return contactId;\n  }\n\n};","map":{"version":3,"sources":["app/livechat/server/lib/Contacts.js"],"names":["module","export","Contacts","check","link","v","s","default","LivechatVisitors","LivechatCustomField","LivechatRooms","Rooms","LivechatInquiry","Subscriptions","registerContact","token","name","email","phone","username","customFields","contactManager","String","contactId","updateUser","$set","user","getVisitorByToken","fields","_id","getNextVisitorUsername","existingUser","trim","findOneGuestByEmailAddress","userData","ts","Date","insert","phoneNumber","visitorEmails","address","allowedCF","find","scope","map","livechatData","Object","keys","filter","key","includes","undefined","reduce","obj","updateById","rooms","findByVisitorId","fetch","length","forEach","room","rid","setFnameById","setNameByRoomId","updateDisplayNameByRoomId"],"mappings":"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","sourcesContent":["import { check } from 'meteor/check';\nimport s from 'underscore.string';\n\nimport { LivechatVisitors, LivechatCustomField, LivechatRooms, Rooms, LivechatInquiry, Subscriptions } from '../../../models';\n\nexport const Contacts = {\n\tregisterContact({ token, name, email, phone, username, customFields = {}, contactManager = {} } = {}) {\n\t\tcheck(token, String);\n\n\t\tlet contactId;\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\ttoken,\n\t\t\t},\n\t\t};\n\n\t\tconst user = LivechatVisitors.getVisitorByToken(token, { fields: { _id: 1 } });\n\n\t\tif (user) {\n\t\t\tcontactId = user._id;\n\t\t} else {\n\t\t\tif (!username) {\n\t\t\t\tusername = LivechatVisitors.getNextVisitorUsername();\n\t\t\t}\n\n\t\t\tlet existingUser = null;\n\n\t\t\tif (s.trim(email) !== '' && (existingUser = LivechatVisitors.findOneGuestByEmailAddress(email))) {\n\t\t\t\tcontactId = existingUser._id;\n\t\t\t} else {\n\t\t\t\tconst userData = {\n\t\t\t\t\tusername,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t};\n\n\t\t\t\tcontactId = LivechatVisitors.insert(userData);\n\t\t\t}\n\t\t}\n\n\t\tupdateUser.$set.name = name;\n\t\tupdateUser.$set.phone = (phone && [{ phoneNumber: phone }]) || null;\n\t\tupdateUser.$set.visitorEmails = (email && [{ address: email }]) || null;\n\n\t\tconst allowedCF = LivechatCustomField.find({ scope: 'visitor' }).map(({ _id }) => _id);\n\n\t\tconst livechatData = Object.keys(customFields)\n\t\t\t.filter((key) => allowedCF.includes(key) && customFields[key] !== '' && customFields[key] !== undefined)\n\t\t\t.reduce((obj, key) => {\n\t\t\t\tobj[key] = customFields[key];\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\n\t\tupdateUser.$set.livechatData = livechatData;\n\t\tupdateUser.$set.contactManager = (contactManager?.username && { username: contactManager.username }) || null;\n\n\t\tLivechatVisitors.updateById(contactId, updateUser);\n\n\t\tconst rooms = LivechatRooms.findByVisitorId(contactId).fetch();\n\n\t\trooms?.length &&\n\t\t\trooms.forEach((room) => {\n\t\t\t\tconst { _id: rid } = room;\n\t\t\t\tRooms.setFnameById(rid, name) && LivechatInquiry.setNameByRoomId(rid, name) && Subscriptions.updateDisplayNameByRoomId(rid, name);\n\t\t\t});\n\n\t\treturn contactId;\n\t},\n};\n"]},"sourceType":"module","hash":"e7390dec0c53dfac49498cffa4eb48cb103fd273"}
