{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/index.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/chatpal-search/server/provider/index.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/index.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/chatpal-search/server/provider/index.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  default: () => Index\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet ChatpalLogger;\nmodule.link(\"../utils/logger\", {\n  default(v) {\n    ChatpalLogger = v;\n  }\n\n}, 3);\nlet Rooms, Messages;\nmodule.link(\"../../../models\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 4);\n\n/**\n * Enables HTTP functions on Chatpal Backend\n */\nclass Backend {\n  constructor(options) {\n    this._options = options;\n  }\n  /**\n   * index a set of Sorl documents\n   * @param docs\n   * @returns {boolean}\n   */\n\n\n  index(docs) {\n    const options = _objectSpread({\n      data: docs,\n      params: {\n        language: this._options.language\n      }\n    }, this._options.httpOptions);\n\n    try {\n      const response = HTTP.call('POST', \"\".concat(this._options.baseurl).concat(this._options.updatepath), options);\n\n      if (response.statusCode >= 200 && response.statusCode < 300) {\n        ChatpalLogger.debug({\n          msg: \"indexed \".concat(docs.length, \" documents\"),\n          data: response.data\n        });\n      } else {\n        throw new Error(response);\n      }\n    } catch (e) {\n      // TODO how to deal with this\n      ChatpalLogger.error({\n        msg: 'indexing failed',\n        err: e\n      });\n      return false;\n    }\n  }\n  /**\n   * remove an entry by type and id\n   * @param type\n   * @param id\n   * @returns {boolean}\n   */\n\n\n  remove(type, id) {\n    ChatpalLogger.debug(\"Remove \".concat(type, \"(\").concat(id, \") from Index\"));\n\n    const options = _objectSpread({\n      data: {\n        delete: {\n          query: \"id:\".concat(id, \" AND type:\").concat(type)\n        },\n        commit: {}\n      }\n    }, this._options.httpOptions);\n\n    try {\n      const response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n      return response.statusCode >= 200 && response.statusCode < 300;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  count(type) {\n    return this.query({\n      type,\n      rows: 0,\n      text: '*'\n    })[type].numFound;\n  }\n  /**\n   * query with params\n   * @param params\n   * @param callback\n   */\n\n\n  query(params, callback) {\n    const options = _objectSpread({\n      params\n    }, this._options.httpOptions);\n\n    ChatpalLogger.debug({\n      query: options\n    });\n\n    try {\n      if (callback) {\n        HTTP.call('POST', this._options.baseurl + this._options.searchpath, options, (err, result) => {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(undefined, result.data);\n        });\n      } else {\n        const response = HTTP.call('POST', this._options.baseurl + this._options.searchpath, options);\n\n        if (response.statusCode >= 200 && response.statusCode < 300) {\n          return response.data;\n        }\n\n        throw new Error(response);\n      }\n    } catch (e) {\n      ChatpalLogger.error({\n        msg: 'query failed',\n        err: e\n      });\n      throw e;\n    }\n  }\n\n  suggest(params, callback) {\n    const options = _objectSpread({\n      params\n    }, this._options.httpOptions);\n\n    HTTP.call('POST', this._options.baseurl + this._options.suggestionpath, options, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      try {\n        callback(undefined, result.data.suggestion);\n      } catch (e) {\n        callback(e);\n      }\n    });\n  }\n\n  clear() {\n    ChatpalLogger.debug('Clear Index');\n\n    const options = _objectSpread({\n      data: {\n        delete: {\n          query: '*:*'\n        },\n        commit: {}\n      }\n    }, this._options.httpOptions);\n\n    try {\n      const response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n      return response.statusCode >= 200 && response.statusCode < 300;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * statically ping with configuration\n   * @param options\n   * @returns {boolean}\n   */\n\n\n  static ping(config) {\n    const options = _objectSpread({\n      params: {\n        stats: true\n      }\n    }, config.httpOptions);\n\n    try {\n      const response = HTTP.call('GET', config.baseurl + config.pingpath, options);\n\n      if (response.statusCode >= 200 && response.statusCode < 300) {\n        return response.data.stats;\n      }\n\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n}\n/**\n * Enabled batch indexing\n */\n\n\nclass BatchIndexer {\n  constructor(size, func) {\n    this._size = size;\n    this._func = func;\n\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n\n    this._rest = rest;\n    this._values = [];\n  }\n\n  add(value) {\n    this._values.push(value);\n\n    if (this._values.length === this._size) {\n      this.flush();\n    }\n  }\n\n  flush() {\n    this._func(this._values, this._rest); // TODO if flush does not work\n\n\n    this._values = [];\n  }\n\n}\n/**\n * Provides index functions to chatpal provider\n */\n\n\nclass Index {\n  /**\n   * Creates Index Stub\n   * @param options\n   * @param clear if a complete reindex should be done\n   */\n  constructor(options, clear, date) {\n    this._id = Random.id();\n    this._backend = new Backend(options);\n    this._options = options;\n    this._batchIndexer = new BatchIndexer(this._options.batchSize || 100, values => this._backend.index(values));\n\n    this._bootstrap(clear, date);\n  }\n  /**\n   * prepare solr documents\n   * @param type\n   * @param doc\n   * @returns {*}\n   * @private\n   */\n\n\n  _getIndexDocument(type, doc) {\n    switch (type) {\n      case 'message':\n        return {\n          id: doc._id,\n          rid: doc.rid,\n          user: doc.u._id,\n          created: doc.ts,\n          updated: doc._updatedAt,\n          text: doc.msg,\n          type\n        };\n\n      case 'room':\n        return {\n          id: doc._id,\n          rid: doc._id,\n          created: doc.createdAt,\n          updated: doc.lm ? doc.lm : doc._updatedAt,\n          type,\n          room_name: doc.name,\n          room_announcement: doc.announcement,\n          room_description: doc.description,\n          room_topic: doc.topic\n        };\n\n      case 'user':\n        return {\n          id: doc._id,\n          created: doc.createdAt,\n          updated: doc._updatedAt,\n          type,\n          user_username: doc.username,\n          user_name: doc.name,\n          user_email: doc.emails && doc.emails.map(e => e.address)\n        };\n\n      default:\n        throw new Error(\"Cannot index type '\".concat(type, \"'\"));\n    }\n  }\n  /**\n   * return true if there are messages in the databases which has been created before *date*\n   * @param date\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _existsDataOlderThan(date) {\n    return Messages.model.find({\n      ts: {\n        $lt: new Date(date)\n      },\n      t: {\n        $exists: false\n      }\n    }, {\n      limit: 1\n    }).fetch().length > 0;\n  }\n\n  _doesRoomCountDiffer() {\n    return Rooms.find({\n      t: {\n        $ne: 'd'\n      }\n    }).count() !== this._backend.count('room');\n  }\n\n  _doesUserCountDiffer() {\n    return Meteor.users.find({\n      active: true\n    }).count() !== this._backend.count('user');\n  }\n  /**\n   * Index users by using a database cursor\n   */\n\n\n  _indexUsers() {\n    const cursor = Meteor.users.find({\n      active: true\n    });\n    ChatpalLogger.debug(\"Start indexing \".concat(cursor.count(), \" users\"));\n    cursor.forEach(user => {\n      this.indexDoc('user', user, false);\n    });\n    ChatpalLogger.info(\"Users indexed successfully (index-id: \".concat(this._id, \")\"));\n  }\n  /**\n   * Index rooms by database cursor\n   * @private\n   */\n\n\n  _indexRooms() {\n    const cursor = Rooms.find({\n      t: {\n        $ne: 'd'\n      }\n    });\n    ChatpalLogger.debug(\"Start indexing \".concat(cursor.count(), \" rooms\"));\n    cursor.forEach(room => {\n      this.indexDoc('room', room, false);\n    });\n    ChatpalLogger.info(\"Rooms indexed successfully (index-id: \".concat(this._id, \")\"));\n  }\n\n  _indexMessages(date, gap) {\n    const start = new Date(date - gap);\n    const end = new Date(date);\n    const cursor = Messages.model.find({\n      ts: {\n        $gt: start,\n        $lt: end\n      },\n      t: {\n        $exists: false\n      }\n    });\n    ChatpalLogger.debug(\"Start indexing \".concat(cursor.count(), \" messages between \").concat(start.toString(), \" and \").concat(end.toString()));\n    cursor.forEach(message => {\n      this.indexDoc('message', message, false);\n    });\n    ChatpalLogger.info(\"Messages between \".concat(start.toString(), \" and \").concat(end.toString(), \" indexed successfully (index-id: \").concat(this._id, \")\"));\n    return start.getTime();\n  }\n\n  _run(date, resolve, reject) {\n    this._running = true;\n\n    if (this._existsDataOlderThan(date) && !this._break) {\n      Meteor.setTimeout(() => {\n        date = this._indexMessages(date, (this._options.windowSize || 24) * 3600000);\n\n        this._run(date, resolve, reject);\n      }, this._options.timeout || 1000);\n    } else if (this._break) {\n      ChatpalLogger.info(\"stopped bootstrap (index-id: \".concat(this._id, \")\"));\n\n      this._batchIndexer.flush();\n\n      this._running = false;\n      resolve();\n    } else {\n      ChatpalLogger.info(\"No messages older than already indexed date \".concat(new Date(date).toString()));\n\n      if (this._doesUserCountDiffer() && !this._break) {\n        this._indexUsers();\n      } else {\n        ChatpalLogger.info('Users already indexed');\n      }\n\n      if (this._doesRoomCountDiffer() && !this._break) {\n        this._indexRooms();\n      } else {\n        ChatpalLogger.info('Rooms already indexed');\n      }\n\n      this._batchIndexer.flush();\n\n      ChatpalLogger.info(\"finished bootstrap (index-id: \".concat(this._id, \")\"));\n      this._running = false;\n      resolve();\n    }\n  }\n\n  _bootstrap(clear, date) {\n    ChatpalLogger.info('Start bootstrapping');\n    return new Promise((resolve, reject) => {\n      if (clear) {\n        this._backend.clear();\n\n        date = new Date().getTime();\n      }\n\n      this._run(date, resolve, reject);\n    });\n  }\n\n  static ping(options) {\n    return Backend.ping(options);\n  }\n\n  stop() {\n    this._break = true;\n  }\n\n  reindex() {\n    if (!this._running) {\n      this._bootstrap(true);\n    }\n  }\n\n  indexDoc(type, doc) {\n    let flush = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    this._batchIndexer.add(this._getIndexDocument(type, doc));\n\n    if (flush) {\n      this._batchIndexer.flush();\n    }\n\n    return true;\n  }\n\n  removeDoc(type, id) {\n    return this._backend.remove(type, id);\n  }\n\n  query(text, language, acl, type, start, rows, callback) {\n    let params = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n\n    this._backend.query(_objectSpread({\n      text,\n      language,\n      acl,\n      type,\n      start,\n      rows\n    }, params), callback);\n  }\n\n  suggest(text, language, acl, type, callback) {\n    this._backend.suggest({\n      text,\n      language,\n      acl,\n      type\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["app/chatpal-search/server/provider/index.js"],"names":["_objectSpread","module","link","default","v","export","Index","Meteor","HTTP","Random","ChatpalLogger","Rooms","Messages","Backend","constructor","options","_options","index","docs","data","params","language","httpOptions","response","call","baseurl","updatepath","statusCode","debug","msg","length","Error","e","error","err","remove","type","id","delete","query","commit","clearpath","count","rows","text","numFound","callback","searchpath","result","undefined","suggest","suggestionpath","suggestion","clear","ping","config","stats","pingpath","BatchIndexer","size","func","_size","_func","rest","_rest","_values","add","value","push","flush","date","_id","_backend","_batchIndexer","batchSize","values","_bootstrap","_getIndexDocument","doc","rid","user","u","created","ts","updated","_updatedAt","createdAt","lm","room_name","name","room_announcement","announcement","room_description","description","room_topic","topic","user_username","username","user_name","user_email","emails","map","address","_existsDataOlderThan","model","find","$lt","Date","t","$exists","limit","fetch","_doesRoomCountDiffer","$ne","_doesUserCountDiffer","users","active","_indexUsers","cursor","forEach","indexDoc","info","_indexRooms","room","_indexMessages","gap","start","end","$gt","toString","message","getTime","_run","resolve","reject","_running","_break","setTimeout","windowSize","timeout","Promise","stop","reindex","removeDoc","acl"],"mappings":"AAAA,IAAIA,aAAJ;;AAAkBC,MAAM,CAACC,IAAP,CAAY,sCAAZ,EAAmD;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,aAAa,GAACI,CAAd;AAAgB;;AAA5B,CAAnD,EAAiF,CAAjF;AAAlBH,MAAM,CAACI,MAAP,CAAc;AAACF,EAAAA,OAAO,EAAC,MAAIG;AAAb,CAAd;AAAmC,IAAIC,MAAJ;AAAWN,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACK,EAAAA,MAAM,CAACH,CAAD,EAAG;AAACG,IAAAA,MAAM,GAACH,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAII,IAAJ;AAASP,MAAM,CAACC,IAAP,CAAY,aAAZ,EAA0B;AAACM,EAAAA,IAAI,CAACJ,CAAD,EAAG;AAACI,IAAAA,IAAI,GAACJ,CAAL;AAAO;;AAAhB,CAA1B,EAA4C,CAA5C;AAA+C,IAAIK,MAAJ;AAAWR,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACO,EAAAA,MAAM,CAACL,CAAD,EAAG;AAACK,IAAAA,MAAM,GAACL,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIM,aAAJ;AAAkBT,MAAM,CAACC,IAAP,CAAY,iBAAZ,EAA8B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACM,IAAAA,aAAa,GAACN,CAAd;AAAgB;;AAA5B,CAA9B,EAA4D,CAA5D;AAA+D,IAAIO,KAAJ,EAAUC,QAAV;AAAmBX,MAAM,CAACC,IAAP,CAAY,iBAAZ,EAA8B;AAACS,EAAAA,KAAK,CAACP,CAAD,EAAG;AAACO,IAAAA,KAAK,GAACP,CAAN;AAAQ,GAAlB;;AAAmBQ,EAAAA,QAAQ,CAACR,CAAD,EAAG;AAACQ,IAAAA,QAAQ,GAACR,CAAT;AAAW;;AAA1C,CAA9B,EAA0E,CAA1E;;AAO/T;AACA;AACA;AACA,MAAMS,OAAN,CAAc;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKC,QAAL,GAAgBD,OAAhB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCE,EAAAA,KAAK,CAACC,IAAD,EAAO;AACX,UAAMH,OAAO;AACZI,MAAAA,IAAI,EAAED,IADM;AAEZE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAE,KAAKL,QAAL,CAAcK;AAA1B;AAFI,OAGT,KAAKL,QAAL,CAAcM,WAHL,CAAb;;AAMA,QAAI;AACH,YAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAL,CAAU,MAAV,YAAqB,KAAKR,QAAL,CAAcS,OAAnC,SAA6C,KAAKT,QAAL,CAAcU,UAA3D,GAAyEX,OAAzE,CAAjB;;AAEA,UAAIQ,QAAQ,CAACI,UAAT,IAAuB,GAAvB,IAA8BJ,QAAQ,CAACI,UAAT,GAAsB,GAAxD,EAA6D;AAC5DjB,QAAAA,aAAa,CAACkB,KAAd,CAAoB;AAAEC,UAAAA,GAAG,oBAAaX,IAAI,CAACY,MAAlB,eAAL;AAA2CX,UAAAA,IAAI,EAAEI,QAAQ,CAACJ;AAA1D,SAApB;AACA,OAFD,MAEO;AACN,cAAM,IAAIY,KAAJ,CAAUR,QAAV,CAAN;AACA;AACD,KARD,CAQE,OAAOS,CAAP,EAAU;AACX;AACAtB,MAAAA,aAAa,CAACuB,KAAd,CAAoB;AAAEJ,QAAAA,GAAG,EAAE,iBAAP;AAA0BK,QAAAA,GAAG,EAAEF;AAA/B,OAApB;AACA,aAAO,KAAP;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,MAAM,CAACC,IAAD,EAAOC,EAAP,EAAW;AAChB3B,IAAAA,aAAa,CAACkB,KAAd,kBAA8BQ,IAA9B,cAAsCC,EAAtC;;AAEA,UAAMtB,OAAO;AACZI,MAAAA,IAAI,EAAE;AACLmB,QAAAA,MAAM,EAAE;AACPC,UAAAA,KAAK,eAAQF,EAAR,uBAAuBD,IAAvB;AADE,SADH;AAILI,QAAAA,MAAM,EAAE;AAJH;AADM,OAOT,KAAKxB,QAAL,CAAcM,WAPL,CAAb;;AAUA,QAAI;AACH,YAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAL,CAAU,MAAV,EAAkB,KAAKR,QAAL,CAAcS,OAAd,GAAwB,KAAKT,QAAL,CAAcyB,SAAxD,EAAmE1B,OAAnE,CAAjB;AAEA,aAAOQ,QAAQ,CAACI,UAAT,IAAuB,GAAvB,IAA8BJ,QAAQ,CAACI,UAAT,GAAsB,GAA3D;AACA,KAJD,CAIE,OAAOK,CAAP,EAAU;AACX,aAAO,KAAP;AACA;AACD;;AAEDU,EAAAA,KAAK,CAACN,IAAD,EAAO;AACX,WAAO,KAAKG,KAAL,CAAW;AAAEH,MAAAA,IAAF;AAAQO,MAAAA,IAAI,EAAE,CAAd;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAX,EAAyCR,IAAzC,EAA+CS,QAAtD;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCN,EAAAA,KAAK,CAACnB,MAAD,EAAS0B,QAAT,EAAmB;AACvB,UAAM/B,OAAO;AACZK,MAAAA;AADY,OAET,KAAKJ,QAAL,CAAcM,WAFL,CAAb;;AAKAZ,IAAAA,aAAa,CAACkB,KAAd,CAAoB;AAAEW,MAAAA,KAAK,EAAExB;AAAT,KAApB;;AAEA,QAAI;AACH,UAAI+B,QAAJ,EAAc;AACbtC,QAAAA,IAAI,CAACgB,IAAL,CAAU,MAAV,EAAkB,KAAKR,QAAL,CAAcS,OAAd,GAAwB,KAAKT,QAAL,CAAc+B,UAAxD,EAAoEhC,OAApE,EAA6E,CAACmB,GAAD,EAAMc,MAAN,KAAiB;AAC7F,cAAId,GAAJ,EAAS;AACR,mBAAOY,QAAQ,CAACZ,GAAD,CAAf;AACA;;AAEDY,UAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAM,CAAC7B,IAAnB,CAAR;AACA,SAND;AAOA,OARD,MAQO;AACN,cAAMI,QAAQ,GAAGf,IAAI,CAACgB,IAAL,CAAU,MAAV,EAAkB,KAAKR,QAAL,CAAcS,OAAd,GAAwB,KAAKT,QAAL,CAAc+B,UAAxD,EAAoEhC,OAApE,CAAjB;;AAEA,YAAIQ,QAAQ,CAACI,UAAT,IAAuB,GAAvB,IAA8BJ,QAAQ,CAACI,UAAT,GAAsB,GAAxD,EAA6D;AAC5D,iBAAOJ,QAAQ,CAACJ,IAAhB;AACA;;AACD,cAAM,IAAIY,KAAJ,CAAUR,QAAV,CAAN;AACA;AACD,KAjBD,CAiBE,OAAOS,CAAP,EAAU;AACXtB,MAAAA,aAAa,CAACuB,KAAd,CAAoB;AAAEJ,QAAAA,GAAG,EAAE,cAAP;AAAuBK,QAAAA,GAAG,EAAEF;AAA5B,OAApB;AACA,YAAMA,CAAN;AACA;AACD;;AAEDkB,EAAAA,OAAO,CAAC9B,MAAD,EAAS0B,QAAT,EAAmB;AACzB,UAAM/B,OAAO;AACZK,MAAAA;AADY,OAET,KAAKJ,QAAL,CAAcM,WAFL,CAAb;;AAKAd,IAAAA,IAAI,CAACgB,IAAL,CAAU,MAAV,EAAkB,KAAKR,QAAL,CAAcS,OAAd,GAAwB,KAAKT,QAAL,CAAcmC,cAAxD,EAAwEpC,OAAxE,EAAiF,CAACmB,GAAD,EAAMc,MAAN,KAAiB;AACjG,UAAId,GAAJ,EAAS;AACR,eAAOY,QAAQ,CAACZ,GAAD,CAAf;AACA;;AAED,UAAI;AACHY,QAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAM,CAAC7B,IAAP,CAAYiC,UAAxB,CAAR;AACA,OAFD,CAEE,OAAOpB,CAAP,EAAU;AACXc,QAAAA,QAAQ,CAACd,CAAD,CAAR;AACA;AACD,KAVD;AAWA;;AAEDqB,EAAAA,KAAK,GAAG;AACP3C,IAAAA,aAAa,CAACkB,KAAd,CAAoB,aAApB;;AAEA,UAAMb,OAAO;AACZI,MAAAA,IAAI,EAAE;AACLmB,QAAAA,MAAM,EAAE;AACPC,UAAAA,KAAK,EAAE;AADA,SADH;AAILC,QAAAA,MAAM,EAAE;AAJH;AADM,OAOT,KAAKxB,QAAL,CAAcM,WAPL,CAAb;;AAUA,QAAI;AACH,YAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAL,CAAU,MAAV,EAAkB,KAAKR,QAAL,CAAcS,OAAd,GAAwB,KAAKT,QAAL,CAAcyB,SAAxD,EAAmE1B,OAAnE,CAAjB;AAEA,aAAOQ,QAAQ,CAACI,UAAT,IAAuB,GAAvB,IAA8BJ,QAAQ,CAACI,UAAT,GAAsB,GAA3D;AACA,KAJD,CAIE,OAAOK,CAAP,EAAU;AACX,aAAO,KAAP;AACA;AACD;AAED;AACD;AACA;AACA;AACA;;;AACY,SAAJsB,IAAI,CAACC,MAAD,EAAS;AACnB,UAAMxC,OAAO;AACZK,MAAAA,MAAM,EAAE;AACPoC,QAAAA,KAAK,EAAE;AADA;AADI,OAITD,MAAM,CAACjC,WAJE,CAAb;;AAOA,QAAI;AACH,YAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAL,CAAU,KAAV,EAAiB+B,MAAM,CAAC9B,OAAP,GAAiB8B,MAAM,CAACE,QAAzC,EAAmD1C,OAAnD,CAAjB;;AAEA,UAAIQ,QAAQ,CAACI,UAAT,IAAuB,GAAvB,IAA8BJ,QAAQ,CAACI,UAAT,GAAsB,GAAxD,EAA6D;AAC5D,eAAOJ,QAAQ,CAACJ,IAAT,CAAcqC,KAArB;AACA;;AACD,aAAO,KAAP;AACA,KAPD,CAOE,OAAOxB,CAAP,EAAU;AACX,aAAO,KAAP;AACA;AACD;;AApKY;AAuKd;AACA;AACA;;;AACA,MAAM0B,YAAN,CAAmB;AAClB5C,EAAAA,WAAW,CAAC6C,IAAD,EAAOC,IAAP,EAAsB;AAChC,SAAKC,KAAL,GAAaF,IAAb;AACA,SAAKG,KAAL,GAAaF,IAAb;;AAFgC,sCAANG,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAGhC,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,OAAL,GAAe,EAAf;AACA;;AAEDC,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACV,SAAKF,OAAL,CAAaG,IAAb,CAAkBD,KAAlB;;AACA,QAAI,KAAKF,OAAL,CAAanC,MAAb,KAAwB,KAAK+B,KAAjC,EAAwC;AACvC,WAAKQ,KAAL;AACA;AACD;;AAEDA,EAAAA,KAAK,GAAG;AACP,SAAKP,KAAL,CAAW,KAAKG,OAAhB,EAAyB,KAAKD,KAA9B,EADO,CAC+B;;;AACtC,SAAKC,OAAL,GAAe,EAAf;AACA;;AAlBiB;AAqBnB;AACA;AACA;;;AACe,MAAM3D,KAAN,CAAY;AAC1B;AACD;AACA;AACA;AACA;AACCQ,EAAAA,WAAW,CAACC,OAAD,EAAUsC,KAAV,EAAiBiB,IAAjB,EAAuB;AACjC,SAAKC,GAAL,GAAW9D,MAAM,CAAC4B,EAAP,EAAX;AAEA,SAAKmC,QAAL,GAAgB,IAAI3D,OAAJ,CAAYE,OAAZ,CAAhB;AAEA,SAAKC,QAAL,GAAgBD,OAAhB;AAEA,SAAK0D,aAAL,GAAqB,IAAIf,YAAJ,CAAiB,KAAK1C,QAAL,CAAc0D,SAAd,IAA2B,GAA5C,EAAkDC,MAAD,IAAY,KAAKH,QAAL,CAAcvD,KAAd,CAAoB0D,MAApB,CAA7D,CAArB;;AAEA,SAAKC,UAAL,CAAgBvB,KAAhB,EAAuBiB,IAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCO,EAAAA,iBAAiB,CAACzC,IAAD,EAAO0C,GAAP,EAAY;AAC5B,YAAQ1C,IAAR;AACC,WAAK,SAAL;AACC,eAAO;AACNC,UAAAA,EAAE,EAAEyC,GAAG,CAACP,GADF;AAENQ,UAAAA,GAAG,EAAED,GAAG,CAACC,GAFH;AAGNC,UAAAA,IAAI,EAAEF,GAAG,CAACG,CAAJ,CAAMV,GAHN;AAINW,UAAAA,OAAO,EAAEJ,GAAG,CAACK,EAJP;AAKNC,UAAAA,OAAO,EAAEN,GAAG,CAACO,UALP;AAMNzC,UAAAA,IAAI,EAAEkC,GAAG,CAACjD,GANJ;AAONO,UAAAA;AAPM,SAAP;;AASD,WAAK,MAAL;AACC,eAAO;AACNC,UAAAA,EAAE,EAAEyC,GAAG,CAACP,GADF;AAENQ,UAAAA,GAAG,EAAED,GAAG,CAACP,GAFH;AAGNW,UAAAA,OAAO,EAAEJ,GAAG,CAACQ,SAHP;AAINF,UAAAA,OAAO,EAAEN,GAAG,CAACS,EAAJ,GAAST,GAAG,CAACS,EAAb,GAAkBT,GAAG,CAACO,UAJzB;AAKNjD,UAAAA,IALM;AAMNoD,UAAAA,SAAS,EAAEV,GAAG,CAACW,IANT;AAONC,UAAAA,iBAAiB,EAAEZ,GAAG,CAACa,YAPjB;AAQNC,UAAAA,gBAAgB,EAAEd,GAAG,CAACe,WARhB;AASNC,UAAAA,UAAU,EAAEhB,GAAG,CAACiB;AATV,SAAP;;AAWD,WAAK,MAAL;AACC,eAAO;AACN1D,UAAAA,EAAE,EAAEyC,GAAG,CAACP,GADF;AAENW,UAAAA,OAAO,EAAEJ,GAAG,CAACQ,SAFP;AAGNF,UAAAA,OAAO,EAAEN,GAAG,CAACO,UAHP;AAINjD,UAAAA,IAJM;AAKN4D,UAAAA,aAAa,EAAElB,GAAG,CAACmB,QALb;AAMNC,UAAAA,SAAS,EAAEpB,GAAG,CAACW,IANT;AAONU,UAAAA,UAAU,EAAErB,GAAG,CAACsB,MAAJ,IAActB,GAAG,CAACsB,MAAJ,CAAWC,GAAX,CAAgBrE,CAAD,IAAOA,CAAC,CAACsE,OAAxB;AAPpB,SAAP;;AASD;AACC,cAAM,IAAIvE,KAAJ,8BAAgCK,IAAhC,OAAN;AAlCF;AAoCA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCmE,EAAAA,oBAAoB,CAACjC,IAAD,EAAO;AAC1B,WAAO1D,QAAQ,CAAC4F,KAAT,CAAeC,IAAf,CAAoB;AAAEtB,MAAAA,EAAE,EAAE;AAAEuB,QAAAA,GAAG,EAAE,IAAIC,IAAJ,CAASrC,IAAT;AAAP,OAAN;AAA+BsC,MAAAA,CAAC,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAlC,KAApB,EAA4E;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5E,EAA0FC,KAA1F,GAAkGjF,MAAlG,GAA2G,CAAlH;AACA;;AAEDkF,EAAAA,oBAAoB,GAAG;AACtB,WAAOrG,KAAK,CAAC8F,IAAN,CAAW;AAAEG,MAAAA,CAAC,EAAE;AAAEK,QAAAA,GAAG,EAAE;AAAP;AAAL,KAAX,EAAgCvE,KAAhC,OAA4C,KAAK8B,QAAL,CAAc9B,KAAd,CAAoB,MAApB,CAAnD;AACA;;AAEDwE,EAAAA,oBAAoB,GAAG;AACtB,WAAO3G,MAAM,CAAC4G,KAAP,CAAaV,IAAb,CAAkB;AAAEW,MAAAA,MAAM,EAAE;AAAV,KAAlB,EAAoC1E,KAApC,OAAgD,KAAK8B,QAAL,CAAc9B,KAAd,CAAoB,MAApB,CAAvD;AACA;AAED;AACD;AACA;;;AACC2E,EAAAA,WAAW,GAAG;AACb,UAAMC,MAAM,GAAG/G,MAAM,CAAC4G,KAAP,CAAaV,IAAb,CAAkB;AAAEW,MAAAA,MAAM,EAAE;AAAV,KAAlB,CAAf;AAEA1G,IAAAA,aAAa,CAACkB,KAAd,0BAAsC0F,MAAM,CAAC5E,KAAP,EAAtC;AAEA4E,IAAAA,MAAM,CAACC,OAAP,CAAgBvC,IAAD,IAAU;AACxB,WAAKwC,QAAL,CAAc,MAAd,EAAsBxC,IAAtB,EAA4B,KAA5B;AACA,KAFD;AAIAtE,IAAAA,aAAa,CAAC+G,IAAd,iDAA4D,KAAKlD,GAAjE;AACA;AAED;AACD;AACA;AACA;;;AACCmD,EAAAA,WAAW,GAAG;AACb,UAAMJ,MAAM,GAAG3G,KAAK,CAAC8F,IAAN,CAAW;AAAEG,MAAAA,CAAC,EAAE;AAAEK,QAAAA,GAAG,EAAE;AAAP;AAAL,KAAX,CAAf;AAEAvG,IAAAA,aAAa,CAACkB,KAAd,0BAAsC0F,MAAM,CAAC5E,KAAP,EAAtC;AAEA4E,IAAAA,MAAM,CAACC,OAAP,CAAgBI,IAAD,IAAU;AACxB,WAAKH,QAAL,CAAc,MAAd,EAAsBG,IAAtB,EAA4B,KAA5B;AACA,KAFD;AAIAjH,IAAAA,aAAa,CAAC+G,IAAd,iDAA4D,KAAKlD,GAAjE;AACA;;AAEDqD,EAAAA,cAAc,CAACtD,IAAD,EAAOuD,GAAP,EAAY;AACzB,UAAMC,KAAK,GAAG,IAAInB,IAAJ,CAASrC,IAAI,GAAGuD,GAAhB,CAAd;AACA,UAAME,GAAG,GAAG,IAAIpB,IAAJ,CAASrC,IAAT,CAAZ;AAEA,UAAMgD,MAAM,GAAG1G,QAAQ,CAAC4F,KAAT,CAAeC,IAAf,CAAoB;AAAEtB,MAAAA,EAAE,EAAE;AAAE6C,QAAAA,GAAG,EAAEF,KAAP;AAAcpB,QAAAA,GAAG,EAAEqB;AAAnB,OAAN;AAAgCnB,MAAAA,CAAC,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAnC,KAApB,CAAf;AAEAnG,IAAAA,aAAa,CAACkB,KAAd,0BAAsC0F,MAAM,CAAC5E,KAAP,EAAtC,+BAAyEoF,KAAK,CAACG,QAAN,EAAzE,kBAAiGF,GAAG,CAACE,QAAJ,EAAjG;AAEAX,IAAAA,MAAM,CAACC,OAAP,CAAgBW,OAAD,IAAa;AAC3B,WAAKV,QAAL,CAAc,SAAd,EAAyBU,OAAzB,EAAkC,KAAlC;AACA,KAFD;AAIAxH,IAAAA,aAAa,CAAC+G,IAAd,4BAAuCK,KAAK,CAACG,QAAN,EAAvC,kBAA+DF,GAAG,CAACE,QAAJ,EAA/D,8CAAiH,KAAK1D,GAAtH;AAEA,WAAOuD,KAAK,CAACK,OAAN,EAAP;AACA;;AAEDC,EAAAA,IAAI,CAAC9D,IAAD,EAAO+D,OAAP,EAAgBC,MAAhB,EAAwB;AAC3B,SAAKC,QAAL,GAAgB,IAAhB;;AAEA,QAAI,KAAKhC,oBAAL,CAA0BjC,IAA1B,KAAmC,CAAC,KAAKkE,MAA7C,EAAqD;AACpDjI,MAAAA,MAAM,CAACkI,UAAP,CAAkB,MAAM;AACvBnE,QAAAA,IAAI,GAAG,KAAKsD,cAAL,CAAoBtD,IAApB,EAA0B,CAAC,KAAKtD,QAAL,CAAc0H,UAAd,IAA4B,EAA7B,IAAmC,OAA7D,CAAP;;AAEA,aAAKN,IAAL,CAAU9D,IAAV,EAAgB+D,OAAhB,EAAyBC,MAAzB;AACA,OAJD,EAIG,KAAKtH,QAAL,CAAc2H,OAAd,IAAyB,IAJ5B;AAKA,KAND,MAMO,IAAI,KAAKH,MAAT,EAAiB;AACvB9H,MAAAA,aAAa,CAAC+G,IAAd,wCAAmD,KAAKlD,GAAxD;;AAEA,WAAKE,aAAL,CAAmBJ,KAAnB;;AAEA,WAAKkE,QAAL,GAAgB,KAAhB;AAEAF,MAAAA,OAAO;AACP,KARM,MAQA;AACN3H,MAAAA,aAAa,CAAC+G,IAAd,uDAAkE,IAAId,IAAJ,CAASrC,IAAT,EAAe2D,QAAf,EAAlE;;AAEA,UAAI,KAAKf,oBAAL,MAA+B,CAAC,KAAKsB,MAAzC,EAAiD;AAChD,aAAKnB,WAAL;AACA,OAFD,MAEO;AACN3G,QAAAA,aAAa,CAAC+G,IAAd,CAAmB,uBAAnB;AACA;;AAED,UAAI,KAAKT,oBAAL,MAA+B,CAAC,KAAKwB,MAAzC,EAAiD;AAChD,aAAKd,WAAL;AACA,OAFD,MAEO;AACNhH,QAAAA,aAAa,CAAC+G,IAAd,CAAmB,uBAAnB;AACA;;AAED,WAAKhD,aAAL,CAAmBJ,KAAnB;;AAEA3D,MAAAA,aAAa,CAAC+G,IAAd,yCAAoD,KAAKlD,GAAzD;AAEA,WAAKgE,QAAL,GAAgB,KAAhB;AAEAF,MAAAA,OAAO;AACP;AACD;;AAEDzD,EAAAA,UAAU,CAACvB,KAAD,EAAQiB,IAAR,EAAc;AACvB5D,IAAAA,aAAa,CAAC+G,IAAd,CAAmB,qBAAnB;AAEA,WAAO,IAAImB,OAAJ,CAAY,CAACP,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAIjF,KAAJ,EAAW;AACV,aAAKmB,QAAL,CAAcnB,KAAd;;AACAiB,QAAAA,IAAI,GAAG,IAAIqC,IAAJ,GAAWwB,OAAX,EAAP;AACA;;AAED,WAAKC,IAAL,CAAU9D,IAAV,EAAgB+D,OAAhB,EAAyBC,MAAzB;AACA,KAPM,CAAP;AAQA;;AAEU,SAAJhF,IAAI,CAACvC,OAAD,EAAU;AACpB,WAAOF,OAAO,CAACyC,IAAR,CAAavC,OAAb,CAAP;AACA;;AAED8H,EAAAA,IAAI,GAAG;AACN,SAAKL,MAAL,GAAc,IAAd;AACA;;AAEDM,EAAAA,OAAO,GAAG;AACT,QAAI,CAAC,KAAKP,QAAV,EAAoB;AACnB,WAAK3D,UAAL,CAAgB,IAAhB;AACA;AACD;;AAED4C,EAAAA,QAAQ,CAACpF,IAAD,EAAO0C,GAAP,EAA0B;AAAA,QAAdT,KAAc,uEAAN,IAAM;;AACjC,SAAKI,aAAL,CAAmBP,GAAnB,CAAuB,KAAKW,iBAAL,CAAuBzC,IAAvB,EAA6B0C,GAA7B,CAAvB;;AAEA,QAAIT,KAAJ,EAAW;AACV,WAAKI,aAAL,CAAmBJ,KAAnB;AACA;;AAED,WAAO,IAAP;AACA;;AAED0E,EAAAA,SAAS,CAAC3G,IAAD,EAAOC,EAAP,EAAW;AACnB,WAAO,KAAKmC,QAAL,CAAcrC,MAAd,CAAqBC,IAArB,EAA2BC,EAA3B,CAAP;AACA;;AAEDE,EAAAA,KAAK,CAACK,IAAD,EAAOvB,QAAP,EAAiB2H,GAAjB,EAAsB5G,IAAtB,EAA4B0F,KAA5B,EAAmCnF,IAAnC,EAAyCG,QAAzC,EAAgE;AAAA,QAAb1B,MAAa,uEAAJ,EAAI;;AACpE,SAAKoD,QAAL,CAAcjC,KAAd;AAEEK,MAAAA,IAFF;AAGEvB,MAAAA,QAHF;AAIE2H,MAAAA,GAJF;AAKE5G,MAAAA,IALF;AAME0F,MAAAA,KANF;AAOEnF,MAAAA;AAPF,OAQKvB,MARL,GAUC0B,QAVD;AAYA;;AAEDI,EAAAA,OAAO,CAACN,IAAD,EAAOvB,QAAP,EAAiB2H,GAAjB,EAAsB5G,IAAtB,EAA4BU,QAA5B,EAAsC;AAC5C,SAAK0B,QAAL,CAActB,OAAd,CACC;AACCN,MAAAA,IADD;AAECvB,MAAAA,QAFD;AAGC2H,MAAAA,GAHD;AAIC5G,MAAAA;AAJD,KADD,EAOCU,QAPD;AASA;;AA9OyB","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { HTTP } from 'meteor/http';\nimport { Random } from 'meteor/random';\n\nimport ChatpalLogger from '../utils/logger';\nimport { Rooms, Messages } from '../../../models';\n\n/**\n * Enables HTTP functions on Chatpal Backend\n */\nclass Backend {\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * index a set of Sorl documents\n\t * @param docs\n\t * @returns {boolean}\n\t */\n\tindex(docs) {\n\t\tconst options = {\n\t\t\tdata: docs,\n\t\t\tparams: { language: this._options.language },\n\t\t\t...this._options.httpOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', `${this._options.baseurl}${this._options.updatepath}`, options);\n\n\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\tChatpalLogger.debug({ msg: `indexed ${docs.length} documents`, data: response.data });\n\t\t\t} else {\n\t\t\t\tthrow new Error(response);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// TODO how to deal with this\n\t\t\tChatpalLogger.error({ msg: 'indexing failed', err: e });\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * remove an entry by type and id\n\t * @param type\n\t * @param id\n\t * @returns {boolean}\n\t */\n\tremove(type, id) {\n\t\tChatpalLogger.debug(`Remove ${type}(${id}) from Index`);\n\n\t\tconst options = {\n\t\t\tdata: {\n\t\t\t\tdelete: {\n\t\t\t\t\tquery: `id:${id} AND type:${type}`,\n\t\t\t\t},\n\t\t\t\tcommit: {},\n\t\t\t},\n\t\t\t...this._options.httpOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n\n\t\t\treturn response.statusCode >= 200 && response.statusCode < 300;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcount(type) {\n\t\treturn this.query({ type, rows: 0, text: '*' })[type].numFound;\n\t}\n\n\t/**\n\t * query with params\n\t * @param params\n\t * @param callback\n\t */\n\tquery(params, callback) {\n\t\tconst options = {\n\t\t\tparams,\n\t\t\t...this._options.httpOptions,\n\t\t};\n\n\t\tChatpalLogger.debug({ query: options });\n\n\t\ttry {\n\t\t\tif (callback) {\n\t\t\t\tHTTP.call('POST', this._options.baseurl + this._options.searchpath, options, (err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback(undefined, result.data);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.searchpath, options);\n\n\t\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\t\treturn response.data;\n\t\t\t\t}\n\t\t\t\tthrow new Error(response);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tChatpalLogger.error({ msg: 'query failed', err: e });\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tsuggest(params, callback) {\n\t\tconst options = {\n\t\t\tparams,\n\t\t\t...this._options.httpOptions,\n\t\t};\n\n\t\tHTTP.call('POST', this._options.baseurl + this._options.suggestionpath, options, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcallback(undefined, result.data.suggestion);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tclear() {\n\t\tChatpalLogger.debug('Clear Index');\n\n\t\tconst options = {\n\t\t\tdata: {\n\t\t\t\tdelete: {\n\t\t\t\t\tquery: '*:*',\n\t\t\t\t},\n\t\t\t\tcommit: {},\n\t\t\t},\n\t\t\t...this._options.httpOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n\n\t\t\treturn response.statusCode >= 200 && response.statusCode < 300;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * statically ping with configuration\n\t * @param options\n\t * @returns {boolean}\n\t */\n\tstatic ping(config) {\n\t\tconst options = {\n\t\t\tparams: {\n\t\t\t\tstats: true,\n\t\t\t},\n\t\t\t...config.httpOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('GET', config.baseurl + config.pingpath, options);\n\n\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\treturn response.data.stats;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Enabled batch indexing\n */\nclass BatchIndexer {\n\tconstructor(size, func, ...rest) {\n\t\tthis._size = size;\n\t\tthis._func = func;\n\t\tthis._rest = rest;\n\t\tthis._values = [];\n\t}\n\n\tadd(value) {\n\t\tthis._values.push(value);\n\t\tif (this._values.length === this._size) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tflush() {\n\t\tthis._func(this._values, this._rest); // TODO if flush does not work\n\t\tthis._values = [];\n\t}\n}\n\n/**\n * Provides index functions to chatpal provider\n */\nexport default class Index {\n\t/**\n\t * Creates Index Stub\n\t * @param options\n\t * @param clear if a complete reindex should be done\n\t */\n\tconstructor(options, clear, date) {\n\t\tthis._id = Random.id();\n\n\t\tthis._backend = new Backend(options);\n\n\t\tthis._options = options;\n\n\t\tthis._batchIndexer = new BatchIndexer(this._options.batchSize || 100, (values) => this._backend.index(values));\n\n\t\tthis._bootstrap(clear, date);\n\t}\n\n\t/**\n\t * prepare solr documents\n\t * @param type\n\t * @param doc\n\t * @returns {*}\n\t * @private\n\t */\n\t_getIndexDocument(type, doc) {\n\t\tswitch (type) {\n\t\t\tcase 'message':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\trid: doc.rid,\n\t\t\t\t\tuser: doc.u._id,\n\t\t\t\t\tcreated: doc.ts,\n\t\t\t\t\tupdated: doc._updatedAt,\n\t\t\t\t\ttext: doc.msg,\n\t\t\t\t\ttype,\n\t\t\t\t};\n\t\t\tcase 'room':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\trid: doc._id,\n\t\t\t\t\tcreated: doc.createdAt,\n\t\t\t\t\tupdated: doc.lm ? doc.lm : doc._updatedAt,\n\t\t\t\t\ttype,\n\t\t\t\t\troom_name: doc.name,\n\t\t\t\t\troom_announcement: doc.announcement,\n\t\t\t\t\troom_description: doc.description,\n\t\t\t\t\troom_topic: doc.topic,\n\t\t\t\t};\n\t\t\tcase 'user':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\tcreated: doc.createdAt,\n\t\t\t\t\tupdated: doc._updatedAt,\n\t\t\t\t\ttype,\n\t\t\t\t\tuser_username: doc.username,\n\t\t\t\t\tuser_name: doc.name,\n\t\t\t\t\tuser_email: doc.emails && doc.emails.map((e) => e.address),\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Cannot index type '${type}'`);\n\t\t}\n\t}\n\n\t/**\n\t * return true if there are messages in the databases which has been created before *date*\n\t * @param date\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_existsDataOlderThan(date) {\n\t\treturn Messages.model.find({ ts: { $lt: new Date(date) }, t: { $exists: false } }, { limit: 1 }).fetch().length > 0;\n\t}\n\n\t_doesRoomCountDiffer() {\n\t\treturn Rooms.find({ t: { $ne: 'd' } }).count() !== this._backend.count('room');\n\t}\n\n\t_doesUserCountDiffer() {\n\t\treturn Meteor.users.find({ active: true }).count() !== this._backend.count('user');\n\t}\n\n\t/**\n\t * Index users by using a database cursor\n\t */\n\t_indexUsers() {\n\t\tconst cursor = Meteor.users.find({ active: true });\n\n\t\tChatpalLogger.debug(`Start indexing ${cursor.count()} users`);\n\n\t\tcursor.forEach((user) => {\n\t\t\tthis.indexDoc('user', user, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Users indexed successfully (index-id: ${this._id})`);\n\t}\n\n\t/**\n\t * Index rooms by database cursor\n\t * @private\n\t */\n\t_indexRooms() {\n\t\tconst cursor = Rooms.find({ t: { $ne: 'd' } });\n\n\t\tChatpalLogger.debug(`Start indexing ${cursor.count()} rooms`);\n\n\t\tcursor.forEach((room) => {\n\t\t\tthis.indexDoc('room', room, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Rooms indexed successfully (index-id: ${this._id})`);\n\t}\n\n\t_indexMessages(date, gap) {\n\t\tconst start = new Date(date - gap);\n\t\tconst end = new Date(date);\n\n\t\tconst cursor = Messages.model.find({ ts: { $gt: start, $lt: end }, t: { $exists: false } });\n\n\t\tChatpalLogger.debug(`Start indexing ${cursor.count()} messages between ${start.toString()} and ${end.toString()}`);\n\n\t\tcursor.forEach((message) => {\n\t\t\tthis.indexDoc('message', message, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Messages between ${start.toString()} and ${end.toString()} indexed successfully (index-id: ${this._id})`);\n\n\t\treturn start.getTime();\n\t}\n\n\t_run(date, resolve, reject) {\n\t\tthis._running = true;\n\n\t\tif (this._existsDataOlderThan(date) && !this._break) {\n\t\t\tMeteor.setTimeout(() => {\n\t\t\t\tdate = this._indexMessages(date, (this._options.windowSize || 24) * 3600000);\n\n\t\t\t\tthis._run(date, resolve, reject);\n\t\t\t}, this._options.timeout || 1000);\n\t\t} else if (this._break) {\n\t\t\tChatpalLogger.info(`stopped bootstrap (index-id: ${this._id})`);\n\n\t\t\tthis._batchIndexer.flush();\n\n\t\t\tthis._running = false;\n\n\t\t\tresolve();\n\t\t} else {\n\t\t\tChatpalLogger.info(`No messages older than already indexed date ${new Date(date).toString()}`);\n\n\t\t\tif (this._doesUserCountDiffer() && !this._break) {\n\t\t\t\tthis._indexUsers();\n\t\t\t} else {\n\t\t\t\tChatpalLogger.info('Users already indexed');\n\t\t\t}\n\n\t\t\tif (this._doesRoomCountDiffer() && !this._break) {\n\t\t\t\tthis._indexRooms();\n\t\t\t} else {\n\t\t\t\tChatpalLogger.info('Rooms already indexed');\n\t\t\t}\n\n\t\t\tthis._batchIndexer.flush();\n\n\t\t\tChatpalLogger.info(`finished bootstrap (index-id: ${this._id})`);\n\n\t\t\tthis._running = false;\n\n\t\t\tresolve();\n\t\t}\n\t}\n\n\t_bootstrap(clear, date) {\n\t\tChatpalLogger.info('Start bootstrapping');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (clear) {\n\t\t\t\tthis._backend.clear();\n\t\t\t\tdate = new Date().getTime();\n\t\t\t}\n\n\t\t\tthis._run(date, resolve, reject);\n\t\t});\n\t}\n\n\tstatic ping(options) {\n\t\treturn Backend.ping(options);\n\t}\n\n\tstop() {\n\t\tthis._break = true;\n\t}\n\n\treindex() {\n\t\tif (!this._running) {\n\t\t\tthis._bootstrap(true);\n\t\t}\n\t}\n\n\tindexDoc(type, doc, flush = true) {\n\t\tthis._batchIndexer.add(this._getIndexDocument(type, doc));\n\n\t\tif (flush) {\n\t\t\tthis._batchIndexer.flush();\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tremoveDoc(type, id) {\n\t\treturn this._backend.remove(type, id);\n\t}\n\n\tquery(text, language, acl, type, start, rows, callback, params = {}) {\n\t\tthis._backend.query(\n\t\t\t{\n\t\t\t\ttext,\n\t\t\t\tlanguage,\n\t\t\t\tacl,\n\t\t\t\ttype,\n\t\t\t\tstart,\n\t\t\t\trows,\n\t\t\t\t...params,\n\t\t\t},\n\t\t\tcallback,\n\t\t);\n\t}\n\n\tsuggest(text, language, acl, type, callback) {\n\t\tthis._backend.suggest(\n\t\t\t{\n\t\t\t\ttext,\n\t\t\t\tlanguage,\n\t\t\t\tacl,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tcallback,\n\t\t);\n\t}\n}\n"]},"sourceType":"module","hash":"91f7e3cc13b298fe7ade5e1924867fa53a301170"}
