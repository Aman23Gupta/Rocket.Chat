{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack/server/importer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-slack/server/importer.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack/server/importer.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack/server/importer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-slack/server/importer.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  SlackImporter: () => SlackImporter\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Base, ProgressStep, ImporterWebsocket;\nmodule.link(\"../../importer/server\", {\n  Base(v) {\n    Base = v;\n  },\n\n  ProgressStep(v) {\n    ProgressStep = v;\n  },\n\n  ImporterWebsocket(v) {\n    ImporterWebsocket = v;\n  }\n\n}, 1);\nlet Messages, ImportData;\nmodule.link(\"../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  ImportData(v) {\n    ImportData = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet MentionsParser;\nmodule.link(\"../../mentions/lib/MentionsParser\", {\n  MentionsParser(v) {\n    MentionsParser = v;\n  }\n\n}, 4);\nlet getUserAvatarURL;\nmodule.link(\"../../utils/lib/getUserAvatarURL\", {\n  getUserAvatarURL(v) {\n    getUserAvatarURL = v;\n  }\n\n}, 5);\n\nclass SlackImporter extends Base {\n  parseData(data) {\n    const dataString = data.toString();\n\n    try {\n      this.logger.debug('parsing file contents');\n      return JSON.parse(dataString);\n    } catch (e) {\n      this.logger.error(e);\n      return false;\n    }\n  }\n\n  prepareChannelsFile(entry) {\n    super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n    const data = JSON.parse(entry.getData().toString()).filter(channel => channel.creator != null);\n    this.logger.debug(\"loaded \".concat(data.length, \" channels.\"));\n    this.addCountToTotal(data.length);\n\n    for (const channel of data) {\n      var _channel$topic, _channel$purpose;\n\n      this.converter.addChannel({\n        _id: channel.is_general ? 'general' : undefined,\n        u: {\n          _id: this._replaceSlackUserId(channel.creator)\n        },\n        importIds: [channel.id],\n        name: channel.name,\n        users: this._replaceSlackUserIds(channel.members),\n        t: 'c',\n        topic: ((_channel$topic = channel.topic) === null || _channel$topic === void 0 ? void 0 : _channel$topic.value) || undefined,\n        description: ((_channel$purpose = channel.purpose) === null || _channel$purpose === void 0 ? void 0 : _channel$purpose.value) || undefined,\n        ts: channel.created ? new Date(channel.created * 1000) : undefined,\n        archived: channel.is_archived\n      });\n    }\n\n    return data.length;\n  }\n\n  prepareGroupsFile(entry) {\n    super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n    const data = JSON.parse(entry.getData().toString()).filter(channel => channel.creator != null);\n    this.logger.debug(\"loaded \".concat(data.length, \" groups.\"));\n    this.addCountToTotal(data.length);\n\n    for (const channel of data) {\n      var _channel$topic2, _channel$purpose2;\n\n      this.converter.addChannel({\n        u: {\n          _id: this._replaceSlackUserId(channel.creator)\n        },\n        importIds: [channel.id],\n        name: channel.name,\n        users: this._replaceSlackUserIds(channel.members),\n        t: 'p',\n        topic: ((_channel$topic2 = channel.topic) === null || _channel$topic2 === void 0 ? void 0 : _channel$topic2.value) || undefined,\n        description: ((_channel$purpose2 = channel.purpose) === null || _channel$purpose2 === void 0 ? void 0 : _channel$purpose2.value) || undefined,\n        ts: channel.created ? new Date(channel.created * 1000) : undefined,\n        archived: channel.is_archived\n      });\n    }\n\n    return data.length;\n  }\n\n  prepareMpimpsFile(entry) {\n    super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n    const data = JSON.parse(entry.getData().toString()).filter(channel => channel.creator != null);\n    this.logger.debug(\"loaded \".concat(data.length, \" mpims.\"));\n    this.addCountToTotal(data.length);\n    const maxUsers = settings.get('DirectMesssage_maxUsers') || 1;\n\n    for (const channel of data) {\n      var _channel$topic3, _channel$purpose3;\n\n      this.converter.addChannel({\n        u: {\n          _id: this._replaceSlackUserId(channel.creator)\n        },\n        importIds: [channel.id],\n        name: channel.name,\n        users: this._replaceSlackUserIds(channel.members),\n        t: channel.members.length > maxUsers ? 'p' : 'd',\n        topic: ((_channel$topic3 = channel.topic) === null || _channel$topic3 === void 0 ? void 0 : _channel$topic3.value) || undefined,\n        description: ((_channel$purpose3 = channel.purpose) === null || _channel$purpose3 === void 0 ? void 0 : _channel$purpose3.value) || undefined,\n        ts: channel.created ? new Date(channel.created * 1000) : undefined,\n        archived: channel.is_archived\n      });\n    }\n\n    return data.length;\n  }\n\n  prepareDMsFile(entry) {\n    super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n    const data = JSON.parse(entry.getData().toString());\n    this.logger.debug(\"loaded \".concat(data.length, \" dms.\"));\n    this.addCountToTotal(data.length);\n\n    for (const channel of data) {\n      this.converter.addChannel({\n        importIds: [channel.id],\n        users: this._replaceSlackUserIds(channel.members),\n        t: 'd',\n        ts: channel.created ? new Date(channel.created * 1000) : undefined\n      });\n    }\n\n    return data.length;\n  }\n\n  prepareUsersFile(entry) {\n    super.updateProgress(ProgressStep.PREPARING_USERS);\n    const data = JSON.parse(entry.getData().toString());\n    this.logger.debug(\"loaded \".concat(data.length, \" users.\")); // Insert the users record\n\n    this.updateRecord({\n      'count.users': data.length\n    });\n    this.addCountToTotal(data.length);\n\n    for (const user of data) {\n      const newUser = {\n        emails: [],\n        importIds: [user.id],\n        username: user.name,\n        name: user.profile.real_name,\n        utcOffset: user.tz_offset && user.tz_offset / 3600,\n        avatarUrl: user.profile.image_original || user.profile.image_512,\n        deleted: user.deleted,\n        statusText: user.profile.status_text || undefined,\n        bio: user.profile.title || undefined,\n        type: 'user'\n      };\n\n      if (user.profile.email) {\n        newUser.emails.push(user.profile.email);\n      }\n\n      if (user.is_bot) {\n        newUser.roles = ['bot'];\n        newUser.type = 'bot';\n      }\n\n      this.converter.addUser(newUser);\n    }\n  }\n\n  prepareUsingLocalFile(fullFilePath) {\n    this.logger.debug('start preparing import operation');\n    this.converter.clearImportData();\n    const zip = new this.AdmZip(fullFilePath);\n    const totalEntries = zip.getEntryCount();\n    let messagesCount = 0;\n    let channelCount = 0;\n    let count = 0;\n    ImporterWebsocket.progressUpdated({\n      rate: 0\n    });\n    let oldRate = 0;\n\n    const increaseProgress = () => {\n      try {\n        count++;\n        const rate = Math.floor(count * 1000 / totalEntries) / 10;\n\n        if (rate > oldRate) {\n          ImporterWebsocket.progressUpdated({\n            rate\n          });\n          oldRate = rate;\n        }\n      } catch (e) {\n        this.logger.error(e);\n      }\n    };\n\n    try {\n      // we need to iterate the zip file twice so that all channels are loaded before the messages\n      zip.forEach(entry => {\n        try {\n          if (entry.entryName === 'channels.json') {\n            channelCount += this.prepareChannelsFile(entry);\n            this.updateRecord({\n              'count.channels': channelCount\n            });\n            return increaseProgress();\n          }\n\n          if (entry.entryName === 'groups.json') {\n            channelCount += this.prepareGroupsFile(entry);\n            this.updateRecord({\n              'count.channels': channelCount\n            });\n            return increaseProgress();\n          }\n\n          if (entry.entryName === 'mpims.json') {\n            channelCount += this.prepareMpimpsFile(entry);\n            this.updateRecord({\n              'count.channels': channelCount\n            });\n            return increaseProgress();\n          }\n\n          if (entry.entryName === 'dms.json') {\n            channelCount += this.prepareDMsFile(entry);\n            this.updateRecord({\n              'count.channels': channelCount\n            });\n            return increaseProgress();\n          }\n\n          if (entry.entryName === 'users.json') {\n            this.prepareUsersFile(entry);\n            return increaseProgress();\n          }\n        } catch (e) {\n          this.logger.error(e);\n        }\n      });\n      const missedTypes = {}; // If we have no slack message yet, then we can insert them instead of upserting\n\n      this._useUpsert = !Messages.findOne({\n        _id: /slack\\-.*/\n      });\n      zip.forEach(entry => {\n        try {\n          if (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n            count++;\n            return this.logger.debug(\"Ignoring the file: \".concat(entry.entryName));\n          }\n\n          if (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n            return;\n          }\n\n          if (!entry.isDirectory && entry.entryName.includes('/')) {\n            const item = entry.entryName.split('/');\n            const channel = item[0];\n            const date = item[1].split('.')[0];\n\n            try {\n              // Insert the messages records\n              if (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n                super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n              }\n\n              const tempMessages = JSON.parse(entry.getData().toString());\n              messagesCount += tempMessages.length;\n              this.updateRecord({\n                messagesstatus: \"\".concat(channel, \"/\").concat(date)\n              });\n              this.addCountToTotal(tempMessages.length);\n              const slackChannelId = ImportData.findChannelImportIdByNameOrImportId(channel);\n\n              if (slackChannelId) {\n                for (const message of tempMessages) {\n                  this.prepareMessageObject(message, missedTypes, slackChannelId);\n                }\n              }\n            } catch (error) {\n              this.logger.warn(\"\".concat(entry.entryName, \" is not a valid JSON file! Unable to import it.\"));\n            }\n          }\n        } catch (e) {\n          this.logger.error(e);\n        }\n\n        increaseProgress();\n      });\n\n      if (!_.isEmpty(missedTypes)) {\n        this.logger.info('Missed import types:', missedTypes);\n      }\n    } catch (e) {\n      this.logger.error(e);\n      throw e;\n    }\n\n    ImporterWebsocket.progressUpdated({\n      rate: 100\n    });\n    this.updateRecord({\n      'count.messages': messagesCount,\n      'messagesstatus': null\n    });\n  }\n\n  parseMentions(newMessage) {\n    const mentionsParser = new MentionsParser({\n      pattern: () => settings.get('UTF8_User_Names_Validation'),\n      useRealName: () => settings.get('UI_Use_Real_Name'),\n      me: () => 'me'\n    });\n    const users = mentionsParser.getUserMentions(newMessage.msg).filter(u => u).map(uid => this._replaceSlackUserId(uid.slice(1, uid.length)));\n\n    if (users.length) {\n      if (!newMessage.mentions) {\n        newMessage.mentions = [];\n      }\n\n      newMessage.mentions.push(...users);\n    }\n\n    const channels = mentionsParser.getChannelMentions(newMessage.msg).filter(c => c).map(name => name.slice(1, name.length));\n\n    if (channels.length) {\n      if (!newMessage.channels) {\n        newMessage.channels = [];\n      }\n\n      newMessage.channels.push(...channels);\n    }\n  }\n\n  processMessageSubType(message, slackChannelId, newMessage, missedTypes) {\n    var _message$file;\n\n    const ignoreTypes = {\n      bot_add: true,\n      file_comment: true,\n      file_mention: true\n    };\n\n    switch (message.subtype) {\n      case 'channel_join':\n      case 'group_join':\n        newMessage.t = 'uj';\n        newMessage.groupable = false;\n        return true;\n\n      case 'channel_leave':\n      case 'group_leave':\n        newMessage.t = 'ul';\n        newMessage.groupable = false;\n        return true;\n\n      case 'channel_purpose':\n      case 'group_purpose':\n        newMessage.t = 'room_changed_description';\n        newMessage.groupable = false;\n        newMessage.msg = message.purpose;\n        return true;\n\n      case 'channel_topic':\n      case 'group_topic':\n        newMessage.t = 'room_changed_topic';\n        newMessage.groupable = false;\n        newMessage.msg = message.topic;\n        return true;\n\n      case 'channel_name':\n      case 'group_name':\n        newMessage.t = 'r';\n        newMessage.msg = message.name;\n        newMessage.groupable = false;\n        return true;\n\n      case 'pinned_item':\n        if (message.attachments) {\n          if (!newMessage.attachments) {\n            newMessage.attachments = [];\n          }\n\n          newMessage.attachments.push({\n            text: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n            author_name: message.attachments[0].author_subname,\n            author_icon: getUserAvatarURL(message.attachments[0].author_subname)\n          });\n          newMessage.t = 'message_pinned';\n        }\n\n        break;\n\n      case 'file_share':\n        if ((_message$file = message.file) !== null && _message$file !== void 0 && _message$file.url_private_download) {\n          const fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n          const fileMessage = {\n            _id: fileId,\n            rid: newMessage.rid,\n            ts: newMessage.ts,\n            msg: message.file.url_private_download || '',\n            _importFile: this.convertSlackFileToPendingFile(message.file),\n            u: {\n              _id: newMessage.u._id\n            }\n          };\n\n          if (message.thread_ts && message.thread_ts !== message.ts) {\n            fileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n          }\n\n          this.converter.addMessage(fileMessage, this._useUpsert);\n        }\n\n        break;\n\n      default:\n        if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n          missedTypes[message.subtype] = message;\n        }\n\n        break;\n    }\n  }\n\n  makeSlackMessageId(channelId, ts) {\n    let fileIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    const base = \"slack-\".concat(channelId, \"-\").concat(ts.replace(/\\./g, '-'));\n\n    if (fileIndex) {\n      return \"\".concat(base, \"-file\").concat(fileIndex);\n    }\n\n    return base;\n  }\n\n  prepareMessageObject(message, missedTypes, slackChannelId) {\n    const id = this.makeSlackMessageId(slackChannelId, message.ts);\n    const newMessage = {\n      _id: id,\n      rid: slackChannelId,\n      ts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n      u: {\n        _id: this._replaceSlackUserId(message.user)\n      }\n    }; // Process the reactions\n\n    if (message.reactions && message.reactions.length > 0) {\n      newMessage.reactions = new Map();\n      message.reactions.forEach(reaction => {\n        const name = \":\".concat(reaction.name, \":\");\n\n        if (reaction.users && reaction.users.length) {\n          newMessage.reactions.set(name, {\n            name,\n            users: this._replaceSlackUserIds(reaction.users)\n          });\n        }\n      });\n    }\n\n    if (message.type === 'message') {\n      if (message.files) {\n        let fileIndex = 0;\n        message.files.forEach(file => {\n          fileIndex++;\n          const fileId = this.makeSlackMessageId(slackChannelId, message.ts, fileIndex);\n          const fileMessage = {\n            _id: fileId,\n            rid: slackChannelId,\n            ts: newMessage.ts,\n            msg: file.url_private_download || '',\n            _importFile: this.convertSlackFileToPendingFile(file),\n            u: {\n              _id: this._replaceSlackUserId(message.user)\n            }\n          };\n\n          if (message.thread_ts && message.thread_ts !== message.ts) {\n            fileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n          }\n\n          this.converter.addMessage(fileMessage, this._useUpsert);\n        });\n      }\n\n      const regularTypes = ['me_message', 'thread_broadcast'];\n      const isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n\n      if (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n        if (this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n          this.converter.addMessage(newMessage, this._useUpsert);\n        }\n      } else {\n        const text = this.convertSlackMessageToRocketChat(message.text);\n\n        if (isBotMessage) {\n          newMessage.bot = true;\n        }\n\n        if (message.subtype === 'me_message') {\n          newMessage.msg = \"_\".concat(text, \"_\");\n        } else {\n          newMessage.msg = text;\n        }\n\n        if (message.thread_ts) {\n          if (message.thread_ts === message.ts) {\n            if (message.reply_users) {\n              const replies = new Set();\n              message.reply_users.forEach(item => {\n                replies.add(this._replaceSlackUserId(item));\n              });\n\n              if (replies.length) {\n                newMessage.replies = Array.from(replies);\n              }\n            } else if (message.replies) {\n              const replies = new Set();\n              message.repĺies.forEach(item => {\n                replies.add(this._replaceSlackUserId(item.user));\n              });\n\n              if (replies.length) {\n                newMessage.replies = Array.from(replies);\n              }\n            } else {\n              this.logger.warn(\"Failed to import the parent comment, message: \".concat(newMessage._id, \". Missing replies/reply_users field\"));\n            }\n\n            newMessage.tcount = message.reply_count;\n            newMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n          } else {\n            newMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n          }\n        }\n\n        if (message.edited) {\n          newMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\n          if (message.edited.user) {\n            newMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n          }\n        }\n\n        if (message.attachments) {\n          newMessage.attachments = this.convertMessageAttachments(message.attachments);\n        }\n\n        if (message.icons && message.icons.emoji) {\n          newMessage.emoji = message.icons.emoji;\n        }\n\n        this.parseMentions(newMessage);\n        this.converter.addMessage(newMessage, this._useUpsert);\n      }\n    }\n  }\n\n  _replaceSlackUserId(userId) {\n    if (userId === 'USLACKBOT') {\n      return 'rocket.cat';\n    }\n\n    return userId;\n  }\n\n  _replaceSlackUserIds(members) {\n    return members.map(userId => this._replaceSlackUserId(userId));\n  }\n\n  convertSlackMessageToRocketChat(message) {\n    if (message) {\n      message = message.replace(/<!everyone>/g, '@all');\n      message = message.replace(/<!channel>/g, '@all');\n      message = message.replace(/<!here>/g, '@here');\n      message = message.replace(/&gt;/g, '>');\n      message = message.replace(/&lt;/g, '<');\n      message = message.replace(/&amp;/g, '&');\n      message = message.replace(/:simple_smile:/g, ':smile:');\n      message = message.replace(/:memo:/g, ':pencil:');\n      message = message.replace(/:piggy:/g, ':pig:');\n      message = message.replace(/:uk:/g, ':gb:');\n      message = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n      message = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n      message = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n      message = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n      message = message.replace(/<@([^|>]*)>/g, '@$1');\n    } else {\n      message = '';\n    }\n\n    return message;\n  }\n\n  convertSlackFileToPendingFile(file) {\n    return {\n      downloadUrl: file.url_private_download,\n      id: file.id,\n      size: file.size,\n      name: file.name,\n      external: file.is_external,\n      source: 'slack',\n      original: _objectSpread({}, file)\n    };\n  }\n\n  convertMessageAttachments(attachments) {\n    if (!attachments || !attachments.length) {\n      return attachments;\n    }\n\n    return attachments.map(attachment => _objectSpread(_objectSpread({}, attachment), {}, {\n      text: this.convertSlackMessageToRocketChat(attachment.text),\n      title: this.convertSlackMessageToRocketChat(attachment.title),\n      fallback: this.convertSlackMessageToRocketChat(attachment.fallback)\n    }));\n  }\n\n}","map":{"version":3,"sources":["app/importer-slack/server/importer.js"],"names":["_objectSpread","module","link","default","v","export","SlackImporter","_","Base","ProgressStep","ImporterWebsocket","Messages","ImportData","settings","MentionsParser","getUserAvatarURL","parseData","data","dataString","toString","logger","debug","JSON","parse","e","error","prepareChannelsFile","entry","updateProgress","PREPARING_CHANNELS","getData","filter","channel","creator","length","addCountToTotal","converter","addChannel","_id","is_general","undefined","u","_replaceSlackUserId","importIds","id","name","users","_replaceSlackUserIds","members","t","topic","value","description","purpose","ts","created","Date","archived","is_archived","prepareGroupsFile","prepareMpimpsFile","maxUsers","get","prepareDMsFile","prepareUsersFile","PREPARING_USERS","updateRecord","user","newUser","emails","username","profile","real_name","utcOffset","tz_offset","avatarUrl","image_original","image_512","deleted","statusText","status_text","bio","title","type","email","push","is_bot","roles","addUser","prepareUsingLocalFile","fullFilePath","clearImportData","zip","AdmZip","totalEntries","getEntryCount","messagesCount","channelCount","count","progressUpdated","rate","oldRate","increaseProgress","Math","floor","forEach","entryName","missedTypes","_useUpsert","findOne","includes","isDirectory","item","split","date","progress","step","PREPARING_MESSAGES","tempMessages","messagesstatus","slackChannelId","findChannelImportIdByNameOrImportId","message","prepareMessageObject","warn","isEmpty","info","parseMentions","newMessage","mentionsParser","pattern","useRealName","me","getUserMentions","msg","map","uid","slice","mentions","channels","getChannelMentions","c","processMessageSubType","ignoreTypes","bot_add","file_comment","file_mention","subtype","groupable","attachments","text","convertSlackMessageToRocketChat","author_name","author_subname","author_icon","file","url_private_download","fileId","makeSlackMessageId","fileMessage","rid","_importFile","convertSlackFileToPendingFile","thread_ts","tmid","addMessage","channelId","fileIndex","base","replace","parseInt","reactions","Map","reaction","set","files","regularTypes","isBotMessage","bot","reply_users","replies","Set","add","Array","from","repĺies","tcount","reply_count","tlm","latest_reply","edited","editedAt","editedBy","convertMessageAttachments","icons","emoji","userId","downloadUrl","size","external","is_external","source","original","attachment","fallback"],"mappings":"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","sourcesContent":["import _ from 'underscore';\n\nimport { Base, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport { Messages, ImportData } from '../../models/server';\nimport { settings } from '../../settings/server';\nimport { MentionsParser } from '../../mentions/lib/MentionsParser';\nimport { getUserAvatarURL } from '../../utils/lib/getUserAvatarURL';\n\nexport class SlackImporter extends Base {\n\tparseData(data) {\n\t\tconst dataString = data.toString();\n\t\ttry {\n\t\t\tthis.logger.debug('parsing file contents');\n\t\t\treturn JSON.parse(dataString);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprepareChannelsFile(entry) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()).filter((channel) => channel.creator != null);\n\n\t\tthis.logger.debug(`loaded ${data.length} channels.`);\n\n\t\tthis.addCountToTotal(data.length);\n\n\t\tfor (const channel of data) {\n\t\t\tthis.converter.addChannel({\n\t\t\t\t_id: channel.is_general ? 'general' : undefined,\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'c',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tprepareGroupsFile(entry) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()).filter((channel) => channel.creator != null);\n\n\t\tthis.logger.debug(`loaded ${data.length} groups.`);\n\n\t\tthis.addCountToTotal(data.length);\n\n\t\tfor (const channel of data) {\n\t\t\tthis.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'p',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tprepareMpimpsFile(entry) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()).filter((channel) => channel.creator != null);\n\n\t\tthis.logger.debug(`loaded ${data.length} mpims.`);\n\n\t\tthis.addCountToTotal(data.length);\n\n\t\tconst maxUsers = settings.get('DirectMesssage_maxUsers') || 1;\n\n\t\tfor (const channel of data) {\n\t\t\tthis.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: channel.members.length > maxUsers ? 'p' : 'd',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tprepareDMsFile(entry) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString());\n\n\t\tthis.logger.debug(`loaded ${data.length} dms.`);\n\n\t\tthis.addCountToTotal(data.length);\n\t\tfor (const channel of data) {\n\t\t\tthis.converter.addChannel({\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'd',\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tprepareUsersFile(entry) {\n\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tconst data = JSON.parse(entry.getData().toString());\n\n\t\tthis.logger.debug(`loaded ${data.length} users.`);\n\n\t\t// Insert the users record\n\t\tthis.updateRecord({ 'count.users': data.length });\n\t\tthis.addCountToTotal(data.length);\n\n\t\tfor (const user of data) {\n\t\t\tconst newUser = {\n\t\t\t\temails: [],\n\t\t\t\timportIds: [user.id],\n\t\t\t\tusername: user.name,\n\t\t\t\tname: user.profile.real_name,\n\t\t\t\tutcOffset: user.tz_offset && user.tz_offset / 3600,\n\t\t\t\tavatarUrl: user.profile.image_original || user.profile.image_512,\n\t\t\t\tdeleted: user.deleted,\n\t\t\t\tstatusText: user.profile.status_text || undefined,\n\t\t\t\tbio: user.profile.title || undefined,\n\t\t\t\ttype: 'user',\n\t\t\t};\n\n\t\t\tif (user.profile.email) {\n\t\t\t\tnewUser.emails.push(user.profile.email);\n\t\t\t}\n\n\t\t\tif (user.is_bot) {\n\t\t\t\tnewUser.roles = ['bot'];\n\t\t\t\tnewUser.type = 'bot';\n\t\t\t}\n\n\t\t\tthis.converter.addUser(newUser);\n\t\t}\n\t}\n\n\tprepareUsingLocalFile(fullFilePath) {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tthis.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgress = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\t// we need to iterate the zip file twice so that all channels are loaded before the messages\n\n\t\t\tzip.forEach((entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\t\t\tchannelCount += this.prepareChannelsFile(entry);\n\t\t\t\t\t\tthis.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\treturn increaseProgress();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'groups.json') {\n\t\t\t\t\t\tchannelCount += this.prepareGroupsFile(entry);\n\t\t\t\t\t\tthis.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\treturn increaseProgress();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'mpims.json') {\n\t\t\t\t\t\tchannelCount += this.prepareMpimpsFile(entry);\n\t\t\t\t\t\tthis.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\treturn increaseProgress();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'dms.json') {\n\t\t\t\t\t\tchannelCount += this.prepareDMsFile(entry);\n\t\t\t\t\t\tthis.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\treturn increaseProgress();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\t\t\tthis.prepareUsersFile(entry);\n\t\t\t\t\t\treturn increaseProgress();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst missedTypes = {};\n\t\t\t// If we have no slack message yet, then we can insert them instead of upserting\n\t\t\tthis._useUpsert = !Messages.findOne({ _id: /slack\\-.*/ });\n\n\t\t\tzip.forEach((entry) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\treturn this.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!entry.isDirectory && entry.entryName.includes('/')) {\n\t\t\t\t\t\tconst item = entry.entryName.split('/');\n\n\t\t\t\t\t\tconst channel = item[0];\n\t\t\t\t\t\tconst date = item[1].split('.')[0];\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Insert the messages records\n\t\t\t\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst tempMessages = JSON.parse(entry.getData().toString());\n\t\t\t\t\t\t\tmessagesCount += tempMessages.length;\n\t\t\t\t\t\t\tthis.updateRecord({ messagesstatus: `${channel}/${date}` });\n\t\t\t\t\t\t\tthis.addCountToTotal(tempMessages.length);\n\n\t\t\t\t\t\t\tconst slackChannelId = ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tthis.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logger.warn(`${entry.entryName} is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tincreaseProgress();\n\t\t\t});\n\n\t\t\tif (!_.isEmpty(missedTypes)) {\n\t\t\t\tthis.logger.info('Missed import types:', missedTypes);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\t\tthis.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t}\n\n\tparseMentions(newMessage) {\n\t\tconst mentionsParser = new MentionsParser({\n\t\t\tpattern: () => settings.get('UTF8_User_Names_Validation'),\n\t\t\tuseRealName: () => settings.get('UI_Use_Real_Name'),\n\t\t\tme: () => 'me',\n\t\t});\n\n\t\tconst users = mentionsParser\n\t\t\t.getUserMentions(newMessage.msg)\n\t\t\t.filter((u) => u)\n\t\t\t.map((uid) => this._replaceSlackUserId(uid.slice(1, uid.length)));\n\t\tif (users.length) {\n\t\t\tif (!newMessage.mentions) {\n\t\t\t\tnewMessage.mentions = [];\n\t\t\t}\n\t\t\tnewMessage.mentions.push(...users);\n\t\t}\n\n\t\tconst channels = mentionsParser\n\t\t\t.getChannelMentions(newMessage.msg)\n\t\t\t.filter((c) => c)\n\t\t\t.map((name) => name.slice(1, name.length));\n\t\tif (channels.length) {\n\t\t\tif (!newMessage.channels) {\n\t\t\t\tnewMessage.channels = [];\n\t\t\t}\n\t\t\tnewMessage.channels.push(...channels);\n\t\t}\n\t}\n\n\tprocessMessageSubType(message, slackChannelId, newMessage, missedTypes) {\n\t\tconst ignoreTypes = { bot_add: true, file_comment: true, file_mention: true };\n\n\t\tswitch (message.subtype) {\n\t\t\tcase 'channel_join':\n\t\t\tcase 'group_join':\n\t\t\t\tnewMessage.t = 'uj';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tnewMessage.t = 'ul';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tnewMessage.t = 'room_changed_description';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.purpose;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tnewMessage.t = 'room_changed_topic';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.topic;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tnewMessage.t = 'r';\n\t\t\t\tnewMessage.msg = message.name;\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tif (!newMessage.attachments) {\n\t\t\t\t\t\tnewMessage.attachments = [];\n\t\t\t\t\t}\n\t\t\t\t\tnewMessage.attachments.push({\n\t\t\t\t\t\ttext: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\tauthor_name: message.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(message.attachments[0].author_subname),\n\t\t\t\t\t});\n\t\t\t\t\tnewMessage.t = 'message_pinned';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_share':\n\t\t\t\tif (message.file?.url_private_download) {\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n\t\t\t\t\tconst fileMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: newMessage.rid,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: message.file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(message.file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: newMessage.u._id,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tmakeSlackMessageId(channelId, ts, fileIndex = undefined) {\n\t\tconst base = `slack-${channelId}-${ts.replace(/\\./g, '-')}`;\n\n\t\tif (fileIndex) {\n\t\t\treturn `${base}-file${fileIndex}`;\n\t\t}\n\n\t\treturn base;\n\t}\n\n\tprepareMessageObject(message, missedTypes, slackChannelId) {\n\t\tconst id = this.makeSlackMessageId(slackChannelId, message.ts);\n\t\tconst newMessage = {\n\t\t\t_id: id,\n\t\t\trid: slackChannelId,\n\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n\t\t\tu: {\n\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t},\n\t\t};\n\n\t\t// Process the reactions\n\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\tnewMessage.reactions = new Map();\n\n\t\t\tmessage.reactions.forEach((reaction) => {\n\t\t\t\tconst name = `:${reaction.name}:`;\n\t\t\t\tif (reaction.users && reaction.users.length) {\n\t\t\t\t\tnewMessage.reactions.set(name, {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusers: this._replaceSlackUserIds(reaction.users),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (message.type === 'message') {\n\t\t\tif (message.files) {\n\t\t\t\tlet fileIndex = 0;\n\t\t\t\tmessage.files.forEach((file) => {\n\t\t\t\t\tfileIndex++;\n\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, fileIndex);\n\t\t\t\t\tconst fileMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: slackChannelId,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst regularTypes = ['me_message', 'thread_broadcast'];\n\n\t\t\tconst isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n\n\t\t\tif (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n\t\t\t\tif (this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n\t\t\t\t\tthis.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst text = this.convertSlackMessageToRocketChat(message.text);\n\n\t\t\t\tif (isBotMessage) {\n\t\t\t\t\tnewMessage.bot = true;\n\t\t\t\t}\n\n\t\t\t\tif (message.subtype === 'me_message') {\n\t\t\t\t\tnewMessage.msg = `_${text}_`;\n\t\t\t\t} else {\n\t\t\t\t\tnewMessage.msg = text;\n\t\t\t\t}\n\n\t\t\t\tif (message.thread_ts) {\n\t\t\t\t\tif (message.thread_ts === message.ts) {\n\t\t\t\t\t\tif (message.reply_users) {\n\t\t\t\t\t\t\tconst replies = new Set();\n\t\t\t\t\t\t\tmessage.reply_users.forEach((item) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.length) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (message.replies) {\n\t\t\t\t\t\t\tconst replies = new Set();\n\t\t\t\t\t\t\tmessage.repĺies.forEach((item) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.length) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the parent comment, message: ${newMessage._id}. Missing replies/reply_users field`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewMessage.tcount = message.reply_count;\n\t\t\t\t\t\tnewMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.edited) {\n\t\t\t\t\tnewMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\tif (message.edited.user) {\n\t\t\t\t\t\tnewMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tnewMessage.attachments = this.convertMessageAttachments(message.attachments);\n\t\t\t\t}\n\n\t\t\t\tif (message.icons && message.icons.emoji) {\n\t\t\t\t\tnewMessage.emoji = message.icons.emoji;\n\t\t\t\t}\n\n\t\t\t\tthis.parseMentions(newMessage);\n\t\t\t\tthis.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t}\n\t\t}\n\t}\n\n\t_replaceSlackUserId(userId) {\n\t\tif (userId === 'USLACKBOT') {\n\t\t\treturn 'rocket.cat';\n\t\t}\n\n\t\treturn userId;\n\t}\n\n\t_replaceSlackUserIds(members) {\n\t\treturn members.map((userId) => this._replaceSlackUserId(userId));\n\t}\n\n\tconvertSlackMessageToRocketChat(message) {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n\t\t\tmessage = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n\t\t\tmessage = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n\t\t\tmessage = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n\t\t\tmessage = message.replace(/<@([^|>]*)>/g, '@$1');\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tconvertSlackFileToPendingFile(file) {\n\t\treturn {\n\t\t\tdownloadUrl: file.url_private_download,\n\t\t\tid: file.id,\n\t\t\tsize: file.size,\n\t\t\tname: file.name,\n\t\t\texternal: file.is_external,\n\t\t\tsource: 'slack',\n\t\t\toriginal: {\n\t\t\t\t...file,\n\t\t\t},\n\t\t};\n\t}\n\n\tconvertMessageAttachments(attachments) {\n\t\tif (!attachments || !attachments.length) {\n\t\t\treturn attachments;\n\t\t}\n\n\t\treturn attachments.map((attachment) => ({\n\t\t\t...attachment,\n\t\t\ttext: this.convertSlackMessageToRocketChat(attachment.text),\n\t\t\ttitle: this.convertSlackMessageToRocketChat(attachment.title),\n\t\t\tfallback: this.convertSlackMessageToRocketChat(attachment.fallback),\n\t\t}));\n\t}\n}\n"]},"sourceType":"module","hash":"8821ab7414e44eb11e6801746b84fb975a5389b2"}
