{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatInquiry.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/LivechatInquiry.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatInquiry.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatInquiry.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/LivechatInquiry.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  LivechatInquiry: () => LivechatInquiry\n});\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 0);\n\nclass LivechatInquiry extends Base {\n  constructor() {\n    super('livechat_inquiry');\n    this.tryEnsureIndex({\n      rid: 1\n    }); // room id corresponding to this inquiry\n\n    this.tryEnsureIndex({\n      name: 1\n    }); // name of the inquiry (client name for now)\n\n    this.tryEnsureIndex({\n      message: 1\n    }); // message sent by the client\n\n    this.tryEnsureIndex({\n      ts: 1\n    }); // timestamp\n\n    this.tryEnsureIndex({\n      department: 1\n    });\n    this.tryEnsureIndex({\n      status: 1\n    }); // 'ready', 'queued', 'taken'\n\n    this.tryEnsureIndex({\n      queueOrder: 1,\n      estimatedWaitingTimeQueue: 1,\n      estimatedServiceTimeAt: 1\n    });\n  }\n\n  findOneById(inquiryId) {\n    return this.findOne({\n      _id: inquiryId\n    });\n  }\n\n  findOneByRoomId(rid, options) {\n    return this.findOne({\n      rid\n    }, options);\n  }\n\n  getNextInquiryQueued(department) {\n    return this.findOne(_objectSpread({\n      status: 'queued'\n    }, department && {\n      department\n    }), {\n      sort: {\n        queueOrder: 1,\n        estimatedWaitingTimeQueue: 1,\n        estimatedServiceTimeAt: 1\n      }\n    });\n  }\n\n  getQueuedInquiries(options) {\n    return this.find({\n      status: 'queued'\n    }, options);\n  }\n  /*\n   * mark the inquiry as taken\n   */\n\n\n  takeInquiry(inquiryId) {\n    this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        status: 'taken',\n        takenAt: new Date()\n      },\n      $unset: {\n        defaultAgent: 1,\n        estimatedInactivityCloseTimeAt: 1\n      }\n    });\n  }\n  /*\n   * mark inquiry as open\n   */\n\n\n  openInquiry(inquiryId) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        status: 'open'\n      }\n    });\n  }\n  /*\n   * mark inquiry as queued\n   */\n\n\n  queueInquiry(inquiryId) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        status: 'queued',\n        queuedAt: new Date()\n      },\n      $unset: {\n        takenAt: 1\n      }\n    });\n  }\n\n  queueInquiryAndRemoveDefaultAgent(inquiryId) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        status: 'queued',\n        queuedAt: new Date()\n      },\n      $unset: {\n        takenAt: 1,\n        defaultAgent: 1\n      }\n    });\n  }\n  /*\n   * mark inquiry as ready\n   */\n\n\n  readyInquiry(inquiryId) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        status: 'ready'\n      }\n    });\n  }\n\n  changeDepartmentIdByRoomId(rid, department) {\n    const query = {\n      rid\n    };\n    const update = {\n      $set: {\n        department\n      }\n    };\n    this.update(query, update);\n  }\n  /*\n   * return the status of the inquiry (open or taken)\n   */\n\n\n  getStatus(inquiryId) {\n    return this.findOne({\n      _id: inquiryId\n    }).status;\n  }\n\n  updateVisitorStatus(token, status) {\n    const query = {\n      'v.token': token,\n      'status': 'queued'\n    };\n    const update = {\n      $set: {\n        'v.status': status\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setDefaultAgentById(inquiryId, defaultAgent) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $set: {\n        defaultAgent\n      }\n    });\n  }\n\n  setNameByRoomId(rid, name) {\n    const query = {\n      rid\n    };\n    const update = {\n      $set: {\n        name\n      }\n    };\n    return this.update(query, update);\n  }\n\n  findOneByToken(token) {\n    const query = {\n      'v.token': token,\n      'status': 'queued'\n    };\n    return this.findOne(query);\n  }\n\n  getCurrentSortedQueueAsync(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        _id,\n        department\n      } = _ref;\n      const collectionObj = this.model.rawCollection();\n      const aggregate = [{\n        $match: _objectSpread({\n          status: 'queued'\n        }, department && {\n          department\n        })\n      }, {\n        $sort: {\n          ts: 1\n        }\n      }, {\n        $group: {\n          _id: 1,\n          inquiry: {\n            $push: {\n              _id: '$_id',\n              rid: '$rid',\n              name: '$name',\n              ts: '$ts',\n              status: '$status',\n              department: '$department'\n            }\n          }\n        }\n      }, {\n        $unwind: {\n          path: '$inquiry',\n          includeArrayIndex: 'position'\n        }\n      }, {\n        $project: {\n          _id: '$inquiry._id',\n          rid: '$inquiry.rid',\n          name: '$inquiry.name',\n          ts: '$inquiry.ts',\n          status: '$inquiry.status',\n          department: '$inquiry.department',\n          position: 1\n        }\n      }]; // To get the current room position in the queue, we need to apply the next $match after the $project\n\n      if (_id) {\n        aggregate.push({\n          $match: {\n            _id\n          }\n        });\n      }\n\n      return collectionObj.aggregate(aggregate).toArray();\n    });\n  }\n\n  removeDefaultAgentById(inquiryId) {\n    return this.update({\n      _id: inquiryId\n    }, {\n      $unset: {\n        defaultAgent: 1\n      }\n    });\n  }\n  /*\n   * remove the inquiry by roomId\n   */\n\n\n  removeByRoomId(rid) {\n    return this.remove({\n      rid\n    });\n  }\n\n  removeByVisitorToken(token) {\n    const query = {\n      'v.token': token\n    };\n    this.remove(query);\n  }\n\n  getUnnatendedQueueItems(date) {\n    const query = {\n      status: 'queued',\n      estimatedInactivityCloseTimeAt: {\n        $lte: new Date(date)\n      }\n    };\n    return this.find(query);\n  }\n\n  setEstimatedInactivityCloseTime(_id, date) {\n    return this.update({\n      _id\n    }, {\n      $set: {\n        estimatedInactivityCloseTimeAt: new Date(date)\n      }\n    });\n  } // This is a better solution, but update pipelines are not supported until version 4.2 of mongo\n  // leaving this here for when the time comes\n\n  /* updateEstimatedInactivityCloseTime(milisecondsToAdd) {\n  \treturn this.model.rawCollection().updateMany(\n  \t\t{ status: 'queued' },\n  \t\t[{\n  \t\t\t// in case this field doesn't exists, set at the last time the item was modified (updatedAt)\n  \t\t\t$set: { estimatedInactivityCloseTimeAt: '$_updatedAt' },\n  \t\t}, {\n  \t\t\t$set: {\n  \t\t\t\testimatedInactivityCloseTimeAt: {\n  \t\t\t\t\t$add: ['$estimatedInactivityCloseTimeAt', milisecondsToAdd],\n  \t\t\t\t},\n  \t\t\t},\n  \t\t}],\n  \t);\n  } */\n\n\n}\n\nmodule.exportDefault(new LivechatInquiry());","map":{"version":3,"sources":["app/models/server/models/LivechatInquiry.js"],"names":["_objectSpread","module","link","default","v","export","LivechatInquiry","Base","constructor","tryEnsureIndex","rid","name","message","ts","department","status","queueOrder","estimatedWaitingTimeQueue","estimatedServiceTimeAt","findOneById","inquiryId","findOne","_id","findOneByRoomId","options","getNextInquiryQueued","sort","getQueuedInquiries","find","takeInquiry","update","$set","takenAt","Date","$unset","defaultAgent","estimatedInactivityCloseTimeAt","openInquiry","queueInquiry","queuedAt","queueInquiryAndRemoveDefaultAgent","readyInquiry","changeDepartmentIdByRoomId","query","getStatus","updateVisitorStatus","token","setDefaultAgentById","setNameByRoomId","findOneByToken","getCurrentSortedQueueAsync","collectionObj","model","rawCollection","aggregate","$match","$sort","$group","inquiry","$push","$unwind","path","includeArrayIndex","$project","position","push","toArray","removeDefaultAgentById","removeByRoomId","remove","removeByVisitorToken","getUnnatendedQueueItems","date","$lte","setEstimatedInactivityCloseTime","exportDefault"],"mappings":"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","sourcesContent":["import { Base } from './_Base';\n\nexport class LivechatInquiry extends Base {\n\tconstructor() {\n\t\tsuper('livechat_inquiry');\n\n\t\tthis.tryEnsureIndex({ rid: 1 }); // room id corresponding to this inquiry\n\t\tthis.tryEnsureIndex({ name: 1 }); // name of the inquiry (client name for now)\n\t\tthis.tryEnsureIndex({ message: 1 }); // message sent by the client\n\t\tthis.tryEnsureIndex({ ts: 1 }); // timestamp\n\t\tthis.tryEnsureIndex({ department: 1 });\n\t\tthis.tryEnsureIndex({ status: 1 }); // 'ready', 'queued', 'taken'\n\t\tthis.tryEnsureIndex({ queueOrder: 1, estimatedWaitingTimeQueue: 1, estimatedServiceTimeAt: 1 });\n\t}\n\n\tfindOneById(inquiryId) {\n\t\treturn this.findOne({ _id: inquiryId });\n\t}\n\n\tfindOneByRoomId(rid, options) {\n\t\treturn this.findOne({ rid }, options);\n\t}\n\n\tgetNextInquiryQueued(department) {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tstatus: 'queued',\n\t\t\t\t...(department && { department }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tqueueOrder: 1,\n\t\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\t\testimatedServiceTimeAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tgetQueuedInquiries(options) {\n\t\treturn this.find({ status: 'queued' }, options);\n\t}\n\n\t/*\n\t * mark the inquiry as taken\n\t */\n\ttakeInquiry(inquiryId) {\n\t\tthis.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: 'taken', takenAt: new Date() },\n\t\t\t\t$unset: { defaultAgent: 1, estimatedInactivityCloseTimeAt: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\t/*\n\t * mark inquiry as open\n\t */\n\topenInquiry(inquiryId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: 'open' },\n\t\t\t},\n\t\t);\n\t}\n\n\t/*\n\t * mark inquiry as queued\n\t */\n\tqueueInquiry(inquiryId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: 'queued', queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tqueueInquiryAndRemoveDefaultAgent(inquiryId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: 'queued', queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1, defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\t/*\n\t * mark inquiry as ready\n\t */\n\treadyInquiry(inquiryId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: 'ready',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tchangeDepartmentIdByRoomId(rid, department) {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tthis.update(query, update);\n\t}\n\n\t/*\n\t * return the status of the inquiry (open or taken)\n\t */\n\tgetStatus(inquiryId) {\n\t\treturn this.findOne({ _id: inquiryId }).status;\n\t}\n\n\tupdateVisitorStatus(token, status) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t\t'status': 'queued',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetDefaultAgentById(inquiryId, defaultAgent) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdefaultAgent,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetNameByRoomId(rid, name) {\n\t\tconst query = { rid };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update);\n\t}\n\n\tfindOneByToken(token) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t\t'status': 'queued',\n\t\t};\n\t\treturn this.findOne(query);\n\t}\n\n\tasync getCurrentSortedQueueAsync({ _id, department }) {\n\t\tconst collectionObj = this.model.rawCollection();\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: 'queued',\n\t\t\t\t\t...(department && { department }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tinquiry: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\t\tname: '$name',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tstatus: '$status',\n\t\t\t\t\t\t\tdepartment: '$department',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$inquiry',\n\t\t\t\t\tincludeArrayIndex: 'position',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$inquiry._id',\n\t\t\t\t\trid: '$inquiry.rid',\n\t\t\t\t\tname: '$inquiry.name',\n\t\t\t\t\tts: '$inquiry.ts',\n\t\t\t\t\tstatus: '$inquiry.status',\n\t\t\t\t\tdepartment: '$inquiry.department',\n\t\t\t\t\tposition: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\t// To get the current room position in the queue, we need to apply the next $match after the $project\n\t\tif (_id) {\n\t\t\taggregate.push({ $match: { _id } });\n\t\t}\n\n\t\treturn collectionObj.aggregate(aggregate).toArray();\n\t}\n\n\tremoveDefaultAgentById(inquiryId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\t/*\n\t * remove the inquiry by roomId\n\t */\n\tremoveByRoomId(rid) {\n\t\treturn this.remove({ rid });\n\t}\n\n\tremoveByVisitorToken(token) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tthis.remove(query);\n\t}\n\n\tgetUnnatendedQueueItems(date) {\n\t\tconst query = {\n\t\t\tstatus: 'queued',\n\t\t\testimatedInactivityCloseTimeAt: { $lte: new Date(date) },\n\t\t};\n\t\treturn this.find(query);\n\t}\n\n\tsetEstimatedInactivityCloseTime(_id, date) {\n\t\treturn this.update(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\testimatedInactivityCloseTimeAt: new Date(date),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// This is a better solution, but update pipelines are not supported until version 4.2 of mongo\n\t// leaving this here for when the time comes\n\t/* updateEstimatedInactivityCloseTime(milisecondsToAdd) {\n\t\treturn this.model.rawCollection().updateMany(\n\t\t\t{ status: 'queued' },\n\t\t\t[{\n\t\t\t\t// in case this field doesn't exists, set at the last time the item was modified (updatedAt)\n\t\t\t\t$set: { estimatedInactivityCloseTimeAt: '$_updatedAt' },\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\testimatedInactivityCloseTimeAt: {\n\t\t\t\t\t\t$add: ['$estimatedInactivityCloseTimeAt', milisecondsToAdd],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}],\n\t\t);\n\t} */\n}\n\nexport default new LivechatInquiry();\n"]},"sourceType":"module","hash":"54574562f6b18b4744a3718ae2c82c2ce95d079e"}
