{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/lib/roomTypes/direct.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/lib/lib/roomTypes/direct.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/lib/roomTypes/direct.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/lib/roomTypes/direct.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/lib/roomTypes/direct.js"}},"code":"var _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 0);\nmodule.export({\n  DirectMessageRoomRoute: function () {\n    return DirectMessageRoomRoute;\n  },\n  DirectMessageRoomType: function () {\n    return DirectMessageRoomType;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Session;\nmodule.link(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 1);\nvar ChatRoom, Subscriptions;\nmodule.link(\"../../../models\", {\n  ChatRoom: function (v) {\n    ChatRoom = v;\n  },\n  Subscriptions: function (v) {\n    Subscriptions = v;\n  }\n}, 2);\nvar openRoom;\nmodule.link(\"../../../ui-utils\", {\n  openRoom: function (v) {\n    openRoom = v;\n  }\n}, 3);\nvar getUserPreference, RoomTypeConfig, RoomTypeRouteConfig, RoomSettingsEnum, RoomMemberActions, UiTextContext;\nmodule.link(\"../../../utils\", {\n  getUserPreference: function (v) {\n    getUserPreference = v;\n  },\n  RoomTypeConfig: function (v) {\n    RoomTypeConfig = v;\n  },\n  RoomTypeRouteConfig: function (v) {\n    RoomTypeRouteConfig = v;\n  },\n  RoomSettingsEnum: function (v) {\n    RoomSettingsEnum = v;\n  },\n  RoomMemberActions: function (v) {\n    RoomMemberActions = v;\n  },\n  UiTextContext: function (v) {\n    UiTextContext = v;\n  }\n}, 4);\nvar hasPermission, hasAtLeastOnePermission;\nmodule.link(\"../../../authorization\", {\n  hasPermission: function (v) {\n    hasPermission = v;\n  },\n  hasAtLeastOnePermission: function (v) {\n    hasAtLeastOnePermission = v;\n  }\n}, 5);\nvar settings;\nmodule.link(\"../../../settings\", {\n  settings: function (v) {\n    settings = v;\n  }\n}, 6);\nvar getUserAvatarURL;\nmodule.link(\"../../../utils/lib/getUserAvatarURL\", {\n  getUserAvatarURL: function (v) {\n    getUserAvatarURL = v;\n  }\n}, 7);\nvar getAvatarURL;\nmodule.link(\"../../../utils/lib/getAvatarURL\", {\n  getAvatarURL: function (v) {\n    getAvatarURL = v;\n  }\n}, 8);\n\nvar DirectMessageRoomRoute = /*#__PURE__*/function (_RoomTypeRouteConfig) {\n  _inheritsLoose(DirectMessageRoomRoute, _RoomTypeRouteConfig);\n\n  function DirectMessageRoomRoute() {\n    return _RoomTypeRouteConfig.call(this, {\n      name: 'direct',\n      path: '/direct/:rid/:tab?/:context?'\n    }) || this;\n  }\n\n  var _proto = DirectMessageRoomRoute.prototype;\n\n  _proto.action = function () {\n    function action(params) {\n      return openRoom('d', params.rid);\n    }\n\n    return action;\n  }();\n\n  _proto.link = function () {\n    function link(sub) {\n      return {\n        rid: sub.rid || sub.name\n      };\n    }\n\n    return link;\n  }();\n\n  return DirectMessageRoomRoute;\n}(RoomTypeRouteConfig);\n\nvar DirectMessageRoomType = /*#__PURE__*/function (_RoomTypeConfig) {\n  _inheritsLoose(DirectMessageRoomType, _RoomTypeConfig);\n\n  function DirectMessageRoomType() {\n    return _RoomTypeConfig.call(this, {\n      identifier: 'd',\n      order: 50,\n      icon: 'at',\n      label: 'Direct_Messages',\n      route: new DirectMessageRoomRoute()\n    }) || this;\n  }\n\n  var _proto2 = DirectMessageRoomType.prototype;\n\n  _proto2.getIcon = function () {\n    function getIcon(roomData) {\n      if (this.isGroupChat(roomData)) {\n        return 'balloon';\n      }\n\n      return this.icon;\n    }\n\n    return getIcon;\n  }();\n\n  _proto2.findRoom = function () {\n    function findRoom(identifier) {\n      if (!hasPermission('view-d-room')) {\n        return null;\n      }\n\n      var query = {\n        t: 'd',\n        $or: [{\n          name: identifier\n        }, {\n          rid: identifier\n        }]\n      };\n      var subscription = Subscriptions.findOne(query);\n\n      if (subscription && subscription.rid) {\n        return ChatRoom.findOne(subscription.rid);\n      }\n    }\n\n    return findRoom;\n  }();\n\n  _proto2.roomName = function () {\n    function roomName(roomData) {\n      // this function can receive different types of data\n      // if it doesn't have fname and name properties, should be a Room object\n      // so, need to find the related subscription\n      var subscription = roomData && (roomData.fname || roomData.name) ? roomData : Subscriptions.findOne({\n        rid: roomData._id\n      });\n\n      if (subscription === undefined) {\n        return;\n      }\n\n      if (settings.get('UI_Use_Real_Name') && subscription.fname) {\n        return subscription.fname;\n      }\n\n      return subscription.name;\n    }\n\n    return roomName;\n  }();\n\n  _proto2.secondaryRoomName = function () {\n    function secondaryRoomName(roomData) {\n      if (settings.get('UI_Use_Real_Name')) {\n        var subscription = Subscriptions.findOne({\n          rid: roomData._id\n        }, {\n          fields: {\n            name: 1\n          }\n        });\n        return subscription && subscription.name;\n      }\n    }\n\n    return secondaryRoomName;\n  }();\n\n  _proto2.condition = function () {\n    function condition() {\n      var groupByType = getUserPreference(Meteor.userId(), 'sidebarGroupByType');\n      return groupByType && hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);\n    }\n\n    return condition;\n  }();\n\n  _proto2.getUserStatus = function () {\n    function getUserStatus(roomId) {\n      var subscription = Subscriptions.findOne({\n        rid: roomId\n      });\n\n      if (subscription == null) {\n        return;\n      }\n\n      return Session.get(\"user_\" + subscription.name + \"_status\");\n    }\n\n    return getUserStatus;\n  }();\n\n  _proto2.getUserStatusText = function () {\n    function getUserStatusText(roomId) {\n      var subscription = Subscriptions.findOne({\n        rid: roomId\n      });\n\n      if (subscription == null) {\n        return;\n      }\n\n      return Session.get(\"user_\" + subscription.name + \"_status_text\");\n    }\n\n    return getUserStatusText;\n  }();\n\n  _proto2.allowRoomSettingChange = function () {\n    function allowRoomSettingChange(room, setting) {\n      switch (setting) {\n        case RoomSettingsEnum.TYPE:\n        case RoomSettingsEnum.NAME:\n        case RoomSettingsEnum.SYSTEM_MESSAGES:\n        case RoomSettingsEnum.DESCRIPTION:\n        case RoomSettingsEnum.READ_ONLY:\n        case RoomSettingsEnum.REACT_WHEN_READ_ONLY:\n        case RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:\n        case RoomSettingsEnum.JOIN_CODE:\n          return false;\n\n        case RoomSettingsEnum.E2E:\n          return settings.get('E2E_Enable') === true;\n\n        default:\n          return true;\n      }\n    }\n\n    return allowRoomSettingChange;\n  }();\n\n  _proto2.allowMemberAction = function () {\n    function allowMemberAction(room, action) {\n      switch (action) {\n        case RoomMemberActions.BLOCK:\n          return !this.isGroupChat(room);\n\n        default:\n          return false;\n      }\n    }\n\n    return allowMemberAction;\n  }();\n\n  _proto2.enableMembersListProfile = function () {\n    function enableMembersListProfile() {\n      return true;\n    }\n\n    return enableMembersListProfile;\n  }();\n\n  _proto2.userDetailShowAll = function () {\n    function userDetailShowAll() {\n      return true;\n    }\n\n    return userDetailShowAll;\n  }();\n\n  _proto2.getUiText = function () {\n    function getUiText(context) {\n      switch (context) {\n        case UiTextContext.HIDE_WARNING:\n          return 'Hide_Private_Warning';\n\n        case UiTextContext.LEAVE_WARNING:\n          return 'Leave_Private_Warning';\n\n        default:\n          return '';\n      }\n    }\n\n    return getUiText;\n  }()\n  /**\n   * Returns details to use on notifications\n   *\n   * @param {object} room\n   * @param {object} user\n   * @param {string} notificationMessage\n   * @return {object} Notification details\n   */\n  ;\n\n  _proto2.getNotificationDetails = function () {\n    function getNotificationDetails(room, user, notificationMessage) {\n      if (!Meteor.isServer) {\n        return {};\n      }\n\n      if (this.isGroupChat(room)) {\n        return {\n          title: this.roomName(room),\n          text: (settings.get('UI_Use_Real_Name') && user.name || user.username) + \": \" + notificationMessage\n        };\n      }\n\n      return {\n        title: settings.get('UI_Use_Real_Name') && user.name || user.username,\n        text: notificationMessage\n      };\n    }\n\n    return getNotificationDetails;\n  }();\n\n  _proto2.getAvatarPath = function () {\n    function getAvatarPath(roomData, subData) {\n      if (!roomData && !subData) {\n        return '';\n      } // if coming from sidenav search\n\n\n      if (roomData.name && roomData.avatarETag) {\n        return getUserAvatarURL(roomData.name, roomData.avatarETag);\n      }\n\n      if (this.isGroupChat(roomData)) {\n        return getAvatarURL({\n          username: roomData.uids.length + roomData.usernames.join()\n        });\n      }\n\n      var sub = subData || Subscriptions.findOne({\n        rid: roomData._id\n      }, {\n        fields: {\n          name: 1\n        }\n      });\n\n      if (sub && sub.name) {\n        var user = Meteor.users.findOne({\n          username: sub.name\n        }, {\n          fields: {\n            username: 1,\n            avatarETag: 1\n          }\n        });\n        return getUserAvatarURL((user === null || user === void 0 ? void 0 : user.username) || sub.name, user === null || user === void 0 ? void 0 : user.avatarETag);\n      }\n\n      if (roomData) {\n        return getUserAvatarURL(roomData.name || this.roomName(roomData)); // rooms should have no name for direct messages...\n      }\n    }\n\n    return getAvatarPath;\n  }();\n\n  _proto2.includeInDashboard = function () {\n    function includeInDashboard() {\n      return true;\n    }\n\n    return includeInDashboard;\n  }();\n\n  _proto2.isGroupChat = function () {\n    function isGroupChat(room) {\n      return room && room.uids && room.uids.length > 2;\n    }\n\n    return isGroupChat;\n  }();\n\n  return DirectMessageRoomType;\n}(RoomTypeConfig);","map":{"version":3,"sources":["app/lib/lib/roomTypes/direct.js"],"names":["_inheritsLoose","module","link","default","v","export","DirectMessageRoomRoute","DirectMessageRoomType","Meteor","Session","ChatRoom","Subscriptions","openRoom","getUserPreference","RoomTypeConfig","RoomTypeRouteConfig","RoomSettingsEnum","RoomMemberActions","UiTextContext","hasPermission","hasAtLeastOnePermission","settings","getUserAvatarURL","getAvatarURL","name","path","action","params","rid","sub","identifier","order","icon","label","route","getIcon","roomData","isGroupChat","findRoom","query","t","$or","subscription","findOne","roomName","fname","_id","undefined","get","secondaryRoomName","fields","condition","groupByType","userId","getUserStatus","roomId","getUserStatusText","allowRoomSettingChange","room","setting","TYPE","NAME","SYSTEM_MESSAGES","DESCRIPTION","READ_ONLY","REACT_WHEN_READ_ONLY","ARCHIVE_OR_UNARCHIVE","JOIN_CODE","E2E","allowMemberAction","BLOCK","enableMembersListProfile","userDetailShowAll","getUiText","context","HIDE_WARNING","LEAVE_WARNING","getNotificationDetails","user","notificationMessage","isServer","title","text","username","getAvatarPath","subData","avatarETag","uids","length","usernames","join","users","includeInDashboard"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Session } from 'meteor/session';\n\nimport { ChatRoom, Subscriptions } from '../../../models';\nimport { openRoom } from '../../../ui-utils';\nimport { getUserPreference, RoomTypeConfig, RoomTypeRouteConfig, RoomSettingsEnum, RoomMemberActions, UiTextContext } from '../../../utils';\nimport { hasPermission, hasAtLeastOnePermission } from '../../../authorization';\nimport { settings } from '../../../settings';\nimport { getUserAvatarURL } from '../../../utils/lib/getUserAvatarURL';\nimport { getAvatarURL } from '../../../utils/lib/getAvatarURL';\n\nexport class DirectMessageRoomRoute extends RoomTypeRouteConfig {\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'direct',\n\t\t\tpath: '/direct/:rid/:tab?/:context?',\n\t\t});\n\t}\n\n\taction(params) {\n\t\treturn openRoom('d', params.rid);\n\t}\n\n\tlink(sub) {\n\t\treturn { rid: sub.rid || sub.name };\n\t}\n}\n\nexport class DirectMessageRoomType extends RoomTypeConfig {\n\tconstructor() {\n\t\tsuper({\n\t\t\tidentifier: 'd',\n\t\t\torder: 50,\n\t\t\ticon: 'at',\n\t\t\tlabel: 'Direct_Messages',\n\t\t\troute: new DirectMessageRoomRoute(),\n\t\t});\n\t}\n\n\tgetIcon(roomData) {\n\t\tif (this.isGroupChat(roomData)) {\n\t\t\treturn 'balloon';\n\t\t}\n\t\treturn this.icon;\n\t}\n\n\tfindRoom(identifier) {\n\t\tif (!hasPermission('view-d-room')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\t$or: [{ name: identifier }, { rid: identifier }],\n\t\t};\n\n\t\tconst subscription = Subscriptions.findOne(query);\n\t\tif (subscription && subscription.rid) {\n\t\t\treturn ChatRoom.findOne(subscription.rid);\n\t\t}\n\t}\n\n\troomName(roomData) {\n\t\t// this function can receive different types of data\n\t\t// if it doesn't have fname and name properties, should be a Room object\n\t\t// so, need to find the related subscription\n\t\tconst subscription = roomData && (roomData.fname || roomData.name) ? roomData : Subscriptions.findOne({ rid: roomData._id });\n\n\t\tif (subscription === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (settings.get('UI_Use_Real_Name') && subscription.fname) {\n\t\t\treturn subscription.fname;\n\t\t}\n\n\t\treturn subscription.name;\n\t}\n\n\tsecondaryRoomName(roomData) {\n\t\tif (settings.get('UI_Use_Real_Name')) {\n\t\t\tconst subscription = Subscriptions.findOne({ rid: roomData._id }, { fields: { name: 1 } });\n\t\t\treturn subscription && subscription.name;\n\t\t}\n\t}\n\n\tcondition() {\n\t\tconst groupByType = getUserPreference(Meteor.userId(), 'sidebarGroupByType');\n\t\treturn groupByType && hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);\n\t}\n\n\tgetUserStatus(roomId) {\n\t\tconst subscription = Subscriptions.findOne({ rid: roomId });\n\t\tif (subscription == null) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn Session.get(`user_${subscription.name}_status`);\n\t}\n\n\tgetUserStatusText(roomId) {\n\t\tconst subscription = Subscriptions.findOne({ rid: roomId });\n\t\tif (subscription == null) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn Session.get(`user_${subscription.name}_status_text`);\n\t}\n\n\tallowRoomSettingChange(room, setting) {\n\t\tswitch (setting) {\n\t\t\tcase RoomSettingsEnum.TYPE:\n\t\t\tcase RoomSettingsEnum.NAME:\n\t\t\tcase RoomSettingsEnum.SYSTEM_MESSAGES:\n\t\t\tcase RoomSettingsEnum.DESCRIPTION:\n\t\t\tcase RoomSettingsEnum.READ_ONLY:\n\t\t\tcase RoomSettingsEnum.REACT_WHEN_READ_ONLY:\n\t\t\tcase RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:\n\t\t\tcase RoomSettingsEnum.JOIN_CODE:\n\t\t\t\treturn false;\n\t\t\tcase RoomSettingsEnum.E2E:\n\t\t\t\treturn settings.get('E2E_Enable') === true;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\tallowMemberAction(room, action) {\n\t\tswitch (action) {\n\t\t\tcase RoomMemberActions.BLOCK:\n\t\t\t\treturn !this.isGroupChat(room);\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tenableMembersListProfile() {\n\t\treturn true;\n\t}\n\n\tuserDetailShowAll(/* room */) {\n\t\treturn true;\n\t}\n\n\tgetUiText(context) {\n\t\tswitch (context) {\n\t\t\tcase UiTextContext.HIDE_WARNING:\n\t\t\t\treturn 'Hide_Private_Warning';\n\t\t\tcase UiTextContext.LEAVE_WARNING:\n\t\t\t\treturn 'Leave_Private_Warning';\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Returns details to use on notifications\n\t *\n\t * @param {object} room\n\t * @param {object} user\n\t * @param {string} notificationMessage\n\t * @return {object} Notification details\n\t */\n\tgetNotificationDetails(room, user, notificationMessage) {\n\t\tif (!Meteor.isServer) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (this.isGroupChat(room)) {\n\t\t\treturn {\n\t\t\t\ttitle: this.roomName(room),\n\t\t\t\ttext: `${(settings.get('UI_Use_Real_Name') && user.name) || user.username}: ${notificationMessage}`,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttitle: (settings.get('UI_Use_Real_Name') && user.name) || user.username,\n\t\t\ttext: notificationMessage,\n\t\t};\n\t}\n\n\tgetAvatarPath(roomData, subData) {\n\t\tif (!roomData && !subData) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// if coming from sidenav search\n\t\tif (roomData.name && roomData.avatarETag) {\n\t\t\treturn getUserAvatarURL(roomData.name, roomData.avatarETag);\n\t\t}\n\n\t\tif (this.isGroupChat(roomData)) {\n\t\t\treturn getAvatarURL({ username: roomData.uids.length + roomData.usernames.join() });\n\t\t}\n\n\t\tconst sub = subData || Subscriptions.findOne({ rid: roomData._id }, { fields: { name: 1 } });\n\n\t\tif (sub && sub.name) {\n\t\t\tconst user = Meteor.users.findOne({ username: sub.name }, { fields: { username: 1, avatarETag: 1 } });\n\t\t\treturn getUserAvatarURL(user?.username || sub.name, user?.avatarETag);\n\t\t}\n\n\t\tif (roomData) {\n\t\t\treturn getUserAvatarURL(roomData.name || this.roomName(roomData)); // rooms should have no name for direct messages...\n\t\t}\n\t}\n\n\tincludeInDashboard() {\n\t\treturn true;\n\t}\n\n\tisGroupChat(room) {\n\t\treturn room && room.uids && room.uids.length > 2;\n\t}\n}\n"]},"sourceType":"module","hash":"eeb0c56fa0cbee4feeb17cc1f100fe2f1d8d9abb"}
