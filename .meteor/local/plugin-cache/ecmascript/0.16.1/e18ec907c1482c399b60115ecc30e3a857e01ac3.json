{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/dns.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/lib/dns.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/dns.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/dns.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/lib/dns.js"}},"code":"module.export({\n  registerWithHub: () => registerWithHub,\n  searchHub: () => searchHub,\n  search: () => search\n});\nlet dnsResolver;\nmodule.link(\"dns\", {\n  default(v) {\n    dnsResolver = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet mem;\nmodule.link(\"mem\", {\n  default(v) {\n    mem = v;\n  }\n\n}, 2);\nlet federationErrors;\nmodule.link(\"../functions/errors\", {\n  \"*\"(v) {\n    federationErrors = v;\n  }\n\n}, 3);\nlet dnsLogger;\nmodule.link(\"./logger\", {\n  dnsLogger(v) {\n    dnsLogger = v;\n  }\n\n}, 4);\nlet isFederationEnabled;\nmodule.link(\"./isFederationEnabled\", {\n  isFederationEnabled(v) {\n    isFederationEnabled = v;\n  }\n\n}, 5);\nlet federationRequest;\nmodule.link(\"./http\", {\n  federationRequest(v) {\n    federationRequest = v;\n  }\n\n}, 6);\nconst dnsResolveSRV = Meteor.wrapAsync(dnsResolver.resolveSrv);\nconst dnsResolveTXT = Meteor.wrapAsync(dnsResolver.resolveTxt);\nconst cacheMaxAge = 3600000; // one hour\n\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, {\n  maxAge: cacheMaxAge\n});\nconst memoizedDnsResolveTXT = mem(dnsResolveTXT, {\n  maxAge: cacheMaxAge\n});\nconst hubUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : 'https://hub.rocket.chat';\n\nfunction registerWithHub(peerDomain, url, publicKey) {\n  return Promise.asyncApply(() => {\n    const body = {\n      domain: peerDomain,\n      url,\n      public_key: publicKey\n    };\n\n    try {\n      // If there is no DNS entry for that, get from the Hub\n      Promise.await(federationRequest('POST', \"\".concat(hubUrl, \"/api/v1/peers\"), body));\n      return true;\n    } catch (err) {\n      dnsLogger.error(err);\n      throw federationErrors.peerCouldNotBeRegisteredWithHub('dns.registerWithHub');\n    }\n  });\n}\n\nfunction searchHub(peerDomain) {\n  return Promise.asyncApply(() => {\n    try {\n      dnsLogger.debug(\"searchHub: peerDomain=\".concat(peerDomain)); // If there is no DNS entry for that, get from the Hub\n\n      const {\n        data: {\n          peer\n        }\n      } = Promise.await(federationRequest('GET', \"\".concat(hubUrl, \"/api/v1/peers?search=\").concat(peerDomain)));\n\n      if (!peer) {\n        dnsLogger.debug(\"searchHub: could not find peerDomain=\".concat(peerDomain));\n        throw federationErrors.peerCouldNotBeRegisteredWithHub('dns.registerWithHub');\n      }\n\n      const {\n        url,\n        public_key: publicKey\n      } = peer;\n      dnsLogger.debug(\"searchHub: found peerDomain=\".concat(peerDomain, \" url=\").concat(url));\n      return {\n        url,\n        peerDomain,\n        publicKey\n      };\n    } catch (err) {\n      dnsLogger.error(err);\n      throw federationErrors.peerNotFoundUsingDNS('dns.searchHub');\n    }\n  });\n}\n\nfunction search(peerDomain) {\n  if (!isFederationEnabled()) {\n    throw federationErrors.disabled('dns.search');\n  }\n\n  dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain));\n  let srvEntries = [];\n  let protocol = ''; // Search by HTTPS first\n\n  try {\n    dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain, \" srv=_rocketchat._https.\").concat(peerDomain));\n    srvEntries = memoizedDnsResolveSRV(\"_rocketchat._https.\".concat(peerDomain));\n    protocol = 'https';\n  } catch (err) {// Ignore errors when looking for DNS entries\n  } // If there is not entry, try with http\n\n\n  if (!srvEntries.length) {\n    try {\n      dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain, \" srv=_rocketchat._http.\").concat(peerDomain));\n      srvEntries = memoizedDnsResolveSRV(\"_rocketchat._http.\".concat(peerDomain));\n      protocol = 'http';\n    } catch (err) {// Ignore errors when looking for DNS entries\n    }\n  } // If there is not entry, try with tcp\n\n\n  if (!srvEntries.length) {\n    try {\n      dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain, \" srv=_rocketchat._tcp.\").concat(peerDomain));\n      srvEntries = memoizedDnsResolveSRV(\"_rocketchat._tcp.\".concat(peerDomain));\n      protocol = 'https'; // https is the default\n      // Then, also try to get the protocol\n\n      dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain, \" txt=rocketchat-tcp-protocol.\").concat(peerDomain));\n      protocol = memoizedDnsResolveSRV(\"rocketchat-tcp-protocol.\".concat(peerDomain));\n      protocol = protocol[0].join('');\n\n      if (protocol !== 'http' && protocol !== 'https') {\n        protocol = null;\n      }\n    } catch (err) {// if there is an error while getting the _tcp entry, it means the config is not there\n      // but if there is an error looking for the `_rocketchat_tcp_protocol` entry, it means we should use https\n    }\n  }\n\n  const [srvEntry] = srvEntries; // If there is no entry, throw error\n\n  if (!srvEntry || !protocol) {\n    dnsLogger.debug({\n      msg: 'search: could not find valid SRV entry',\n      peerDomain,\n      srvEntry,\n      protocol\n    });\n    return searchHub(peerDomain);\n  }\n\n  let publicKey = null; // Get the public key from the TXT record\n\n  try {\n    dnsLogger.debug(\"search: peerDomain=\".concat(peerDomain, \" txt=rocketchat-public-key.\").concat(peerDomain));\n    const publicKeyTxtRecords = memoizedDnsResolveTXT(\"rocketchat-public-key.\".concat(peerDomain)); // Join the TXT record, that might be split\n\n    publicKey = publicKeyTxtRecords[0].join('');\n  } catch (err) {// Ignore errors when looking for DNS entries\n  } // If there is no entry, throw error\n\n\n  if (!publicKey) {\n    dnsLogger.debug(\"search: could not find TXT entry for peerDomain=\".concat(peerDomain, \" - SRV entry found\"));\n    return searchHub(peerDomain);\n  }\n\n  dnsLogger.debug({\n    msg: 'search: found',\n    peerDomain,\n    srvEntry,\n    protocol\n  });\n  return {\n    url: \"\".concat(protocol, \"://\").concat(srvEntry.name, \":\").concat(srvEntry.port),\n    peerDomain,\n    publicKey\n  };\n}","map":{"version":3,"sources":["app/federation/server/lib/dns.js"],"names":["module","export","registerWithHub","searchHub","search","dnsResolver","link","default","v","Meteor","mem","federationErrors","dnsLogger","isFederationEnabled","federationRequest","dnsResolveSRV","wrapAsync","resolveSrv","dnsResolveTXT","resolveTxt","cacheMaxAge","memoizedDnsResolveSRV","maxAge","memoizedDnsResolveTXT","hubUrl","process","env","NODE_ENV","peerDomain","url","publicKey","body","domain","public_key","err","error","peerCouldNotBeRegisteredWithHub","debug","data","peer","peerNotFoundUsingDNS","disabled","srvEntries","protocol","length","join","srvEntry","msg","publicKeyTxtRecords","name","port"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,eAAe,EAAC,MAAIA,eAArB;AAAqCC,EAAAA,SAAS,EAAC,MAAIA,SAAnD;AAA6DC,EAAAA,MAAM,EAAC,MAAIA;AAAxE,CAAd;AAA+F,IAAIC,WAAJ;AAAgBL,MAAM,CAACM,IAAP,CAAY,KAAZ,EAAkB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACH,IAAAA,WAAW,GAACG,CAAZ;AAAc;;AAA1B,CAAlB,EAA8C,CAA9C;AAAiD,IAAIC,MAAJ;AAAWT,MAAM,CAACM,IAAP,CAAY,eAAZ,EAA4B;AAACG,EAAAA,MAAM,CAACD,CAAD,EAAG;AAACC,IAAAA,MAAM,GAACD,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIE,GAAJ;AAAQV,MAAM,CAACM,IAAP,CAAY,KAAZ,EAAkB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACE,IAAAA,GAAG,GAACF,CAAJ;AAAM;;AAAlB,CAAlB,EAAsC,CAAtC;AAAyC,IAAIG,gBAAJ;AAAqBX,MAAM,CAACM,IAAP,CAAY,qBAAZ,EAAkC;AAAC,MAAIE,CAAJ,EAAM;AAACG,IAAAA,gBAAgB,GAACH,CAAjB;AAAmB;;AAA3B,CAAlC,EAA+D,CAA/D;AAAkE,IAAII,SAAJ;AAAcZ,MAAM,CAACM,IAAP,CAAY,UAAZ,EAAuB;AAACM,EAAAA,SAAS,CAACJ,CAAD,EAAG;AAACI,IAAAA,SAAS,GAACJ,CAAV;AAAY;;AAA1B,CAAvB,EAAmD,CAAnD;AAAsD,IAAIK,mBAAJ;AAAwBb,MAAM,CAACM,IAAP,CAAY,uBAAZ,EAAoC;AAACO,EAAAA,mBAAmB,CAACL,CAAD,EAAG;AAACK,IAAAA,mBAAmB,GAACL,CAApB;AAAsB;;AAA9C,CAApC,EAAoF,CAApF;AAAuF,IAAIM,iBAAJ;AAAsBd,MAAM,CAACM,IAAP,CAAY,QAAZ,EAAqB;AAACQ,EAAAA,iBAAiB,CAACN,CAAD,EAAG;AAACM,IAAAA,iBAAiB,GAACN,CAAlB;AAAoB;;AAA1C,CAArB,EAAiE,CAAjE;AAUjjB,MAAMO,aAAa,GAAGN,MAAM,CAACO,SAAP,CAAiBX,WAAW,CAACY,UAA7B,CAAtB;AACA,MAAMC,aAAa,GAAGT,MAAM,CAACO,SAAP,CAAiBX,WAAW,CAACc,UAA7B,CAAtB;AAEA,MAAMC,WAAW,GAAG,OAApB,C,CAA6B;;AAC7B,MAAMC,qBAAqB,GAAGX,GAAG,CAACK,aAAD,EAAgB;AAAEO,EAAAA,MAAM,EAAEF;AAAV,CAAhB,CAAjC;AACA,MAAMG,qBAAqB,GAAGb,GAAG,CAACQ,aAAD,EAAgB;AAAEI,EAAAA,MAAM,EAAEF;AAAV,CAAhB,CAAjC;AAEA,MAAMI,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,uBAAzC,GAAmE,yBAAlF;;AAEO,SAAezB,eAAf,CAA+B0B,UAA/B,EAA2CC,GAA3C,EAAgDC,SAAhD;AAAA,kCAA2D;AACjE,UAAMC,IAAI,GAAG;AAAEC,MAAAA,MAAM,EAAEJ,UAAV;AAAsBC,MAAAA,GAAtB;AAA2BI,MAAAA,UAAU,EAAEH;AAAvC,KAAb;;AAEA,QAAI;AACH;AACA,oBAAMhB,iBAAiB,CAAC,MAAD,YAAYU,MAAZ,oBAAmCO,IAAnC,CAAvB;AAEA,aAAO,IAAP;AACA,KALD,CAKE,OAAOG,GAAP,EAAY;AACbtB,MAAAA,SAAS,CAACuB,KAAV,CAAgBD,GAAhB;AAEA,YAAMvB,gBAAgB,CAACyB,+BAAjB,CAAiD,qBAAjD,CAAN;AACA;AACD,GAbM;AAAA;;AAeA,SAAejC,SAAf,CAAyByB,UAAzB;AAAA,kCAAqC;AAC3C,QAAI;AACHhB,MAAAA,SAAS,CAACyB,KAAV,iCAAyCT,UAAzC,GADG,CAGH;;AACA,YAAM;AACLU,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADD,wBAEIzB,iBAAiB,CAAC,KAAD,YAAWU,MAAX,kCAAyCI,UAAzC,EAFrB,CAAN;;AAIA,UAAI,CAACW,IAAL,EAAW;AACV3B,QAAAA,SAAS,CAACyB,KAAV,gDAAwDT,UAAxD;AACA,cAAMjB,gBAAgB,CAACyB,+BAAjB,CAAiD,qBAAjD,CAAN;AACA;;AAED,YAAM;AAAEP,QAAAA,GAAF;AAAOI,QAAAA,UAAU,EAAEH;AAAnB,UAAiCS,IAAvC;AAEA3B,MAAAA,SAAS,CAACyB,KAAV,uCAA+CT,UAA/C,kBAAiEC,GAAjE;AAEA,aAAO;AACNA,QAAAA,GADM;AAEND,QAAAA,UAFM;AAGNE,QAAAA;AAHM,OAAP;AAKA,KAtBD,CAsBE,OAAOI,GAAP,EAAY;AACbtB,MAAAA,SAAS,CAACuB,KAAV,CAAgBD,GAAhB;AAEA,YAAMvB,gBAAgB,CAAC6B,oBAAjB,CAAsC,eAAtC,CAAN;AACA;AACD,GA5BM;AAAA;;AA8BA,SAASpC,MAAT,CAAgBwB,UAAhB,EAA4B;AAClC,MAAI,CAACf,mBAAmB,EAAxB,EAA4B;AAC3B,UAAMF,gBAAgB,CAAC8B,QAAjB,CAA0B,YAA1B,CAAN;AACA;;AAED7B,EAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC;AAEA,MAAIc,UAAU,GAAG,EAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf,CARkC,CAUlC;;AACA,MAAI;AACH/B,IAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC,qCAA2EA,UAA3E;AACAc,IAAAA,UAAU,GAAGrB,qBAAqB,8BAAuBO,UAAvB,EAAlC;AACAe,IAAAA,QAAQ,GAAG,OAAX;AACA,GAJD,CAIE,OAAOT,GAAP,EAAY,CACb;AACA,GAjBiC,CAmBlC;;;AACA,MAAI,CAACQ,UAAU,CAACE,MAAhB,EAAwB;AACvB,QAAI;AACHhC,MAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC,oCAA0EA,UAA1E;AACAc,MAAAA,UAAU,GAAGrB,qBAAqB,6BAAsBO,UAAtB,EAAlC;AACAe,MAAAA,QAAQ,GAAG,MAAX;AACA,KAJD,CAIE,OAAOT,GAAP,EAAY,CACb;AACA;AACD,GA5BiC,CA8BlC;;;AACA,MAAI,CAACQ,UAAU,CAACE,MAAhB,EAAwB;AACvB,QAAI;AACHhC,MAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC,mCAAyEA,UAAzE;AACAc,MAAAA,UAAU,GAAGrB,qBAAqB,4BAAqBO,UAArB,EAAlC;AACAe,MAAAA,QAAQ,GAAG,OAAX,CAHG,CAGiB;AAEpB;;AACA/B,MAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC,0CAAgFA,UAAhF;AACAe,MAAAA,QAAQ,GAAGtB,qBAAqB,mCAA4BO,UAA5B,EAAhC;AACAe,MAAAA,QAAQ,GAAGA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,EAAjB,CAAX;;AAEA,UAAIF,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAChDA,QAAAA,QAAQ,GAAG,IAAX;AACA;AACD,KAbD,CAaE,OAAOT,GAAP,EAAY,CACb;AACA;AACA;AACD;;AAED,QAAM,CAACY,QAAD,IAAaJ,UAAnB,CAnDkC,CAqDlC;;AACA,MAAI,CAACI,QAAD,IAAa,CAACH,QAAlB,EAA4B;AAC3B/B,IAAAA,SAAS,CAACyB,KAAV,CAAgB;AACfU,MAAAA,GAAG,EAAE,wCADU;AAEfnB,MAAAA,UAFe;AAGfkB,MAAAA,QAHe;AAIfH,MAAAA;AAJe,KAAhB;AAMA,WAAOxC,SAAS,CAACyB,UAAD,CAAhB;AACA;;AAED,MAAIE,SAAS,GAAG,IAAhB,CAhEkC,CAkElC;;AACA,MAAI;AACHlB,IAAAA,SAAS,CAACyB,KAAV,8BAAsCT,UAAtC,wCAA8EA,UAA9E;AACA,UAAMoB,mBAAmB,GAAGzB,qBAAqB,iCAA0BK,UAA1B,EAAjD,CAFG,CAIH;;AACAE,IAAAA,SAAS,GAAGkB,mBAAmB,CAAC,CAAD,CAAnB,CAAuBH,IAAvB,CAA4B,EAA5B,CAAZ;AACA,GAND,CAME,OAAOX,GAAP,EAAY,CACb;AACA,GA3EiC,CA6ElC;;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACflB,IAAAA,SAAS,CAACyB,KAAV,2DAAmET,UAAnE;AACA,WAAOzB,SAAS,CAACyB,UAAD,CAAhB;AACA;;AAEDhB,EAAAA,SAAS,CAACyB,KAAV,CAAgB;AAAEU,IAAAA,GAAG,EAAE,eAAP;AAAwBnB,IAAAA,UAAxB;AAAoCkB,IAAAA,QAApC;AAA8CH,IAAAA;AAA9C,GAAhB;AAEA,SAAO;AACNd,IAAAA,GAAG,YAAKc,QAAL,gBAAmBG,QAAQ,CAACG,IAA5B,cAAoCH,QAAQ,CAACI,IAA7C,CADG;AAENtB,IAAAA,UAFM;AAGNE,IAAAA;AAHM,GAAP;AAKA","sourcesContent":["import dnsResolver from 'dns';\n\nimport { Meteor } from 'meteor/meteor';\nimport mem from 'mem';\n\nimport * as federationErrors from '../functions/errors';\nimport { dnsLogger } from './logger';\nimport { isFederationEnabled } from './isFederationEnabled';\nimport { federationRequest } from './http';\n\nconst dnsResolveSRV = Meteor.wrapAsync(dnsResolver.resolveSrv);\nconst dnsResolveTXT = Meteor.wrapAsync(dnsResolver.resolveTxt);\n\nconst cacheMaxAge = 3600000; // one hour\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, { maxAge: cacheMaxAge });\nconst memoizedDnsResolveTXT = mem(dnsResolveTXT, { maxAge: cacheMaxAge });\n\nconst hubUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : 'https://hub.rocket.chat';\n\nexport async function registerWithHub(peerDomain, url, publicKey) {\n\tconst body = { domain: peerDomain, url, public_key: publicKey };\n\n\ttry {\n\t\t// If there is no DNS entry for that, get from the Hub\n\t\tawait federationRequest('POST', `${hubUrl}/api/v1/peers`, body);\n\n\t\treturn true;\n\t} catch (err) {\n\t\tdnsLogger.error(err);\n\n\t\tthrow federationErrors.peerCouldNotBeRegisteredWithHub('dns.registerWithHub');\n\t}\n}\n\nexport async function searchHub(peerDomain) {\n\ttry {\n\t\tdnsLogger.debug(`searchHub: peerDomain=${peerDomain}`);\n\n\t\t// If there is no DNS entry for that, get from the Hub\n\t\tconst {\n\t\t\tdata: { peer },\n\t\t} = await federationRequest('GET', `${hubUrl}/api/v1/peers?search=${peerDomain}`);\n\n\t\tif (!peer) {\n\t\t\tdnsLogger.debug(`searchHub: could not find peerDomain=${peerDomain}`);\n\t\t\tthrow federationErrors.peerCouldNotBeRegisteredWithHub('dns.registerWithHub');\n\t\t}\n\n\t\tconst { url, public_key: publicKey } = peer;\n\n\t\tdnsLogger.debug(`searchHub: found peerDomain=${peerDomain} url=${url}`);\n\n\t\treturn {\n\t\t\turl,\n\t\t\tpeerDomain,\n\t\t\tpublicKey,\n\t\t};\n\t} catch (err) {\n\t\tdnsLogger.error(err);\n\n\t\tthrow federationErrors.peerNotFoundUsingDNS('dns.searchHub');\n\t}\n}\n\nexport function search(peerDomain) {\n\tif (!isFederationEnabled()) {\n\t\tthrow federationErrors.disabled('dns.search');\n\t}\n\n\tdnsLogger.debug(`search: peerDomain=${peerDomain}`);\n\n\tlet srvEntries = [];\n\tlet protocol = '';\n\n\t// Search by HTTPS first\n\ttry {\n\t\tdnsLogger.debug(`search: peerDomain=${peerDomain} srv=_rocketchat._https.${peerDomain}`);\n\t\tsrvEntries = memoizedDnsResolveSRV(`_rocketchat._https.${peerDomain}`);\n\t\tprotocol = 'https';\n\t} catch (err) {\n\t\t// Ignore errors when looking for DNS entries\n\t}\n\n\t// If there is not entry, try with http\n\tif (!srvEntries.length) {\n\t\ttry {\n\t\t\tdnsLogger.debug(`search: peerDomain=${peerDomain} srv=_rocketchat._http.${peerDomain}`);\n\t\t\tsrvEntries = memoizedDnsResolveSRV(`_rocketchat._http.${peerDomain}`);\n\t\t\tprotocol = 'http';\n\t\t} catch (err) {\n\t\t\t// Ignore errors when looking for DNS entries\n\t\t}\n\t}\n\n\t// If there is not entry, try with tcp\n\tif (!srvEntries.length) {\n\t\ttry {\n\t\t\tdnsLogger.debug(`search: peerDomain=${peerDomain} srv=_rocketchat._tcp.${peerDomain}`);\n\t\t\tsrvEntries = memoizedDnsResolveSRV(`_rocketchat._tcp.${peerDomain}`);\n\t\t\tprotocol = 'https'; // https is the default\n\n\t\t\t// Then, also try to get the protocol\n\t\t\tdnsLogger.debug(`search: peerDomain=${peerDomain} txt=rocketchat-tcp-protocol.${peerDomain}`);\n\t\t\tprotocol = memoizedDnsResolveSRV(`rocketchat-tcp-protocol.${peerDomain}`);\n\t\t\tprotocol = protocol[0].join('');\n\n\t\t\tif (protocol !== 'http' && protocol !== 'https') {\n\t\t\t\tprotocol = null;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// if there is an error while getting the _tcp entry, it means the config is not there\n\t\t\t// but if there is an error looking for the `_rocketchat_tcp_protocol` entry, it means we should use https\n\t\t}\n\t}\n\n\tconst [srvEntry] = srvEntries;\n\n\t// If there is no entry, throw error\n\tif (!srvEntry || !protocol) {\n\t\tdnsLogger.debug({\n\t\t\tmsg: 'search: could not find valid SRV entry',\n\t\t\tpeerDomain,\n\t\t\tsrvEntry,\n\t\t\tprotocol,\n\t\t});\n\t\treturn searchHub(peerDomain);\n\t}\n\n\tlet publicKey = null;\n\n\t// Get the public key from the TXT record\n\ttry {\n\t\tdnsLogger.debug(`search: peerDomain=${peerDomain} txt=rocketchat-public-key.${peerDomain}`);\n\t\tconst publicKeyTxtRecords = memoizedDnsResolveTXT(`rocketchat-public-key.${peerDomain}`);\n\n\t\t// Join the TXT record, that might be split\n\t\tpublicKey = publicKeyTxtRecords[0].join('');\n\t} catch (err) {\n\t\t// Ignore errors when looking for DNS entries\n\t}\n\n\t// If there is no entry, throw error\n\tif (!publicKey) {\n\t\tdnsLogger.debug(`search: could not find TXT entry for peerDomain=${peerDomain} - SRV entry found`);\n\t\treturn searchHub(peerDomain);\n\t}\n\n\tdnsLogger.debug({ msg: 'search: found', peerDomain, srvEntry, protocol });\n\n\treturn {\n\t\turl: `${protocol}://${srvEntry.name}:${srvEntry.port}`,\n\t\tpeerDomain,\n\t\tpublicKey,\n\t};\n}\n"]},"sourceType":"module","hash":"e18ec907c1482c399b60115ecc30e3a857e01ac3"}
