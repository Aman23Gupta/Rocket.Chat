{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js"}},"code":"module.export({\n  getRoomByNameOrIdWithOptionToJoin: () => getRoomByNameOrIdWithOptionToJoin\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Rooms, Users, Subscriptions;\nmodule.link(\"../../../models\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\n\nconst getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin(_ref) {\n  let {\n    currentUserId,\n    nameOrId,\n    type = '',\n    tryDirectByUserIdOnly = false,\n    joinChannel = true,\n    errorOnEmpty = true\n  } = _ref;\n  let room; // If the nameOrId starts with #, then let's try to find a channel or group\n\n  if (nameOrId.startsWith('#')) {\n    nameOrId = nameOrId.substring(1);\n    room = Rooms.findOneByIdOrName(nameOrId);\n  } else if (nameOrId.startsWith('@') || type === 'd') {\n    // If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n    nameOrId = nameOrId.replace('@', '');\n    let roomUser;\n\n    if (tryDirectByUserIdOnly) {\n      roomUser = Users.findOneById(nameOrId);\n    } else {\n      roomUser = Users.findOne({\n        $or: [{\n          _id: nameOrId\n        }, {\n          username: nameOrId\n        }]\n      });\n    }\n\n    const rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;\n    room = Rooms.findOneById(rid); // If the room hasn't been found yet, let's try some more\n\n    if (!_.isObject(room)) {\n      // If the roomUser wasn't found, then there's no destination to point towards\n      // so return out based upon errorOnEmpty\n      if (!_.isObject(roomUser)) {\n        if (errorOnEmpty) {\n          throw new Meteor.Error('invalid-channel');\n        } else {\n          return;\n        }\n      }\n\n      room = Meteor.runAsUser(currentUserId, function () {\n        const {\n          rid\n        } = Meteor.call('createDirectMessage', roomUser.username);\n        return Rooms.findOneById(rid);\n      });\n    }\n  } else {\n    // Otherwise, we'll treat this as a channel or group.\n    room = Rooms.findOneByIdOrName(nameOrId);\n  } // If no room was found, handle the room return based upon errorOnEmpty\n\n\n  if (!room && errorOnEmpty) {\n    throw new Meteor.Error('invalid-channel');\n  } else if (!room) {\n    return;\n  } // If a room was found and they provided a type to search, then check\n  // and if the type found isn't what we're looking for then handle\n  // the return based upon errorOnEmpty\n\n\n  if (type && room.t !== type) {\n    if (errorOnEmpty) {\n      throw new Meteor.Error('invalid-channel');\n    } else {\n      return;\n    }\n  } // If the room type is channel and joinChannel has been passed, try to join them\n  // if they can't join the room, this will error out!\n\n\n  if (room.t === 'c' && joinChannel) {\n    const sub = Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);\n\n    if (!sub) {\n      Meteor.runAsUser(currentUserId, function () {\n        return Meteor.call('joinRoom', room._id);\n      });\n    }\n  }\n\n  return room;\n};","map":{"version":3,"sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js"],"names":["module","export","getRoomByNameOrIdWithOptionToJoin","Meteor","link","v","_","default","Rooms","Users","Subscriptions","_getRoomByNameOrIdWithOptionToJoin","currentUserId","nameOrId","type","tryDirectByUserIdOnly","joinChannel","errorOnEmpty","room","startsWith","substring","findOneByIdOrName","replace","roomUser","findOneById","findOne","$or","_id","username","rid","isObject","sort","join","Error","runAsUser","call","t","sub","findOneByRoomIdAndUserId"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { Rooms, Users, Subscriptions } from '../../../models';\n\nexport const getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin({\n\tcurrentUserId,\n\tnameOrId,\n\ttype = '',\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}) {\n\tlet room;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\tconst rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;\n\t\troom = Rooms.findOneById(rid);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!_.isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!_.isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troom = Meteor.runAsUser(currentUserId, function () {\n\t\t\t\tconst { rid } = Meteor.call('createDirectMessage', roomUser.username);\n\t\t\t\treturn Rooms.findOneById(rid);\n\t\t\t});\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t} else if (!room) {\n\t\treturn;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tconst sub = Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);\n\n\t\tif (!sub) {\n\t\t\tMeteor.runAsUser(currentUserId, function () {\n\t\t\t\treturn Meteor.call('joinRoom', room._id);\n\t\t\t});\n\t\t}\n\t}\n\n\treturn room;\n};\n"]},"sourceType":"module","hash":"b5e7d4a8120162b3741e99ced9a01086987acead"}
