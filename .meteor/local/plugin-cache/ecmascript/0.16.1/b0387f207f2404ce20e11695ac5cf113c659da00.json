{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/imports/server/rest/sms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/imports/server/rest/sms.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/imports/server/rest/sms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/imports/server/rest/sms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/imports/server/rest/sms.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet fetch;\nmodule.link(\"meteor/fetch\", {\n  fetch(v) {\n    fetch = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet FileUpload;\nmodule.link(\"../../../../file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 3);\nlet LivechatRooms, LivechatVisitors, LivechatDepartment;\nmodule.link(\"../../../../models/server\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  }\n\n}, 4);\nlet API;\nmodule.link(\"../../../../api/server\", {\n  API(v) {\n    API = v;\n  }\n\n}, 5);\nlet SMS;\nmodule.link(\"../../../../sms\", {\n  SMS(v) {\n    SMS = v;\n  }\n\n}, 6);\nlet Livechat;\nmodule.link(\"../../../server/lib/Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 7);\nlet OmnichannelSourceType;\nmodule.link(\"../../../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 8);\n\nconst getUploadFile = (details, fileUrl) => Promise.asyncApply(() => {\n  const response = Promise.await(fetch(fileUrl));\n  const content = Buffer.from(Promise.await(response.arrayBuffer()));\n  const contentSize = content.length;\n\n  if (response.status !== 200 || contentSize === 0) {\n    throw new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n  }\n\n  const fileStore = FileUpload.getStore('Uploads');\n  return fileStore.insertSync(_objectSpread(_objectSpread({}, details), {}, {\n    size: contentSize\n  }), content);\n});\n\nconst defineDepartment = idOrName => {\n  if (!idOrName || idOrName === '') {\n    return;\n  }\n\n  const department = LivechatDepartment.findOneByIdOrName(idOrName);\n  return department && department._id;\n};\n\nconst defineVisitor = (smsNumber, targetDepartment) => {\n  const visitor = LivechatVisitors.findOneVisitorByPhone(smsNumber);\n  let data = {\n    token: visitor && visitor.token || Random.id()\n  };\n\n  if (!visitor) {\n    data = Object.assign(data, {\n      username: smsNumber.replace(/[^0-9]/g, ''),\n      phone: {\n        number: smsNumber\n      }\n    });\n  }\n\n  if (targetDepartment) {\n    data.department = targetDepartment;\n  }\n\n  const id = Livechat.registerGuest(data);\n  return LivechatVisitors.findOneById(id);\n};\n\nconst normalizeLocationSharing = payload => {\n  const {\n    extra: {\n      fromLatitude: latitude,\n      fromLongitude: longitude\n    } = {}\n  } = payload;\n\n  if (!latitude || !longitude) {\n    return;\n  }\n\n  return {\n    type: 'Point',\n    coordinates: [parseFloat(longitude), parseFloat(latitude)]\n  };\n};\n\nAPI.v1.addRoute('livechat/sms-incoming/:service', {\n  post() {\n    return Promise.asyncApply(() => {\n      const SMSService = SMS.getService(this.urlParams.service);\n      const sms = SMSService.parse(this.bodyParams);\n      const {\n        department\n      } = this.queryParams;\n      let targetDepartment = defineDepartment(department || SMS.department);\n\n      if (!targetDepartment) {\n        targetDepartment = defineDepartment(SMS.department);\n      }\n\n      const visitor = defineVisitor(sms.from, targetDepartment);\n      const {\n        token\n      } = visitor;\n      const room = LivechatRooms.findOneOpenByVisitorTokenAndDepartmentId(token, targetDepartment);\n      const roomExists = !!room;\n      const location = normalizeLocationSharing(sms);\n      const rid = room && room._id || Random.id();\n      const sendMessage = {\n        guest: visitor,\n        roomInfo: {\n          sms: {\n            from: sms.to\n          },\n          source: {\n            type: OmnichannelSourceType.SMS,\n            alias: this.urlParams.service\n          }\n        }\n      }; // create an empty room first place, so attachments have a place to live\n\n      if (!roomExists) {\n        Promise.await(Livechat.getRoom(visitor, {\n          rid,\n          token,\n          msg: ''\n        }, sendMessage.roomInfo, undefined));\n      }\n\n      let file;\n      let attachments;\n      const [media] = sms.media;\n\n      if (media) {\n        const {\n          url: smsUrl,\n          contentType\n        } = media;\n        const details = {\n          name: 'Upload File',\n          type: contentType,\n          rid,\n          visitorToken: token\n        };\n        let attachment;\n\n        try {\n          const uploadedFile = Promise.await(getUploadFile(details, smsUrl));\n          file = {\n            _id: uploadedFile._id,\n            name: uploadedFile.name,\n            type: uploadedFile.type\n          };\n          const fileUrl = FileUpload.getPath(\"\".concat(file._id, \"/\").concat(encodeURI(file.name)));\n          attachment = {\n            title: file.name,\n            type: 'file',\n            description: file.description,\n            title_link: fileUrl\n          };\n\n          if (/^image\\/.+/.test(file.type)) {\n            attachment.image_url = fileUrl;\n            attachment.image_type = file.type;\n            attachment.image_size = file.size;\n            attachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n          } else if (/^audio\\/.+/.test(file.type)) {\n            attachment.audio_url = fileUrl;\n            attachment.audio_type = file.type;\n            attachment.audio_size = file.size;\n            attachment.title_link_download = true;\n          } else if (/^video\\/.+/.test(file.type)) {\n            attachment.video_url = fileUrl;\n            attachment.video_type = file.type;\n            attachment.video_size = file.size;\n            attachment.title_link_download = true;\n          } else {\n            attachment.title_link_download = true;\n          }\n        } catch (e) {\n          Livechat.logger.error(\"Attachment upload failed: \".concat(e.message));\n          attachment = {\n            fields: [{\n              title: 'User upload failed',\n              value: 'An attachment was received, but upload to server failed',\n              short: true\n            }],\n            color: 'yellow'\n          };\n        }\n\n        attachments = [attachment];\n      }\n\n      sendMessage.message = _objectSpread(_objectSpread(_objectSpread({\n        _id: Random.id(),\n        rid,\n        token,\n        msg: sms.body\n      }, location && {\n        location\n      }), attachments && {\n        attachments\n      }), file && {\n        file\n      });\n\n      try {\n        const msg = SMSService.response.call(this, Promise.await(Livechat.sendMessage(sendMessage)));\n        Meteor.defer(() => {\n          if (sms.extra) {\n            if (sms.extra.fromCountry) {\n              Meteor.call('livechat:setCustomField', sendMessage.message.token, 'country', sms.extra.fromCountry);\n            }\n\n            if (sms.extra.fromState) {\n              Meteor.call('livechat:setCustomField', sendMessage.message.token, 'state', sms.extra.fromState);\n            }\n\n            if (sms.extra.fromCity) {\n              Meteor.call('livechat:setCustomField', sendMessage.message.token, 'city', sms.extra.fromCity);\n            }\n          }\n        });\n        return msg;\n      } catch (e) {\n        return SMSService.error.call(this, e);\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["app/livechat/imports/server/rest/sms.js"],"names":["_objectSpread","module","link","default","v","fetch","Meteor","Random","FileUpload","LivechatRooms","LivechatVisitors","LivechatDepartment","API","SMS","Livechat","OmnichannelSourceType","getUploadFile","details","fileUrl","response","content","Buffer","from","arrayBuffer","contentSize","length","status","Error","fileStore","getStore","insertSync","size","defineDepartment","idOrName","department","findOneByIdOrName","_id","defineVisitor","smsNumber","targetDepartment","visitor","findOneVisitorByPhone","data","token","id","Object","assign","username","replace","phone","number","registerGuest","findOneById","normalizeLocationSharing","payload","extra","fromLatitude","latitude","fromLongitude","longitude","type","coordinates","parseFloat","v1","addRoute","post","SMSService","getService","urlParams","service","sms","parse","bodyParams","queryParams","room","findOneOpenByVisitorTokenAndDepartmentId","roomExists","location","rid","sendMessage","guest","roomInfo","to","source","alias","getRoom","msg","undefined","file","attachments","media","url","smsUrl","contentType","name","visitorToken","attachment","uploadedFile","getPath","encodeURI","title","description","title_link","test","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","title_link_download","video_url","video_type","video_size","e","logger","error","message","fields","value","short","color","body","call","defer","fromCountry","fromState","fromCity"],"mappings":"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","sourcesContent":["import { fetch } from 'meteor/fetch';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport { FileUpload } from '../../../../file-upload/server';\nimport { LivechatRooms, LivechatVisitors, LivechatDepartment } from '../../../../models/server';\nimport { API } from '../../../../api/server';\nimport { SMS } from '../../../../sms';\nimport { Livechat } from '../../../server/lib/Livechat';\nimport { OmnichannelSourceType } from '../../../../../definition/IRoom';\n\nconst getUploadFile = async (details, fileUrl) => {\n\tconst response = await fetch(fileUrl);\n\n\tconst content = Buffer.from(await response.arrayBuffer());\n\n\tconst contentSize = content.length;\n\n\tif (response.status !== 200 || contentSize === 0) {\n\t\tthrow new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n\t}\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insertSync({ ...details, size: contentSize }, content);\n};\n\nconst defineDepartment = (idOrName) => {\n\tif (!idOrName || idOrName === '') {\n\t\treturn;\n\t}\n\n\tconst department = LivechatDepartment.findOneByIdOrName(idOrName);\n\treturn department && department._id;\n};\n\nconst defineVisitor = (smsNumber, targetDepartment) => {\n\tconst visitor = LivechatVisitors.findOneVisitorByPhone(smsNumber);\n\tlet data = {\n\t\ttoken: (visitor && visitor.token) || Random.id(),\n\t};\n\n\tif (!visitor) {\n\t\tdata = Object.assign(data, {\n\t\t\tusername: smsNumber.replace(/[^0-9]/g, ''),\n\t\t\tphone: {\n\t\t\t\tnumber: smsNumber,\n\t\t\t},\n\t\t});\n\t}\n\n\tif (targetDepartment) {\n\t\tdata.department = targetDepartment;\n\t}\n\n\tconst id = Livechat.registerGuest(data);\n\treturn LivechatVisitors.findOneById(id);\n};\n\nconst normalizeLocationSharing = (payload) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tif (!latitude || !longitude) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\ttype: 'Point',\n\t\tcoordinates: [parseFloat(longitude), parseFloat(latitude)],\n\t};\n};\n\nAPI.v1.addRoute('livechat/sms-incoming/:service', {\n\tasync post() {\n\t\tconst SMSService = SMS.getService(this.urlParams.service);\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tlet targetDepartment = defineDepartment(department || SMS.department);\n\t\tif (!targetDepartment) {\n\t\t\ttargetDepartment = defineDepartment(SMS.department);\n\t\t}\n\n\t\tconst visitor = defineVisitor(sms.from, targetDepartment);\n\t\tconst { token } = visitor;\n\t\tconst room = LivechatRooms.findOneOpenByVisitorTokenAndDepartmentId(token, targetDepartment);\n\t\tconst roomExists = !!room;\n\t\tconst location = normalizeLocationSharing(sms);\n\t\tconst rid = (room && room._id) || Random.id();\n\n\t\tconst sendMessage = {\n\t\t\tguest: visitor,\n\t\t\troomInfo: {\n\t\t\t\tsms: {\n\t\t\t\t\tfrom: sms.to,\n\t\t\t\t},\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.SMS,\n\t\t\t\t\talias: this.urlParams.service,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// create an empty room first place, so attachments have a place to live\n\t\tif (!roomExists) {\n\t\t\tawait Livechat.getRoom(visitor, { rid, token, msg: '' }, sendMessage.roomInfo, undefined);\n\t\t}\n\n\t\tlet file;\n\t\tlet attachments;\n\n\t\tconst [media] = sms.media;\n\t\tif (media) {\n\t\t\tconst { url: smsUrl, contentType } = media;\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\tlet attachment;\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name, type: uploadedFile.type };\n\t\t\t\tconst fileUrl = FileUpload.getPath(`${file._id}/${encodeURI(file.name)}`);\n\n\t\t\t\tattachment = {\n\t\t\t\t\ttitle: file.name,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tdescription: file.description,\n\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t};\n\n\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\tattachment.image_url = fileUrl;\n\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\tattachment.image_dimensions = file.identify != null ? file.identify.size : undefined;\n\t\t\t\t} else if (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\tattachment.audio_url = fileUrl;\n\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\tattachment.title_link_download = true;\n\t\t\t\t} else if (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\tattachment.video_url = fileUrl;\n\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\tattachment.title_link_download = true;\n\t\t\t\t} else {\n\t\t\t\t\tattachment.title_link_download = true;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tLivechat.logger.error(`Attachment upload failed: ${e.message}`);\n\t\t\t\tattachment = {\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: 'User upload failed',\n\t\t\t\t\t\t\tvalue: 'An attachment was received, but upload to server failed',\n\t\t\t\t\t\t\tshort: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcolor: 'yellow',\n\t\t\t\t};\n\t\t\t}\n\t\t\tattachments = [attachment];\n\t\t}\n\n\t\tsendMessage.message = {\n\t\t\t_id: Random.id(),\n\t\t\trid,\n\t\t\ttoken,\n\t\t\tmsg: sms.body,\n\t\t\t...(location && { location }),\n\t\t\t...(attachments && { attachments }),\n\t\t\t...(file && { file }),\n\t\t};\n\n\t\ttry {\n\t\t\tconst msg = SMSService.response.call(this, await Livechat.sendMessage(sendMessage));\n\t\t\tMeteor.defer(() => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tMeteor.call('livechat:setCustomField', sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tMeteor.call('livechat:setCustomField', sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tMeteor.call('livechat:setCustomField', sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e) {\n\t\t\treturn SMSService.error.call(this, e);\n\t\t}\n\t},\n});\n"]},"sourceType":"module","hash":"b0387f207f2404ce20e11695ac5cf113c659da00"}
