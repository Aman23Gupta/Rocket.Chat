{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/rooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/rooms.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/rooms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/rooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/rooms.js"}},"code":"const _excluded = [\"file\"],\n      _excluded2 = [\"rid\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet FileUpload;\nmodule.link(\"../../../file-upload\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 1);\nlet Rooms, Messages;\nmodule.link(\"../../../models\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 2);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 3);\nlet findAdminRooms, findChannelAndPrivateAutocomplete, findAdminRoom, findAdminRoomsAutocomplete, findRoomsAvailableForTeams, findChannelAndPrivateAutocompleteWithPagination;\nmodule.link(\"../lib/rooms\", {\n  findAdminRooms(v) {\n    findAdminRooms = v;\n  },\n\n  findChannelAndPrivateAutocomplete(v) {\n    findChannelAndPrivateAutocomplete = v;\n  },\n\n  findAdminRoom(v) {\n    findAdminRoom = v;\n  },\n\n  findAdminRoomsAutocomplete(v) {\n    findAdminRoomsAutocomplete = v;\n  },\n\n  findRoomsAvailableForTeams(v) {\n    findRoomsAvailableForTeams = v;\n  },\n\n  findChannelAndPrivateAutocompleteWithPagination(v) {\n    findChannelAndPrivateAutocompleteWithPagination = v;\n  }\n\n}, 4);\nlet sendFile, sendViaEmail;\nmodule.link(\"../../../../server/lib/channelExport\", {\n  sendFile(v) {\n    sendFile = v;\n  },\n\n  sendViaEmail(v) {\n    sendViaEmail = v;\n  }\n\n}, 5);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 6);\nlet Media;\nmodule.link(\"../../../../server/sdk\", {\n  Media(v) {\n    Media = v;\n  }\n\n}, 7);\nlet settings;\nmodule.link(\"../../../settings/server/index\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 8);\nlet getUploadFormData;\nmodule.link(\"../lib/getUploadFormData\", {\n  getUploadFormData(v) {\n    getUploadFormData = v;\n  }\n\n}, 9);\n\nfunction findRoomByIdOrName(_ref) {\n  let {\n    params,\n    checkedArchived = true\n  } = _ref;\n\n  if ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n    throw new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n  }\n\n  const fields = _objectSpread({}, API.v1.defaultFieldsToExclude);\n\n  let room;\n\n  if (params.roomId) {\n    room = Rooms.findOneById(params.roomId, {\n      fields\n    });\n  } else if (params.roomName) {\n    room = Rooms.findOneByName(params.roomName, {\n      fields\n    });\n  }\n\n  if (!room) {\n    throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n  }\n\n  if (checkedArchived && room.archived) {\n    throw new Meteor.Error('error-room-archived', \"The channel, \".concat(room.name, \", is archived\"));\n  }\n\n  return room;\n}\n\nAPI.v1.addRoute('rooms.get', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      updatedSince\n    } = this.queryParams;\n    let updatedSinceDate;\n\n    if (updatedSince) {\n      if (isNaN(Date.parse(updatedSince))) {\n        throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n      } else {\n        updatedSinceDate = new Date(updatedSince);\n      }\n    }\n\n    let result;\n    Meteor.runAsUser(this.userId, () => {\n      result = Meteor.call('rooms/get', updatedSinceDate);\n    });\n\n    if (Array.isArray(result)) {\n      result = {\n        update: result,\n        remove: []\n      };\n    }\n\n    return API.v1.success({\n      update: result.update.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      remove: result.remove.map(room => this.composeRoomWithLastMessage(room, this.userId))\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.upload/:rid', {\n  authRequired: true\n}, {\n  post() {\n    if (!canAccessRoom({\n      _id: this.urlParams.rid\n    }, {\n      _id: this.userId\n    })) {\n      return API.v1.unauthorized();\n    }\n\n    const _Promise$await = Promise.await(getUploadFormData({\n      request: this.request\n    })),\n          {\n      file\n    } = _Promise$await,\n          fields = _objectWithoutProperties(_Promise$await, _excluded);\n\n    if (!file) {\n      throw new Meteor.Error('invalid-field');\n    }\n\n    const details = {\n      name: file.filename,\n      size: file.fileBuffer.length,\n      type: file.mimetype,\n      rid: this.urlParams.rid,\n      userId: this.userId\n    };\n    const stripExif = settings.get('Message_Attachments_Strip_Exif');\n    const fileStore = FileUpload.getStore('Uploads');\n\n    if (stripExif) {\n      // No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n      file.fileBuffer = Promise.await(Media.stripExifFromBuffer(file.fileBuffer));\n    }\n\n    const uploadedFile = fileStore.insertSync(details, file.fileBuffer);\n    uploadedFile.description = fields.description;\n    delete fields.description;\n    Meteor.call('sendFileMessage', this.urlParams.rid, null, uploadedFile, fields);\n    return API.v1.success({\n      message: Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.saveNotification', {\n  authRequired: true\n}, {\n  post() {\n    const saveNotifications = (notifications, roomId) => {\n      Object.keys(notifications).forEach(notificationKey => Meteor.runAsUser(this.userId, () => Meteor.call('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey])));\n    };\n\n    const {\n      roomId,\n      notifications\n    } = this.bodyParams;\n\n    if (!roomId) {\n      return API.v1.failure(\"The 'roomId' param is required\");\n    }\n\n    if (!notifications || Object.keys(notifications).length === 0) {\n      return API.v1.failure(\"The 'notifications' param is required\");\n    }\n\n    saveNotifications(notifications, roomId);\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('rooms.favorite', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      favorite\n    } = this.bodyParams;\n\n    if (!this.bodyParams.hasOwnProperty('favorite')) {\n      return API.v1.failure(\"The 'favorite' param is required\");\n    }\n\n    const room = findRoomByIdOrName({\n      params: this.bodyParams\n    });\n    Meteor.runAsUser(this.userId, () => Meteor.call('toggleFavorite', room._id, favorite));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('rooms.cleanHistory', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findRoomByIdOrName({\n      params: this.bodyParams\n    });\n    const {\n      latest,\n      oldest,\n      inclusive = false,\n      limit,\n      excludePinned,\n      filesOnly,\n      ignoreThreads,\n      ignoreDiscussion,\n      users\n    } = this.bodyParams;\n\n    if (!latest) {\n      return API.v1.failure('Body parameter \"latest\" is required.');\n    }\n\n    if (!oldest) {\n      return API.v1.failure('Body parameter \"oldest\" is required.');\n    }\n\n    const count = Meteor.runAsUser(this.userId, () => Meteor.call('cleanRoomHistory', {\n      roomId: findResult._id,\n      latest: new Date(latest),\n      oldest: new Date(oldest),\n      inclusive,\n      limit,\n      excludePinned: [true, 'true', 1, '1'].includes(excludePinned),\n      filesOnly: [true, 'true', 1, '1'].includes(filesOnly),\n      ignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads),\n      ignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion),\n      fromUsers: users\n    }));\n    return API.v1.success({\n      count\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.info', {\n  authRequired: true\n}, {\n  get() {\n    const room = findRoomByIdOrName({\n      params: this.requestParams()\n    });\n    const {\n      fields\n    } = this.parseJsonQuery();\n\n    if (!room || !canAccessRoom(room, {\n      _id: this.userId\n    })) {\n      return API.v1.failure('not-allowed', 'Not Allowed');\n    }\n\n    return API.v1.success({\n      room: Rooms.findOneByIdOrName(room._id, {\n        fields\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.leave', {\n  authRequired: true\n}, {\n  post() {\n    const room = findRoomByIdOrName({\n      params: this.bodyParams\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('leaveRoom', room._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('rooms.createDiscussion', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      prid,\n      pmid,\n      reply,\n      t_name,\n      users,\n      encrypted\n    } = this.bodyParams;\n\n    if (!prid) {\n      return API.v1.failure('Body parameter \"prid\" is required.');\n    }\n\n    if (!t_name) {\n      return API.v1.failure('Body parameter \"t_name\" is required.');\n    }\n\n    if (users && !Array.isArray(users)) {\n      return API.v1.failure('Body parameter \"users\" must be an array.');\n    }\n\n    if (encrypted !== undefined && typeof encrypted !== 'boolean') {\n      return API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n    }\n\n    const discussion = Meteor.runAsUser(this.userId, () => Meteor.call('createDiscussion', {\n      prid,\n      pmid,\n      t_name,\n      reply,\n      users: users || [],\n      encrypted\n    }));\n    return API.v1.success({\n      discussion\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.getDiscussions', {\n  authRequired: true\n}, {\n  get() {\n    const room = findRoomByIdOrName({\n      params: this.requestParams()\n    });\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n\n    if (!room || !canAccessRoom(room, {\n      _id: this.userId\n    })) {\n      return API.v1.failure('not-allowed', 'Not Allowed');\n    }\n\n    const ourQuery = Object.assign(query, {\n      prid: room._id\n    });\n    const discussions = Rooms.find(ourQuery, {\n      sort: sort || {\n        fname: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).fetch();\n    return API.v1.success({\n      discussions,\n      count: discussions.length,\n      offset,\n      total: Rooms.find(ourQuery).count()\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.adminRooms', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort\n    } = this.parseJsonQuery();\n    const {\n      types,\n      filter\n    } = this.requestParams();\n    return API.v1.success(Promise.await(findAdminRooms({\n      uid: this.userId,\n      filter,\n      types,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    })));\n  }\n\n});\nAPI.v1.addRoute('rooms.autocomplete.adminRooms', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      selector\n    } = this.queryParams;\n\n    if (!selector) {\n      return API.v1.failure(\"The 'selector' param is required\");\n    }\n\n    return API.v1.success(Promise.await(findAdminRoomsAutocomplete({\n      uid: this.userId,\n      selector: JSON.parse(selector)\n    })));\n  }\n\n});\nAPI.v1.addRoute('rooms.adminRooms.getRoom', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      rid\n    } = this.requestParams();\n    const room = Promise.await(findAdminRoom({\n      uid: this.userId,\n      rid\n    }));\n\n    if (!room) {\n      return API.v1.failure('not-allowed', 'Not Allowed');\n    }\n\n    return API.v1.success(room);\n  }\n\n});\nAPI.v1.addRoute('rooms.autocomplete.channelAndPrivate', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      selector\n    } = this.queryParams;\n\n    if (!selector) {\n      return API.v1.failure(\"The 'selector' param is required\");\n    }\n\n    return API.v1.success(Promise.await(findChannelAndPrivateAutocomplete({\n      uid: this.userId,\n      selector: JSON.parse(selector)\n    })));\n  }\n\n});\nAPI.v1.addRoute('rooms.autocomplete.channelAndPrivate.withPagination', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      selector\n    } = this.queryParams;\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort\n    } = this.parseJsonQuery();\n\n    if (!selector) {\n      return API.v1.failure(\"The 'selector' param is required\");\n    }\n\n    return API.v1.success(Promise.await(findChannelAndPrivateAutocompleteWithPagination({\n      uid: this.userId,\n      selector: JSON.parse(selector),\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    })));\n  }\n\n});\nAPI.v1.addRoute('rooms.autocomplete.availableForTeams', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      name\n    } = this.queryParams;\n\n    if (name && typeof name !== 'string') {\n      return API.v1.failure(\"The 'name' param is invalid\");\n    }\n\n    return API.v1.success(Promise.await(findRoomsAvailableForTeams({\n      uid: this.userId,\n      name\n    })));\n  }\n\n});\nAPI.v1.addRoute('rooms.saveRoomSettings', {\n  authRequired: true\n}, {\n  post() {\n    const _this$bodyParams = this.bodyParams,\n          {\n      rid\n    } = _this$bodyParams,\n          params = _objectWithoutProperties(_this$bodyParams, _excluded2);\n\n    const result = Meteor.runAsUser(this.userId, () => Meteor.call('saveRoomSettings', rid, params));\n    return API.v1.success({\n      rid: result.rid\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.changeArchivationState', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      rid,\n      action\n    } = this.bodyParams;\n    let result;\n\n    if (action === 'archive') {\n      result = Meteor.runAsUser(this.userId, () => Meteor.call('archiveRoom', rid));\n    } else {\n      result = Meteor.runAsUser(this.userId, () => Meteor.call('unarchiveRoom', rid));\n    }\n\n    return API.v1.success({\n      result\n    });\n  }\n\n});\nAPI.v1.addRoute('rooms.export', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      rid,\n      type\n    } = this.bodyParams;\n\n    if (!rid || !type || !['email', 'file'].includes(type)) {\n      throw new Meteor.Error('error-invalid-params');\n    }\n\n    if (!hasPermission(this.userId, 'mail-messages', rid)) {\n      throw new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n    }\n\n    const room = Rooms.findOneById(rid);\n\n    if (!room) {\n      throw new Meteor.Error('error-invalid-room');\n    }\n\n    const user = Meteor.users.findOne({\n      _id: this.userId\n    });\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    if (type === 'file') {\n      const {\n        dateFrom,\n        dateTo,\n        format\n      } = this.bodyParams;\n\n      if (!['html', 'json'].includes(format)) {\n        throw new Meteor.Error('error-invalid-format');\n      }\n\n      sendFile(_objectSpread(_objectSpread({\n        rid,\n        format\n      }, dateFrom && {\n        dateFrom: new Date(dateFrom)\n      }), dateTo && {\n        dateTo: new Date(dateTo)\n      }), user);\n      return API.v1.success();\n    }\n\n    if (type === 'email') {\n      const {\n        toUsers,\n        toEmails,\n        subject,\n        messages\n      } = this.bodyParams;\n\n      if ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n        throw new Meteor.Error('error-invalid-recipient');\n      }\n\n      if (messages.length === 0) {\n        throw new Meteor.Error('error-invalid-messages');\n      }\n\n      const result = sendViaEmail({\n        rid,\n        toUsers,\n        toEmails,\n        subject,\n        messages\n      }, user);\n      return API.v1.success(result);\n    }\n\n    return API.v1.error();\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/rooms.js"],"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","Meteor","FileUpload","Rooms","Messages","API","findAdminRooms","findChannelAndPrivateAutocomplete","findAdminRoom","findAdminRoomsAutocomplete","findRoomsAvailableForTeams","findChannelAndPrivateAutocompleteWithPagination","sendFile","sendViaEmail","canAccessRoom","hasPermission","Media","settings","getUploadFormData","findRoomByIdOrName","params","checkedArchived","roomId","trim","roomName","Error","fields","v1","defaultFieldsToExclude","room","findOneById","findOneByName","archived","name","addRoute","authRequired","get","updatedSince","queryParams","updatedSinceDate","isNaN","Date","parse","result","runAsUser","userId","call","Array","isArray","update","remove","success","map","composeRoomWithLastMessage","post","_id","urlParams","rid","unauthorized","Promise","await","request","file","details","filename","size","fileBuffer","length","type","mimetype","stripExif","fileStore","getStore","stripExifFromBuffer","uploadedFile","insertSync","description","message","getMessageByFileIdAndUsername","saveNotifications","notifications","Object","keys","forEach","notificationKey","bodyParams","failure","favorite","hasOwnProperty","findResult","latest","oldest","inclusive","limit","excludePinned","filesOnly","ignoreThreads","ignoreDiscussion","users","count","includes","fromUsers","requestParams","parseJsonQuery","findOneByIdOrName","prid","pmid","reply","t_name","encrypted","undefined","discussion","offset","getPaginationItems","sort","query","ourQuery","assign","discussions","find","fname","skip","fetch","total","types","filter","uid","pagination","selector","JSON","action","user","findOne","dateFrom","dateTo","format","toUsers","toEmails","subject","messages","error"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { FileUpload } from '../../../file-upload';\nimport { Rooms, Messages } from '../../../models';\nimport { API } from '../api';\nimport {\n\tfindAdminRooms,\n\tfindChannelAndPrivateAutocomplete,\n\tfindAdminRoom,\n\tfindAdminRoomsAutocomplete,\n\tfindRoomsAvailableForTeams,\n\tfindChannelAndPrivateAutocompleteWithPagination,\n} from '../lib/rooms';\nimport { sendFile, sendViaEmail } from '../../../../server/lib/channelExport';\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { Media } from '../../../../server/sdk';\nimport { settings } from '../../../settings/server/index';\nimport { getUploadFormData } from '../lib/getUploadFormData';\n\nfunction findRoomByIdOrName({ params, checkedArchived = true }) {\n\tif ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst fields = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif (params.roomId) {\n\t\troom = Rooms.findOneById(params.roomId, { fields });\n\t} else if (params.roomName) {\n\t\troom = Rooms.findOneByName(params.roomName, { fields });\n\t}\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'rooms.get',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t\t} else {\n\t\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tresult = Meteor.call('rooms/get', updatedSinceDate);\n\t\t\t});\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult = {\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tupdate: result.update.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\tremove: result.remove.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.upload/:rid',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!canAccessRoom({ _id: this.urlParams.rid }, { _id: this.userId })) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { file, ...fields } = Promise.await(\n\t\t\t\tgetUploadFormData({\n\t\t\t\t\trequest: this.request,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: file.fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfile.fileBuffer = Promise.await(Media.stripExifFromBuffer(file.fileBuffer));\n\t\t\t}\n\t\t\tconst uploadedFile = fileStore.insertSync(details, file.fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tMeteor.call('sendFileMessage', this.urlParams.rid, null, uploadedFile, fields);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst saveNotifications = (notifications, roomId) => {\n\t\t\t\tObject.keys(notifications).forEach((notificationKey) =>\n\t\t\t\t\tMeteor.runAsUser(this.userId, () =>\n\t\t\t\t\t\tMeteor.call('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey]),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t};\n\t\t\tconst { roomId, notifications } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tif (!notifications || Object.keys(notifications).length === 0) {\n\t\t\t\treturn API.v1.failure(\"The 'notifications' param is required\");\n\t\t\t}\n\n\t\t\tsaveNotifications(notifications, roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.favorite',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { favorite } = this.bodyParams;\n\n\t\t\tif (!this.bodyParams.hasOwnProperty('favorite')) {\n\t\t\t\treturn API.v1.failure(\"The 'favorite' param is required\");\n\t\t\t}\n\n\t\t\tconst room = findRoomByIdOrName({ params: this.bodyParams });\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('toggleFavorite', room._id, favorite));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.cleanHistory',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findRoomByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst {\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tinclusive = false,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned,\n\t\t\t\tfilesOnly,\n\t\t\t\tignoreThreads,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tusers,\n\t\t\t} = this.bodyParams;\n\n\t\t\tif (!latest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"latest\" is required.');\n\t\t\t}\n\n\t\t\tif (!oldest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"oldest\" is required.');\n\t\t\t}\n\n\t\t\tconst count = Meteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('cleanRoomHistory', {\n\t\t\t\t\troomId: findResult._id,\n\t\t\t\t\tlatest: new Date(latest),\n\t\t\t\t\toldest: new Date(oldest),\n\t\t\t\t\tinclusive,\n\t\t\t\t\tlimit,\n\t\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned),\n\t\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly),\n\t\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads),\n\t\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion),\n\t\t\t\t\tfromUsers: users,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({ count });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.info',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst room = findRoomByIdOrName({ params: this.requestParams() });\n\t\t\tconst { fields } = this.parseJsonQuery();\n\n\t\t\tif (!room || !canAccessRoom(room, { _id: this.userId })) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room: Rooms.findOneByIdOrName(room._id, { fields }) });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.leave',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst room = findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('leaveRoom', room._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.createDiscussion',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { prid, pmid, reply, t_name, users, encrypted } = this.bodyParams;\n\t\t\tif (!prid) {\n\t\t\t\treturn API.v1.failure('Body parameter \"prid\" is required.');\n\t\t\t}\n\t\t\tif (!t_name) {\n\t\t\t\treturn API.v1.failure('Body parameter \"t_name\" is required.');\n\t\t\t}\n\t\t\tif (users && !Array.isArray(users)) {\n\t\t\t\treturn API.v1.failure('Body parameter \"users\" must be an array.');\n\t\t\t}\n\n\t\t\tif (encrypted !== undefined && typeof encrypted !== 'boolean') {\n\t\t\t\treturn API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n\t\t\t}\n\n\t\t\tconst discussion = Meteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('createDiscussion', {\n\t\t\t\t\tprid,\n\t\t\t\t\tpmid,\n\t\t\t\t\tt_name,\n\t\t\t\t\treply,\n\t\t\t\t\tusers: users || [],\n\t\t\t\t\tencrypted,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({ discussion });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst room = findRoomByIdOrName({ params: this.requestParams() });\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tif (!room || !canAccessRoom(room, { _id: this.userId })) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\n\t\t\tconst discussions = Rooms.find(ourQuery, {\n\t\t\t\tsort: sort || { fname: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t}).fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdiscussions,\n\t\t\t\tcount: discussions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Rooms.find(ourQuery).count(),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { types, filter } = this.requestParams();\n\n\t\t\treturn API.v1.success(\n\t\t\t\tPromise.await(\n\t\t\t\t\tfindAdminRooms({\n\t\t\t\t\t\tuid: this.userId,\n\t\t\t\t\t\tfilter,\n\t\t\t\t\t\ttypes,\n\t\t\t\t\t\tpagination: {\n\t\t\t\t\t\t\toffset,\n\t\t\t\t\t\t\tcount,\n\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tPromise.await(\n\t\t\t\t\tfindAdminRoomsAutocomplete({\n\t\t\t\t\t\tuid: this.userId,\n\t\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms.getRoom',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { rid } = this.requestParams();\n\t\t\tconst room = Promise.await(\n\t\t\t\tfindAdminRoom({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\trid,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success(room);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tPromise.await(\n\t\t\t\t\tfindChannelAndPrivateAutocomplete({\n\t\t\t\t\t\tuid: this.userId,\n\t\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate.withPagination',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tPromise.await(\n\t\t\t\t\tfindChannelAndPrivateAutocompleteWithPagination({\n\t\t\t\t\t\tuid: this.userId,\n\t\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\t\tpagination: {\n\t\t\t\t\t\t\toffset,\n\t\t\t\t\t\t\tcount,\n\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.availableForTeams',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tif (name && typeof name !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The 'name' param is invalid\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tPromise.await(\n\t\t\t\t\tfindRoomsAvailableForTeams({\n\t\t\t\t\t\tuid: this.userId,\n\t\t\t\t\t\tname,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveRoomSettings',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { rid, ...params } = this.bodyParams;\n\n\t\t\tconst result = Meteor.runAsUser(this.userId, () => Meteor.call('saveRoomSettings', rid, params));\n\n\t\t\treturn API.v1.success({ rid: result.rid });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.changeArchivationState',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { rid, action } = this.bodyParams;\n\n\t\t\tlet result;\n\t\t\tif (action === 'archive') {\n\t\t\t\tresult = Meteor.runAsUser(this.userId, () => Meteor.call('archiveRoom', rid));\n\t\t\t} else {\n\t\t\t\tresult = Meteor.runAsUser(this.userId, () => Meteor.call('unarchiveRoom', rid));\n\t\t\t}\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.export',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { rid, type } = this.bodyParams;\n\n\t\t\tif (!rid || !type || !['email', 'file'].includes(type)) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params');\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'mail-messages', rid)) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n\t\t\t}\n\n\t\t\tconst room = Rooms.findOneById(rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tconst user = Meteor.users.findOne({ _id: this.userId });\n\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tif (type === 'file') {\n\t\t\t\tconst { dateFrom, dateTo, format } = this.bodyParams;\n\n\t\t\t\tif (!['html', 'json'].includes(format)) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-format');\n\t\t\t\t}\n\n\t\t\t\tsendFile(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t\t...(dateFrom && { dateFrom: new Date(dateFrom) }),\n\t\t\t\t\t\t...(dateTo && { dateTo: new Date(dateTo) }),\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tif (type === 'email') {\n\t\t\t\tconst { toUsers, toEmails, subject, messages } = this.bodyParams;\n\n\t\t\t\tif ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-recipient');\n\t\t\t\t}\n\n\t\t\t\tif (messages.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-messages');\n\t\t\t\t}\n\n\t\t\t\tconst result = sendViaEmail(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\ttoUsers,\n\t\t\t\t\t\ttoEmails,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t\tmessages,\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\n\t\t\t\treturn API.v1.success(result);\n\t\t\t}\n\n\t\t\treturn API.v1.error();\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"a70eaf10525473b38f46f20a502e0de2e3696077"}
