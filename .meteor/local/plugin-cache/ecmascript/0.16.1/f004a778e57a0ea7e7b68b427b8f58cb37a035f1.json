{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Rooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Rooms.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Rooms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Rooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Rooms.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  RoomsRaw: () => RoomsRaw\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\n\nclass RoomsRaw extends BaseRaw {\n  findOneByRoomIdAndUserId(rid, uid) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      '_id': rid,\n      'u._id': uid\n    };\n    return this.findOne(query, options);\n  }\n\n  findManyByRoomIds(roomIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      _id: {\n        $in: roomIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  getMostRecentAverageChatDurationTime(numberMostRecentChats, department) {\n    return Promise.asyncApply(() => {\n      const aggregate = [{\n        $match: _objectSpread(_objectSpread({\n          t: 'l'\n        }, department && {\n          departmentId: department\n        }), {}, {\n          closedAt: {\n            $exists: true\n          }\n        })\n      }, {\n        $sort: {\n          closedAt: -1\n        }\n      }, {\n        $limit: numberMostRecentChats\n      }, {\n        $group: {\n          _id: null,\n          chats: {\n            $sum: 1\n          },\n          sumChatDuration: {\n            $sum: '$metrics.chatDuration'\n          }\n        }\n      }, {\n        $project: {\n          _id: '$_id',\n          avgChatDuration: {\n            $divide: ['$sumChatDuration', '$chats']\n          }\n        }\n      }];\n      const [statistic] = Promise.await(this.col.aggregate(aggregate).toArray());\n      return statistic;\n    });\n  }\n\n  findByNameContainingAndTypes(name, types) {\n    let discussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let teams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let showOnlyTeams = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    const nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n    const onlyTeamsQuery = showOnlyTeams ? {\n      teamMain: {\n        $exists: true\n      }\n    } : {};\n    const teamCondition = teams ? {} : {\n      teamMain: {\n        $exists: false\n      }\n    };\n\n    const query = _objectSpread(_objectSpread({\n      t: {\n        $in: types\n      },\n      prid: {\n        $exists: discussion\n      },\n      $or: [{\n        name: nameRegex\n      }, {\n        t: 'd',\n        usernames: nameRegex\n      }]\n    }, teamCondition), onlyTeamsQuery);\n\n    return this.find(query, options);\n  }\n\n  findByTypes(types) {\n    let discussion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let teams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let onlyTeams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const teamCondition = teams ? {} : {\n      teamMain: {\n        $exists: false\n      }\n    };\n    const onlyTeamsCondition = onlyTeams ? {\n      teamMain: {\n        $exists: true\n      }\n    } : {};\n\n    const query = _objectSpread(_objectSpread({\n      t: {\n        $in: types\n      },\n      prid: {\n        $exists: discussion\n      }\n    }, teamCondition), onlyTeamsCondition);\n\n    return this.find(query, options);\n  }\n\n  findByNameContaining(name) {\n    let discussion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let teams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let onlyTeams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n    const teamCondition = teams ? {} : {\n      teamMain: {\n        $exists: false\n      }\n    };\n    const onlyTeamsCondition = onlyTeams ? {\n      $and: [{\n        teamMain: {\n          $exists: true\n        }\n      }, {\n        teamMain: true\n      }]\n    } : {};\n\n    const query = _objectSpread(_objectSpread({\n      prid: {\n        $exists: discussion\n      },\n      $or: [{\n        name: nameRegex\n      }, {\n        t: 'd',\n        usernames: nameRegex\n      }]\n    }, teamCondition), onlyTeamsCondition);\n\n    return this.find(query, options);\n  }\n\n  findByTeamId(teamId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      teamId,\n      teamMain: {\n        $exists: false\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByTeamIdContainingNameAndDefault(teamId, name, teamDefault, ids) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    const query = _objectSpread(_objectSpread(_objectSpread({\n      teamId,\n      teamMain: {\n        $exists: false\n      }\n    }, name ? {\n      name: new RegExp(escapeRegExp(name), 'i')\n    } : {}), teamDefault === true ? {\n      teamDefault\n    } : {}), ids ? {\n      $or: [{\n        t: 'c'\n      }, {\n        _id: {\n          $in: ids\n        }\n      }]\n    } : {});\n\n    return this.find(query, options);\n  }\n\n  findByTeamIdAndRoomsId(teamId, rids) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      teamId,\n      _id: {\n        $in: rids\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findChannelAndPrivateByNameStarting(name, sIds, options) {\n    const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n    const query = {\n      t: {\n        $in: ['c', 'p']\n      },\n      name: nameRegex,\n      teamMain: {\n        $exists: false\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: sIds\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findRoomsByNameOrFnameStarting(name, options) {\n    const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n    const query = {\n      t: {\n        $in: ['c', 'p']\n      },\n      $or: [{\n        name: nameRegex\n      }, {\n        fname: nameRegex\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findRoomsWithoutDiscussionsByRoomIds(name, roomIds, options) {\n    const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n    const query = {\n      _id: {\n        $in: roomIds\n      },\n      t: {\n        $in: ['c', 'p']\n      },\n      name: nameRegex,\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: roomIds\n        }\n      }],\n      prid: {\n        $exists: false\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findChannelAndGroupListWithoutTeamsByNameStartingByOwner(uid, name, groupsToAccept, options) {\n    const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n    const query = {\n      teamId: {\n        $exists: false\n      },\n      prid: {\n        $exists: false\n      },\n      _id: {\n        $in: groupsToAccept\n      },\n      name: nameRegex\n    };\n    return this.find(query, options);\n  }\n\n  unsetTeamId(teamId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      teamId\n    };\n    const update = {\n      $unset: {\n        teamId: '',\n        teamDefault: '',\n        teamMain: ''\n      }\n    };\n    return this.updateMany(query, update, options);\n  }\n\n  unsetTeamById(rid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.updateOne({\n      _id: rid\n    }, {\n      $unset: {\n        teamId: '',\n        teamDefault: ''\n      }\n    }, options);\n  }\n\n  setTeamById(rid, teamId, teamDefault) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return this.updateOne({\n      _id: rid\n    }, {\n      $set: {\n        teamId,\n        teamDefault\n      }\n    }, options);\n  }\n\n  setTeamMainById(rid, teamId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.updateOne({\n      _id: rid\n    }, {\n      $set: {\n        teamId,\n        teamMain: true\n      }\n    }, options);\n  }\n\n  setTeamByIds(rids, teamId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.updateMany({\n      _id: {\n        $in: rids\n      }\n    }, {\n      $set: {\n        teamId\n      }\n    }, options);\n  }\n\n  setTeamDefaultById(rid, teamDefault) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.updateOne({\n      _id: rid\n    }, {\n      $set: {\n        teamDefault\n      }\n    }, options);\n  }\n\n  findChannelsWithNumberOfMessagesBetweenDate(_ref) {\n    let {\n      start,\n      end,\n      startOfLastWeek,\n      endOfLastWeek,\n      onlyCount = false,\n      options = {}\n    } = _ref;\n    const lookup = {\n      $lookup: {\n        from: 'rocketchat_analytics',\n        localField: '_id',\n        foreignField: 'room._id',\n        as: 'messages'\n      }\n    };\n    const messagesProject = {\n      $project: {\n        room: '$$ROOT',\n        messages: {\n          $filter: {\n            input: '$messages',\n            as: 'message',\n            cond: {\n              $and: [{\n                $gte: ['$$message.date', start]\n              }, {\n                $lte: ['$$message.date', end]\n              }]\n            }\n          }\n        },\n        lastWeekMessages: {\n          $filter: {\n            input: '$messages',\n            as: 'message',\n            cond: {\n              $and: [{\n                $gte: ['$$message.date', startOfLastWeek]\n              }, {\n                $lte: ['$$message.date', endOfLastWeek]\n              }]\n            }\n          }\n        }\n      }\n    };\n    const messagesUnwind = {\n      $unwind: {\n        path: '$messages',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const messagesGroup = {\n      $group: {\n        _id: {\n          _id: '$room._id'\n        },\n        room: {\n          $first: '$room'\n        },\n        messages: {\n          $sum: '$messages.messages'\n        },\n        lastWeekMessages: {\n          $first: '$lastWeekMessages'\n        }\n      }\n    };\n    const lastWeekMessagesUnwind = {\n      $unwind: {\n        path: '$lastWeekMessages',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const lastWeekMessagesGroup = {\n      $group: {\n        _id: {\n          _id: '$room._id'\n        },\n        room: {\n          $first: '$room'\n        },\n        messages: {\n          $first: '$messages'\n        },\n        lastWeekMessages: {\n          $sum: '$lastWeekMessages.messages'\n        }\n      }\n    };\n    const presentationProject = {\n      $project: {\n        _id: 0,\n        room: {\n          _id: '$_id._id',\n          name: {\n            $ifNull: ['$room.name', '$room.fname']\n          },\n          ts: '$room.ts',\n          t: '$room.t',\n          _updatedAt: '$room._updatedAt',\n          usernames: '$room.usernames'\n        },\n        messages: '$messages',\n        lastWeekMessages: '$lastWeekMessages',\n        diffFromLastWeek: {\n          $subtract: ['$messages', '$lastWeekMessages']\n        }\n      }\n    };\n    const firstParams = [lookup, messagesProject, messagesUnwind, messagesGroup, lastWeekMessagesUnwind, lastWeekMessagesGroup, presentationProject];\n    const sort = {\n      $sort: options.sort || {\n        messages: -1\n      }\n    };\n    const params = [...firstParams, sort];\n\n    if (onlyCount) {\n      params.push({\n        $count: 'total'\n      });\n    }\n\n    if (options.offset) {\n      params.push({\n        $skip: options.offset\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params);\n  }\n\n  findOneByName(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.col.findOne({\n      name\n    }, options);\n  }\n\n  findDefaultRoomsForTeam(teamId) {\n    return this.col.find({\n      teamId,\n      teamDefault: true,\n      teamMain: {\n        $exists: false\n      }\n    });\n  }\n\n  incUsersCountByIds(ids) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const query = {\n      _id: {\n        $in: ids\n      }\n    };\n    const update = {\n      $inc: {\n        usersCount: inc\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  findOneByNameOrFname(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.col.findOne({\n      $or: [{\n        name\n      }, {\n        fname: name\n      }]\n    }, options);\n  }\n\n  allRoomSourcesCount() {\n    return this.col.aggregate([{\n      $match: {\n        source: {\n          $exists: true\n        },\n        t: 'l'\n      }\n    }, {\n      $group: {\n        _id: '$source',\n        count: {\n          $sum: 1\n        }\n      }\n    }]);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Rooms.js"],"names":["_objectSpread","module","link","default","v","export","RoomsRaw","escapeRegExp","BaseRaw","findOneByRoomIdAndUserId","rid","uid","options","query","findOne","findManyByRoomIds","roomIds","_id","$in","find","getMostRecentAverageChatDurationTime","numberMostRecentChats","department","aggregate","$match","t","departmentId","closedAt","$exists","$sort","$limit","$group","chats","$sum","sumChatDuration","$project","avgChatDuration","$divide","statistic","col","toArray","findByNameContainingAndTypes","name","types","discussion","teams","showOnlyTeams","nameRegex","RegExp","trim","onlyTeamsQuery","teamMain","teamCondition","prid","$or","usernames","findByTypes","onlyTeams","onlyTeamsCondition","findByNameContaining","$and","findByTeamId","teamId","findByTeamIdContainingNameAndDefault","teamDefault","ids","findByTeamIdAndRoomsId","rids","findChannelAndPrivateByNameStarting","sIds","findRoomsByNameOrFnameStarting","fname","findRoomsWithoutDiscussionsByRoomIds","findChannelAndGroupListWithoutTeamsByNameStartingByOwner","groupsToAccept","unsetTeamId","update","$unset","updateMany","unsetTeamById","updateOne","setTeamById","$set","setTeamMainById","setTeamByIds","setTeamDefaultById","findChannelsWithNumberOfMessagesBetweenDate","start","end","startOfLastWeek","endOfLastWeek","onlyCount","lookup","$lookup","from","localField","foreignField","as","messagesProject","room","messages","$filter","input","cond","$gte","$lte","lastWeekMessages","messagesUnwind","$unwind","path","preserveNullAndEmptyArrays","messagesGroup","$first","lastWeekMessagesUnwind","lastWeekMessagesGroup","presentationProject","$ifNull","ts","_updatedAt","diffFromLastWeek","$subtract","firstParams","sort","params","push","$count","offset","$skip","count","findOneByName","findDefaultRoomsForTeam","incUsersCountByIds","inc","$inc","usersCount","multi","findOneByNameOrFname","allRoomSourcesCount","source"],"mappings":"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","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class RoomsRaw extends BaseRaw {\n\tfindOneByRoomIdAndUserId(rid, uid, options = {}) {\n\t\tconst query = {\n\t\t\t'_id': rid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindManyByRoomIds(roomIds, options = {}) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync getMostRecentAverageChatDurationTime(numberMostRecentChats, department) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt: 'l',\n\t\t\t\t\t...(department && { departmentId: department }),\n\t\t\t\t\tclosedAt: { $exists: true },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { closedAt: -1 } },\n\t\t\t{ $limit: numberMostRecentChats },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tchats: { $sum: 1 },\n\t\t\t\t\tsumChatDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { _id: '$_id', avgChatDuration: { $divide: ['$sumChatDuration', '$chats'] } } },\n\t\t];\n\n\t\tconst [statistic] = await this.col.aggregate(aggregate).toArray();\n\t\treturn statistic;\n\t}\n\n\tfindByNameContainingAndTypes(name, types, discussion = false, teams = false, showOnlyTeams = false, options = {}) {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst onlyTeamsQuery = showOnlyTeams ? { teamMain: { $exists: true } } : {};\n\n\t\tconst teamCondition = teams\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tteamMain: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\tprid: { $exists: discussion },\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t\t...teamCondition,\n\t\t\t...onlyTeamsQuery,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypes(types, discussion = false, teams = false, onlyTeams = false, options = {}) {\n\t\tconst teamCondition = teams\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tteamMain: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tconst onlyTeamsCondition = onlyTeams ? { teamMain: { $exists: true } } : {};\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\tprid: { $exists: discussion },\n\t\t\t...teamCondition,\n\t\t\t...onlyTeamsCondition,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameContaining(name, discussion = false, teams = false, onlyTeams = false, options = {}) {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst teamCondition = teams\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tteamMain: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\tconst onlyTeamsCondition = onlyTeams ? { $and: [{ teamMain: { $exists: true } }, { teamMain: true }] } : {};\n\n\t\tconst query = {\n\t\t\tprid: { $exists: discussion },\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t\t...teamCondition,\n\t\t\t...onlyTeamsCondition,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTeamId(teamId, options = {}) {\n\t\tconst query = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTeamIdContainingNameAndDefault(teamId, name, teamDefault, ids, options = {}) {\n\t\tconst query = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(name ? { name: new RegExp(escapeRegExp(name), 'i') } : {}),\n\t\t\t...(teamDefault === true ? { teamDefault } : {}),\n\t\t\t...(ids ? { $or: [{ t: 'c' }, { _id: { $in: ids } }] } : {}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTeamIdAndRoomsId(teamId, rids, options = {}) {\n\t\tconst query = {\n\t\t\tteamId,\n\t\t\t_id: {\n\t\t\t\t$in: rids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindChannelAndPrivateByNameStarting(name, sIds, options) {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: sIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsByNameOrFnameStarting(name, options) {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname: nameRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsWithoutDiscussionsByRoomIds(name, roomIds, options) {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindChannelAndGroupListWithoutTeamsByNameStartingByOwner(uid, name, groupsToAccept, options) {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query = {\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tprid: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t_id: {\n\t\t\t\t$in: groupsToAccept,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tunsetTeamId(teamId, options = {}) {\n\t\tconst query = { teamId };\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tteamId: '',\n\t\t\t\tteamDefault: '',\n\t\t\t\tteamMain: '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tunsetTeamById(rid, options = {}) {\n\t\treturn this.updateOne({ _id: rid }, { $unset: { teamId: '', teamDefault: '' } }, options);\n\t}\n\n\tsetTeamById(rid, teamId, teamDefault, options = {}) {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamDefault } }, options);\n\t}\n\n\tsetTeamMainById(rid, teamId, options = {}) {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamMain: true } }, options);\n\t}\n\n\tsetTeamByIds(rids, teamId, options = {}) {\n\t\treturn this.updateMany({ _id: { $in: rids } }, { $set: { teamId } }, options);\n\t}\n\n\tsetTeamDefaultById(rid, teamDefault, options = {}) {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamDefault } }, options);\n\t}\n\n\tfindChannelsWithNumberOfMessagesBetweenDate({ start, end, startOfLastWeek, endOfLastWeek, onlyCount = false, options = {} }) {\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_analytics',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'room._id',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\troom: '$$ROOT',\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', start] }, { $lte: ['$$message.date', end] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlastWeekMessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', startOfLastWeek] }, { $lte: ['$$message.date', endOfLastWeek] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst messagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$messages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $sum: '$messages.messages' },\n\t\t\t\tlastWeekMessages: { $first: '$lastWeekMessages' },\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$lastWeekMessages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $first: '$messages' },\n\t\t\t\tlastWeekMessages: { $sum: '$lastWeekMessages.messages' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\troom: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tname: { $ifNull: ['$room.name', '$room.fname'] },\n\t\t\t\t\tts: '$room.ts',\n\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t_updatedAt: '$room._updatedAt',\n\t\t\t\t\tusernames: '$room.usernames',\n\t\t\t\t},\n\t\t\t\tmessages: '$messages',\n\t\t\t\tlastWeekMessages: '$lastWeekMessages',\n\t\t\t\tdiffFromLastWeek: { $subtract: ['$messages', '$lastWeekMessages'] },\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [\n\t\t\tlookup,\n\t\t\tmessagesProject,\n\t\t\tmessagesUnwind,\n\t\t\tmessagesGroup,\n\t\t\tlastWeekMessagesUnwind,\n\t\t\tlastWeekMessagesGroup,\n\t\t\tpresentationProject,\n\t\t];\n\t\tconst sort = { $sort: options.sort || { messages: -1 } };\n\t\tconst params = [...firstParams, sort];\n\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t}\n\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\n\t\treturn this.col.aggregate(params);\n\t}\n\n\tfindOneByName(name, options = {}) {\n\t\treturn this.col.findOne({ name }, options);\n\t}\n\n\tfindDefaultRoomsForTeam(teamId) {\n\t\treturn this.col.find({\n\t\t\tteamId,\n\t\t\tteamDefault: true,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n\n\tincUsersCountByIds(ids, inc = 1) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tfindOneByNameOrFname(name, options = {}) {\n\t\treturn this.col.findOne({ $or: [{ name }, { fname: name }] }, options);\n\t}\n\n\tallRoomSourcesCount() {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\tt: 'l',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$source',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n}\n"]},"sourceType":"module","hash":"f004a778e57a0ea7e7b68b427b8f58cb37a035f1"}
