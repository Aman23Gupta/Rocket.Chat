{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/spotlight.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/spotlight.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/spotlight.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/lib/spotlight.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/spotlight.js"}},"code":"module.export({\n  Spotlight: () => Spotlight\n});\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 0);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 1);\nlet hasAllPermission, hasPermission, canAccessRoom;\nmodule.link(\"../../app/authorization/server\", {\n  hasAllPermission(v) {\n    hasAllPermission = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 2);\nlet Subscriptions, Rooms;\nmodule.link(\"../../app/models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet Users;\nmodule.link(\"../../app/models/server/raw\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet searchableRoomTypes;\nmodule.link(\"../../app/utils/server\", {\n  searchableRoomTypes(v) {\n    searchableRoomTypes = v;\n  }\n\n}, 6);\nlet readSecondaryPreferred;\nmodule.link(\"../database/readSecondaryPreferred\", {\n  readSecondaryPreferred(v) {\n    readSecondaryPreferred = v;\n  }\n\n}, 7);\n\nclass Spotlight {\n  fetchRooms(userId, rooms) {\n    if (!settings.get('Store_Last_Message') || hasPermission(userId, 'preview-c-room')) {\n      return rooms;\n    }\n\n    return rooms.map(room => {\n      delete room.lastMessage;\n      return room;\n    });\n  }\n\n  searchRooms(_ref) {\n    let {\n      userId,\n      text\n    } = _ref;\n    const regex = new RegExp(s.trim(escapeRegExp(text)), 'i');\n    const roomOptions = {\n      limit: 5,\n      fields: {\n        t: 1,\n        name: 1,\n        joinCodeRequired: 1,\n        lastMessage: 1\n      },\n      sort: {\n        name: 1\n      }\n    };\n\n    if (userId == null) {\n      if (!settings.get('Accounts_AllowAnonymousRead')) {\n        return [];\n      }\n\n      return this.fetchRooms(userId, Rooms.findByNameAndTypeNotDefault(regex, 'c', roomOptions).fetch());\n    }\n\n    if (!hasAllPermission(userId, ['view-outside-room', 'view-c-room'])) {\n      return [];\n    }\n\n    const searchableRoomTypeIds = searchableRoomTypes();\n    const roomIds = Subscriptions.findByUserIdAndTypes(userId, searchableRoomTypeIds, {\n      fields: {\n        rid: 1\n      }\n    }).fetch().map(s => s.rid);\n    const exactRoom = Rooms.findOneByNameAndType(text, searchableRoomTypeIds, roomOptions);\n\n    if (exactRoom) {\n      roomIds.push(exactRoom.rid);\n    }\n\n    return this.fetchRooms(userId, Rooms.findByNameAndTypesNotInIds(regex, searchableRoomTypeIds, roomIds, roomOptions).fetch());\n  }\n\n  mapOutsiders(u) {\n    u.outside = true;\n    return u;\n  }\n\n  processLimitAndUsernames(options, usernames, users) {\n    // Reduce the results from the limit for the next query\n    options.limit -= users.length; // If the limit was reached, return\n\n    if (options.limit <= 0) {\n      return users;\n    } // Prevent the next query to get the same users\n\n\n    usernames.push(...users.map(u => u.username).filter(u => !usernames.includes(u)));\n  }\n\n  _searchInsiderUsers(_ref2) {\n    let {\n      rid,\n      text,\n      usernames,\n      options,\n      users,\n      insiderExtraQuery,\n      match = {\n        startsWith: false,\n        endsWith: false\n      }\n    } = _ref2;\n\n    // Get insiders first\n    if (rid) {\n      const searchFields = settings.get('Accounts_SearchFields').trim().split(',');\n      users.push(...Promise.await(Users.findByActiveUsersExcept(text, usernames, options, searchFields, insiderExtraQuery, match).toArray())); // If the limit was reached, return\n\n      if (this.processLimitAndUsernames(options, usernames, users)) {\n        return users;\n      }\n    }\n  }\n\n  _searchOutsiderUsers(_ref3) {\n    let {\n      text,\n      usernames,\n      options,\n      users,\n      canListOutsiders,\n      match = {\n        startsWith: false,\n        endsWith: false\n      }\n    } = _ref3;\n\n    // Then get the outsiders if allowed\n    if (canListOutsiders) {\n      const searchFields = settings.get('Accounts_SearchFields').trim().split(',');\n      users.push(...Promise.await(Users.findByActiveUsersExcept(text, usernames, options, searchFields, undefined, match).toArray()).map(this.mapOutsiders)); // If the limit was reached, return\n\n      if (this.processLimitAndUsernames(options, usernames, users)) {\n        return users;\n      }\n    }\n  }\n\n  _performExtraUserSearches() {// Overwrite this method to include extra searches\n  }\n\n  searchUsers(_ref4) {\n    let {\n      userId,\n      rid,\n      text,\n      usernames,\n      mentions\n    } = _ref4;\n    const users = [];\n    const options = {\n      limit: settings.get('Number_of_users_autocomplete_suggestions'),\n      projection: {\n        username: 1,\n        nickname: 1,\n        name: 1,\n        status: 1,\n        statusText: 1,\n        avatarETag: 1\n      },\n      sort: {\n        [settings.get('UI_Use_Real_Name') ? 'name' : 'username']: 1\n      },\n      readPreference: readSecondaryPreferred(Users.col.s.db)\n    };\n    const room = Rooms.findOneById(rid, {\n      fields: {\n        _id: 1,\n        t: 1,\n        uids: 1\n      }\n    });\n\n    if (rid && !room) {\n      return users;\n    }\n\n    const canListOutsiders = hasAllPermission(userId, ['view-outside-room', 'view-d-room']);\n    const canListInsiders = canListOutsiders || rid && canAccessRoom(room, {\n      _id: userId\n    }); // If can't list outsiders and, wether, the rid was not passed or the user has no access to the room, return\n\n    if (!canListOutsiders && !canListInsiders) {\n      return users;\n    }\n\n    const insiderExtraQuery = [];\n\n    if (rid) {\n      switch (room.t) {\n        case 'd':\n          insiderExtraQuery.push({\n            _id: {\n              $in: room.uids.filter(id => id !== userId)\n            }\n          });\n          break;\n\n        case 'l':\n          insiderExtraQuery.push({\n            _id: {\n              $in: Subscriptions.findByRoomId(room._id).fetch().map(s => {\n                var _s$u;\n\n                return (_s$u = s.u) === null || _s$u === void 0 ? void 0 : _s$u._id;\n              }).filter(id => id && id !== userId)\n            }\n          });\n          break;\n\n        default:\n          insiderExtraQuery.push({\n            __rooms: rid\n          });\n          break;\n      }\n    }\n\n    const searchParams = {\n      rid,\n      text,\n      usernames,\n      options,\n      users,\n      canListOutsiders,\n      insiderExtraQuery,\n      mentions\n    }; // Exact match for username only\n\n    if (rid) {\n      const exactMatch = Promise.await(Users.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n        projection: options.projection,\n        readPreference: options.readPreference\n      }));\n\n      if (exactMatch) {\n        users.push(exactMatch);\n        this.processLimitAndUsernames(options, usernames, users);\n      }\n    }\n\n    if (users.length === 0 && canListOutsiders) {\n      const exactMatch = Promise.await(Users.findOneByUsernameIgnoringCase(text, {\n        projection: options.projection,\n        readPreference: options.readPreference\n      }));\n\n      if (exactMatch) {\n        users.push(this.mapOutsiders(exactMatch));\n        this.processLimitAndUsernames(options, usernames, users);\n      }\n    } // Contains for insiders\n\n\n    if (this._searchInsiderUsers(searchParams)) {\n      return users;\n    } // Contains for outsiders\n\n\n    if (this._searchOutsiderUsers(searchParams)) {\n      return users;\n    }\n\n    if (this._performExtraUserSearches(userId, searchParams)) {\n      return users;\n    }\n\n    return users;\n  }\n\n}","map":{"version":3,"sources":["server/lib/spotlight.js"],"names":["module","export","Spotlight","s","link","default","v","escapeRegExp","hasAllPermission","hasPermission","canAccessRoom","Subscriptions","Rooms","Users","settings","searchableRoomTypes","readSecondaryPreferred","fetchRooms","userId","rooms","get","map","room","lastMessage","searchRooms","text","regex","RegExp","trim","roomOptions","limit","fields","t","name","joinCodeRequired","sort","findByNameAndTypeNotDefault","fetch","searchableRoomTypeIds","roomIds","findByUserIdAndTypes","rid","exactRoom","findOneByNameAndType","push","findByNameAndTypesNotInIds","mapOutsiders","u","outside","processLimitAndUsernames","options","usernames","users","length","username","filter","includes","_searchInsiderUsers","insiderExtraQuery","match","startsWith","endsWith","searchFields","split","Promise","await","findByActiveUsersExcept","toArray","_searchOutsiderUsers","canListOutsiders","undefined","_performExtraUserSearches","searchUsers","mentions","projection","nickname","status","statusText","avatarETag","readPreference","col","db","findOneById","_id","uids","canListInsiders","$in","id","findByRoomId","__rooms","searchParams","exactMatch","findOneByUsernameAndRoomIgnoringCase","findOneByUsernameIgnoringCase"],"mappings":"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","sourcesContent":["import s from 'underscore.string';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { hasAllPermission, hasPermission, canAccessRoom } from '../../app/authorization/server';\nimport { Subscriptions, Rooms } from '../../app/models/server';\nimport { Users } from '../../app/models/server/raw';\nimport { settings } from '../../app/settings/server';\nimport { searchableRoomTypes } from '../../app/utils/server';\nimport { readSecondaryPreferred } from '../database/readSecondaryPreferred';\n\nexport class Spotlight {\n\tfetchRooms(userId, rooms) {\n\t\tif (!settings.get('Store_Last_Message') || hasPermission(userId, 'preview-c-room')) {\n\t\t\treturn rooms;\n\t\t}\n\n\t\treturn rooms.map((room) => {\n\t\t\tdelete room.lastMessage;\n\t\t\treturn room;\n\t\t});\n\t}\n\n\tsearchRooms({ userId, text }) {\n\t\tconst regex = new RegExp(s.trim(escapeRegExp(text)), 'i');\n\n\t\tconst roomOptions = {\n\t\t\tlimit: 5,\n\t\t\tfields: {\n\t\t\t\tt: 1,\n\t\t\t\tname: 1,\n\t\t\t\tjoinCodeRequired: 1,\n\t\t\t\tlastMessage: 1,\n\t\t\t},\n\t\t\tsort: {\n\t\t\t\tname: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (userId == null) {\n\t\t\tif (!settings.get('Accounts_AllowAnonymousRead')) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\treturn this.fetchRooms(userId, Rooms.findByNameAndTypeNotDefault(regex, 'c', roomOptions).fetch());\n\t\t}\n\n\t\tif (!hasAllPermission(userId, ['view-outside-room', 'view-c-room'])) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst searchableRoomTypeIds = searchableRoomTypes();\n\n\t\tconst roomIds = Subscriptions.findByUserIdAndTypes(userId, searchableRoomTypeIds, {\n\t\t\tfields: { rid: 1 },\n\t\t})\n\t\t\t.fetch()\n\t\t\t.map((s) => s.rid);\n\t\tconst exactRoom = Rooms.findOneByNameAndType(text, searchableRoomTypeIds, roomOptions);\n\t\tif (exactRoom) {\n\t\t\troomIds.push(exactRoom.rid);\n\t\t}\n\n\t\treturn this.fetchRooms(userId, Rooms.findByNameAndTypesNotInIds(regex, searchableRoomTypeIds, roomIds, roomOptions).fetch());\n\t}\n\n\tmapOutsiders(u) {\n\t\tu.outside = true;\n\t\treturn u;\n\t}\n\n\tprocessLimitAndUsernames(options, usernames, users) {\n\t\t// Reduce the results from the limit for the next query\n\t\toptions.limit -= users.length;\n\n\t\t// If the limit was reached, return\n\t\tif (options.limit <= 0) {\n\t\t\treturn users;\n\t\t}\n\n\t\t// Prevent the next query to get the same users\n\t\tusernames.push(...users.map((u) => u.username).filter((u) => !usernames.includes(u)));\n\t}\n\n\t_searchInsiderUsers({ rid, text, usernames, options, users, insiderExtraQuery, match = { startsWith: false, endsWith: false } }) {\n\t\t// Get insiders first\n\t\tif (rid) {\n\t\t\tconst searchFields = settings.get('Accounts_SearchFields').trim().split(',');\n\n\t\t\tusers.push(\n\t\t\t\t...Promise.await(Users.findByActiveUsersExcept(text, usernames, options, searchFields, insiderExtraQuery, match).toArray()),\n\t\t\t);\n\n\t\t\t// If the limit was reached, return\n\t\t\tif (this.processLimitAndUsernames(options, usernames, users)) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t}\n\t}\n\n\t_searchOutsiderUsers({ text, usernames, options, users, canListOutsiders, match = { startsWith: false, endsWith: false } }) {\n\t\t// Then get the outsiders if allowed\n\t\tif (canListOutsiders) {\n\t\t\tconst searchFields = settings.get('Accounts_SearchFields').trim().split(',');\n\t\t\tusers.push(\n\t\t\t\t...Promise.await(Users.findByActiveUsersExcept(text, usernames, options, searchFields, undefined, match).toArray()).map(\n\t\t\t\t\tthis.mapOutsiders,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// If the limit was reached, return\n\t\t\tif (this.processLimitAndUsernames(options, usernames, users)) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t}\n\t}\n\n\t_performExtraUserSearches(/* userId, searchParams */) {\n\t\t// Overwrite this method to include extra searches\n\t}\n\n\tsearchUsers({ userId, rid, text, usernames, mentions }) {\n\t\tconst users = [];\n\n\t\tconst options = {\n\t\t\tlimit: settings.get('Number_of_users_autocomplete_suggestions'),\n\t\t\tprojection: {\n\t\t\t\tusername: 1,\n\t\t\t\tnickname: 1,\n\t\t\t\tname: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tstatusText: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t},\n\t\t\tsort: {\n\t\t\t\t[settings.get('UI_Use_Real_Name') ? 'name' : 'username']: 1,\n\t\t\t},\n\t\t\treadPreference: readSecondaryPreferred(Users.col.s.db),\n\t\t};\n\n\t\tconst room = Rooms.findOneById(rid, { fields: { _id: 1, t: 1, uids: 1 } });\n\n\t\tif (rid && !room) {\n\t\t\treturn users;\n\t\t}\n\n\t\tconst canListOutsiders = hasAllPermission(userId, ['view-outside-room', 'view-d-room']);\n\t\tconst canListInsiders = canListOutsiders || (rid && canAccessRoom(room, { _id: userId }));\n\n\t\t// If can't list outsiders and, wether, the rid was not passed or the user has no access to the room, return\n\t\tif (!canListOutsiders && !canListInsiders) {\n\t\t\treturn users;\n\t\t}\n\n\t\tconst insiderExtraQuery = [];\n\n\t\tif (rid) {\n\t\t\tswitch (room.t) {\n\t\t\t\tcase 'd':\n\t\t\t\t\tinsiderExtraQuery.push({\n\t\t\t\t\t\t_id: { $in: room.uids.filter((id) => id !== userId) },\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'l':\n\t\t\t\t\tinsiderExtraQuery.push({\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$in: Subscriptions.findByRoomId(room._id)\n\t\t\t\t\t\t\t\t.fetch()\n\t\t\t\t\t\t\t\t.map((s) => s.u?._id)\n\t\t\t\t\t\t\t\t.filter((id) => id && id !== userId),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tinsiderExtraQuery.push({\n\t\t\t\t\t\t__rooms: rid,\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst searchParams = {\n\t\t\trid,\n\t\t\ttext,\n\t\t\tusernames,\n\t\t\toptions,\n\t\t\tusers,\n\t\t\tcanListOutsiders,\n\t\t\tinsiderExtraQuery,\n\t\t\tmentions,\n\t\t};\n\n\t\t// Exact match for username only\n\t\tif (rid) {\n\t\t\tconst exactMatch = Promise.await(\n\t\t\t\tUsers.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n\t\t\t\t\tprojection: options.projection,\n\t\t\t\t\treadPreference: options.readPreference,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(exactMatch);\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\tif (users.length === 0 && canListOutsiders) {\n\t\t\tconst exactMatch = Promise.await(\n\t\t\t\tUsers.findOneByUsernameIgnoringCase(text, {\n\t\t\t\t\tprojection: options.projection,\n\t\t\t\t\treadPreference: options.readPreference,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(this.mapOutsiders(exactMatch));\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\t// Contains for insiders\n\t\tif (this._searchInsiderUsers(searchParams)) {\n\t\t\treturn users;\n\t\t}\n\n\t\t// Contains for outsiders\n\t\tif (this._searchOutsiderUsers(searchParams)) {\n\t\t\treturn users;\n\t\t}\n\n\t\tif (this._performExtraUserSearches(userId, searchParams)) {\n\t\t\treturn users;\n\t\t}\n\n\t\treturn users;\n\t}\n}\n"]},"sourceType":"module","hash":"5824be943d4ff17d37ca8829c1e58907852b70a5"}
