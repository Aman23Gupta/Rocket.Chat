{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/sendNotificationsOnMessage.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/lib/sendNotificationsOnMessage.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/sendNotificationsOnMessage.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/sendNotificationsOnMessage.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/lib/sendNotificationsOnMessage.js"}},"code":"module.export({\n  sendNotification: () => sendNotification,\n  sendMessageNotifications: () => sendMessageNotifications,\n  sendAllNotifications: () => sendAllNotifications\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet hasPermission;\nmodule.link(\"../../../authorization\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\nlet Subscriptions, Users;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 5);\nlet roomTypes;\nmodule.link(\"../../../utils\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 6);\nlet callJoinRoom, messageContainsHighlight, parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames;\nmodule.link(\"../functions/notifications\", {\n  callJoinRoom(v) {\n    callJoinRoom = v;\n  },\n\n  messageContainsHighlight(v) {\n    messageContainsHighlight = v;\n  },\n\n  parseMessageTextPerUser(v) {\n    parseMessageTextPerUser = v;\n  },\n\n  replaceMentionedUsernamesWithFullNames(v) {\n    replaceMentionedUsernamesWithFullNames = v;\n  }\n\n}, 7);\nlet getEmailData, shouldNotifyEmail;\nmodule.link(\"../functions/notifications/email\", {\n  getEmailData(v) {\n    getEmailData = v;\n  },\n\n  shouldNotifyEmail(v) {\n    shouldNotifyEmail = v;\n  }\n\n}, 8);\nlet getPushData, shouldNotifyMobile;\nmodule.link(\"../functions/notifications/mobile\", {\n  getPushData(v) {\n    getPushData = v;\n  },\n\n  shouldNotifyMobile(v) {\n    shouldNotifyMobile = v;\n  }\n\n}, 9);\nlet notifyDesktopUser, shouldNotifyDesktop;\nmodule.link(\"../functions/notifications/desktop\", {\n  notifyDesktopUser(v) {\n    notifyDesktopUser = v;\n  },\n\n  shouldNotifyDesktop(v) {\n    shouldNotifyDesktop = v;\n  }\n\n}, 10);\nlet Notification;\nmodule.link(\"../../../notification-queue/server/NotificationQueue\", {\n  Notification(v) {\n    Notification = v;\n  }\n\n}, 11);\nlet getMentions;\nmodule.link(\"./notifyUsersOnMessage\", {\n  getMentions(v) {\n    getMentions = v;\n  }\n\n}, 12);\nlet TroubleshootDisableNotifications;\n\nconst sendNotification = _ref => Promise.asyncApply(() => {\n  let {\n    subscription,\n    sender,\n    hasReplyToThread,\n    hasMentionToAll,\n    hasMentionToHere,\n    message,\n    notificationMessage,\n    room,\n    mentionIds,\n    disableAllMessageNotifications\n  } = _ref;\n\n  if (TroubleshootDisableNotifications === true) {\n    return;\n  } // don't notify the sender\n\n\n  if (subscription.u._id === sender._id) {\n    return;\n  }\n\n  const hasMentionToUser = mentionIds.includes(subscription.u._id); // mute group notifications (@here and @all) if not directly mentioned as well\n\n  if (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n    return;\n  }\n\n  if (!subscription.receiver) {\n    subscription.receiver = [Users.findOneById(subscription.u._id, {\n      fields: {\n        active: 1,\n        emails: 1,\n        language: 1,\n        status: 1,\n        statusConnection: 1,\n        username: 1\n      }\n    })];\n  }\n\n  const [receiver] = subscription.receiver;\n  const roomType = room.t; // If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n\n  if (roomType === 'd' && !hasPermission(subscription.u._id, 'view-d-room')) {\n    return;\n  }\n\n  const isThread = !!message.tmid && !message.tshow;\n  notificationMessage = parseMessageTextPerUser(notificationMessage, message, receiver);\n  const isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n  const {\n    desktopNotifications,\n    mobilePushNotifications,\n    emailNotifications\n  } = subscription; // busy users don't receive desktop notification\n\n  if (shouldNotifyDesktop({\n    disableAllMessageNotifications,\n    status: receiver.status,\n    statusConnection: receiver.statusConnection,\n    desktopNotifications,\n    hasMentionToAll,\n    hasMentionToHere,\n    isHighlighted,\n    hasMentionToUser,\n    hasReplyToThread,\n    roomType,\n    isThread\n  })) {\n    notifyDesktopUser({\n      notificationMessage,\n      userId: subscription.u._id,\n      user: sender,\n      message,\n      room\n    });\n  }\n\n  const queueItems = [];\n\n  if (shouldNotifyMobile({\n    disableAllMessageNotifications,\n    mobilePushNotifications,\n    hasMentionToAll,\n    isHighlighted,\n    hasMentionToUser,\n    hasReplyToThread,\n    roomType,\n    isThread\n  })) {\n    queueItems.push({\n      type: 'push',\n      data: Promise.await(getPushData({\n        notificationMessage,\n        room,\n        message,\n        userId: subscription.u._id,\n        senderUsername: sender.username,\n        senderName: sender.name,\n        receiver\n      }))\n    });\n  }\n\n  if (receiver.emails && shouldNotifyEmail({\n    disableAllMessageNotifications,\n    statusConnection: receiver.statusConnection,\n    emailNotifications,\n    isHighlighted,\n    hasMentionToUser,\n    hasMentionToAll,\n    hasReplyToThread,\n    roomType,\n    isThread\n  })) {\n    receiver.emails.some(email => {\n      if (email.verified) {\n        queueItems.push({\n          type: 'email',\n          data: getEmailData({\n            message,\n            receiver,\n            sender,\n            subscription,\n            room,\n            emailAddress: email.address,\n            hasMentionToUser\n          })\n        });\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  if (queueItems.length) {\n    Notification.scheduleItem({\n      user: receiver,\n      uid: subscription.u._id,\n      rid: room._id,\n      mid: message._id,\n      items: queueItems\n    });\n  }\n});\n\nconst project = {\n  $project: {\n    'desktopNotifications': 1,\n    'emailNotifications': 1,\n    'mobilePushNotifications': 1,\n    'muteGroupMentions': 1,\n    'name': 1,\n    'rid': 1,\n    'userHighlights': 1,\n    'u._id': 1,\n    'receiver.active': 1,\n    'receiver.emails': 1,\n    'receiver.language': 1,\n    'receiver.status': 1,\n    'receiver.statusConnection': 1,\n    'receiver.username': 1\n  }\n};\nconst filter = {\n  $match: {\n    'receiver.active': true\n  }\n};\nconst lookup = {\n  $lookup: {\n    from: 'users',\n    localField: 'u._id',\n    foreignField: '_id',\n    as: 'receiver'\n  }\n};\n\nfunction sendMessageNotifications(message, room) {\n  return Promise.asyncApply(() => {\n    let usersInThread = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    if (TroubleshootDisableNotifications === true) {\n      return;\n    }\n\n    const sender = roomTypes.getConfig(room.t).getMsgSender(message.u._id);\n\n    if (!sender) {\n      return message;\n    }\n\n    const {\n      toAll: hasMentionToAll,\n      toHere: hasMentionToHere,\n      mentionIds\n    } = getMentions(message);\n    const mentionIdsWithoutGroups = [...mentionIds]; // getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n\n    if (hasMentionToAll) {\n      mentionIds.push('all');\n    }\n\n    if (hasMentionToHere) {\n      mentionIds.push('here');\n    } // add users in thread to mentions array because they follow the same rules\n\n\n    mentionIds.push(...usersInThread);\n    let notificationMessage = callbacks.run('beforeSendMessageNotifications', message.msg);\n\n    if (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n      notificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n    } // Don't fetch all users if room exceeds max members\n\n\n    const maxMembersForNotification = settings.get('Notifications_Max_Room_Members');\n    const roomMembersCount = Subscriptions.findByRoomId(room._id).count();\n    const disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n    const query = {\n      rid: room._id,\n      ignored: {\n        $ne: sender._id\n      },\n      disableNotifications: {\n        $ne: true\n      },\n      $or: [{\n        'userHighlights.0': {\n          $exists: 1\n        }\n      }, ...(usersInThread.length > 0 ? [{\n        'u._id': {\n          $in: usersInThread\n        }\n      }] : [])]\n    };\n    ['audio', 'desktop', 'mobile', 'email'].forEach(kind => {\n      const notificationField = \"\".concat(kind === 'mobile' ? 'mobilePush' : kind, \"Notifications\");\n      const filter = {\n        [notificationField]: 'all'\n      };\n\n      if (disableAllMessageNotifications) {\n        filter[\"\".concat(kind, \"PrefOrigin\")] = {\n          $ne: 'user'\n        };\n      }\n\n      query.$or.push(filter);\n\n      if (mentionIdsWithoutGroups.length > 0) {\n        query.$or.push({\n          [notificationField]: 'mentions',\n          'u._id': {\n            $in: mentionIdsWithoutGroups\n          }\n        });\n      } else if (!disableAllMessageNotifications && (hasMentionToAll || hasMentionToHere)) {\n        query.$or.push({\n          [notificationField]: 'mentions'\n        });\n      }\n\n      const serverField = kind === 'email' ? 'emailNotificationMode' : \"\".concat(kind, \"Notifications\");\n      const serverPreference = settings.get(\"Accounts_Default_User_Preferences_\".concat(serverField));\n\n      if (room.t === 'd' && serverPreference !== 'nothing' || !disableAllMessageNotifications && (serverPreference === 'all' || hasMentionToAll || hasMentionToHere)) {\n        query.$or.push({\n          [notificationField]: {\n            $exists: false\n          }\n        });\n      } else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n        query.$or.push({\n          [notificationField]: {\n            $exists: false\n          },\n          'u._id': {\n            $in: mentionIdsWithoutGroups\n          }\n        });\n      }\n    }); // the find below is crucial. All subscription records returned will receive at least one kind of notification.\n    // the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n\n    const subscriptions = Promise.await(Subscriptions.model.rawCollection().aggregate([{\n      $match: query\n    }, lookup, filter, project]).toArray());\n    subscriptions.forEach(subscription => sendNotification({\n      subscription,\n      sender,\n      hasMentionToAll,\n      hasMentionToHere,\n      message,\n      notificationMessage,\n      room,\n      mentionIds,\n      disableAllMessageNotifications,\n      hasReplyToThread: usersInThread && usersInThread.includes(subscription.u._id)\n    }));\n    return {\n      sender,\n      hasMentionToAll,\n      hasMentionToHere,\n      notificationMessage,\n      mentionIds,\n      mentionIdsWithoutGroups\n    };\n  });\n}\n\nfunction sendAllNotifications(message, room) {\n  return Promise.asyncApply(() => {\n    if (TroubleshootDisableNotifications === true) {\n      return message;\n    } // threads\n\n\n    if (message.tmid) {\n      return message;\n    } // skips this callback if the message was edited\n\n\n    if (message.editedAt) {\n      return message;\n    }\n\n    if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {\n      return message;\n    }\n\n    if (!room || room.t == null) {\n      return message;\n    }\n\n    const {\n      sender,\n      hasMentionToAll,\n      hasMentionToHere,\n      notificationMessage,\n      mentionIds,\n      mentionIdsWithoutGroups\n    } = Promise.await(sendMessageNotifications(message, room)); // on public channels, if a mentioned user is not member of the channel yet, he will first join the channel and then be notified based on his preferences.\n\n    if (room.t === 'c') {\n      // get subscriptions from users already in room (to not send them a notification)\n      const mentions = [...mentionIdsWithoutGroups];\n      Subscriptions.findByRoomIdAndUserIds(room._id, mentionIdsWithoutGroups, {\n        fields: {\n          'u._id': 1\n        }\n      }).forEach(subscription => {\n        const index = mentions.indexOf(subscription.u._id);\n\n        if (index !== -1) {\n          mentions.splice(index, 1);\n        }\n      });\n      Promise.all(mentions.map(userId => Promise.asyncApply(() => {\n        Promise.await(callJoinRoom(userId, room._id));\n        return userId;\n      }))).then(users => {\n        users.forEach(userId => {\n          const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, userId);\n          sendNotification({\n            subscription,\n            sender,\n            hasMentionToAll,\n            hasMentionToHere,\n            message,\n            notificationMessage,\n            room,\n            mentionIds\n          });\n        });\n      }).catch(error => {\n        throw new Meteor.Error(error);\n      });\n    }\n\n    return message;\n  });\n}\n\nsettings.watch('Troubleshoot_Disable_Notifications', value => {\n  if (TroubleshootDisableNotifications === value) {\n    return;\n  }\n\n  TroubleshootDisableNotifications = value;\n\n  if (value) {\n    return callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n  }\n\n  callbacks.add('afterSaveMessage', (message, room) => Promise.await(sendAllNotifications(message, room)), callbacks.priority.LOW, 'sendNotificationsOnMessage');\n});","map":{"version":3,"sources":["app/lib/server/lib/sendNotificationsOnMessage.js"],"names":["module","export","sendNotification","sendMessageNotifications","sendAllNotifications","Meteor","link","v","moment","default","hasPermission","settings","callbacks","Subscriptions","Users","roomTypes","callJoinRoom","messageContainsHighlight","parseMessageTextPerUser","replaceMentionedUsernamesWithFullNames","getEmailData","shouldNotifyEmail","getPushData","shouldNotifyMobile","notifyDesktopUser","shouldNotifyDesktop","Notification","getMentions","TroubleshootDisableNotifications","subscription","sender","hasReplyToThread","hasMentionToAll","hasMentionToHere","message","notificationMessage","room","mentionIds","disableAllMessageNotifications","u","_id","hasMentionToUser","includes","muteGroupMentions","receiver","findOneById","fields","active","emails","language","status","statusConnection","username","roomType","t","isThread","tmid","tshow","isHighlighted","userHighlights","desktopNotifications","mobilePushNotifications","emailNotifications","userId","user","queueItems","push","type","data","senderUsername","senderName","name","some","email","verified","emailAddress","address","length","scheduleItem","uid","rid","mid","items","project","$project","filter","$match","lookup","$lookup","from","localField","foreignField","as","usersInThread","getConfig","getMsgSender","toAll","toHere","mentionIdsWithoutGroups","run","msg","get","mentions","maxMembersForNotification","roomMembersCount","findByRoomId","count","query","ignored","$ne","disableNotifications","$or","$exists","$in","forEach","kind","notificationField","serverField","serverPreference","subscriptions","model","rawCollection","aggregate","toArray","editedAt","ts","Math","abs","diff","findByRoomIdAndUserIds","index","indexOf","splice","Promise","all","map","then","users","findOneByRoomIdAndUserId","catch","error","Error","watch","value","remove","add","await","priority","LOW"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { hasPermission } from '../../../authorization';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Subscriptions, Users } from '../../../models/server';\nimport { roomTypes } from '../../../utils';\nimport {\n\tcallJoinRoom,\n\tmessageContainsHighlight,\n\tparseMessageTextPerUser,\n\treplaceMentionedUsernamesWithFullNames,\n} from '../functions/notifications';\nimport { getEmailData, shouldNotifyEmail } from '../functions/notifications/email';\nimport { getPushData, shouldNotifyMobile } from '../functions/notifications/mobile';\nimport { notifyDesktopUser, shouldNotifyDesktop } from '../functions/notifications/desktop';\nimport { Notification } from '../../../notification-queue/server/NotificationQueue';\nimport { getMentions } from './notifyUsersOnMessage';\n\nlet TroubleshootDisableNotifications;\n\nexport const sendNotification = async ({\n\tsubscription,\n\tsender,\n\thasReplyToThread,\n\thasMentionToAll,\n\thasMentionToHere,\n\tmessage,\n\tnotificationMessage,\n\troom,\n\tmentionIds,\n\tdisableAllMessageNotifications,\n}) => {\n\tif (TroubleshootDisableNotifications === true) {\n\t\treturn;\n\t}\n\n\t// don't notify the sender\n\tif (subscription.u._id === sender._id) {\n\t\treturn;\n\t}\n\n\tconst hasMentionToUser = mentionIds.includes(subscription.u._id);\n\n\t// mute group notifications (@here and @all) if not directly mentioned as well\n\tif (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n\t\treturn;\n\t}\n\n\tif (!subscription.receiver) {\n\t\tsubscription.receiver = [\n\t\t\tUsers.findOneById(subscription.u._id, {\n\t\t\t\tfields: {\n\t\t\t\t\tactive: 1,\n\t\t\t\t\temails: 1,\n\t\t\t\t\tlanguage: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tstatusConnection: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t}\n\n\tconst [receiver] = subscription.receiver;\n\n\tconst roomType = room.t;\n\t// If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n\tif (roomType === 'd' && !hasPermission(subscription.u._id, 'view-d-room')) {\n\t\treturn;\n\t}\n\n\tconst isThread = !!message.tmid && !message.tshow;\n\n\tnotificationMessage = parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\n\t// busy users don't receive desktop notification\n\tif (\n\t\tshouldNotifyDesktop({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatus: receiver.status,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\tdesktopNotifications,\n\t\t\thasMentionToAll,\n\t\t\thasMentionToHere,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tnotifyDesktopUser({\n\t\t\tnotificationMessage,\n\t\t\tuserId: subscription.u._id,\n\t\t\tuser: sender,\n\t\t\tmessage,\n\t\t\troom,\n\t\t});\n\t}\n\n\tconst queueItems = [];\n\n\tif (\n\t\tshouldNotifyMobile({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tmobilePushNotifications,\n\t\t\thasMentionToAll,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tqueueItems.push({\n\t\t\ttype: 'push',\n\t\t\tdata: await getPushData({\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: subscription.u._id,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\treceiver,\n\t\t\t}),\n\t\t});\n\t}\n\n\tif (\n\t\treceiver.emails &&\n\t\tshouldNotifyEmail({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\temailNotifications,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasMentionToAll,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\treceiver.emails.some((email) => {\n\t\t\tif (email.verified) {\n\t\t\t\tqueueItems.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tdata: getEmailData({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\treceiver,\n\t\t\t\t\t\tsender,\n\t\t\t\t\t\tsubscription,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\temailAddress: email.address,\n\t\t\t\t\t\thasMentionToUser,\n\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tif (queueItems.length) {\n\t\tNotification.scheduleItem({\n\t\t\tuser: receiver,\n\t\t\tuid: subscription.u._id,\n\t\t\trid: room._id,\n\t\t\tmid: message._id,\n\t\t\titems: queueItems,\n\t\t});\n\t}\n};\n\nconst project = {\n\t$project: {\n\t\t'desktopNotifications': 1,\n\t\t'emailNotifications': 1,\n\t\t'mobilePushNotifications': 1,\n\t\t'muteGroupMentions': 1,\n\t\t'name': 1,\n\t\t'rid': 1,\n\t\t'userHighlights': 1,\n\t\t'u._id': 1,\n\t\t'receiver.active': 1,\n\t\t'receiver.emails': 1,\n\t\t'receiver.language': 1,\n\t\t'receiver.status': 1,\n\t\t'receiver.statusConnection': 1,\n\t\t'receiver.username': 1,\n\t},\n};\n\nconst filter = {\n\t$match: {\n\t\t'receiver.active': true,\n\t},\n};\n\nconst lookup = {\n\t$lookup: {\n\t\tfrom: 'users',\n\t\tlocalField: 'u._id',\n\t\tforeignField: '_id',\n\t\tas: 'receiver',\n\t},\n};\n\nexport async function sendMessageNotifications(message, room, usersInThread = []) {\n\tif (TroubleshootDisableNotifications === true) {\n\t\treturn;\n\t}\n\n\tconst sender = roomTypes.getConfig(room.t).getMsgSender(message.u._id);\n\tif (!sender) {\n\t\treturn message;\n\t}\n\n\tconst { toAll: hasMentionToAll, toHere: hasMentionToHere, mentionIds } = getMentions(message);\n\n\tconst mentionIdsWithoutGroups = [...mentionIds];\n\n\t// getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n\tif (hasMentionToAll) {\n\t\tmentionIds.push('all');\n\t}\n\tif (hasMentionToHere) {\n\t\tmentionIds.push('here');\n\t}\n\n\t// add users in thread to mentions array because they follow the same rules\n\tmentionIds.push(...usersInThread);\n\n\tlet notificationMessage = callbacks.run('beforeSendMessageNotifications', message.msg);\n\tif (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n\t}\n\n\t// Don't fetch all users if room exceeds max members\n\tconst maxMembersForNotification = settings.get('Notifications_Max_Room_Members');\n\tconst roomMembersCount = Subscriptions.findByRoomId(room._id).count();\n\tconst disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n\n\tconst query = {\n\t\trid: room._id,\n\t\tignored: { $ne: sender._id },\n\t\tdisableNotifications: { $ne: true },\n\t\t$or: [{ 'userHighlights.0': { $exists: 1 } }, ...(usersInThread.length > 0 ? [{ 'u._id': { $in: usersInThread } }] : [])],\n\t};\n\n\t['audio', 'desktop', 'mobile', 'email'].forEach((kind) => {\n\t\tconst notificationField = `${kind === 'mobile' ? 'mobilePush' : kind}Notifications`;\n\n\t\tconst filter = { [notificationField]: 'all' };\n\n\t\tif (disableAllMessageNotifications) {\n\t\t\tfilter[`${kind}PrefOrigin`] = { $ne: 'user' };\n\t\t}\n\n\t\tquery.$or.push(filter);\n\n\t\tif (mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t} else if (!disableAllMessageNotifications && (hasMentionToAll || hasMentionToHere)) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t});\n\t\t}\n\n\t\tconst serverField = kind === 'email' ? 'emailNotificationMode' : `${kind}Notifications`;\n\t\tconst serverPreference = settings.get(`Accounts_Default_User_Preferences_${serverField}`);\n\t\tif (\n\t\t\t(room.t === 'd' && serverPreference !== 'nothing') ||\n\t\t\t(!disableAllMessageNotifications && (serverPreference === 'all' || hasMentionToAll || hasMentionToHere))\n\t\t) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t});\n\t\t} else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\t});\n\n\t// the find below is crucial. All subscription records returned will receive at least one kind of notification.\n\t// the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n\n\tconst subscriptions = await Subscriptions.model\n\t\t.rawCollection()\n\t\t.aggregate([{ $match: query }, lookup, filter, project])\n\t\t.toArray();\n\n\tsubscriptions.forEach((subscription) =>\n\t\tsendNotification({\n\t\t\tsubscription,\n\t\t\tsender,\n\t\t\thasMentionToAll,\n\t\t\thasMentionToHere,\n\t\t\tmessage,\n\t\t\tnotificationMessage,\n\t\t\troom,\n\t\t\tmentionIds,\n\t\t\tdisableAllMessageNotifications,\n\t\t\thasReplyToThread: usersInThread && usersInThread.includes(subscription.u._id),\n\t\t}),\n\t);\n\n\treturn {\n\t\tsender,\n\t\thasMentionToAll,\n\t\thasMentionToHere,\n\t\tnotificationMessage,\n\t\tmentionIds,\n\t\tmentionIdsWithoutGroups,\n\t};\n}\n\nexport async function sendAllNotifications(message, room) {\n\tif (TroubleshootDisableNotifications === true) {\n\t\treturn message;\n\t}\n\n\t// threads\n\tif (message.tmid) {\n\t\treturn message;\n\t}\n\t// skips this callback if the message was edited\n\tif (message.editedAt) {\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {\n\t\treturn message;\n\t}\n\n\tif (!room || room.t == null) {\n\t\treturn message;\n\t}\n\n\tconst { sender, hasMentionToAll, hasMentionToHere, notificationMessage, mentionIds, mentionIdsWithoutGroups } =\n\t\tawait sendMessageNotifications(message, room);\n\n\t// on public channels, if a mentioned user is not member of the channel yet, he will first join the channel and then be notified based on his preferences.\n\tif (room.t === 'c') {\n\t\t// get subscriptions from users already in room (to not send them a notification)\n\t\tconst mentions = [...mentionIdsWithoutGroups];\n\t\tSubscriptions.findByRoomIdAndUserIds(room._id, mentionIdsWithoutGroups, {\n\t\t\tfields: { 'u._id': 1 },\n\t\t}).forEach((subscription) => {\n\t\t\tconst index = mentions.indexOf(subscription.u._id);\n\t\t\tif (index !== -1) {\n\t\t\t\tmentions.splice(index, 1);\n\t\t\t}\n\t\t});\n\n\t\tPromise.all(\n\t\t\tmentions.map(async (userId) => {\n\t\t\t\tawait callJoinRoom(userId, room._id);\n\n\t\t\t\treturn userId;\n\t\t\t}),\n\t\t)\n\t\t\t.then((users) => {\n\t\t\t\tusers.forEach((userId) => {\n\t\t\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, userId);\n\n\t\t\t\t\tsendNotification({\n\t\t\t\t\t\tsubscription,\n\t\t\t\t\t\tsender,\n\t\t\t\t\t\thasMentionToAll,\n\t\t\t\t\t\thasMentionToHere,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tnotificationMessage,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\tmentionIds,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow new Meteor.Error(error);\n\t\t\t});\n\t}\n\n\treturn message;\n}\n\nsettings.watch('Troubleshoot_Disable_Notifications', (value) => {\n\tif (TroubleshootDisableNotifications === value) {\n\t\treturn;\n\t}\n\tTroubleshootDisableNotifications = value;\n\n\tif (value) {\n\t\treturn callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n\t}\n\n\tcallbacks.add(\n\t\t'afterSaveMessage',\n\t\t(message, room) => Promise.await(sendAllNotifications(message, room)),\n\t\tcallbacks.priority.LOW,\n\t\t'sendNotificationsOnMessage',\n\t);\n});\n"]},"sourceType":"module","hash":"2643635401a7f56a2a6916a92e147f75f560976e"}
