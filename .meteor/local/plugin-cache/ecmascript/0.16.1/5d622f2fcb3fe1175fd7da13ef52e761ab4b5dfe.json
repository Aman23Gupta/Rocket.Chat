{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatRooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/LivechatRooms.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatRooms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatRooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/LivechatRooms.js"}},"code":"const _excluded = [\"_id\", \"topic\", \"tags\", \"livechatData\"],\n      _excluded2 = [\"closer\", \"closedBy\", \"closedAt\", \"chatDuration\", \"serviceTimeDuration\"];\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 1);\nmodule.export({\n  LivechatRooms: () => LivechatRooms\n});\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 2);\nlet Rooms;\nmodule.link(\"./Rooms\", {\n  default(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet Settings;\nmodule.link(\"./Settings\", {\n  default(v) {\n    Settings = v;\n  }\n\n}, 4);\n\nclass LivechatRooms extends Base {\n  constructor() {\n    super(...arguments);\n\n    this.updateRoomCount = function () {\n      const query = {\n        _id: 'Livechat_Room_Count'\n      };\n      const update = {\n        $inc: {\n          value: 1\n        }\n      };\n      const livechatCount = Settings.findAndModify(query, null, update);\n      return livechatCount.value.value;\n    };\n\n    this.tryEnsureIndex({\n      open: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      departmentId: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'metrics.chatDuration': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'metrics.serviceTimeDuration': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'metrics.visitorInactivity': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'omnichannel.predictedVisitorAbandonmentAt': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      closedAt: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      servedBy: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'v.token': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'v.token': 1,\n      'email.thread': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'v._id': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      t: 1,\n      departmentId: 1,\n      closedAt: 1\n    }, {\n      partialFilterExpression: {\n        closedAt: {\n          $exists: true\n        }\n      }\n    });\n    this.tryEnsureIndex({\n      source: 1\n    }, {\n      sparse: true\n    });\n  }\n\n  findLivechat() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n    const query = Object.assign(filter, {\n      t: 'l'\n    });\n    return this.find(query, {\n      sort: {\n        ts: -1\n      },\n      offset,\n      limit\n    });\n  }\n\n  findOneByIdOrName(_idOrName, options) {\n    const query = {\n      t: 'l',\n      $or: [{\n        _id: _idOrName\n      }, {\n        name: _idOrName\n      }]\n    };\n    return this.findOne(query, options);\n  }\n\n  updateSurveyFeedbackById(_id, surveyFeedback) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        surveyFeedback\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateDataByToken(token, key, value) {\n    let overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const query = {\n      'v.token': token,\n      'open': true\n    };\n\n    if (!overwrite) {\n      const room = this.findOne(query, {\n        fields: {\n          livechatData: 1\n        }\n      });\n\n      if (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n        return true;\n      }\n    }\n\n    const update = {\n      $set: {\n        [\"livechatData.\".concat(key)]: value\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveRoomById(_ref) {\n    let {\n      _id,\n      topic,\n      tags,\n      livechatData\n    } = _ref,\n        extra = _objectWithoutProperties(_ref, _excluded);\n\n    const setData = _objectSpread({}, extra);\n\n    const unsetData = {};\n\n    if (topic != null) {\n      if (!_.isEmpty(s.trim(topic))) {\n        setData.topic = s.trim(topic);\n      } else {\n        unsetData.topic = 1;\n      }\n    }\n\n    if (Array.isArray(tags) && tags.length > 0) {\n      setData.tags = tags;\n    } else {\n      unsetData.tags = 1;\n    }\n\n    if (livechatData) {\n      Object.keys(livechatData).forEach(key => {\n        const value = s.trim(livechatData[key]);\n\n        if (value) {\n          setData[\"livechatData.\".concat(key)] = value;\n        } else {\n          unsetData[\"livechatData.\".concat(key)] = 1;\n        }\n      });\n    }\n\n    const update = {};\n\n    if (!_.isEmpty(setData)) {\n      update.$set = setData;\n    }\n\n    if (!_.isEmpty(unsetData)) {\n      update.$unset = unsetData;\n    }\n\n    if (_.isEmpty(update)) {\n      return;\n    }\n\n    return this.update({\n      _id\n    }, update);\n  }\n\n  findById(_id, fields) {\n    const options = {};\n\n    if (fields) {\n      options.fields = fields;\n    }\n\n    const query = {\n      t: 'l',\n      _id\n    };\n    return this.find(query, options);\n  }\n\n  findByIds(ids, fields) {\n    const options = {};\n\n    if (fields) {\n      options.fields = fields;\n    }\n\n    const query = {\n      t: 'l',\n      _id: {\n        $in: ids\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findOneById(_id) {\n    let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const options = {};\n\n    if (fields) {\n      options.fields = fields;\n    }\n\n    const query = {\n      t: 'l',\n      _id\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByIdAndVisitorToken(_id, visitorToken, fields) {\n    const options = {};\n\n    if (fields) {\n      options.fields = fields;\n    }\n\n    const query = {\n      't': 'l',\n      _id,\n      'v.token': visitorToken\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n    const query = {\n      't': 'l',\n      'v.token': visitorToken,\n      'email.thread': emailThread\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByVisitorTokenAndEmailThreadAndDepartment(visitorToken, emailThread, departmentId, options) {\n    const query = _objectSpread({\n      't': 'l',\n      'v.token': visitorToken,\n      'email.thread': emailThread\n    }, departmentId && {\n      departmentId\n    });\n\n    return this.findOne(query, options);\n  }\n\n  findOneOpenByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'v.token': visitorToken,\n      'email.thread': emailThread\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneLastServedAndClosedByVisitorToken(visitorToken) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      't': 'l',\n      'v.token': visitorToken,\n      'closedAt': {\n        $exists: true\n      },\n      'servedBy': {\n        $exists: true\n      }\n    };\n    options.sort = {\n      closedAt: -1\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByVisitorToken(visitorToken, fields) {\n    const options = {};\n\n    if (fields) {\n      options.fields = fields;\n    }\n\n    const query = {\n      't': 'l',\n      'v.token': visitorToken\n    };\n    return this.findOne(query, options);\n  }\n\n  findOpenByVisitorToken(visitorToken, options) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'v.token': visitorToken\n    };\n    return this.find(query, options);\n  }\n\n  findOneOpenByVisitorToken(visitorToken, options) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'v.token': visitorToken\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneOpenByVisitorTokenAndDepartmentId(visitorToken, departmentId, options) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'v.token': visitorToken,\n      departmentId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOpenByVisitorTokenAndDepartmentId(visitorToken, departmentId, options) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'v.token': visitorToken,\n      departmentId\n    };\n    return this.find(query, options);\n  }\n\n  findByVisitorToken(visitorToken) {\n    const query = {\n      't': 'l',\n      'v.token': visitorToken\n    };\n    return this.find(query);\n  }\n\n  findByVisitorIdAndAgentId(visitorId, agentId, options) {\n    const query = _objectSpread(_objectSpread({\n      t: 'l'\n    }, visitorId && {\n      'v._id': visitorId\n    }), agentId && {\n      'servedBy._id': agentId\n    });\n\n    return this.find(query, options);\n  }\n\n  findByVisitorId(visitorId) {\n    const query = {\n      't': 'l',\n      'v._id': visitorId\n    };\n    return this.find(query);\n  }\n\n  findOneOpenByRoomIdAndVisitorToken(roomId, visitorToken, options) {\n    const query = {\n      't': 'l',\n      '_id': roomId,\n      'open': true,\n      'v.token': visitorToken\n    };\n    return this.findOne(query, options);\n  }\n\n  findClosedRooms(departmentIds, options) {\n    const query = _objectSpread({\n      t: 'l',\n      open: {\n        $exists: false\n      },\n      closedAt: {\n        $exists: true\n      }\n    }, Array.isArray(departmentIds) && departmentIds.length > 0 && {\n      departmentId: {\n        $in: departmentIds\n      }\n    });\n\n    return this.find(query, options);\n  }\n\n  setResponseByRoomId(roomId, response) {\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $set: {\n        responseBy: {\n          _id: response.user._id,\n          username: response.user.username,\n          lastMessageTs: new Date()\n        }\n      },\n      $unset: {\n        waitingResponse: 1\n      }\n    });\n  }\n\n  setNotResponseByRoomId(roomId) {\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $set: {\n        waitingResponse: true\n      },\n      $unset: {\n        responseBy: 1\n      }\n    });\n  }\n\n  setAgentLastMessageTs(roomId) {\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $set: {\n        'responseBy.lastMessageTs': new Date()\n      }\n    });\n  }\n\n  saveAnalyticsDataByRoomId(room, message, analyticsData) {\n    const update = {\n      $set: {}\n    };\n\n    if (analyticsData) {\n      update.$set['metrics.response.avg'] = analyticsData.avgResponseTime;\n      update.$inc = {};\n      update.$inc['metrics.response.total'] = 1;\n      update.$inc['metrics.response.tt'] = analyticsData.responseTime;\n      update.$inc['metrics.reaction.tt'] = analyticsData.reactionTime;\n    }\n\n    if (analyticsData && analyticsData.firstResponseTime) {\n      update.$set['metrics.response.fd'] = analyticsData.firstResponseDate;\n      update.$set['metrics.response.ft'] = analyticsData.firstResponseTime;\n      update.$set['metrics.reaction.fd'] = analyticsData.firstReactionDate;\n      update.$set['metrics.reaction.ft'] = analyticsData.firstReactionTime;\n    } // livechat analytics : update last message timestamps\n\n\n    const visitorLastQuery = room.metrics && room.metrics.v ? room.metrics.v.lq : room.ts;\n    const agentLastReply = room.metrics && room.metrics.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n    if (message.token) {\n      // update visitor timestamp, only if its new inquiry and not continuing message\n      if (agentLastReply >= visitorLastQuery) {\n        // if first query, not continuing query from visitor\n        update.$set['metrics.v.lq'] = message.ts;\n      }\n    } else if (visitorLastQuery > agentLastReply) {\n      // update agent timestamp, if first response, not continuing\n      update.$set['metrics.servedBy.lr'] = message.ts;\n    }\n\n    return this.update({\n      _id: room._id,\n      t: 'l'\n    }, update);\n  }\n\n  getTotalConversationsBetweenDate(t, date) {\n    let {\n      departmentId\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    const query = _objectSpread({\n      t,\n      ts: {\n        $gte: new Date(date.gte),\n        // ISO Date, ts >= date.gte\n        $lt: new Date(date.lt) // ISODate, ts < date.lt\n\n      }\n    }, departmentId && departmentId !== 'undefined' && {\n      departmentId\n    });\n\n    return this.find(query).count();\n  }\n\n  getAnalyticsMetricsBetweenDate(t, date) {\n    let {\n      departmentId\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    const query = _objectSpread({\n      t,\n      ts: {\n        $gte: new Date(date.gte),\n        // ISO Date, ts >= date.gte\n        $lt: new Date(date.lt) // ISODate, ts < date.lt\n\n      }\n    }, departmentId && departmentId !== 'undefined' && {\n      departmentId\n    });\n\n    return this.find(query, {\n      fields: {\n        ts: 1,\n        departmentId: 1,\n        open: 1,\n        servedBy: 1,\n        metrics: 1,\n        msgs: 1\n      }\n    });\n  }\n\n  getAnalyticsMetricsBetweenDateWithMessages(t, date) {\n    let {\n      departmentId\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let extraQuery = arguments.length > 3 ? arguments[3] : undefined;\n    return this.model.rawCollection().aggregate([{\n      $match: _objectSpread({\n        t,\n        ts: {\n          $gte: new Date(date.gte),\n          // ISO Date, ts >= date.gte\n          $lt: new Date(date.lt) // ISODate, ts < date.lt\n\n        }\n      }, departmentId && departmentId !== 'undefined' && {\n        departmentId\n      })\n    }, {\n      $addFields: {\n        roomId: '$_id'\n      }\n    }, {\n      $lookup: {\n        from: 'rocketchat_message',\n        // mongo doesn't like _id as variable name here :(\n        let: {\n          roomId: '$roomId'\n        },\n        pipeline: [{\n          $match: {\n            $expr: {\n              $and: [{\n                $eq: ['$$roomId', '$rid']\n              }, {\n                // this is similar to do { $exists: false }\n                $lte: ['$t', null]\n              }, ...(extraQuery ? [extraQuery] : [])]\n            }\n          }\n        }],\n        as: 'messages'\n      }\n    }, {\n      $unwind: {\n        path: '$messages',\n        preserveNullAndEmptyArrays: true\n      }\n    }, {\n      $group: {\n        _id: {\n          _id: '$_id',\n          ts: '$ts',\n          departmentId: '$departmentId',\n          open: '$open',\n          servedBy: '$servedBy',\n          metrics: '$metrics'\n        },\n        messagesCount: {\n          $sum: 1\n        }\n      }\n    }, {\n      $project: {\n        _id: '$_id._id',\n        ts: '$_id.ts',\n        departmentId: '$_id.departmentId',\n        open: '$_id.open',\n        servedBy: '$_id.servedBy',\n        metrics: '$_id.metrics',\n        msgs: '$messagesCount'\n      }\n    }]);\n  }\n\n  getAnalyticsBetweenDate(date) {\n    let {\n      departmentId\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.model.rawCollection().aggregate([{\n      $match: _objectSpread({\n        t: 'l',\n        ts: {\n          $gte: new Date(date.gte),\n          // ISO Date, ts >= date.gte\n          $lt: new Date(date.lt) // ISODate, ts < date.lt\n\n        }\n      }, departmentId && departmentId !== 'undefined' && {\n        departmentId\n      })\n    }, {\n      $addFields: {\n        roomId: '$_id'\n      }\n    }, {\n      $lookup: {\n        from: 'rocketchat_message',\n        // mongo doesn't like _id as variable name here :(\n        let: {\n          roomId: '$roomId'\n        },\n        pipeline: [{\n          $match: {\n            $expr: {\n              $and: [{\n                $eq: ['$$roomId', '$rid']\n              }, {\n                // this is similar to do { $exists: false }\n                $lte: ['$t', null]\n              }]\n            }\n          }\n        }],\n        as: 'messages'\n      }\n    }, {\n      $unwind: {\n        path: '$messages',\n        preserveNullAndEmptyArrays: true\n      }\n    }, {\n      $group: {\n        _id: {\n          _id: '$_id',\n          ts: '$ts',\n          departmentId: '$departmentId',\n          open: '$open',\n          servedBy: '$servedBy',\n          metrics: '$metrics',\n          onHold: '$onHold'\n        },\n        messagesCount: {\n          $sum: 1\n        }\n      }\n    }, {\n      $project: {\n        _id: '$_id._id',\n        ts: '$_id.ts',\n        departmentId: '$_id.departmentId',\n        open: '$_id.open',\n        servedBy: '$_id.servedBy',\n        metrics: '$_id.metrics',\n        msgs: '$messagesCount',\n        onHold: '$_id.onHold'\n      }\n    }]);\n  }\n\n  closeByRoomId(roomId, closeInfo) {\n    const {\n      closer,\n      closedBy,\n      closedAt,\n      chatDuration,\n      serviceTimeDuration\n    } = closeInfo,\n          extraData = _objectWithoutProperties(closeInfo, _excluded2);\n\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $set: _objectSpread({\n        closer,\n        closedBy,\n        closedAt,\n        'metrics.chatDuration': chatDuration,\n        'metrics.serviceTimeDuration': serviceTimeDuration,\n        'v.status': 'offline'\n      }, extraData),\n      $unset: {\n        open: 1\n      }\n    });\n  }\n\n  requestTranscriptByRoomId(roomId) {\n    let transcriptInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      requestedAt,\n      requestedBy,\n      email,\n      subject\n    } = transcriptInfo;\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $set: {\n        transcriptRequest: {\n          requestedAt,\n          requestedBy,\n          email,\n          subject\n        }\n      }\n    });\n  }\n\n  removeTranscriptRequestByRoomId(roomId) {\n    return this.update({\n      _id: roomId,\n      t: 'l'\n    }, {\n      $unset: {\n        transcriptRequest: 1\n      }\n    });\n  }\n\n  findOpenByAgent(userId) {\n    const query = {\n      't': 'l',\n      'open': true,\n      'servedBy._id': userId\n    };\n    return this.find(query);\n  }\n\n  changeAgentByRoomId(roomId, newAgent) {\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        servedBy: {\n          _id: newAgent.agentId,\n          username: newAgent.username,\n          ts: new Date()\n        }\n      }\n    };\n\n    if (newAgent.ts) {\n      update.$set.servedBy.ts = newAgent.ts;\n    }\n\n    this.update(query, update);\n  }\n\n  changeDepartmentIdByRoomId(roomId, departmentId) {\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        departmentId\n      }\n    };\n    this.update(query, update);\n  }\n\n  saveCRMDataByRoomId(roomId, crmData) {\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        crmData\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateVisitorStatus(token, status) {\n    const query = {\n      'v.token': token,\n      'open': true,\n      't': 'l'\n    };\n    const update = {\n      $set: {\n        'v.status': status\n      }\n    };\n    return this.update(query, update);\n  }\n\n  removeAgentByRoomId(roomId) {\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        queuedAt: new Date()\n      },\n      $unset: {\n        servedBy: 1\n      }\n    };\n    this.update(query, update);\n  }\n\n  removeByVisitorToken(token) {\n    const query = {\n      't': 'l',\n      'v.token': token\n    };\n    this.remove(query);\n  }\n\n  removeById(_id) {\n    const query = {\n      _id,\n      t: 'l'\n    };\n    return this.remove(query);\n  }\n\n  setVisitorLastMessageTimestampByRoomId(roomId, lastMessageTs) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $set: {\n        'v.lastMessageTs': lastMessageTs\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setVisitorInactivityInSecondsById(roomId, visitorInactivity) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $set: {\n        'metrics.visitorInactivity': visitorInactivity\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAutoTransferredAtById(roomId) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $set: {\n        autoTransferredAt: new Date()\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAutoTransferOngoingById(roomId) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $set: {\n        autoTransferOngoing: true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unsetAutoTransferOngoingById(roomId) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $unset: {\n        autoTransferOngoing: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  changeVisitorByRoomId(roomId, _ref2) {\n    let {\n      _id,\n      username,\n      token\n    } = _ref2;\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        'v._id': _id,\n        'v.username': username,\n        'v.token': token\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unarchiveOneById(roomId) {\n    const query = {\n      _id: roomId,\n      t: 'l'\n    };\n    const update = {\n      $set: {\n        open: true\n      },\n      $unset: {\n        servedBy: 1,\n        closedAt: 1,\n        closedBy: 1,\n        closer: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n}\n\nmodule.exportDefault(new LivechatRooms(Rooms.model, true));","map":{"version":3,"sources":["app/models/server/models/LivechatRooms.js"],"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","export","LivechatRooms","s","_","Base","Rooms","Settings","constructor","updateRoomCount","query","_id","update","$inc","value","livechatCount","findAndModify","tryEnsureIndex","open","sparse","departmentId","closedAt","servedBy","t","partialFilterExpression","$exists","source","findLivechat","filter","offset","limit","Object","assign","find","sort","ts","findOneByIdOrName","_idOrName","options","$or","name","findOne","updateSurveyFeedbackById","surveyFeedback","$set","updateDataByToken","token","key","overwrite","room","fields","livechatData","saveRoomById","topic","tags","extra","setData","unsetData","isEmpty","trim","Array","isArray","length","keys","forEach","$unset","findById","findByIds","ids","$in","findOneById","findOneByIdAndVisitorToken","visitorToken","findOneByVisitorTokenAndEmailThread","emailThread","findOneByVisitorTokenAndEmailThreadAndDepartment","findOneOpenByVisitorTokenAndEmailThread","findOneLastServedAndClosedByVisitorToken","findOneByVisitorToken","findOpenByVisitorToken","findOneOpenByVisitorToken","findOneOpenByVisitorTokenAndDepartmentId","findOpenByVisitorTokenAndDepartmentId","findByVisitorToken","findByVisitorIdAndAgentId","visitorId","agentId","findByVisitorId","findOneOpenByRoomIdAndVisitorToken","roomId","findClosedRooms","departmentIds","setResponseByRoomId","response","responseBy","user","username","lastMessageTs","Date","waitingResponse","setNotResponseByRoomId","setAgentLastMessageTs","saveAnalyticsDataByRoomId","message","analyticsData","avgResponseTime","responseTime","reactionTime","firstResponseTime","firstResponseDate","firstReactionDate","firstReactionTime","visitorLastQuery","metrics","lq","agentLastReply","lr","getTotalConversationsBetweenDate","date","$gte","gte","$lt","lt","count","getAnalyticsMetricsBetweenDate","msgs","getAnalyticsMetricsBetweenDateWithMessages","extraQuery","model","rawCollection","aggregate","$match","$addFields","$lookup","from","let","pipeline","$expr","$and","$eq","$lte","as","$unwind","path","preserveNullAndEmptyArrays","$group","messagesCount","$sum","$project","getAnalyticsBetweenDate","onHold","closeByRoomId","closeInfo","closer","closedBy","chatDuration","serviceTimeDuration","extraData","requestTranscriptByRoomId","transcriptInfo","requestedAt","requestedBy","email","subject","transcriptRequest","removeTranscriptRequestByRoomId","findOpenByAgent","userId","changeAgentByRoomId","newAgent","changeDepartmentIdByRoomId","saveCRMDataByRoomId","crmData","updateVisitorStatus","status","removeAgentByRoomId","queuedAt","removeByVisitorToken","remove","removeById","setVisitorLastMessageTimestampByRoomId","setVisitorInactivityInSecondsById","visitorInactivity","setAutoTransferredAtById","autoTransferredAt","setAutoTransferOngoingById","autoTransferOngoing","unsetAutoTransferOngoingById","changeVisitorByRoomId","unarchiveOneById","exportDefault"],"mappings":"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","sourcesContent":["import s from 'underscore.string';\nimport _ from 'underscore';\n\nimport { Base } from './_Base';\nimport Rooms from './Rooms';\nimport Settings from './Settings';\n\nexport class LivechatRooms extends Base {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.tryEnsureIndex({ open: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ departmentId: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'metrics.chatDuration': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'metrics.serviceTimeDuration': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'metrics.visitorInactivity': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'omnichannel.predictedVisitorAbandonmentAt': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ closedAt: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ servedBy: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'v.token': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'v.token': 1, 'email.thread': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'v._id': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ t: 1, departmentId: 1, closedAt: 1 }, { partialFilterExpression: { closedAt: { $exists: true } } });\n\t\tthis.tryEnsureIndex({ source: 1 }, { sparse: true });\n\t}\n\n\tfindLivechat(filter = {}, offset = 0, limit = 20) {\n\t\tconst query = Object.assign(filter, { t: 'l' });\n\t\treturn this.find(query, { sort: { ts: -1 }, offset, limit });\n\t}\n\n\tfindOneByIdOrName(_idOrName, options) {\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateSurveyFeedbackById(_id, surveyFeedback) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsurveyFeedback,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateDataByToken(token, key, value, overwrite = true) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst room = this.findOne(query, { fields: { livechatData: 1 } });\n\t\t\tif (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRoomById({ _id, topic, tags, livechatData, ...extra }) {\n\t\tconst setData = { ...extra };\n\t\tconst unsetData = {};\n\n\t\tif (topic != null) {\n\t\t\tif (!_.isEmpty(s.trim(topic))) {\n\t\t\t\tsetData.topic = s.trim(topic);\n\t\t\t} else {\n\t\t\t\tunsetData.topic = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(tags) && tags.length > 0) {\n\t\t\tsetData.tags = tags;\n\t\t} else {\n\t\t\tunsetData.tags = 1;\n\t\t}\n\n\t\tif (livechatData) {\n\t\t\tObject.keys(livechatData).forEach((key) => {\n\t\t\t\tconst value = s.trim(livechatData[key]);\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update = {};\n\n\t\tif (!_.isEmpty(setData)) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (!_.isEmpty(unsetData)) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (_.isEmpty(update)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tfindById(_id, fields) {\n\t\tconst options = {};\n\n\t\tif (fields) {\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(ids, fields) {\n\t\tconst options = {};\n\n\t\tif (fields) {\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\t_id: { $in: ids },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneById(_id, fields = {}) {\n\t\tconst options = {};\n\n\t\tif (fields) {\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndVisitorToken(_id, visitorToken, fields) {\n\t\tconst options = {};\n\n\t\tif (fields) {\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t_id,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'email.thread': emailThread,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThreadAndDepartment(visitorToken, emailThread, departmentId, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'email.thread': emailThread,\n\t\t\t...(departmentId && { departmentId }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t'email.thread': emailThread,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneLastServedAndClosedByVisitorToken(visitorToken, options = {}) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'closedAt': { $exists: true },\n\t\t\t'servedBy': { $exists: true },\n\t\t};\n\n\t\toptions.sort = { closedAt: -1 };\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorToken(visitorToken, fields) {\n\t\tconst options = {};\n\n\t\tif (fields) {\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateRoomCount = function () {\n\t\tconst query = {\n\t\t\t_id: 'Livechat_Room_Count',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tvalue: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst livechatCount = Settings.findAndModify(query, null, update);\n\n\t\treturn livechatCount.value.value;\n\t};\n\n\tfindOpenByVisitorToken(visitorToken, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByVisitorToken(visitorToken, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndDepartmentId(visitorToken, departmentId, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOpenByVisitorTokenAndDepartmentId(visitorToken, departmentId, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByVisitorToken(visitorToken) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByVisitorIdAndAgentId(visitorId, agentId, options) {\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\t...(visitorId && { 'v._id': visitorId }),\n\t\t\t...(agentId && { 'servedBy._id': agentId }),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByVisitorId(visitorId) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindOneOpenByRoomIdAndVisitorToken(roomId, visitorToken, options) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'_id': roomId,\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindClosedRooms(departmentIds, options) {\n\t\tconst query = {\n\t\t\tt: 'l',\n\t\t\topen: { $exists: false },\n\t\t\tclosedAt: { $exists: true },\n\t\t\t...(Array.isArray(departmentIds) && departmentIds.length > 0 && { departmentId: { $in: departmentIds } }),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tsetResponseByRoomId(roomId, response) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tresponseBy: {\n\t\t\t\t\t\t_id: response.user._id,\n\t\t\t\t\t\tusername: response.user.username,\n\t\t\t\t\t\tlastMessageTs: new Date(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\twaitingResponse: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetNotResponseByRoomId(roomId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\twaitingResponse: true,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tresponseBy: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAgentLastMessageTs(roomId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'responseBy.lastMessageTs': new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsaveAnalyticsDataByRoomId(room, message, analyticsData) {\n\t\tconst update = {\n\t\t\t$set: {},\n\t\t};\n\n\t\tif (analyticsData) {\n\t\t\tupdate.$set['metrics.response.avg'] = analyticsData.avgResponseTime;\n\n\t\t\tupdate.$inc = {};\n\t\t\tupdate.$inc['metrics.response.total'] = 1;\n\t\t\tupdate.$inc['metrics.response.tt'] = analyticsData.responseTime;\n\t\t\tupdate.$inc['metrics.reaction.tt'] = analyticsData.reactionTime;\n\t\t}\n\n\t\tif (analyticsData && analyticsData.firstResponseTime) {\n\t\t\tupdate.$set['metrics.response.fd'] = analyticsData.firstResponseDate;\n\t\t\tupdate.$set['metrics.response.ft'] = analyticsData.firstResponseTime;\n\t\t\tupdate.$set['metrics.reaction.fd'] = analyticsData.firstReactionDate;\n\t\t\tupdate.$set['metrics.reaction.ft'] = analyticsData.firstReactionTime;\n\t\t}\n\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics && room.metrics.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics && room.metrics.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\tif (message.token) {\n\t\t\t// update visitor timestamp, only if its new inquiry and not continuing message\n\t\t\tif (agentLastReply >= visitorLastQuery) {\n\t\t\t\t// if first query, not continuing query from visitor\n\t\t\t\tupdate.$set['metrics.v.lq'] = message.ts;\n\t\t\t}\n\t\t} else if (visitorLastQuery > agentLastReply) {\n\t\t\t// update agent timestamp, if first response, not continuing\n\t\t\tupdate.$set['metrics.servedBy.lr'] = message.ts;\n\t\t}\n\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: room._id,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tgetTotalConversationsBetweenDate(t, date, { departmentId } = {}) {\n\t\tconst query = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(date.lt), // ISODate, ts < date.lt\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t};\n\n\t\treturn this.find(query).count();\n\t}\n\n\tgetAnalyticsMetricsBetweenDate(t, date, { departmentId } = {}) {\n\t\tconst query = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(date.lt), // ISODate, ts < date.lt\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tfields: { ts: 1, departmentId: 1, open: 1, servedBy: 1, metrics: 1, msgs: 1 },\n\t\t});\n\t}\n\n\tgetAnalyticsMetricsBetweenDateWithMessages(t, date, { departmentId } = {}, extraQuery) {\n\t\treturn this.model.rawCollection().aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt,\n\t\t\t\t\tts: {\n\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t$lt: new Date(date.lt), // ISODate, ts < date.lt\n\t\t\t\t\t},\n\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t...(extraQuery ? [extraQuery] : []),\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'messages',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$messages',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t},\n\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetAnalyticsBetweenDate(date, { departmentId } = {}) {\n\t\treturn this.model.rawCollection().aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt: 'l',\n\t\t\t\t\tts: {\n\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t$lt: new Date(date.lt), // ISODate, ts < date.lt\n\t\t\t\t\t},\n\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'messages',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$messages',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\tonHold: '$onHold',\n\t\t\t\t\t},\n\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\tonHold: '$_id.onHold',\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tcloseByRoomId(roomId, closeInfo) {\n\t\tconst { closer, closedBy, closedAt, chatDuration, serviceTimeDuration, ...extraData } = closeInfo;\n\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tcloser,\n\t\t\t\t\tclosedBy,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\t'metrics.chatDuration': chatDuration,\n\t\t\t\t\t'metrics.serviceTimeDuration': serviceTimeDuration,\n\t\t\t\t\t'v.status': 'offline',\n\t\t\t\t\t...extraData,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\topen: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\trequestTranscriptByRoomId(roomId, transcriptInfo = {}) {\n\t\tconst { requestedAt, requestedBy, email, subject } = transcriptInfo;\n\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttranscriptRequest: {\n\t\t\t\t\t\trequestedAt,\n\t\t\t\t\t\trequestedBy,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveTranscriptRequestByRoomId(roomId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\ttranscriptRequest: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOpenByAgent(userId) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tchangeAgentByRoomId(roomId, newAgent) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tservedBy: {\n\t\t\t\t\t_id: newAgent.agentId,\n\t\t\t\t\tusername: newAgent.username,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tif (newAgent.ts) {\n\t\t\tupdate.$set.servedBy.ts = newAgent.ts;\n\t\t}\n\n\t\tthis.update(query, update);\n\t}\n\n\tchangeDepartmentIdByRoomId(roomId, departmentId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartmentId,\n\t\t\t},\n\t\t};\n\n\t\tthis.update(query, update);\n\t}\n\n\tsaveCRMDataByRoomId(roomId, crmData) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcrmData,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateVisitorStatus(token, status) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t\t't': 'l',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tremoveAgentByRoomId(roomId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: { queuedAt: new Date() },\n\t\t\t$unset: { servedBy: 1 },\n\t\t};\n\n\t\tthis.update(query, update);\n\t}\n\n\tremoveByVisitorToken(token) {\n\t\tconst query = {\n\t\t\t't': 'l',\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tthis.remove(query);\n\t}\n\n\tremoveById(_id) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tt: 'l',\n\t\t};\n\n\t\treturn this.remove(query);\n\t}\n\n\tsetVisitorLastMessageTimestampByRoomId(roomId, lastMessageTs) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v.lastMessageTs': lastMessageTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetVisitorInactivityInSecondsById(roomId, visitorInactivity) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'metrics.visitorInactivity': visitorInactivity,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAutoTransferredAtById(roomId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferredAt: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAutoTransferOngoingById(roomId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferOngoing: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunsetAutoTransferOngoingById(roomId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tautoTransferOngoing: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tchangeVisitorByRoomId(roomId, { _id, username, token }) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v._id': _id,\n\t\t\t\t'v.username': username,\n\t\t\t\t'v.token': token,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunarchiveOneById(roomId) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n}\n\nexport default new LivechatRooms(Rooms.model, true);\n"]},"sourceType":"module","hash":"5d622f2fcb3fe1175fd7da13ef52e761ab4b5dfe"}
