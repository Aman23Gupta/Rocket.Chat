{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/lib/messages.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/lib/messages.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/lib/messages.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/lib/messages.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/lib/messages.js"}},"code":"module.export({\n  findMentionedMessages: () => findMentionedMessages,\n  findStarredMessages: () => findStarredMessages,\n  findSnippetedMessageById: () => findSnippetedMessageById,\n  findSnippetedMessages: () => findSnippetedMessages,\n  findDiscussionsFromRoom: () => findDiscussionsFromRoom\n});\nlet canAccessRoomAsync;\nmodule.link(\"../../../authorization/server/functions/canAccessRoom\", {\n  canAccessRoomAsync(v) {\n    canAccessRoomAsync = v;\n  }\n\n}, 0);\nlet Rooms, Messages, Users;\nmodule.link(\"../../../models/server/raw\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\nlet getValue;\nmodule.link(\"../../../settings/server/raw\", {\n  getValue(v) {\n    getValue = v;\n  }\n\n}, 2);\n\nfunction findMentionedMessages(_ref) {\n  return Promise.asyncApply(() => {\n    let {\n      uid,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    } = _ref;\n    const room = Promise.await(Rooms.findOneById(roomId));\n\n    if (!Promise.await(canAccessRoomAsync(room, {\n      _id: uid\n    }))) {\n      throw new Error('error-not-allowed');\n    }\n\n    const user = Promise.await(Users.findOneById(uid, {\n      fields: {\n        username: 1\n      }\n    }));\n\n    if (!user) {\n      throw new Error('invalid-user');\n    }\n\n    const cursor = Promise.await(Messages.findVisibleByMentionAndRoomId(user.username, roomId, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    }));\n    const total = Promise.await(cursor.count());\n    const messages = Promise.await(cursor.toArray());\n    return {\n      messages,\n      count: messages.length,\n      offset,\n      total\n    };\n  });\n}\n\nfunction findStarredMessages(_ref2) {\n  return Promise.asyncApply(() => {\n    let {\n      uid,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    } = _ref2;\n    const room = Promise.await(Rooms.findOneById(roomId));\n\n    if (!Promise.await(canAccessRoomAsync(room, {\n      _id: uid\n    }))) {\n      throw new Error('error-not-allowed');\n    }\n\n    const user = Promise.await(Users.findOneById(uid, {\n      fields: {\n        username: 1\n      }\n    }));\n\n    if (!user) {\n      throw new Error('invalid-user');\n    }\n\n    const cursor = Promise.await(Messages.findStarredByUserAtRoom(uid, roomId, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    }));\n    const total = Promise.await(cursor.count());\n    const messages = Promise.await(cursor.toArray());\n    return {\n      messages,\n      count: messages.length,\n      offset,\n      total\n    };\n  });\n}\n\nfunction findSnippetedMessageById(_ref3) {\n  return Promise.asyncApply(() => {\n    let {\n      uid,\n      messageId\n    } = _ref3;\n\n    if (!Promise.await(getValue('Message_AllowSnippeting'))) {\n      throw new Error('error-not-allowed');\n    }\n\n    if (!uid) {\n      throw new Error('invalid-user');\n    }\n\n    const snippet = Promise.await(Messages.findOne({\n      _id: messageId,\n      snippeted: true\n    }));\n\n    if (!snippet) {\n      throw new Error('invalid-message');\n    }\n\n    const room = Promise.await(Rooms.findOneById(snippet.rid));\n\n    if (!room) {\n      throw new Error('invalid-message');\n    }\n\n    if (!Promise.await(canAccessRoomAsync(room, {\n      _id: uid\n    }))) {\n      throw new Error('error-not-allowed');\n    }\n\n    return {\n      message: snippet\n    };\n  });\n}\n\nfunction findSnippetedMessages(_ref4) {\n  return Promise.asyncApply(() => {\n    let {\n      uid,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    } = _ref4;\n\n    if (!Promise.await(getValue('Message_AllowSnippeting'))) {\n      throw new Error('error-not-allowed');\n    }\n\n    const room = Promise.await(Rooms.findOneById(roomId));\n\n    if (!Promise.await(canAccessRoomAsync(room, {\n      _id: uid\n    }))) {\n      throw new Error('error-not-allowed');\n    }\n\n    const cursor = Promise.await(Messages.findSnippetedByRoom(roomId, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    }));\n    const total = Promise.await(cursor.count());\n    const messages = Promise.await(cursor.toArray());\n    return {\n      messages,\n      count: messages.length,\n      offset,\n      total\n    };\n  });\n}\n\nfunction findDiscussionsFromRoom(_ref5) {\n  return Promise.asyncApply(() => {\n    let {\n      uid,\n      roomId,\n      text,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    } = _ref5;\n    const room = Promise.await(Rooms.findOneById(roomId));\n\n    if (!Promise.await(canAccessRoomAsync(room, {\n      _id: uid\n    }))) {\n      throw new Error('error-not-allowed');\n    }\n\n    const cursor = Messages.findDiscussionsByRoomAndText(roomId, text, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    });\n    const total = Promise.await(cursor.count());\n    const messages = Promise.await(cursor.toArray());\n    return {\n      messages,\n      count: messages.length,\n      offset,\n      total\n    };\n  });\n}","map":{"version":3,"sources":["app/api/server/lib/messages.js"],"names":["module","export","findMentionedMessages","findStarredMessages","findSnippetedMessageById","findSnippetedMessages","findDiscussionsFromRoom","canAccessRoomAsync","link","v","Rooms","Messages","Users","getValue","uid","roomId","pagination","offset","count","sort","room","findOneById","_id","Error","user","fields","username","cursor","findVisibleByMentionAndRoomId","ts","skip","limit","total","messages","toArray","length","findStarredByUserAtRoom","messageId","snippet","findOne","snippeted","rid","message","findSnippetedByRoom","text","findDiscussionsByRoomAndText"],"mappings":"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","sourcesContent":["import { canAccessRoomAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { Rooms, Messages, Users } from '../../../models/server/raw';\nimport { getValue } from '../../../settings/server/raw';\n\nexport async function findMentionedMessages({ uid, roomId, pagination: { offset, count, sort } }) {\n\tconst room = await Rooms.findOneById(roomId);\n\tif (!(await canAccessRoomAsync(room, { _id: uid }))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\tconst user = await Users.findOneById(uid, { fields: { username: 1 } });\n\tif (!user) {\n\t\tthrow new Error('invalid-user');\n\t}\n\n\tconst cursor = await Messages.findVisibleByMentionAndRoomId(user.username, roomId, {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst total = await cursor.count();\n\n\tconst messages = await cursor.toArray();\n\n\treturn {\n\t\tmessages,\n\t\tcount: messages.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function findStarredMessages({ uid, roomId, pagination: { offset, count, sort } }) {\n\tconst room = await Rooms.findOneById(roomId);\n\tif (!(await canAccessRoomAsync(room, { _id: uid }))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\tconst user = await Users.findOneById(uid, { fields: { username: 1 } });\n\tif (!user) {\n\t\tthrow new Error('invalid-user');\n\t}\n\n\tconst cursor = await Messages.findStarredByUserAtRoom(uid, roomId, {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst total = await cursor.count();\n\n\tconst messages = await cursor.toArray();\n\n\treturn {\n\t\tmessages,\n\t\tcount: messages.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function findSnippetedMessageById({ uid, messageId }) {\n\tif (!(await getValue('Message_AllowSnippeting'))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\n\tif (!uid) {\n\t\tthrow new Error('invalid-user');\n\t}\n\n\tconst snippet = await Messages.findOne({ _id: messageId, snippeted: true });\n\n\tif (!snippet) {\n\t\tthrow new Error('invalid-message');\n\t}\n\n\tconst room = await Rooms.findOneById(snippet.rid);\n\n\tif (!room) {\n\t\tthrow new Error('invalid-message');\n\t}\n\n\tif (!(await canAccessRoomAsync(room, { _id: uid }))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\n\treturn {\n\t\tmessage: snippet,\n\t};\n}\n\nexport async function findSnippetedMessages({ uid, roomId, pagination: { offset, count, sort } }) {\n\tif (!(await getValue('Message_AllowSnippeting'))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\tconst room = await Rooms.findOneById(roomId);\n\n\tif (!(await canAccessRoomAsync(room, { _id: uid }))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\n\tconst cursor = await Messages.findSnippetedByRoom(roomId, {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst total = await cursor.count();\n\n\tconst messages = await cursor.toArray();\n\n\treturn {\n\t\tmessages,\n\t\tcount: messages.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function findDiscussionsFromRoom({ uid, roomId, text, pagination: { offset, count, sort } }) {\n\tconst room = await Rooms.findOneById(roomId);\n\n\tif (!(await canAccessRoomAsync(room, { _id: uid }))) {\n\t\tthrow new Error('error-not-allowed');\n\t}\n\n\tconst cursor = Messages.findDiscussionsByRoomAndText(roomId, text, {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst total = await cursor.count();\n\n\tconst messages = await cursor.toArray();\n\n\treturn {\n\t\tmessages,\n\t\tcount: messages.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n"]},"sourceType":"module","hash":"f72d0d69c77e86d8112c04fc472e5aa44a6ab581"}
