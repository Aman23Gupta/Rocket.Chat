{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAPI.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/SlackAPI.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAPI.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/SlackAPI.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/SlackAPI.js"}},"code":"module.export({\n  SlackAPI: () => SlackAPI\n});\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 0);\n\nclass SlackAPI {\n  constructor(apiToken) {\n    this.apiToken = apiToken;\n  }\n\n  getChannels() {\n    let cursor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let channels = [];\n    const response = HTTP.get('https://slack.com/api/conversations.list', {\n      params: {\n        token: this.apiToken,\n        types: 'public_channel',\n        exclude_archived: true,\n        limit: 1000,\n        cursor\n      }\n    });\n\n    if (response && response.data && Array.isArray(response.data.channels) && response.data.channels.length > 0) {\n      channels = channels.concat(response.data.channels);\n\n      if (response.data.response_metadata && response.data.response_metadata.next_cursor) {\n        const nextChannels = this.getChannels(response.data.response_metadata.next_cursor);\n        channels = channels.concat(nextChannels);\n      }\n    }\n\n    return channels;\n  }\n\n  getGroups() {\n    let cursor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let groups = [];\n    const response = HTTP.get('https://slack.com/api/conversations.list', {\n      params: {\n        token: this.apiToken,\n        types: 'private_channel',\n        exclude_archived: true,\n        limit: 1000,\n        cursor\n      }\n    });\n\n    if (response && response.data && Array.isArray(response.data.channels) && response.data.channels.length > 0) {\n      groups = groups.concat(response.data.channels);\n\n      if (response.data.response_metadata && response.data.response_metadata.next_cursor) {\n        const nextGroups = this.getGroups(response.data.response_metadata.next_cursor);\n        groups = groups.concat(nextGroups);\n      }\n    }\n\n    return groups;\n  }\n\n  getRoomInfo(roomId) {\n    const response = HTTP.get('https://slack.com/api/conversations.info', {\n      params: {\n        token: this.apiToken,\n        channel: roomId,\n        include_num_members: true\n      }\n    });\n    return response && response.data && response.statusCode === 200 && response.data.ok && response.data.channel;\n  }\n\n  getMembers(channelId) {\n    const {\n      num_members\n    } = this.getRoomInfo(channelId);\n    const MAX_MEMBERS_PER_CALL = 100;\n    let members = [];\n    let currentCursor = '';\n\n    for (let index = 0; index < num_members; index += MAX_MEMBERS_PER_CALL) {\n      const response = HTTP.get('https://slack.com/api/conversations.members', {\n        params: {\n          token: this.apiToken,\n          channel: channelId,\n          limit: MAX_MEMBERS_PER_CALL,\n          cursor: currentCursor\n        }\n      });\n\n      if (response && response.data && response.statusCode === 200 && response.data.ok && Array.isArray(response.data.members)) {\n        members = members.concat(response.data.members);\n        const hasMoreItems = response.data.response_metadata && response.data.response_metadata.next_cursor;\n\n        if (hasMoreItems) {\n          currentCursor = response.data.response_metadata.next_cursor;\n        }\n      }\n    }\n\n    return members;\n  }\n\n  react(data) {\n    const response = HTTP.post('https://slack.com/api/reactions.add', {\n      params: data\n    });\n    return response && response.statusCode === 200 && response.data && response.data.ok;\n  }\n\n  removeReaction(data) {\n    const response = HTTP.post('https://slack.com/api/reactions.remove', {\n      params: data\n    });\n    return response && response.statusCode === 200 && response.data && response.data.ok;\n  }\n\n  removeMessage(data) {\n    const response = HTTP.post('https://slack.com/api/chat.delete', {\n      params: data\n    });\n    return response && response.statusCode === 200 && response.data && response.data.ok;\n  }\n\n  sendMessage(data) {\n    return HTTP.post('https://slack.com/api/chat.postMessage', {\n      params: data\n    });\n  }\n\n  updateMessage(data) {\n    const response = HTTP.post('https://slack.com/api/chat.update', {\n      params: data\n    });\n    return response && response.statusCode === 200 && response.data && response.data.ok;\n  }\n\n  getHistory(family, options) {\n    const response = HTTP.get(\"https://slack.com/api/\".concat(family, \".history\"), {\n      params: Object.assign({\n        token: this.apiToken\n      }, options)\n    });\n    return response && response.data;\n  }\n\n  getPins(channelId) {\n    const response = HTTP.get('https://slack.com/api/pins.list', {\n      params: {\n        token: this.apiToken,\n        channel: channelId\n      }\n    });\n    return response && response.data && response.statusCode === 200 && response.data.ok && response.data.items;\n  }\n\n  getUser(userId) {\n    const response = HTTP.get('https://slack.com/api/users.info', {\n      params: {\n        token: this.apiToken,\n        user: userId\n      }\n    });\n    return response && response.data && response.statusCode === 200 && response.data.ok && response.data.user;\n  }\n\n}","map":{"version":3,"sources":["app/slackbridge/server/SlackAPI.js"],"names":["module","export","SlackAPI","HTTP","link","v","constructor","apiToken","getChannels","cursor","channels","response","get","params","token","types","exclude_archived","limit","data","Array","isArray","length","concat","response_metadata","next_cursor","nextChannels","getGroups","groups","nextGroups","getRoomInfo","roomId","channel","include_num_members","statusCode","ok","getMembers","channelId","num_members","MAX_MEMBERS_PER_CALL","members","currentCursor","index","hasMoreItems","react","post","removeReaction","removeMessage","sendMessage","updateMessage","getHistory","family","options","Object","assign","getPins","items","getUser","userId","user"],"mappings":"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","sourcesContent":["import { HTTP } from 'meteor/http';\n\nexport class SlackAPI {\n\tconstructor(apiToken) {\n\t\tthis.apiToken = apiToken;\n\t}\n\n\tgetChannels(cursor = null) {\n\t\tlet channels = [];\n\n\t\tconst response = HTTP.get('https://slack.com/api/conversations.list', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttypes: 'public_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\tcursor,\n\t\t\t},\n\t\t});\n\n\t\tif (response && response.data && Array.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tchannels = channels.concat(response.data.channels);\n\t\t\tif (response.data.response_metadata && response.data.response_metadata.next_cursor) {\n\t\t\t\tconst nextChannels = this.getChannels(response.data.response_metadata.next_cursor);\n\t\t\t\tchannels = channels.concat(nextChannels);\n\t\t\t}\n\t\t}\n\n\t\treturn channels;\n\t}\n\n\tgetGroups(cursor = null) {\n\t\tlet groups = [];\n\t\tconst response = HTTP.get('https://slack.com/api/conversations.list', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttypes: 'private_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\tcursor,\n\t\t\t},\n\t\t});\n\n\t\tif (response && response.data && Array.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tgroups = groups.concat(response.data.channels);\n\t\t\tif (response.data.response_metadata && response.data.response_metadata.next_cursor) {\n\t\t\t\tconst nextGroups = this.getGroups(response.data.response_metadata.next_cursor);\n\t\t\t\tgroups = groups.concat(nextGroups);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\tgetRoomInfo(roomId) {\n\t\tconst response = HTTP.get('https://slack.com/api/conversations.info', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tchannel: roomId,\n\t\t\t\tinclude_num_members: true,\n\t\t\t},\n\t\t});\n\t\treturn response && response.data && response.statusCode === 200 && response.data.ok && response.data.channel;\n\t}\n\n\tgetMembers(channelId) {\n\t\tconst { num_members } = this.getRoomInfo(channelId);\n\t\tconst MAX_MEMBERS_PER_CALL = 100;\n\t\tlet members = [];\n\t\tlet currentCursor = '';\n\t\tfor (let index = 0; index < num_members; index += MAX_MEMBERS_PER_CALL) {\n\t\t\tconst response = HTTP.get('https://slack.com/api/conversations.members', {\n\t\t\t\tparams: {\n\t\t\t\t\ttoken: this.apiToken,\n\t\t\t\t\tchannel: channelId,\n\t\t\t\t\tlimit: MAX_MEMBERS_PER_CALL,\n\t\t\t\t\tcursor: currentCursor,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (response && response.data && response.statusCode === 200 && response.data.ok && Array.isArray(response.data.members)) {\n\t\t\t\tmembers = members.concat(response.data.members);\n\t\t\t\tconst hasMoreItems = response.data.response_metadata && response.data.response_metadata.next_cursor;\n\t\t\t\tif (hasMoreItems) {\n\t\t\t\t\tcurrentCursor = response.data.response_metadata.next_cursor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn members;\n\t}\n\n\treact(data) {\n\t\tconst response = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\treturn response && response.statusCode === 200 && response.data && response.data.ok;\n\t}\n\n\tremoveReaction(data) {\n\t\tconst response = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\treturn response && response.statusCode === 200 && response.data && response.data.ok;\n\t}\n\n\tremoveMessage(data) {\n\t\tconst response = HTTP.post('https://slack.com/api/chat.delete', { params: data });\n\t\treturn response && response.statusCode === 200 && response.data && response.data.ok;\n\t}\n\n\tsendMessage(data) {\n\t\treturn HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t}\n\n\tupdateMessage(data) {\n\t\tconst response = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\treturn response && response.statusCode === 200 && response.data && response.data.ok;\n\t}\n\n\tgetHistory(family, options) {\n\t\tconst response = HTTP.get(`https://slack.com/api/${family}.history`, {\n\t\t\tparams: Object.assign({ token: this.apiToken }, options),\n\t\t});\n\t\treturn response && response.data;\n\t}\n\n\tgetPins(channelId) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tchannel: channelId,\n\t\t\t},\n\t\t});\n\t\treturn response && response.data && response.statusCode === 200 && response.data.ok && response.data.items;\n\t}\n\n\tgetUser(userId) {\n\t\tconst response = HTTP.get('https://slack.com/api/users.info', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tuser: userId,\n\t\t\t},\n\t\t});\n\t\treturn response && response.data && response.statusCode === 200 && response.data.ok && response.data.user;\n\t}\n}\n"]},"sourceType":"module","hash":"bfc73cf2e6c388dffce8b0acff6706b8b9204676"}
