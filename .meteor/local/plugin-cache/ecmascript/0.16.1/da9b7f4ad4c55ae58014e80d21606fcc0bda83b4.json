{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/push.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push/server/push.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/push.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/push.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push/server/push.js"}},"code":"module.export({\n  _matchToken: () => _matchToken,\n  appTokensCollection: () => appTokensCollection,\n  PushClass: () => PushClass,\n  Push: () => Push\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 3);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 4);\nlet initAPN, sendAPN;\nmodule.link(\"./apn\", {\n  initAPN(v) {\n    initAPN = v;\n  },\n\n  sendAPN(v) {\n    sendAPN = v;\n  }\n\n}, 5);\nlet sendGCM;\nmodule.link(\"./gcm\", {\n  sendGCM(v) {\n    sendGCM = v;\n  }\n\n}, 6);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 7);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 8);\n\nconst _matchToken = Match.OneOf({\n  apn: String\n}, {\n  gcm: String\n});\n\nconst appTokensCollection = new Mongo.Collection('_raix_push_app_tokens');\n\nappTokensCollection._ensureIndex({\n  userId: 1\n});\n\nclass PushClass {\n  constructor() {\n    this.options = {};\n    this.isConfigured = false;\n  }\n\n  configure(options) {\n    this.options = Object.assign({\n      sendTimeout: 60000 // Timeout period for notification send\n\n    }, options); // https://npmjs.org/package/apn\n    // After requesting the certificate from Apple, export your private key as\n    // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n    // gateway.push.apple.com, port 2195\n    // gateway.sandbox.push.apple.com, port 2195\n    // Now, in the directory containing cert.cer and key.p12 execute the\n    // following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n    // Block multiple calls\n\n    if (this.isConfigured) {\n      throw new Error('Configure should not be called more than once!');\n    }\n\n    this.isConfigured = true;\n    logger.debug('Configure', this.options);\n\n    if (this.options.apn) {\n      initAPN({\n        options: this.options,\n        absoluteUrl: Meteor.absoluteUrl()\n      });\n    }\n  }\n\n  sendWorker(task, interval) {\n    logger.debug(\"Send worker started, using interval: \".concat(interval));\n    return Meteor.setInterval(() => {\n      try {\n        task();\n      } catch (error) {\n        logger.debug(\"Error while sending: \".concat(error.message));\n      }\n    }, interval);\n  }\n\n  _replaceToken(currentToken, newToken) {\n    appTokensCollection.rawCollection().updateMany({\n      token: currentToken\n    }, {\n      $set: {\n        token: newToken\n      }\n    });\n  }\n\n  _removeToken(token) {\n    appTokensCollection.rawCollection().deleteOne({\n      token\n    });\n  }\n\n  _shouldUseGateway() {\n    return !!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms');\n  }\n\n  sendNotificationNative(app, notification, countApn, countGcm) {\n    logger.debug('send to token', app.token);\n\n    if (app.token.apn) {\n      countApn.push(app._id); // Send to APN\n\n      if (this.options.apn) {\n        notification.topic = app.appName;\n        sendAPN({\n          userToken: app.token.apn,\n          notification,\n          _removeToken: this._removeToken\n        });\n      }\n    } else if (app.token.gcm) {\n      countGcm.push(app._id); // Send to GCM\n      // We do support multiple here - so we should construct an array\n      // and send it bulk - Investigate limit count of id's\n\n      if (this.options.gcm && this.options.gcm.apiKey) {\n        sendGCM({\n          userTokens: app.token.gcm,\n          notification,\n          _replaceToken: this._replaceToken,\n          _removeToken: this._removeToken,\n          options: this.options\n        });\n      }\n    } else {\n      throw new Error('send got a faulty query');\n    }\n  }\n\n  sendGatewayPush(gateway, service, token, notification) {\n    let tries = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    notification.uniqueId = this.options.uniqueId;\n    const data = {\n      data: {\n        token,\n        options: notification\n      },\n      headers: {}\n    };\n\n    if (token && this.options.getAuthorization) {\n      data.headers.Authorization = this.options.getAuthorization();\n    }\n\n    return HTTP.post(\"\".concat(gateway, \"/push/\").concat(service, \"/send\"), data, (error, response) => {\n      if ((response === null || response === void 0 ? void 0 : response.statusCode) === 406) {\n        logger.info('removing push token', token);\n        appTokensCollection.remove({\n          $or: [{\n            'token.apn': token\n          }, {\n            'token.gcm': token\n          }]\n        });\n        return;\n      }\n\n      if ((response === null || response === void 0 ? void 0 : response.statusCode) === 422) {\n        logger.info('gateway rejected push notification. not retrying.', response);\n        return;\n      }\n\n      if ((response === null || response === void 0 ? void 0 : response.statusCode) === 401) {\n        logger.warn('Error sending push to gateway (not authorized)', response);\n        return;\n      }\n\n      if (!error) {\n        return;\n      }\n\n      logger.error(\"Error sending push to gateway (\".concat(tries, \" try) ->\"), error);\n\n      if (tries <= 4) {\n        // [1, 2, 4, 8, 16] minutes (total 31)\n        const ms = 60000 * Math.pow(2, tries);\n        logger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n        return Meteor.setTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n      }\n    });\n  }\n\n  sendNotificationGateway(app, notification, countApn, countGcm) {\n    for (const gateway of this.options.gateways) {\n      logger.debug('send to token', app.token);\n\n      if (app.token.apn) {\n        countApn.push(app._id);\n        notification.topic = app.appName;\n        return this.sendGatewayPush(gateway, 'apn', app.token.apn, notification);\n      }\n\n      if (app.token.gcm) {\n        countGcm.push(app._id);\n        return this.sendGatewayPush(gateway, 'gcm', app.token.gcm, notification);\n      }\n    }\n  }\n\n  sendNotification() {\n    let notification = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      badge: 0\n    };\n    logger.debug('Sending notification', notification);\n    const countApn = [];\n    const countGcm = [];\n\n    if (notification.from !== String(notification.from)) {\n      throw new Error('Push.send: option \"from\" not a string');\n    }\n\n    if (notification.title !== String(notification.title)) {\n      throw new Error('Push.send: option \"title\" not a string');\n    }\n\n    if (notification.text !== String(notification.text)) {\n      throw new Error('Push.send: option \"text\" not a string');\n    }\n\n    logger.debug(\"send message \\\"\".concat(notification.title, \"\\\" to userId\"), notification.userId);\n    const query = {\n      userId: notification.userId,\n      $or: [{\n        'token.apn': {\n          $exists: true\n        }\n      }, {\n        'token.gcm': {\n          $exists: true\n        }\n      }]\n    };\n    appTokensCollection.find(query).forEach(app => {\n      logger.debug('send to token', app.token);\n\n      if (this._shouldUseGateway()) {\n        return this.sendNotificationGateway(app, notification, countApn, countGcm);\n      }\n\n      return this.sendNotificationNative(app, notification, countApn, countGcm);\n    });\n\n    if (settings.get('Log_Level') === '2') {\n      logger.debug(\"Sent message \\\"\".concat(notification.title, \"\\\" to \").concat(countApn.length, \" ios apps \").concat(countGcm.length, \" android apps\")); // Add some verbosity about the send result, making sure the developer\n      // understands what just happened.\n\n      if (!countApn.length && !countGcm.length) {\n        if (appTokensCollection.find().count() === 0) {\n          logger.debug('GUIDE: The \"appTokensCollection\" is empty - No clients have registered on the server yet...');\n        }\n      } else if (!countApn.length) {\n        if (appTokensCollection.find({\n          'token.apn': {\n            $exists: true\n          }\n        }).count() === 0) {\n          logger.debug('GUIDE: The \"appTokensCollection\" - No APN clients have registered on the server yet...');\n        }\n      } else if (!countGcm.length) {\n        if (appTokensCollection.find({\n          'token.gcm': {\n            $exists: true\n          }\n        }).count() === 0) {\n          logger.debug('GUIDE: The \"appTokensCollection\" - No GCM clients have registered on the server yet...');\n        }\n      }\n    }\n\n    return {\n      apn: countApn,\n      gcm: countGcm\n    };\n  } // This is a general function to validate that the data added to notifications\n  // is in the correct format. If not this function will throw errors\n\n\n  _validateDocument(notification) {\n    // Check the general notification\n    check(notification, {\n      from: String,\n      title: String,\n      text: String,\n      sent: Match.Optional(Boolean),\n      sending: Match.Optional(Match.Integer),\n      badge: Match.Optional(Match.Integer),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer),\n      contentAvailable: Match.Optional(Match.Integer),\n      forceStart: Match.Optional(Match.Integer),\n      apn: Match.Optional({\n        from: Match.Optional(String),\n        title: Match.Optional(String),\n        text: Match.Optional(String),\n        badge: Match.Optional(Match.Integer),\n        sound: Match.Optional(String),\n        notId: Match.Optional(Match.Integer),\n        actions: Match.Optional([Match.Any]),\n        category: Match.Optional(String)\n      }),\n      gcm: Match.Optional({\n        from: Match.Optional(String),\n        title: Match.Optional(String),\n        text: Match.Optional(String),\n        image: Match.Optional(String),\n        style: Match.Optional(String),\n        summaryText: Match.Optional(String),\n        picture: Match.Optional(String),\n        badge: Match.Optional(Match.Integer),\n        sound: Match.Optional(String),\n        notId: Match.Optional(Match.Integer)\n      }),\n      android_channel_id: Match.Optional(String),\n      userId: String,\n      payload: Match.Optional(Object),\n      delayUntil: Match.Optional(Date),\n      createdAt: Date,\n      createdBy: Match.OneOf(String, null)\n    });\n\n    if (!notification.userId) {\n      throw new Error('No userId found');\n    }\n  }\n\n  send(options) {\n    // If on the client we set the user id - on the server we need an option\n    // set or we default to \"<SERVER>\" as the creator of the notification\n    // If current user not set see if we can set it to the logged in user\n    // this will only run on the client if Meteor.userId is available\n    const currentUser = options.createdBy || '<SERVER>'; // Rig the notification object\n\n    const notification = Object.assign({\n      createdAt: new Date(),\n      createdBy: currentUser,\n      sent: false,\n      sending: 0\n    }, _.pick(options, 'from', 'title', 'text', 'userId')); // Add extra\n\n    Object.assign(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil', 'android_channel_id'));\n\n    if (Match.test(options.apn, Object)) {\n      notification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId', 'category');\n    }\n\n    if (Match.test(options.gcm, Object)) {\n      notification.gcm = _.pick(options.gcm, 'image', 'style', 'summaryText', 'picture', 'from', 'title', 'text', 'badge', 'sound', 'notId', 'actions', 'android_channel_id');\n    }\n\n    if (options.contentAvailable != null) {\n      notification.contentAvailable = options.contentAvailable;\n    }\n\n    if (options.forceStart != null) {\n      notification.forceStart = options.forceStart;\n    } // Validate the notification\n\n\n    this._validateDocument(notification);\n\n    try {\n      this.sendNotification(notification);\n    } catch (error) {\n      logger.debug(\"Could not send notification id: \\\"\".concat(notification._id, \"\\\", Error: \").concat(error.message));\n      logger.debug(error.stack);\n    }\n  }\n\n}\n\nconst Push = new PushClass();","map":{"version":3,"sources":["app/push/server/push.js"],"names":["module","export","_matchToken","appTokensCollection","PushClass","Push","Meteor","link","v","Match","check","Mongo","HTTP","_","default","initAPN","sendAPN","sendGCM","logger","settings","OneOf","apn","String","gcm","Collection","_ensureIndex","userId","options","isConfigured","configure","Object","assign","sendTimeout","Error","debug","absoluteUrl","sendWorker","task","interval","setInterval","error","message","_replaceToken","currentToken","newToken","rawCollection","updateMany","token","$set","_removeToken","deleteOne","_shouldUseGateway","gateways","get","sendNotificationNative","app","notification","countApn","countGcm","push","_id","topic","appName","userToken","apiKey","userTokens","sendGatewayPush","gateway","service","tries","uniqueId","data","headers","getAuthorization","Authorization","post","response","statusCode","info","remove","$or","warn","ms","Math","pow","log","setTimeout","sendNotificationGateway","sendNotification","badge","from","title","text","query","$exists","find","forEach","length","count","_validateDocument","sent","Optional","Boolean","sending","Integer","sound","notId","contentAvailable","forceStart","actions","Any","category","image","style","summaryText","picture","android_channel_id","payload","delayUntil","Date","createdAt","createdBy","send","currentUser","pick","test","stack"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Mongo } from 'meteor/mongo';\nimport { HTTP } from 'meteor/http';\nimport _ from 'underscore';\n\nimport { initAPN, sendAPN } from './apn';\nimport { sendGCM } from './gcm';\nimport { logger } from './logger';\nimport { settings } from '../../settings/server';\n\nexport const _matchToken = Match.OneOf({ apn: String }, { gcm: String });\nexport const appTokensCollection = new Mongo.Collection('_raix_push_app_tokens');\n\nappTokensCollection._ensureIndex({ userId: 1 });\n\nexport class PushClass {\n\toptions = {};\n\n\tisConfigured = false;\n\n\tconfigure(options) {\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tsendTimeout: 60000, // Timeout period for notification send\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t\t// https://npmjs.org/package/apn\n\n\t\t// After requesting the certificate from Apple, export your private key as\n\t\t// a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n\t\t// gateway.push.apple.com, port 2195\n\t\t// gateway.sandbox.push.apple.com, port 2195\n\n\t\t// Now, in the directory containing cert.cer and key.p12 execute the\n\t\t// following commands to generate your .pem files:\n\t\t// $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n\t\t// $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n\t\t// Block multiple calls\n\t\tif (this.isConfigured) {\n\t\t\tthrow new Error('Configure should not be called more than once!');\n\t\t}\n\n\t\tthis.isConfigured = true;\n\n\t\tlogger.debug('Configure', this.options);\n\n\t\tif (this.options.apn) {\n\t\t\tinitAPN({ options: this.options, absoluteUrl: Meteor.absoluteUrl() });\n\t\t}\n\t}\n\n\tsendWorker(task, interval) {\n\t\tlogger.debug(`Send worker started, using interval: ${interval}`);\n\n\t\treturn Meteor.setInterval(() => {\n\t\t\ttry {\n\t\t\t\ttask();\n\t\t\t} catch (error) {\n\t\t\t\tlogger.debug(`Error while sending: ${error.message}`);\n\t\t\t}\n\t\t}, interval);\n\t}\n\n\t_replaceToken(currentToken, newToken) {\n\t\tappTokensCollection.rawCollection().updateMany({ token: currentToken }, { $set: { token: newToken } });\n\t}\n\n\t_removeToken(token) {\n\t\tappTokensCollection.rawCollection().deleteOne({ token });\n\t}\n\n\t_shouldUseGateway() {\n\t\treturn !!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms');\n\t}\n\n\tsendNotificationNative(app, notification, countApn, countGcm) {\n\t\tlogger.debug('send to token', app.token);\n\n\t\tif (app.token.apn) {\n\t\t\tcountApn.push(app._id);\n\t\t\t// Send to APN\n\t\t\tif (this.options.apn) {\n\t\t\t\tnotification.topic = app.appName;\n\t\t\t\tsendAPN({ userToken: app.token.apn, notification, _removeToken: this._removeToken });\n\t\t\t}\n\t\t} else if (app.token.gcm) {\n\t\t\tcountGcm.push(app._id);\n\n\t\t\t// Send to GCM\n\t\t\t// We do support multiple here - so we should construct an array\n\t\t\t// and send it bulk - Investigate limit count of id's\n\t\t\tif (this.options.gcm && this.options.gcm.apiKey) {\n\t\t\t\tsendGCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this._replaceToken,\n\t\t\t\t\t_removeToken: this._removeToken,\n\t\t\t\t\toptions: this.options,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('send got a faulty query');\n\t\t}\n\t}\n\n\tsendGatewayPush(gateway, service, token, notification, tries = 0) {\n\t\tnotification.uniqueId = this.options.uniqueId;\n\n\t\tconst data = {\n\t\t\tdata: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\theaders: {},\n\t\t};\n\n\t\tif (token && this.options.getAuthorization) {\n\t\t\tdata.headers.Authorization = this.options.getAuthorization();\n\t\t}\n\n\t\treturn HTTP.post(`${gateway}/push/${service}/send`, data, (error, response) => {\n\t\t\tif (response?.statusCode === 406) {\n\t\t\t\tlogger.info('removing push token', token);\n\t\t\t\tappTokensCollection.remove({\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'token.apn': token,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'token.gcm': token,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response?.statusCode === 422) {\n\t\t\t\tlogger.info('gateway rejected push notification. not retrying.', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response?.statusCode === 401) {\n\t\t\t\tlogger.warn('Error sending push to gateway (not authorized)', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!error) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.error(`Error sending push to gateway (${tries} try) ->`, error);\n\n\t\t\tif (tries <= 4) {\n\t\t\t\t// [1, 2, 4, 8, 16] minutes (total 31)\n\t\t\t\tconst ms = 60000 * Math.pow(2, tries);\n\n\t\t\t\tlogger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n\n\t\t\t\treturn Meteor.setTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n\t\t\t}\n\t\t});\n\t}\n\n\tsendNotificationGateway(app, notification, countApn, countGcm) {\n\t\tfor (const gateway of this.options.gateways) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif (app.token.apn) {\n\t\t\t\tcountApn.push(app._id);\n\t\t\t\tnotification.topic = app.appName;\n\t\t\t\treturn this.sendGatewayPush(gateway, 'apn', app.token.apn, notification);\n\t\t\t}\n\n\t\t\tif (app.token.gcm) {\n\t\t\t\tcountGcm.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'gcm', app.token.gcm, notification);\n\t\t\t}\n\t\t}\n\t}\n\n\tsendNotification(notification = { badge: 0 }) {\n\t\tlogger.debug('Sending notification', notification);\n\n\t\tconst countApn = [];\n\t\tconst countGcm = [];\n\n\t\tif (notification.from !== String(notification.from)) {\n\t\t\tthrow new Error('Push.send: option \"from\" not a string');\n\t\t}\n\t\tif (notification.title !== String(notification.title)) {\n\t\t\tthrow new Error('Push.send: option \"title\" not a string');\n\t\t}\n\t\tif (notification.text !== String(notification.text)) {\n\t\t\tthrow new Error('Push.send: option \"text\" not a string');\n\t\t}\n\n\t\tlogger.debug(`send message \"${notification.title}\" to userId`, notification.userId);\n\n\t\tconst query = {\n\t\t\tuserId: notification.userId,\n\t\t\t$or: [{ 'token.apn': { $exists: true } }, { 'token.gcm': { $exists: true } }],\n\t\t};\n\n\t\tappTokensCollection.find(query).forEach((app) => {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif (this._shouldUseGateway()) {\n\t\t\t\treturn this.sendNotificationGateway(app, notification, countApn, countGcm);\n\t\t\t}\n\n\t\t\treturn this.sendNotificationNative(app, notification, countApn, countGcm);\n\t\t});\n\n\t\tif (settings.get('Log_Level') === '2') {\n\t\t\tlogger.debug(`Sent message \"${notification.title}\" to ${countApn.length} ios apps ${countGcm.length} android apps`);\n\n\t\t\t// Add some verbosity about the send result, making sure the developer\n\t\t\t// understands what just happened.\n\t\t\tif (!countApn.length && !countGcm.length) {\n\t\t\t\tif (appTokensCollection.find().count() === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"appTokensCollection\" is empty - No clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countApn.length) {\n\t\t\t\tif (appTokensCollection.find({ 'token.apn': { $exists: true } }).count() === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"appTokensCollection\" - No APN clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countGcm.length) {\n\t\t\t\tif (appTokensCollection.find({ 'token.gcm': { $exists: true } }).count() === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"appTokensCollection\" - No GCM clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tapn: countApn,\n\t\t\tgcm: countGcm,\n\t\t};\n\t}\n\n\t// This is a general function to validate that the data added to notifications\n\t// is in the correct format. If not this function will throw errors\n\t_validateDocument(notification) {\n\t\t// Check the general notification\n\t\tcheck(notification, {\n\t\t\tfrom: String,\n\t\t\ttitle: String,\n\t\t\ttext: String,\n\t\t\tsent: Match.Optional(Boolean),\n\t\t\tsending: Match.Optional(Match.Integer),\n\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\tsound: Match.Optional(String),\n\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\tcontentAvailable: Match.Optional(Match.Integer),\n\t\t\tforceStart: Match.Optional(Match.Integer),\n\t\t\tapn: Match.Optional({\n\t\t\t\tfrom: Match.Optional(String),\n\t\t\t\ttitle: Match.Optional(String),\n\t\t\t\ttext: Match.Optional(String),\n\t\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\t\tsound: Match.Optional(String),\n\t\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\t\tactions: Match.Optional([Match.Any]),\n\t\t\t\tcategory: Match.Optional(String),\n\t\t\t}),\n\t\t\tgcm: Match.Optional({\n\t\t\t\tfrom: Match.Optional(String),\n\t\t\t\ttitle: Match.Optional(String),\n\t\t\t\ttext: Match.Optional(String),\n\t\t\t\timage: Match.Optional(String),\n\t\t\t\tstyle: Match.Optional(String),\n\t\t\t\tsummaryText: Match.Optional(String),\n\t\t\t\tpicture: Match.Optional(String),\n\t\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\t\tsound: Match.Optional(String),\n\t\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\t}),\n\t\t\tandroid_channel_id: Match.Optional(String),\n\t\t\tuserId: String,\n\t\t\tpayload: Match.Optional(Object),\n\t\t\tdelayUntil: Match.Optional(Date),\n\t\t\tcreatedAt: Date,\n\t\t\tcreatedBy: Match.OneOf(String, null),\n\t\t});\n\n\t\tif (!notification.userId) {\n\t\t\tthrow new Error('No userId found');\n\t\t}\n\t}\n\n\tsend(options) {\n\t\t// If on the client we set the user id - on the server we need an option\n\t\t// set or we default to \"<SERVER>\" as the creator of the notification\n\t\t// If current user not set see if we can set it to the logged in user\n\t\t// this will only run on the client if Meteor.userId is available\n\t\tconst currentUser = options.createdBy || '<SERVER>';\n\n\t\t// Rig the notification object\n\t\tconst notification = Object.assign(\n\t\t\t{\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy: currentUser,\n\t\t\t\tsent: false,\n\t\t\t\tsending: 0,\n\t\t\t},\n\t\t\t_.pick(options, 'from', 'title', 'text', 'userId'),\n\t\t);\n\n\t\t// Add extra\n\t\tObject.assign(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil', 'android_channel_id'));\n\n\t\tif (Match.test(options.apn, Object)) {\n\t\t\tnotification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId', 'category');\n\t\t}\n\n\t\tif (Match.test(options.gcm, Object)) {\n\t\t\tnotification.gcm = _.pick(\n\t\t\t\toptions.gcm,\n\t\t\t\t'image',\n\t\t\t\t'style',\n\t\t\t\t'summaryText',\n\t\t\t\t'picture',\n\t\t\t\t'from',\n\t\t\t\t'title',\n\t\t\t\t'text',\n\t\t\t\t'badge',\n\t\t\t\t'sound',\n\t\t\t\t'notId',\n\t\t\t\t'actions',\n\t\t\t\t'android_channel_id',\n\t\t\t);\n\t\t}\n\n\t\tif (options.contentAvailable != null) {\n\t\t\tnotification.contentAvailable = options.contentAvailable;\n\t\t}\n\n\t\tif (options.forceStart != null) {\n\t\t\tnotification.forceStart = options.forceStart;\n\t\t}\n\n\t\t// Validate the notification\n\t\tthis._validateDocument(notification);\n\n\t\ttry {\n\t\t\tthis.sendNotification(notification);\n\t\t} catch (error) {\n\t\t\tlogger.debug(`Could not send notification id: \"${notification._id}\", Error: ${error.message}`);\n\t\t\tlogger.debug(error.stack);\n\t\t}\n\t}\n}\n\nexport const Push = new PushClass();\n"]},"sourceType":"module","hash":"da9b7f4ad4c55ae58014e80d21606fcc0bda83b4"}
