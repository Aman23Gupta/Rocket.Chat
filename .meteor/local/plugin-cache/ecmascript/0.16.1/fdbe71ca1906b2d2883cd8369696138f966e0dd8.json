{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/addIncomingIntegration.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/integrations/server/methods/incoming/addIncomingIntegration.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/addIncomingIntegration.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/addIncomingIntegration.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/integrations/server/methods/incoming/addIncomingIntegration.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Babel;\nmodule.link(\"meteor/babel-compiler\", {\n  Babel(v) {\n    Babel = v;\n  }\n\n}, 2);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 3);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 4);\nlet hasPermission, hasAllPermission;\nmodule.link(\"../../../../authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  hasAllPermission(v) {\n    hasAllPermission = v;\n  }\n\n}, 5);\nlet Users, Rooms, Subscriptions;\nmodule.link(\"../../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 6);\nlet Integrations, Roles;\nmodule.link(\"../../../../models/server/raw\", {\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 7);\nconst validChannelChars = ['@', '#'];\nMeteor.methods({\n  addIncomingIntegration(integration) {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'manage-incoming-integrations') && !hasPermission(this.userId, 'manage-own-incoming-integrations')) {\n        throw new Meteor.Error('not_authorized', 'Unauthorized', {\n          method: 'addIncomingIntegration'\n        });\n      }\n\n      if (!_.isString(integration.channel)) {\n        throw new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n          method: 'addIncomingIntegration'\n        });\n      }\n\n      if (integration.channel.trim() === '') {\n        throw new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n          method: 'addIncomingIntegration'\n        });\n      }\n\n      const channels = _.map(integration.channel.split(','), channel => s.trim(channel));\n\n      for (const channel of channels) {\n        if (!validChannelChars.includes(channel[0])) {\n          throw new Meteor.Error('error-invalid-channel-start-with-chars', 'Invalid channel. Start with @ or #', {\n            method: 'updateIncomingIntegration'\n          });\n        }\n      }\n\n      if (!_.isString(integration.username) || integration.username.trim() === '') {\n        throw new Meteor.Error('error-invalid-username', 'Invalid username', {\n          method: 'addIncomingIntegration'\n        });\n      }\n\n      if (integration.scriptEnabled === true && integration.script && integration.script.trim() !== '') {\n        try {\n          let babelOptions = Babel.getDefaultOptions({\n            runtime: false\n          });\n          babelOptions = _.extend(babelOptions, {\n            compact: true,\n            minified: true,\n            comments: false\n          });\n          integration.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n          integration.scriptError = undefined;\n        } catch (e) {\n          integration.scriptCompiled = undefined;\n          integration.scriptError = _.pick(e, 'name', 'message', 'stack');\n        }\n      }\n\n      for (let channel of channels) {\n        let record;\n        const channelType = channel[0];\n        channel = channel.substr(1);\n\n        switch (channelType) {\n          case '#':\n            record = Rooms.findOne({\n              $or: [{\n                _id: channel\n              }, {\n                name: channel\n              }]\n            });\n            break;\n\n          case '@':\n            record = Users.findOne({\n              $or: [{\n                _id: channel\n              }, {\n                username: channel\n              }]\n            });\n            break;\n        }\n\n        if (!record) {\n          throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n            method: 'addIncomingIntegration'\n          });\n        }\n\n        if (!hasAllPermission(this.userId, ['manage-incoming-integrations', 'manage-own-incoming-integrations']) && !Subscriptions.findOneByRoomIdAndUserId(record._id, this.userId, {\n          fields: {\n            _id: 1\n          }\n        })) {\n          throw new Meteor.Error('error-invalid-channel', 'Invalid Channel', {\n            method: 'addIncomingIntegration'\n          });\n        }\n      }\n\n      const user = Users.findOne({\n        username: integration.username\n      });\n\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'addIncomingIntegration'\n        });\n      }\n\n      const token = Random.id(48);\n      integration.type = 'webhook-incoming';\n      integration.token = token;\n      integration.channel = channels;\n      integration.userId = user._id;\n      integration._createdAt = new Date();\n      integration._createdBy = Users.findOne(this.userId, {\n        fields: {\n          username: 1\n        }\n      });\n      Promise.await(Roles.addUserRoles(user._id, 'bot'));\n      const result = Promise.await(Integrations.insertOne(integration));\n      integration._id = result.insertedId;\n      return integration;\n    });\n  }\n\n});","map":{"version":3,"sources":["app/integrations/server/methods/incoming/addIncomingIntegration.js"],"names":["Meteor","module","link","v","Random","Babel","_","default","s","hasPermission","hasAllPermission","Users","Rooms","Subscriptions","Integrations","Roles","validChannelChars","methods","addIncomingIntegration","integration","userId","Error","method","isString","channel","trim","channels","map","split","includes","username","scriptEnabled","script","babelOptions","getDefaultOptions","runtime","extend","compact","minified","comments","scriptCompiled","compile","code","scriptError","undefined","e","pick","record","channelType","substr","findOne","$or","_id","name","findOneByRoomIdAndUserId","fields","user","token","id","type","_createdAt","Date","_createdBy","addUserRoles","result","insertOne","insertedId"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Babel } from 'meteor/babel-compiler';\nimport _ from 'underscore';\nimport s from 'underscore.string';\n\nimport { hasPermission, hasAllPermission } from '../../../../authorization/server';\nimport { Users, Rooms, Subscriptions } from '../../../../models/server';\nimport { Integrations, Roles } from '../../../../models/server/raw';\n\nconst validChannelChars = ['@', '#'];\n\nMeteor.methods({\n\tasync addIncomingIntegration(integration) {\n\t\tif (!hasPermission(this.userId, 'manage-incoming-integrations') && !hasPermission(this.userId, 'manage-own-incoming-integrations')) {\n\t\t\tthrow new Meteor.Error('not_authorized', 'Unauthorized', {\n\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tif (!_.isString(integration.channel)) {\n\t\t\tthrow new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tif (integration.channel.trim() === '') {\n\t\t\tthrow new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tconst channels = _.map(integration.channel.split(','), (channel) => s.trim(channel));\n\n\t\tfor (const channel of channels) {\n\t\t\tif (!validChannelChars.includes(channel[0])) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-channel-start-with-chars', 'Invalid channel. Start with @ or #', {\n\t\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (!_.isString(integration.username) || integration.username.trim() === '') {\n\t\t\tthrow new Meteor.Error('error-invalid-username', 'Invalid username', {\n\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t});\n\t\t}\n\t\tif (integration.scriptEnabled === true && integration.script && integration.script.trim() !== '') {\n\t\t\ttry {\n\t\t\t\tlet babelOptions = Babel.getDefaultOptions({ runtime: false });\n\t\t\t\tbabelOptions = _.extend(babelOptions, { compact: true, minified: true, comments: false });\n\n\t\t\t\tintegration.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n\t\t\t\tintegration.scriptError = undefined;\n\t\t\t} catch (e) {\n\t\t\t\tintegration.scriptCompiled = undefined;\n\t\t\t\tintegration.scriptError = _.pick(e, 'name', 'message', 'stack');\n\t\t\t}\n\t\t}\n\n\t\tfor (let channel of channels) {\n\t\t\tlet record;\n\t\t\tconst channelType = channel[0];\n\t\t\tchannel = channel.substr(1);\n\n\t\t\tswitch (channelType) {\n\t\t\t\tcase '#':\n\t\t\t\t\trecord = Rooms.findOne({\n\t\t\t\t\t\t$or: [{ _id: channel }, { name: channel }],\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase '@':\n\t\t\t\t\trecord = Users.findOne({\n\t\t\t\t\t\t$or: [{ _id: channel }, { username: channel }],\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!record) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!hasAllPermission(this.userId, ['manage-incoming-integrations', 'manage-own-incoming-integrations']) &&\n\t\t\t\t!Subscriptions.findOneByRoomIdAndUserId(record._id, this.userId, { fields: { _id: 1 } })\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-channel', 'Invalid Channel', {\n\t\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst user = Users.findOne({ username: integration.username });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'addIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tconst token = Random.id(48);\n\n\t\tintegration.type = 'webhook-incoming';\n\t\tintegration.token = token;\n\t\tintegration.channel = channels;\n\t\tintegration.userId = user._id;\n\t\tintegration._createdAt = new Date();\n\t\tintegration._createdBy = Users.findOne(this.userId, { fields: { username: 1 } });\n\n\t\tawait Roles.addUserRoles(user._id, 'bot');\n\n\t\tconst result = await Integrations.insertOne(integration);\n\n\t\tintegration._id = result.insertedId;\n\n\t\treturn integration;\n\t},\n});\n"]},"sourceType":"module","hash":"fdbe71ca1906b2d2883cd8369696138f966e0dd8"}
