{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/hooks/propagateDiscussionMetadata.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/discussion/server/hooks/propagateDiscussionMetadata.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/hooks/propagateDiscussionMetadata.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/hooks/propagateDiscussionMetadata.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/discussion/server/hooks/propagateDiscussionMetadata.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 0);\nlet Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 1);\nlet deleteRoom;\nmodule.link(\"../../../lib/server\", {\n  deleteRoom(v) {\n    deleteRoom = v;\n  }\n\n}, 2);\n\n/**\n * We need to propagate the writing of new message in a discussion to the linking\n * system message\n */\ncallbacks.add('afterSaveMessage', function (message) {\n  let {\n    _id,\n    prid\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (prid) {\n    Messages.refreshDiscussionMetadata({\n      rid: _id\n    }, message);\n  }\n\n  return message;\n}, callbacks.priority.LOW, 'PropagateDiscussionMetadata');\ncallbacks.add('afterDeleteMessage', function (message) {\n  let {\n    _id,\n    prid\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (prid) {\n    Messages.refreshDiscussionMetadata({\n      rid: _id\n    }, message);\n  }\n\n  if (message.drid) {\n    deleteRoom(message.drid);\n  }\n\n  return message;\n}, callbacks.priority.LOW, 'PropagateDiscussionMetadata');\ncallbacks.add('afterDeleteRoom', rid => {\n  Rooms.find({\n    prid: rid\n  }, {\n    fields: {\n      _id: 1\n    }\n  }).forEach(_ref => {\n    let {\n      _id\n    } = _ref;\n    return deleteRoom(_id);\n  });\n  return rid;\n}, callbacks.priority.LOW, 'DeleteDiscussionChain'); // TODO discussions define new fields\n\ncallbacks.add('afterRoomNameChange', roomConfig => {\n  const {\n    rid,\n    name,\n    oldName\n  } = roomConfig;\n  Rooms.update(_objectSpread({\n    prid: rid\n  }, oldName && {\n    topic: oldName\n  }), {\n    $set: {\n      topic: name\n    }\n  }, {\n    multi: true\n  });\n  return roomConfig;\n}, callbacks.priority.LOW, 'updateTopicDiscussion');\ncallbacks.add('afterDeleteRoom', drid => {\n  Messages.update({\n    drid\n  }, {\n    $unset: {\n      dcount: 1,\n      dlm: 1,\n      drid: 1\n    }\n  });\n  return drid;\n}, callbacks.priority.LOW, 'CleanDiscussionMessage');","map":{"version":3,"sources":["app/discussion/server/hooks/propagateDiscussionMetadata.js"],"names":["_objectSpread","module","link","default","v","callbacks","Messages","Rooms","deleteRoom","add","message","_id","prid","refreshDiscussionMetadata","rid","priority","LOW","drid","find","fields","forEach","roomConfig","name","oldName","update","topic","$set","multi","$unset","dcount","dlm"],"mappings":"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","sourcesContent":["import { callbacks } from '../../../../lib/callbacks';\nimport { Messages, Rooms } from '../../../models/server';\nimport { deleteRoom } from '../../../lib/server';\n\n/**\n * We need to propagate the writing of new message in a discussion to the linking\n * system message\n */\ncallbacks.add(\n\t'afterSaveMessage',\n\tfunction (message, { _id, prid } = {}) {\n\t\tif (prid) {\n\t\t\tMessages.refreshDiscussionMetadata({ rid: _id }, message);\n\t\t}\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'PropagateDiscussionMetadata',\n);\n\ncallbacks.add(\n\t'afterDeleteMessage',\n\tfunction (message, { _id, prid } = {}) {\n\t\tif (prid) {\n\t\t\tMessages.refreshDiscussionMetadata({ rid: _id }, message);\n\t\t}\n\t\tif (message.drid) {\n\t\t\tdeleteRoom(message.drid);\n\t\t}\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'PropagateDiscussionMetadata',\n);\n\ncallbacks.add(\n\t'afterDeleteRoom',\n\t(rid) => {\n\t\tRooms.find({ prid: rid }, { fields: { _id: 1 } }).forEach(({ _id }) => deleteRoom(_id));\n\t\treturn rid;\n\t},\n\tcallbacks.priority.LOW,\n\t'DeleteDiscussionChain',\n);\n\n// TODO discussions define new fields\ncallbacks.add(\n\t'afterRoomNameChange',\n\t(roomConfig) => {\n\t\tconst { rid, name, oldName } = roomConfig;\n\t\tRooms.update({ prid: rid, ...(oldName && { topic: oldName }) }, { $set: { topic: name } }, { multi: true });\n\t\treturn roomConfig;\n\t},\n\tcallbacks.priority.LOW,\n\t'updateTopicDiscussion',\n);\n\ncallbacks.add(\n\t'afterDeleteRoom',\n\t(drid) => {\n\t\tMessages.update(\n\t\t\t{ drid },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tdcount: 1,\n\t\t\t\t\tdlm: 1,\n\t\t\t\t\tdrid: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\treturn drid;\n\t},\n\tcallbacks.priority.LOW,\n\t'CleanDiscussionMessage',\n);\n"]},"sourceType":"module","hash":"2970a638e41d4c61bf06106ae522cdaffeea2192"}
