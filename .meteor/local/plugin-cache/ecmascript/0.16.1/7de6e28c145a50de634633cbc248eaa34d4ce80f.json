{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/blockstack/server/userHandler.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/blockstack/server/userHandler.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/blockstack/server/userHandler.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/blockstack/server/userHandler.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/blockstack/server/userHandler.js"}},"code":"module.export({\n  updateOrCreateUser: () => updateOrCreateUser\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet ServiceConfiguration;\nmodule.link(\"meteor/service-configuration\", {\n  ServiceConfiguration(v) {\n    ServiceConfiguration = v;\n  }\n\n}, 2);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet generateUsernameSuggestion;\nmodule.link(\"../../lib\", {\n  generateUsernameSuggestion(v) {\n    generateUsernameSuggestion = v;\n  }\n\n}, 5);\n\nconst updateOrCreateUser = (serviceData, options) => {\n  const serviceConfig = ServiceConfiguration.configurations.findOne({\n    service: 'blockstack'\n  });\n  logger.debug('Auth config', serviceConfig); // Extract user data from service / token\n\n  const {\n    id,\n    did\n  } = serviceData;\n  const {\n    profile\n  } = options; // Look for existing Blockstack user\n\n  const user = Meteor.users.findOne({\n    'services.blockstack.id': id\n  });\n  let userId;\n  let isNew = false; // Use found or create a user\n\n  if (user) {\n    logger.info(\"User login with Blockstack ID \".concat(id));\n    userId = user._id;\n  } else {\n    isNew = true;\n    let emails = [];\n\n    if (!Array.isArray(profile.emails)) {\n      // Fix absense of emails by adding placeholder address using decentralised\n      // ID at blockstack.email - a holding domain only, no MX record, does not\n      // process email, may be used in future to provide decentralised email via\n      // gaia, encrypting mail for DID user only. @TODO: document this approach.\n      emails.push({\n        address: \"\".concat(did, \"@blockstack.email\"),\n        verified: false\n      });\n    } else {\n      const verified = settings.get('Accounts_Verify_Email_For_External_Accounts'); // Reformat array of emails into expected format if they exist\n\n      emails = profile.emails.map(address => ({\n        address,\n        verified\n      }));\n    }\n\n    const newUser = {\n      name: profile.name,\n      active: true,\n      emails,\n      services: {\n        blockstack: serviceData\n      }\n    }; // Set username same as in blockstack, or suggest if none\n\n    if (profile.name) {\n      newUser.name = profile.name;\n    } // Take profile username if exists, or generate one if enabled\n\n\n    if (profile.username && profile.username !== '') {\n      newUser.username = profile.username;\n    } else if (serviceConfig.generateUsername === true) {\n      newUser.username = generateUsernameSuggestion(newUser);\n    } // If no username at this point it will suggest one from the name\n    // Create and get created user to make a couple more mods before returning\n\n\n    logger.info(\"Creating user for Blockstack ID \".concat(id));\n    userId = Accounts.insertUserDoc({}, newUser);\n    logger.debug('New user ${ userId }', newUser);\n  } // Add login token for blockstack auth session (take expiration from response)\n  // TODO: Regquired method result format ignores `.when`\n\n\n  const {\n    token\n  } = Accounts._generateStampedLoginToken();\n\n  const tokenExpires = serviceData.expiresAt;\n  return {\n    type: 'blockstack',\n    userId,\n    token,\n    tokenExpires,\n    isNew\n  };\n};","map":{"version":3,"sources":["app/blockstack/server/userHandler.js"],"names":["module","export","updateOrCreateUser","Meteor","link","v","Accounts","ServiceConfiguration","logger","settings","generateUsernameSuggestion","serviceData","options","serviceConfig","configurations","findOne","service","debug","id","did","profile","user","users","userId","isNew","info","_id","emails","Array","isArray","push","address","verified","get","map","newUser","name","active","services","blockstack","username","generateUsername","insertUserDoc","token","_generateStampedLoginToken","tokenExpires","expiresAt","type"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\n\nimport { logger } from './logger';\nimport { settings } from '../../settings/server';\nimport { generateUsernameSuggestion } from '../../lib';\n\n// Updates or creates a user after we authenticate with Blockstack\n// Clones Accounts.updateOrCreateUserFromExternalService with some modifications\nexport const updateOrCreateUser = (serviceData, options) => {\n\tconst serviceConfig = ServiceConfiguration.configurations.findOne({ service: 'blockstack' });\n\tlogger.debug('Auth config', serviceConfig);\n\n\t// Extract user data from service / token\n\tconst { id, did } = serviceData;\n\tconst { profile } = options;\n\n\t// Look for existing Blockstack user\n\tconst user = Meteor.users.findOne({ 'services.blockstack.id': id });\n\tlet userId;\n\tlet isNew = false;\n\n\t// Use found or create a user\n\tif (user) {\n\t\tlogger.info(`User login with Blockstack ID ${id}`);\n\t\tuserId = user._id;\n\t} else {\n\t\tisNew = true;\n\t\tlet emails = [];\n\t\tif (!Array.isArray(profile.emails)) {\n\t\t\t// Fix absense of emails by adding placeholder address using decentralised\n\t\t\t// ID at blockstack.email - a holding domain only, no MX record, does not\n\t\t\t// process email, may be used in future to provide decentralised email via\n\t\t\t// gaia, encrypting mail for DID user only. @TODO: document this approach.\n\t\t\temails.push({ address: `${did}@blockstack.email`, verified: false });\n\t\t} else {\n\t\t\tconst verified = settings.get('Accounts_Verify_Email_For_External_Accounts');\n\t\t\t// Reformat array of emails into expected format if they exist\n\t\t\temails = profile.emails.map((address) => ({ address, verified }));\n\t\t}\n\n\t\tconst newUser = {\n\t\t\tname: profile.name,\n\t\t\tactive: true,\n\t\t\temails,\n\t\t\tservices: { blockstack: serviceData },\n\t\t};\n\n\t\t// Set username same as in blockstack, or suggest if none\n\t\tif (profile.name) {\n\t\t\tnewUser.name = profile.name;\n\t\t}\n\n\t\t// Take profile username if exists, or generate one if enabled\n\t\tif (profile.username && profile.username !== '') {\n\t\t\tnewUser.username = profile.username;\n\t\t} else if (serviceConfig.generateUsername === true) {\n\t\t\tnewUser.username = generateUsernameSuggestion(newUser);\n\t\t}\n\t\t// If no username at this point it will suggest one from the name\n\n\t\t// Create and get created user to make a couple more mods before returning\n\t\tlogger.info(`Creating user for Blockstack ID ${id}`);\n\t\tuserId = Accounts.insertUserDoc({}, newUser);\n\t\tlogger.debug('New user ${ userId }', newUser);\n\t}\n\n\t// Add login token for blockstack auth session (take expiration from response)\n\t// TODO: Regquired method result format ignores `.when`\n\tconst { token } = Accounts._generateStampedLoginToken();\n\tconst tokenExpires = serviceData.expiresAt;\n\n\treturn {\n\t\ttype: 'blockstack',\n\t\tuserId,\n\t\ttoken,\n\t\ttokenExpires,\n\t\tisNew,\n\t};\n};\n"]},"sourceType":"module","hash":"7de6e28c145a50de634633cbc248eaa34d4ce80f"}
