{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/konecty:user-presence/server/server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/konecty:user-presence/server/server.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/konecty:user-presence/server/server.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/konecty:user-presence/server/server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/konecty:user-presence/server/server.js"}},"code":"module.link(\"colors\");\n\nUsersSessions._ensureIndex({\n  'connections.instanceId': 1\n}, {\n  sparse: 1,\n  name: 'connections.instanceId'\n});\n\nUsersSessions._ensureIndex({\n  'connections.id': 1\n}, {\n  sparse: 1,\n  name: 'connections.id'\n});\n\nvar allowedStatus = ['online', 'away', 'busy', 'offline'];\nvar logEnable = process.env.ENABLE_PRESENCE_LOGS === 'true';\n\nvar log = function (msg, color) {\n  if (logEnable) {\n    if (color) {\n      console.log(msg[color]);\n    } else {\n      console.log(msg);\n    }\n  }\n};\n\nvar logRed = function () {\n  log(Array.prototype.slice.call(arguments).join(' '), 'red');\n};\n\nvar logGrey = function () {\n  log(Array.prototype.slice.call(arguments).join(' '), 'grey');\n};\n\nvar logGreen = function () {\n  log(Array.prototype.slice.call(arguments).join(' '), 'green');\n};\n\nvar logYellow = function () {\n  log(Array.prototype.slice.call(arguments).join(' '), 'yellow');\n};\n\nvar checkUser = function (id, userId) {\n  if (!id || !userId || id === userId) {\n    return true;\n  }\n\n  var user = Meteor.users.findOne(id, {\n    fields: {\n      _id: 1\n    }\n  });\n\n  if (user) {\n    throw new Meteor.Error('cannot-change-other-users-status');\n  }\n\n  return true;\n};\n\nUserPresence = {\n  activeLogs: function () {\n    logEnable = true;\n  },\n  removeConnectionsByInstanceId: function (instanceId) {\n    logRed('[user-presence] removeConnectionsByInstanceId', instanceId);\n    var update = {\n      $pull: {\n        connections: {\n          instanceId: instanceId\n        }\n      }\n    };\n    UsersSessions.update({}, update, {\n      multi: true\n    });\n  },\n  removeAllConnections: function () {\n    logRed('[user-presence] removeAllConnections');\n    UsersSessions.remove({});\n  },\n\n  getConnectionHandle(connectionId) {\n    const internalConnection = Meteor.server.sessions.get(connectionId);\n\n    if (!internalConnection) {\n      return;\n    }\n\n    return internalConnection.connectionHandle;\n  },\n\n  createConnection: function (userId, connection, status, metadata) {\n    // if connections is invalid, does not have an userId or is already closed, don't save it on db\n    if (!userId || !connection.id) {\n      return;\n    }\n\n    const connectionHandle = UserPresence.getConnectionHandle(connection.id);\n\n    if (!connectionHandle || connectionHandle.closed) {\n      return;\n    }\n\n    connectionHandle.UserPresenceUserId = userId;\n    status = status || 'online';\n    logGreen('[user-presence] createConnection', userId, connection.id, status, metadata);\n    var query = {\n      _id: userId\n    };\n    var now = new Date();\n    var instanceId = undefined;\n\n    if (Package['konecty:multiple-instances-status']) {\n      instanceId = InstanceStatus.id();\n    }\n\n    var update = {\n      $push: {\n        connections: {\n          id: connection.id,\n          instanceId: instanceId,\n          status: status,\n          _createdAt: now,\n          _updatedAt: now\n        }\n      }\n    };\n\n    if (metadata) {\n      update.$set = {\n        metadata: metadata\n      };\n      connection.metadata = metadata;\n    } // make sure closed connections are being created\n\n\n    if (!connectionHandle.closed) {\n      UsersSessions.upsert(query, update);\n    }\n  },\n  setConnection: function (userId, connection, status) {\n    if (!userId) {\n      return;\n    }\n\n    logGrey('[user-presence] setConnection', userId, connection.id, status);\n    var query = {\n      _id: userId,\n      'connections.id': connection.id\n    };\n    var now = new Date();\n    var update = {\n      $set: {\n        'connections.$.status': status,\n        'connections.$._updatedAt': now\n      }\n    };\n\n    if (connection.metadata) {\n      update.$set.metadata = connection.metadata;\n    }\n\n    var count = UsersSessions.update(query, update);\n\n    if (count === 0) {\n      return UserPresence.createConnection(userId, connection, status, connection.metadata);\n    }\n\n    if (status === 'online') {\n      Meteor.users.update({\n        _id: userId,\n        statusDefault: 'online',\n        status: {\n          $ne: 'online'\n        }\n      }, {\n        $set: {\n          status: 'online'\n        }\n      });\n    } else if (status === 'away') {\n      Meteor.users.update({\n        _id: userId,\n        statusDefault: 'online',\n        status: {\n          $ne: 'away'\n        }\n      }, {\n        $set: {\n          status: 'away'\n        }\n      });\n    }\n  },\n  setDefaultStatus: function (userId, status) {\n    if (!userId) {\n      return;\n    }\n\n    if (allowedStatus.indexOf(status) === -1) {\n      return;\n    }\n\n    logYellow('[user-presence] setDefaultStatus', userId, status);\n    var update = Meteor.users.update({\n      _id: userId,\n      statusDefault: {\n        $ne: status\n      }\n    }, {\n      $set: {\n        statusDefault: status\n      }\n    });\n\n    if (update > 0) {\n      UserPresenceMonitor.processUser(userId, {\n        statusDefault: status\n      });\n    }\n  },\n  removeConnection: function (connectionId) {\n    logRed('[user-presence] removeConnection', connectionId);\n    var query = {\n      'connections.id': connectionId\n    };\n    var update = {\n      $pull: {\n        connections: {\n          id: connectionId\n        }\n      }\n    };\n    return UsersSessions.update(query, update);\n  },\n  start: function () {\n    Meteor.onConnection(function (connection) {\n      const session = Meteor.server.sessions.get(connection.id);\n      connection.onClose(function () {\n        if (!session) {\n          return;\n        }\n\n        const connectionHandle = session.connectionHandle; // mark connection as closed so if it drops in the middle of the process it doesn't even is created\n\n        if (!connectionHandle) {\n          return;\n        }\n\n        connectionHandle.closed = true;\n\n        if (connectionHandle.UserPresenceUserId != null) {\n          UserPresence.removeConnection(connection.id);\n        }\n      });\n    });\n    process.on('exit', Meteor.bindEnvironment(function () {\n      if (Package['konecty:multiple-instances-status']) {\n        UserPresence.removeConnectionsByInstanceId(InstanceStatus.id());\n      } else {\n        UserPresence.removeAllConnections();\n      }\n    }));\n\n    if (Package['accounts-base']) {\n      Accounts.onLogin(function (login) {\n        UserPresence.createConnection(login.user._id, login.connection);\n      });\n      Accounts.onLogout(function (login) {\n        UserPresence.removeConnection(login.connection.id);\n      });\n    }\n\n    Meteor.publish(null, function () {\n      if (this.userId == null && this.connection && this.connection.id) {\n        const connectionHandle = UserPresence.getConnectionHandle(this.connection.id);\n\n        if (connectionHandle && connectionHandle.UserPresenceUserId != null) {\n          UserPresence.removeConnection(this.connection.id);\n        }\n      }\n\n      this.ready();\n    });\n    UserPresenceEvents.on('setStatus', function (userId, status) {\n      var user = Meteor.users.findOne(userId);\n      var statusConnection = status;\n\n      if (!user) {\n        return;\n      }\n\n      if (user.statusDefault != null && status !== 'offline' && user.statusDefault !== 'online') {\n        status = user.statusDefault;\n      }\n\n      var query = {\n        _id: userId,\n        $or: [{\n          status: {\n            $ne: status\n          }\n        }, {\n          statusConnection: {\n            $ne: statusConnection\n          }\n        }]\n      };\n      var update = {\n        $set: {\n          status: status,\n          statusConnection: statusConnection\n        }\n      };\n      const result = Meteor.users.update(query, update); // if nothing updated, do not emit anything\n\n      if (result) {\n        UserPresenceEvents.emit('setUserStatus', user, status, statusConnection);\n      }\n    });\n    Meteor.methods({\n      'UserPresence:connect': function (id, metadata) {\n        check(id, Match.Maybe(String));\n        check(metadata, Match.Maybe(Object));\n        this.unblock();\n        checkUser(id, this.userId);\n        UserPresence.createConnection(id || this.userId, this.connection, 'online', metadata);\n      },\n      'UserPresence:away': function (id) {\n        check(id, Match.Maybe(String));\n        this.unblock();\n        checkUser(id, this.userId);\n        UserPresence.setConnection(id || this.userId, this.connection, 'away');\n      },\n      'UserPresence:online': function (id) {\n        check(id, Match.Maybe(String));\n        this.unblock();\n        checkUser(id, this.userId);\n        UserPresence.setConnection(id || this.userId, this.connection, 'online');\n      },\n      'UserPresence:setDefaultStatus': function (id, status) {\n        check(id, Match.Maybe(String));\n        check(status, Match.Maybe(String));\n        this.unblock(); // backward compatible (receives status as first argument)\n\n        if (arguments.length === 1) {\n          UserPresence.setDefaultStatus(this.userId, id);\n          return;\n        }\n\n        checkUser(id, this.userId);\n        UserPresence.setDefaultStatus(id || this.userId, status);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["packages/konecty:user-presence/server/server.js"],"names":["module","link","UsersSessions","_ensureIndex","sparse","name","allowedStatus","logEnable","process","env","ENABLE_PRESENCE_LOGS","log","msg","color","console","logRed","Array","prototype","slice","call","arguments","join","logGrey","logGreen","logYellow","checkUser","id","userId","user","Meteor","users","findOne","fields","_id","Error","UserPresence","activeLogs","removeConnectionsByInstanceId","instanceId","update","$pull","connections","multi","removeAllConnections","remove","getConnectionHandle","connectionId","internalConnection","server","sessions","get","connectionHandle","createConnection","connection","status","metadata","closed","UserPresenceUserId","query","now","Date","undefined","Package","InstanceStatus","$push","_createdAt","_updatedAt","$set","upsert","setConnection","count","statusDefault","$ne","setDefaultStatus","indexOf","UserPresenceMonitor","processUser","removeConnection","start","onConnection","session","onClose","on","bindEnvironment","Accounts","onLogin","login","onLogout","publish","ready","UserPresenceEvents","statusConnection","$or","result","emit","methods","check","Match","Maybe","String","Object","unblock","length"],"mappings":"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","sourcesContent":["/* globals InstanceStatus, UsersSessions, UserPresenceMonitor, UserPresence */\nimport 'colors';\n\nUsersSessions._ensureIndex({'connections.instanceId': 1}, {sparse: 1, name: 'connections.instanceId'});\nUsersSessions._ensureIndex({'connections.id': 1}, {sparse: 1, name: 'connections.id'});\n\nvar allowedStatus = ['online', 'away', 'busy', 'offline'];\n\nvar logEnable = process.env.ENABLE_PRESENCE_LOGS === 'true';\n\nvar log = function(msg, color) {\n\tif (logEnable) {\n\t\tif (color) {\n\t\t\tconsole.log(msg[color]);\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n};\n\nvar logRed = function() {\n\tlog(Array.prototype.slice.call(arguments).join(' '), 'red');\n};\nvar logGrey = function() {\n\tlog(Array.prototype.slice.call(arguments).join(' '), 'grey');\n};\nvar logGreen = function() {\n\tlog(Array.prototype.slice.call(arguments).join(' '), 'green');\n};\nvar logYellow = function() {\n\tlog(Array.prototype.slice.call(arguments).join(' '), 'yellow');\n};\n\nvar checkUser = function(id, userId) {\n\tif (!id || !userId || id === userId) {\n\t\treturn true;\n\t}\n\tvar user = Meteor.users.findOne(id, { fields: { _id: 1 } });\n\tif (user) {\n\t\tthrow new Meteor.Error('cannot-change-other-users-status');\n\t}\n\n\treturn true;\n}\n\nUserPresence = {\n\tactiveLogs: function() {\n\t\tlogEnable = true;\n\t},\n\n\tremoveConnectionsByInstanceId: function(instanceId) {\n\t\tlogRed('[user-presence] removeConnectionsByInstanceId', instanceId);\n\t\tvar update = {\n\t\t\t$pull: {\n\t\t\t\tconnections: {\n\t\t\t\t\tinstanceId: instanceId\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tUsersSessions.update({}, update, {multi: true});\n\t},\n\n\tremoveAllConnections: function() {\n\t\tlogRed('[user-presence] removeAllConnections');\n\t\tUsersSessions.remove({});\n\t},\n\n\tgetConnectionHandle(connectionId) {\n\t\tconst internalConnection = Meteor.server.sessions.get(connectionId);\n\n\t\tif (!internalConnection) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn internalConnection.connectionHandle;\n\t},\n\n\tcreateConnection: function(userId, connection, status, metadata) {\n\t\t// if connections is invalid, does not have an userId or is already closed, don't save it on db\n\t\tif (!userId || !connection.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst connectionHandle = UserPresence.getConnectionHandle(connection.id);\n\n\t\tif (!connectionHandle || connectionHandle.closed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconnectionHandle.UserPresenceUserId = userId;\n\n\t\tstatus = status || 'online';\n\n\t\tlogGreen('[user-presence] createConnection', userId, connection.id, status, metadata);\n\n\t\tvar query = {\n\t\t\t_id: userId\n\t\t};\n\n\t\tvar now = new Date();\n\n\t\tvar instanceId = undefined;\n\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\tinstanceId = InstanceStatus.id();\n\t\t}\n\n\t\tvar update = {\n\t\t\t$push: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid: connection.id,\n\t\t\t\t\tinstanceId: instanceId,\n\t\t\t\t\tstatus: status,\n\t\t\t\t\t_createdAt: now,\n\t\t\t\t\t_updatedAt: now\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (metadata) {\n\t\t\tupdate.$set = {\n\t\t\t\tmetadata: metadata\n\t\t\t};\n\t\t\tconnection.metadata = metadata;\n\t\t}\n\n\t\t// make sure closed connections are being created\n\t\tif (!connectionHandle.closed) {\n\t\t\tUsersSessions.upsert(query, update);\n\t\t}\n\t},\n\n\tsetConnection: function(userId, connection, status) {\n\t\tif (!userId) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogGrey('[user-presence] setConnection', userId, connection.id, status);\n\n\t\tvar query = {\n\t\t\t_id: userId,\n\t\t\t'connections.id': connection.id\n\t\t};\n\n\t\tvar now = new Date();\n\n\t\tvar update = {\n\t\t\t$set: {\n\t\t\t\t'connections.$.status': status,\n\t\t\t\t'connections.$._updatedAt': now\n\t\t\t}\n\t\t};\n\n\t\tif (connection.metadata) {\n\t\t\tupdate.$set.metadata = connection.metadata;\n\t\t}\n\n\t\tvar count = UsersSessions.update(query, update);\n\n\t\tif (count === 0) {\n\t\t\treturn UserPresence.createConnection(userId, connection, status, connection.metadata);\n\t\t}\n\n\t\tif (status === 'online') {\n\t\t\tMeteor.users.update({_id: userId, statusDefault: 'online', status: {$ne: 'online'}}, {$set: {status: 'online'}});\n\t\t} else if (status === 'away') {\n\t\t\tMeteor.users.update({_id: userId, statusDefault: 'online', status: {$ne: 'away'}}, {$set: {status: 'away'}});\n\t\t}\n\t},\n\n\tsetDefaultStatus: function(userId, status) {\n\t\tif (!userId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (allowedStatus.indexOf(status) === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogYellow('[user-presence] setDefaultStatus', userId, status);\n\n\t\tvar update = Meteor.users.update({_id: userId, statusDefault: {$ne: status}}, {$set: {statusDefault: status}});\n\n\t\tif (update > 0) {\n\t\t\tUserPresenceMonitor.processUser(userId, { statusDefault: status });\n\t\t}\n\t},\n\n\tremoveConnection: function(connectionId) {\n\t\tlogRed('[user-presence] removeConnection', connectionId);\n\n\t\tvar query = {\n\t\t\t'connections.id': connectionId\n\t\t};\n\n\t\tvar update = {\n\t\t\t$pull: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid: connectionId\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn UsersSessions.update(query, update);\n\t},\n\n\tstart: function() {\n\t\tMeteor.onConnection(function(connection) {\n\t\t\tconst session = Meteor.server.sessions.get(connection.id);\n\n\t\t\tconnection.onClose(function() {\n\t\t\t\tif (!session) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst connectionHandle = session.connectionHandle;\n\n\t\t\t\t// mark connection as closed so if it drops in the middle of the process it doesn't even is created\n\t\t\t\tif (!connectionHandle) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconnectionHandle.closed = true;\n\n\t\t\t\tif (connectionHandle.UserPresenceUserId != null) {\n\t\t\t\t\tUserPresence.removeConnection(connection.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tprocess.on('exit', Meteor.bindEnvironment(function() {\n\t\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\t\tUserPresence.removeConnectionsByInstanceId(InstanceStatus.id());\n\t\t\t} else {\n\t\t\t\tUserPresence.removeAllConnections();\n\t\t\t}\n\t\t}));\n\n\t\tif (Package['accounts-base']) {\n\t\t\tAccounts.onLogin(function(login) {\n\t\t\t\tUserPresence.createConnection(login.user._id, login.connection);\n\t\t\t});\n\n\t\t\tAccounts.onLogout(function(login) {\n\t\t\t\tUserPresence.removeConnection(login.connection.id);\n\t\t\t});\n\t\t}\n\n\t\tMeteor.publish(null, function() {\n\t\t\tif (this.userId == null && this.connection && this.connection.id) {\n\t\t\t\tconst connectionHandle = UserPresence.getConnectionHandle(this.connection.id);\n\t\t\t\tif (connectionHandle && connectionHandle.UserPresenceUserId != null) {\n\t\t\t\t\tUserPresence.removeConnection(this.connection.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.ready();\n\t\t});\n\n\t\tUserPresenceEvents.on('setStatus', function(userId, status) {\n\t\t\tvar user = Meteor.users.findOne(userId);\n\t\t\tvar statusConnection = status;\n\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (user.statusDefault != null && status !== 'offline' && user.statusDefault !== 'online') {\n\t\t\t\tstatus = user.statusDefault;\n\t\t\t}\n\n\t\t\tvar query = {\n\t\t\t\t_id: userId,\n\t\t\t\t$or: [\n\t\t\t\t\t{status: {$ne: status}},\n\t\t\t\t\t{statusConnection: {$ne: statusConnection}}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tvar update = {\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: status,\n\t\t\t\t\tstatusConnection: statusConnection\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst result = Meteor.users.update(query, update);\n\n\t\t\t// if nothing updated, do not emit anything\n\t\t\tif (result) {\n\t\t\t\tUserPresenceEvents.emit('setUserStatus', user, status, statusConnection);\n\t\t\t}\n\t\t});\n\n\t\tMeteor.methods({\n\t\t\t'UserPresence:connect': function(id, metadata) {\n\t\t\t\tcheck(id, Match.Maybe(String));\n\t\t\t\tcheck(metadata, Match.Maybe(Object));\n\t\t\t\tthis.unblock();\n\t\t\t\tcheckUser(id, this.userId);\n\t\t\t\tUserPresence.createConnection(id || this.userId, this.connection, 'online', metadata);\n\t\t\t},\n\n\t\t\t'UserPresence:away': function(id) {\n\t\t\t\tcheck(id, Match.Maybe(String));\n\t\t\t\tthis.unblock();\n\t\t\t\tcheckUser(id, this.userId);\n\t\t\t\tUserPresence.setConnection(id || this.userId, this.connection, 'away');\n\t\t\t},\n\n\t\t\t'UserPresence:online': function(id) {\n\t\t\t\tcheck(id, Match.Maybe(String));\n\t\t\t\tthis.unblock();\n\t\t\t\tcheckUser(id, this.userId);\n\t\t\t\tUserPresence.setConnection(id || this.userId, this.connection, 'online');\n\t\t\t},\n\n\t\t\t'UserPresence:setDefaultStatus': function(id, status) {\n\t\t\t\tcheck(id, Match.Maybe(String));\n\t\t\t\tcheck(status, Match.Maybe(String));\n\t\t\t\tthis.unblock();\n\n\t\t\t\t// backward compatible (receives status as first argument)\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\tUserPresence.setDefaultStatus(this.userId, id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcheckUser(id, this.userId);\n\t\t\t\tUserPresence.setDefaultStatus(id || this.userId, status);\n\t\t\t}\n\t\t});\n\t}\n};\n"]},"sourceType":"module","hash":"7aba84d044eafc43c84506b6d56635bb3b81f36e"}
