{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/groups.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/groups.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/groups.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/groups.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/groups.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  findPrivateGroupByIdOrName: () => findPrivateGroupByIdOrName\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet mountIntegrationQueryBasedOnPermissions;\nmodule.link(\"../../../integrations/server/lib/mountQueriesBasedOnPermission\", {\n  mountIntegrationQueryBasedOnPermissions(v) {\n    mountIntegrationQueryBasedOnPermissions = v;\n  }\n\n}, 3);\nlet Subscriptions, Rooms, Messages, Users;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\nlet Integrations, Uploads;\nmodule.link(\"../../../models/server/raw\", {\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Uploads(v) {\n    Uploads = v;\n  }\n\n}, 5);\nlet hasPermission, hasAtLeastOnePermission, canAccessRoom, hasAllPermission;\nmodule.link(\"../../../authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  hasAtLeastOnePermission(v) {\n    hasAtLeastOnePermission = v;\n  },\n\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasAllPermission(v) {\n    hasAllPermission = v;\n  }\n\n}, 6);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 7);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 8);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 9);\nlet findUsersOfRoom;\nmodule.link(\"../../../../server/lib/findUsersOfRoom\", {\n  findUsersOfRoom(v) {\n    findUsersOfRoom = v;\n  }\n\n}, 10);\n\nfunction findPrivateGroupByIdOrName(_ref) {\n  let {\n    params,\n    userId,\n    checkedArchived = true\n  } = _ref;\n\n  if ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n    throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n  }\n\n  const roomOptions = {\n    fields: {\n      t: 1,\n      ro: 1,\n      name: 1,\n      fname: 1,\n      prid: 1,\n      archived: 1,\n      broadcast: 1\n    }\n  };\n  const room = params.roomId ? Rooms.findOneById(params.roomId, roomOptions) : Rooms.findOneByName(params.roomName, roomOptions);\n\n  if (!room || room.t !== 'p') {\n    throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n  }\n\n  const user = Users.findOneById(userId, {\n    fields: {\n      username: 1\n    }\n  });\n\n  if (!canAccessRoom(room, user)) {\n    throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n  } // discussions have their names saved on `fname` property\n\n\n  const roomName = room.prid ? room.fname : room.name;\n\n  if (checkedArchived && room.archived) {\n    throw new Meteor.Error('error-room-archived', \"The private group, \".concat(roomName, \", is archived\"));\n  }\n\n  const sub = Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n    fields: {\n      open: 1\n    }\n  });\n  return {\n    rid: room._id,\n    open: sub && sub.open,\n    ro: room.ro,\n    t: room.t,\n    name: roomName,\n    broadcast: room.broadcast\n  };\n}\n\nAPI.v1.addRoute('groups.addAll', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.addModerator', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomModerator', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.addOwner', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomOwner', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.addLeader', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomLeader', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n}); // Archives a private group only if it wasn't\n\nAPI.v1.addRoute('groups.archive', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('archiveRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.close', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n\n    if (!findResult.open) {\n      return API.v1.failure(\"The private group, \".concat(findResult.name, \", is already closed to the sender\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('hideRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.counters', {\n  authRequired: true\n}, {\n  get() {\n    const access = hasPermission(this.userId, 'view-room-administration');\n    const params = this.requestParams();\n    let user = this.userId;\n    let room;\n    let unreads = null;\n    let userMentions = null;\n    let unreadsFrom = null;\n    let joined = false;\n    let msgs = null;\n    let latest = null;\n    let members = null;\n\n    if ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n      throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n    }\n\n    if (params.roomId) {\n      room = Rooms.findOneById(params.roomId);\n    } else if (params.roomName) {\n      room = Rooms.findOneByName(params.roomName);\n    }\n\n    if (!room || room.t !== 'p') {\n      throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n    }\n\n    if (room.archived) {\n      throw new Meteor.Error('error-room-archived', \"The private group, \".concat(room.name, \", is archived\"));\n    }\n\n    if (params.userId) {\n      if (!access) {\n        return API.v1.unauthorized();\n      }\n\n      user = params.userId;\n    }\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n    const lm = room.lm ? room.lm : room._updatedAt;\n\n    if (typeof subscription !== 'undefined' && subscription.open) {\n      unreads = Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n      unreadsFrom = subscription.ls || subscription.ts;\n      userMentions = subscription.userMentions;\n      joined = true;\n    }\n\n    if (access || joined) {\n      msgs = room.msgs;\n      latest = lm;\n      members = room.usersCount;\n    }\n\n    return API.v1.success({\n      joined,\n      members,\n      unreads,\n      unreadsFrom,\n      msgs,\n      latest,\n      userMentions\n    });\n  }\n\n}); // Create Private Group\n\nAPI.v1.addRoute('groups.create', {\n  authRequired: true\n}, {\n  post() {\n    if (!hasPermission(this.userId, 'create-p')) {\n      return API.v1.unauthorized();\n    }\n\n    if (!this.bodyParams.name) {\n      return API.v1.failure('Body param \"name\" is required');\n    }\n\n    if (this.bodyParams.members && !_.isArray(this.bodyParams.members)) {\n      return API.v1.failure('Body param \"members\" must be an array if provided');\n    }\n\n    if (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n      return API.v1.failure('Body param \"customFields\" must be an object if provided');\n    }\n\n    if (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n      return API.v1.failure('Body param \"extraData\" must be an object if provided');\n    }\n\n    const readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n    let id;\n    Meteor.runAsUser(this.userId, () => {\n      id = Meteor.call('createPrivateGroup', this.bodyParams.name, this.bodyParams.members ? this.bodyParams.members : [], readOnly, this.bodyParams.customFields, this.bodyParams.extraData);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(id.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.delete', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('eraseRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.files', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n\n    const addUserObjectToEveryObject = file => {\n      if (file.userId) {\n        file = this.insertUserObject({\n          object: file,\n          userId: file.userId\n        });\n      }\n\n      return file;\n    };\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult.rid\n    });\n    const files = Promise.await(Uploads.find(ourQuery, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).toArray());\n    return API.v1.success({\n      files: files.map(addUserObjectToEveryObject),\n      count: files.length,\n      offset,\n      total: Promise.await(Uploads.find(ourQuery).count())\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.getIntegrations', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasAtLeastOnePermission(this.userId, ['manage-outgoing-integrations', 'manage-own-outgoing-integrations', 'manage-incoming-integrations', 'manage-own-incoming-integrations'])) {\n      return API.v1.unauthorized();\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n    let includeAllPrivateGroups = true;\n\n    if (typeof this.queryParams.includeAllPrivateGroups !== 'undefined') {\n      includeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n    }\n\n    const channelsToSearch = [\"#\".concat(findResult.name)];\n\n    if (includeAllPrivateGroups) {\n      channelsToSearch.push('all_private_groups');\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields: projection,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign(mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n      channel: {\n        $in: channelsToSearch\n      }\n    });\n    const cursor = Integrations.find(ourQuery, {\n      sort: sort || {\n        _createdAt: 1\n      },\n      skip: offset,\n      limit: count,\n      projection\n    });\n    const integrations = Promise.await(cursor.toArray());\n    const total = Promise.await(cursor.count());\n    return API.v1.success({\n      integrations,\n      count: integrations.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.history', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n    let latestDate = new Date();\n\n    if (this.queryParams.latest) {\n      latestDate = new Date(this.queryParams.latest);\n    }\n\n    let oldestDate = undefined;\n\n    if (this.queryParams.oldest) {\n      oldestDate = new Date(this.queryParams.oldest);\n    }\n\n    const inclusive = this.queryParams.inclusive || false;\n    let count = 20;\n\n    if (this.queryParams.count) {\n      count = parseInt(this.queryParams.count);\n    }\n\n    let offset = 0;\n\n    if (this.queryParams.offset) {\n      offset = parseInt(this.queryParams.offset);\n    }\n\n    const unreads = this.queryParams.unreads || false;\n    const showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n    const result = Meteor.call('getChannelHistory', {\n      rid: findResult.rid,\n      latest: latestDate,\n      oldest: oldestDate,\n      inclusive,\n      offset,\n      count,\n      unreads,\n      showThreadMessages\n    });\n\n    if (!result) {\n      return API.v1.unauthorized();\n    }\n\n    return API.v1.success(result);\n  }\n\n});\nAPI.v1.addRoute('groups.info', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.invite', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      roomId = '',\n      roomName = ''\n    } = this.requestParams();\n    const idOrName = roomId || roomName;\n\n    if (!idOrName.trim()) {\n      throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n    }\n\n    const {\n      _id: rid,\n      t: type\n    } = Rooms.findOneByIdOrName(idOrName) || {};\n\n    if (!rid || type !== 'p') {\n      throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n    }\n\n    const users = this.getUserListFromParams();\n\n    if (!users.length) {\n      throw new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('addUsersToRoom', {\n      rid,\n      users: users.map(u => u.username)\n    }));\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.kick', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeUserFromRoom', {\n        rid: findResult.rid,\n        username: user.username\n      });\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.leave', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('leaveRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n}); // List Private Groups a user has access to\n\nAPI.v1.addRoute('groups.list', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields\n    } = this.parseJsonQuery(); // TODO: CACHE: Add Breacking notice since we removed the query param\n\n    const cursor = Rooms.findBySubscriptionTypeAndUserId('p', this.userId, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const totalCount = cursor.count();\n    const rooms = cursor.fetch();\n    return API.v1.success({\n      groups: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      offset,\n      count: rooms.length,\n      total: totalCount\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.listAll', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-room-administration')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      t: 'p'\n    });\n    const cursor = Rooms.find(ourQuery, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const totalCount = cursor.count();\n    const rooms = cursor.fetch();\n    return API.v1.success({\n      groups: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      offset,\n      count: rooms.length,\n      total: totalCount\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.members', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n\n    if (findResult.broadcast && !hasPermission(this.userId, 'view-broadcast-member-list')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset: skip,\n      count: limit\n    } = this.getPaginationItems();\n    const {\n      sort = {}\n    } = this.parseJsonQuery();\n    check(this.queryParams, Match.ObjectIncluding({\n      status: Match.Maybe([String]),\n      filter: Match.Maybe(String)\n    }));\n    const {\n      status,\n      filter\n    } = this.queryParams;\n    const cursor = findUsersOfRoom(_objectSpread(_objectSpread({\n      rid: findResult.rid\n    }, status && {\n      status: {\n        $in: status\n      }\n    }), {}, {\n      skip,\n      limit,\n      filter\n    }, (sort === null || sort === void 0 ? void 0 : sort.username) && {\n      sort: {\n        username: sort.username\n      }\n    }));\n    const total = cursor.count();\n    const members = cursor.fetch();\n    return API.v1.success({\n      members,\n      count: members.length,\n      offset: skip,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.messages', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult.rid\n    });\n    const messages = Messages.find(ourQuery, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).fetch();\n    return API.v1.success({\n      messages: normalizeMessagesForUser(messages, this.userId),\n      count: messages.length,\n      offset,\n      total: Messages.find(ourQuery).count()\n    });\n  }\n\n}); // TODO: CACHE: same as channels.online\n\nAPI.v1.addRoute('groups.online', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      query\n    } = this.parseJsonQuery();\n\n    if (!query || Object.keys(query).length === 0) {\n      return API.v1.failure('Invalid query');\n    }\n\n    const ourQuery = Object.assign({}, query, {\n      t: 'p'\n    });\n    const room = Rooms.findOne(ourQuery);\n\n    if (room == null) {\n      return API.v1.failure('Group does not exists');\n    }\n\n    const user = this.getLoggedInUser();\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    const online = Users.findUsersNotOffline({\n      fields: {\n        username: 1\n      }\n    }).fetch();\n    const onlineInRoom = [];\n    online.forEach(user => {\n      const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n        fields: {\n          _id: 1\n        }\n      });\n\n      if (subscription) {\n        onlineInRoom.push({\n          _id: user._id,\n          username: user.username\n        });\n      }\n    });\n    return API.v1.success({\n      online: onlineInRoom\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.open', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n\n    if (findResult.open) {\n      return API.v1.failure(\"The private group, \".concat(findResult.name, \", is already open for the sender\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('openRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.removeModerator', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomModerator', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.removeOwner', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomOwner', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.removeLeader', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomLeader', findResult.rid, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.rename', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.name || !this.bodyParams.name.trim()) {\n      return API.v1.failure('The bodyParam \"name\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: {\n        roomId: this.bodyParams.roomId\n      },\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomName', this.bodyParams.name);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setCustomFields', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n      return API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setDescription', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('description')) {\n      return API.v1.failure('The bodyParam \"description\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomDescription', this.bodyParams.description);\n    });\n    return API.v1.success({\n      description: this.bodyParams.description\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setPurpose', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('purpose')) {\n      return API.v1.failure('The bodyParam \"purpose\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomDescription', this.bodyParams.purpose);\n    });\n    return API.v1.success({\n      purpose: this.bodyParams.purpose\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setReadOnly', {\n  authRequired: true\n}, {\n  post() {\n    if (typeof this.bodyParams.readOnly === 'undefined') {\n      return API.v1.failure('The bodyParam \"readOnly\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n\n    if (findResult.ro === this.bodyParams.readOnly) {\n      return API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'readOnly', this.bodyParams.readOnly);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setTopic', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('topic')) {\n      return API.v1.failure('The bodyParam \"topic\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomTopic', this.bodyParams.topic);\n    });\n    return API.v1.success({\n      topic: this.bodyParams.topic\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setType', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.type || !this.bodyParams.type.trim()) {\n      return API.v1.failure('The bodyParam \"type\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n\n    if (findResult.t === this.bodyParams.type) {\n      return API.v1.failure('The private group type is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomType', this.bodyParams.type);\n    });\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setAnnouncement', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('announcement')) {\n      return API.v1.failure('The bodyParam \"announcement\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.rid, 'roomAnnouncement', this.bodyParams.announcement);\n    });\n    return API.v1.success({\n      announcement: this.bodyParams.announcement\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.unarchive', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId,\n      checkedArchived: false\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('unarchiveRoom', findResult.rid);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('groups.roles', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const roles = Meteor.runAsUser(this.userId, () => Meteor.call('getRoomRoles', findResult.rid));\n    return API.v1.success({\n      roles\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.moderators', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    const moderators = Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n      fields: {\n        u: 1\n      }\n    }).fetch().map(sub => sub.u);\n    return API.v1.success({\n      moderators\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.setEncrypted', {\n  authRequired: true\n}, {\n  post() {\n    if (!Match.test(this.bodyParams, Match.ObjectIncluding({\n      encrypted: Boolean\n    }))) {\n      return API.v1.failure('The bodyParam \"encrypted\" is required');\n    }\n\n    const findResult = findPrivateGroupByIdOrName({\n      params: this.requestParams(),\n      userId: this.userId\n    });\n    Meteor.call('saveRoomSettings', findResult.rid, 'encrypted', this.bodyParams.encrypted);\n    return API.v1.success({\n      group: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('groups.convertToTeam', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      roomId,\n      roomName\n    } = this.requestParams();\n\n    if (!roomId && !roomName) {\n      return API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n    }\n\n    const room = findPrivateGroupByIdOrName({\n      params: {\n        roomId,\n        roomName\n      },\n      userId: this.userId\n    });\n\n    if (!room) {\n      return API.v1.failure('Private group not found');\n    }\n\n    if (!hasAllPermission(this.userId, ['create-team', 'edit-room'], room.rid)) {\n      return API.v1.unauthorized();\n    }\n\n    const subscriptions = Subscriptions.findByRoomId(room.rid, {\n      fields: {\n        'u._id': 1\n      }\n    });\n    const members = subscriptions.fetch().map(s => s.u && s.u._id);\n    const teamData = {\n      team: {\n        name: room.name,\n        type: 1\n      },\n      members,\n      room: {\n        name: room.name,\n        id: room.rid\n      }\n    };\n    const team = Promise.await(Team.create(this.userId, teamData));\n    return API.v1.success({\n      team\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/groups.js"],"names":["_objectSpread","module","link","default","v","export","findPrivateGroupByIdOrName","_","Meteor","Match","check","mountIntegrationQueryBasedOnPermissions","Subscriptions","Rooms","Messages","Users","Integrations","Uploads","hasPermission","hasAtLeastOnePermission","canAccessRoom","hasAllPermission","normalizeMessagesForUser","API","Team","findUsersOfRoom","params","userId","checkedArchived","roomId","trim","roomName","Error","roomOptions","fields","t","ro","name","fname","prid","archived","broadcast","room","findOneById","findOneByName","user","username","sub","findOneByRoomIdAndUserId","_id","open","rid","v1","addRoute","authRequired","post","findResult","requestParams","runAsUser","call","bodyParams","activeUsersOnly","success","group","composeRoomWithLastMessage","defaultFieldsToExclude","getUserFromParams","failure","get","access","unreads","userMentions","unreadsFrom","joined","msgs","latest","members","unauthorized","subscription","lm","_updatedAt","countVisibleByRoomIdBetweenTimestampsInclusive","ls","ts","usersCount","isArray","customFields","extraData","readOnly","id","addUserObjectToEveryObject","file","insertUserObject","object","offset","count","getPaginationItems","sort","query","parseJsonQuery","ourQuery","Object","assign","files","Promise","await","find","skip","limit","toArray","map","length","total","includeAllPrivateGroups","queryParams","channelsToSearch","push","projection","channel","$in","cursor","_createdAt","integrations","latestDate","Date","oldestDate","undefined","oldest","inclusive","parseInt","showThreadMessages","result","idOrName","type","findOneByIdOrName","users","getUserListFromParams","u","findBySubscriptionTypeAndUserId","totalCount","rooms","fetch","groups","ObjectIncluding","status","Maybe","String","filter","messages","keys","findOne","getLoggedInUser","online","findUsersNotOffline","onlineInRoom","forEach","hasOwnProperty","description","purpose","topic","announcement","roles","moderators","findByRoomIdAndRoles","test","encrypted","Boolean","subscriptions","findByRoomId","s","teamData","team","create"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { Subscriptions, Rooms, Messages, Users } from '../../../models/server';\nimport { Integrations, Uploads } from '../../../models/server/raw';\nimport { hasPermission, hasAtLeastOnePermission, canAccessRoom, hasAllPermission } from '../../../authorization/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { Team } from '../../../../server/sdk';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\n\n// Returns the private group subscription IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nexport function findPrivateGroupByIdOrName({ params, userId, checkedArchived = true }) {\n\tif ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst roomOptions = {\n\t\tfields: {\n\t\t\tt: 1,\n\t\t\tro: 1,\n\t\t\tname: 1,\n\t\t\tfname: 1,\n\t\t\tprid: 1,\n\t\t\tarchived: 1,\n\t\t\tbroadcast: 1,\n\t\t},\n\t};\n\tconst room = params.roomId ? Rooms.findOneById(params.roomId, roomOptions) : Rooms.findOneByName(params.roomName, roomOptions);\n\n\tif (!room || room.t !== 'p') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\tconst user = Users.findOneById(userId, { fields: { username: 1 } });\n\n\tif (!canAccessRoom(room, user)) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\t// discussions have their names saved on `fname` property\n\tconst roomName = room.prid ? room.fname : room.name;\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${roomName}, is archived`);\n\t}\n\n\tconst sub = Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { fields: { open: 1 } });\n\n\treturn {\n\t\trid: room._id,\n\t\topen: sub && sub.open,\n\t\tro: room.ro,\n\t\tt: room.t,\n\t\tname: roomName,\n\t\tbroadcast: room.broadcast,\n\t};\n}\n\nAPI.v1.addRoute(\n\t'groups.addAll',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomModerator', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomOwner', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst user = this.getUserFromParams();\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomLeader', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Archives a private group only if it wasn't\nAPI.v1.addRoute(\n\t'groups.archive',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('archiveRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.close',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('hideRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.counters',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst access = hasPermission(this.userId, 'view-room-administration');\n\t\t\tconst params = this.requestParams();\n\t\t\tlet user = this.userId;\n\t\t\tlet room;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tif (params.roomId) {\n\t\t\t\troom = Rooms.findOneById(params.roomId);\n\t\t\t} else if (params.roomName) {\n\t\t\t\troom = Rooms.findOneByName(params.roomName);\n\t\t\t}\n\n\t\t\tif (!room || room.t !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tif (room.archived) {\n\t\t\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${room.name}, is archived`);\n\t\t\t}\n\n\t\t\tif (params.userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = params.userId;\n\t\t\t}\n\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (typeof subscription !== 'undefined' && subscription.open) {\n\t\t\t\tunreads = Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!hasPermission(this.userId, 'create-p')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (!this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('Body param \"name\" is required');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.members && !_.isArray(this.bodyParams.members)) {\n\t\t\t\treturn API.v1.failure('Body param \"members\" must be an array if provided');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"customFields\" must be an object if provided');\n\t\t\t}\n\t\t\tif (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"extraData\" must be an object if provided');\n\t\t\t}\n\n\t\t\tconst readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n\n\t\t\tlet id;\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tid = Meteor.call(\n\t\t\t\t\t'createPrivateGroup',\n\t\t\t\t\tthis.bodyParams.name,\n\t\t\t\t\tthis.bodyParams.members ? this.bodyParams.members : [],\n\t\t\t\t\treadOnly,\n\t\t\t\t\tthis.bodyParams.customFields,\n\t\t\t\t\tthis.bodyParams.extraData,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(id.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.delete',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('eraseRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.files',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst addUserObjectToEveryObject = (file) => {\n\t\t\t\tif (file.userId) {\n\t\t\t\t\tfile = this.insertUserObject({ object: file, userId: file.userId });\n\t\t\t\t}\n\t\t\t\treturn file;\n\t\t\t};\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.rid });\n\n\t\t\tconst files = Promise.await(\n\t\t\t\tUploads.find(ourQuery, {\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields,\n\t\t\t\t}).toArray(),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: files.map(addUserObjectToEveryObject),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Promise.await(Uploads.find(ourQuery).count()),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.getIntegrations',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (\n\t\t\t\t!hasAtLeastOnePermission(this.userId, [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t])\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPrivateGroups = true;\n\t\t\tif (typeof this.queryParams.includeAllPrivateGroups !== 'undefined') {\n\t\t\t\tincludeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n\t\t\t}\n\n\t\t\tconst channelsToSearch = [`#${findResult.name}`];\n\t\t\tif (includeAllPrivateGroups) {\n\t\t\t\tchannelsToSearch.push('all_private_groups');\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields: projection, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign(mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n\t\t\t\tchannel: { $in: channelsToSearch },\n\t\t\t});\n\t\t\tconst cursor = Integrations.find(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst integrations = Promise.await(cursor.toArray());\n\t\t\tconst total = Promise.await(cursor.count());\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.history',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(this.queryParams.count);\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(this.queryParams.offset);\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = Meteor.call('getChannelHistory', {\n\t\t\t\trid: findResult.rid,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.info',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.invite',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { roomId = '', roomName = '' } = this.requestParams();\n\t\t\tconst idOrName = roomId || roomName;\n\t\t\tif (!idOrName.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst { _id: rid, t: type } = Rooms.findOneByIdOrName(idOrName) || {};\n\n\t\t\tif (!rid || type !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tconst users = this.getUserListFromParams();\n\n\t\t\tif (!users.length) {\n\t\t\t\tthrow new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('addUsersToRoom', { rid, users: users.map((u) => u.username) }));\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.kick',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeUserFromRoom', { rid: findResult.rid, username: user.username });\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.leave',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('leaveRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// List Private Groups a user has access to\nAPI.v1.addRoute(\n\t'groups.list',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields } = this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breacking notice since we removed the query param\n\t\t\tconst cursor = Rooms.findBySubscriptionTypeAndUserId('p', this.userId, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst totalCount = cursor.count();\n\t\t\tconst rooms = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal: totalCount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.listAll',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-room-administration')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });\n\n\t\t\tconst cursor = Rooms.find(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst totalCount = cursor.count();\n\t\t\tconst rooms = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal: totalCount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.members',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !hasPermission(this.userId, 'view-broadcast-member-list')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = this.getPaginationItems();\n\t\t\tconst { sort = {} } = this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst cursor = findUsersOfRoom({\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\t\t\tconst members = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.messages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.rid });\n\n\t\t\tconst messages = Messages.find(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t}).fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Messages.find(ourQuery).count(),\n\t\t\t});\n\t\t},\n\t},\n);\n// TODO: CACHE: same as channels.online\nAPI.v1.addRoute(\n\t'groups.online',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { query } = this.parseJsonQuery();\n\t\t\tif (!query || Object.keys(query).length === 0) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });\n\n\t\t\tconst room = Rooms.findOne(ourQuery);\n\n\t\t\tif (room == null) {\n\t\t\t\treturn API.v1.failure('Group does not exists');\n\t\t\t}\n\n\t\t\tconst user = this.getLoggedInUser();\n\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online = Users.findUsersNotOffline({\n\t\t\t\tfields: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).fetch();\n\n\t\t\tconst onlineInRoom = [];\n\t\t\tonline.forEach((user) => {\n\t\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tfields: { _id: 1 },\n\t\t\t\t});\n\t\t\t\tif (subscription) {\n\t\t\t\t\tonlineInRoom.push({\n\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.open',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already open for the sender`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('openRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomModerator', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomOwner', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomLeader', findResult.rid, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.name || !this.bodyParams.name.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: { roomId: this.bodyParams.roomId },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomName', this.bodyParams.name);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomDescription', this.bodyParams.description);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomDescription', this.bodyParams.purpose);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setReadOnly',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (typeof this.bodyParams.readOnly === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"readOnly\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'readOnly', this.bodyParams.readOnly);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomTopic', this.bodyParams.topic);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setType',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.type || !this.bodyParams.type.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The private group type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomType', this.bodyParams.type);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setAnnouncement',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('announcement')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"announcement\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'roomAnnouncement', this.bodyParams.announcement);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.unarchive',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('unarchiveRoom', findResult.rid);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = Meteor.runAsUser(this.userId, () => Meteor.call('getRoomRoles', findResult.rid));\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\tfields: { u: 1 },\n\t\t\t})\n\t\t\t\t.fetch()\n\t\t\t\t.map((sub) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setEncrypted',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!Match.test(this.bodyParams, Match.ObjectIncluding({ encrypted: Boolean }))) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"encrypted\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tMeteor.call('saveRoomSettings', findResult.rid, 'encrypted', this.bodyParams.encrypted);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: this.composeRoomWithLastMessage(Rooms.findOneById(findResult.rid, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.convertToTeam',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { roomId, roomName } = this.requestParams();\n\n\t\t\tif (!roomId && !roomName) {\n\t\t\t\treturn API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst room = findPrivateGroupByIdOrName({\n\t\t\t\tparams: {\n\t\t\t\t\troomId,\n\t\t\t\t\troomName,\n\t\t\t\t},\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Private group not found');\n\t\t\t}\n\n\t\t\tif (!hasAllPermission(this.userId, ['create-team', 'edit-room'], room.rid)) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst subscriptions = Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tfields: { 'u._id': 1 },\n\t\t\t});\n\n\t\t\tconst members = subscriptions.fetch().map((s) => s.u && s.u._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = Promise.await(Team.create(this.userId, teamData));\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"5904a0f1d05c1642ec7e6984830d9ecd1c9f28d0"}
