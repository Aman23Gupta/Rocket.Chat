{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/lib/PushNotification.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push-notifications/server/lib/PushNotification.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/lib/PushNotification.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/lib/PushNotification.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push-notifications/server/lib/PushNotification.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  PushNotification: () => PushNotification\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Push;\nmodule.link(\"../../../push/server\", {\n  Push(v) {\n    Push = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet metrics;\nmodule.link(\"../../../metrics/server\", {\n  metrics(v) {\n    metrics = v;\n  }\n\n}, 3);\nlet Users;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\nlet RocketChatAssets;\nmodule.link(\"../../../assets/server\", {\n  RocketChatAssets(v) {\n    RocketChatAssets = v;\n  }\n\n}, 5);\nlet replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser;\nmodule.link(\"../../../lib/server/functions/notifications\", {\n  replaceMentionedUsernamesWithFullNames(v) {\n    replaceMentionedUsernamesWithFullNames = v;\n  },\n\n  parseMessageTextPerUser(v) {\n    parseMessageTextPerUser = v;\n  }\n\n}, 6);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 7);\nlet getPushData;\nmodule.link(\"../../../lib/server/functions/notifications/mobile\", {\n  getPushData(v) {\n    getPushData = v;\n  }\n\n}, 8);\n\nclass PushNotification {\n  getNotificationId(roomId) {\n    const serverId = settings.get('uniqueID');\n    return this.hash(\"\".concat(serverId, \"|\").concat(roomId)); // hash\n  }\n\n  getNotificationConfig(_ref) {\n    let {\n      rid,\n      uid: userId,\n      mid: messageId,\n      roomName,\n      username,\n      message,\n      payload,\n      badge = 1,\n      category,\n      idOnly = false\n    } = _ref;\n    const title = idOnly ? '' : roomName || username; // message is being redacted already by 'getPushData' if idOnly is true\n\n    const text = !idOnly && roomName !== '' ? \"\".concat(username, \": \").concat(message) : message;\n    const config = {\n      from: 'push',\n      badge,\n      sound: 'default',\n      priority: 10,\n      title,\n      text,\n      payload: _objectSpread({\n        host: Meteor.absoluteUrl(),\n        messageId,\n        notificationType: idOnly ? 'message-id-only' : 'message'\n      }, idOnly || _objectSpread({\n        rid\n      }, payload)),\n      userId,\n      notId: this.getNotificationId(rid),\n      gcm: {\n        style: 'inbox',\n        image: RocketChatAssets.getURL('Assets_favicon_192')\n      }\n    };\n\n    if (category !== '') {\n      config.apn = {\n        category\n      };\n    }\n\n    return config;\n  }\n\n  hash(str) {\n    let hash = 0;\n    let i = str.length;\n\n    while (i) {\n      hash = (hash << 5) - hash + str.charCodeAt(--i);\n      hash &= hash; // Convert to 32bit integer\n    }\n\n    return hash;\n  }\n\n  send(_ref2) {\n    let {\n      rid,\n      uid,\n      mid,\n      roomName,\n      username,\n      message,\n      payload,\n      badge = 1,\n      category\n    } = _ref2;\n    const idOnly = settings.get('Push_request_content_from_server');\n    const config = this.getNotificationConfig({\n      rid,\n      uid,\n      mid,\n      roomName,\n      username,\n      message,\n      payload,\n      badge,\n      category,\n      idOnly\n    });\n    metrics.notificationsSent.inc({\n      notification_type: 'mobile'\n    });\n    return Push.send(config);\n  }\n\n  getNotificationForMessageId(_ref3) {\n    var _message$mentions;\n\n    let {\n      receiver,\n      message,\n      room\n    } = _ref3;\n    const sender = Users.findOne(message.u._id, {\n      fields: {\n        username: 1,\n        name: 1\n      }\n    });\n\n    if (!sender) {\n      throw new Error('Message sender not found');\n    }\n\n    let notificationMessage = callbacks.run('beforeSendMessageNotifications', message.msg);\n\n    if (((_message$mentions = message.mentions) === null || _message$mentions === void 0 ? void 0 : _message$mentions.length) > 0 && settings.get('UI_Use_Real_Name')) {\n      notificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n    }\n\n    notificationMessage = parseMessageTextPerUser(notificationMessage, message, receiver);\n    const pushData = Promise.await(getPushData({\n      room,\n      message,\n      userId: receiver._id,\n      receiver,\n      senderUsername: sender.username,\n      senderName: sender.name,\n      notificationMessage,\n      shouldOmitMessage: false\n    }));\n    return {\n      message,\n      notification: this.getNotificationConfig(_objectSpread(_objectSpread({}, pushData), {}, {\n        rid: message.rid,\n        uid: message.u._id,\n        mid: message._id,\n        idOnly: false\n      }))\n    };\n  }\n\n}\n\nmodule.exportDefault(new PushNotification());","map":{"version":3,"sources":["app/push-notifications/server/lib/PushNotification.js"],"names":["_objectSpread","module","link","default","v","export","PushNotification","Meteor","Push","settings","metrics","Users","RocketChatAssets","replaceMentionedUsernamesWithFullNames","parseMessageTextPerUser","callbacks","getPushData","getNotificationId","roomId","serverId","get","hash","getNotificationConfig","rid","uid","userId","mid","messageId","roomName","username","message","payload","badge","category","idOnly","title","text","config","from","sound","priority","host","absoluteUrl","notificationType","notId","gcm","style","image","getURL","apn","str","i","length","charCodeAt","send","notificationsSent","inc","notification_type","getNotificationForMessageId","receiver","room","sender","findOne","u","_id","fields","name","Error","notificationMessage","run","msg","mentions","pushData","Promise","await","senderUsername","senderName","shouldOmitMessage","notification","exportDefault"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { Push } from '../../../push/server';\nimport { settings } from '../../../settings/server';\nimport { metrics } from '../../../metrics/server';\nimport { Users } from '../../../models/server';\nimport { RocketChatAssets } from '../../../assets/server';\nimport { replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser } from '../../../lib/server/functions/notifications';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { getPushData } from '../../../lib/server/functions/notifications/mobile';\n\nexport class PushNotification {\n\tgetNotificationId(roomId) {\n\t\tconst serverId = settings.get('uniqueID');\n\t\treturn this.hash(`${serverId}|${roomId}`); // hash\n\t}\n\n\tgetNotificationConfig({ rid, uid: userId, mid: messageId, roomName, username, message, payload, badge = 1, category, idOnly = false }) {\n\t\tconst title = idOnly ? '' : roomName || username;\n\n\t\t// message is being redacted already by 'getPushData' if idOnly is true\n\t\tconst text = !idOnly && roomName !== '' ? `${username}: ${message}` : message;\n\n\t\tconst config = {\n\t\t\tfrom: 'push',\n\t\t\tbadge,\n\t\t\tsound: 'default',\n\t\t\tpriority: 10,\n\t\t\ttitle,\n\t\t\ttext,\n\t\t\tpayload: {\n\t\t\t\thost: Meteor.absoluteUrl(),\n\t\t\t\tmessageId,\n\t\t\t\tnotificationType: idOnly ? 'message-id-only' : 'message',\n\t\t\t\t...(idOnly || { rid, ...payload }),\n\t\t\t},\n\t\t\tuserId,\n\t\t\tnotId: this.getNotificationId(rid),\n\t\t\tgcm: {\n\t\t\t\tstyle: 'inbox',\n\t\t\t\timage: RocketChatAssets.getURL('Assets_favicon_192'),\n\t\t\t},\n\t\t};\n\n\t\tif (category !== '') {\n\t\t\tconfig.apn = {\n\t\t\t\tcategory,\n\t\t\t};\n\t\t}\n\n\t\treturn config;\n\t}\n\n\thash(str) {\n\t\tlet hash = 0;\n\t\tlet i = str.length;\n\n\t\twhile (i) {\n\t\t\thash = (hash << 5) - hash + str.charCodeAt(--i);\n\t\t\thash &= hash; // Convert to 32bit integer\n\t\t}\n\t\treturn hash;\n\t}\n\n\tsend({ rid, uid, mid, roomName, username, message, payload, badge = 1, category }) {\n\t\tconst idOnly = settings.get('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });\n\t\treturn Push.send(config);\n\t}\n\n\tgetNotificationForMessageId({ receiver, message, room }) {\n\t\tconst sender = Users.findOne(message.u._id, { fields: { username: 1, name: 1 } });\n\t\tif (!sender) {\n\t\t\tthrow new Error('Message sender not found');\n\t\t}\n\n\t\tlet notificationMessage = callbacks.run('beforeSendMessageNotifications', message.msg);\n\t\tif (message.mentions?.length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n\t\t}\n\t\tnotificationMessage = parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\t\tconst pushData = Promise.await(\n\t\t\tgetPushData({\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: receiver._id,\n\t\t\t\treceiver,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\tnotificationMessage,\n\t\t\t\tshouldOmitMessage: false,\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tnotification: this.getNotificationConfig({\n\t\t\t\t...pushData,\n\t\t\t\trid: message.rid,\n\t\t\t\tuid: message.u._id,\n\t\t\t\tmid: message._id,\n\t\t\t\tidOnly: false,\n\t\t\t}),\n\t\t};\n\t}\n}\n\nexport default new PushNotification();\n"]},"sourceType":"module","hash":"c9663e32d61a7547cff222494c92619c3dbdb175"}
