{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/channel-settings/server/methods/saveRoomSettings.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/channel-settings/server/methods/saveRoomSettings.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/channel-settings/server/methods/saveRoomSettings.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/channel-settings/server/methods/saveRoomSettings.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/channel-settings/server/methods/saveRoomSettings.js"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet setRoomAvatar;\nmodule.link(\"../../../lib/server/functions/setRoomAvatar\", {\n  setRoomAvatar(v) {\n    setRoomAvatar = v;\n  }\n\n}, 2);\nlet hasPermission;\nmodule.link(\"../../../authorization\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 3);\nlet Rooms;\nmodule.link(\"../../../models\", {\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 4);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 5);\nlet saveRoomName;\nmodule.link(\"../functions/saveRoomName\", {\n  saveRoomName(v) {\n    saveRoomName = v;\n  }\n\n}, 6);\nlet saveRoomTopic;\nmodule.link(\"../functions/saveRoomTopic\", {\n  saveRoomTopic(v) {\n    saveRoomTopic = v;\n  }\n\n}, 7);\nlet saveRoomAnnouncement;\nmodule.link(\"../functions/saveRoomAnnouncement\", {\n  saveRoomAnnouncement(v) {\n    saveRoomAnnouncement = v;\n  }\n\n}, 8);\nlet saveRoomCustomFields;\nmodule.link(\"../functions/saveRoomCustomFields\", {\n  saveRoomCustomFields(v) {\n    saveRoomCustomFields = v;\n  }\n\n}, 9);\nlet saveRoomDescription;\nmodule.link(\"../functions/saveRoomDescription\", {\n  saveRoomDescription(v) {\n    saveRoomDescription = v;\n  }\n\n}, 10);\nlet saveRoomType;\nmodule.link(\"../functions/saveRoomType\", {\n  saveRoomType(v) {\n    saveRoomType = v;\n  }\n\n}, 11);\nlet saveRoomReadOnly;\nmodule.link(\"../functions/saveRoomReadOnly\", {\n  saveRoomReadOnly(v) {\n    saveRoomReadOnly = v;\n  }\n\n}, 12);\nlet saveReactWhenReadOnly;\nmodule.link(\"../functions/saveReactWhenReadOnly\", {\n  saveReactWhenReadOnly(v) {\n    saveReactWhenReadOnly = v;\n  }\n\n}, 13);\nlet saveRoomSystemMessages;\nmodule.link(\"../functions/saveRoomSystemMessages\", {\n  saveRoomSystemMessages(v) {\n    saveRoomSystemMessages = v;\n  }\n\n}, 14);\nlet saveRoomTokenpass;\nmodule.link(\"../functions/saveRoomTokens\", {\n  saveRoomTokenpass(v) {\n    saveRoomTokenpass = v;\n  }\n\n}, 15);\nlet saveRoomEncrypted;\nmodule.link(\"../functions/saveRoomEncrypted\", {\n  saveRoomEncrypted(v) {\n    saveRoomEncrypted = v;\n  }\n\n}, 16);\nlet saveStreamingOptions;\nmodule.link(\"../functions/saveStreamingOptions\", {\n  saveStreamingOptions(v) {\n    saveStreamingOptions = v;\n  }\n\n}, 17);\nlet RoomSettingsEnum, roomTypes;\nmodule.link(\"../../../utils\", {\n  RoomSettingsEnum(v) {\n    RoomSettingsEnum = v;\n  },\n\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 18);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 19);\nlet TEAM_TYPE;\nmodule.link(\"../../../../definition/ITeam\", {\n  TEAM_TYPE(v) {\n    TEAM_TYPE = v;\n  }\n\n}, 20);\nconst fields = ['roomAvatar', 'featured', 'roomName', 'roomTopic', 'roomAnnouncement', 'roomCustomFields', 'roomDescription', 'roomType', 'readOnly', 'reactWhenReadOnly', 'systemMessages', 'default', 'joinCode', 'tokenpass', 'streamingOptions', 'retentionEnabled', 'retentionMaxAge', 'retentionExcludePinned', 'retentionFilesOnly', 'retentionIgnoreThreads', 'retentionOverrideGlobal', 'encrypted', 'favorite'];\nconst validators = {\n  default(_ref) {\n    let {\n      userId\n    } = _ref;\n\n    if (!hasPermission(userId, 'view-room-administration')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Viewing room administration is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Viewing_room_administration'\n      });\n    }\n  },\n\n  featured(_ref2) {\n    let {\n      userId\n    } = _ref2;\n\n    if (!hasPermission(userId, 'view-room-administration')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Viewing room administration is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Viewing_room_administration'\n      });\n    }\n  },\n\n  roomType(_ref3) {\n    let {\n      userId,\n      room,\n      value\n    } = _ref3;\n\n    if (value === room.t) {\n      return;\n    }\n\n    if (value === 'c' && !hasPermission(userId, 'create-c')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Changing a private group to a public channel is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Change_Room_Type'\n      });\n    }\n\n    if (value === 'p' && !hasPermission(userId, 'create-p')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Changing a public channel to a private room is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Change_Room_Type'\n      });\n    }\n  },\n\n  encrypted(_ref4) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref4;\n\n    if (value !== room.encrypted) {\n      if (!roomTypes.getConfig(room.t).allowRoomSettingChange(room, RoomSettingsEnum.E2E)) {\n        throw new Meteor.Error('error-action-not-allowed', 'Only groups or direct channels can enable encryption', {\n          method: 'saveRoomSettings',\n          action: 'Change_Room_Encrypted'\n        });\n      }\n\n      if (room.t !== 'd' && !hasPermission(userId, 'toggle-room-e2e-encryption', rid)) {\n        throw new Meteor.Error('error-action-not-allowed', 'You do not have permission to toggle E2E encryption', {\n          method: 'saveRoomSettings',\n          action: 'Change_Room_Encrypted'\n        });\n      }\n    }\n  },\n\n  retentionEnabled(_ref5) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref5;\n\n    if (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.enabled) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  },\n\n  retentionMaxAge(_ref6) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref6;\n\n    if (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.maxAge) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  },\n\n  retentionExcludePinned(_ref7) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref7;\n\n    if (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.excludePinned) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  },\n\n  retentionFilesOnly(_ref8) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref8;\n\n    if (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.filesOnly) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  },\n\n  retentionIgnoreThreads(_ref9) {\n    let {\n      userId,\n      value,\n      room,\n      rid\n    } = _ref9;\n\n    if (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.ignoreThreads) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  },\n\n  roomAvatar(_ref10) {\n    let {\n      userId,\n      rid\n    } = _ref10;\n\n    if (!hasPermission(userId, 'edit-room-avatar', rid)) {\n      throw new Meteor.Error('error-action-not-allowed', 'Editing a room avatar is not allowed', {\n        method: 'saveRoomSettings',\n        action: 'Editing_room'\n      });\n    }\n  }\n\n};\nconst settingSavers = {\n  roomName(_ref11) {\n    let {\n      value,\n      rid,\n      user,\n      room\n    } = _ref11;\n\n    if (!Promise.await(saveRoomName(rid, value, user))) {\n      return;\n    }\n\n    if (room.teamId && room.teamMain) {\n      Team.update(user._id, room.teamId, {\n        name: value,\n        updateRoom: false\n      });\n    }\n  },\n\n  roomTopic(_ref12) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref12;\n\n    if (value !== room.topic) {\n      saveRoomTopic(rid, value, user);\n    }\n  },\n\n  roomAnnouncement(_ref13) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref13;\n\n    if (value !== room.announcement) {\n      saveRoomAnnouncement(rid, value, user);\n    }\n  },\n\n  roomCustomFields(_ref14) {\n    let {\n      value,\n      room,\n      rid\n    } = _ref14;\n\n    if (value !== room.customFields) {\n      saveRoomCustomFields(rid, value);\n    }\n  },\n\n  roomDescription(_ref15) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref15;\n\n    if (value !== room.description) {\n      saveRoomDescription(rid, value, user);\n    }\n  },\n\n  roomType(_ref16) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref16;\n\n    if (value === room.t) {\n      return;\n    }\n\n    if (!saveRoomType(rid, value, user)) {\n      return;\n    }\n\n    if (room.teamId && room.teamMain) {\n      const type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n      Team.update(user._id, room.teamId, {\n        type,\n        updateRoom: false\n      });\n    }\n  },\n\n  tokenpass(_ref17) {\n    let {\n      value,\n      rid\n    } = _ref17;\n    check(value, {\n      require: String,\n      tokens: [{\n        token: String,\n        balance: String\n      }]\n    });\n    saveRoomTokenpass(rid, value);\n  },\n\n  streamingOptions(_ref18) {\n    let {\n      value,\n      rid\n    } = _ref18;\n    saveStreamingOptions(rid, value);\n  },\n\n  readOnly(_ref19) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref19;\n\n    if (value !== room.ro) {\n      saveRoomReadOnly(rid, value, user);\n    }\n  },\n\n  reactWhenReadOnly(_ref20) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref20;\n\n    if (value !== room.reactWhenReadOnly) {\n      saveReactWhenReadOnly(rid, value, user);\n    }\n  },\n\n  systemMessages(_ref21) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref21;\n\n    if (JSON.stringify(value) !== JSON.stringify(room.sysMes)) {\n      saveRoomSystemMessages(rid, value, user);\n    }\n  },\n\n  joinCode(_ref22) {\n    let {\n      value,\n      rid\n    } = _ref22;\n    Rooms.setJoinCodeById(rid, String(value));\n  },\n\n  default(_ref23) {\n    let {\n      value,\n      rid\n    } = _ref23;\n    Rooms.saveDefaultById(rid, value);\n  },\n\n  featured(_ref24) {\n    let {\n      value,\n      rid\n    } = _ref24;\n    Rooms.saveFeaturedById(rid, value);\n  },\n\n  retentionEnabled(_ref25) {\n    let {\n      value,\n      rid\n    } = _ref25;\n    Rooms.saveRetentionEnabledById(rid, value);\n  },\n\n  retentionMaxAge(_ref26) {\n    let {\n      value,\n      rid\n    } = _ref26;\n    Rooms.saveRetentionMaxAgeById(rid, value);\n  },\n\n  retentionExcludePinned(_ref27) {\n    let {\n      value,\n      rid\n    } = _ref27;\n    Rooms.saveRetentionExcludePinnedById(rid, value);\n  },\n\n  retentionFilesOnly(_ref28) {\n    let {\n      value,\n      rid\n    } = _ref28;\n    Rooms.saveRetentionFilesOnlyById(rid, value);\n  },\n\n  retentionIgnoreThreads(_ref29) {\n    let {\n      value,\n      rid\n    } = _ref29;\n    Rooms.saveRetentionIgnoreThreadsById(rid, value);\n  },\n\n  retentionOverrideGlobal(_ref30) {\n    let {\n      value,\n      rid\n    } = _ref30;\n    Rooms.saveRetentionOverrideGlobalById(rid, value);\n  },\n\n  encrypted(_ref31) {\n    let {\n      value,\n      room,\n      rid,\n      user\n    } = _ref31;\n    saveRoomEncrypted(rid, value, user, Boolean(room.encrypted) !== Boolean(value));\n  },\n\n  favorite(_ref32) {\n    let {\n      value,\n      rid\n    } = _ref32;\n    Rooms.saveFavoriteById(rid, value.favorite, value.defaultValue);\n  },\n\n  roomAvatar(_ref33) {\n    return Promise.asyncApply(() => {\n      let {\n        value,\n        rid,\n        user\n      } = _ref33;\n      Promise.await(setRoomAvatar(rid, value, user));\n    });\n  }\n\n};\nMeteor.methods({\n  saveRoomSettings(rid, settings, value) {\n    return Promise.asyncApply(() => {\n      const userId = Meteor.userId();\n\n      if (!userId) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          function: 'RocketChat.saveRoomName'\n        });\n      }\n\n      if (!Match.test(rid, String)) {\n        throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n          method: 'saveRoomSettings'\n        });\n      }\n\n      if (typeof settings !== 'object') {\n        settings = {\n          [settings]: value\n        };\n      }\n\n      if (!Object.keys(settings).every(key => fields.includes(key))) {\n        throw new Meteor.Error('error-invalid-settings', 'Invalid settings provided', {\n          method: 'saveRoomSettings'\n        });\n      }\n\n      const room = Rooms.findOneById(rid);\n\n      if (!room) {\n        throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n          method: 'saveRoomSettings'\n        });\n      }\n\n      if (!hasPermission(userId, 'edit-room', rid)) {\n        if (!(Object.keys(settings).includes('encrypted') && room.t === 'd')) {\n          throw new Meteor.Error('error-action-not-allowed', 'Editing room is not allowed', {\n            method: 'saveRoomSettings',\n            action: 'Editing_room'\n          });\n        }\n\n        settings = {\n          encrypted: settings.encrypted\n        };\n      }\n\n      if (room.broadcast && (settings.readOnly || settings.reactWhenReadOnly)) {\n        throw new Meteor.Error('error-action-not-allowed', 'Editing readOnly/reactWhenReadOnly are not allowed for broadcast rooms', {\n          method: 'saveRoomSettings',\n          action: 'Editing_room'\n        });\n      }\n\n      const user = Meteor.user(); // validations\n\n      Object.keys(settings).forEach(setting => {\n        const value = settings[setting];\n        const validator = validators[setting];\n\n        if (validator) {\n          validator({\n            userId,\n            value,\n            room,\n            rid\n          });\n        }\n\n        if (setting === 'retentionOverrideGlobal') {\n          delete settings.retentionMaxAge;\n          delete settings.retentionExcludePinned;\n          delete settings.retentionFilesOnly;\n          delete settings.retentionIgnoreThreads;\n        }\n      }); // saving data\n\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(Object.keys(settings)), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const setting = _step.value;\n          const value = settings[setting];\n          const saver = Promise.await(settingSavers[setting]);\n\n          if (saver) {\n            saver({\n              value,\n              room,\n              rid,\n              user\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      Meteor.defer(function () {\n        const room = Rooms.findOneById(rid);\n        callbacks.run('afterSaveRoomSettings', room);\n      });\n      return {\n        result: true,\n        rid: room._id\n      };\n    });\n  }\n\n});","map":{"version":3,"sources":["app/channel-settings/server/methods/saveRoomSettings.js"],"names":["_asyncIterator","module","link","default","v","Meteor","Match","check","setRoomAvatar","hasPermission","Rooms","callbacks","saveRoomName","saveRoomTopic","saveRoomAnnouncement","saveRoomCustomFields","saveRoomDescription","saveRoomType","saveRoomReadOnly","saveReactWhenReadOnly","saveRoomSystemMessages","saveRoomTokenpass","saveRoomEncrypted","saveStreamingOptions","RoomSettingsEnum","roomTypes","Team","TEAM_TYPE","fields","validators","userId","Error","method","action","featured","roomType","room","value","t","encrypted","rid","getConfig","allowRoomSettingChange","E2E","retentionEnabled","retention","enabled","retentionMaxAge","maxAge","retentionExcludePinned","excludePinned","retentionFilesOnly","filesOnly","retentionIgnoreThreads","ignoreThreads","roomAvatar","settingSavers","roomName","user","Promise","await","teamId","teamMain","update","_id","name","updateRoom","roomTopic","topic","roomAnnouncement","announcement","roomCustomFields","customFields","roomDescription","description","type","PUBLIC","PRIVATE","tokenpass","require","String","tokens","token","balance","streamingOptions","readOnly","ro","reactWhenReadOnly","systemMessages","JSON","stringify","sysMes","joinCode","setJoinCodeById","saveDefaultById","saveFeaturedById","saveRetentionEnabledById","saveRetentionMaxAgeById","saveRetentionExcludePinnedById","saveRetentionFilesOnlyById","saveRetentionIgnoreThreadsById","retentionOverrideGlobal","saveRetentionOverrideGlobalById","Boolean","favorite","saveFavoriteById","defaultValue","methods","saveRoomSettings","settings","function","test","Object","keys","every","key","includes","findOneById","broadcast","forEach","setting","validator","saver","defer","run","result"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { setRoomAvatar } from '../../../lib/server/functions/setRoomAvatar';\nimport { hasPermission } from '../../../authorization';\nimport { Rooms } from '../../../models';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { saveRoomName } from '../functions/saveRoomName';\nimport { saveRoomTopic } from '../functions/saveRoomTopic';\nimport { saveRoomAnnouncement } from '../functions/saveRoomAnnouncement';\nimport { saveRoomCustomFields } from '../functions/saveRoomCustomFields';\nimport { saveRoomDescription } from '../functions/saveRoomDescription';\nimport { saveRoomType } from '../functions/saveRoomType';\nimport { saveRoomReadOnly } from '../functions/saveRoomReadOnly';\nimport { saveReactWhenReadOnly } from '../functions/saveReactWhenReadOnly';\nimport { saveRoomSystemMessages } from '../functions/saveRoomSystemMessages';\nimport { saveRoomTokenpass } from '../functions/saveRoomTokens';\nimport { saveRoomEncrypted } from '../functions/saveRoomEncrypted';\nimport { saveStreamingOptions } from '../functions/saveStreamingOptions';\nimport { RoomSettingsEnum, roomTypes } from '../../../utils';\nimport { Team } from '../../../../server/sdk';\nimport { TEAM_TYPE } from '../../../../definition/ITeam';\n\nconst fields = [\n\t'roomAvatar',\n\t'featured',\n\t'roomName',\n\t'roomTopic',\n\t'roomAnnouncement',\n\t'roomCustomFields',\n\t'roomDescription',\n\t'roomType',\n\t'readOnly',\n\t'reactWhenReadOnly',\n\t'systemMessages',\n\t'default',\n\t'joinCode',\n\t'tokenpass',\n\t'streamingOptions',\n\t'retentionEnabled',\n\t'retentionMaxAge',\n\t'retentionExcludePinned',\n\t'retentionFilesOnly',\n\t'retentionIgnoreThreads',\n\t'retentionOverrideGlobal',\n\t'encrypted',\n\t'favorite',\n];\n\nconst validators = {\n\tdefault({ userId }) {\n\t\tif (!hasPermission(userId, 'view-room-administration')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Viewing room administration is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Viewing_room_administration',\n\t\t\t});\n\t\t}\n\t},\n\tfeatured({ userId }) {\n\t\tif (!hasPermission(userId, 'view-room-administration')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Viewing room administration is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Viewing_room_administration',\n\t\t\t});\n\t\t}\n\t},\n\troomType({ userId, room, value }) {\n\t\tif (value === room.t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (value === 'c' && !hasPermission(userId, 'create-c')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Changing a private group to a public channel is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Change_Room_Type',\n\t\t\t});\n\t\t}\n\n\t\tif (value === 'p' && !hasPermission(userId, 'create-p')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Changing a public channel to a private room is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Change_Room_Type',\n\t\t\t});\n\t\t}\n\t},\n\tencrypted({ userId, value, room, rid }) {\n\t\tif (value !== room.encrypted) {\n\t\t\tif (!roomTypes.getConfig(room.t).allowRoomSettingChange(room, RoomSettingsEnum.E2E)) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Only groups or direct channels can enable encryption', {\n\t\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\t\taction: 'Change_Room_Encrypted',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (room.t !== 'd' && !hasPermission(userId, 'toggle-room-e2e-encryption', rid)) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'You do not have permission to toggle E2E encryption', {\n\t\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\t\taction: 'Change_Room_Encrypted',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tretentionEnabled({ userId, value, room, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.enabled) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n\tretentionMaxAge({ userId, value, room, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.maxAge) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n\tretentionExcludePinned({ userId, value, room, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.excludePinned) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n\tretentionFilesOnly({ userId, value, room, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.filesOnly) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n\tretentionIgnoreThreads({ userId, value, room, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-retention-policy', rid) && value !== room.retention.ignoreThreads) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room retention policy is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n\troomAvatar({ userId, rid }) {\n\t\tif (!hasPermission(userId, 'edit-room-avatar', rid)) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing a room avatar is not allowed', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\t},\n};\n\nconst settingSavers = {\n\troomName({ value, rid, user, room }) {\n\t\tif (!Promise.await(saveRoomName(rid, value, user))) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room.teamId && room.teamMain) {\n\t\t\tTeam.update(user._id, room.teamId, { name: value, updateRoom: false });\n\t\t}\n\t},\n\troomTopic({ value, room, rid, user }) {\n\t\tif (value !== room.topic) {\n\t\t\tsaveRoomTopic(rid, value, user);\n\t\t}\n\t},\n\troomAnnouncement({ value, room, rid, user }) {\n\t\tif (value !== room.announcement) {\n\t\t\tsaveRoomAnnouncement(rid, value, user);\n\t\t}\n\t},\n\troomCustomFields({ value, room, rid }) {\n\t\tif (value !== room.customFields) {\n\t\t\tsaveRoomCustomFields(rid, value);\n\t\t}\n\t},\n\troomDescription({ value, room, rid, user }) {\n\t\tif (value !== room.description) {\n\t\t\tsaveRoomDescription(rid, value, user);\n\t\t}\n\t},\n\troomType({ value, room, rid, user }) {\n\t\tif (value === room.t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!saveRoomType(rid, value, user)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room.teamId && room.teamMain) {\n\t\t\tconst type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n\t\t\tTeam.update(user._id, room.teamId, { type, updateRoom: false });\n\t\t}\n\t},\n\ttokenpass({ value, rid }) {\n\t\tcheck(value, {\n\t\t\trequire: String,\n\t\t\ttokens: [\n\t\t\t\t{\n\t\t\t\t\ttoken: String,\n\t\t\t\t\tbalance: String,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t\tsaveRoomTokenpass(rid, value);\n\t},\n\tstreamingOptions({ value, rid }) {\n\t\tsaveStreamingOptions(rid, value);\n\t},\n\treadOnly({ value, room, rid, user }) {\n\t\tif (value !== room.ro) {\n\t\t\tsaveRoomReadOnly(rid, value, user);\n\t\t}\n\t},\n\treactWhenReadOnly({ value, room, rid, user }) {\n\t\tif (value !== room.reactWhenReadOnly) {\n\t\t\tsaveReactWhenReadOnly(rid, value, user);\n\t\t}\n\t},\n\tsystemMessages({ value, room, rid, user }) {\n\t\tif (JSON.stringify(value) !== JSON.stringify(room.sysMes)) {\n\t\t\tsaveRoomSystemMessages(rid, value, user);\n\t\t}\n\t},\n\tjoinCode({ value, rid }) {\n\t\tRooms.setJoinCodeById(rid, String(value));\n\t},\n\tdefault({ value, rid }) {\n\t\tRooms.saveDefaultById(rid, value);\n\t},\n\tfeatured({ value, rid }) {\n\t\tRooms.saveFeaturedById(rid, value);\n\t},\n\tretentionEnabled({ value, rid }) {\n\t\tRooms.saveRetentionEnabledById(rid, value);\n\t},\n\tretentionMaxAge({ value, rid }) {\n\t\tRooms.saveRetentionMaxAgeById(rid, value);\n\t},\n\tretentionExcludePinned({ value, rid }) {\n\t\tRooms.saveRetentionExcludePinnedById(rid, value);\n\t},\n\tretentionFilesOnly({ value, rid }) {\n\t\tRooms.saveRetentionFilesOnlyById(rid, value);\n\t},\n\tretentionIgnoreThreads({ value, rid }) {\n\t\tRooms.saveRetentionIgnoreThreadsById(rid, value);\n\t},\n\tretentionOverrideGlobal({ value, rid }) {\n\t\tRooms.saveRetentionOverrideGlobalById(rid, value);\n\t},\n\tencrypted({ value, room, rid, user }) {\n\t\tsaveRoomEncrypted(rid, value, user, Boolean(room.encrypted) !== Boolean(value));\n\t},\n\tfavorite({ value, rid }) {\n\t\tRooms.saveFavoriteById(rid, value.favorite, value.defaultValue);\n\t},\n\tasync roomAvatar({ value, rid, user }) {\n\t\tawait setRoomAvatar(rid, value, user);\n\t},\n};\n\nMeteor.methods({\n\tasync saveRoomSettings(rid, settings, value) {\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tfunction: 'RocketChat.saveRoomName',\n\t\t\t});\n\t\t}\n\t\tif (!Match.test(rid, String)) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (typeof settings !== 'object') {\n\t\t\tsettings = {\n\t\t\t\t[settings]: value,\n\t\t\t};\n\t\t}\n\n\t\tif (!Object.keys(settings).every((key) => fields.includes(key))) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings provided', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst room = Rooms.findOneById(rid);\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (!hasPermission(userId, 'edit-room', rid)) {\n\t\t\tif (!(Object.keys(settings).includes('encrypted') && room.t === 'd')) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing room is not allowed', {\n\t\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\t\taction: 'Editing_room',\n\t\t\t\t});\n\t\t\t}\n\t\t\tsettings = { encrypted: settings.encrypted };\n\t\t}\n\n\t\tif (room.broadcast && (settings.readOnly || settings.reactWhenReadOnly)) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing readOnly/reactWhenReadOnly are not allowed for broadcast rooms', {\n\t\t\t\tmethod: 'saveRoomSettings',\n\t\t\t\taction: 'Editing_room',\n\t\t\t});\n\t\t}\n\n\t\tconst user = Meteor.user();\n\n\t\t// validations\n\t\tObject.keys(settings).forEach((setting) => {\n\t\t\tconst value = settings[setting];\n\n\t\t\tconst validator = validators[setting];\n\t\t\tif (validator) {\n\t\t\t\tvalidator({\n\t\t\t\t\tuserId,\n\t\t\t\t\tvalue,\n\t\t\t\t\troom,\n\t\t\t\t\trid,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (setting === 'retentionOverrideGlobal') {\n\t\t\t\tdelete settings.retentionMaxAge;\n\t\t\t\tdelete settings.retentionExcludePinned;\n\t\t\t\tdelete settings.retentionFilesOnly;\n\t\t\t\tdelete settings.retentionIgnoreThreads;\n\t\t\t}\n\t\t});\n\n\t\t// saving data\n\t\tfor await (const setting of Object.keys(settings)) {\n\t\t\tconst value = settings[setting];\n\n\t\t\tconst saver = await settingSavers[setting];\n\t\t\tif (saver) {\n\t\t\t\tsaver({\n\t\t\t\t\tvalue,\n\t\t\t\t\troom,\n\t\t\t\t\trid,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tMeteor.defer(function () {\n\t\t\tconst room = Rooms.findOneById(rid);\n\t\t\tcallbacks.run('afterSaveRoomSettings', room);\n\t\t});\n\n\t\treturn {\n\t\t\tresult: true,\n\t\t\trid: room._id,\n\t\t};\n\t},\n});\n"]},"sourceType":"module","hash":"36a7335909b72e092bb6ac8967578d6ac4c682f9"}
