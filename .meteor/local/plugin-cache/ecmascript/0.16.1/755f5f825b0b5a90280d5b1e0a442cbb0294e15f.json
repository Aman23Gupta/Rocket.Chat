{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/googleTranslate.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/googleTranslate.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/googleTranslate.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/googleTranslate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/googleTranslate.js"}},"code":"let TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet AutoTranslate, TranslationProviderRegistry;\nmodule.link(\"./autotranslate\", {\n  AutoTranslate(v) {\n    AutoTranslate = v;\n  },\n\n  TranslationProviderRegistry(v) {\n    TranslationProviderRegistry = v;\n  }\n\n}, 3);\nlet SystemLogger;\nmodule.link(\"../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\n\n/**\n * Represents google translate class\n * @class\n * @augments AutoTranslate\n */\nclass GoogleAutoTranslate extends AutoTranslate {\n  /**\n   * setup api reference to Google translate to be used as message translation provider.\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.name = 'google-translate';\n    this.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2'; // Get the service provide API key.\n\n    settings.watch('AutoTranslate_GoogleAPIKey', value => {\n      this.apiKey = value;\n    });\n  }\n  /**\n   * Returns metadata information about the service provider\n   * @private implements super abstract method.\n   * @returns {object}\n   */\n\n\n  _getProviderMetadata() {\n    return {\n      name: this.name,\n      displayName: TAPi18n.__('AutoTranslate_Google'),\n      settings: this._getSettings()\n    };\n  }\n  /**\n   * Returns necessary settings information about the translation service provider.\n   * @private implements super abstract method.\n   * @returns {object}\n   */\n\n\n  _getSettings() {\n    return {\n      apiKey: this.apiKey,\n      apiEndPointUrl: this.apiEndPointUrl\n    };\n  }\n  /**\n   * Returns supported languages for translation by the active service provider.\n   * Google Translate api provides the list of supported languages.\n   * @private implements super abstract method.\n   * @param {string} target : user language setting or 'en'\n   * @returns {object} code : value pair\n   */\n\n\n  getSupportedLanguages(target) {\n    var _result, _result$data, _result$data$data;\n\n    if (!this.apiKey) {\n      return [];\n    }\n\n    if (this.supportedLanguages[target]) {\n      return this.supportedLanguages[target];\n    }\n\n    let result;\n    const params = {\n      key: this.apiKey\n    };\n\n    if (target) {\n      params.target = target;\n    }\n\n    try {\n      result = HTTP.get('https://translation.googleapis.com/language/translate/v2/languages', {\n        params\n      });\n    } catch (e) {\n      // Fallback: Get the English names of the target languages\n      if (e.response && e.response.statusCode === 400 && e.response.data && e.response.data.error && e.response.data.error.status === 'INVALID_ARGUMENT') {\n        params.target = 'en';\n        target = 'en';\n\n        if (!this.supportedLanguages[target]) {\n          result = HTTP.get('https://translation.googleapis.com/language/translate/v2/languages', {\n            params\n          });\n        }\n      }\n    }\n\n    if (this.supportedLanguages[target]) {\n      return this.supportedLanguages[target];\n    }\n\n    this.supportedLanguages[target || 'en'] = (_result = result) === null || _result === void 0 ? void 0 : (_result$data = _result.data) === null || _result$data === void 0 ? void 0 : (_result$data$data = _result$data.data) === null || _result$data$data === void 0 ? void 0 : _result$data$data.languages;\n    return this.supportedLanguages[target || 'en'];\n  }\n  /**\n   * Send Request REST API call to the service provider.\n   * Returns translated message for each target language in target languages.\n   * @private\n   * @param {object} message\n   * @param {object} targetLanguages\n   * @returns {object} translations: Translated messages for each language\n   */\n\n\n  _translateMessage(message, targetLanguages) {\n    const translations = {};\n    let msgs = message.msg.split('\\n');\n    msgs = msgs.map(msg => encodeURIComponent(msg));\n    const query = \"q=\".concat(msgs.join('&q='));\n    const supportedLanguages = this.getSupportedLanguages('en');\n    targetLanguages.forEach(language => {\n      if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n        language\n      })) {\n        language = language.substr(0, 2);\n      }\n\n      try {\n        const result = HTTP.get(this.apiEndPointUrl, {\n          params: {\n            key: this.apiKey,\n            target: language\n          },\n          query\n        });\n\n        if (result.statusCode === 200 && result.data && result.data.data && result.data.data.translations && Array.isArray(result.data.data.translations) && result.data.data.translations.length > 0) {\n          const txt = result.data.data.translations.map(translation => translation.translatedText).join('\\n');\n          translations[language] = this.deTokenize(Object.assign({}, message, {\n            msg: txt\n          }));\n        }\n      } catch (e) {\n        SystemLogger.error('Error translating message', e);\n      }\n    });\n    return translations;\n  }\n  /**\n   * Returns translated message attachment description in target languages.\n   * @private\n   * @param {object} attachment\n   * @param {object} targetLanguages\n   * @returns {object} translated attachment descriptions for each target language\n   */\n\n\n  _translateAttachmentDescriptions(attachment, targetLanguages) {\n    const translations = {};\n    const query = \"q=\".concat(encodeURIComponent(attachment.description || attachment.text));\n    const supportedLanguages = this.getSupportedLanguages('en');\n    targetLanguages.forEach(language => {\n      if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n        language\n      })) {\n        language = language.substr(0, 2);\n      }\n\n      try {\n        const result = HTTP.get(this.apiEndPointUrl, {\n          params: {\n            key: this.apiKey,\n            target: language\n          },\n          query\n        });\n\n        if (result.statusCode === 200 && result.data && result.data.data && result.data.data.translations && Array.isArray(result.data.data.translations) && result.data.data.translations.length > 0) {\n          translations[language] = result.data.data.translations.map(translation => translation.translatedText).join('\\n');\n        }\n      } catch (e) {\n        SystemLogger.error('Error translating message', e);\n      }\n    });\n    return translations;\n  }\n\n} // Register Google translation provider.\n\n\nTranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());","map":{"version":3,"sources":["app/autotranslate/server/googleTranslate.js"],"names":["TAPi18n","module","link","v","HTTP","_","default","AutoTranslate","TranslationProviderRegistry","SystemLogger","settings","GoogleAutoTranslate","constructor","name","apiEndPointUrl","watch","value","apiKey","_getProviderMetadata","displayName","__","_getSettings","getSupportedLanguages","target","supportedLanguages","result","params","key","get","e","response","statusCode","data","error","status","languages","_translateMessage","message","targetLanguages","translations","msgs","msg","split","map","encodeURIComponent","query","join","forEach","language","indexOf","findWhere","substr","Array","isArray","length","txt","translation","translatedText","deTokenize","Object","assign","_translateAttachmentDescriptions","attachment","description","text","registerProvider"],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { HTTP } from 'meteor/http';\nimport _ from 'underscore';\n\nimport { AutoTranslate, TranslationProviderRegistry } from './autotranslate';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\n\n/**\n * Represents google translate class\n * @class\n * @augments AutoTranslate\n */\n\nclass GoogleAutoTranslate extends AutoTranslate {\n\t/**\n\t * setup api reference to Google translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'google-translate';\n\t\tthis.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2';\n\t\t// Get the service provide API key.\n\t\tsettings.watch('AutoTranslate_GoogleAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getProviderMetadata() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: TAPi18n.__('AutoTranslate_Google'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getSettings() {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Google Translate api provides the list of supported languages.\n\t * @private implements super abstract method.\n\t * @param {string} target : user language setting or 'en'\n\t * @returns {object} code : value pair\n\t */\n\tgetSupportedLanguages(target) {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\n\t\tlet result;\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t};\n\n\t\tif (target) {\n\t\t\tparams.target = target;\n\t\t}\n\n\t\ttry {\n\t\t\tresult = HTTP.get('https://translation.googleapis.com/language/translate/v2/languages', {\n\t\t\t\tparams,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\t// Fallback: Get the English names of the target languages\n\t\t\tif (\n\t\t\t\te.response &&\n\t\t\t\te.response.statusCode === 400 &&\n\t\t\t\te.response.data &&\n\t\t\t\te.response.data.error &&\n\t\t\t\te.response.data.error.status === 'INVALID_ARGUMENT'\n\t\t\t) {\n\t\t\t\tparams.target = 'en';\n\t\t\t\ttarget = 'en';\n\t\t\t\tif (!this.supportedLanguages[target]) {\n\t\t\t\t\tresult = HTTP.get('https://translation.googleapis.com/language/translate/v2/languages', {\n\t\t\t\t\t\tparams,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target || 'en'] = result?.data?.data?.languages;\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\t_translateMessage(message, targetLanguages) {\n\t\tconst translations = {};\n\t\tlet msgs = message.msg.split('\\n');\n\t\tmsgs = msgs.map((msg) => encodeURIComponent(msg));\n\n\t\tconst query = `q=${msgs.join('&q=')}`;\n\t\tconst supportedLanguages = this.getSupportedLanguages('en');\n\n\t\ttargetLanguages.forEach((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = HTTP.get(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t},\n\t\t\t\t\tquery,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\tresult.statusCode === 200 &&\n\t\t\t\t\tresult.data &&\n\t\t\t\t\tresult.data.data &&\n\t\t\t\t\tresult.data.data.translations &&\n\t\t\t\t\tArray.isArray(result.data.data.translations) &&\n\t\t\t\t\tresult.data.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = result.data.data.translations.map((translation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error translating message', e);\n\t\t\t}\n\t\t});\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated attachment descriptions for each target language\n\t */\n\t_translateAttachmentDescriptions(attachment, targetLanguages) {\n\t\tconst translations = {};\n\t\tconst query = `q=${encodeURIComponent(attachment.description || attachment.text)}`;\n\t\tconst supportedLanguages = this.getSupportedLanguages('en');\n\n\t\ttargetLanguages.forEach((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = HTTP.get(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t},\n\t\t\t\t\tquery,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\tresult.statusCode === 200 &&\n\t\t\t\t\tresult.data &&\n\t\t\t\t\tresult.data.data &&\n\t\t\t\t\tresult.data.data.translations &&\n\t\t\t\t\tArray.isArray(result.data.data.translations) &&\n\t\t\t\t\tresult.data.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = result.data.data.translations.map((translation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error translating message', e);\n\t\t\t}\n\t\t});\n\t\treturn translations;\n\t}\n}\n\n// Register Google translation provider.\nTranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());\n"]},"sourceType":"module","hash":"755f5f825b0b5a90280d5b1e0a442cbb0294e15f"}
