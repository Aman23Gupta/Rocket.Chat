{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/statistics.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/statistics/server/lib/statistics.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/statistics.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/statistics/server/lib/statistics.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/statistics/server/lib/statistics.js"}},"code":"module.export({\n  statistics: () => statistics\n});\nlet os;\nmodule.link(\"os\", {\n  default(v) {\n    os = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet InstanceStatus;\nmodule.link(\"meteor/konecty:multiple-instances-status\", {\n  InstanceStatus(v) {\n    InstanceStatus = v;\n  }\n\n}, 3);\nlet MongoInternals;\nmodule.link(\"meteor/mongo\", {\n  MongoInternals(v) {\n    MongoInternals = v;\n  }\n\n}, 4);\nlet Settings, Users, Rooms, Subscriptions, Messages, LivechatVisitors;\nmodule.link(\"../../../models/server\", {\n  Settings(v) {\n    Settings = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nlet Info, getMongoInfo;\nmodule.link(\"../../../utils/server\", {\n  Info(v) {\n    Info = v;\n  },\n\n  getMongoInfo(v) {\n    getMongoInfo = v;\n  }\n\n}, 7);\nlet getControl;\nmodule.link(\"../../../../server/lib/migrations\", {\n  getControl(v) {\n    getControl = v;\n  }\n\n}, 8);\nlet federationGetStatistics;\nmodule.link(\"../../../federation/server/functions/dashboard\", {\n  getStatistics(v) {\n    federationGetStatistics = v;\n  }\n\n}, 9);\nlet NotificationQueue, UsersRaw, RoomsRaw, Statistics, Sessions, Integrations, Uploads;\nmodule.link(\"../../../models/server/raw\", {\n  NotificationQueue(v) {\n    NotificationQueue = v;\n  },\n\n  Users(v) {\n    UsersRaw = v;\n  },\n\n  Rooms(v) {\n    RoomsRaw = v;\n  },\n\n  Statistics(v) {\n    Statistics = v;\n  },\n\n  Sessions(v) {\n    Sessions = v;\n  },\n\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Uploads(v) {\n    Uploads = v;\n  }\n\n}, 10);\nlet readSecondaryPreferred;\nmodule.link(\"../../../../server/database/readSecondaryPreferred\", {\n  readSecondaryPreferred(v) {\n    readSecondaryPreferred = v;\n  }\n\n}, 11);\nlet getAppsStatistics;\nmodule.link(\"./getAppsStatistics\", {\n  getAppsStatistics(v) {\n    getAppsStatistics = v;\n  }\n\n}, 12);\nlet getServicesStatistics;\nmodule.link(\"./getServicesStatistics\", {\n  getServicesStatistics(v) {\n    getServicesStatistics = v;\n  }\n\n}, 13);\nlet getEnterpriseStatistics;\nmodule.link(\"../../../../ee/app/license/server\", {\n  getStatistics(v) {\n    getEnterpriseStatistics = v;\n  }\n\n}, 14);\nlet Team, Analytics;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  },\n\n  Analytics(v) {\n    Analytics = v;\n  }\n\n}, 15);\nlet getSettingsStatistics;\nmodule.link(\"../../../../server/lib/statistics/getSettingsStatistics\", {\n  getSettingsStatistics(v) {\n    getSettingsStatistics = v;\n  }\n\n}, 16);\nconst wizardFields = ['Organization_Type', 'Industry', 'Size', 'Country', 'Language', 'Server_Type', 'Register_Server'];\n\nconst getUserLanguages = totalUsers => Promise.asyncApply(() => {\n  const result = Promise.await(UsersRaw.getUserLanguages());\n  const languages = {\n    none: totalUsers\n  };\n  result.forEach(_ref => {\n    let {\n      _id,\n      total\n    } = _ref;\n\n    if (!_id) {\n      return;\n    }\n\n    languages[_id] = total;\n    languages.none -= total;\n  });\n  return languages;\n});\n\nconst {\n  db\n} = MongoInternals.defaultRemoteCollectionDriver().mongo;\nconst statistics = {\n  get: () => Promise.asyncApply(() => {\n    const readPreference = readSecondaryPreferred(db);\n    const statistics = {}; // Setup Wizard\n\n    statistics.wizard = {};\n    wizardFields.forEach(field => {\n      const record = Settings.findOne(field);\n\n      if (record) {\n        const wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n        statistics.wizard[wizardField] = record.value;\n      }\n    }); // Version\n\n    statistics.uniqueId = settings.get('uniqueID');\n\n    if (Settings.findOne('uniqueID')) {\n      statistics.installedAt = Settings.findOne('uniqueID').createdAt;\n    }\n\n    if (Info) {\n      statistics.version = Info.version;\n      statistics.tag = Info.tag;\n      statistics.branch = Info.branch;\n    } // User statistics\n\n\n    statistics.totalUsers = Users.find().count();\n    statistics.activeUsers = Users.getActiveLocalUserCount();\n    statistics.activeGuests = Users.getActiveLocalGuestCount();\n    statistics.nonActiveUsers = Users.find({\n      active: false\n    }).count();\n    statistics.appUsers = Users.find({\n      type: 'app'\n    }).count();\n    statistics.onlineUsers = Meteor.users.find({\n      status: 'online'\n    }).count();\n    statistics.awayUsers = Meteor.users.find({\n      status: 'away'\n    }).count();\n    statistics.busyUsers = Meteor.users.find({\n      status: 'busy'\n    }).count();\n    statistics.totalConnectedUsers = statistics.onlineUsers + statistics.awayUsers;\n    statistics.offlineUsers = statistics.totalUsers - statistics.onlineUsers - statistics.awayUsers - statistics.busyUsers;\n    statistics.userLanguages = Promise.await(getUserLanguages(statistics.totalUsers)); // Room statistics\n\n    statistics.totalRooms = Rooms.find().count();\n    statistics.totalChannels = Rooms.findByType('c').count();\n    statistics.totalPrivateGroups = Rooms.findByType('p').count();\n    statistics.totalDirect = Rooms.findByType('d').count();\n    statistics.totalLivechat = Rooms.findByType('l').count();\n    statistics.totalDiscussions = Rooms.countDiscussions();\n    statistics.totalThreads = Messages.countThreads(); // Teams statistics\n\n    statistics.teams = Promise.await(Team.getStatistics()); // livechat visitors\n\n    statistics.totalLivechatVisitors = LivechatVisitors.find().count(); // livechat agents\n\n    statistics.totalLivechatAgents = Users.findAgents().count(); // livechat enabled\n\n    statistics.livechatEnabled = settings.get('Livechat_enabled'); // Count and types of omnichannel rooms\n\n    statistics.omnichannelSources = Promise.await(RoomsRaw.allRoomSourcesCount().toArray()).map(_ref2 => {\n      let {\n        _id: {\n          id,\n          alias,\n          type\n        },\n        count\n      } = _ref2;\n      return {\n        id,\n        alias,\n        type,\n        count\n      };\n    }); // Message statistics\n\n    statistics.totalChannelMessages = _.reduce(Rooms.findByType('c', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countChannelMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalPrivateGroupMessages = _.reduce(Rooms.findByType('p', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countPrivateGroupMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalDirectMessages = _.reduce(Rooms.findByType('d', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countDirectMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalLivechatMessages = _.reduce(Rooms.findByType('l', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countLivechatMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalMessages = statistics.totalChannelMessages + statistics.totalPrivateGroupMessages + statistics.totalDirectMessages + statistics.totalLivechatMessages; // Federation statistics\n\n    const federationOverviewData = federationGetStatistics();\n    statistics.federatedServers = federationOverviewData.numberOfServers;\n    statistics.federatedUsers = federationOverviewData.numberOfFederatedUsers;\n    statistics.lastLogin = Users.getLastLogin();\n    statistics.lastMessageSentAt = Messages.getLastTimestamp();\n    statistics.lastSeenSubscription = Subscriptions.getLastSeen();\n    statistics.os = {\n      type: os.type(),\n      platform: os.platform(),\n      arch: os.arch(),\n      release: os.release(),\n      uptime: os.uptime(),\n      loadavg: os.loadavg(),\n      totalmem: os.totalmem(),\n      freemem: os.freemem(),\n      cpus: os.cpus()\n    };\n    statistics.process = {\n      nodeVersion: process.version,\n      pid: process.pid,\n      uptime: process.uptime()\n    };\n    statistics.deploy = {\n      method: process.env.DEPLOY_METHOD || 'tar',\n      platform: process.env.DEPLOY_PLATFORM || 'selfinstall'\n    };\n    statistics.readReceiptsEnabled = settings.get('Message_Read_Receipt_Enabled');\n    statistics.readReceiptsDetailed = settings.get('Message_Read_Receipt_Store_Users');\n    statistics.enterpriseReady = true;\n    statistics.uploadsTotal = Promise.await(Uploads.find().count());\n    const [result] = Promise.await(Uploads.col.aggregate([{\n      $group: {\n        _id: 'total',\n        total: {\n          $sum: '$size'\n        }\n      }\n    }], {\n      readPreference\n    }).toArray());\n    statistics.uploadsTotalSize = result ? result.total : 0;\n    statistics.migration = getControl();\n    statistics.instanceCount = InstanceStatus.getCollection().find({\n      _updatedAt: {\n        $gt: new Date(Date.now() - process.uptime() * 1000 - 2000)\n      }\n    }).count();\n    const {\n      oplogEnabled,\n      mongoVersion,\n      mongoStorageEngine\n    } = getMongoInfo();\n    statistics.oplogEnabled = oplogEnabled;\n    statistics.mongoVersion = mongoVersion;\n    statistics.mongoStorageEngine = mongoStorageEngine;\n    statistics.uniqueUsersOfYesterday = Promise.await(Sessions.getUniqueUsersOfYesterday());\n    statistics.uniqueUsersOfLastWeek = Promise.await(Sessions.getUniqueUsersOfLastWeek());\n    statistics.uniqueUsersOfLastMonth = Promise.await(Sessions.getUniqueUsersOfLastMonth());\n    statistics.uniqueDevicesOfYesterday = Promise.await(Sessions.getUniqueDevicesOfYesterday());\n    statistics.uniqueDevicesOfLastWeek = Promise.await(Sessions.getUniqueDevicesOfLastWeek());\n    statistics.uniqueDevicesOfLastMonth = Promise.await(Sessions.getUniqueDevicesOfLastMonth());\n    statistics.uniqueOSOfYesterday = Promise.await(Sessions.getUniqueOSOfYesterday());\n    statistics.uniqueOSOfLastWeek = Promise.await(Sessions.getUniqueOSOfLastWeek());\n    statistics.uniqueOSOfLastMonth = Promise.await(Sessions.getUniqueOSOfLastMonth());\n    statistics.apps = getAppsStatistics();\n    statistics.services = getServicesStatistics(); // If getSettingsStatistics() returns an error, save as empty object.\n\n    const settingsStatisticsObject = Promise.await(getSettingsStatistics()) || {};\n    statistics.settings = settingsStatisticsObject;\n    const integrations = Promise.await(Integrations.find({}, {\n      projection: {\n        _id: 0,\n        type: 1,\n        enabled: 1,\n        scriptEnabled: 1\n      },\n      readPreference\n    }).toArray());\n    statistics.integrations = {\n      totalIntegrations: integrations.length,\n      totalIncoming: integrations.filter(integration => integration.type === 'webhook-incoming').length,\n      totalIncomingActive: integrations.filter(integration => integration.enabled === true && integration.type === 'webhook-incoming').length,\n      totalOutgoing: integrations.filter(integration => integration.type === 'webhook-outgoing').length,\n      totalOutgoingActive: integrations.filter(integration => integration.enabled === true && integration.type === 'webhook-outgoing').length,\n      totalWithScriptEnabled: integrations.filter(integration => integration.scriptEnabled === true).length\n    };\n    statistics.pushQueue = Promise.await(NotificationQueue.col.estimatedDocumentCount());\n    statistics.enterprise = getEnterpriseStatistics();\n    Promise.await(Analytics.resetSeatRequestCount());\n    return statistics;\n  }),\n\n  save() {\n    return Promise.asyncApply(() => {\n      const rcStatistics = Promise.await(statistics.get());\n      rcStatistics.createdAt = new Date();\n      Promise.await(Statistics.insertOne(rcStatistics));\n      return rcStatistics;\n    });\n  }\n\n};","map":{"version":3,"sources":["app/statistics/server/lib/statistics.js"],"names":["module","export","statistics","os","link","default","v","_","Meteor","InstanceStatus","MongoInternals","Settings","Users","Rooms","Subscriptions","Messages","LivechatVisitors","settings","Info","getMongoInfo","getControl","federationGetStatistics","getStatistics","NotificationQueue","UsersRaw","RoomsRaw","Statistics","Sessions","Integrations","Uploads","readSecondaryPreferred","getAppsStatistics","getServicesStatistics","getEnterpriseStatistics","Team","Analytics","getSettingsStatistics","wizardFields","getUserLanguages","totalUsers","result","languages","none","forEach","_id","total","db","defaultRemoteCollectionDriver","mongo","get","readPreference","wizard","field","record","findOne","wizardField","replace","toLowerCase","value","uniqueId","installedAt","createdAt","version","tag","branch","find","count","activeUsers","getActiveLocalUserCount","activeGuests","getActiveLocalGuestCount","nonActiveUsers","active","appUsers","type","onlineUsers","users","status","awayUsers","busyUsers","totalConnectedUsers","offlineUsers","userLanguages","totalRooms","totalChannels","findByType","totalPrivateGroups","totalDirect","totalLivechat","totalDiscussions","countDiscussions","totalThreads","countThreads","teams","totalLivechatVisitors","totalLivechatAgents","findAgents","livechatEnabled","omnichannelSources","allRoomSourcesCount","toArray","map","id","alias","totalChannelMessages","reduce","fields","msgs","fetch","_countChannelMessages","num","room","totalPrivateGroupMessages","_countPrivateGroupMessages","totalDirectMessages","_countDirectMessages","totalLivechatMessages","_countLivechatMessages","totalMessages","federationOverviewData","federatedServers","numberOfServers","federatedUsers","numberOfFederatedUsers","lastLogin","getLastLogin","lastMessageSentAt","getLastTimestamp","lastSeenSubscription","getLastSeen","platform","arch","release","uptime","loadavg","totalmem","freemem","cpus","process","nodeVersion","pid","deploy","method","env","DEPLOY_METHOD","DEPLOY_PLATFORM","readReceiptsEnabled","readReceiptsDetailed","enterpriseReady","uploadsTotal","col","aggregate","$group","$sum","uploadsTotalSize","migration","instanceCount","getCollection","_updatedAt","$gt","Date","now","oplogEnabled","mongoVersion","mongoStorageEngine","uniqueUsersOfYesterday","getUniqueUsersOfYesterday","uniqueUsersOfLastWeek","getUniqueUsersOfLastWeek","uniqueUsersOfLastMonth","getUniqueUsersOfLastMonth","uniqueDevicesOfYesterday","getUniqueDevicesOfYesterday","uniqueDevicesOfLastWeek","getUniqueDevicesOfLastWeek","uniqueDevicesOfLastMonth","getUniqueDevicesOfLastMonth","uniqueOSOfYesterday","getUniqueOSOfYesterday","uniqueOSOfLastWeek","getUniqueOSOfLastWeek","uniqueOSOfLastMonth","getUniqueOSOfLastMonth","apps","services","settingsStatisticsObject","integrations","projection","enabled","scriptEnabled","totalIntegrations","length","totalIncoming","filter","integration","totalIncomingActive","totalOutgoing","totalOutgoingActive","totalWithScriptEnabled","pushQueue","estimatedDocumentCount","enterprise","resetSeatRequestCount","save","rcStatistics","insertOne"],"mappings":"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","sourcesContent":["import os from 'os';\n\nimport _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { InstanceStatus } from 'meteor/konecty:multiple-instances-status';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { Settings, Users, Rooms, Subscriptions, Messages, LivechatVisitors } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { Info, getMongoInfo } from '../../../utils/server';\nimport { getControl } from '../../../../server/lib/migrations';\nimport { getStatistics as federationGetStatistics } from '../../../federation/server/functions/dashboard';\nimport {\n\tNotificationQueue,\n\tUsers as UsersRaw,\n\tRooms as RoomsRaw,\n\tStatistics,\n\tSessions,\n\tIntegrations,\n\tUploads,\n} from '../../../models/server/raw';\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { getAppsStatistics } from './getAppsStatistics';\nimport { getServicesStatistics } from './getServicesStatistics';\nimport { getStatistics as getEnterpriseStatistics } from '../../../../ee/app/license/server';\nimport { Team, Analytics } from '../../../../server/sdk';\nimport { getSettingsStatistics } from '../../../../server/lib/statistics/getSettingsStatistics';\n\nconst wizardFields = ['Organization_Type', 'Industry', 'Size', 'Country', 'Language', 'Server_Type', 'Register_Server'];\n\nconst getUserLanguages = async (totalUsers) => {\n\tconst result = await UsersRaw.getUserLanguages();\n\n\tconst languages = {\n\t\tnone: totalUsers,\n\t};\n\n\tresult.forEach(({ _id, total }) => {\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\t\tlanguages[_id] = total;\n\t\tlanguages.none -= total;\n\t});\n\n\treturn languages;\n};\n\nconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;\n\nexport const statistics = {\n\tget: async () => {\n\t\tconst readPreference = readSecondaryPreferred(db);\n\n\t\tconst statistics = {};\n\n\t\t// Setup Wizard\n\t\tstatistics.wizard = {};\n\t\twizardFields.forEach((field) => {\n\t\t\tconst record = Settings.findOne(field);\n\t\t\tif (record) {\n\t\t\t\tconst wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n\t\t\t\tstatistics.wizard[wizardField] = record.value;\n\t\t\t}\n\t\t});\n\n\t\t// Version\n\t\tstatistics.uniqueId = settings.get('uniqueID');\n\t\tif (Settings.findOne('uniqueID')) {\n\t\t\tstatistics.installedAt = Settings.findOne('uniqueID').createdAt;\n\t\t}\n\n\t\tif (Info) {\n\t\t\tstatistics.version = Info.version;\n\t\t\tstatistics.tag = Info.tag;\n\t\t\tstatistics.branch = Info.branch;\n\t\t}\n\n\t\t// User statistics\n\t\tstatistics.totalUsers = Users.find().count();\n\t\tstatistics.activeUsers = Users.getActiveLocalUserCount();\n\t\tstatistics.activeGuests = Users.getActiveLocalGuestCount();\n\t\tstatistics.nonActiveUsers = Users.find({ active: false }).count();\n\t\tstatistics.appUsers = Users.find({ type: 'app' }).count();\n\t\tstatistics.onlineUsers = Meteor.users.find({ status: 'online' }).count();\n\t\tstatistics.awayUsers = Meteor.users.find({ status: 'away' }).count();\n\t\tstatistics.busyUsers = Meteor.users.find({ status: 'busy' }).count();\n\t\tstatistics.totalConnectedUsers = statistics.onlineUsers + statistics.awayUsers;\n\t\tstatistics.offlineUsers = statistics.totalUsers - statistics.onlineUsers - statistics.awayUsers - statistics.busyUsers;\n\t\tstatistics.userLanguages = await getUserLanguages(statistics.totalUsers);\n\n\t\t// Room statistics\n\t\tstatistics.totalRooms = Rooms.find().count();\n\t\tstatistics.totalChannels = Rooms.findByType('c').count();\n\t\tstatistics.totalPrivateGroups = Rooms.findByType('p').count();\n\t\tstatistics.totalDirect = Rooms.findByType('d').count();\n\t\tstatistics.totalLivechat = Rooms.findByType('l').count();\n\t\tstatistics.totalDiscussions = Rooms.countDiscussions();\n\t\tstatistics.totalThreads = Messages.countThreads();\n\n\t\t// Teams statistics\n\t\tstatistics.teams = await Team.getStatistics();\n\n\t\t// livechat visitors\n\t\tstatistics.totalLivechatVisitors = LivechatVisitors.find().count();\n\n\t\t// livechat agents\n\t\tstatistics.totalLivechatAgents = Users.findAgents().count();\n\n\t\t// livechat enabled\n\t\tstatistics.livechatEnabled = settings.get('Livechat_enabled');\n\n\t\t// Count and types of omnichannel rooms\n\t\tstatistics.omnichannelSources = (await RoomsRaw.allRoomSourcesCount().toArray()).map(({ _id: { id, alias, type }, count }) => ({\n\t\t\tid,\n\t\t\talias,\n\t\t\ttype,\n\t\t\tcount,\n\t\t}));\n\n\t\t// Message statistics\n\t\tstatistics.totalChannelMessages = _.reduce(\n\t\t\tRooms.findByType('c', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countChannelMessages(num, room) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalPrivateGroupMessages = _.reduce(\n\t\t\tRooms.findByType('p', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countPrivateGroupMessages(num, room) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalDirectMessages = _.reduce(\n\t\t\tRooms.findByType('d', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countDirectMessages(num, room) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalLivechatMessages = _.reduce(\n\t\t\tRooms.findByType('l', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countLivechatMessages(num, room) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalMessages =\n\t\t\tstatistics.totalChannelMessages +\n\t\t\tstatistics.totalPrivateGroupMessages +\n\t\t\tstatistics.totalDirectMessages +\n\t\t\tstatistics.totalLivechatMessages;\n\n\t\t// Federation statistics\n\t\tconst federationOverviewData = federationGetStatistics();\n\n\t\tstatistics.federatedServers = federationOverviewData.numberOfServers;\n\t\tstatistics.federatedUsers = federationOverviewData.numberOfFederatedUsers;\n\n\t\tstatistics.lastLogin = Users.getLastLogin();\n\t\tstatistics.lastMessageSentAt = Messages.getLastTimestamp();\n\t\tstatistics.lastSeenSubscription = Subscriptions.getLastSeen();\n\n\t\tstatistics.os = {\n\t\t\ttype: os.type(),\n\t\t\tplatform: os.platform(),\n\t\t\tarch: os.arch(),\n\t\t\trelease: os.release(),\n\t\t\tuptime: os.uptime(),\n\t\t\tloadavg: os.loadavg(),\n\t\t\ttotalmem: os.totalmem(),\n\t\t\tfreemem: os.freemem(),\n\t\t\tcpus: os.cpus(),\n\t\t};\n\n\t\tstatistics.process = {\n\t\t\tnodeVersion: process.version,\n\t\t\tpid: process.pid,\n\t\t\tuptime: process.uptime(),\n\t\t};\n\n\t\tstatistics.deploy = {\n\t\t\tmethod: process.env.DEPLOY_METHOD || 'tar',\n\t\t\tplatform: process.env.DEPLOY_PLATFORM || 'selfinstall',\n\t\t};\n\n\t\tstatistics.readReceiptsEnabled = settings.get('Message_Read_Receipt_Enabled');\n\t\tstatistics.readReceiptsDetailed = settings.get('Message_Read_Receipt_Store_Users');\n\n\t\tstatistics.enterpriseReady = true;\n\n\t\tstatistics.uploadsTotal = await Uploads.find().count();\n\t\tconst [result] = await Uploads.col\n\t\t\t.aggregate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: { _id: 'total', total: { $sum: '$size' } },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ readPreference },\n\t\t\t)\n\t\t\t.toArray();\n\t\tstatistics.uploadsTotalSize = result ? result.total : 0;\n\n\t\tstatistics.migration = getControl();\n\t\tstatistics.instanceCount = InstanceStatus.getCollection()\n\t\t\t.find({ _updatedAt: { $gt: new Date(Date.now() - process.uptime() * 1000 - 2000) } })\n\t\t\t.count();\n\n\t\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = getMongoInfo();\n\t\tstatistics.oplogEnabled = oplogEnabled;\n\t\tstatistics.mongoVersion = mongoVersion;\n\t\tstatistics.mongoStorageEngine = mongoStorageEngine;\n\n\t\tstatistics.uniqueUsersOfYesterday = await Sessions.getUniqueUsersOfYesterday();\n\t\tstatistics.uniqueUsersOfLastWeek = await Sessions.getUniqueUsersOfLastWeek();\n\t\tstatistics.uniqueUsersOfLastMonth = await Sessions.getUniqueUsersOfLastMonth();\n\t\tstatistics.uniqueDevicesOfYesterday = await Sessions.getUniqueDevicesOfYesterday();\n\t\tstatistics.uniqueDevicesOfLastWeek = await Sessions.getUniqueDevicesOfLastWeek();\n\t\tstatistics.uniqueDevicesOfLastMonth = await Sessions.getUniqueDevicesOfLastMonth();\n\t\tstatistics.uniqueOSOfYesterday = await Sessions.getUniqueOSOfYesterday();\n\t\tstatistics.uniqueOSOfLastWeek = await Sessions.getUniqueOSOfLastWeek();\n\t\tstatistics.uniqueOSOfLastMonth = await Sessions.getUniqueOSOfLastMonth();\n\n\t\tstatistics.apps = getAppsStatistics();\n\t\tstatistics.services = getServicesStatistics();\n\n\t\t// If getSettingsStatistics() returns an error, save as empty object.\n\t\tconst settingsStatisticsObject = (await getSettingsStatistics()) || {};\n\t\tstatistics.settings = settingsStatisticsObject;\n\n\t\tconst integrations = await Integrations.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttype: 1,\n\t\t\t\t\tenabled: 1,\n\t\t\t\t\tscriptEnabled: 1,\n\t\t\t\t},\n\t\t\t\treadPreference,\n\t\t\t},\n\t\t).toArray();\n\n\t\tstatistics.integrations = {\n\t\t\ttotalIntegrations: integrations.length,\n\t\t\ttotalIncoming: integrations.filter((integration) => integration.type === 'webhook-incoming').length,\n\t\t\ttotalIncomingActive: integrations.filter((integration) => integration.enabled === true && integration.type === 'webhook-incoming')\n\t\t\t\t.length,\n\t\t\ttotalOutgoing: integrations.filter((integration) => integration.type === 'webhook-outgoing').length,\n\t\t\ttotalOutgoingActive: integrations.filter((integration) => integration.enabled === true && integration.type === 'webhook-outgoing')\n\t\t\t\t.length,\n\t\t\ttotalWithScriptEnabled: integrations.filter((integration) => integration.scriptEnabled === true).length,\n\t\t};\n\n\t\tstatistics.pushQueue = await NotificationQueue.col.estimatedDocumentCount();\n\n\t\tstatistics.enterprise = getEnterpriseStatistics();\n\t\tawait Analytics.resetSeatRequestCount();\n\n\t\treturn statistics;\n\t},\n\tasync save() {\n\t\tconst rcStatistics = await statistics.get();\n\t\trcStatistics.createdAt = new Date();\n\t\tawait Statistics.insertOne(rcStatistics);\n\t\treturn rcStatistics;\n\t},\n};\n"]},"sourceType":"module","hash":"c1519db58c022fe30b88d2c7991dbf0412d42e9a"}
