{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/RocketAdapter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/RocketAdapter.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/RocketAdapter.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/slackbridge/server/RocketAdapter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/RocketAdapter.js"}},"code":"module.export({\n  default: () => RocketAdapter\n});\nlet util;\nmodule.link(\"util\", {\n  default(v) {\n    util = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 3);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet rocketLogger;\nmodule.link(\"./logger\", {\n  rocketLogger(v) {\n    rocketLogger = v;\n  }\n\n}, 5);\nlet callbacks;\nmodule.link(\"../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\nlet Messages, Rooms, Users;\nmodule.link(\"../../models\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 8);\nlet createRoom, sendMessage, setUserAvatar;\nmodule.link(\"../../lib\", {\n  createRoom(v) {\n    createRoom = v;\n  },\n\n  sendMessage(v) {\n    sendMessage = v;\n  },\n\n  setUserAvatar(v) {\n    setUserAvatar = v;\n  }\n\n}, 9);\n\nclass RocketAdapter {\n  constructor(slackBridge) {\n    rocketLogger.debug('constructor');\n    this.slackBridge = slackBridge;\n    this.util = util;\n    this.userTags = {};\n    this.slackAdapters = [];\n  }\n\n  connect() {\n    this.registerForEvents();\n  }\n\n  disconnect() {\n    this.unregisterForEvents();\n  }\n\n  addSlack(slack) {\n    if (this.slackAdapters.indexOf(slack) < 0) {\n      this.slackAdapters.push(slack);\n    }\n  }\n\n  clearSlackAdapters() {\n    this.slackAdapters = [];\n  }\n\n  registerForEvents() {\n    rocketLogger.debug('Register for events');\n    callbacks.add('afterSaveMessage', this.onMessage.bind(this), callbacks.priority.LOW, 'SlackBridge_Out');\n    callbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), callbacks.priority.LOW, 'SlackBridge_Delete');\n    callbacks.add('setReaction', this.onSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_SetReaction');\n    callbacks.add('unsetReaction', this.onUnSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n  }\n\n  unregisterForEvents() {\n    rocketLogger.debug('Unregister for events');\n    callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n    callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n    callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n    callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n  }\n\n  onMessageDelete(rocketMessageDeleted) {\n    this.slackAdapters.forEach(slack => {\n      try {\n        if (!slack.getSlackChannel(rocketMessageDeleted.rid)) {\n          // This is on a channel that the rocket bot is not subscribed on this slack server\n          return;\n        }\n\n        rocketLogger.debug('onRocketMessageDelete', rocketMessageDeleted);\n        slack.postDeleteMessage(rocketMessageDeleted);\n      } catch (err) {\n        rocketLogger.error('Unhandled error onMessageDelete', err);\n      }\n    });\n  }\n\n  onSetReaction(rocketMsgID, reaction) {\n    try {\n      if (!this.slackBridge.isReactionsEnabled) {\n        return;\n      }\n\n      rocketLogger.debug('onRocketSetReaction');\n\n      if (rocketMsgID && reaction) {\n        if (this.slackBridge.reactionsMap.delete(\"set\".concat(rocketMsgID).concat(reaction))) {\n          // This was a Slack reaction, we don't need to tell Slack about it\n          return;\n        }\n\n        const rocketMsg = Messages.findOneById(rocketMsgID);\n\n        if (rocketMsg) {\n          this.slackAdapters.forEach(slack => {\n            const slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\n            if (slackChannel != null) {\n              const slackTS = slack.getTimeStamp(rocketMsg);\n              slack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n            }\n          });\n        }\n      }\n    } catch (err) {\n      rocketLogger.error('Unhandled error onSetReaction', err);\n    }\n  }\n\n  onUnSetReaction(rocketMsgID, reaction) {\n    try {\n      if (!this.slackBridge.isReactionsEnabled) {\n        return;\n      }\n\n      rocketLogger.debug('onRocketUnSetReaction');\n\n      if (rocketMsgID && reaction) {\n        if (this.slackBridge.reactionsMap.delete(\"unset\".concat(rocketMsgID).concat(reaction))) {\n          // This was a Slack unset reaction, we don't need to tell Slack about it\n          return;\n        }\n\n        const rocketMsg = Messages.findOneById(rocketMsgID);\n\n        if (rocketMsg) {\n          this.slackAdapters.forEach(slack => {\n            const slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\n            if (slackChannel != null) {\n              const slackTS = slack.getTimeStamp(rocketMsg);\n              slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n            }\n          });\n        }\n      }\n    } catch (err) {\n      rocketLogger.error('Unhandled error onUnSetReaction', err);\n    }\n  }\n\n  onMessage(rocketMessage) {\n    this.slackAdapters.forEach(slack => {\n      try {\n        if (!slack.getSlackChannel(rocketMessage.rid)) {\n          // This is on a channel that the rocket bot is not subscribed\n          return;\n        }\n\n        rocketLogger.debug('onRocketMessage', rocketMessage);\n\n        if (rocketMessage.editedAt) {\n          // This is an Edit Event\n          this.processMessageChanged(rocketMessage, slack);\n          return rocketMessage;\n        } // Ignore messages originating from Slack\n\n\n        if (rocketMessage._id.indexOf('slack-') === 0) {\n          return rocketMessage;\n        }\n\n        if (rocketMessage.file) {\n          return this.processFileShare(rocketMessage, slack);\n        } // A new message from Rocket.Chat\n\n\n        this.processSendMessage(rocketMessage, slack);\n      } catch (err) {\n        rocketLogger.error('Unhandled error onMessage', err);\n      }\n    });\n    return rocketMessage;\n  }\n\n  processSendMessage(rocketMessage, slack) {\n    // Since we got this message, SlackBridge_Out_Enabled is true\n    if (settings.get('SlackBridge_Out_All') === true) {\n      slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n    } else {\n      // They want to limit to certain groups\n      const outSlackChannels = _.pluck(settings.get('SlackBridge_Out_Channels'), '_id') || []; // rocketLogger.debug('Out SlackChannels: ', outSlackChannels);\n\n      if (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n        slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n      }\n    }\n  }\n\n  getMessageAttachment(rocketMessage) {\n    if (!rocketMessage.file) {\n      return;\n    }\n\n    if (!rocketMessage.attachments || !rocketMessage.attachments.length) {\n      return;\n    }\n\n    const fileId = rocketMessage.file._id;\n    return rocketMessage.attachments.find(attachment => attachment.title_link && attachment.title_link.indexOf(\"/\".concat(fileId, \"/\")) >= 0);\n  }\n\n  processFileShare(rocketMessage, slack) {\n    if (!settings.get('SlackBridge_FileUpload_Enabled')) {\n      return;\n    }\n\n    if (rocketMessage.file.name) {\n      let fileName = rocketMessage.file.name;\n      let text = rocketMessage.msg;\n      const attachment = this.getMessageAttachment(rocketMessage);\n\n      if (attachment) {\n        fileName = Meteor.absoluteUrl(attachment.title_link);\n\n        if (!text) {\n          text = attachment.description;\n        }\n      }\n\n      const message = \"\".concat(text, \" \").concat(fileName);\n      rocketMessage.msg = message;\n      slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n    }\n  }\n\n  processMessageChanged(rocketMessage, slack) {\n    if (rocketMessage) {\n      if (rocketMessage.updatedBySlack) {\n        // We have already processed this\n        delete rocketMessage.updatedBySlack;\n        return;\n      } // This was a change from Rocket.Chat\n\n\n      const slackChannel = slack.getSlackChannel(rocketMessage.rid);\n      slack.postMessageUpdate(slackChannel, rocketMessage);\n    }\n  }\n\n  getChannel(slackMessage) {\n    return slackMessage.channel ? this.findChannel(slackMessage.channel) || this.addChannel(slackMessage.channel) : null;\n  }\n\n  getUser(slackUser) {\n    return slackUser ? this.findUser(slackUser) || this.addUser(slackUser) : null;\n  }\n\n  createRocketID(slackChannel, ts) {\n    return \"slack-\".concat(slackChannel, \"-\").concat(ts.replace(/\\./g, '-'));\n  }\n\n  findChannel(slackChannelId) {\n    return Rooms.findOneByImportId(slackChannelId);\n  }\n\n  getRocketUsers(members, slackChannel) {\n    const rocketUsers = [];\n\n    for (const member of members) {\n      if (member !== slackChannel.creator) {\n        const rocketUser = this.findUser(member) || this.addUser(member);\n\n        if (rocketUser && rocketUser.username) {\n          rocketUsers.push(rocketUser.username);\n        }\n      }\n    }\n\n    return rocketUsers;\n  }\n\n  getRocketUserCreator(slackChannel) {\n    return slackChannel.creator ? this.findUser(slackChannel.creator) || this.addUser(slackChannel.creator) : null;\n  }\n\n  addChannel(slackChannelID) {\n    let hasRetried = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    rocketLogger.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n    let addedRoom;\n    this.slackAdapters.forEach(slack => {\n      if (addedRoom) {\n        return;\n      }\n\n      const slackChannel = slack.slackAPI.getRoomInfo(slackChannelID);\n\n      if (slackChannel) {\n        const members = slack.slackAPI.getMembers(slackChannelID);\n\n        if (!members) {\n          rocketLogger.error('Could not fetch room members');\n          return;\n        }\n\n        const rocketRoom = Rooms.findOneByName(slackChannel.name);\n\n        if (rocketRoom || slackChannel.is_general) {\n          slackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n          Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n        } else {\n          const rocketUsers = this.getRocketUsers(members, slackChannel);\n          const rocketUserCreator = this.getRocketUserCreator(slackChannel);\n\n          if (!rocketUserCreator) {\n            rocketLogger.error('Could not fetch room creator information', slackChannel.creator);\n            return;\n          }\n\n          try {\n            const isPrivate = slackChannel.is_private;\n            const rocketChannel = createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator.username, rocketUsers);\n            rocketChannel.rocketId = rocketChannel.rid;\n          } catch (e) {\n            if (!hasRetried) {\n              rocketLogger.debug('Error adding channel from Slack. Will retry in 1s.', e.message); // If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\n              Meteor._sleepForMs(1000);\n\n              return this.findChannel(slackChannelID) || this.addChannel(slackChannelID, true);\n            }\n\n            rocketLogger.error(e.message);\n          }\n\n          const roomUpdate = {\n            ts: new Date(slackChannel.created * 1000)\n          };\n          let lastSetTopic = 0;\n\n          if (slackChannel.topic && slackChannel.topic.value) {\n            roomUpdate.topic = slackChannel.topic.value;\n            lastSetTopic = slackChannel.topic.last_set;\n          }\n\n          if (slackChannel.purpose && slackChannel.purpose.value && slackChannel.purpose.last_set > lastSetTopic) {\n            roomUpdate.topic = slackChannel.purpose.value;\n          }\n\n          Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n          slack.addSlackChannel(slackChannel.rocketId, slackChannelID);\n        }\n\n        addedRoom = Rooms.findOneById(slackChannel.rocketId);\n      }\n    });\n\n    if (!addedRoom) {\n      rocketLogger.debug('Channel not added');\n    }\n\n    return addedRoom;\n  }\n\n  findUser(slackUserID) {\n    const rocketUser = Users.findOneByImportId(slackUserID);\n\n    if (rocketUser && !this.userTags[slackUserID]) {\n      this.userTags[slackUserID] = {\n        slack: \"<@\".concat(slackUserID, \">\"),\n        rocket: \"@\".concat(rocketUser.username)\n      };\n    }\n\n    return rocketUser;\n  }\n\n  addUser(slackUserID) {\n    rocketLogger.debug('Adding Rocket.Chat user from Slack', slackUserID);\n    let addedUser;\n    this.slackAdapters.forEach(slack => {\n      if (addedUser) {\n        return;\n      }\n\n      const user = slack.slackAPI.getUser(slackUserID);\n\n      if (user) {\n        const rocketUserData = user;\n        const isBot = rocketUserData.is_bot === true;\n        const email = rocketUserData.profile && rocketUserData.profile.email || '';\n        let existingRocketUser;\n\n        if (!isBot) {\n          existingRocketUser = Users.findOneByEmailAddress(email) || Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n        } else {\n          existingRocketUser = Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n        }\n\n        if (existingRocketUser) {\n          rocketUserData.rocketId = existingRocketUser._id;\n          rocketUserData.name = existingRocketUser.username;\n        } else {\n          const newUser = {\n            password: Random.id(),\n            username: rocketUserData.name\n          };\n\n          if (!isBot && email) {\n            newUser.email = email;\n          }\n\n          if (isBot) {\n            newUser.joinDefaultChannels = false;\n          }\n\n          rocketUserData.rocketId = Accounts.createUser(newUser);\n          const userUpdate = {\n            utcOffset: rocketUserData.tz_offset / 3600,\n            // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n            roles: isBot ? ['bot'] : ['user']\n          };\n\n          if (rocketUserData.profile && rocketUserData.profile.real_name) {\n            userUpdate.name = rocketUserData.profile.real_name;\n          }\n\n          if (rocketUserData.deleted) {\n            userUpdate.active = false;\n            userUpdate['services.resume.loginTokens'] = [];\n          }\n\n          Users.update({\n            _id: rocketUserData.rocketId\n          }, {\n            $set: userUpdate\n          });\n          const user = Users.findOneById(rocketUserData.rocketId);\n          let url = null;\n\n          if (rocketUserData.profile) {\n            if (rocketUserData.profile.image_original) {\n              url = rocketUserData.profile.image_original;\n            } else if (rocketUserData.profile.image_512) {\n              url = rocketUserData.profile.image_512;\n            }\n          }\n\n          if (url) {\n            try {\n              setUserAvatar(user, url, null, 'url');\n            } catch (error) {\n              rocketLogger.debug('Error setting user avatar', error.message);\n            }\n          }\n        }\n\n        const importIds = [rocketUserData.id];\n\n        if (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n          importIds.push(rocketUserData.profile.bot_id);\n        }\n\n        Users.addImportIds(rocketUserData.rocketId, importIds);\n\n        if (!this.userTags[slackUserID]) {\n          this.userTags[slackUserID] = {\n            slack: \"<@\".concat(slackUserID, \">\"),\n            rocket: \"@\".concat(rocketUserData.name)\n          };\n        }\n\n        addedUser = Users.findOneById(rocketUserData.rocketId);\n      }\n    });\n\n    if (!addedUser) {\n      rocketLogger.debug('User not added');\n    }\n\n    return addedUser;\n  }\n\n  addAliasToMsg(rocketUserName, rocketMsgObj) {\n    const aliasFormat = settings.get('SlackBridge_AliasFormat');\n\n    if (aliasFormat) {\n      const alias = this.util.format(aliasFormat, rocketUserName);\n\n      if (alias !== rocketUserName) {\n        rocketMsgObj.alias = alias;\n      }\n    }\n\n    return rocketMsgObj;\n  }\n\n  createAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting, slack) {\n    if (slackMessage.type === 'message') {\n      let rocketMsgObj = {};\n\n      if (!_.isEmpty(slackMessage.subtype)) {\n        rocketMsgObj = slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\n        if (!rocketMsgObj) {\n          return;\n        }\n      } else {\n        rocketMsgObj = {\n          msg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n          rid: rocketChannel._id,\n          u: {\n            _id: rocketUser._id,\n            username: rocketUser.username\n          }\n        };\n        this.addAliasToMsg(rocketUser.username, rocketMsgObj);\n      }\n\n      _.extend(rocketMsgObj, rocketMsgDataDefaults);\n\n      if (slackMessage.edited) {\n        rocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n      }\n\n      rocketMsgObj.slackTs = slackMessage.ts;\n\n      if (slackMessage.thread_ts) {\n        const tmessage = Messages.findOneBySlackTs(slackMessage.thread_ts);\n\n        if (tmessage) {\n          rocketMsgObj.tmid = tmessage._id;\n        }\n      }\n\n      if (slackMessage.subtype === 'bot_message') {\n        rocketUser = Users.findOneById('rocket.cat', {\n          fields: {\n            username: 1\n          }\n        });\n      }\n\n      if (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n        rocketMsgObj.pinned = true;\n        rocketMsgObj.pinnedAt = Date.now;\n        rocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n      }\n\n      if (slackMessage.subtype === 'bot_message') {\n        Meteor.setTimeout(() => {\n          if (slackMessage.bot_id && slackMessage.ts) {\n            // Make sure that a message with the same bot_id and timestamp doesn't already exists\n            if (!Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n              sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n            }\n          }\n        }, 500);\n      } else {\n        rocketLogger.debug('Send message to Rocket.Chat');\n        sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n      }\n    }\n  }\n\n  convertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n    if (!_.isEmpty(slackMsgTxt)) {\n      slackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n      slackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n      slackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n      slackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n      slackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n      slackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n      slackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n      slackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n      slackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n      slackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n      slackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n      slackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n        if (!this.userTags[userId]) {\n          this.findUser(userId) || this.addUser(userId); // This adds userTags for the userId\n        }\n\n        const userTags = this.userTags[userId];\n\n        if (userTags) {\n          slackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n        }\n      });\n    } else {\n      slackMsgTxt = '';\n    }\n\n    return slackMsgTxt;\n  }\n\n}","map":{"version":3,"sources":["app/slackbridge/server/RocketAdapter.js"],"names":["module","export","default","RocketAdapter","util","link","v","_","Meteor","Accounts","Random","rocketLogger","callbacks","settings","Messages","Rooms","Users","createRoom","sendMessage","setUserAvatar","constructor","slackBridge","debug","userTags","slackAdapters","connect","registerForEvents","disconnect","unregisterForEvents","addSlack","slack","indexOf","push","clearSlackAdapters","add","onMessage","bind","priority","LOW","onMessageDelete","onSetReaction","onUnSetReaction","remove","rocketMessageDeleted","forEach","getSlackChannel","rid","postDeleteMessage","err","error","rocketMsgID","reaction","isReactionsEnabled","reactionsMap","delete","rocketMsg","findOneById","slackChannel","slackTS","getTimeStamp","postReactionAdded","replace","id","postReactionRemove","rocketMessage","editedAt","processMessageChanged","_id","file","processFileShare","processSendMessage","get","postMessage","outSlackChannels","pluck","getMessageAttachment","attachments","length","fileId","find","attachment","title_link","name","fileName","text","msg","absoluteUrl","description","message","updatedBySlack","postMessageUpdate","getChannel","slackMessage","channel","findChannel","addChannel","getUser","slackUser","findUser","addUser","createRocketID","ts","slackChannelId","findOneByImportId","getRocketUsers","members","rocketUsers","member","creator","rocketUser","username","getRocketUserCreator","slackChannelID","hasRetried","addedRoom","slackAPI","getRoomInfo","getMembers","rocketRoom","findOneByName","is_general","rocketId","addImportIds","rocketUserCreator","isPrivate","is_private","rocketChannel","e","_sleepForMs","roomUpdate","Date","created","lastSetTopic","topic","value","last_set","purpose","addSlackChannel","slackUserID","rocket","addedUser","user","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsernameIgnoringCase","newUser","password","joinDefaultChannels","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","active","update","$set","url","image_original","image_512","importIds","bot_id","addAliasToMsg","rocketUserName","rocketMsgObj","aliasFormat","alias","format","createAndSaveMessage","rocketMsgDataDefaults","isImporting","type","isEmpty","subtype","processSubtypedMessage","convertSlackMsgTxtToRocketTxtFormat","u","extend","edited","parseInt","split","slackTs","thread_ts","tmessage","findOneBySlackTs","tmid","fields","pinned_to","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","findOneBySlackBotIdAndSlackTs","slackMsgTxt","match","userId"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;AAA2C,IAAIC,IAAJ;AAASJ,MAAM,CAACK,IAAP,CAAY,MAAZ,EAAmB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACF,IAAAA,IAAI,GAACE,CAAL;AAAO;;AAAnB,CAAnB,EAAwC,CAAxC;;AAA2C,IAAIC,CAAJ;;AAAMP,MAAM,CAACK,IAAP,CAAY,YAAZ,EAAyB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACC,IAAAA,CAAC,GAACD,CAAF;AAAI;;AAAhB,CAAzB,EAA2C,CAA3C;AAA8C,IAAIE,MAAJ;AAAWR,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACG,EAAAA,MAAM,CAACF,CAAD,EAAG;AAACE,IAAAA,MAAM,GAACF,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIG,QAAJ;AAAaT,MAAM,CAACK,IAAP,CAAY,sBAAZ,EAAmC;AAACI,EAAAA,QAAQ,CAACH,CAAD,EAAG;AAACG,IAAAA,QAAQ,GAACH,CAAT;AAAW;;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAII,MAAJ;AAAWV,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACK,EAAAA,MAAM,CAACJ,CAAD,EAAG;AAACI,IAAAA,MAAM,GAACJ,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIK,YAAJ;AAAiBX,MAAM,CAACK,IAAP,CAAY,UAAZ,EAAuB;AAACM,EAAAA,YAAY,CAACL,CAAD,EAAG;AAACK,IAAAA,YAAY,GAACL,CAAb;AAAe;;AAAhC,CAAvB,EAAyD,CAAzD;AAA4D,IAAIM,SAAJ;AAAcZ,MAAM,CAACK,IAAP,CAAY,wBAAZ,EAAqC;AAACO,EAAAA,SAAS,CAACN,CAAD,EAAG;AAACM,IAAAA,SAAS,GAACN,CAAV;AAAY;;AAA1B,CAArC,EAAiE,CAAjE;AAAoE,IAAIO,QAAJ;AAAab,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA6B;AAACQ,EAAAA,QAAQ,CAACP,CAAD,EAAG;AAACO,IAAAA,QAAQ,GAACP,CAAT;AAAW;;AAAxB,CAA7B,EAAuD,CAAvD;AAA0D,IAAIQ,QAAJ,EAAaC,KAAb,EAAmBC,KAAnB;AAAyBhB,MAAM,CAACK,IAAP,CAAY,cAAZ,EAA2B;AAACS,EAAAA,QAAQ,CAACR,CAAD,EAAG;AAACQ,IAAAA,QAAQ,GAACR,CAAT;AAAW,GAAxB;;AAAyBS,EAAAA,KAAK,CAACT,CAAD,EAAG;AAACS,IAAAA,KAAK,GAACT,CAAN;AAAQ,GAA1C;;AAA2CU,EAAAA,KAAK,CAACV,CAAD,EAAG;AAACU,IAAAA,KAAK,GAACV,CAAN;AAAQ;;AAA5D,CAA3B,EAAyF,CAAzF;AAA4F,IAAIW,UAAJ,EAAeC,WAAf,EAA2BC,aAA3B;AAAyCnB,MAAM,CAACK,IAAP,CAAY,WAAZ,EAAwB;AAACY,EAAAA,UAAU,CAACX,CAAD,EAAG;AAACW,IAAAA,UAAU,GAACX,CAAX;AAAa,GAA5B;;AAA6BY,EAAAA,WAAW,CAACZ,CAAD,EAAG;AAACY,IAAAA,WAAW,GAACZ,CAAZ;AAAc,GAA1D;;AAA2Da,EAAAA,aAAa,CAACb,CAAD,EAAG;AAACa,IAAAA,aAAa,GAACb,CAAd;AAAgB;;AAA5F,CAAxB,EAAsH,CAAtH;;AAartB,MAAMH,aAAN,CAAoB;AAClCiB,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxBV,IAAAA,YAAY,CAACW,KAAb,CAAmB,aAAnB;AACA,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKjB,IAAL,GAAYA,IAAZ;AACA,SAAKmB,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA;;AAEDC,EAAAA,OAAO,GAAG;AACT,SAAKC,iBAAL;AACA;;AAEDC,EAAAA,UAAU,GAAG;AACZ,SAAKC,mBAAL;AACA;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACf,QAAI,KAAKN,aAAL,CAAmBO,OAAnB,CAA2BD,KAA3B,IAAoC,CAAxC,EAA2C;AAC1C,WAAKN,aAAL,CAAmBQ,IAAnB,CAAwBF,KAAxB;AACA;AACD;;AAEDG,EAAAA,kBAAkB,GAAG;AACpB,SAAKT,aAAL,GAAqB,EAArB;AACA;;AAEDE,EAAAA,iBAAiB,GAAG;AACnBf,IAAAA,YAAY,CAACW,KAAb,CAAmB,qBAAnB;AACAV,IAAAA,SAAS,CAACsB,GAAV,CAAc,kBAAd,EAAkC,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlC,EAA6DxB,SAAS,CAACyB,QAAV,CAAmBC,GAAhF,EAAqF,iBAArF;AACA1B,IAAAA,SAAS,CAACsB,GAAV,CAAc,oBAAd,EAAoC,KAAKK,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAApC,EAAqExB,SAAS,CAACyB,QAAV,CAAmBC,GAAxF,EAA6F,oBAA7F;AACA1B,IAAAA,SAAS,CAACsB,GAAV,CAAc,aAAd,EAA6B,KAAKM,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAA7B,EAA4DxB,SAAS,CAACyB,QAAV,CAAmBC,GAA/E,EAAoF,yBAApF;AACA1B,IAAAA,SAAS,CAACsB,GAAV,CAAc,eAAd,EAA+B,KAAKO,eAAL,CAAqBL,IAArB,CAA0B,IAA1B,CAA/B,EAAgExB,SAAS,CAACyB,QAAV,CAAmBC,GAAnF,EAAwF,2BAAxF;AACA;;AAEDV,EAAAA,mBAAmB,GAAG;AACrBjB,IAAAA,YAAY,CAACW,KAAb,CAAmB,uBAAnB;AACAV,IAAAA,SAAS,CAAC8B,MAAV,CAAiB,kBAAjB,EAAqC,iBAArC;AACA9B,IAAAA,SAAS,CAAC8B,MAAV,CAAiB,oBAAjB,EAAuC,oBAAvC;AACA9B,IAAAA,SAAS,CAAC8B,MAAV,CAAiB,aAAjB,EAAgC,yBAAhC;AACA9B,IAAAA,SAAS,CAAC8B,MAAV,CAAiB,eAAjB,EAAkC,2BAAlC;AACA;;AAEDH,EAAAA,eAAe,CAACI,oBAAD,EAAuB;AACrC,SAAKnB,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,UAAI;AACH,YAAI,CAACA,KAAK,CAACe,eAAN,CAAsBF,oBAAoB,CAACG,GAA3C,CAAL,EAAsD;AACrD;AACA;AACA;;AACDnC,QAAAA,YAAY,CAACW,KAAb,CAAmB,uBAAnB,EAA4CqB,oBAA5C;AACAb,QAAAA,KAAK,CAACiB,iBAAN,CAAwBJ,oBAAxB;AACA,OAPD,CAOE,OAAOK,GAAP,EAAY;AACbrC,QAAAA,YAAY,CAACsC,KAAb,CAAmB,iCAAnB,EAAsDD,GAAtD;AACA;AACD,KAXD;AAYA;;AAEDR,EAAAA,aAAa,CAACU,WAAD,EAAcC,QAAd,EAAwB;AACpC,QAAI;AACH,UAAI,CAAC,KAAK9B,WAAL,CAAiB+B,kBAAtB,EAA0C;AACzC;AACA;;AAEDzC,MAAAA,YAAY,CAACW,KAAb,CAAmB,qBAAnB;;AAEA,UAAI4B,WAAW,IAAIC,QAAnB,EAA6B;AAC5B,YAAI,KAAK9B,WAAL,CAAiBgC,YAAjB,CAA8BC,MAA9B,cAA2CJ,WAA3C,SAAyDC,QAAzD,EAAJ,EAA0E;AACzE;AACA;AACA;;AACD,cAAMI,SAAS,GAAGzC,QAAQ,CAAC0C,WAAT,CAAqBN,WAArB,CAAlB;;AACA,YAAIK,SAAJ,EAAe;AACd,eAAK/B,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,kBAAM2B,YAAY,GAAG3B,KAAK,CAACe,eAAN,CAAsBU,SAAS,CAACT,GAAhC,CAArB;;AACA,gBAAIW,YAAY,IAAI,IAApB,EAA0B;AACzB,oBAAMC,OAAO,GAAG5B,KAAK,CAAC6B,YAAN,CAAmBJ,SAAnB,CAAhB;AACAzB,cAAAA,KAAK,CAAC8B,iBAAN,CAAwBT,QAAQ,CAACU,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAxB,EAAoDJ,YAAY,CAACK,EAAjE,EAAqEJ,OAArE;AACA;AACD,WAND;AAOA;AACD;AACD,KAvBD,CAuBE,OAAOV,GAAP,EAAY;AACbrC,MAAAA,YAAY,CAACsC,KAAb,CAAmB,+BAAnB,EAAoDD,GAApD;AACA;AACD;;AAEDP,EAAAA,eAAe,CAACS,WAAD,EAAcC,QAAd,EAAwB;AACtC,QAAI;AACH,UAAI,CAAC,KAAK9B,WAAL,CAAiB+B,kBAAtB,EAA0C;AACzC;AACA;;AAEDzC,MAAAA,YAAY,CAACW,KAAb,CAAmB,uBAAnB;;AAEA,UAAI4B,WAAW,IAAIC,QAAnB,EAA6B;AAC5B,YAAI,KAAK9B,WAAL,CAAiBgC,YAAjB,CAA8BC,MAA9B,gBAA6CJ,WAA7C,SAA2DC,QAA3D,EAAJ,EAA4E;AAC3E;AACA;AACA;;AAED,cAAMI,SAAS,GAAGzC,QAAQ,CAAC0C,WAAT,CAAqBN,WAArB,CAAlB;;AACA,YAAIK,SAAJ,EAAe;AACd,eAAK/B,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,kBAAM2B,YAAY,GAAG3B,KAAK,CAACe,eAAN,CAAsBU,SAAS,CAACT,GAAhC,CAArB;;AACA,gBAAIW,YAAY,IAAI,IAApB,EAA0B;AACzB,oBAAMC,OAAO,GAAG5B,KAAK,CAAC6B,YAAN,CAAmBJ,SAAnB,CAAhB;AACAzB,cAAAA,KAAK,CAACiC,kBAAN,CAAyBZ,QAAQ,CAACU,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAzB,EAAqDJ,YAAY,CAACK,EAAlE,EAAsEJ,OAAtE;AACA;AACD,WAND;AAOA;AACD;AACD,KAxBD,CAwBE,OAAOV,GAAP,EAAY;AACbrC,MAAAA,YAAY,CAACsC,KAAb,CAAmB,iCAAnB,EAAsDD,GAAtD;AACA;AACD;;AAEDb,EAAAA,SAAS,CAAC6B,aAAD,EAAgB;AACxB,SAAKxC,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,UAAI;AACH,YAAI,CAACA,KAAK,CAACe,eAAN,CAAsBmB,aAAa,CAAClB,GAApC,CAAL,EAA+C;AAC9C;AACA;AACA;;AACDnC,QAAAA,YAAY,CAACW,KAAb,CAAmB,iBAAnB,EAAsC0C,aAAtC;;AAEA,YAAIA,aAAa,CAACC,QAAlB,EAA4B;AAC3B;AACA,eAAKC,qBAAL,CAA2BF,aAA3B,EAA0ClC,KAA1C;AACA,iBAAOkC,aAAP;AACA,SAXE,CAYH;;;AACA,YAAIA,aAAa,CAACG,GAAd,CAAkBpC,OAAlB,CAA0B,QAA1B,MAAwC,CAA5C,EAA+C;AAC9C,iBAAOiC,aAAP;AACA;;AAED,YAAIA,aAAa,CAACI,IAAlB,EAAwB;AACvB,iBAAO,KAAKC,gBAAL,CAAsBL,aAAtB,EAAqClC,KAArC,CAAP;AACA,SAnBE,CAqBH;;;AACA,aAAKwC,kBAAL,CAAwBN,aAAxB,EAAuClC,KAAvC;AACA,OAvBD,CAuBE,OAAOkB,GAAP,EAAY;AACbrC,QAAAA,YAAY,CAACsC,KAAb,CAAmB,2BAAnB,EAAgDD,GAAhD;AACA;AACD,KA3BD;AA6BA,WAAOgB,aAAP;AACA;;AAEDM,EAAAA,kBAAkB,CAACN,aAAD,EAAgBlC,KAAhB,EAAuB;AACxC;AACA,QAAIjB,QAAQ,CAAC0D,GAAT,CAAa,qBAAb,MAAwC,IAA5C,EAAkD;AACjDzC,MAAAA,KAAK,CAAC0C,WAAN,CAAkB1C,KAAK,CAACe,eAAN,CAAsBmB,aAAa,CAAClB,GAApC,CAAlB,EAA4DkB,aAA5D;AACA,KAFD,MAEO;AACN;AACA,YAAMS,gBAAgB,GAAGlE,CAAC,CAACmE,KAAF,CAAQ7D,QAAQ,CAAC0D,GAAT,CAAa,0BAAb,CAAR,EAAkD,KAAlD,KAA4D,EAArF,CAFM,CAGN;;AACA,UAAIE,gBAAgB,CAAC1C,OAAjB,CAAyBiC,aAAa,CAAClB,GAAvC,MAAgD,CAAC,CAArD,EAAwD;AACvDhB,QAAAA,KAAK,CAAC0C,WAAN,CAAkB1C,KAAK,CAACe,eAAN,CAAsBmB,aAAa,CAAClB,GAApC,CAAlB,EAA4DkB,aAA5D;AACA;AACD;AACD;;AAEDW,EAAAA,oBAAoB,CAACX,aAAD,EAAgB;AACnC,QAAI,CAACA,aAAa,CAACI,IAAnB,EAAyB;AACxB;AACA;;AAED,QAAI,CAACJ,aAAa,CAACY,WAAf,IAA8B,CAACZ,aAAa,CAACY,WAAd,CAA0BC,MAA7D,EAAqE;AACpE;AACA;;AAED,UAAMC,MAAM,GAAGd,aAAa,CAACI,IAAd,CAAmBD,GAAlC;AACA,WAAOH,aAAa,CAACY,WAAd,CAA0BG,IAA1B,CAAgCC,UAAD,IAAgBA,UAAU,CAACC,UAAX,IAAyBD,UAAU,CAACC,UAAX,CAAsBlD,OAAtB,YAAkC+C,MAAlC,WAAgD,CAAxH,CAAP;AACA;;AAEDT,EAAAA,gBAAgB,CAACL,aAAD,EAAgBlC,KAAhB,EAAuB;AACtC,QAAI,CAACjB,QAAQ,CAAC0D,GAAT,CAAa,gCAAb,CAAL,EAAqD;AACpD;AACA;;AAED,QAAIP,aAAa,CAACI,IAAd,CAAmBc,IAAvB,EAA6B;AAC5B,UAAIC,QAAQ,GAAGnB,aAAa,CAACI,IAAd,CAAmBc,IAAlC;AACA,UAAIE,IAAI,GAAGpB,aAAa,CAACqB,GAAzB;AAEA,YAAML,UAAU,GAAG,KAAKL,oBAAL,CAA0BX,aAA1B,CAAnB;;AACA,UAAIgB,UAAJ,EAAgB;AACfG,QAAAA,QAAQ,GAAG3E,MAAM,CAAC8E,WAAP,CAAmBN,UAAU,CAACC,UAA9B,CAAX;;AACA,YAAI,CAACG,IAAL,EAAW;AACVA,UAAAA,IAAI,GAAGJ,UAAU,CAACO,WAAlB;AACA;AACD;;AAED,YAAMC,OAAO,aAAMJ,IAAN,cAAcD,QAAd,CAAb;AAEAnB,MAAAA,aAAa,CAACqB,GAAd,GAAoBG,OAApB;AACA1D,MAAAA,KAAK,CAAC0C,WAAN,CAAkB1C,KAAK,CAACe,eAAN,CAAsBmB,aAAa,CAAClB,GAApC,CAAlB,EAA4DkB,aAA5D;AACA;AACD;;AAEDE,EAAAA,qBAAqB,CAACF,aAAD,EAAgBlC,KAAhB,EAAuB;AAC3C,QAAIkC,aAAJ,EAAmB;AAClB,UAAIA,aAAa,CAACyB,cAAlB,EAAkC;AACjC;AACA,eAAOzB,aAAa,CAACyB,cAArB;AACA;AACA,OALiB,CAOlB;;;AACA,YAAMhC,YAAY,GAAG3B,KAAK,CAACe,eAAN,CAAsBmB,aAAa,CAAClB,GAApC,CAArB;AACAhB,MAAAA,KAAK,CAAC4D,iBAAN,CAAwBjC,YAAxB,EAAsCO,aAAtC;AACA;AACD;;AAED2B,EAAAA,UAAU,CAACC,YAAD,EAAe;AACxB,WAAOA,YAAY,CAACC,OAAb,GAAuB,KAAKC,WAAL,CAAiBF,YAAY,CAACC,OAA9B,KAA0C,KAAKE,UAAL,CAAgBH,YAAY,CAACC,OAA7B,CAAjE,GAAyG,IAAhH;AACA;;AAEDG,EAAAA,OAAO,CAACC,SAAD,EAAY;AAClB,WAAOA,SAAS,GAAG,KAAKC,QAAL,CAAcD,SAAd,KAA4B,KAAKE,OAAL,CAAaF,SAAb,CAA/B,GAAyD,IAAzE;AACA;;AAEDG,EAAAA,cAAc,CAAC3C,YAAD,EAAe4C,EAAf,EAAmB;AAChC,2BAAgB5C,YAAhB,cAAgC4C,EAAE,CAACxC,OAAH,CAAW,KAAX,EAAkB,GAAlB,CAAhC;AACA;;AAEDiC,EAAAA,WAAW,CAACQ,cAAD,EAAiB;AAC3B,WAAOvF,KAAK,CAACwF,iBAAN,CAAwBD,cAAxB,CAAP;AACA;;AAEDE,EAAAA,cAAc,CAACC,OAAD,EAAUhD,YAAV,EAAwB;AACrC,UAAMiD,WAAW,GAAG,EAApB;;AACA,SAAK,MAAMC,MAAX,IAAqBF,OAArB,EAA8B;AAC7B,UAAIE,MAAM,KAAKlD,YAAY,CAACmD,OAA5B,EAAqC;AACpC,cAAMC,UAAU,GAAG,KAAKX,QAAL,CAAcS,MAAd,KAAyB,KAAKR,OAAL,CAAaQ,MAAb,CAA5C;;AACA,YAAIE,UAAU,IAAIA,UAAU,CAACC,QAA7B,EAAuC;AACtCJ,UAAAA,WAAW,CAAC1E,IAAZ,CAAiB6E,UAAU,CAACC,QAA5B;AACA;AACD;AACD;;AACD,WAAOJ,WAAP;AACA;;AAEDK,EAAAA,oBAAoB,CAACtD,YAAD,EAAe;AAClC,WAAOA,YAAY,CAACmD,OAAb,GAAuB,KAAKV,QAAL,CAAczC,YAAY,CAACmD,OAA3B,KAAuC,KAAKT,OAAL,CAAa1C,YAAY,CAACmD,OAA1B,CAA9D,GAAmG,IAA1G;AACA;;AAEDb,EAAAA,UAAU,CAACiB,cAAD,EAAqC;AAAA,QAApBC,UAAoB,uEAAP,KAAO;AAC9CtG,IAAAA,YAAY,CAACW,KAAb,CAAmB,uCAAnB,EAA4D0F,cAA5D;AACA,QAAIE,SAAJ;AAEA,SAAK1F,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,UAAIoF,SAAJ,EAAe;AACd;AACA;;AAED,YAAMzD,YAAY,GAAG3B,KAAK,CAACqF,QAAN,CAAeC,WAAf,CAA2BJ,cAA3B,CAArB;;AACA,UAAIvD,YAAJ,EAAkB;AACjB,cAAMgD,OAAO,GAAG3E,KAAK,CAACqF,QAAN,CAAeE,UAAf,CAA0BL,cAA1B,CAAhB;;AACA,YAAI,CAACP,OAAL,EAAc;AACb9F,UAAAA,YAAY,CAACsC,KAAb,CAAmB,8BAAnB;AACA;AACA;;AAED,cAAMqE,UAAU,GAAGvG,KAAK,CAACwG,aAAN,CAAoB9D,YAAY,CAACyB,IAAjC,CAAnB;;AAEA,YAAIoC,UAAU,IAAI7D,YAAY,CAAC+D,UAA/B,EAA2C;AAC1C/D,UAAAA,YAAY,CAACgE,QAAb,GAAwBhE,YAAY,CAAC+D,UAAb,GAA0B,SAA1B,GAAsCF,UAAU,CAACnD,GAAzE;AACApD,UAAAA,KAAK,CAAC2G,YAAN,CAAmBjE,YAAY,CAACgE,QAAhC,EAA0ChE,YAAY,CAACK,EAAvD;AACA,SAHD,MAGO;AACN,gBAAM4C,WAAW,GAAG,KAAKF,cAAL,CAAoBC,OAApB,EAA6BhD,YAA7B,CAApB;AACA,gBAAMkE,iBAAiB,GAAG,KAAKZ,oBAAL,CAA0BtD,YAA1B,CAA1B;;AAEA,cAAI,CAACkE,iBAAL,EAAwB;AACvBhH,YAAAA,YAAY,CAACsC,KAAb,CAAmB,0CAAnB,EAA+DQ,YAAY,CAACmD,OAA5E;AACA;AACA;;AAED,cAAI;AACH,kBAAMgB,SAAS,GAAGnE,YAAY,CAACoE,UAA/B;AACA,kBAAMC,aAAa,GAAG7G,UAAU,CAAC2G,SAAS,GAAG,GAAH,GAAS,GAAnB,EAAwBnE,YAAY,CAACyB,IAArC,EAA2CyC,iBAAiB,CAACb,QAA7D,EAAuEJ,WAAvE,CAAhC;AACAoB,YAAAA,aAAa,CAACL,QAAd,GAAyBK,aAAa,CAAChF,GAAvC;AACA,WAJD,CAIE,OAAOiF,CAAP,EAAU;AACX,gBAAI,CAACd,UAAL,EAAiB;AAChBtG,cAAAA,YAAY,CAACW,KAAb,CAAmB,oDAAnB,EAAyEyG,CAAC,CAACvC,OAA3E,EADgB,CAEhB;;AACAhF,cAAAA,MAAM,CAACwH,WAAP,CAAmB,IAAnB;;AACA,qBAAO,KAAKlC,WAAL,CAAiBkB,cAAjB,KAAoC,KAAKjB,UAAL,CAAgBiB,cAAhB,EAAgC,IAAhC,CAA3C;AACA;;AACDrG,YAAAA,YAAY,CAACsC,KAAb,CAAmB8E,CAAC,CAACvC,OAArB;AACA;;AAED,gBAAMyC,UAAU,GAAG;AAClB5B,YAAAA,EAAE,EAAE,IAAI6B,IAAJ,CAASzE,YAAY,CAAC0E,OAAb,GAAuB,IAAhC;AADc,WAAnB;AAIA,cAAIC,YAAY,GAAG,CAAnB;;AACA,cAAI3E,YAAY,CAAC4E,KAAb,IAAsB5E,YAAY,CAAC4E,KAAb,CAAmBC,KAA7C,EAAoD;AACnDL,YAAAA,UAAU,CAACI,KAAX,GAAmB5E,YAAY,CAAC4E,KAAb,CAAmBC,KAAtC;AACAF,YAAAA,YAAY,GAAG3E,YAAY,CAAC4E,KAAb,CAAmBE,QAAlC;AACA;;AAED,cAAI9E,YAAY,CAAC+E,OAAb,IAAwB/E,YAAY,CAAC+E,OAAb,CAAqBF,KAA7C,IAAsD7E,YAAY,CAAC+E,OAAb,CAAqBD,QAArB,GAAgCH,YAA1F,EAAwG;AACvGH,YAAAA,UAAU,CAACI,KAAX,GAAmB5E,YAAY,CAAC+E,OAAb,CAAqBF,KAAxC;AACA;;AAEDvH,UAAAA,KAAK,CAAC2G,YAAN,CAAmBjE,YAAY,CAACgE,QAAhC,EAA0ChE,YAAY,CAACK,EAAvD;AACAhC,UAAAA,KAAK,CAAC2G,eAAN,CAAsBhF,YAAY,CAACgE,QAAnC,EAA6CT,cAA7C;AACA;;AAEDE,QAAAA,SAAS,GAAGnG,KAAK,CAACyC,WAAN,CAAkBC,YAAY,CAACgE,QAA/B,CAAZ;AACA;AACD,KA7DD;;AA+DA,QAAI,CAACP,SAAL,EAAgB;AACfvG,MAAAA,YAAY,CAACW,KAAb,CAAmB,mBAAnB;AACA;;AACD,WAAO4F,SAAP;AACA;;AAEDhB,EAAAA,QAAQ,CAACwC,WAAD,EAAc;AACrB,UAAM7B,UAAU,GAAG7F,KAAK,CAACuF,iBAAN,CAAwBmC,WAAxB,CAAnB;;AACA,QAAI7B,UAAU,IAAI,CAAC,KAAKtF,QAAL,CAAcmH,WAAd,CAAnB,EAA+C;AAC9C,WAAKnH,QAAL,CAAcmH,WAAd,IAA6B;AAC5B5G,QAAAA,KAAK,cAAO4G,WAAP,MADuB;AAE5BC,QAAAA,MAAM,aAAM9B,UAAU,CAACC,QAAjB;AAFsB,OAA7B;AAIA;;AACD,WAAOD,UAAP;AACA;;AAEDV,EAAAA,OAAO,CAACuC,WAAD,EAAc;AACpB/H,IAAAA,YAAY,CAACW,KAAb,CAAmB,oCAAnB,EAAyDoH,WAAzD;AACA,QAAIE,SAAJ;AACA,SAAKpH,aAAL,CAAmBoB,OAAnB,CAA4Bd,KAAD,IAAW;AACrC,UAAI8G,SAAJ,EAAe;AACd;AACA;;AAED,YAAMC,IAAI,GAAG/G,KAAK,CAACqF,QAAN,CAAenB,OAAf,CAAuB0C,WAAvB,CAAb;;AACA,UAAIG,IAAJ,EAAU;AACT,cAAMC,cAAc,GAAGD,IAAvB;AACA,cAAME,KAAK,GAAGD,cAAc,CAACE,MAAf,KAA0B,IAAxC;AACA,cAAMC,KAAK,GAAIH,cAAc,CAACI,OAAf,IAA0BJ,cAAc,CAACI,OAAf,CAAuBD,KAAlD,IAA4D,EAA1E;AACA,YAAIE,kBAAJ;;AACA,YAAI,CAACJ,KAAL,EAAY;AACXI,UAAAA,kBAAkB,GAAGnI,KAAK,CAACoI,qBAAN,CAA4BH,KAA5B,KAAsCjI,KAAK,CAACqI,6BAAN,CAAoCP,cAAc,CAAC5D,IAAnD,CAA3D;AACA,SAFD,MAEO;AACNiE,UAAAA,kBAAkB,GAAGnI,KAAK,CAACqI,6BAAN,CAAoCP,cAAc,CAAC5D,IAAnD,CAArB;AACA;;AAED,YAAIiE,kBAAJ,EAAwB;AACvBL,UAAAA,cAAc,CAACrB,QAAf,GAA0B0B,kBAAkB,CAAChF,GAA7C;AACA2E,UAAAA,cAAc,CAAC5D,IAAf,GAAsBiE,kBAAkB,CAACrC,QAAzC;AACA,SAHD,MAGO;AACN,gBAAMwC,OAAO,GAAG;AACfC,YAAAA,QAAQ,EAAE7I,MAAM,CAACoD,EAAP,EADK;AAEfgD,YAAAA,QAAQ,EAAEgC,cAAc,CAAC5D;AAFV,WAAhB;;AAKA,cAAI,CAAC6D,KAAD,IAAUE,KAAd,EAAqB;AACpBK,YAAAA,OAAO,CAACL,KAAR,GAAgBA,KAAhB;AACA;;AAED,cAAIF,KAAJ,EAAW;AACVO,YAAAA,OAAO,CAACE,mBAAR,GAA8B,KAA9B;AACA;;AAEDV,UAAAA,cAAc,CAACrB,QAAf,GAA0BhH,QAAQ,CAACgJ,UAAT,CAAoBH,OAApB,CAA1B;AACA,gBAAMI,UAAU,GAAG;AAClBC,YAAAA,SAAS,EAAEb,cAAc,CAACc,SAAf,GAA2B,IADpB;AAC0B;AAC5CC,YAAAA,KAAK,EAAEd,KAAK,GAAG,CAAC,KAAD,CAAH,GAAa,CAAC,MAAD;AAFP,WAAnB;;AAKA,cAAID,cAAc,CAACI,OAAf,IAA0BJ,cAAc,CAACI,OAAf,CAAuBY,SAArD,EAAgE;AAC/DJ,YAAAA,UAAU,CAACxE,IAAX,GAAkB4D,cAAc,CAACI,OAAf,CAAuBY,SAAzC;AACA;;AAED,cAAIhB,cAAc,CAACiB,OAAnB,EAA4B;AAC3BL,YAAAA,UAAU,CAACM,MAAX,GAAoB,KAApB;AACAN,YAAAA,UAAU,CAAC,6BAAD,CAAV,GAA4C,EAA5C;AACA;;AAED1I,UAAAA,KAAK,CAACiJ,MAAN,CAAa;AAAE9F,YAAAA,GAAG,EAAE2E,cAAc,CAACrB;AAAtB,WAAb,EAA+C;AAAEyC,YAAAA,IAAI,EAAER;AAAR,WAA/C;AAEA,gBAAMb,IAAI,GAAG7H,KAAK,CAACwC,WAAN,CAAkBsF,cAAc,CAACrB,QAAjC,CAAb;AAEA,cAAI0C,GAAG,GAAG,IAAV;;AACA,cAAIrB,cAAc,CAACI,OAAnB,EAA4B;AAC3B,gBAAIJ,cAAc,CAACI,OAAf,CAAuBkB,cAA3B,EAA2C;AAC1CD,cAAAA,GAAG,GAAGrB,cAAc,CAACI,OAAf,CAAuBkB,cAA7B;AACA,aAFD,MAEO,IAAItB,cAAc,CAACI,OAAf,CAAuBmB,SAA3B,EAAsC;AAC5CF,cAAAA,GAAG,GAAGrB,cAAc,CAACI,OAAf,CAAuBmB,SAA7B;AACA;AACD;;AACD,cAAIF,GAAJ,EAAS;AACR,gBAAI;AACHhJ,cAAAA,aAAa,CAAC0H,IAAD,EAAOsB,GAAP,EAAY,IAAZ,EAAkB,KAAlB,CAAb;AACA,aAFD,CAEE,OAAOlH,KAAP,EAAc;AACftC,cAAAA,YAAY,CAACW,KAAb,CAAmB,2BAAnB,EAAgD2B,KAAK,CAACuC,OAAtD;AACA;AACD;AACD;;AAED,cAAM8E,SAAS,GAAG,CAACxB,cAAc,CAAChF,EAAhB,CAAlB;;AACA,YAAIiF,KAAK,IAAID,cAAc,CAACI,OAAxB,IAAmCJ,cAAc,CAACI,OAAf,CAAuBqB,MAA9D,EAAsE;AACrED,UAAAA,SAAS,CAACtI,IAAV,CAAe8G,cAAc,CAACI,OAAf,CAAuBqB,MAAtC;AACA;;AACDvJ,QAAAA,KAAK,CAAC0G,YAAN,CAAmBoB,cAAc,CAACrB,QAAlC,EAA4C6C,SAA5C;;AACA,YAAI,CAAC,KAAK/I,QAAL,CAAcmH,WAAd,CAAL,EAAiC;AAChC,eAAKnH,QAAL,CAAcmH,WAAd,IAA6B;AAC5B5G,YAAAA,KAAK,cAAO4G,WAAP,MADuB;AAE5BC,YAAAA,MAAM,aAAMG,cAAc,CAAC5D,IAArB;AAFsB,WAA7B;AAIA;;AACD0D,QAAAA,SAAS,GAAG5H,KAAK,CAACwC,WAAN,CAAkBsF,cAAc,CAACrB,QAAjC,CAAZ;AACA;AACD,KAnFD;;AAqFA,QAAI,CAACmB,SAAL,EAAgB;AACfjI,MAAAA,YAAY,CAACW,KAAb,CAAmB,gBAAnB;AACA;;AAED,WAAOsH,SAAP;AACA;;AAED4B,EAAAA,aAAa,CAACC,cAAD,EAAiBC,YAAjB,EAA+B;AAC3C,UAAMC,WAAW,GAAG9J,QAAQ,CAAC0D,GAAT,CAAa,yBAAb,CAApB;;AACA,QAAIoG,WAAJ,EAAiB;AAChB,YAAMC,KAAK,GAAG,KAAKxK,IAAL,CAAUyK,MAAV,CAAiBF,WAAjB,EAA8BF,cAA9B,CAAd;;AAEA,UAAIG,KAAK,KAAKH,cAAd,EAA8B;AAC7BC,QAAAA,YAAY,CAACE,KAAb,GAAqBA,KAArB;AACA;AACD;;AAED,WAAOF,YAAP;AACA;;AAEDI,EAAAA,oBAAoB,CAAChD,aAAD,EAAgBjB,UAAhB,EAA4BjB,YAA5B,EAA0CmF,qBAA1C,EAAiEC,WAAjE,EAA8ElJ,KAA9E,EAAqF;AACxG,QAAI8D,YAAY,CAACqF,IAAb,KAAsB,SAA1B,EAAqC;AACpC,UAAIP,YAAY,GAAG,EAAnB;;AACA,UAAI,CAACnK,CAAC,CAAC2K,OAAF,CAAUtF,YAAY,CAACuF,OAAvB,CAAL,EAAsC;AACrCT,QAAAA,YAAY,GAAG5I,KAAK,CAACsJ,sBAAN,CAA6BtD,aAA7B,EAA4CjB,UAA5C,EAAwDjB,YAAxD,EAAsEoF,WAAtE,CAAf;;AACA,YAAI,CAACN,YAAL,EAAmB;AAClB;AACA;AACD,OALD,MAKO;AACNA,QAAAA,YAAY,GAAG;AACdrF,UAAAA,GAAG,EAAE,KAAKgG,mCAAL,CAAyCzF,YAAY,CAACR,IAAtD,CADS;AAEdtC,UAAAA,GAAG,EAAEgF,aAAa,CAAC3D,GAFL;AAGdmH,UAAAA,CAAC,EAAE;AACFnH,YAAAA,GAAG,EAAE0C,UAAU,CAAC1C,GADd;AAEF2C,YAAAA,QAAQ,EAAED,UAAU,CAACC;AAFnB;AAHW,SAAf;AASA,aAAK0D,aAAL,CAAmB3D,UAAU,CAACC,QAA9B,EAAwC4D,YAAxC;AACA;;AACDnK,MAAAA,CAAC,CAACgL,MAAF,CAASb,YAAT,EAAuBK,qBAAvB;;AACA,UAAInF,YAAY,CAAC4F,MAAjB,EAAyB;AACxBd,QAAAA,YAAY,CAACzG,QAAb,GAAwB,IAAIiE,IAAJ,CAASuD,QAAQ,CAAC7F,YAAY,CAAC4F,MAAb,CAAoBnF,EAApB,CAAuBqF,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAR,GAAiD,IAA1D,CAAxB;AACA;;AACDhB,MAAAA,YAAY,CAACiB,OAAb,GAAuB/F,YAAY,CAACS,EAApC;;AACA,UAAIT,YAAY,CAACgG,SAAjB,EAA4B;AAC3B,cAAMC,QAAQ,GAAG/K,QAAQ,CAACgL,gBAAT,CAA0BlG,YAAY,CAACgG,SAAvC,CAAjB;;AACA,YAAIC,QAAJ,EAAc;AACbnB,UAAAA,YAAY,CAACqB,IAAb,GAAoBF,QAAQ,CAAC1H,GAA7B;AACA;AACD;;AACD,UAAIyB,YAAY,CAACuF,OAAb,KAAyB,aAA7B,EAA4C;AAC3CtE,QAAAA,UAAU,GAAG7F,KAAK,CAACwC,WAAN,CAAkB,YAAlB,EAAgC;AAAEwI,UAAAA,MAAM,EAAE;AAAElF,YAAAA,QAAQ,EAAE;AAAZ;AAAV,SAAhC,CAAb;AACA;;AAED,UAAIlB,YAAY,CAACqG,SAAb,IAA0BrG,YAAY,CAACqG,SAAb,CAAuBlK,OAAvB,CAA+B6D,YAAY,CAACC,OAA5C,MAAyD,CAAC,CAAxF,EAA2F;AAC1F6E,QAAAA,YAAY,CAACwB,MAAb,GAAsB,IAAtB;AACAxB,QAAAA,YAAY,CAACyB,QAAb,GAAwBjE,IAAI,CAACkE,GAA7B;AACA1B,QAAAA,YAAY,CAAC2B,QAAb,GAAwB9L,CAAC,CAAC+L,IAAF,CAAOzF,UAAP,EAAmB,KAAnB,EAA0B,UAA1B,CAAxB;AACA;;AACD,UAAIjB,YAAY,CAACuF,OAAb,KAAyB,aAA7B,EAA4C;AAC3C3K,QAAAA,MAAM,CAAC+L,UAAP,CAAkB,MAAM;AACvB,cAAI3G,YAAY,CAAC2E,MAAb,IAAuB3E,YAAY,CAACS,EAAxC,EAA4C;AAC3C;AACA,gBAAI,CAACvF,QAAQ,CAAC0L,6BAAT,CAAuC5G,YAAY,CAAC2E,MAApD,EAA4D3E,YAAY,CAACS,EAAzE,CAAL,EAAmF;AAClFnF,cAAAA,WAAW,CAAC2F,UAAD,EAAa6D,YAAb,EAA2B5C,aAA3B,EAA0C,IAA1C,CAAX;AACA;AACD;AACD,SAPD,EAOG,GAPH;AAQA,OATD,MASO;AACNnH,QAAAA,YAAY,CAACW,KAAb,CAAmB,6BAAnB;AACAJ,QAAAA,WAAW,CAAC2F,UAAD,EAAa6D,YAAb,EAA2B5C,aAA3B,EAA0C,IAA1C,CAAX;AACA;AACD;AACD;;AAEDuD,EAAAA,mCAAmC,CAACoB,WAAD,EAAc;AAChD,QAAI,CAAClM,CAAC,CAAC2K,OAAF,CAAUuB,WAAV,CAAL,EAA6B;AAC5BA,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,cAApB,EAAoC,MAApC,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,aAApB,EAAmC,MAAnC,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,QAApB,EAA8B,GAA9B,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,iBAApB,EAAuC,SAAvC,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,SAApB,EAA+B,UAA/B,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,OAApB,EAA6B,MAA7B,CAAd;AACA4I,MAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoB,qBAApB,EAA2C,IAA3C,CAAd;AAEA4I,MAAAA,WAAW,CAAC5I,OAAZ,CAAoB,qCAApB,EAA2D,CAAC6I,KAAD,EAAQC,MAAR,KAAmB;AAC7E,YAAI,CAAC,KAAKpL,QAAL,CAAcoL,MAAd,CAAL,EAA4B;AAC3B,eAAKzG,QAAL,CAAcyG,MAAd,KAAyB,KAAKxG,OAAL,CAAawG,MAAb,CAAzB,CAD2B,CACoB;AAC/C;;AACD,cAAMpL,QAAQ,GAAG,KAAKA,QAAL,CAAcoL,MAAd,CAAjB;;AACA,YAAIpL,QAAJ,EAAc;AACbkL,UAAAA,WAAW,GAAGA,WAAW,CAAC5I,OAAZ,CAAoBtC,QAAQ,CAACO,KAA7B,EAAoCP,QAAQ,CAACoH,MAA7C,CAAd;AACA;AACD,OARD;AASA,KAtBD,MAsBO;AACN8D,MAAAA,WAAW,GAAG,EAAd;AACA;;AACD,WAAOA,WAAP;AACA;;AA3gBiC","sourcesContent":["import util from 'util';\n\nimport _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Random } from 'meteor/random';\n\nimport { rocketLogger } from './logger';\nimport { callbacks } from '../../../lib/callbacks';\nimport { settings } from '../../settings';\nimport { Messages, Rooms, Users } from '../../models';\nimport { createRoom, sendMessage, setUserAvatar } from '../../lib';\n\nexport default class RocketAdapter {\n\tconstructor(slackBridge) {\n\t\trocketLogger.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.util = util;\n\t\tthis.userTags = {};\n\t\tthis.slackAdapters = [];\n\t}\n\n\tconnect() {\n\t\tthis.registerForEvents();\n\t}\n\n\tdisconnect() {\n\t\tthis.unregisterForEvents();\n\t}\n\n\taddSlack(slack) {\n\t\tif (this.slackAdapters.indexOf(slack) < 0) {\n\t\t\tthis.slackAdapters.push(slack);\n\t\t}\n\t}\n\n\tclearSlackAdapters() {\n\t\tthis.slackAdapters = [];\n\t}\n\n\tregisterForEvents() {\n\t\trocketLogger.debug('Register for events');\n\t\tcallbacks.add('afterSaveMessage', this.onMessage.bind(this), callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tcallbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tcallbacks.add('setReaction', this.onSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tcallbacks.add('unsetReaction', this.onUnSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForEvents() {\n\t\trocketLogger.debug('Unregister for events');\n\t\tcallbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tcallbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tcallbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tcallbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tonMessageDelete(rocketMessageDeleted) {\n\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\ttry {\n\t\t\t\tif (!slack.getSlackChannel(rocketMessageDeleted.rid)) {\n\t\t\t\t\t// This is on a channel that the rocket bot is not subscribed on this slack server\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\trocketLogger.debug('onRocketMessageDelete', rocketMessageDeleted);\n\t\t\t\tslack.postDeleteMessage(rocketMessageDeleted);\n\t\t\t} catch (err) {\n\t\t\t\trocketLogger.error('Unhandled error onMessageDelete', err);\n\t\t\t}\n\t\t});\n\t}\n\n\tonSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trocketLogger.debug('onRocketSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`set${rocketMsgID}${reaction}`)) {\n\t\t\t\t\t// This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rocketMsg = Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\t\t\t\tconst slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\t\tif (slackChannel != null) {\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tslack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\trocketLogger.error('Unhandled error onSetReaction', err);\n\t\t}\n\t}\n\n\tonUnSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trocketLogger.debug('onRocketUnSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`unset${rocketMsgID}${reaction}`)) {\n\t\t\t\t\t// This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rocketMsg = Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\t\t\t\tconst slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\t\tif (slackChannel != null) {\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tslack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\trocketLogger.error('Unhandled error onUnSetReaction', err);\n\t\t}\n\t}\n\n\tonMessage(rocketMessage) {\n\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\ttry {\n\t\t\t\tif (!slack.getSlackChannel(rocketMessage.rid)) {\n\t\t\t\t\t// This is on a channel that the rocket bot is not subscribed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\trocketLogger.debug('onRocketMessage', rocketMessage);\n\n\t\t\t\tif (rocketMessage.editedAt) {\n\t\t\t\t\t// This is an Edit Event\n\t\t\t\t\tthis.processMessageChanged(rocketMessage, slack);\n\t\t\t\t\treturn rocketMessage;\n\t\t\t\t}\n\t\t\t\t// Ignore messages originating from Slack\n\t\t\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\t\t\treturn rocketMessage;\n\t\t\t\t}\n\n\t\t\t\tif (rocketMessage.file) {\n\t\t\t\t\treturn this.processFileShare(rocketMessage, slack);\n\t\t\t\t}\n\n\t\t\t\t// A new message from Rocket.Chat\n\t\t\t\tthis.processSendMessage(rocketMessage, slack);\n\t\t\t} catch (err) {\n\t\t\t\trocketLogger.error('Unhandled error onMessage', err);\n\t\t\t}\n\t\t});\n\n\t\treturn rocketMessage;\n\t}\n\n\tprocessSendMessage(rocketMessage, slack) {\n\t\t// Since we got this message, SlackBridge_Out_Enabled is true\n\t\tif (settings.get('SlackBridge_Out_All') === true) {\n\t\t\tslack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t} else {\n\t\t\t// They want to limit to certain groups\n\t\t\tconst outSlackChannels = _.pluck(settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t\t// rocketLogger.debug('Out SlackChannels: ', outSlackChannels);\n\t\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\t\tslack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetMessageAttachment(rocketMessage) {\n\t\tif (!rocketMessage.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rocketMessage.attachments || !rocketMessage.attachments.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileId = rocketMessage.file._id;\n\t\treturn rocketMessage.attachments.find((attachment) => attachment.title_link && attachment.title_link.indexOf(`/${fileId}/`) >= 0);\n\t}\n\n\tprocessFileShare(rocketMessage, slack) {\n\t\tif (!settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (rocketMessage.file.name) {\n\t\t\tlet fileName = rocketMessage.file.name;\n\t\t\tlet text = rocketMessage.msg;\n\n\t\t\tconst attachment = this.getMessageAttachment(rocketMessage);\n\t\t\tif (attachment) {\n\t\t\t\tfileName = Meteor.absoluteUrl(attachment.title_link);\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = attachment.description;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst message = `${text} ${fileName}`;\n\n\t\t\trocketMessage.msg = message;\n\t\t\tslack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t}\n\t}\n\n\tprocessMessageChanged(rocketMessage, slack) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t// We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This was a change from Rocket.Chat\n\t\t\tconst slackChannel = slack.getSlackChannel(rocketMessage.rid);\n\t\t\tslack.postMessageUpdate(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\tgetChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findChannel(slackMessage.channel) || this.addChannel(slackMessage.channel) : null;\n\t}\n\n\tgetUser(slackUser) {\n\t\treturn slackUser ? this.findUser(slackUser) || this.addUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${slackChannel}-${ts.replace(/\\./g, '-')}`;\n\t}\n\n\tfindChannel(slackChannelId) {\n\t\treturn Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\tgetRocketUsers(members, slackChannel) {\n\t\tconst rocketUsers = [];\n\t\tfor (const member of members) {\n\t\t\tif (member !== slackChannel.creator) {\n\t\t\t\tconst rocketUser = this.findUser(member) || this.addUser(member);\n\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn rocketUsers;\n\t}\n\n\tgetRocketUserCreator(slackChannel) {\n\t\treturn slackChannel.creator ? this.findUser(slackChannel.creator) || this.addUser(slackChannel.creator) : null;\n\t}\n\n\taddChannel(slackChannelID, hasRetried = false) {\n\t\trocketLogger.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet addedRoom;\n\n\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\tif (addedRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst slackChannel = slack.slackAPI.getRoomInfo(slackChannelID);\n\t\t\tif (slackChannel) {\n\t\t\t\tconst members = slack.slackAPI.getMembers(slackChannelID);\n\t\t\t\tif (!members) {\n\t\t\t\t\trocketLogger.error('Could not fetch room members');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rocketRoom = Rooms.findOneByName(slackChannel.name);\n\n\t\t\t\tif (rocketRoom || slackChannel.is_general) {\n\t\t\t\t\tslackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n\t\t\t\t\tRooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t} else {\n\t\t\t\t\tconst rocketUsers = this.getRocketUsers(members, slackChannel);\n\t\t\t\t\tconst rocketUserCreator = this.getRocketUserCreator(slackChannel);\n\n\t\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\t\trocketLogger.error('Could not fetch room creator information', slackChannel.creator);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst rocketChannel = createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\t\trocketChannel.rocketId = rocketChannel.rid;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\t\trocketLogger.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\t\treturn this.findChannel(slackChannelID) || this.addChannel(slackChannelID, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trocketLogger.error(e.message);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst roomUpdate = {\n\t\t\t\t\t\tts: new Date(slackChannel.created * 1000),\n\t\t\t\t\t};\n\n\t\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\t\tif (slackChannel.topic && slackChannel.topic.value) {\n\t\t\t\t\t\troomUpdate.topic = slackChannel.topic.value;\n\t\t\t\t\t\tlastSetTopic = slackChannel.topic.last_set;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (slackChannel.purpose && slackChannel.purpose.value && slackChannel.purpose.last_set > lastSetTopic) {\n\t\t\t\t\t\troomUpdate.topic = slackChannel.purpose.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tRooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t\tslack.addSlackChannel(slackChannel.rocketId, slackChannelID);\n\t\t\t\t}\n\n\t\t\t\taddedRoom = Rooms.findOneById(slackChannel.rocketId);\n\t\t\t}\n\t\t});\n\n\t\tif (!addedRoom) {\n\t\t\trocketLogger.debug('Channel not added');\n\t\t}\n\t\treturn addedRoom;\n\t}\n\n\tfindUser(slackUserID) {\n\t\tconst rocketUser = Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = {\n\t\t\t\tslack: `<@${slackUserID}>`,\n\t\t\t\trocket: `@${rocketUser.username}`,\n\t\t\t};\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddUser(slackUserID) {\n\t\trocketLogger.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tlet addedUser;\n\t\tthis.slackAdapters.forEach((slack) => {\n\t\t\tif (addedUser) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst user = slack.slackAPI.getUser(slackUserID);\n\t\t\tif (user) {\n\t\t\t\tconst rocketUserData = user;\n\t\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\t\tconst email = (rocketUserData.profile && rocketUserData.profile.email) || '';\n\t\t\t\tlet existingRocketUser;\n\t\t\t\tif (!isBot) {\n\t\t\t\t\texistingRocketUser = Users.findOneByEmailAddress(email) || Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n\t\t\t\t} else {\n\t\t\t\t\texistingRocketUser = Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n\t\t\t\t}\n\n\t\t\t\tif (existingRocketUser) {\n\t\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t\t} else {\n\t\t\t\t\tconst newUser = {\n\t\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\t\tusername: rocketUserData.name,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!isBot && email) {\n\t\t\t\t\t\tnewUser.email = email;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isBot) {\n\t\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t\t}\n\n\t\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\t\tconst userUpdate = {\n\t\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\t\troles: isBot ? ['bot'] : ['user'],\n\t\t\t\t\t};\n\n\t\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\t\tuserUpdate.name = rocketUserData.profile.real_name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\t\tuserUpdate.active = false;\n\t\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tUsers.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\t\tconst user = Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\t\tlet url = null;\n\t\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (url) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsetUserAvatar(user, url, null, 'url');\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\trocketLogger.debug('Error setting user avatar', error.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst importIds = [rocketUserData.id];\n\t\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t\t}\n\t\t\t\tUsers.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\t\tthis.userTags[slackUserID] = {\n\t\t\t\t\t\tslack: `<@${slackUserID}>`,\n\t\t\t\t\t\trocket: `@${rocketUserData.name}`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\taddedUser = Users.findOneById(rocketUserData.rocketId);\n\t\t\t}\n\t\t});\n\n\t\tif (!addedUser) {\n\t\t\trocketLogger.debug('User not added');\n\t\t}\n\n\t\treturn addedUser;\n\t}\n\n\taddAliasToMsg(rocketUserName, rocketMsgObj) {\n\t\tconst aliasFormat = settings.get('SlackBridge_AliasFormat');\n\t\tif (aliasFormat) {\n\t\t\tconst alias = this.util.format(aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting, slack) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\trocketMsgObj.slackTs = slackMessage.ts;\n\t\t\tif (slackMessage.thread_ts) {\n\t\t\t\tconst tmessage = Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tif (tmessage) {\n\t\t\t\t\trocketMsgObj.tmid = tmessage._id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts) {\n\t\t\t\t\t\t// Make sure that a message with the same bot_id and timestamp doesn't already exists\n\t\t\t\t\t\tif (!Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\t\tsendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\trocketLogger.debug('Send message to Rocket.Chat');\n\t\t\t\tsendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findUser(userId) || this.addUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n}\n"]},"sourceType":"module","hash":"17754dca5492c96f9f9cc64a0367ce42aec3a531"}
