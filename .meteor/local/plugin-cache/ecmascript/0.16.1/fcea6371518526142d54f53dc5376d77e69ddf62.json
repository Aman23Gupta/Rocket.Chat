{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/provider.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/chatpal-search/server/provider/provider.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/provider.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/chatpal-search/server/provider/provider.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/chatpal-search/server/provider/provider.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet searchProviderService, SearchProvider;\nmodule.link(\"../../../search/server\", {\n  searchProviderService(v) {\n    searchProviderService = v;\n  },\n\n  SearchProvider(v) {\n    SearchProvider = v;\n  }\n\n}, 1);\nlet ChatpalLogger;\nmodule.link(\"../utils/logger\", {\n  default(v) {\n    ChatpalLogger = v;\n  }\n\n}, 2);\nlet Subscriptions, Rooms;\nmodule.link(\"../../../models\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet baseUrl;\nmodule.link(\"../utils/settings\", {\n  baseUrl(v) {\n    baseUrl = v;\n  }\n\n}, 4);\nlet Index;\nmodule.link(\"./index\", {\n  default(v) {\n    Index = v;\n  }\n\n}, 5);\n\n/**\n * The chatpal search provider enables chatpal search. An appropriate backedn has to be specified by settings.\n */\nclass ChatpalProvider extends SearchProvider {\n  /**\n   * Create chatpal provider with some settings for backend and ui\n   */\n  constructor() {\n    super('chatpalProvider');\n    this.chatpalBaseUrl = \"\".concat(baseUrl);\n    ChatpalLogger.debug(\"Using \".concat(this.chatpalBaseUrl, \" as chatpal base url\"));\n\n    this._settings.add('Backend', 'select', 'cloud', {\n      values: [{\n        key: 'cloud',\n        i18nLabel: 'Cloud Service'\n      }, {\n        key: 'onsite',\n        i18nLabel: 'On-Site'\n      }],\n      i18nLabel: 'Chatpal_Backend',\n      i18nDescription: 'Chatpal_Backend_Description'\n    });\n\n    this._settings.add('API_Key', 'string', '', {\n      enableQuery: [{\n        _id: 'Search.chatpalProvider.Backend',\n        value: 'cloud'\n      }],\n      i18nLabel: 'Chatpal_API_Key',\n      i18nDescription: 'Chatpal_API_Key_Description'\n    });\n\n    this._settings.add('Base_URL', 'string', '', {\n      enableQuery: [{\n        _id: 'Search.chatpalProvider.Backend',\n        value: 'onsite'\n      }],\n      i18nLabel: 'Chatpal_Base_URL',\n      i18nDescription: 'Chatpal_Base_URL_Description'\n    });\n\n    this._settings.add('HTTP_Headers', 'string', '', {\n      enableQuery: [{\n        _id: 'Search.chatpalProvider.Backend',\n        value: 'onsite'\n      }],\n      multiline: true,\n      i18nLabel: 'Chatpal_HTTP_Headers',\n      i18nDescription: 'Chatpal_HTTP_Headers_Description'\n    });\n\n    this._settings.add('Main_Language', 'select', 'en', {\n      values: [{\n        key: 'en',\n        i18nLabel: 'English'\n      }, {\n        key: 'none',\n        i18nLabel: 'Language_Not_set'\n      }, {\n        key: 'cs',\n        i18nLabel: 'Czech'\n      }, {\n        key: 'de',\n        i18nLabel: 'Deutsch'\n      }, {\n        key: 'el',\n        i18nLabel: 'Greek'\n      }, {\n        key: 'es',\n        i18nLabel: 'Spanish'\n      }, {\n        key: 'fi',\n        i18nLabel: 'Finish'\n      }, {\n        key: 'fr',\n        i18nLabel: 'French'\n      }, {\n        key: 'hu',\n        i18nLabel: 'Hungarian'\n      }, {\n        key: 'it',\n        i18nLabel: 'Italian'\n      }, {\n        key: 'nl',\n        i18nLabel: 'Dutsch'\n      }, {\n        key: 'pl',\n        i18nLabel: 'Polish'\n      }, {\n        key: 'pt',\n        i18nLabel: 'Portuguese'\n      }, {\n        key: 'pt_BR',\n        i18nLabel: 'Brasilian'\n      }, {\n        key: 'ro',\n        i18nLabel: 'Romanian'\n      }, {\n        key: 'ru',\n        i18nLabel: 'Russian'\n      }, {\n        key: 'sv',\n        i18nLabel: 'Swedisch'\n      }, {\n        key: 'tr',\n        i18nLabel: 'Turkish'\n      }, {\n        key: 'uk',\n        i18nLabel: 'Ukrainian'\n      }],\n      i18nLabel: 'Chatpal_Main_Language',\n      i18nDescription: 'Chatpal_Main_Language_Description'\n    });\n\n    this._settings.add('DefaultResultType', 'select', 'All', {\n      values: [{\n        key: 'All',\n        i18nLabel: 'Chatpal_All_Results'\n      }, {\n        key: 'Room',\n        i18nLabel: 'Chatpal_Current_Room_Only'\n      }, {\n        key: 'Messages',\n        i18nLabel: 'Chatpal_Messages_Only'\n      }],\n      i18nLabel: 'Chatpal_Default_Result_Type',\n      i18nDescription: 'Chatpal_Default_Result_Type_Description'\n    });\n\n    this._settings.add('PageSize', 'int', 15, {\n      i18nLabel: 'Search_Page_Size'\n    });\n\n    this._settings.add('SuggestionEnabled', 'boolean', true, {\n      i18nLabel: 'Chatpal_Suggestion_Enabled',\n      alert: 'This feature is currently in beta and will be extended in the future'\n    });\n\n    this._settings.add('IncludeAllPublicChannels', 'boolean', false, {\n      i18nLabel: 'Chatpal_Include_All_Public_Channels',\n      i18nDescription: 'Chatpal_Include_All_Public_Channels_Description'\n    });\n\n    this._settings.add('BatchSize', 'int', 100, {\n      i18nLabel: 'Chatpal_Batch_Size',\n      i18nDescription: 'Chatpal_Batch_Size_Description'\n    });\n\n    this._settings.add('TimeoutSize', 'int', 5000, {\n      i18nLabel: 'Chatpal_Timeout_Size',\n      i18nDescription: 'Chatpal_Timeout_Size_Description'\n    });\n\n    this._settings.add('WindowSize', 'int', 48, {\n      i18nLabel: 'Chatpal_Window_Size',\n      i18nDescription: 'Chatpal_Window_Size_Description'\n    });\n  }\n\n  get i18nLabel() {\n    return 'Chatpal Provider';\n  }\n\n  get iconName() {\n    return 'chatpal-logo-icon-darkblue';\n  }\n\n  get resultTemplate() {\n    return 'ChatpalSearchResultTemplate';\n  }\n\n  get suggestionItemTemplate() {\n    return 'ChatpalSuggestionItemTemplate';\n  }\n\n  get supportsSuggestions() {\n    return this._settings.get('SuggestionEnabled');\n  }\n  /**\n   * indexing for messages, rooms and users\n   * @inheritDoc\n   */\n\n\n  on(name, value, payload) {\n    if (!this.index) {\n      this.indexFail = true;\n      return false;\n    }\n\n    switch (name) {\n      case 'message.save':\n        return this.index.indexDoc('message', payload);\n\n      case 'user.save':\n        return this.index.indexDoc('user', payload);\n\n      case 'room.save':\n        return this.index.indexDoc('room', payload);\n\n      case 'message.delete':\n        return this.index.removeDoc('message', value);\n\n      case 'user.delete':\n        return this.index.removeDoc('user', value);\n\n      case 'room.delete':\n        return this.index.removeDoc('room', value);\n    }\n\n    return true;\n  }\n  /**\n   * Check if the index has to be deleted and completely new reindexed\n   * @param reason the reason for the provider start\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _checkForClear(reason) {\n    if (reason === 'startup') {\n      return false;\n    }\n\n    if (reason === 'switch') {\n      return true;\n    }\n\n    return this._indexConfig.backendtype !== this._settings.get('Backend') || this._indexConfig.backendtype === 'onsite' && this._indexConfig.baseurl !== (this._settings.get('Base_URL').endsWith('/') ? this._settings.get('Base_URL').slice(0, -1) : this._settings.get('Base_URL')) || this._indexConfig.backendtype === 'cloud' && this._indexConfig.httpOptions.headers['X-Api-Key'] !== this._settings.get('API_Key') || this._indexConfig.language !== this._settings.get('Main_Language');\n  }\n  /**\n   * parse string to object that can be used as header for HTTP calls\n   * @returns {{}}\n   * @private\n   */\n\n\n  _parseHeaders() {\n    const headers = {};\n\n    const sh = this._settings.get('HTTP_Headers').split('\\n');\n\n    sh.forEach(function (d) {\n      const ds = d.split(':');\n\n      if (ds.length === 2 && ds[0].trim() !== '') {\n        headers[ds[0]] = ds[1];\n      }\n    });\n    return headers;\n  }\n  /**\n   * ping if configuration has been set correctly\n   * @param config\n   * @param resolve if ping was successfull\n   * @param reject if some error occurs\n   * @param timeout until ping is repeated\n   * @private\n   */\n\n\n  _ping(config, resolve, reject) {\n    let timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5000;\n    const maxTimeout = 200000;\n    const stats = Index.ping(config);\n\n    if (stats) {\n      ChatpalLogger.debug('ping was successfull');\n      resolve({\n        config,\n        stats\n      });\n    } else {\n      ChatpalLogger.warn(\"ping failed, retry in \".concat(timeout, \" ms\"));\n      this._pingTimeout = Meteor.setTimeout(() => {\n        this._ping(config, resolve, reject, Math.min(maxTimeout, 2 * timeout));\n      }, timeout);\n    }\n  }\n  /**\n   * Get index config based on settings\n   * @param callback\n   * @private\n   */\n\n\n  _getIndexConfig() {\n    return new Promise((resolve, reject) => {\n      const config = {\n        backendtype: this._settings.get('Backend')\n      };\n\n      if (this._settings.get('Backend') === 'cloud') {\n        config.baseurl = this.chatpalBaseUrl;\n        config.language = this._settings.get('Main_Language');\n        config.searchpath = 'search/search';\n        config.updatepath = 'search/update';\n        config.pingpath = 'search/ping';\n        config.clearpath = 'search/clear';\n        config.suggestionpath = 'search/suggest';\n        config.httpOptions = {\n          headers: {\n            'X-Api-Key': this._settings.get('API_Key')\n          }\n        };\n      } else {\n        config.baseurl = this._settings.get('Base_URL').replace(/\\/?$/, '/');\n        config.language = this._settings.get('Main_Language');\n        config.searchpath = 'chatpal/search';\n        config.updatepath = 'chatpal/update';\n        config.pingpath = 'chatpal/ping';\n        config.clearpath = 'chatpal/clear';\n        config.suggestionpath = 'chatpal/suggest';\n        config.httpOptions = {\n          headers: this._parseHeaders()\n        };\n      }\n\n      config.batchSize = this._settings.get('BatchSize');\n      config.timeout = this._settings.get('TimeoutSize');\n      config.windowSize = this._settings.get('WindowSize');\n\n      this._ping(config, resolve, reject);\n    });\n  }\n  /**\n   * @inheritDoc\n   * @param callback\n   */\n\n\n  stop(resolve) {\n    ChatpalLogger.info('Provider stopped');\n    Meteor.clearTimeout(this._pingTimeout);\n    this.indexFail = false;\n    this.index && this.index.stop();\n    resolve();\n  }\n  /**\n   * @inheritDoc\n   * @param reason\n   * @param resolve\n   * @param reject\n   */\n\n\n  start(reason, resolve, reject) {\n    const clear = this._checkForClear(reason);\n\n    ChatpalLogger.debug(\"clear = \".concat(clear, \" with reason '\").concat(reason, \"'\"));\n\n    this._getIndexConfig().then(server => {\n      this._indexConfig = server.config;\n      this._stats = server.stats;\n      ChatpalLogger.debug({\n        config: this._indexConfig\n      });\n      ChatpalLogger.debug({\n        stats: this._stats\n      });\n      this.index = new Index(this._indexConfig, this.indexFail || clear, this._stats.message.oldest || new Date().valueOf());\n      resolve();\n    }, reject);\n  }\n  /**\n   * returns a list of rooms that are allowed to be seen by current user\n   * @param context\n   * @private\n   */\n\n\n  _getAcl(context) {\n    let aclRoomsIds = [];\n    const subscribedRooms = Subscriptions.find({\n      'u._id': context.uid\n    }).fetch().map(room => room.rid);\n    aclRoomsIds = aclRoomsIds.concat(subscribedRooms);\n\n    if (this._settings.get('IncludeAllPublicChannels')) {\n      const publicRooms = Rooms.findByType('c').fetch().map(room => room._id);\n      aclRoomsIds = aclRoomsIds.concat(publicRooms);\n    } // return unique room ids\n\n\n    return [...new Set(aclRoomsIds)];\n  }\n  /**\n   * @inheritDoc\n   * @returns {*}\n   */\n\n\n  search(text, context, payload, callback) {\n    if (!this.index) {\n      return callback({\n        msg: 'Chatpal_currently_not_active'\n      });\n    }\n\n    const type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n    const params = Object.assign({}, payload.custom);\n    this.index.query(text, this._settings.get('Main_Language'), payload.resultType === 'Room' ? [context.rid] : this._getAcl(context), type, payload.start || 0, payload.rows || this._settings.get('PageSize'), callback, params);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  suggest(text, context, payload, callback) {\n    if (!this.index) {\n      return callback({\n        msg: 'Chatpal_currently_not_active'\n      });\n    }\n\n    const type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n    this.index.suggest(text, this._settings.get('Main_Language'), this._getAcl(context), type, callback);\n  }\n\n}\n\nsearchProviderService.register(new ChatpalProvider());","map":{"version":3,"sources":["app/chatpal-search/server/provider/provider.js"],"names":["Meteor","module","link","v","searchProviderService","SearchProvider","ChatpalLogger","default","Subscriptions","Rooms","baseUrl","Index","ChatpalProvider","constructor","chatpalBaseUrl","debug","_settings","add","values","key","i18nLabel","i18nDescription","enableQuery","_id","value","multiline","alert","iconName","resultTemplate","suggestionItemTemplate","supportsSuggestions","get","on","name","payload","index","indexFail","indexDoc","removeDoc","_checkForClear","reason","_indexConfig","backendtype","baseurl","endsWith","slice","httpOptions","headers","language","_parseHeaders","sh","split","forEach","d","ds","length","trim","_ping","config","resolve","reject","timeout","maxTimeout","stats","ping","warn","_pingTimeout","setTimeout","Math","min","_getIndexConfig","Promise","searchpath","updatepath","pingpath","clearpath","suggestionpath","replace","batchSize","windowSize","stop","info","clearTimeout","start","clear","then","server","_stats","message","oldest","Date","valueOf","_getAcl","context","aclRoomsIds","subscribedRooms","find","uid","fetch","map","room","rid","concat","publicRooms","findByType","Set","search","text","callback","msg","type","resultType","params","Object","assign","custom","query","rows","suggest","register"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { searchProviderService, SearchProvider } from '../../../search/server';\nimport ChatpalLogger from '../utils/logger';\nimport { Subscriptions, Rooms } from '../../../models';\nimport { baseUrl } from '../utils/settings';\nimport Index from './index';\n\n/**\n * The chatpal search provider enables chatpal search. An appropriate backedn has to be specified by settings.\n */\nclass ChatpalProvider extends SearchProvider {\n\t/**\n\t * Create chatpal provider with some settings for backend and ui\n\t */\n\tconstructor() {\n\t\tsuper('chatpalProvider');\n\n\t\tthis.chatpalBaseUrl = `${baseUrl}`;\n\n\t\tChatpalLogger.debug(`Using ${this.chatpalBaseUrl} as chatpal base url`);\n\n\t\tthis._settings.add('Backend', 'select', 'cloud', {\n\t\t\tvalues: [\n\t\t\t\t{ key: 'cloud', i18nLabel: 'Cloud Service' },\n\t\t\t\t{ key: 'onsite', i18nLabel: 'On-Site' },\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Backend',\n\t\t\ti18nDescription: 'Chatpal_Backend_Description',\n\t\t});\n\t\tthis._settings.add('API_Key', 'string', '', {\n\t\t\tenableQuery: [\n\t\t\t\t{\n\t\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\t\tvalue: 'cloud',\n\t\t\t\t},\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_API_Key',\n\t\t\ti18nDescription: 'Chatpal_API_Key_Description',\n\t\t});\n\t\tthis._settings.add('Base_URL', 'string', '', {\n\t\t\tenableQuery: [\n\t\t\t\t{\n\t\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\t\tvalue: 'onsite',\n\t\t\t\t},\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Base_URL',\n\t\t\ti18nDescription: 'Chatpal_Base_URL_Description',\n\t\t});\n\t\tthis._settings.add('HTTP_Headers', 'string', '', {\n\t\t\tenableQuery: [\n\t\t\t\t{\n\t\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\t\tvalue: 'onsite',\n\t\t\t\t},\n\t\t\t],\n\t\t\tmultiline: true,\n\t\t\ti18nLabel: 'Chatpal_HTTP_Headers',\n\t\t\ti18nDescription: 'Chatpal_HTTP_Headers_Description',\n\t\t});\n\t\tthis._settings.add('Main_Language', 'select', 'en', {\n\t\t\tvalues: [\n\t\t\t\t{ key: 'en', i18nLabel: 'English' },\n\t\t\t\t{ key: 'none', i18nLabel: 'Language_Not_set' },\n\t\t\t\t{ key: 'cs', i18nLabel: 'Czech' },\n\t\t\t\t{ key: 'de', i18nLabel: 'Deutsch' },\n\t\t\t\t{ key: 'el', i18nLabel: 'Greek' },\n\t\t\t\t{ key: 'es', i18nLabel: 'Spanish' },\n\t\t\t\t{ key: 'fi', i18nLabel: 'Finish' },\n\t\t\t\t{ key: 'fr', i18nLabel: 'French' },\n\t\t\t\t{ key: 'hu', i18nLabel: 'Hungarian' },\n\t\t\t\t{ key: 'it', i18nLabel: 'Italian' },\n\t\t\t\t{ key: 'nl', i18nLabel: 'Dutsch' },\n\t\t\t\t{ key: 'pl', i18nLabel: 'Polish' },\n\t\t\t\t{ key: 'pt', i18nLabel: 'Portuguese' },\n\t\t\t\t{ key: 'pt_BR', i18nLabel: 'Brasilian' },\n\t\t\t\t{ key: 'ro', i18nLabel: 'Romanian' },\n\t\t\t\t{ key: 'ru', i18nLabel: 'Russian' },\n\t\t\t\t{ key: 'sv', i18nLabel: 'Swedisch' },\n\t\t\t\t{ key: 'tr', i18nLabel: 'Turkish' },\n\t\t\t\t{ key: 'uk', i18nLabel: 'Ukrainian' },\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Main_Language',\n\t\t\ti18nDescription: 'Chatpal_Main_Language_Description',\n\t\t});\n\t\tthis._settings.add('DefaultResultType', 'select', 'All', {\n\t\t\tvalues: [\n\t\t\t\t{ key: 'All', i18nLabel: 'Chatpal_All_Results' },\n\t\t\t\t{ key: 'Room', i18nLabel: 'Chatpal_Current_Room_Only' },\n\t\t\t\t{ key: 'Messages', i18nLabel: 'Chatpal_Messages_Only' },\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Default_Result_Type',\n\t\t\ti18nDescription: 'Chatpal_Default_Result_Type_Description',\n\t\t});\n\t\tthis._settings.add('PageSize', 'int', 15, {\n\t\t\ti18nLabel: 'Search_Page_Size',\n\t\t});\n\t\tthis._settings.add('SuggestionEnabled', 'boolean', true, {\n\t\t\ti18nLabel: 'Chatpal_Suggestion_Enabled',\n\t\t\talert: 'This feature is currently in beta and will be extended in the future',\n\t\t});\n\t\tthis._settings.add('IncludeAllPublicChannels', 'boolean', false, {\n\t\t\ti18nLabel: 'Chatpal_Include_All_Public_Channels',\n\t\t\ti18nDescription: 'Chatpal_Include_All_Public_Channels_Description',\n\t\t});\n\t\tthis._settings.add('BatchSize', 'int', 100, {\n\t\t\ti18nLabel: 'Chatpal_Batch_Size',\n\t\t\ti18nDescription: 'Chatpal_Batch_Size_Description',\n\t\t});\n\t\tthis._settings.add('TimeoutSize', 'int', 5000, {\n\t\t\ti18nLabel: 'Chatpal_Timeout_Size',\n\t\t\ti18nDescription: 'Chatpal_Timeout_Size_Description',\n\t\t});\n\t\tthis._settings.add('WindowSize', 'int', 48, {\n\t\t\ti18nLabel: 'Chatpal_Window_Size',\n\t\t\ti18nDescription: 'Chatpal_Window_Size_Description',\n\t\t});\n\t}\n\n\tget i18nLabel() {\n\t\treturn 'Chatpal Provider';\n\t}\n\n\tget iconName() {\n\t\treturn 'chatpal-logo-icon-darkblue';\n\t}\n\n\tget resultTemplate() {\n\t\treturn 'ChatpalSearchResultTemplate';\n\t}\n\n\tget suggestionItemTemplate() {\n\t\treturn 'ChatpalSuggestionItemTemplate';\n\t}\n\n\tget supportsSuggestions() {\n\t\treturn this._settings.get('SuggestionEnabled');\n\t}\n\n\t/**\n\t * indexing for messages, rooms and users\n\t * @inheritDoc\n\t */\n\ton(name, value, payload) {\n\t\tif (!this.index) {\n\t\t\tthis.indexFail = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (name) {\n\t\t\tcase 'message.save':\n\t\t\t\treturn this.index.indexDoc('message', payload);\n\t\t\tcase 'user.save':\n\t\t\t\treturn this.index.indexDoc('user', payload);\n\t\t\tcase 'room.save':\n\t\t\t\treturn this.index.indexDoc('room', payload);\n\t\t\tcase 'message.delete':\n\t\t\t\treturn this.index.removeDoc('message', value);\n\t\t\tcase 'user.delete':\n\t\t\t\treturn this.index.removeDoc('user', value);\n\t\t\tcase 'room.delete':\n\t\t\t\treturn this.index.removeDoc('room', value);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if the index has to be deleted and completely new reindexed\n\t * @param reason the reason for the provider start\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_checkForClear(reason) {\n\t\tif (reason === 'startup') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (reason === 'switch') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (\n\t\t\tthis._indexConfig.backendtype !== this._settings.get('Backend') ||\n\t\t\t(this._indexConfig.backendtype === 'onsite' &&\n\t\t\t\tthis._indexConfig.baseurl !==\n\t\t\t\t\t(this._settings.get('Base_URL').endsWith('/') ? this._settings.get('Base_URL').slice(0, -1) : this._settings.get('Base_URL'))) ||\n\t\t\t(this._indexConfig.backendtype === 'cloud' && this._indexConfig.httpOptions.headers['X-Api-Key'] !== this._settings.get('API_Key')) ||\n\t\t\tthis._indexConfig.language !== this._settings.get('Main_Language')\n\t\t);\n\t}\n\n\t/**\n\t * parse string to object that can be used as header for HTTP calls\n\t * @returns {{}}\n\t * @private\n\t */\n\t_parseHeaders() {\n\t\tconst headers = {};\n\t\tconst sh = this._settings.get('HTTP_Headers').split('\\n');\n\t\tsh.forEach(function (d) {\n\t\t\tconst ds = d.split(':');\n\t\t\tif (ds.length === 2 && ds[0].trim() !== '') {\n\t\t\t\theaders[ds[0]] = ds[1];\n\t\t\t}\n\t\t});\n\t\treturn headers;\n\t}\n\n\t/**\n\t * ping if configuration has been set correctly\n\t * @param config\n\t * @param resolve if ping was successfull\n\t * @param reject if some error occurs\n\t * @param timeout until ping is repeated\n\t * @private\n\t */\n\t_ping(config, resolve, reject, timeout = 5000) {\n\t\tconst maxTimeout = 200000;\n\n\t\tconst stats = Index.ping(config);\n\n\t\tif (stats) {\n\t\t\tChatpalLogger.debug('ping was successfull');\n\t\t\tresolve({ config, stats });\n\t\t} else {\n\t\t\tChatpalLogger.warn(`ping failed, retry in ${timeout} ms`);\n\n\t\t\tthis._pingTimeout = Meteor.setTimeout(() => {\n\t\t\t\tthis._ping(config, resolve, reject, Math.min(maxTimeout, 2 * timeout));\n\t\t\t}, timeout);\n\t\t}\n\t}\n\n\t/**\n\t * Get index config based on settings\n\t * @param callback\n\t * @private\n\t */\n\t_getIndexConfig() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst config = {\n\t\t\t\tbackendtype: this._settings.get('Backend'),\n\t\t\t};\n\n\t\t\tif (this._settings.get('Backend') === 'cloud') {\n\t\t\t\tconfig.baseurl = this.chatpalBaseUrl;\n\t\t\t\tconfig.language = this._settings.get('Main_Language');\n\t\t\t\tconfig.searchpath = 'search/search';\n\t\t\t\tconfig.updatepath = 'search/update';\n\t\t\t\tconfig.pingpath = 'search/ping';\n\t\t\t\tconfig.clearpath = 'search/clear';\n\t\t\t\tconfig.suggestionpath = 'search/suggest';\n\t\t\t\tconfig.httpOptions = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'X-Api-Key': this._settings.get('API_Key'),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconfig.baseurl = this._settings.get('Base_URL').replace(/\\/?$/, '/');\n\t\t\t\tconfig.language = this._settings.get('Main_Language');\n\t\t\t\tconfig.searchpath = 'chatpal/search';\n\t\t\t\tconfig.updatepath = 'chatpal/update';\n\t\t\t\tconfig.pingpath = 'chatpal/ping';\n\t\t\t\tconfig.clearpath = 'chatpal/clear';\n\t\t\t\tconfig.suggestionpath = 'chatpal/suggest';\n\t\t\t\tconfig.httpOptions = {\n\t\t\t\t\theaders: this._parseHeaders(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconfig.batchSize = this._settings.get('BatchSize');\n\t\t\tconfig.timeout = this._settings.get('TimeoutSize');\n\t\t\tconfig.windowSize = this._settings.get('WindowSize');\n\n\t\t\tthis._ping(config, resolve, reject);\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @param callback\n\t */\n\tstop(resolve) {\n\t\tChatpalLogger.info('Provider stopped');\n\t\tMeteor.clearTimeout(this._pingTimeout);\n\t\tthis.indexFail = false;\n\t\tthis.index && this.index.stop();\n\t\tresolve();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @param reason\n\t * @param resolve\n\t * @param reject\n\t */\n\tstart(reason, resolve, reject) {\n\t\tconst clear = this._checkForClear(reason);\n\n\t\tChatpalLogger.debug(`clear = ${clear} with reason '${reason}'`);\n\n\t\tthis._getIndexConfig().then((server) => {\n\t\t\tthis._indexConfig = server.config;\n\n\t\t\tthis._stats = server.stats;\n\n\t\t\tChatpalLogger.debug({ config: this._indexConfig });\n\t\t\tChatpalLogger.debug({ stats: this._stats });\n\n\t\t\tthis.index = new Index(this._indexConfig, this.indexFail || clear, this._stats.message.oldest || new Date().valueOf());\n\n\t\t\tresolve();\n\t\t}, reject);\n\t}\n\n\t/**\n\t * returns a list of rooms that are allowed to be seen by current user\n\t * @param context\n\t * @private\n\t */\n\t_getAcl(context) {\n\t\tlet aclRoomsIds = [];\n\n\t\tconst subscribedRooms = Subscriptions.find({ 'u._id': context.uid })\n\t\t\t.fetch()\n\t\t\t.map((room) => room.rid);\n\t\taclRoomsIds = aclRoomsIds.concat(subscribedRooms);\n\n\t\tif (this._settings.get('IncludeAllPublicChannels')) {\n\t\t\tconst publicRooms = Rooms.findByType('c')\n\t\t\t\t.fetch()\n\t\t\t\t.map((room) => room._id);\n\t\t\taclRoomsIds = aclRoomsIds.concat(publicRooms);\n\t\t}\n\n\t\t// return unique room ids\n\t\treturn [...new Set(aclRoomsIds)];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @returns {*}\n\t */\n\tsearch(text, context, payload, callback) {\n\t\tif (!this.index) {\n\t\t\treturn callback({ msg: 'Chatpal_currently_not_active' });\n\t\t}\n\n\t\tconst type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n\t\tconst params = Object.assign({}, payload.custom);\n\n\t\tthis.index.query(\n\t\t\ttext,\n\t\t\tthis._settings.get('Main_Language'),\n\t\t\tpayload.resultType === 'Room' ? [context.rid] : this._getAcl(context),\n\t\t\ttype,\n\t\t\tpayload.start || 0,\n\t\t\tpayload.rows || this._settings.get('PageSize'),\n\t\t\tcallback,\n\t\t\tparams,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tsuggest(text, context, payload, callback) {\n\t\tif (!this.index) {\n\t\t\treturn callback({ msg: 'Chatpal_currently_not_active' });\n\t\t}\n\n\t\tconst type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n\n\t\tthis.index.suggest(text, this._settings.get('Main_Language'), this._getAcl(context), type, callback);\n\t}\n}\n\nsearchProviderService.register(new ChatpalProvider());\n"]},"sourceType":"module","hash":"fcea6371518526142d54f53dc5376d77e69ddf62"}
