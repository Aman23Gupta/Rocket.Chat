{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/methods/createDiscussion.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/discussion/server/methods/createDiscussion.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/methods/createDiscussion.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/discussion/server/methods/createDiscussion.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/discussion/server/methods/createDiscussion.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet hasAtLeastOnePermission, canSendMessage;\nmodule.link(\"../../../authorization/server\", {\n  hasAtLeastOnePermission(v) {\n    hasAtLeastOnePermission = v;\n  },\n\n  canSendMessage(v) {\n    canSendMessage = v;\n  }\n\n}, 4);\nlet Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 5);\nlet createRoom, addUserToRoom, sendMessage, attachMessage;\nmodule.link(\"../../../lib/server\", {\n  createRoom(v) {\n    createRoom = v;\n  },\n\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  },\n\n  sendMessage(v) {\n    sendMessage = v;\n  },\n\n  attachMessage(v) {\n    attachMessage = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\nlet roomTypes;\nmodule.link(\"../../../utils/server\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 8);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 9);\n\nconst getParentRoom = rid => {\n  const room = Rooms.findOne(rid);\n  return room && (room.prid ? Rooms.findOne(room.prid, {\n    fields: {\n      _id: 1\n    }\n  }) : room);\n};\n\nconst createDiscussionMessage = (rid, user, drid, msg, message_embedded) => {\n  const welcomeMessage = {\n    msg,\n    rid,\n    drid,\n    attachments: [message_embedded].filter(e => e)\n  };\n  return Messages.createWithTypeRoomIdMessageAndUser('discussion-created', rid, '', user, welcomeMessage);\n};\n\nconst mentionMessage = (rid, _ref, message_embedded) => {\n  let {\n    _id,\n    username,\n    name\n  } = _ref;\n  const welcomeMessage = {\n    rid,\n    u: {\n      _id,\n      username,\n      name\n    },\n    ts: new Date(),\n    _updatedAt: new Date(),\n    attachments: [message_embedded].filter(e => e)\n  };\n  return Messages.insert(welcomeMessage);\n};\n\nconst create = _ref2 => {\n  let {\n    prid,\n    pmid,\n    t_name,\n    reply,\n    users,\n    user,\n    encrypted\n  } = _ref2;\n  // if you set both, prid and pmid, and the rooms dont match... should throw an error)\n  let message = false;\n\n  if (pmid) {\n    message = Messages.findOne({\n      _id: pmid\n    });\n\n    if (!message) {\n      throw new Meteor.Error('error-invalid-message', 'Invalid message', {\n        method: 'DiscussionCreation'\n      });\n    }\n\n    if (prid) {\n      if (prid !== getParentRoom(message.rid)._id) {\n        throw new Meteor.Error('error-invalid-arguments', {\n          method: 'DiscussionCreation'\n        });\n      }\n    } else {\n      prid = message.rid;\n    }\n  }\n\n  if (!prid) {\n    throw new Meteor.Error('error-invalid-arguments', {\n      method: 'DiscussionCreation'\n    });\n  }\n\n  let p_room;\n\n  try {\n    p_room = canSendMessage(prid, {\n      uid: user._id,\n      username: user.username,\n      type: user.type\n    });\n  } catch (error) {\n    throw new Meteor.Error(error.message);\n  }\n\n  if (p_room.prid) {\n    throw new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n      method: 'DiscussionCreation'\n    });\n  }\n\n  if (!Match.Maybe(encrypted, Boolean)) {\n    throw new Meteor.Error('error-invalid-arguments', 'Invalid encryption state', {\n      method: 'DiscussionCreation'\n    });\n  }\n\n  if (typeof encrypted !== 'boolean') {\n    encrypted = p_room.encrypted;\n  }\n\n  if (encrypted && reply) {\n    throw new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n      method: 'DiscussionCreation'\n    });\n  }\n\n  if (pmid) {\n    const discussionAlreadyExists = Rooms.findOne({\n      prid,\n      pmid\n    }, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (discussionAlreadyExists) {\n      // do not allow multiple discussions to the same message'\\\n      addUserToRoom(discussionAlreadyExists._id, user);\n      return discussionAlreadyExists;\n    }\n  }\n\n  const name = Random.id(); // auto invite the replied message owner\n\n  const invitedUsers = message ? [message.u.username, ...users] : users;\n  const type = roomTypes.getConfig(p_room.t).getDiscussionType();\n  const description = p_room.encrypted ? '' : message.msg;\n  const topic = p_room.name;\n  const discussion = createRoom(type, name, user.username, [...new Set(invitedUsers)], false, {\n    fname: t_name,\n    description,\n    // TODO discussions remove\n    topic,\n    // TODO discussions remove\n    prid,\n    encrypted\n  }, {\n    // overrides name validation to allow anything, because discussion's name is randomly generated\n    nameValidationRegex: /.*/\n  });\n  let discussionMsg;\n\n  if (pmid) {\n    if (p_room.encrypted) {\n      message.msg = TAPi18n.__('Encrypted_message');\n    }\n\n    mentionMessage(discussion._id, user, attachMessage(message, p_room));\n    discussionMsg = createDiscussionMessage(message.rid, user, discussion._id, t_name, attachMessage(message, p_room));\n  } else {\n    discussionMsg = createDiscussionMessage(prid, user, discussion._id, t_name);\n  }\n\n  callbacks.runAsync('afterSaveMessage', discussionMsg, p_room);\n\n  if (reply) {\n    sendMessage(user, {\n      msg: reply\n    }, discussion);\n  }\n\n  return discussion;\n};\n\nMeteor.methods({\n  /**\n   * Create discussion by room or message\n   * @constructor\n   * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n   * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n   * @param {string} reply - The reply, optional\n   * @param {string} t_name - discussion name\n   * @param {string[]} users - users to be added\n   * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n   */\n  createDiscussion(_ref3) {\n    let {\n      prid,\n      pmid,\n      t_name,\n      reply,\n      users,\n      encrypted\n    } = _ref3;\n\n    if (!settings.get('Discussion_enabled')) {\n      throw new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', {\n        method: 'createDiscussion'\n      });\n    }\n\n    const uid = Meteor.userId();\n\n    if (!uid) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'DiscussionCreation'\n      });\n    }\n\n    if (!hasAtLeastOnePermission(uid, ['start-discussion', 'start-discussion-other-user'])) {\n      throw new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', {\n        method: 'createDiscussion'\n      });\n    }\n\n    return create({\n      uid,\n      prid,\n      pmid,\n      t_name,\n      reply,\n      users,\n      user: Meteor.user(),\n      encrypted\n    });\n  }\n\n});","map":{"version":3,"sources":["app/discussion/server/methods/createDiscussion.js"],"names":["Meteor","module","link","v","Random","Match","TAPi18n","hasAtLeastOnePermission","canSendMessage","Messages","Rooms","createRoom","addUserToRoom","sendMessage","attachMessage","settings","roomTypes","callbacks","getParentRoom","rid","room","findOne","prid","fields","_id","createDiscussionMessage","user","drid","msg","message_embedded","welcomeMessage","attachments","filter","e","createWithTypeRoomIdMessageAndUser","mentionMessage","username","name","u","ts","Date","_updatedAt","insert","create","pmid","t_name","reply","users","encrypted","message","Error","method","p_room","uid","type","error","Maybe","Boolean","discussionAlreadyExists","id","invitedUsers","getConfig","t","getDiscussionType","description","topic","discussion","Set","fname","nameValidationRegex","discussionMsg","__","runAsync","methods","createDiscussion","get","userId"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Match } from 'meteor/check';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { hasAtLeastOnePermission, canSendMessage } from '../../../authorization/server';\nimport { Messages, Rooms } from '../../../models/server';\nimport { createRoom, addUserToRoom, sendMessage, attachMessage } from '../../../lib/server';\nimport { settings } from '../../../settings/server';\nimport { roomTypes } from '../../../utils/server';\nimport { callbacks } from '../../../../lib/callbacks';\n\nconst getParentRoom = (rid) => {\n\tconst room = Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { fields: { _id: 1 } }) : room);\n};\n\nconst createDiscussionMessage = (rid, user, drid, msg, message_embedded) => {\n\tconst welcomeMessage = {\n\t\tmsg,\n\t\trid,\n\t\tdrid,\n\t\tattachments: [message_embedded].filter((e) => e),\n\t};\n\treturn Messages.createWithTypeRoomIdMessageAndUser('discussion-created', rid, '', user, welcomeMessage);\n};\n\nconst mentionMessage = (rid, { _id, username, name }, message_embedded) => {\n\tconst welcomeMessage = {\n\t\trid,\n\t\tu: { _id, username, name },\n\t\tts: new Date(),\n\t\t_updatedAt: new Date(),\n\t\tattachments: [message_embedded].filter((e) => e),\n\t};\n\n\treturn Messages.insert(welcomeMessage);\n};\n\nconst create = ({ prid, pmid, t_name, reply, users, user, encrypted }) => {\n\t// if you set both, prid and pmid, and the rooms dont match... should throw an error)\n\tlet message = false;\n\tif (pmid) {\n\t\tmessage = Messages.findOne({ _id: pmid });\n\t\tif (!message) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid message', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\t\tif (prid) {\n\t\t\tif (prid !== getParentRoom(message.rid)._id) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-arguments', { method: 'DiscussionCreation' });\n\t\t\t}\n\t\t} else {\n\t\t\tprid = message.rid;\n\t\t}\n\t}\n\n\tif (!prid) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', { method: 'DiscussionCreation' });\n\t}\n\n\tlet p_room;\n\ttry {\n\t\tp_room = canSendMessage(prid, { uid: user._id, username: user.username, type: user.type });\n\t} catch (error) {\n\t\tthrow new Meteor.Error(error.message);\n\t}\n\n\tif (p_room.prid) {\n\t\tthrow new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (!Match.Maybe(encrypted, Boolean)) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Invalid encryption state', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (typeof encrypted !== 'boolean') {\n\t\tencrypted = p_room.encrypted;\n\t}\n\n\tif (encrypted && reply) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (pmid) {\n\t\tconst discussionAlreadyExists = Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields: { _id: 1 },\n\t\t\t},\n\t\t);\n\t\tif (discussionAlreadyExists) {\n\t\t\t// do not allow multiple discussions to the same message'\\\n\t\t\taddUserToRoom(discussionAlreadyExists._id, user);\n\t\t\treturn discussionAlreadyExists;\n\t\t}\n\t}\n\n\tconst name = Random.id();\n\n\t// auto invite the replied message owner\n\tconst invitedUsers = message ? [message.u.username, ...users] : users;\n\n\tconst type = roomTypes.getConfig(p_room.t).getDiscussionType();\n\tconst description = p_room.encrypted ? '' : message.msg;\n\tconst topic = p_room.name;\n\n\tconst discussion = createRoom(\n\t\ttype,\n\t\tname,\n\t\tuser.username,\n\t\t[...new Set(invitedUsers)],\n\t\tfalse,\n\t\t{\n\t\t\tfname: t_name,\n\t\t\tdescription, // TODO discussions remove\n\t\t\ttopic, // TODO discussions remove\n\t\t\tprid,\n\t\t\tencrypted,\n\t\t},\n\t\t{\n\t\t\t// overrides name validation to allow anything, because discussion's name is randomly generated\n\t\t\tnameValidationRegex: /.*/,\n\t\t},\n\t);\n\n\tlet discussionMsg;\n\tif (pmid) {\n\t\tif (p_room.encrypted) {\n\t\t\tmessage.msg = TAPi18n.__('Encrypted_message');\n\t\t}\n\t\tmentionMessage(discussion._id, user, attachMessage(message, p_room));\n\n\t\tdiscussionMsg = createDiscussionMessage(message.rid, user, discussion._id, t_name, attachMessage(message, p_room));\n\t} else {\n\t\tdiscussionMsg = createDiscussionMessage(prid, user, discussion._id, t_name);\n\t}\n\n\tcallbacks.runAsync('afterSaveMessage', discussionMsg, p_room);\n\n\tif (reply) {\n\t\tsendMessage(user, { msg: reply }, discussion);\n\t}\n\treturn discussion;\n};\n\nMeteor.methods({\n\t/**\n\t * Create discussion by room or message\n\t * @constructor\n\t * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n\t * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n\t * @param {string} reply - The reply, optional\n\t * @param {string} t_name - discussion name\n\t * @param {string[]} users - users to be added\n\t * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n\t */\n\tcreateDiscussion({ prid, pmid, t_name, reply, users, encrypted }) {\n\t\tif (!settings.get('Discussion_enabled')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t\t}\n\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\n\t\tif (!hasAtLeastOnePermission(uid, ['start-discussion', 'start-discussion-other-user'])) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t\t}\n\n\t\treturn create({ uid, prid, pmid, t_name, reply, users, user: Meteor.user(), encrypted });\n\t},\n});\n"]},"sourceType":"module","hash":"0d287ff7698466c04d5c23fa1da2fe0253be065e"}
