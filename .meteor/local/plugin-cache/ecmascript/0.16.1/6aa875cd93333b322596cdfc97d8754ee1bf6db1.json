{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getAvatarSuggestionForUser.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/getAvatarSuggestionForUser.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getAvatarSuggestionForUser.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getAvatarSuggestionForUser.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/getAvatarSuggestionForUser.js"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  getAvatarSuggestionForUser: () => getAvatarSuggestionForUser\n});\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet fetch;\nmodule.link(\"meteor/fetch\", {\n  fetch(v) {\n    fetch = v;\n  }\n\n}, 1);\nlet Gravatar;\nmodule.link(\"meteor/jparker:gravatar\", {\n  Gravatar(v) {\n    Gravatar = v;\n  }\n\n}, 2);\nlet ServiceConfiguration;\nmodule.link(\"meteor/service-configuration\", {\n  ServiceConfiguration(v) {\n    ServiceConfiguration = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nconst avatarProviders = {\n  facebook(user) {\n    if (user.services && user.services.facebook && user.services.facebook.id && settings.get('Accounts_OAuth_Facebook')) {\n      return {\n        service: 'facebook',\n        url: \"https://graph.facebook.com/\".concat(user.services.facebook.id, \"/picture?type=large\")\n      };\n    }\n  },\n\n  google(user) {\n    if (user.services && user.services.google && user.services.google.picture && user.services.google.picture !== 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg' && settings.get('Accounts_OAuth_Google')) {\n      return {\n        service: 'google',\n        url: user.services.google.picture\n      };\n    }\n  },\n\n  github(user) {\n    if (user.services && user.services.github && user.services.github.username && settings.get('Accounts_OAuth_Github')) {\n      return {\n        service: 'github',\n        url: \"https://avatars.githubusercontent.com/\".concat(user.services.github.username, \"?s=200\")\n      };\n    }\n  },\n\n  linkedin(user) {\n    if (user.services && user.services.linkedin && user.services.linkedin.profilePicture && user.services.linkedin.profilePicture.identifiersUrl && user.services.linkedin.profilePicture.identifiersUrl.length > 0 && settings.get('Accounts_OAuth_Linkedin')) {\n      const total = user.services.linkedin.profilePicture.identifiersUrl.length;\n      return {\n        service: 'linkedin',\n        url: user.services.linkedin.profilePicture.identifiersUrl[total - 1]\n      };\n    }\n  },\n\n  twitter(user) {\n    if (user.services && user.services.twitter && user.services.twitter.profile_image_url_https && settings.get('Accounts_OAuth_Twitter')) {\n      return {\n        service: 'twitter',\n        url: user.services.twitter.profile_image_url_https.replace(/_normal|_bigger/, '')\n      };\n    }\n  },\n\n  gitlab(user) {\n    if (user.services && user.services.gitlab && user.services.gitlab.avatar_url && settings.get('Accounts_OAuth_Gitlab')) {\n      return {\n        service: 'gitlab',\n        url: user.services.gitlab.avatar_url\n      };\n    }\n  },\n\n  blockstack(user) {\n    if (user.services && user.services.blockstack && user.services.blockstack.image && settings.get('Blockstack_Enable')) {\n      return {\n        service: 'blockstack',\n        url: user.services.blockstack.image\n      };\n    }\n  },\n\n  customOAuth(user) {\n    const avatars = [];\n\n    for (const service in user.services) {\n      if (user.services[service]._OAuthCustom) {\n        const services = ServiceConfiguration.configurations.find({\n          service\n        }, {\n          fields: {\n            secret: 0\n          }\n        }).fetch();\n\n        if (services.length > 0) {\n          if (user.services[service].avatarUrl) {\n            avatars.push({\n              service,\n              url: user.services[service].avatarUrl\n            });\n          }\n        }\n      }\n    }\n\n    return avatars;\n  },\n\n  emails(user) {\n    const avatars = [];\n\n    if (user.emails && user.emails.length > 0) {\n      for (const email of user.emails) {\n        if (email.verified === true) {\n          avatars.push({\n            service: 'gravatar',\n            url: Gravatar.imageUrl(email.address, {\n              default: '404',\n              size: 200,\n              secure: true\n            })\n          });\n        }\n\n        if (email.verified !== true) {\n          avatars.push({\n            service: 'gravatar',\n            url: Gravatar.imageUrl(email.address, {\n              default: '404',\n              size: 200,\n              secure: true\n            })\n          });\n        }\n      }\n    }\n\n    return avatars;\n  }\n\n};\n\nfunction getAvatarSuggestionForUser(user) {\n  return Promise.asyncApply(() => {\n    check(user, Object);\n    const avatars = [];\n\n    for (const avatarProvider of Object.values(avatarProviders)) {\n      const avatar = avatarProvider(user);\n\n      if (avatar) {\n        if (Array.isArray(avatar)) {\n          avatars.push(...avatar);\n        } else {\n          avatars.push(avatar);\n        }\n      }\n    }\n\n    const validAvatars = {};\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(avatars), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n        const avatar = _step.value;\n\n        try {\n          const response = Promise.await(fetch(avatar.url));\n\n          if (response.status === 200) {\n            let blob = \"data:\".concat(response.headers.get('content-type'), \";base64,\");\n            blob += Buffer.from(Promise.await(response.arrayBuffer())).toString('base64');\n            avatar.blob = blob;\n            avatar.contentType = response.headers.get('content-type');\n            validAvatars[avatar.service] = avatar;\n          }\n        } catch (error) {// error;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          Promise.await(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return validAvatars;\n  });\n}","map":{"version":3,"sources":["app/lib/server/functions/getAvatarSuggestionForUser.js"],"names":["_asyncIterator","module","link","default","v","export","getAvatarSuggestionForUser","check","fetch","Gravatar","ServiceConfiguration","settings","avatarProviders","facebook","user","services","id","get","service","url","google","picture","github","username","linkedin","profilePicture","identifiersUrl","length","total","twitter","profile_image_url_https","replace","gitlab","avatar_url","blockstack","image","customOAuth","avatars","_OAuthCustom","configurations","find","fields","secret","avatarUrl","push","emails","email","verified","imageUrl","address","size","secure","Object","avatarProvider","values","avatar","Array","isArray","validAvatars","response","status","blob","headers","Buffer","from","arrayBuffer","toString","contentType","error"],"mappings":"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","sourcesContent":["import { check } from 'meteor/check';\nimport { fetch } from 'meteor/fetch';\nimport { Gravatar } from 'meteor/jparker:gravatar';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\n\nimport { settings } from '../../../settings';\n\nconst avatarProviders = {\n\tfacebook(user) {\n\t\tif (user.services && user.services.facebook && user.services.facebook.id && settings.get('Accounts_OAuth_Facebook')) {\n\t\t\treturn {\n\t\t\t\tservice: 'facebook',\n\t\t\t\turl: `https://graph.facebook.com/${user.services.facebook.id}/picture?type=large`,\n\t\t\t};\n\t\t}\n\t},\n\n\tgoogle(user) {\n\t\tif (\n\t\t\tuser.services &&\n\t\t\tuser.services.google &&\n\t\t\tuser.services.google.picture &&\n\t\t\tuser.services.google.picture !== 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg' &&\n\t\t\tsettings.get('Accounts_OAuth_Google')\n\t\t) {\n\t\t\treturn {\n\t\t\t\tservice: 'google',\n\t\t\t\turl: user.services.google.picture,\n\t\t\t};\n\t\t}\n\t},\n\n\tgithub(user) {\n\t\tif (user.services && user.services.github && user.services.github.username && settings.get('Accounts_OAuth_Github')) {\n\t\t\treturn {\n\t\t\t\tservice: 'github',\n\t\t\t\turl: `https://avatars.githubusercontent.com/${user.services.github.username}?s=200`,\n\t\t\t};\n\t\t}\n\t},\n\n\tlinkedin(user) {\n\t\tif (\n\t\t\tuser.services &&\n\t\t\tuser.services.linkedin &&\n\t\t\tuser.services.linkedin.profilePicture &&\n\t\t\tuser.services.linkedin.profilePicture.identifiersUrl &&\n\t\t\tuser.services.linkedin.profilePicture.identifiersUrl.length > 0 &&\n\t\t\tsettings.get('Accounts_OAuth_Linkedin')\n\t\t) {\n\t\t\tconst total = user.services.linkedin.profilePicture.identifiersUrl.length;\n\t\t\treturn {\n\t\t\t\tservice: 'linkedin',\n\t\t\t\turl: user.services.linkedin.profilePicture.identifiersUrl[total - 1],\n\t\t\t};\n\t\t}\n\t},\n\n\ttwitter(user) {\n\t\tif (user.services && user.services.twitter && user.services.twitter.profile_image_url_https && settings.get('Accounts_OAuth_Twitter')) {\n\t\t\treturn {\n\t\t\t\tservice: 'twitter',\n\t\t\t\turl: user.services.twitter.profile_image_url_https.replace(/_normal|_bigger/, ''),\n\t\t\t};\n\t\t}\n\t},\n\n\tgitlab(user) {\n\t\tif (user.services && user.services.gitlab && user.services.gitlab.avatar_url && settings.get('Accounts_OAuth_Gitlab')) {\n\t\t\treturn {\n\t\t\t\tservice: 'gitlab',\n\t\t\t\turl: user.services.gitlab.avatar_url,\n\t\t\t};\n\t\t}\n\t},\n\n\tblockstack(user) {\n\t\tif (user.services && user.services.blockstack && user.services.blockstack.image && settings.get('Blockstack_Enable')) {\n\t\t\treturn {\n\t\t\t\tservice: 'blockstack',\n\t\t\t\turl: user.services.blockstack.image,\n\t\t\t};\n\t\t}\n\t},\n\n\tcustomOAuth(user) {\n\t\tconst avatars = [];\n\t\tfor (const service in user.services) {\n\t\t\tif (user.services[service]._OAuthCustom) {\n\t\t\t\tconst services = ServiceConfiguration.configurations.find({ service }, { fields: { secret: 0 } }).fetch();\n\n\t\t\t\tif (services.length > 0) {\n\t\t\t\t\tif (user.services[service].avatarUrl) {\n\t\t\t\t\t\tavatars.push({\n\t\t\t\t\t\t\tservice,\n\t\t\t\t\t\t\turl: user.services[service].avatarUrl,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn avatars;\n\t},\n\n\temails(user) {\n\t\tconst avatars = [];\n\t\tif (user.emails && user.emails.length > 0) {\n\t\t\tfor (const email of user.emails) {\n\t\t\t\tif (email.verified === true) {\n\t\t\t\t\tavatars.push({\n\t\t\t\t\t\tservice: 'gravatar',\n\t\t\t\t\t\turl: Gravatar.imageUrl(email.address, {\n\t\t\t\t\t\t\tdefault: '404',\n\t\t\t\t\t\t\tsize: 200,\n\t\t\t\t\t\t\tsecure: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (email.verified !== true) {\n\t\t\t\t\tavatars.push({\n\t\t\t\t\t\tservice: 'gravatar',\n\t\t\t\t\t\turl: Gravatar.imageUrl(email.address, {\n\t\t\t\t\t\t\tdefault: '404',\n\t\t\t\t\t\t\tsize: 200,\n\t\t\t\t\t\t\tsecure: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn avatars;\n\t},\n};\n\nexport async function getAvatarSuggestionForUser(user) {\n\tcheck(user, Object);\n\n\tconst avatars = [];\n\n\tfor (const avatarProvider of Object.values(avatarProviders)) {\n\t\tconst avatar = avatarProvider(user);\n\t\tif (avatar) {\n\t\t\tif (Array.isArray(avatar)) {\n\t\t\t\tavatars.push(...avatar);\n\t\t\t} else {\n\t\t\t\tavatars.push(avatar);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst validAvatars = {};\n\tfor await (const avatar of avatars) {\n\t\ttry {\n\t\t\tconst response = await fetch(avatar.url);\n\n\t\t\tif (response.status === 200) {\n\t\t\t\tlet blob = `data:${response.headers.get('content-type')};base64,`;\n\t\t\t\tblob += Buffer.from(await response.arrayBuffer()).toString('base64');\n\t\t\t\tavatar.blob = blob;\n\t\t\t\tavatar.contentType = response.headers.get('content-type');\n\t\t\t\tvalidAvatars[avatar.service] = avatar;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// error;\n\t\t}\n\t}\n\treturn validAvatars;\n}\n"]},"sourceType":"module","hash":"6aa875cd93333b322596cdfc97d8754ee1bf6db1"}
