{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v213.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v213.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v213.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v213.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v213.js"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nlet addMigration;\nmodule.link(\"../../lib/migrations\", {\n  addMigration(v) {\n    addMigration = v;\n  }\n\n}, 0);\nlet Subscriptions, Rooms;\nmodule.link(\"../../../app/models/server/raw\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 1);\n\nconst updateSubscriptions = () => Promise.asyncApply(() => {\n  const cursor = Subscriptions.find({\n    t: 'd'\n  }, {\n    projection: {\n      rid: 1,\n      u: 1\n    }\n  });\n  let actions = [];\n  var _iteratorAbruptCompletion = false;\n  var _didIteratorError = false;\n\n  var _iteratorError;\n\n  try {\n    for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n      const sub = _step.value;\n      const room = Promise.await(Rooms.findOne({\n        _id: sub.rid\n      }, {\n        projection: {\n          usernames: 1\n        }\n      }));\n\n      if (!room) {\n        console.log(\"[migration] room record not found: \".concat(sub.rid));\n        continue;\n      }\n\n      if (!room.usernames || room.usernames.length === 0) {\n        console.log(\"[migration] room without usernames: \".concat(sub.rid));\n        continue;\n      }\n\n      const name = room.usernames.filter(u => u !== sub.u.username).sort().join(', ') || sub.u.username;\n\n      if (!name) {\n        console.log(\"[migration] subscription without name \".concat(sub._id));\n        continue;\n      }\n\n      actions.push({\n        updateMany: {\n          filter: {\n            _id: sub._id\n          },\n          update: {\n            $set: {\n              name,\n              _updatedAt: new Date()\n            }\n          }\n        }\n      });\n\n      if (actions.length === 1000) {\n        Promise.await(Subscriptions.col.bulkWrite(actions, {\n          ordered: false\n        }));\n        actions = [];\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (_iteratorAbruptCompletion && _iterator.return != null) {\n        Promise.await(_iterator.return());\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (actions.length) {\n    Promise.await(Subscriptions.col.bulkWrite(actions, {\n      ordered: false\n    }));\n  }\n});\n\naddMigration({\n  version: 213,\n\n  up() {\n    Promise.await((() => Promise.asyncApply(() => {\n      const options = {\n        projection: {\n          rid: 1,\n          u: 1,\n          name: 1\n        }\n      };\n      const cursor = Subscriptions.find({\n        t: 'd'\n      }, options).sort({\n        _updatedAt: 1\n      }).limit(100);\n      const total = Promise.await(cursor.count()); // if number of subscription is low, we can go ahead and fix them all\n\n      if (total < 1000) {\n        return updateSubscriptions();\n      } // otherwise we'll first see if they're broken\n\n\n      const subs = Promise.await(cursor.toArray());\n      const subsTotal = subs.length;\n      const subsWithRoom = Promise.await(Promise.all(subs.map(sub => Promise.asyncApply(() => ({\n        sub,\n        room: Promise.await(Rooms.findOne({\n          _id: sub.rid\n        }, {\n          projection: {\n            usernames: 1\n          }\n        }))\n      })))));\n      const wrongSubs = subsWithRoom.filter(_ref => {\n        let {\n          room\n        } = _ref;\n        return room && room.usernames && room.usernames.length > 0;\n      }).filter(_ref2 => {\n        let {\n          room,\n          sub\n        } = _ref2;\n        const name = room.usernames.filter(u => u !== sub.u.username).sort().join(', ') || sub.u.username;\n        return name !== sub.name;\n      }).length; // if less then 5% of subscriptions are wrong, we're fine, doesn't need to do anything\n\n      if (wrongSubs / subsTotal < 0.05) {\n        return;\n      }\n\n      return updateSubscriptions();\n    }))());\n  }\n\n});","map":{"version":3,"sources":["server/startup/migrations/v213.js"],"names":["_asyncIterator","module","link","default","v","addMigration","Subscriptions","Rooms","updateSubscriptions","cursor","find","t","projection","rid","u","actions","sub","room","findOne","_id","usernames","console","log","length","name","filter","username","sort","join","push","updateMany","update","$set","_updatedAt","Date","col","bulkWrite","ordered","version","up","Promise","await","options","limit","total","count","subs","toArray","subsTotal","subsWithRoom","all","map","wrongSubs"],"mappings":"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","sourcesContent":["import { addMigration } from '../../lib/migrations';\nimport { Subscriptions, Rooms } from '../../../app/models/server/raw';\n\nconst updateSubscriptions = async () => {\n\tconst cursor = Subscriptions.find({ t: 'd' }, { projection: { rid: 1, u: 1 } });\n\n\tlet actions = [];\n\tfor await (const sub of cursor) {\n\t\tconst room = await Rooms.findOne({ _id: sub.rid }, { projection: { usernames: 1 } });\n\t\tif (!room) {\n\t\t\tconsole.log(`[migration] room record not found: ${sub.rid}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!room.usernames || room.usernames.length === 0) {\n\t\t\tconsole.log(`[migration] room without usernames: ${sub.rid}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst name =\n\t\t\troom.usernames\n\t\t\t\t.filter((u) => u !== sub.u.username)\n\t\t\t\t.sort()\n\t\t\t\t.join(', ') || sub.u.username;\n\t\tif (!name) {\n\t\t\tconsole.log(`[migration] subscription without name ${sub._id}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tactions.push({\n\t\t\tupdateMany: {\n\t\t\t\tfilter: { _id: sub._id },\n\t\t\t\tupdate: { $set: { name, _updatedAt: new Date() } },\n\t\t\t},\n\t\t});\n\t\tif (actions.length === 1000) {\n\t\t\tawait Subscriptions.col.bulkWrite(actions, { ordered: false });\n\t\t\tactions = [];\n\t\t}\n\t}\n\tif (actions.length) {\n\t\tawait Subscriptions.col.bulkWrite(actions, { ordered: false });\n\t}\n};\n\naddMigration({\n\tversion: 213,\n\tup() {\n\t\tPromise.await(\n\t\t\t(async () => {\n\t\t\t\tconst options = {\n\t\t\t\t\tprojection: { rid: 1, u: 1, name: 1 },\n\t\t\t\t};\n\t\t\t\tconst cursor = Subscriptions.find({ t: 'd' }, options).sort({ _updatedAt: 1 }).limit(100);\n\t\t\t\tconst total = await cursor.count();\n\n\t\t\t\t// if number of subscription is low, we can go ahead and fix them all\n\t\t\t\tif (total < 1000) {\n\t\t\t\t\treturn updateSubscriptions();\n\t\t\t\t}\n\n\t\t\t\t// otherwise we'll first see if they're broken\n\t\t\t\tconst subs = await cursor.toArray();\n\t\t\t\tconst subsTotal = subs.length;\n\n\t\t\t\tconst subsWithRoom = await Promise.all(\n\t\t\t\t\tsubs.map(async (sub) => ({\n\t\t\t\t\t\tsub,\n\t\t\t\t\t\troom: await Rooms.findOne({ _id: sub.rid }, { projection: { usernames: 1 } }),\n\t\t\t\t\t})),\n\t\t\t\t);\n\n\t\t\t\tconst wrongSubs = subsWithRoom\n\t\t\t\t\t.filter(({ room }) => room && room.usernames && room.usernames.length > 0)\n\t\t\t\t\t.filter(({ room, sub }) => {\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\troom.usernames\n\t\t\t\t\t\t\t\t.filter((u) => u !== sub.u.username)\n\t\t\t\t\t\t\t\t.sort()\n\t\t\t\t\t\t\t\t.join(', ') || sub.u.username;\n\n\t\t\t\t\t\treturn name !== sub.name;\n\t\t\t\t\t}).length;\n\n\t\t\t\t// if less then 5% of subscriptions are wrong, we're fine, doesn't need to do anything\n\t\t\t\tif (wrongSubs / subsTotal < 0.05) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn updateSubscriptions();\n\t\t\t})(),\n\t\t);\n\t},\n});\n"]},"sourceType":"module","hash":"1600d4fb483683fadf41c206a36156fbfc762abb"}
