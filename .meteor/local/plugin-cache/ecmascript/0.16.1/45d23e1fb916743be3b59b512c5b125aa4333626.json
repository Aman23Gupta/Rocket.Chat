{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v206.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v206.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v206.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v206.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v206.js"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nlet addMigration;\nmodule.link(\"../../lib/migrations\", {\n  addMigration(v) {\n    addMigration = v;\n  }\n\n}, 0);\nlet Subscriptions, Messages;\nmodule.link(\"../../../app/models/server/raw\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 1);\n\nfunction migrate() {\n  return Promise.asyncApply(() => {\n    const subs = Promise.await(Subscriptions.find({\n      $or: [{\n        'tunread.0': {\n          $exists: true\n        }\n      }, {\n        'tunreadUser.0': {\n          $exists: true\n        }\n      }, {\n        'tunreadGroup.0': {\n          $exists: true\n        }\n      }]\n    }, {\n      projection: {\n        _id: 0,\n        tunread: 1,\n        tunreadUser: 1,\n        tunreadGroup: 1\n      }\n    }).toArray()); // Get unique thread ids\n\n    const tunreads = new Set();\n\n    for (const {\n      tunread = [],\n      tunreadUser = [],\n      tunreadGroup = []\n    } of subs) {\n      tunread.forEach(i => tunreads.add(i));\n      tunreadUser.forEach(i => tunreads.add(i));\n      tunreadGroup.forEach(i => tunreads.add(i));\n    }\n\n    const inexistentThreads = new Set();\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(tunreads), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n        const tunread = _step.value;\n\n        if (!Promise.await(Messages.findOne({\n          _id: tunread\n        }, {\n          _id: 1\n        }))) {\n          inexistentThreads.add(tunread);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          Promise.await(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    const inexistentThreadsArr = [...inexistentThreads];\n    Promise.await(Subscriptions.update({\n      $or: [{\n        tunread: {\n          $in: inexistentThreadsArr\n        }\n      }, {\n        tunreadUser: {\n          $in: inexistentThreadsArr\n        }\n      }, {\n        tunreadGroup: {\n          $in: inexistentThreadsArr\n        }\n      }]\n    }, {\n      $pullAll: {\n        tunread: inexistentThreadsArr,\n        tunreadUser: inexistentThreadsArr,\n        tunreadGroup: inexistentThreadsArr\n      }\n    }));\n  });\n}\n\naddMigration({\n  version: 206,\n\n  up() {\n    Promise.await(migrate());\n  }\n\n});","map":{"version":3,"sources":["server/startup/migrations/v206.js"],"names":["_asyncIterator","module","link","default","v","addMigration","Subscriptions","Messages","migrate","subs","find","$or","$exists","projection","_id","tunread","tunreadUser","tunreadGroup","toArray","tunreads","Set","forEach","i","add","inexistentThreads","findOne","inexistentThreadsArr","update","$in","$pullAll","version","up","Promise","await"],"mappings":"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","sourcesContent":["import { addMigration } from '../../lib/migrations';\nimport { Subscriptions, Messages } from '../../../app/models/server/raw';\n\nasync function migrate() {\n\tconst subs = await Subscriptions.find(\n\t\t{\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'tunread.0': { $exists: true },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'tunreadUser.0': { $exists: true },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'tunreadGroup.0': { $exists: true },\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tprojection: {\n\t\t\t\t_id: 0,\n\t\t\t\ttunread: 1,\n\t\t\t\ttunreadUser: 1,\n\t\t\t\ttunreadGroup: 1,\n\t\t\t},\n\t\t},\n\t).toArray();\n\n\t// Get unique thread ids\n\tconst tunreads = new Set();\n\tfor (const { tunread = [], tunreadUser = [], tunreadGroup = [] } of subs) {\n\t\ttunread.forEach((i) => tunreads.add(i));\n\t\ttunreadUser.forEach((i) => tunreads.add(i));\n\t\ttunreadGroup.forEach((i) => tunreads.add(i));\n\t}\n\n\tconst inexistentThreads = new Set();\n\tfor await (const tunread of tunreads) {\n\t\tif (!(await Messages.findOne({ _id: tunread }, { _id: 1 }))) {\n\t\t\tinexistentThreads.add(tunread);\n\t\t}\n\t}\n\n\tconst inexistentThreadsArr = [...inexistentThreads];\n\n\tawait Subscriptions.update(\n\t\t{\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttunread: { $in: inexistentThreadsArr },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttunreadUser: { $in: inexistentThreadsArr },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttunreadGroup: { $in: inexistentThreadsArr },\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\t$pullAll: {\n\t\t\t\ttunread: inexistentThreadsArr,\n\t\t\t\ttunreadUser: inexistentThreadsArr,\n\t\t\t\ttunreadGroup: inexistentThreadsArr,\n\t\t\t},\n\t\t},\n\t);\n}\n\naddMigration({\n\tversion: 206,\n\tup() {\n\t\tPromise.await(migrate());\n\t},\n});\n"]},"sourceType":"module","hash":"45d23e1fb916743be3b59b512c5b125aa4333626"}
