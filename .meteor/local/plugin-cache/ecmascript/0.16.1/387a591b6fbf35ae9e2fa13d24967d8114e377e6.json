{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/custom-oauth/server/custom_oauth_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/custom-oauth/server/custom_oauth_server.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/custom-oauth/server/custom_oauth_server.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/custom-oauth/server/custom_oauth_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/custom-oauth/server/custom_oauth_server.js"}},"code":"module.export({\n  CustomOAuth: () => CustomOAuth\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet OAuth;\nmodule.link(\"meteor/oauth\", {\n  OAuth(v) {\n    OAuth = v;\n  }\n\n}, 3);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 4);\nlet ServiceConfiguration;\nmodule.link(\"meteor/service-configuration\", {\n  ServiceConfiguration(v) {\n    ServiceConfiguration = v;\n  }\n\n}, 5);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 6);\nlet normalizers, fromTemplate, renameInvalidProperties;\nmodule.link(\"./transform_helpers\", {\n  normalizers(v) {\n    normalizers = v;\n  },\n\n  fromTemplate(v) {\n    fromTemplate = v;\n  },\n\n  renameInvalidProperties(v) {\n    renameInvalidProperties = v;\n  }\n\n}, 7);\nlet Logger;\nmodule.link(\"../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 8);\nlet Users;\nmodule.link(\"../../models\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 9);\nlet isURL;\nmodule.link(\"../../utils/lib/isURL\", {\n  isURL(v) {\n    isURL = v;\n  }\n\n}, 10);\nlet registerAccessTokenService;\nmodule.link(\"../../lib/server/oauth/oauth\", {\n  registerAccessTokenService(v) {\n    registerAccessTokenService = v;\n  }\n\n}, 11);\nlet callbacks;\nmodule.link(\"../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 12);\nconst logger = new Logger('CustomOAuth');\nconst Services = {};\nconst BeforeUpdateOrCreateUserFromExternalService = [];\n\nclass CustomOAuth {\n  constructor(name, options) {\n    logger.debug('Init CustomOAuth', name, options);\n    this.name = name;\n\n    if (!Match.test(this.name, String)) {\n      throw new Meteor.Error('CustomOAuth: Name is required and must be String');\n    }\n\n    if (Services[this.name]) {\n      Services[this.name].configure(options);\n      return;\n    }\n\n    Services[this.name] = this;\n    this.configure(options);\n    this.userAgent = 'Meteor';\n\n    if (Meteor.release) {\n      this.userAgent += \"/\".concat(Meteor.release);\n    }\n\n    Accounts.oauth.registerService(this.name);\n    this.registerService();\n    this.addHookToProcessUser();\n    this.registerAccessTokenService(this.name, this.accessTokenParam);\n  }\n\n  configure(options) {\n    if (!Match.test(options, Object)) {\n      throw new Meteor.Error('CustomOAuth: Options is required and must be Object');\n    }\n\n    if (!Match.test(options.serverURL, String)) {\n      throw new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n    }\n\n    if (!Match.test(options.tokenPath, String)) {\n      options.tokenPath = '/oauth/token';\n    }\n\n    if (!Match.test(options.identityPath, String)) {\n      options.identityPath = '/me';\n    }\n\n    if (!Match.test(options.accessTokenParam, String)) {\n      options.accessTokenParam = 'access_token';\n    }\n\n    this.serverURL = options.serverURL;\n    this.tokenPath = options.tokenPath;\n    this.identityPath = options.identityPath;\n    this.tokenSentVia = options.tokenSentVia;\n    this.identityTokenSentVia = options.identityTokenSentVia;\n    this.keyField = options.keyField;\n    this.usernameField = (options.usernameField || '').trim();\n    this.emailField = (options.emailField || '').trim();\n    this.nameField = (options.nameField || '').trim();\n    this.avatarField = (options.avatarField || '').trim();\n    this.mergeUsers = options.mergeUsers;\n    this.rolesClaim = options.rolesClaim || 'roles';\n    this.accessTokenParam = options.accessTokenParam;\n    this.channelsAdmin = options.channelsAdmin || 'rocket.cat';\n\n    if (this.identityTokenSentVia == null || this.identityTokenSentVia === 'default') {\n      this.identityTokenSentVia = this.tokenSentVia;\n    }\n\n    if (!isURL(this.tokenPath)) {\n      this.tokenPath = this.serverURL + this.tokenPath;\n    }\n\n    if (!isURL(this.identityPath)) {\n      this.identityPath = this.serverURL + this.identityPath;\n    }\n\n    if (Match.test(options.addAutopublishFields, Object)) {\n      Accounts.addAutopublishFields(options.addAutopublishFields);\n    }\n  }\n\n  getAccessToken(query) {\n    const config = ServiceConfiguration.configurations.findOne({\n      service: this.name\n    });\n\n    if (!config) {\n      throw new ServiceConfiguration.ConfigError();\n    }\n\n    let response = undefined;\n    const allOptions = {\n      headers: {\n        'User-Agent': this.userAgent,\n        // http://doc.gitlab.com/ce/api/users.html#Current-user\n        'Accept': 'application/json'\n      },\n      params: {\n        code: query.code,\n        redirect_uri: OAuth._redirectUri(this.name, config),\n        grant_type: 'authorization_code',\n        state: query.state\n      }\n    }; // Only send clientID / secret once on header or payload.\n\n    if (this.tokenSentVia === 'header') {\n      allOptions.auth = \"\".concat(config.clientId, \":\").concat(OAuth.openSecret(config.secret));\n    } else {\n      allOptions.params.client_secret = OAuth.openSecret(config.secret);\n      allOptions.params.client_id = config.clientId;\n    }\n\n    try {\n      response = HTTP.post(this.tokenPath, allOptions);\n    } catch (err) {\n      const error = new Error(\"Failed to complete OAuth handshake with \".concat(this.name, \" at \").concat(this.tokenPath, \". \").concat(err.message));\n      throw _.extend(error, {\n        response: err.response\n      });\n    }\n\n    let data;\n\n    if (response.data) {\n      data = response.data;\n    } else {\n      data = JSON.parse(response.content);\n    }\n\n    if (data.error) {\n      // if the http response was a json object with an error attribute\n      throw new Error(\"Failed to complete OAuth handshake with \".concat(this.name, \" at \").concat(this.tokenPath, \". \").concat(data.error));\n    } else {\n      return data;\n    }\n  }\n\n  getIdentity(accessToken) {\n    const params = {};\n    const headers = {\n      'User-Agent': this.userAgent,\n      // http://doc.gitlab.com/ce/api/users.html#Current-user\n      'Accept': 'application/json'\n    };\n\n    if (this.identityTokenSentVia === 'header') {\n      headers.Authorization = \"Bearer \".concat(accessToken);\n    } else {\n      params[this.accessTokenParam] = accessToken;\n    }\n\n    try {\n      const response = HTTP.get(this.identityPath, {\n        headers,\n        params\n      });\n      let data;\n\n      if (response.data) {\n        data = response.data;\n      } else {\n        data = JSON.parse(response.content);\n      }\n\n      logger.debug({\n        msg: 'Identity response',\n        data\n      });\n      return this.normalizeIdentity(data);\n    } catch (err) {\n      const error = new Error(\"Failed to fetch identity from \".concat(this.name, \" at \").concat(this.identityPath, \". \").concat(err.message));\n      throw _.extend(error, {\n        response: err.response\n      });\n    }\n  }\n\n  registerService() {\n    const self = this;\n    OAuth.registerService(this.name, 2, null, query => {\n      const response = self.getAccessToken(query);\n      const identity = self.getIdentity(response.access_token);\n      const serviceData = {\n        _OAuthCustom: true,\n        serverURL: self.serverURL,\n        accessToken: response.access_token,\n        idToken: response.id_token,\n        expiresAt: +new Date() + 1000 * parseInt(response.expires_in, 10)\n      }; // only set the token in serviceData if it's there. this ensures\n      // that we don't lose old ones (since we only get this on the first\n      // log in attempt)\n\n      if (response.refresh_token) {\n        serviceData.refreshToken = response.refresh_token;\n      }\n\n      _.extend(serviceData, identity);\n\n      const data = {\n        serviceData,\n        options: {\n          profile: {\n            name: identity.name\n          }\n        }\n      };\n      return data;\n    });\n  }\n\n  normalizeIdentity(identity) {\n    if (identity) {\n      for (const normalizer of Object.values(normalizers)) {\n        const result = normalizer(identity);\n\n        if (result) {\n          identity = result;\n        }\n      }\n    }\n\n    if (this.usernameField) {\n      identity.username = this.getUsername(identity);\n    }\n\n    if (this.emailField) {\n      identity.email = this.getEmail(identity);\n    }\n\n    if (this.avatarField) {\n      identity.avatarUrl = this.getAvatarUrl(identity);\n    }\n\n    if (this.nameField) {\n      identity.name = this.getCustomName(identity);\n    } else {\n      identity.name = this.getName(identity);\n    }\n\n    return renameInvalidProperties(identity);\n  }\n\n  retrieveCredential(credentialToken, credentialSecret) {\n    return OAuth.retrieveCredential(credentialToken, credentialSecret);\n  }\n\n  getUsername(data) {\n    try {\n      const value = fromTemplate(this.usernameField, data);\n\n      if (!value) {\n        throw new Meteor.Error('field_not_found', \"Username field \\\"\".concat(this.usernameField, \"\\\" not found in data\"), data);\n      }\n\n      return value;\n    } catch (error) {\n      throw new Error('CustomOAuth: Failed to extract username', error.message);\n    }\n  }\n\n  getEmail(data) {\n    try {\n      const value = fromTemplate(this.emailField, data);\n\n      if (!value) {\n        throw new Meteor.Error('field_not_found', \"Email field \\\"\".concat(this.emailField, \"\\\" not found in data\"), data);\n      }\n\n      return value;\n    } catch (error) {\n      throw new Error('CustomOAuth: Failed to extract email', error.message);\n    }\n  }\n\n  getCustomName(data) {\n    try {\n      const value = fromTemplate(this.nameField, data);\n\n      if (!value) {\n        return this.getName(data);\n      }\n\n      return value;\n    } catch (error) {\n      throw new Error('CustomOAuth: Failed to extract custom name', error.message);\n    }\n  }\n\n  getAvatarUrl(data) {\n    try {\n      const value = fromTemplate(this.avatarField, data);\n\n      if (!value) {\n        logger.debug(\"Avatar field \\\"\".concat(this.avatarField, \"\\\" not found in data\"), data);\n      }\n\n      return value;\n    } catch (error) {\n      throw new Error('CustomOAuth: Failed to extract avatar url', error.message);\n    }\n  }\n\n  getName(identity) {\n    const name = identity.name || identity.username || identity.nickname || identity.CharacterName || identity.userName || identity.preferred_username || identity.user && identity.user.name;\n    return name;\n  }\n\n  addHookToProcessUser() {\n    BeforeUpdateOrCreateUserFromExternalService.push((serviceName, serviceData\n    /* , options*/\n    ) => {\n      if (serviceName !== this.name) {\n        return;\n      }\n\n      if (serviceData.username) {\n        let user = undefined;\n\n        if (this.keyField === 'username') {\n          user = Users.findOneByUsernameAndServiceNameIgnoringCase(serviceData.username, serviceData._id, serviceName);\n        } else if (this.keyField === 'email') {\n          user = Users.findOneByEmailAddressAndServiceNameIgnoringCase(serviceData.email, serviceData._id, serviceName);\n        }\n\n        if (!user) {\n          return;\n        }\n\n        callbacks.run('afterProcessOAuthUser', {\n          serviceName,\n          serviceData,\n          user\n        }); // User already created or merged and has identical name as before\n\n        if (user.services && user.services[serviceName] && user.services[serviceName].id === serviceData.id && user.name === serviceData.name) {\n          return;\n        }\n\n        if (this.mergeUsers !== true) {\n          throw new Meteor.Error('CustomOAuth', \"User with username \".concat(user.username, \" already exists\"));\n        }\n\n        const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n        const update = {\n          $set: {\n            name: serviceData.name,\n            [serviceIdKey]: serviceData.id\n          }\n        };\n        Users.update({\n          _id: user._id\n        }, update);\n      }\n    });\n    Accounts.validateNewUser(user => {\n      if (!user.services || !user.services[this.name] || !user.services[this.name].id) {\n        return true;\n      }\n\n      if (this.usernameField) {\n        user.username = user.services[this.name].username;\n      }\n\n      if (this.emailField) {\n        user.email = user.services[this.name].email;\n      }\n\n      if (this.nameField) {\n        user.name = user.services[this.name].name;\n      }\n\n      callbacks.run('afterValidateNewOAuthUser', {\n        identity: user.services[this.name],\n        serviceName: this.name,\n        user\n      });\n      return true;\n    });\n  }\n\n  registerAccessTokenService(name) {\n    const self = this;\n    const whitelisted = ['id', 'email', 'username', 'name', this.rolesClaim];\n    registerAccessTokenService(name, function (options) {\n      check(options, Match.ObjectIncluding({\n        accessToken: String,\n        expiresIn: Match.Integer\n      }));\n      const identity = self.getIdentity(options.accessToken);\n      const serviceData = {\n        accessToken: options.accessToken,\n        expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10)\n      };\n\n      const fields = _.pick(identity, whitelisted);\n\n      _.extend(serviceData, fields);\n\n      return {\n        serviceData,\n        options: {\n          profile: {\n            name: identity.name\n          }\n        }\n      };\n    });\n  }\n\n}\n\nconst {\n  updateOrCreateUserFromExternalService\n} = Accounts;\n\nAccounts.updateOrCreateUserFromExternalService = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  for (const hook of BeforeUpdateOrCreateUserFromExternalService) {\n    hook.apply(this, args);\n  }\n\n  return updateOrCreateUserFromExternalService.apply(this, args);\n};","map":{"version":3,"sources":["app/custom-oauth/server/custom_oauth_server.js"],"names":["module","export","CustomOAuth","Meteor","link","v","Match","check","Accounts","OAuth","HTTP","ServiceConfiguration","_","default","normalizers","fromTemplate","renameInvalidProperties","Logger","Users","isURL","registerAccessTokenService","callbacks","logger","Services","BeforeUpdateOrCreateUserFromExternalService","constructor","name","options","debug","test","String","Error","configure","userAgent","release","oauth","registerService","addHookToProcessUser","accessTokenParam","Object","serverURL","tokenPath","identityPath","tokenSentVia","identityTokenSentVia","keyField","usernameField","trim","emailField","nameField","avatarField","mergeUsers","rolesClaim","channelsAdmin","addAutopublishFields","getAccessToken","query","config","configurations","findOne","service","ConfigError","response","undefined","allOptions","headers","params","code","redirect_uri","_redirectUri","grant_type","state","auth","clientId","openSecret","secret","client_secret","client_id","post","err","error","message","extend","data","JSON","parse","content","getIdentity","accessToken","Authorization","get","msg","normalizeIdentity","self","identity","access_token","serviceData","_OAuthCustom","idToken","id_token","expiresAt","Date","parseInt","expires_in","refresh_token","refreshToken","profile","normalizer","values","result","username","getUsername","email","getEmail","avatarUrl","getAvatarUrl","getCustomName","getName","retrieveCredential","credentialToken","credentialSecret","value","nickname","CharacterName","userName","preferred_username","user","push","serviceName","findOneByUsernameAndServiceNameIgnoringCase","_id","findOneByEmailAddressAndServiceNameIgnoringCase","run","services","id","serviceIdKey","update","$set","validateNewUser","whitelisted","ObjectIncluding","expiresIn","Integer","fields","pick","updateOrCreateUserFromExternalService","args","hook","apply"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\nimport { OAuth } from 'meteor/oauth';\nimport { HTTP } from 'meteor/http';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport _ from 'underscore';\n\nimport { normalizers, fromTemplate, renameInvalidProperties } from './transform_helpers';\nimport { Logger } from '../../logger';\nimport { Users } from '../../models';\nimport { isURL } from '../../utils/lib/isURL';\nimport { registerAccessTokenService } from '../../lib/server/oauth/oauth';\nimport { callbacks } from '../../../lib/callbacks';\n\nconst logger = new Logger('CustomOAuth');\n\nconst Services = {};\nconst BeforeUpdateOrCreateUserFromExternalService = [];\n\nexport class CustomOAuth {\n\tconstructor(name, options) {\n\t\tlogger.debug('Init CustomOAuth', name, options);\n\n\t\tthis.name = name;\n\t\tif (!Match.test(this.name, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Name is required and must be String');\n\t\t}\n\n\t\tif (Services[this.name]) {\n\t\t\tServices[this.name].configure(options);\n\t\t\treturn;\n\t\t}\n\n\t\tServices[this.name] = this;\n\n\t\tthis.configure(options);\n\n\t\tthis.userAgent = 'Meteor';\n\t\tif (Meteor.release) {\n\t\t\tthis.userAgent += `/${Meteor.release}`;\n\t\t}\n\n\t\tAccounts.oauth.registerService(this.name);\n\t\tthis.registerService();\n\t\tthis.addHookToProcessUser();\n\t\tthis.registerAccessTokenService(this.name, this.accessTokenParam);\n\t}\n\n\tconfigure(options) {\n\t\tif (!Match.test(options, Object)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options is required and must be Object');\n\t\t}\n\n\t\tif (!Match.test(options.serverURL, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n\t\t}\n\n\t\tif (!Match.test(options.tokenPath, String)) {\n\t\t\toptions.tokenPath = '/oauth/token';\n\t\t}\n\n\t\tif (!Match.test(options.identityPath, String)) {\n\t\t\toptions.identityPath = '/me';\n\t\t}\n\n\t\tif (!Match.test(options.accessTokenParam, String)) {\n\t\t\toptions.accessTokenParam = 'access_token';\n\t\t}\n\n\t\tthis.serverURL = options.serverURL;\n\t\tthis.tokenPath = options.tokenPath;\n\t\tthis.identityPath = options.identityPath;\n\t\tthis.tokenSentVia = options.tokenSentVia;\n\t\tthis.identityTokenSentVia = options.identityTokenSentVia;\n\t\tthis.keyField = options.keyField;\n\t\tthis.usernameField = (options.usernameField || '').trim();\n\t\tthis.emailField = (options.emailField || '').trim();\n\t\tthis.nameField = (options.nameField || '').trim();\n\t\tthis.avatarField = (options.avatarField || '').trim();\n\t\tthis.mergeUsers = options.mergeUsers;\n\t\tthis.rolesClaim = options.rolesClaim || 'roles';\n\t\tthis.accessTokenParam = options.accessTokenParam;\n\t\tthis.channelsAdmin = options.channelsAdmin || 'rocket.cat';\n\n\t\tif (this.identityTokenSentVia == null || this.identityTokenSentVia === 'default') {\n\t\t\tthis.identityTokenSentVia = this.tokenSentVia;\n\t\t}\n\n\t\tif (!isURL(this.tokenPath)) {\n\t\t\tthis.tokenPath = this.serverURL + this.tokenPath;\n\t\t}\n\n\t\tif (!isURL(this.identityPath)) {\n\t\t\tthis.identityPath = this.serverURL + this.identityPath;\n\t\t}\n\n\t\tif (Match.test(options.addAutopublishFields, Object)) {\n\t\t\tAccounts.addAutopublishFields(options.addAutopublishFields);\n\t\t}\n\t}\n\n\tgetAccessToken(query) {\n\t\tconst config = ServiceConfiguration.configurations.findOne({ service: this.name });\n\t\tif (!config) {\n\t\t\tthrow new ServiceConfiguration.ConfigError();\n\t\t}\n\n\t\tlet response = undefined;\n\n\t\tconst allOptions = {\n\t\t\theaders: {\n\t\t\t\t'User-Agent': this.userAgent, // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t\t\t'Accept': 'application/json',\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tcode: query.code,\n\t\t\t\tredirect_uri: OAuth._redirectUri(this.name, config),\n\t\t\t\tgrant_type: 'authorization_code',\n\t\t\t\tstate: query.state,\n\t\t\t},\n\t\t};\n\n\t\t// Only send clientID / secret once on header or payload.\n\t\tif (this.tokenSentVia === 'header') {\n\t\t\tallOptions.auth = `${config.clientId}:${OAuth.openSecret(config.secret)}`;\n\t\t} else {\n\t\t\tallOptions.params.client_secret = OAuth.openSecret(config.secret);\n\t\t\tallOptions.params.client_id = config.clientId;\n\t\t}\n\n\t\ttry {\n\t\t\tresponse = HTTP.post(this.tokenPath, allOptions);\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to complete OAuth handshake with ${this.name} at ${this.tokenPath}. ${err.message}`);\n\t\t\tthrow _.extend(error, { response: err.response });\n\t\t}\n\n\t\tlet data;\n\t\tif (response.data) {\n\t\t\tdata = response.data;\n\t\t} else {\n\t\t\tdata = JSON.parse(response.content);\n\t\t}\n\n\t\tif (data.error) {\n\t\t\t// if the http response was a json object with an error attribute\n\t\t\tthrow new Error(`Failed to complete OAuth handshake with ${this.name} at ${this.tokenPath}. ${data.error}`);\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\tgetIdentity(accessToken) {\n\t\tconst params = {};\n\t\tconst headers = {\n\t\t\t'User-Agent': this.userAgent, // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tif (this.identityTokenSentVia === 'header') {\n\t\t\theaders.Authorization = `Bearer ${accessToken}`;\n\t\t} else {\n\t\t\tparams[this.accessTokenParam] = accessToken;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = HTTP.get(this.identityPath, {\n\t\t\t\theaders,\n\t\t\t\tparams,\n\t\t\t});\n\n\t\t\tlet data;\n\n\t\t\tif (response.data) {\n\t\t\t\tdata = response.data;\n\t\t\t} else {\n\t\t\t\tdata = JSON.parse(response.content);\n\t\t\t}\n\n\t\t\tlogger.debug({ msg: 'Identity response', data });\n\n\t\t\treturn this.normalizeIdentity(data);\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to fetch identity from ${this.name} at ${this.identityPath}. ${err.message}`);\n\t\t\tthrow _.extend(error, { response: err.response });\n\t\t}\n\t}\n\n\tregisterService() {\n\t\tconst self = this;\n\t\tOAuth.registerService(this.name, 2, null, (query) => {\n\t\t\tconst response = self.getAccessToken(query);\n\t\t\tconst identity = self.getIdentity(response.access_token);\n\n\t\t\tconst serviceData = {\n\t\t\t\t_OAuthCustom: true,\n\t\t\t\tserverURL: self.serverURL,\n\t\t\t\taccessToken: response.access_token,\n\t\t\t\tidToken: response.id_token,\n\t\t\t\texpiresAt: +new Date() + 1000 * parseInt(response.expires_in, 10),\n\t\t\t};\n\n\t\t\t// only set the token in serviceData if it's there. this ensures\n\t\t\t// that we don't lose old ones (since we only get this on the first\n\t\t\t// log in attempt)\n\t\t\tif (response.refresh_token) {\n\t\t\t\tserviceData.refreshToken = response.refresh_token;\n\t\t\t}\n\n\t\t\t_.extend(serviceData, identity);\n\n\t\t\tconst data = {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tnormalizeIdentity(identity) {\n\t\tif (identity) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tif (result) {\n\t\t\t\t\tidentity = result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.usernameField) {\n\t\t\tidentity.username = this.getUsername(identity);\n\t\t}\n\n\t\tif (this.emailField) {\n\t\t\tidentity.email = this.getEmail(identity);\n\t\t}\n\n\t\tif (this.avatarField) {\n\t\t\tidentity.avatarUrl = this.getAvatarUrl(identity);\n\t\t}\n\n\t\tif (this.nameField) {\n\t\t\tidentity.name = this.getCustomName(identity);\n\t\t} else {\n\t\t\tidentity.name = this.getName(identity);\n\t\t}\n\n\t\treturn renameInvalidProperties(identity);\n\t}\n\n\tretrieveCredential(credentialToken, credentialSecret) {\n\t\treturn OAuth.retrieveCredential(credentialToken, credentialSecret);\n\t}\n\n\tgetUsername(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.usernameField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tthrow new Meteor.Error('field_not_found', `Username field \"${this.usernameField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract username', error.message);\n\t\t}\n\t}\n\n\tgetEmail(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.emailField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tthrow new Meteor.Error('field_not_found', `Email field \"${this.emailField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract email', error.message);\n\t\t}\n\t}\n\n\tgetCustomName(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.nameField, data);\n\n\t\t\tif (!value) {\n\t\t\t\treturn this.getName(data);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract custom name', error.message);\n\t\t}\n\t}\n\n\tgetAvatarUrl(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.avatarField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tlogger.debug(`Avatar field \"${this.avatarField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract avatar url', error.message);\n\t\t}\n\t}\n\n\tgetName(identity) {\n\t\tconst name =\n\t\t\tidentity.name ||\n\t\t\tidentity.username ||\n\t\t\tidentity.nickname ||\n\t\t\tidentity.CharacterName ||\n\t\t\tidentity.userName ||\n\t\t\tidentity.preferred_username ||\n\t\t\t(identity.user && identity.user.name);\n\t\treturn name;\n\t}\n\n\taddHookToProcessUser() {\n\t\tBeforeUpdateOrCreateUserFromExternalService.push((serviceName, serviceData /* , options*/) => {\n\t\t\tif (serviceName !== this.name) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (serviceData.username) {\n\t\t\t\tlet user = undefined;\n\n\t\t\t\tif (this.keyField === 'username') {\n\t\t\t\t\tuser = Users.findOneByUsernameAndServiceNameIgnoringCase(serviceData.username, serviceData._id, serviceName);\n\t\t\t\t} else if (this.keyField === 'email') {\n\t\t\t\t\tuser = Users.findOneByEmailAddressAndServiceNameIgnoringCase(serviceData.email, serviceData._id, serviceName);\n\t\t\t\t}\n\n\t\t\t\tif (!user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcallbacks.run('afterProcessOAuthUser', { serviceName, serviceData, user });\n\n\t\t\t\t// User already created or merged and has identical name as before\n\t\t\t\tif (\n\t\t\t\t\tuser.services &&\n\t\t\t\t\tuser.services[serviceName] &&\n\t\t\t\t\tuser.services[serviceName].id === serviceData.id &&\n\t\t\t\t\tuser.name === serviceData.name\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.mergeUsers !== true) {\n\t\t\t\t\tthrow new Meteor.Error('CustomOAuth', `User with username ${user.username} already exists`);\n\t\t\t\t}\n\n\t\t\t\tconst serviceIdKey = `services.${serviceName}.id`;\n\t\t\t\tconst update = {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tname: serviceData.name,\n\t\t\t\t\t\t[serviceIdKey]: serviceData.id,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tUsers.update({ _id: user._id }, update);\n\t\t\t}\n\t\t});\n\n\t\tAccounts.validateNewUser((user) => {\n\t\t\tif (!user.services || !user.services[this.name] || !user.services[this.name].id) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.usernameField) {\n\t\t\t\tuser.username = user.services[this.name].username;\n\t\t\t}\n\n\t\t\tif (this.emailField) {\n\t\t\t\tuser.email = user.services[this.name].email;\n\t\t\t}\n\n\t\t\tif (this.nameField) {\n\t\t\t\tuser.name = user.services[this.name].name;\n\t\t\t}\n\n\t\t\tcallbacks.run('afterValidateNewOAuthUser', {\n\t\t\t\tidentity: user.services[this.name],\n\t\t\t\tserviceName: this.name,\n\t\t\t\tuser,\n\t\t\t});\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tregisterAccessTokenService(name) {\n\t\tconst self = this;\n\t\tconst whitelisted = ['id', 'email', 'username', 'name', this.rolesClaim];\n\n\t\tregisterAccessTokenService(name, function (options) {\n\t\t\tcheck(\n\t\t\t\toptions,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\taccessToken: String,\n\t\t\t\t\texpiresIn: Match.Integer,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst identity = self.getIdentity(options.accessToken);\n\n\t\t\tconst serviceData = {\n\t\t\t\taccessToken: options.accessToken,\n\t\t\t\texpiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10),\n\t\t\t};\n\n\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\t_.extend(serviceData, fields);\n\n\t\t\treturn {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n}\n\nconst { updateOrCreateUserFromExternalService } = Accounts;\nAccounts.updateOrCreateUserFromExternalService = function (...args /* serviceName, serviceData, options*/) {\n\tfor (const hook of BeforeUpdateOrCreateUserFromExternalService) {\n\t\thook.apply(this, args);\n\t}\n\n\treturn updateOrCreateUserFromExternalService.apply(this, args);\n};\n"]},"sourceType":"module","hash":"387a591b6fbf35ae9e2fa13d24967d8114e377e6"}
