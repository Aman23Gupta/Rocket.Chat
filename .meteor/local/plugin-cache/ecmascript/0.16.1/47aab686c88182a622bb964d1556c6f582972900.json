{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/im.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/im.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/im.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/im.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/im.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Subscriptions, Users, Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 2);\nlet Uploads;\nmodule.link(\"../../../models/server/raw\", {\n  Uploads(v) {\n    Uploads = v;\n  }\n\n}, 3);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 4);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 7);\nlet getDirectMessageByNameOrIdWithOptionToJoin;\nmodule.link(\"../../../lib/server/functions/getDirectMessageByNameOrIdWithOptionToJoin\", {\n  getDirectMessageByNameOrIdWithOptionToJoin(v) {\n    getDirectMessageByNameOrIdWithOptionToJoin = v;\n  }\n\n}, 8);\nlet createDirectMessage;\nmodule.link(\"../../../../server/methods/createDirectMessage\", {\n  createDirectMessage(v) {\n    createDirectMessage = v;\n  }\n\n}, 9);\n\nfunction findDirectMessageRoom(params, user, allowAdminOverride) {\n  if ((!params.roomId || !params.roomId.trim()) && (!params.username || !params.username.trim())) {\n    throw new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" or \"username\" is required');\n  }\n\n  const room = getDirectMessageByNameOrIdWithOptionToJoin({\n    currentUserId: user._id,\n    nameOrId: params.username || params.roomId\n  });\n  const canAccess = canAccessRoom(room, user) || allowAdminOverride && hasPermission(user._id, 'view-room-administration');\n\n  if (!canAccess || !room || room.t !== 'd') {\n    throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"username\" param provided does not match any direct message');\n  }\n\n  const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id);\n  return {\n    room,\n    subscription\n  };\n}\n\nAPI.v1.addRoute(['dm.create', 'im.create'], {\n  authRequired: true\n}, {\n  post() {\n    const {\n      username,\n      usernames,\n      excludeSelf\n    } = this.requestParams();\n    const users = username ? [username] : usernames && usernames.split(',').map(username => username.trim());\n\n    if (!users) {\n      throw new Meteor.Error('error-room-not-found', 'The required \"username\" or \"usernames\" param provided does not match any direct message');\n    }\n\n    const room = createDirectMessage(users, this.userId, excludeSelf);\n    return API.v1.success({\n      room: _objectSpread(_objectSpread({}, room), {}, {\n        _id: room.rid\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.delete', 'im.delete'], {\n  authRequired: true\n}, {\n  post() {\n    if (!hasPermission(this.userId, 'view-room-administration')) {\n      return API.v1.unauthorized();\n    }\n\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user, true);\n    Meteor.call('eraseRoom', findResult.room._id);\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute(['dm.close', 'im.close'], {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n    if (!findResult.subscription.open) {\n      return API.v1.failure(\"The direct message room, \".concat(this.bodyParams.name, \", is already closed to the sender\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('hideRoom', findResult.room._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute(['dm.counters', 'im.counters'], {\n  authRequired: true\n}, {\n  get() {\n    const access = hasPermission(this.userId, 'view-room-administration');\n    const ruserId = this.requestParams().userId;\n    let user = this.userId;\n    let unreads = null;\n    let userMentions = null;\n    let unreadsFrom = null;\n    let joined = false;\n    let msgs = null;\n    let latest = null;\n    let members = null;\n    let lm = null;\n\n    if (ruserId) {\n      if (!access) {\n        return API.v1.unauthorized();\n      }\n\n      user = ruserId;\n    }\n\n    const rs = findDirectMessageRoom(this.requestParams(), {\n      _id: user\n    });\n    const {\n      room\n    } = rs;\n    const dm = rs.subscription;\n    lm = room.lm ? room.lm : room._updatedAt;\n\n    if (typeof dm !== 'undefined' && dm.open) {\n      if (dm.ls && room.msgs) {\n        unreads = dm.unread;\n        unreadsFrom = dm.ls;\n      }\n\n      userMentions = dm.userMentions;\n      joined = true;\n    }\n\n    if (access || joined) {\n      msgs = room.msgs;\n      latest = lm;\n      members = room.usersCount;\n    }\n\n    return API.v1.success({\n      joined,\n      members,\n      unreads,\n      unreadsFrom,\n      msgs,\n      latest,\n      userMentions\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.files', 'im.files'], {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n    const addUserObjectToEveryObject = file => {\n      if (file.userId) {\n        file = this.insertUserObject({\n          object: file,\n          userId: file.userId\n        });\n      }\n\n      return file;\n    };\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult.room._id\n    });\n    const files = Promise.await(Uploads.find(ourQuery, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).toArray());\n    return API.v1.success({\n      files: files.map(addUserObjectToEveryObject),\n      count: files.length,\n      offset,\n      total: Promise.await(Uploads.find(ourQuery).count())\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.history', 'im.history'], {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n    let latestDate = new Date();\n\n    if (this.queryParams.latest) {\n      latestDate = new Date(this.queryParams.latest);\n    }\n\n    let oldestDate = undefined;\n\n    if (this.queryParams.oldest) {\n      oldestDate = new Date(this.queryParams.oldest);\n    }\n\n    const inclusive = this.queryParams.inclusive || false;\n    let count = 20;\n\n    if (this.queryParams.count) {\n      count = parseInt(this.queryParams.count);\n    }\n\n    let offset = 0;\n\n    if (this.queryParams.offset) {\n      offset = parseInt(this.queryParams.offset);\n    }\n\n    const unreads = this.queryParams.unreads || false;\n    const showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n    const result = Meteor.call('getChannelHistory', {\n      rid: findResult.room._id,\n      latest: latestDate,\n      oldest: oldestDate,\n      inclusive,\n      offset,\n      count,\n      unreads,\n      showThreadMessages\n    });\n\n    if (!result) {\n      return API.v1.unauthorized();\n    }\n\n    return API.v1.success(result);\n  }\n\n});\nAPI.v1.addRoute(['dm.members', 'im.members'], {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort\n    } = this.parseJsonQuery();\n    check(this.queryParams, Match.ObjectIncluding({\n      status: Match.Maybe([String]),\n      filter: Match.Maybe(String)\n    }));\n    const {\n      status,\n      filter\n    } = this.queryParams;\n\n    const extraQuery = _objectSpread({\n      _id: {\n        $in: findResult.room.uids\n      }\n    }, status && {\n      status: {\n        $in: status\n      }\n    });\n\n    const options = {\n      sort: {\n        username: sort && sort.username ? sort.username : 1\n      },\n      fields: {\n        _id: 1,\n        username: 1,\n        name: 1,\n        status: 1,\n        statusText: 1,\n        utcOffset: 1\n      },\n      skip: offset,\n      limit: count\n    };\n    const cursor = Users.findByActiveUsersExcept(filter, [], options, null, [extraQuery]);\n    const members = cursor.fetch();\n    const total = cursor.count();\n    return API.v1.success({\n      members,\n      count: members.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.messages', 'im.messages'], {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult.room._id\n    });\n    const messages = Messages.find(ourQuery, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).fetch();\n    return API.v1.success({\n      messages: normalizeMessagesForUser(messages, this.userId),\n      count: messages.length,\n      offset,\n      total: Messages.find(ourQuery).count()\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.messages.others', 'im.messages.others'], {\n  authRequired: true\n}, {\n  get() {\n    if (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n      throw new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n        route: '/api/v1/im.messages.others'\n      });\n    }\n\n    if (!hasPermission(this.userId, 'view-room-administration')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      roomId\n    } = this.queryParams;\n\n    if (!roomId || !roomId.trim()) {\n      throw new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n    }\n\n    const room = Rooms.findOneById(roomId);\n\n    if (!room || room.t !== 'd') {\n      throw new Meteor.Error('error-room-not-found', \"No direct message room found by the id of: \".concat(roomId));\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: room._id\n    });\n    const msgs = Messages.find(ourQuery, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).fetch();\n    return API.v1.success({\n      messages: normalizeMessagesForUser(msgs, this.userId),\n      offset,\n      count: msgs.length,\n      total: Messages.find(ourQuery).count()\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.list', 'im.list'], {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort = {\n        name: 1\n      },\n      fields\n    } = this.parseJsonQuery(); // TODO: CACHE: Add Breacking notice since we removed the query param\n\n    const cursor = Rooms.findBySubscriptionTypeAndUserId('d', this.userId, {\n      sort,\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const total = cursor.count();\n    const rooms = cursor.fetch();\n    return API.v1.success({\n      ims: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      offset,\n      count: rooms.length,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.list.everyone', 'im.list.everyone'], {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-room-administration')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      t: 'd'\n    });\n    const rooms = Rooms.find(ourQuery, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).fetch();\n    return API.v1.success({\n      ims: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      offset,\n      count: rooms.length,\n      total: Rooms.find(ourQuery).count()\n    });\n  }\n\n});\nAPI.v1.addRoute(['dm.open', 'im.open'], {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n    if (!findResult.subscription.open) {\n      Meteor.runAsUser(this.userId, () => {\n        Meteor.call('openRoom', findResult.room._id);\n      });\n    }\n\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute(['dm.setTopic', 'im.setTopic'], {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('topic')) {\n      return API.v1.failure('The bodyParam \"topic\" is required');\n    }\n\n    const findResult = findDirectMessageRoom(this.requestParams(), this.user);\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult.room._id, 'roomTopic', this.bodyParams.topic);\n    });\n    return API.v1.success({\n      topic: this.bodyParams.topic\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/im.js"],"names":["_objectSpread","module","link","default","v","Meteor","Match","check","Subscriptions","Users","Messages","Rooms","Uploads","canAccessRoom","hasPermission","normalizeMessagesForUser","settings","API","getDirectMessageByNameOrIdWithOptionToJoin","createDirectMessage","findDirectMessageRoom","params","user","allowAdminOverride","roomId","trim","username","Error","room","currentUserId","_id","nameOrId","canAccess","t","subscription","findOneByRoomIdAndUserId","v1","addRoute","authRequired","post","usernames","excludeSelf","requestParams","users","split","map","userId","success","rid","unauthorized","findResult","call","open","failure","bodyParams","name","runAsUser","get","access","ruserId","unreads","userMentions","unreadsFrom","joined","msgs","latest","members","lm","rs","dm","_updatedAt","ls","unread","usersCount","addUserObjectToEveryObject","file","insertUserObject","object","offset","count","getPaginationItems","sort","fields","query","parseJsonQuery","ourQuery","Object","assign","files","Promise","await","find","skip","limit","toArray","length","total","latestDate","Date","queryParams","oldestDate","undefined","oldest","inclusive","parseInt","showThreadMessages","result","ObjectIncluding","status","Maybe","String","filter","extraQuery","$in","uids","options","statusText","utcOffset","cursor","findByActiveUsersExcept","fetch","messages","ts","route","findOneById","findBySubscriptionTypeAndUserId","rooms","ims","composeRoomWithLastMessage","hasOwnProperty","topic"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { Subscriptions, Users, Messages, Rooms } from '../../../models/server';\nimport { Uploads } from '../../../models/server/raw';\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { getDirectMessageByNameOrIdWithOptionToJoin } from '../../../lib/server/functions/getDirectMessageByNameOrIdWithOptionToJoin';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\n\nfunction findDirectMessageRoom(params, user, allowAdminOverride) {\n\tif ((!params.roomId || !params.roomId.trim()) && (!params.username || !params.username.trim())) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" or \"username\" is required');\n\t}\n\n\tconst room = getDirectMessageByNameOrIdWithOptionToJoin({\n\t\tcurrentUserId: user._id,\n\t\tnameOrId: params.username || params.roomId,\n\t});\n\n\tconst canAccess = canAccessRoom(room, user) || (allowAdminOverride && hasPermission(user._id, 'view-room-administration'));\n\tif (!canAccess || !room || room.t !== 'd') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"username\" param provided does not match any direct message');\n\t}\n\n\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id);\n\n\treturn {\n\t\troom,\n\t\tsubscription,\n\t};\n}\n\nAPI.v1.addRoute(\n\t['dm.create', 'im.create'],\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { username, usernames, excludeSelf } = this.requestParams();\n\n\t\t\tconst users = username ? [username] : usernames && usernames.split(',').map((username) => username.trim());\n\n\t\t\tif (!users) {\n\t\t\t\tthrow new Meteor.Error(\n\t\t\t\t\t'error-room-not-found',\n\t\t\t\t\t'The required \"username\" or \"usernames\" param provided does not match any direct message',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = createDirectMessage(users, this.userId, excludeSelf);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: { ...room, _id: room.rid },\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.delete', 'im.delete'],\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!hasPermission(this.userId, 'view-room-administration')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user, true);\n\n\t\t\tMeteor.call('eraseRoom', findResult.room._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.close', 'im.close'],\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tif (!findResult.subscription.open) {\n\t\t\t\treturn API.v1.failure(`The direct message room, ${this.bodyParams.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('hideRoom', findResult.room._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.counters', 'im.counters'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst access = hasPermission(this.userId, 'view-room-administration');\n\t\t\tconst ruserId = this.requestParams().userId;\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\t\t\tlet lm = null;\n\n\t\t\tif (ruserId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = ruserId;\n\t\t\t}\n\t\t\tconst rs = findDirectMessageRoom(this.requestParams(), { _id: user });\n\t\t\tconst { room } = rs;\n\t\t\tconst dm = rs.subscription;\n\t\t\tlm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (typeof dm !== 'undefined' && dm.open) {\n\t\t\t\tif (dm.ls && room.msgs) {\n\t\t\t\t\tunreads = dm.unread;\n\t\t\t\t\tunreadsFrom = dm.ls;\n\t\t\t\t}\n\t\t\t\tuserMentions = dm.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.files', 'im.files'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\t\t\tconst addUserObjectToEveryObject = (file) => {\n\t\t\t\tif (file.userId) {\n\t\t\t\t\tfile = this.insertUserObject({ object: file, userId: file.userId });\n\t\t\t\t}\n\t\t\t\treturn file;\n\t\t\t};\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.room._id });\n\n\t\t\tconst files = Promise.await(\n\t\t\t\tUploads.find(ourQuery, {\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields,\n\t\t\t\t}).toArray(),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: files.map(addUserObjectToEveryObject),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Promise.await(Uploads.find(ourQuery).count()),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.history', 'im.history'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(this.queryParams.count);\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(this.queryParams.offset);\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = Meteor.call('getChannelHistory', {\n\t\t\t\trid: findResult.room._id,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.members', 'im.members'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst extraQuery = {\n\t\t\t\t_id: { $in: findResult.room.uids },\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t};\n\n\t\t\tconst options = {\n\t\t\t\tsort: { username: sort && sort.username ? sort.username : 1 },\n\t\t\t\tfields: { _id: 1, username: 1, name: 1, status: 1, statusText: 1, utcOffset: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t};\n\n\t\t\tconst cursor = Users.findByActiveUsersExcept(filter, [], options, null, [extraQuery]);\n\n\t\t\tconst members = cursor.fetch();\n\t\t\tconst total = cursor.count();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages', 'im.messages'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.room._id });\n\n\t\t\tconst messages = Messages.find(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t}).fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Messages.find(ourQuery).count(),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages.others', 'im.messages.others'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/im.messages.others',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!hasPermission(this.userId, 'view-room-administration')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tif (!roomId || !roomId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst room = Rooms.findOneById(roomId);\n\t\t\tif (!room || room.t !== 'd') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', `No direct message room found by the id of: ${roomId}`);\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\n\t\t\tconst msgs = Messages.find(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t}).fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(msgs, this.userId),\n\t\t\t\toffset,\n\t\t\t\tcount: msgs.length,\n\t\t\t\ttotal: Messages.find(ourQuery).count(),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list', 'im.list'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort = { name: 1 }, fields } = this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breacking notice since we removed the query param\n\n\t\t\tconst cursor = Rooms.findBySubscriptionTypeAndUserId('d', this.userId, {\n\t\t\t\tsort,\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\t\t\tconst rooms = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list.everyone', 'im.list.everyone'],\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-room-administration')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'd' });\n\n\t\t\tconst rooms = Rooms.find(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t}).fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal: Rooms.find(ourQuery).count(),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.open', 'im.open'],\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tif (!findResult.subscription.open) {\n\t\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\t\tMeteor.call('openRoom', findResult.room._id);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.setTopic', 'im.setTopic'],\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findDirectMessageRoom(this.requestParams(), this.user);\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult.room._id, 'roomTopic', this.bodyParams.topic);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"47aab686c88182a622bb964d1556c6f582972900"}
