{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/crowd/server/crowd.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/crowd/server/crowd.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/crowd/server/crowd.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/crowd/server/crowd.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/crowd/server/crowd.js"}},"code":"module.export({\n  CROWD: () => CROWD\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SHA256;\nmodule.link(\"meteor/sha\", {\n  SHA256(v) {\n    SHA256 = v;\n  }\n\n}, 1);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 2);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 3);\nlet Logger;\nmodule.link(\"../../logger/server\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\n\nlet _setRealName;\n\nmodule.link(\"../../lib/server\", {\n  _setRealName(v) {\n    _setRealName = v;\n  }\n\n}, 5);\nlet Users;\nmodule.link(\"../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\nlet hasRole;\nmodule.link(\"../../authorization/server\", {\n  hasRole(v) {\n    hasRole = v;\n  }\n\n}, 8);\nlet deleteUser;\nmodule.link(\"../../lib/server/functions\", {\n  deleteUser(v) {\n    deleteUser = v;\n  }\n\n}, 9);\nlet setUserActiveStatus;\nmodule.link(\"../../lib/server/functions/setUserActiveStatus\", {\n  setUserActiveStatus(v) {\n    setUserActiveStatus = v;\n  }\n\n}, 10);\nconst logger = new Logger('CROWD');\n\nfunction fallbackDefaultAccountSystem(bind, username, password) {\n  if (typeof username === 'string') {\n    if (username.indexOf('@') === -1) {\n      username = {\n        username\n      };\n    } else {\n      username = {\n        email: username\n      };\n    }\n  }\n\n  logger.info('Fallback to default account system', username);\n  const loginRequest = {\n    user: username,\n    password: {\n      digest: SHA256(password),\n      algorithm: 'sha-256'\n    }\n  };\n  return Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nclass CROWD {\n  constructor() {\n    const AtlassianCrowd = require('atlassian-crowd-patched');\n\n    let url = settings.get('CROWD_URL');\n    this.options = {\n      crowd: {\n        base: !/\\/$/.test(url) ? url += '/' : url\n      },\n      application: {\n        name: settings.get('CROWD_APP_USERNAME'),\n        password: settings.get('CROWD_APP_PASSWORD')\n      },\n      rejectUnauthorized: settings.get('CROWD_Reject_Unauthorized')\n    };\n    this.crowdClient = new AtlassianCrowd(this.options);\n    this.crowdClient.user.authenticateSync = Meteor.wrapAsync(this.crowdClient.user.authenticate, this);\n    this.crowdClient.user.findSync = Meteor.wrapAsync(this.crowdClient.user.find, this);\n    this.crowdClient.searchSync = Meteor.wrapAsync(this.crowdClient.search, this);\n    this.crowdClient.pingSync = Meteor.wrapAsync(this.crowdClient.ping, this);\n  }\n\n  checkConnection() {\n    this.crowdClient.pingSync();\n  }\n\n  fetchCrowdUser(crowd_username) {\n    const userResponse = this.crowdClient.user.findSync(crowd_username);\n    return {\n      displayname: userResponse['display-name'],\n      username: userResponse.name,\n      email: userResponse.email,\n      active: userResponse.active,\n      crowd_username\n    };\n  }\n\n  authenticate(username, password) {\n    if (!username || !password) {\n      logger.error('No username or password');\n      return;\n    }\n\n    logger.info('Extracting crowd_username');\n    let user = null;\n    let crowd_username = username;\n\n    if (username.indexOf('@') !== -1) {\n      const email = username;\n      user = Meteor.users.findOne({\n        'emails.address': email\n      }, {\n        fields: {\n          username: 1,\n          crowd_username: 1,\n          crowd: 1\n        }\n      });\n\n      if (user) {\n        crowd_username = user.crowd_username;\n      } else {\n        logger.debug('Could not find a user by email', username);\n      }\n    }\n\n    if (user == null) {\n      user = Meteor.users.findOne({\n        username\n      }, {\n        fields: {\n          username: 1,\n          crowd_username: 1,\n          crowd: 1\n        }\n      });\n\n      if (user) {\n        crowd_username = user.crowd_username;\n      } else {\n        logger.debug('Could not find a user by username');\n      }\n    }\n\n    if (user == null) {\n      user = Meteor.users.findOne({\n        crowd_username: username\n      }, {\n        fields: {\n          username: 1,\n          crowd_username: 1,\n          crowd: 1\n        }\n      });\n\n      if (user) {\n        crowd_username = user.crowd_username;\n      } else {\n        logger.debug('Could not find a user with by crowd_username', username);\n      }\n    }\n\n    if (user && !crowd_username) {\n      logger.debug('Local user found, redirecting to fallback login');\n      return {\n        crowd: false\n      };\n    }\n\n    if (!user && crowd_username) {\n      logger.debug('New user. User is not synced yet.');\n    }\n\n    logger.debug('Going to crowd:', crowd_username);\n    const auth = this.crowdClient.user.authenticateSync(crowd_username, password);\n\n    if (!auth) {\n      return;\n    }\n\n    const crowdUser = this.fetchCrowdUser(crowd_username);\n\n    if (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n      crowdUser.username = user.username;\n    }\n\n    if (user) {\n      crowdUser._id = user._id;\n    }\n\n    crowdUser.password = password;\n    return crowdUser;\n  }\n\n  syncDataToUser(crowdUser, id) {\n    const self = this;\n    const user = {\n      username: self.cleanUsername(crowdUser.username),\n      crowd_username: crowdUser.crowd_username,\n      emails: [{\n        address: crowdUser.email,\n        verified: settings.get('Accounts_Verify_Email_For_External_Accounts')\n      }],\n      crowd: true\n    };\n\n    if (crowdUser.password) {\n      Accounts.setPassword(id, crowdUser.password, {\n        logout: false\n      });\n      Users.unsetRequirePasswordChange(id);\n    }\n\n    if (crowdUser.displayname) {\n      _setRealName(id, crowdUser.displayname);\n    }\n\n    Meteor.users.update(id, {\n      $set: user\n    });\n    setUserActiveStatus(id, crowdUser.active);\n  }\n\n  sync() {\n    // if crowd is disabled bail out\n    if (settings.get('CROWD_Enable') !== true) {\n      return;\n    }\n\n    const self = this;\n    const users = Users.findCrowdUsers() || [];\n    logger.info('Sync started...');\n    users.forEach(function (user) {\n      let crowd_username = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n      logger.info('Syncing user', crowd_username);\n      let crowdUser = null;\n\n      try {\n        crowdUser = self.fetchCrowdUser(crowd_username);\n      } catch (error) {\n        logger.debug(error);\n        logger.error('Could not sync user with username', crowd_username);\n        const email = user.emails[0].address;\n        logger.info('Attempting to find for user by email', email);\n        const response = self.crowdClient.searchSync('user', \"email=\\\" \".concat(email, \" \\\"\"));\n\n        if (!response || response.users.length === 0) {\n          logger.warn('Could not find user in CROWD with username or email:', crowd_username, email);\n\n          if (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n            logger.info('Removing user:', crowd_username);\n            Meteor.defer(function () {\n              Promise.await(deleteUser(user._id));\n              logger.info('User removed:', crowd_username);\n            });\n          }\n\n          return;\n        }\n\n        crowd_username = response.users[0].name;\n        logger.info('User found by email. Syncing user', crowd_username);\n        crowdUser = self.fetchCrowdUser(crowd_username);\n      }\n\n      if (settings.get('CROWD_Allow_Custom_Username') === true) {\n        crowdUser.username = user.username;\n      }\n\n      self.syncDataToUser(crowdUser, user._id);\n    });\n  }\n\n  cleanUsername(username) {\n    if (settings.get('CROWD_Clean_Usernames') === true) {\n      return username.split('@')[0];\n    }\n\n    return username;\n  }\n\n  updateUserCollection(crowdUser) {\n    const userQuery = {\n      _id: crowdUser._id\n    }; // find our existing user if they exist\n\n    const user = Meteor.users.findOne(userQuery);\n\n    if (user) {\n      const stampedToken = Accounts._generateStampedLoginToken();\n\n      Meteor.users.update(user._id, {\n        $push: {\n          'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken)\n        }\n      });\n      this.syncDataToUser(crowdUser, user._id);\n      return {\n        userId: user._id,\n        token: stampedToken.token\n      };\n    } // Attempt to create the new user\n\n\n    try {\n      crowdUser._id = Accounts.createUser(crowdUser); // sync the user data\n\n      this.syncDataToUser(crowdUser, crowdUser._id);\n      return {\n        userId: crowdUser._id\n      };\n    } catch (error) {\n      logger.error('Error creating new crowd user.', error.message);\n    }\n  }\n\n}\n\nAccounts.registerLoginHandler('crowd', function (loginRequest) {\n  if (!loginRequest.crowd) {\n    return undefined;\n  }\n\n  logger.info('Init CROWD login', loginRequest.username);\n\n  if (settings.get('CROWD_Enable') !== true) {\n    return fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n  }\n\n  try {\n    const crowd = new CROWD();\n    const user = crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\n    if (user && user.crowd === false) {\n      logger.debug(\"User \".concat(loginRequest.username, \" is not a valid crowd user, falling back\"));\n      return fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n    }\n\n    if (!user) {\n      logger.debug(\"User \".concat(loginRequest.username, \" is not allowd to access Rocket.Chat\"));\n      return new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n    }\n\n    return crowd.updateUserCollection(user);\n  } catch (error) {\n    logger.debug(error);\n    logger.error('Crowd user not authenticated due to an error');\n  }\n});\nconst jobName = 'CROWD_Sync';\nMeteor.startup(() => {\n  settings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], function addCronJobDebounced(_ref) {\n    let [data, interval] = _ref;\n\n    if (data !== true) {\n      logger.info('Disabling CROWD Background Sync');\n\n      if (SyncedCron.nextScheduledAtDate(jobName)) {\n        SyncedCron.remove(jobName);\n      }\n\n      return;\n    }\n\n    const crowd = new CROWD();\n\n    if (interval) {\n      logger.info('Enabling CROWD Background Sync');\n      SyncedCron.add({\n        name: jobName,\n        schedule: parser => parser.text(interval),\n\n        job() {\n          crowd.sync();\n        }\n\n      });\n    }\n  });\n});\nMeteor.methods({\n  crowd_test_connection() {\n    const user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'crowd_test_connection'\n      });\n    }\n\n    if (!hasRole(user._id, 'admin')) {\n      throw new Meteor.Error('error-not-authorized', 'Not authorized', {\n        method: 'crowd_test_connection'\n      });\n    }\n\n    if (settings.get('CROWD_Enable') !== true) {\n      throw new Meteor.Error('crowd_disabled');\n    }\n\n    try {\n      const crowd = new CROWD();\n      crowd.checkConnection();\n      return {\n        message: 'Connection success',\n        params: []\n      };\n    } catch (error) {\n      logger.error('Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd');\n      throw new Meteor.Error('Invalid connection details', '', {\n        method: 'crowd_test_connection'\n      });\n    }\n  },\n\n  crowd_sync_users() {\n    const user = Meteor.user();\n\n    if (settings.get('CROWD_Enable') !== true) {\n      throw new Meteor.Error('crowd_disabled');\n    }\n\n    if (!hasRole(user._id, 'admin')) {\n      throw new Meteor.Error('error-not-authorized', 'Not authorized', {\n        method: 'crowd_sync_users'\n      });\n    }\n\n    try {\n      const crowd = new CROWD();\n      const startTime = Date.now();\n      crowd.sync();\n      const stopTime = Date.now();\n      const actual = Math.ceil((stopTime - startTime) / 1000);\n      return {\n        message: \"User data synced in \".concat(actual, \" seconds\"),\n        params: []\n      };\n    } catch (error) {\n      logger.error('Error syncing user data. ', error.message);\n      throw new Meteor.Error('Error syncing user data', '', {\n        method: 'crowd_sync_users'\n      });\n    }\n  }\n\n});","map":{"version":3,"sources":["app/crowd/server/crowd.js"],"names":["module","export","CROWD","Meteor","link","v","SHA256","SyncedCron","Accounts","Logger","_setRealName","Users","settings","hasRole","deleteUser","setUserActiveStatus","logger","fallbackDefaultAccountSystem","bind","username","password","indexOf","email","info","loginRequest","user","digest","algorithm","_runLoginHandlers","constructor","AtlassianCrowd","require","url","get","options","crowd","base","test","application","name","rejectUnauthorized","crowdClient","authenticateSync","wrapAsync","authenticate","findSync","find","searchSync","search","pingSync","ping","checkConnection","fetchCrowdUser","crowd_username","userResponse","displayname","active","error","users","findOne","fields","debug","auth","crowdUser","_id","syncDataToUser","id","self","cleanUsername","emails","address","verified","setPassword","logout","unsetRequirePasswordChange","update","$set","sync","findCrowdUsers","forEach","hasOwnProperty","response","length","warn","defer","Promise","await","split","updateUserCollection","userQuery","stampedToken","_generateStampedLoginToken","$push","_hashStampedToken","userId","token","createUser","message","registerLoginHandler","undefined","crowdPassword","Error","jobName","startup","watchMultiple","addCronJobDebounced","data","interval","nextScheduledAtDate","remove","add","schedule","parser","text","job","methods","crowd_test_connection","method","params","crowd_sync_users","startTime","Date","now","stopTime","actual","Math","ceil"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { SHA256 } from 'meteor/sha';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { Logger } from '../../logger/server';\nimport { _setRealName } from '../../lib/server';\nimport { Users } from '../../models/server';\nimport { settings } from '../../settings/server';\nimport { hasRole } from '../../authorization/server';\nimport { deleteUser } from '../../lib/server/functions';\nimport { setUserActiveStatus } from '../../lib/server/functions/setUserActiveStatus';\n\nconst logger = new Logger('CROWD');\n\nfunction fallbackDefaultAccountSystem(bind, username, password) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = { username };\n\t\t} else {\n\t\t\tusername = { email: username };\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256',\n\t\t},\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nexport class CROWD {\n\tconstructor() {\n\t\tconst AtlassianCrowd = require('atlassian-crowd-patched');\n\t\tlet url = settings.get('CROWD_URL');\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: !/\\/$/.test(url) ? (url += '/') : url,\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: settings.get('CROWD_APP_PASSWORD'),\n\t\t\t},\n\t\t\trejectUnauthorized: settings.get('CROWD_Reject_Unauthorized'),\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\n\t\tthis.crowdClient.user.authenticateSync = Meteor.wrapAsync(this.crowdClient.user.authenticate, this);\n\t\tthis.crowdClient.user.findSync = Meteor.wrapAsync(this.crowdClient.user.find, this);\n\t\tthis.crowdClient.searchSync = Meteor.wrapAsync(this.crowdClient.search, this);\n\t\tthis.crowdClient.pingSync = Meteor.wrapAsync(this.crowdClient.ping, this);\n\t}\n\n\tcheckConnection() {\n\t\tthis.crowdClient.pingSync();\n\t}\n\n\tfetchCrowdUser(crowd_username) {\n\t\tconst userResponse = this.crowdClient.user.findSync(crowd_username);\n\n\t\treturn {\n\t\t\tdisplayname: userResponse['display-name'],\n\t\t\tusername: userResponse.name,\n\t\t\temail: userResponse.email,\n\t\t\tactive: userResponse.active,\n\t\t\tcrowd_username,\n\t\t};\n\t}\n\n\tauthenticate(username, password) {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('Extracting crowd_username');\n\t\tlet user = null;\n\t\tlet crowd_username = username;\n\n\t\tif (username.indexOf('@') !== -1) {\n\t\t\tconst email = username;\n\n\t\t\tuser = Meteor.users.findOne({ 'emails.address': email }, { fields: { username: 1, crowd_username: 1, crowd: 1 } });\n\t\t\tif (user) {\n\t\t\t\tcrowd_username = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by email', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = Meteor.users.findOne({ username }, { fields: { username: 1, crowd_username: 1, crowd: 1 } });\n\t\t\tif (user) {\n\t\t\t\tcrowd_username = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by username');\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = Meteor.users.findOne({ crowd_username: username }, { fields: { username: 1, crowd_username: 1, crowd: 1 } });\n\t\t\tif (user) {\n\t\t\t\tcrowd_username = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user with by crowd_username', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user && !crowd_username) {\n\t\t\tlogger.debug('Local user found, redirecting to fallback login');\n\t\t\treturn {\n\t\t\t\tcrowd: false,\n\t\t\t};\n\t\t}\n\n\t\tif (!user && crowd_username) {\n\t\t\tlogger.debug('New user. User is not synced yet.');\n\t\t}\n\t\tlogger.debug('Going to crowd:', crowd_username);\n\t\tconst auth = this.crowdClient.user.authenticateSync(crowd_username, password);\n\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst crowdUser = this.fetchCrowdUser(crowd_username);\n\n\t\tif (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\tcrowdUser.username = user.username;\n\t\t}\n\n\t\tif (user) {\n\t\t\tcrowdUser._id = user._id;\n\t\t}\n\t\tcrowdUser.password = password;\n\n\t\treturn crowdUser;\n\t}\n\n\tsyncDataToUser(crowdUser, id) {\n\t\tconst self = this;\n\t\tconst user = {\n\t\t\tusername: self.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tAccounts.setPassword(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tUsers.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\t_setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tMeteor.users.update(id, {\n\t\t\t$set: user,\n\t\t});\n\n\t\tsetUserActiveStatus(id, crowdUser.active);\n\t}\n\n\tsync() {\n\t\t// if crowd is disabled bail out\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst self = this;\n\t\tconst users = Users.findCrowdUsers() || [];\n\n\t\tlogger.info('Sync started...');\n\n\t\tusers.forEach(function (user) {\n\t\t\tlet crowd_username = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n\t\t\tlogger.info('Syncing user', crowd_username);\n\n\t\t\tlet crowdUser = null;\n\n\t\t\ttry {\n\t\t\t\tcrowdUser = self.fetchCrowdUser(crowd_username);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.debug(error);\n\t\t\t\tlogger.error('Could not sync user with username', crowd_username);\n\n\t\t\t\tconst email = user.emails[0].address;\n\t\t\t\tlogger.info('Attempting to find for user by email', email);\n\n\t\t\t\tconst response = self.crowdClient.searchSync('user', `email=\" ${email} \"`);\n\t\t\t\tif (!response || response.users.length === 0) {\n\t\t\t\t\tlogger.warn('Could not find user in CROWD with username or email:', crowd_username, email);\n\t\t\t\t\tif (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n\t\t\t\t\t\tlogger.info('Removing user:', crowd_username);\n\t\t\t\t\t\tMeteor.defer(function () {\n\t\t\t\t\t\t\tPromise.await(deleteUser(user._id));\n\t\t\t\t\t\t\tlogger.info('User removed:', crowd_username);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcrowd_username = response.users[0].name;\n\t\t\t\tlogger.info('User found by email. Syncing user', crowd_username);\n\n\t\t\t\tcrowdUser = self.fetchCrowdUser(crowd_username);\n\t\t\t}\n\n\t\t\tif (settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\tcrowdUser.username = user.username;\n\t\t\t}\n\n\t\t\tself.syncDataToUser(crowdUser, user._id);\n\t\t});\n\t}\n\n\tcleanUsername(username) {\n\t\tif (settings.get('CROWD_Clean_Usernames') === true) {\n\t\t\treturn username.split('@')[0];\n\t\t}\n\t\treturn username;\n\t}\n\n\tupdateUserCollection(crowdUser) {\n\t\tconst userQuery = {\n\t\t\t_id: crowdUser._id,\n\t\t};\n\n\t\t// find our existing user if they exist\n\t\tconst user = Meteor.users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tMeteor.users.update(user._id, {\n\t\t\t\t$push: {\n\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tthis.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token,\n\t\t\t};\n\t\t}\n\n\t\t// Attempt to create the new user\n\t\ttry {\n\t\t\tcrowdUser._id = Accounts.createUser(crowdUser);\n\n\t\t\t// sync the user data\n\t\t\tthis.syncDataToUser(crowdUser, crowdUser._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: crowdUser._id,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error('Error creating new crowd user.', error.message);\n\t\t}\n\t}\n}\n\nAccounts.registerLoginHandler('crowd', function (loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\ttry {\n\t\tconst crowd = new CROWD();\n\t\tconst user = crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\n\t\tif (user && user.crowd === false) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not a valid crowd user, falling back`);\n\t\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t\t}\n\n\t\tif (!user) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not allowd to access Rocket.Chat`);\n\t\t\treturn new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n\t\t}\n\n\t\treturn crowd.updateUserCollection(user);\n\t} catch (error) {\n\t\tlogger.debug(error);\n\t\tlogger.error('Crowd user not authenticated due to an error');\n\t}\n});\n\nconst jobName = 'CROWD_Sync';\n\nMeteor.startup(() => {\n\tsettings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], function addCronJobDebounced([data, interval]) {\n\t\tif (data !== true) {\n\t\t\tlogger.info('Disabling CROWD Background Sync');\n\t\t\tif (SyncedCron.nextScheduledAtDate(jobName)) {\n\t\t\t\tSyncedCron.remove(jobName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst crowd = new CROWD();\n\t\tif (interval) {\n\t\t\tlogger.info('Enabling CROWD Background Sync');\n\t\t\tSyncedCron.add({\n\t\t\t\tname: jobName,\n\t\t\t\tschedule: (parser) => parser.text(interval),\n\t\t\t\tjob() {\n\t\t\t\t\tcrowd.sync();\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n});\n\nMeteor.methods({\n\tcrowd_test_connection() {\n\t\tconst user = Meteor.user();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (!hasRole(user._id, 'admin')) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tcrowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Connection success',\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd',\n\t\t\t);\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\t},\n\tcrowd_sync_users() {\n\t\tconst user = Meteor.user();\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tif (!hasRole(user._id, 'admin')) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_sync_users',\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tconst startTime = Date.now();\n\t\t\tcrowd.sync();\n\t\t\tconst stopTime = Date.now();\n\t\t\tconst actual = Math.ceil((stopTime - startTime) / 1000);\n\n\t\t\treturn {\n\t\t\t\tmessage: `User data synced in ${actual} seconds`,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error('Error syncing user data. ', error.message);\n\t\t\tthrow new Meteor.Error('Error syncing user data', '', { method: 'crowd_sync_users' });\n\t\t}\n\t},\n});\n"]},"sourceType":"module","hash":"689356f6bcbe625c62a35651286231ae8da2aeaa"}
