{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/api/departments.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/api/departments.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/api/departments.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/livechat-enterprise/server/api/departments.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/api/departments.js"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet API;\nmodule.link(\"../../../../../app/api/server\", {\n  API(v) {\n    API = v;\n  }\n\n}, 1);\nlet hasPermission;\nmodule.link(\"../../../../../app/authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 2);\nlet findAllRooms, findAllAverageServiceTime, findAllServiceTime, findAllAverageWaitingTime, findAllNumberOfTransferredRooms, findAllNumberOfAbandonedRooms, findPercentageOfAbandonedRooms, findAllAverageOfChatDurationTime;\nmodule.link(\"../../../../../app/livechat/server/lib/analytics/departments\", {\n  findAllRooms(v) {\n    findAllRooms = v;\n  },\n\n  findAllAverageServiceTime(v) {\n    findAllAverageServiceTime = v;\n  },\n\n  findAllServiceTime(v) {\n    findAllServiceTime = v;\n  },\n\n  findAllAverageWaitingTime(v) {\n    findAllAverageWaitingTime = v;\n  },\n\n  findAllNumberOfTransferredRooms(v) {\n    findAllNumberOfTransferredRooms = v;\n  },\n\n  findAllNumberOfAbandonedRooms(v) {\n    findAllNumberOfAbandonedRooms = v;\n  },\n\n  findPercentageOfAbandonedRooms(v) {\n    findPercentageOfAbandonedRooms = v;\n  },\n\n  findAllAverageOfChatDurationTime(v) {\n    findAllAverageOfChatDurationTime = v;\n  }\n\n}, 3);\nlet findAllDepartmentsAvailable, findAllDepartmentsByUnit;\nmodule.link(\"../lib/Department\", {\n  findAllDepartmentsAvailable(v) {\n    findAllDepartmentsAvailable = v;\n  },\n\n  findAllDepartmentsByUnit(v) {\n    findAllDepartmentsByUnit = v;\n  }\n\n}, 4);\nAPI.v1.addRoute('livechat/analytics/departments/amount-of-chats', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      answered,\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(answered, Match.Maybe(String));\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllRooms({\n      start,\n      end,\n      answered: answered && answered === 'true',\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/average-service-time', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllAverageServiceTime({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/average-chat-duration-time', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllAverageOfChatDurationTime({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/total-service-time', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllServiceTime({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/average-waiting-time', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllAverageWaitingTime({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/total-transferred-chats', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllNumberOfTransferredRooms({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/total-abandoned-chats', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findAllNumberOfAbandonedRooms({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/analytics/departments/percentage-abandoned-chats', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    let {\n      start,\n      end\n    } = this.requestParams();\n    const {\n      departmentId\n    } = this.requestParams();\n    check(start, String);\n    check(end, String);\n    check(departmentId, Match.Maybe(String));\n\n    if (isNaN(Date.parse(start))) {\n      return API.v1.failure('The \"start\" query parameter must be a valid date.');\n    }\n\n    start = new Date(start);\n\n    if (isNaN(Date.parse(end))) {\n      return API.v1.failure('The \"end\" query parameter must be a valid date.');\n    }\n\n    end = new Date(end);\n    const {\n      departments,\n      total\n    } = findPercentageOfAbandonedRooms({\n      start,\n      end,\n      departmentId,\n      options: {\n        offset,\n        count\n      }\n    });\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/departments.available-by-unit/:unitId', {\n  authRequired: true\n}, {\n  get() {\n    check(this.urlParams, {\n      unitId: Match.Maybe(String)\n    });\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      unitId\n    } = this.urlParams;\n    const {\n      text,\n      onlyMyDepartments\n    } = this.queryParams;\n    const {\n      departments,\n      total\n    } = Promise.await(findAllDepartmentsAvailable(this.userId, unitId, offset, count, text, onlyMyDepartments === 'true'));\n    return API.v1.success({\n      departments,\n      count: departments.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('livechat/departments.by-unit/:id', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.urlParams, {\n        id: String\n      });\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        id\n      } = this.urlParams;\n      const {\n        departments,\n        total\n      } = Promise.await(findAllDepartmentsByUnit(id, offset, count));\n      return API.v1.success({\n        departments,\n        count: departments.length,\n        offset,\n        total\n      });\n    });\n  }\n\n});","map":{"version":3,"sources":["ee/app/livechat-enterprise/server/api/departments.js"],"names":["Match","check","module","link","v","API","hasPermission","findAllRooms","findAllAverageServiceTime","findAllServiceTime","findAllAverageWaitingTime","findAllNumberOfTransferredRooms","findAllNumberOfAbandonedRooms","findPercentageOfAbandonedRooms","findAllAverageOfChatDurationTime","findAllDepartmentsAvailable","findAllDepartmentsByUnit","v1","addRoute","authRequired","get","userId","unauthorized","offset","count","getPaginationItems","start","end","requestParams","answered","departmentId","String","Maybe","isNaN","Date","parse","failure","departments","total","options","success","length","urlParams","unitId","text","onlyMyDepartments","queryParams","Promise","await","id"],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../../../../../app/api/server';\nimport { hasPermission } from '../../../../../app/authorization/server';\nimport {\n\tfindAllRooms,\n\tfindAllAverageServiceTime,\n\tfindAllServiceTime,\n\tfindAllAverageWaitingTime,\n\tfindAllNumberOfTransferredRooms,\n\tfindAllNumberOfAbandonedRooms,\n\tfindPercentageOfAbandonedRooms,\n\tfindAllAverageOfChatDurationTime,\n} from '../../../../../app/livechat/server/lib/analytics/departments';\nimport { findAllDepartmentsAvailable, findAllDepartmentsByUnit } from '../lib/Department';\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/amount-of-chats',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { answered, departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(answered, Match.Maybe(String));\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllRooms({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tanswered: answered && answered === 'true',\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/average-service-time',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllAverageServiceTime({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/average-chat-duration-time',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllAverageOfChatDurationTime({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/total-service-time',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllServiceTime({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/average-waiting-time',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllAverageWaitingTime({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/total-transferred-chats',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllNumberOfTransferredRooms({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/total-abandoned-chats',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findAllNumberOfAbandonedRooms({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/departments/percentage-abandoned-chats',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tlet { start, end } = this.requestParams();\n\t\t\tconst { departmentId } = this.requestParams();\n\n\t\t\tcheck(start, String);\n\t\t\tcheck(end, String);\n\t\t\tcheck(departmentId, Match.Maybe(String));\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tstart = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tend = new Date(end);\n\n\t\t\tconst { departments, total } = findPercentageOfAbandonedRooms({\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },\n\t\t\t});\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/departments.available-by-unit/:unitId',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\tunitId: Match.Maybe(String),\n\t\t\t});\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { unitId } = this.urlParams;\n\t\t\tconst { text, onlyMyDepartments } = this.queryParams;\n\n\t\t\tconst { departments, total } = Promise.await(\n\t\t\t\tfindAllDepartmentsAvailable(this.userId, unitId, offset, count, text, onlyMyDepartments === 'true'),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/departments.by-unit/:id',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\tid: String,\n\t\t\t});\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst { departments, total } = await findAllDepartmentsByUnit(id, offset, count);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdepartments,\n\t\t\t\tcount: departments.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"05694d03852c55683b5e734792096d62ddd8f80b"}
