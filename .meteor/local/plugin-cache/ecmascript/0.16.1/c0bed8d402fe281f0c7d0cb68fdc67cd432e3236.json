{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/message.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/message.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/message.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/api/v1/message.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/message.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Messages, LivechatRooms, LivechatVisitors;\nmodule.link(\"../../../../models\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  }\n\n}, 3);\nlet hasPermission;\nmodule.link(\"../../../../authorization\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 4);\nlet API;\nmodule.link(\"../../../../api/server\", {\n  API(v) {\n    API = v;\n  }\n\n}, 5);\nlet loadMessageHistory;\nmodule.link(\"../../../../lib\", {\n  loadMessageHistory(v) {\n    loadMessageHistory = v;\n  }\n\n}, 6);\nlet findGuest, findRoom, normalizeHttpHeaderData;\nmodule.link(\"../lib/livechat\", {\n  findGuest(v) {\n    findGuest = v;\n  },\n\n  findRoom(v) {\n    findRoom = v;\n  },\n\n  normalizeHttpHeaderData(v) {\n    normalizeHttpHeaderData = v;\n  }\n\n}, 7);\nlet Livechat;\nmodule.link(\"../../lib/Livechat\", {\n  Livechat(v) {\n    Livechat = v;\n  }\n\n}, 8);\nlet normalizeMessageFileUpload;\nmodule.link(\"../../../../utils/server/functions/normalizeMessageFileUpload\", {\n  normalizeMessageFileUpload(v) {\n    normalizeMessageFileUpload = v;\n  }\n\n}, 9);\nlet settings;\nmodule.link(\"../../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 10);\nlet OmnichannelSourceType;\nmodule.link(\"../../../../../definition/IRoom\", {\n  OmnichannelSourceType(v) {\n    OmnichannelSourceType = v;\n  }\n\n}, 11);\nAPI.v1.addRoute('livechat/message', {\n  post() {\n    try {\n      check(this.bodyParams, {\n        _id: Match.Maybe(String),\n        token: String,\n        rid: String,\n        msg: String,\n        agent: Match.Maybe({\n          agentId: String,\n          username: String\n        })\n      });\n      const {\n        token,\n        rid,\n        agent,\n        msg\n      } = this.bodyParams;\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      if (!room.open) {\n        throw new Meteor.Error('room-closed');\n      }\n\n      if (settings.get('Livechat_enable_message_character_limit') && msg.length > parseInt(settings.get('Livechat_message_character_limit'))) {\n        throw new Meteor.Error('message-length-exceeds-character-limit');\n      }\n\n      const _id = this.bodyParams._id || Random.id();\n\n      const sendMessage = {\n        guest,\n        message: {\n          _id,\n          rid,\n          msg,\n          token\n        },\n        agent,\n        roomInfo: {\n          source: {\n            type: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API\n          }\n        }\n      };\n      const result = Promise.await(Livechat.sendMessage(sendMessage));\n\n      if (result) {\n        const message = Messages.findOneById(_id);\n        return API.v1.success({\n          message\n        });\n      }\n\n      return API.v1.failure();\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/message/:_id', {\n  get() {\n    try {\n      check(this.urlParams, {\n        _id: String\n      });\n      check(this.queryParams, {\n        token: String,\n        rid: String\n      });\n      const {\n        token,\n        rid\n      } = this.queryParams;\n      const {\n        _id\n      } = this.urlParams;\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      let message = Messages.findOneById(_id);\n\n      if (!message) {\n        throw new Meteor.Error('invalid-message');\n      }\n\n      if (message.file) {\n        message = Promise.await(normalizeMessageFileUpload(message));\n      }\n\n      return API.v1.success({\n        message\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  },\n\n  put() {\n    try {\n      check(this.urlParams, {\n        _id: String\n      });\n      check(this.bodyParams, {\n        token: String,\n        rid: String,\n        msg: String\n      });\n      const {\n        token,\n        rid\n      } = this.bodyParams;\n      const {\n        _id\n      } = this.urlParams;\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      const msg = Messages.findOneById(_id);\n\n      if (!msg) {\n        throw new Meteor.Error('invalid-message');\n      }\n\n      const result = Livechat.updateMessage({\n        guest,\n        message: {\n          _id: msg._id,\n          msg: this.bodyParams.msg\n        }\n      });\n\n      if (result) {\n        let message = Messages.findOneById(_id);\n\n        if (message.file) {\n          message = Promise.await(normalizeMessageFileUpload(message));\n        }\n\n        return API.v1.success({\n          message\n        });\n      }\n\n      return API.v1.failure();\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  },\n\n  delete() {\n    try {\n      check(this.urlParams, {\n        _id: String\n      });\n      check(this.bodyParams, {\n        token: String,\n        rid: String\n      });\n      const {\n        token,\n        rid\n      } = this.bodyParams;\n      const {\n        _id\n      } = this.urlParams;\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      const message = Messages.findOneById(_id);\n\n      if (!message) {\n        throw new Meteor.Error('invalid-message');\n      }\n\n      const result = Promise.await(Livechat.deleteMessage({\n        guest,\n        message\n      }));\n\n      if (result) {\n        return API.v1.success({\n          message: {\n            _id,\n            ts: new Date().toISOString()\n          }\n        });\n      }\n\n      return API.v1.failure();\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/messages.history/:rid', {\n  get() {\n    try {\n      check(this.urlParams, {\n        rid: String\n      });\n      const {\n        offset\n      } = this.getPaginationItems();\n      const {\n        searchText: text,\n        token\n      } = this.queryParams;\n      const {\n        rid\n      } = this.urlParams;\n      const {\n        sort\n      } = this.parseJsonQuery();\n\n      if (!token) {\n        throw new Meteor.Error('error-token-param-not-provided', 'The required \"token\" query param is missing.');\n      }\n\n      const guest = findGuest(token);\n\n      if (!guest) {\n        throw new Meteor.Error('invalid-token');\n      }\n\n      const room = findRoom(token, rid);\n\n      if (!room) {\n        throw new Meteor.Error('invalid-room');\n      }\n\n      let ls = undefined;\n\n      if (this.queryParams.ls) {\n        ls = new Date(this.queryParams.ls);\n      }\n\n      let end = undefined;\n\n      if (this.queryParams.end) {\n        end = new Date(this.queryParams.end);\n      }\n\n      let limit = 20;\n\n      if (this.queryParams.limit) {\n        limit = parseInt(this.queryParams.limit);\n      }\n\n      const messages = loadMessageHistory({\n        userId: guest._id,\n        rid,\n        end,\n        limit,\n        ls,\n        sort,\n        offset,\n        text\n      }).messages.map(function () {\n        return Promise.await(normalizeMessageFileUpload(...arguments));\n      });\n      return API.v1.success({\n        messages\n      });\n    } catch (e) {\n      return API.v1.failure(e);\n    }\n  }\n\n});\nAPI.v1.addRoute('livechat/messages', {\n  authRequired: true\n}, {\n  post() {\n    if (!hasPermission(this.userId, 'view-livechat-manager')) {\n      return API.v1.unauthorized();\n    }\n\n    if (!this.bodyParams.visitor) {\n      return API.v1.failure('Body param \"visitor\" is required');\n    }\n\n    if (!this.bodyParams.visitor.token) {\n      return API.v1.failure('Body param \"visitor.token\" is required');\n    }\n\n    if (!this.bodyParams.messages) {\n      return API.v1.failure('Body param \"messages\" is required');\n    }\n\n    if (!(this.bodyParams.messages instanceof Array)) {\n      return API.v1.failure('Body param \"messages\" is not an array');\n    }\n\n    if (this.bodyParams.messages.length === 0) {\n      return API.v1.failure('Body param \"messages\" is empty');\n    }\n\n    const visitorToken = this.bodyParams.visitor.token;\n    let visitor = LivechatVisitors.getVisitorByToken(visitorToken);\n    let rid;\n\n    if (visitor) {\n      const rooms = LivechatRooms.findOpenByVisitorToken(visitorToken).fetch();\n\n      if (rooms && rooms.length > 0) {\n        rid = rooms[0]._id;\n      } else {\n        rid = Random.id();\n      }\n    } else {\n      rid = Random.id();\n      const guest = this.bodyParams.visitor;\n      guest.connectionData = normalizeHttpHeaderData(this.request.headers);\n      const visitorId = Livechat.registerGuest(guest);\n      visitor = LivechatVisitors.findOneById(visitorId);\n    }\n\n    const sentMessages = this.bodyParams.messages.map(message => {\n      const sendMessage = {\n        guest: visitor,\n        message: {\n          _id: Random.id(),\n          rid,\n          token: visitorToken,\n          msg: message.msg\n        },\n        roomInfo: {\n          source: {\n            type: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API\n          }\n        }\n      };\n      const sentMessage = Promise.await(Livechat.sendMessage(sendMessage));\n      return {\n        username: sentMessage.u.username,\n        msg: sentMessage.msg,\n        ts: sentMessage.ts\n      };\n    });\n    return API.v1.success({\n      messages: sentMessages\n    });\n  }\n\n});","map":{"version":3,"sources":["app/livechat/server/api/v1/message.js"],"names":["Meteor","module","link","v","Match","check","Random","Messages","LivechatRooms","LivechatVisitors","hasPermission","API","loadMessageHistory","findGuest","findRoom","normalizeHttpHeaderData","Livechat","normalizeMessageFileUpload","settings","OmnichannelSourceType","v1","addRoute","post","bodyParams","_id","Maybe","String","token","rid","msg","agent","agentId","username","guest","Error","room","open","get","length","parseInt","id","sendMessage","message","roomInfo","source","type","isWidget","WIDGET","result","Promise","await","findOneById","success","failure","e","urlParams","queryParams","file","put","updateMessage","delete","deleteMessage","ts","Date","toISOString","offset","getPaginationItems","searchText","text","sort","parseJsonQuery","ls","undefined","end","limit","messages","userId","map","authRequired","unauthorized","visitor","Array","visitorToken","getVisitorByToken","rooms","findOpenByVisitorToken","fetch","connectionData","request","headers","visitorId","registerGuest","sentMessages","sentMessage","u"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport { Messages, LivechatRooms, LivechatVisitors } from '../../../../models';\nimport { hasPermission } from '../../../../authorization';\nimport { API } from '../../../../api/server';\nimport { loadMessageHistory } from '../../../../lib';\nimport { findGuest, findRoom, normalizeHttpHeaderData } from '../lib/livechat';\nimport { Livechat } from '../../lib/Livechat';\nimport { normalizeMessageFileUpload } from '../../../../utils/server/functions/normalizeMessageFileUpload';\nimport { settings } from '../../../../settings/server';\nimport { OmnichannelSourceType } from '../../../../../definition/IRoom';\n\nAPI.v1.addRoute('livechat/message', {\n\tpost() {\n\t\ttry {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\t_id: Match.Maybe(String),\n\t\t\t\ttoken: String,\n\t\t\t\trid: String,\n\t\t\t\tmsg: String,\n\t\t\t\tagent: Match.Maybe({\n\t\t\t\t\tagentId: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst { token, rid, agent, msg } = this.bodyParams;\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Meteor.Error('room-closed');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tsettings.get('Livechat_enable_message_character_limit') &&\n\t\t\t\tmsg.length > parseInt(settings.get('Livechat_message_character_limit'))\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('message-length-exceeds-character-limit');\n\t\t\t}\n\n\t\t\tconst _id = this.bodyParams._id || Random.id();\n\n\t\t\tconst sendMessage = {\n\t\t\t\tguest,\n\t\t\t\tmessage: {\n\t\t\t\t\t_id,\n\t\t\t\t\trid,\n\t\t\t\t\tmsg,\n\t\t\t\t\ttoken,\n\t\t\t\t},\n\t\t\t\tagent,\n\t\t\t\troomInfo: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst result = Promise.await(Livechat.sendMessage(sendMessage));\n\t\t\tif (result) {\n\t\t\t\tconst message = Messages.findOneById(_id);\n\t\t\t\treturn API.v1.success({ message });\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute('livechat/message/:_id', {\n\tget() {\n\t\ttry {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\t_id: String,\n\t\t\t});\n\n\t\t\tcheck(this.queryParams, {\n\t\t\t\ttoken: String,\n\t\t\t\trid: String,\n\t\t\t});\n\n\t\t\tconst { token, rid } = this.queryParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet message = Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Meteor.Error('invalid-message');\n\t\t\t}\n\n\t\t\tif (message.file) {\n\t\t\t\tmessage = Promise.await(normalizeMessageFileUpload(message));\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n\n\tput() {\n\t\ttry {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\t_id: String,\n\t\t\t});\n\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\ttoken: String,\n\t\t\t\trid: String,\n\t\t\t\tmsg: String,\n\t\t\t});\n\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(_id);\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = Livechat.updateMessage({\n\t\t\t\tguest,\n\t\t\t\tmessage: { _id: msg._id, msg: this.bodyParams.msg },\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tlet message = Messages.findOneById(_id);\n\t\t\t\tif (message.file) {\n\t\t\t\t\tmessage = Promise.await(normalizeMessageFileUpload(message));\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({ message });\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n\tdelete() {\n\t\ttry {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\t_id: String,\n\t\t\t});\n\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\ttoken: String,\n\t\t\t\trid: String,\n\t\t\t});\n\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst message = Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Meteor.Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = Promise.await(Livechat.deleteMessage({ guest, message }));\n\t\t\tif (result) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tts: new Date().toISOString(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute('livechat/messages.history/:rid', {\n\tget() {\n\t\ttry {\n\t\t\tcheck(this.urlParams, {\n\t\t\t\trid: String,\n\t\t\t});\n\n\t\t\tconst { offset } = this.getPaginationItems();\n\t\t\tconst { searchText: text, token } = this.queryParams;\n\t\t\tconst { rid } = this.urlParams;\n\t\t\tconst { sort } = this.parseJsonQuery();\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new Meteor.Error('error-token-param-not-provided', 'The required \"token\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst guest = findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet ls = undefined;\n\t\t\tif (this.queryParams.ls) {\n\t\t\t\tls = new Date(this.queryParams.ls);\n\t\t\t}\n\n\t\t\tlet end = undefined;\n\t\t\tif (this.queryParams.end) {\n\t\t\t\tend = new Date(this.queryParams.end);\n\t\t\t}\n\n\t\t\tlet limit = 20;\n\t\t\tif (this.queryParams.limit) {\n\t\t\t\tlimit = parseInt(this.queryParams.limit);\n\t\t\t}\n\n\t\t\tconst messages = loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\tsort,\n\t\t\t\toffset,\n\t\t\t\ttext,\n\t\t\t}).messages.map((...args) => Promise.await(normalizeMessageFileUpload(...args)));\n\t\t\treturn API.v1.success({ messages });\n\t\t} catch (e) {\n\t\t\treturn API.v1.failure(e);\n\t\t}\n\t},\n});\n\nAPI.v1.addRoute(\n\t'livechat/messages',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!hasPermission(this.userId, 'view-livechat-manager')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (!this.bodyParams.visitor) {\n\t\t\t\treturn API.v1.failure('Body param \"visitor\" is required');\n\t\t\t}\n\t\t\tif (!this.bodyParams.visitor.token) {\n\t\t\t\treturn API.v1.failure('Body param \"visitor.token\" is required');\n\t\t\t}\n\t\t\tif (!this.bodyParams.messages) {\n\t\t\t\treturn API.v1.failure('Body param \"messages\" is required');\n\t\t\t}\n\t\t\tif (!(this.bodyParams.messages instanceof Array)) {\n\t\t\t\treturn API.v1.failure('Body param \"messages\" is not an array');\n\t\t\t}\n\t\t\tif (this.bodyParams.messages.length === 0) {\n\t\t\t\treturn API.v1.failure('Body param \"messages\" is empty');\n\t\t\t}\n\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\n\t\t\tlet visitor = LivechatVisitors.getVisitorByToken(visitorToken);\n\t\t\tlet rid;\n\t\t\tif (visitor) {\n\t\t\t\tconst rooms = LivechatRooms.findOpenByVisitorToken(visitorToken).fetch();\n\t\t\t\tif (rooms && rooms.length > 0) {\n\t\t\t\t\trid = rooms[0]._id;\n\t\t\t\t} else {\n\t\t\t\t\trid = Random.id();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trid = Random.id();\n\n\t\t\t\tconst guest = this.bodyParams.visitor;\n\t\t\t\tguest.connectionData = normalizeHttpHeaderData(this.request.headers);\n\n\t\t\t\tconst visitorId = Livechat.registerGuest(guest);\n\t\t\t\tvisitor = LivechatVisitors.findOneById(visitorId);\n\t\t\t}\n\n\t\t\tconst sentMessages = this.bodyParams.messages.map((message) => {\n\t\t\t\tconst sendMessage = {\n\t\t\t\t\tguest: visitor,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\t\trid,\n\t\t\t\t\t\ttoken: visitorToken,\n\t\t\t\t\t\tmsg: message.msg,\n\t\t\t\t\t},\n\t\t\t\t\troomInfo: {\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\ttype: this.isWidget() ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst sentMessage = Promise.await(Livechat.sendMessage(sendMessage));\n\t\t\t\treturn {\n\t\t\t\t\tusername: sentMessage.u.username,\n\t\t\t\t\tmsg: sentMessage.msg,\n\t\t\t\t\tts: sentMessage.ts,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: sentMessages,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"c0bed8d402fe281f0c7d0cb68fdc67cd432e3236"}
