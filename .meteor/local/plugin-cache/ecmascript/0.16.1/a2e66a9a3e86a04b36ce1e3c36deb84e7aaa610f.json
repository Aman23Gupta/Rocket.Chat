{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/channels.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/channels.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/channels.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/channels.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/channels.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet Rooms, Subscriptions, Messages, Users;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 3);\nlet Integrations, Uploads;\nmodule.link(\"../../../models/server/raw\", {\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Uploads(v) {\n    Uploads = v;\n  }\n\n}, 4);\nlet canAccessRoom, hasPermission, hasAtLeastOnePermission, hasAllPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  hasAtLeastOnePermission(v) {\n    hasAtLeastOnePermission = v;\n  },\n\n  hasAllPermission(v) {\n    hasAllPermission = v;\n  }\n\n}, 5);\nlet mountIntegrationQueryBasedOnPermissions;\nmodule.link(\"../../../integrations/server/lib/mountQueriesBasedOnPermission\", {\n  mountIntegrationQueryBasedOnPermissions(v) {\n    mountIntegrationQueryBasedOnPermissions = v;\n  }\n\n}, 6);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 7);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 8);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 9);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 10);\nlet findUsersOfRoom;\nmodule.link(\"../../../../server/lib/findUsersOfRoom\", {\n  findUsersOfRoom(v) {\n    findUsersOfRoom = v;\n  }\n\n}, 11);\n\n// Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nfunction findChannelByIdOrName(_ref) {\n  let {\n    params,\n    checkedArchived = true,\n    userId\n  } = _ref;\n\n  if ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n    throw new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n  }\n\n  const fields = _objectSpread({}, API.v1.defaultFieldsToExclude);\n\n  let room;\n\n  if (params.roomId) {\n    room = Rooms.findOneById(params.roomId, {\n      fields\n    });\n  } else if (params.roomName) {\n    room = Rooms.findOneByName(params.roomName, {\n      fields\n    });\n  }\n\n  if (!room || room.t !== 'c' && room.t !== 'l') {\n    throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n  }\n\n  if (checkedArchived && room.archived) {\n    throw new Meteor.Error('error-room-archived', \"The channel, \".concat(room.name, \", is archived\"));\n  }\n\n  if (userId && room.lastMessage) {\n    const [lastMessage] = normalizeMessagesForUser([room.lastMessage], userId);\n    room.lastMessage = lastMessage;\n  }\n\n  return room;\n}\n\nAPI.v1.addRoute('channels.addAll', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addAllUserToRoom', findResult._id, this.bodyParams.activeUsersOnly);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.addModerator', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomModerator', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.addOwner', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomOwner', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.archive', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('archiveRoom', findResult._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.close', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    const sub = Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n    if (!sub) {\n      return API.v1.failure(\"The user/callee is not in the channel \\\"\".concat(findResult.name, \".\"));\n    }\n\n    if (!sub.open) {\n      return API.v1.failure(\"The channel, \".concat(findResult.name, \", is already closed to the sender\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('hideRoom', findResult._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.counters', {\n  authRequired: true\n}, {\n  get() {\n    const access = hasPermission(this.userId, 'view-room-administration');\n    const {\n      userId\n    } = this.requestParams();\n    let user = this.userId;\n    let unreads = null;\n    let userMentions = null;\n    let unreadsFrom = null;\n    let joined = false;\n    let msgs = null;\n    let latest = null;\n    let members = null;\n\n    if (userId) {\n      if (!access) {\n        return API.v1.unauthorized();\n      }\n\n      user = userId;\n    }\n\n    const room = findChannelByIdOrName({\n      params: this.requestParams(),\n      returnUsernames: true\n    });\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n    const lm = room.lm ? room.lm : room._updatedAt;\n\n    if (typeof subscription !== 'undefined' && subscription.open) {\n      unreads = Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n      unreadsFrom = subscription.ls || subscription.ts;\n      userMentions = subscription.userMentions;\n      joined = true;\n    }\n\n    if (access || joined) {\n      msgs = room.msgs;\n      latest = lm;\n      members = room.usersCount;\n    }\n\n    return API.v1.success({\n      joined,\n      members,\n      unreads,\n      unreadsFrom,\n      msgs,\n      latest,\n      userMentions\n    });\n  }\n\n}); // Channel -> create\n\nfunction createChannelValidator(params) {\n  if (!hasPermission(params.user.value, 'create-c')) {\n    throw new Error('unauthorized');\n  }\n\n  if (!params.name || !params.name.value) {\n    throw new Error(\"Param \\\"\".concat(params.name.key, \"\\\" is required\"));\n  }\n\n  if (params.members && params.members.value && !_.isArray(params.members.value)) {\n    throw new Error(\"Param \\\"\".concat(params.members.key, \"\\\" must be an array if provided\"));\n  }\n\n  if (params.customFields && params.customFields.value && !(typeof params.customFields.value === 'object')) {\n    throw new Error(\"Param \\\"\".concat(params.customFields.key, \"\\\" must be an object if provided\"));\n  }\n\n  if (params.teams.value && !Array.isArray(params.teams.value)) {\n    throw new Error(\"Param \".concat(params.teams.key, \" must be an array\"));\n  }\n}\n\nfunction createChannel(userId, params) {\n  const readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n  const id = Meteor.runAsUser(userId, () => Meteor.call('createChannel', params.name, params.members ? params.members : [], readOnly, params.customFields, params.extraData));\n  return {\n    channel: findChannelByIdOrName({\n      params: {\n        roomId: id.rid\n      },\n      userId: this.userId\n    })\n  };\n}\n\nAPI.channels = {};\nAPI.channels.create = {\n  validate: createChannelValidator,\n  execute: createChannel\n};\nAPI.v1.addRoute('channels.create', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      userId,\n      bodyParams\n    } = this;\n    let error;\n\n    try {\n      API.channels.create.validate({\n        user: {\n          value: userId\n        },\n        name: {\n          value: bodyParams.name,\n          key: 'name'\n        },\n        members: {\n          value: bodyParams.members,\n          key: 'members'\n        },\n        teams: {\n          value: bodyParams.teams,\n          key: 'teams'\n        }\n      });\n    } catch (e) {\n      if (e.message === 'unauthorized') {\n        error = API.v1.unauthorized();\n      } else {\n        error = API.v1.failure(e.message);\n      }\n    }\n\n    if (error) {\n      return error;\n    }\n\n    if (bodyParams.teams) {\n      const canSeeAllTeams = hasPermission(this.userId, 'view-all-teams');\n      const teams = Promise.await(Team.listByNames(bodyParams.teams, {\n        projection: {\n          _id: 1\n        }\n      }));\n      const teamMembers = [];\n\n      for (const team of teams) {\n        const {\n          records: members\n        } = Promise.await(Team.members(this.userId, team._id, canSeeAllTeams, {\n          offset: 0,\n          count: Number.MAX_SAFE_INTEGER\n        }));\n        const uids = members.map(member => member.user.username);\n        teamMembers.push(...uids);\n      }\n\n      const membersToAdd = new Set([...teamMembers, ...bodyParams.members]);\n      bodyParams.members = [...membersToAdd];\n    }\n\n    return API.v1.success(API.channels.create.execute(userId, bodyParams));\n  }\n\n});\nAPI.v1.addRoute('channels.delete', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('eraseRoom', findResult._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.files', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n\n    const addUserObjectToEveryObject = file => {\n      if (file.userId) {\n        file = this.insertUserObject({\n          object: file,\n          userId: file.userId\n        });\n      }\n\n      return file;\n    };\n\n    if (!canAccessRoom(findResult, {\n      _id: this.userId\n    })) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult._id\n    });\n    const files = Promise.await(Uploads.find(ourQuery, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    }).toArray());\n    return API.v1.success({\n      files: files.map(addUserObjectToEveryObject),\n      count: files.length,\n      offset,\n      total: Promise.await(Uploads.find(ourQuery).count())\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.getIntegrations', {\n  authRequired: true\n}, {\n  get() {\n    if (!hasAtLeastOnePermission(this.userId, ['manage-outgoing-integrations', 'manage-own-outgoing-integrations', 'manage-incoming-integrations', 'manage-own-incoming-integrations'])) {\n      return API.v1.unauthorized();\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    let includeAllPublicChannels = true;\n\n    if (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n      includeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n    }\n\n    let ourQuery = {\n      channel: \"#\".concat(findResult.name)\n    };\n\n    if (includeAllPublicChannels) {\n      ourQuery.channel = {\n        $in: [ourQuery.channel, 'all_public_channels']\n      };\n    }\n\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields: projection,\n      query\n    } = this.parseJsonQuery();\n    ourQuery = Object.assign(mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n    const cursor = Integrations.find(ourQuery, {\n      sort: sort || {\n        _createdAt: 1\n      },\n      skip: offset,\n      limit: count,\n      projection\n    });\n    const integrations = Promise.await(cursor.toArray());\n    const total = Promise.await(cursor.count());\n    return API.v1.success({\n      integrations,\n      count: integrations.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.history', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    let latestDate = new Date();\n\n    if (this.queryParams.latest) {\n      latestDate = new Date(this.queryParams.latest);\n    }\n\n    let oldestDate = undefined;\n\n    if (this.queryParams.oldest) {\n      oldestDate = new Date(this.queryParams.oldest);\n    }\n\n    const inclusive = this.queryParams.inclusive || false;\n    let count = 20;\n\n    if (this.queryParams.count) {\n      count = parseInt(this.queryParams.count);\n    }\n\n    let offset = 0;\n\n    if (this.queryParams.offset) {\n      offset = parseInt(this.queryParams.offset);\n    }\n\n    const unreads = this.queryParams.unreads || false;\n    const showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n    const result = Meteor.call('getChannelHistory', {\n      rid: findResult._id,\n      latest: latestDate,\n      oldest: oldestDate,\n      inclusive,\n      offset,\n      count,\n      unreads,\n      showThreadMessages\n    });\n\n    if (!result) {\n      return API.v1.unauthorized();\n    }\n\n    return API.v1.success(result);\n  }\n\n});\nAPI.v1.addRoute('channels.info', {\n  authRequired: true\n}, {\n  get() {\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        checkedArchived: false,\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.invite', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const users = this.getUserListFromParams();\n\n    if (!users.length) {\n      return API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addUsersToRoom', {\n        rid: findResult._id,\n        users: users.map(u => u.username)\n      });\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.join', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('joinRoom', findResult._id, this.bodyParams.joinCode);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.kick', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeUserFromRoom', {\n        rid: findResult._id,\n        username: user.username\n      });\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.leave', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('leaveRoom', findResult._id);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.list', {\n  authRequired: true\n}, {\n  get: {\n    // This is defined as such only to provide an example of how the routes can be defined :X\n    action() {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        sort,\n        fields,\n        query\n      } = this.parseJsonQuery();\n      const hasPermissionToSeeAllPublicChannels = hasPermission(this.userId, 'view-c-room');\n\n      const ourQuery = _objectSpread(_objectSpread({}, query), {}, {\n        t: 'c'\n      });\n\n      if (!hasPermissionToSeeAllPublicChannels) {\n        if (!hasPermission(this.userId, 'view-joined-room')) {\n          return API.v1.unauthorized();\n        }\n\n        const roomIds = Subscriptions.findByUserIdAndType(this.userId, 'c', {\n          fields: {\n            rid: 1\n          }\n        }).fetch().map(s => s.rid);\n        ourQuery._id = {\n          $in: roomIds\n        };\n      } // teams filter - I would love to have a way to apply this filter @ db level :(\n\n\n      const ids = Subscriptions.cachedFindByUserId(this.userId, {\n        fields: {\n          rid: 1\n        }\n      }).fetch().map(item => item.rid);\n      ourQuery.$or = [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: ids\n        }\n      }];\n      const cursor = Rooms.find(ourQuery, {\n        sort: sort || {\n          name: 1\n        },\n        skip: offset,\n        limit: count,\n        fields\n      });\n      const total = cursor.count();\n      const rooms = cursor.fetch();\n      return API.v1.success({\n        channels: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n        count: rooms.length,\n        offset,\n        total\n      });\n    }\n\n  }\n});\nAPI.v1.addRoute('channels.list.joined', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields\n    } = this.parseJsonQuery(); // TODO: CACHE: Add Breacking notice since we removed the query param\n\n    const cursor = Rooms.findBySubscriptionTypeAndUserId('c', this.userId, {\n      sort: sort || {\n        name: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const totalCount = cursor.count();\n    const rooms = cursor.fetch();\n    return API.v1.success({\n      channels: rooms.map(room => this.composeRoomWithLastMessage(room, this.userId)),\n      offset,\n      count: rooms.length,\n      total: totalCount\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.members', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n\n    if (findResult.broadcast && !hasPermission(this.userId, 'view-broadcast-member-list')) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      offset: skip,\n      count: limit\n    } = this.getPaginationItems();\n    const {\n      sort = {}\n    } = this.parseJsonQuery();\n    check(this.queryParams, Match.ObjectIncluding({\n      status: Match.Maybe([String]),\n      filter: Match.Maybe(String)\n    }));\n    const {\n      status,\n      filter\n    } = this.queryParams;\n    const cursor = findUsersOfRoom(_objectSpread(_objectSpread({\n      rid: findResult._id\n    }, status && {\n      status: {\n        $in: status\n      }\n    }), {}, {\n      skip,\n      limit,\n      filter\n    }, (sort === null || sort === void 0 ? void 0 : sort.username) && {\n      sort: {\n        username: sort.username\n      }\n    }));\n    const total = cursor.count();\n    const members = cursor.fetch();\n    return API.v1.success({\n      members,\n      count: members.length,\n      offset: skip,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.messages', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult._id\n    }); // Special check for the permissions\n\n    if (hasPermission(this.userId, 'view-joined-room') && !Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, {\n      fields: {\n        _id: 1\n      }\n    })) {\n      return API.v1.unauthorized();\n    }\n\n    if (!hasPermission(this.userId, 'view-c-room')) {\n      return API.v1.unauthorized();\n    }\n\n    const cursor = Messages.find(ourQuery, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const total = cursor.count();\n    const messages = cursor.fetch();\n    return API.v1.success({\n      messages: normalizeMessagesForUser(messages, this.userId),\n      count: messages.length,\n      offset,\n      total\n    });\n  }\n\n}); // TODO: CACHE: I dont like this method( functionality and how we implemented ) its very expensive\n// TODO check if this code is better or not\n// RocketChat.API.v1.addRoute('channels.online', { authRequired: true }, {\n// \tget() {\n// \t\tconst { query } = this.parseJsonQuery();\n// \t\tconst ourQuery = Object.assign({}, query, { t: 'c' });\n// \t\tconst room = RocketChat.models.Rooms.findOne(ourQuery);\n// \t\tif (room == null) {\n// \t\t\treturn RocketChat.API.v1.failure('Channel does not exists');\n// \t\t}\n// \t\tconst ids = RocketChat.models.Subscriptions.find({ rid: room._id }, { fields: { 'u._id': 1 } }).fetch().map(sub => sub.u._id);\n// \t\tconst online = RocketChat.models.Users.find({\n// \t\t\tusername: { $exists: 1 },\n// \t\t\t_id: { $in: ids },\n// \t\t\tstatus: { $in: ['online', 'away', 'busy'] }\n// \t\t}, {\n// \t\t\tfields: { username: 1 }\n// \t\t}).fetch();\n// \t\treturn RocketChat.API.v1.success({\n// \t\t\tonline\n// \t\t});\n// \t}\n// });\n\nAPI.v1.addRoute('channels.online', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      query\n    } = this.parseJsonQuery();\n\n    if (!query || Object.keys(query).length === 0) {\n      return API.v1.failure('Invalid query');\n    }\n\n    const ourQuery = Object.assign({}, query, {\n      t: 'c'\n    });\n    const room = Rooms.findOne(ourQuery);\n\n    if (room == null) {\n      return API.v1.failure('Channel does not exists');\n    }\n\n    const user = this.getLoggedInUser();\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    const online = Users.findUsersNotOffline({\n      fields: {\n        username: 1\n      }\n    }).fetch();\n    const onlineInRoom = [];\n    online.forEach(user => {\n      const subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n        fields: {\n          _id: 1\n        }\n      });\n\n      if (subscription) {\n        onlineInRoom.push({\n          _id: user._id,\n          username: user.username\n        });\n      }\n    });\n    return API.v1.success({\n      online: onlineInRoom\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.open', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    const sub = Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n    if (!sub) {\n      return API.v1.failure(\"The user/callee is not in the channel \\\"\".concat(findResult.name, \"\\\".\"));\n    }\n\n    if (sub.open) {\n      return API.v1.failure(\"The channel, \".concat(findResult.name, \", is already open to the sender\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('openRoom', findResult._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.removeModerator', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomModerator', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.removeOwner', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomOwner', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.rename', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.name || !this.bodyParams.name.trim()) {\n      return API.v1.failure('The bodyParam \"name\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: {\n        roomId: this.bodyParams.roomId\n      }\n    });\n\n    if (findResult.name === this.bodyParams.name) {\n      return API.v1.failure('The channel name is the same as what it would be renamed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomName', this.bodyParams.name);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: {\n          roomId: this.bodyParams.roomId\n        },\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setCustomFields', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n      return API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setDefault', {\n  authRequired: true\n}, {\n  post() {\n    if (typeof this.bodyParams.default === 'undefined') {\n      return API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.default === this.bodyParams.default) {\n      return API.v1.failure('The channel default setting is the same as what it would be changed to.', 'error-channels-setdefault-missing-default-param');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'default', ['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()));\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setDescription', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('description')) {\n      return API.v1.failure('The bodyParam \"description\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.description === this.bodyParams.description) {\n      return API.v1.failure('The channel description is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomDescription', this.bodyParams.description);\n    });\n    return API.v1.success({\n      description: this.bodyParams.description\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setJoinCode', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.joinCode || !this.bodyParams.joinCode.trim()) {\n      return API.v1.failure('The bodyParam \"joinCode\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'joinCode', this.bodyParams.joinCode);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setPurpose', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('purpose')) {\n      return API.v1.failure('The bodyParam \"purpose\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.description === this.bodyParams.purpose) {\n      return API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomDescription', this.bodyParams.purpose);\n    });\n    return API.v1.success({\n      purpose: this.bodyParams.purpose\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setReadOnly', {\n  authRequired: true\n}, {\n  post() {\n    if (typeof this.bodyParams.readOnly === 'undefined') {\n      return API.v1.failure('The bodyParam \"readOnly\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.ro === this.bodyParams.readOnly) {\n      return API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'readOnly', this.bodyParams.readOnly);\n    });\n    return API.v1.success({\n      channel: findChannelByIdOrName({\n        params: this.requestParams(),\n        userId: this.userId\n      })\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setTopic', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('topic')) {\n      return API.v1.failure('The bodyParam \"topic\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.topic === this.bodyParams.topic) {\n      return API.v1.failure('The channel topic is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomTopic', this.bodyParams.topic);\n    });\n    return API.v1.success({\n      topic: this.bodyParams.topic\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setAnnouncement', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.hasOwnProperty('announcement')) {\n      return API.v1.failure('The bodyParam \"announcement\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomAnnouncement', this.bodyParams.announcement);\n    });\n    return API.v1.success({\n      announcement: this.bodyParams.announcement\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.setType', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.type || !this.bodyParams.type.trim()) {\n      return API.v1.failure('The bodyParam \"type\" is required');\n    }\n\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n\n    if (findResult.t === this.bodyParams.type) {\n      return API.v1.failure('The channel type is the same as what it would be changed to.');\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('saveRoomSettings', findResult._id, 'roomType', this.bodyParams.type);\n    });\n    return API.v1.success({\n      channel: this.composeRoomWithLastMessage(Rooms.findOneById(findResult._id, {\n        fields: API.v1.defaultFieldsToExclude\n      }), this.userId)\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.unarchive', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n\n    if (!findResult.archived) {\n      return API.v1.failure(\"The channel, \".concat(findResult.name, \", is not archived\"));\n    }\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('unarchiveRoom', findResult._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.getAllUserMentionsByChannel', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.requestParams();\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort\n    } = this.parseJsonQuery();\n\n    if (!roomId) {\n      return API.v1.failure('The request param \"roomId\" is required');\n    }\n\n    const mentions = Meteor.runAsUser(this.userId, () => Meteor.call('getUserMentionsByChannel', {\n      roomId,\n      options: {\n        sort: sort || {\n          ts: 1\n        },\n        skip: offset,\n        limit: count\n      }\n    }));\n    const allMentions = Meteor.runAsUser(this.userId, () => Meteor.call('getUserMentionsByChannel', {\n      roomId,\n      options: {}\n    }));\n    return API.v1.success({\n      mentions,\n      count: mentions.length,\n      offset,\n      total: allMentions.length\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.roles', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const roles = Meteor.runAsUser(this.userId, () => Meteor.call('getRoomRoles', findResult._id));\n    return API.v1.success({\n      roles\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.moderators', {\n  authRequired: true\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const moderators = Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n      fields: {\n        u: 1\n      }\n    }).fetch().map(sub => sub.u);\n    return API.v1.success({\n      moderators\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.addLeader', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('addRoomLeader', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.removeLeader', {\n  authRequired: true\n}, {\n  post() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams()\n    });\n    const user = this.getUserFromParams();\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('removeRoomLeader', findResult._id, user._id);\n    });\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('channels.anonymousread', {\n  authRequired: false\n}, {\n  get() {\n    const findResult = findChannelByIdOrName({\n      params: this.requestParams(),\n      checkedArchived: false\n    });\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n    const ourQuery = Object.assign({}, query, {\n      rid: findResult._id\n    });\n\n    if (!settings.get('Accounts_AllowAnonymousRead')) {\n      throw new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n        method: 'channels.anonymousread'\n      });\n    }\n\n    const cursor = Messages.find(ourQuery, {\n      sort: sort || {\n        ts: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const total = cursor.count();\n    const messages = cursor.fetch();\n    return API.v1.success({\n      messages: normalizeMessagesForUser(messages, this.userId),\n      count: messages.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('channels.convertToTeam', {\n  authRequired: true\n}, {\n  post() {\n    if (!hasAllPermission(this.userId, ['create-team', 'edit-room'])) {\n      return API.v1.unauthorized();\n    }\n\n    const {\n      channelId,\n      channelName\n    } = this.bodyParams;\n\n    if (!channelId && !channelName) {\n      return API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n    }\n\n    const room = findChannelByIdOrName({\n      params: {\n        roomId: channelId,\n        roomName: channelName\n      },\n      userId: this.userId\n    });\n\n    if (!room) {\n      return API.v1.failure('Channel not found');\n    }\n\n    const subscriptions = Subscriptions.findByRoomId(room._id, {\n      fields: {\n        'u._id': 1\n      }\n    });\n    const members = subscriptions.fetch().map(s => s.u && s.u._id);\n    const teamData = {\n      team: {\n        name: room.name,\n        type: room.t === 'c' ? 0 : 1\n      },\n      members,\n      room: {\n        name: room.name,\n        id: room._id\n      }\n    };\n    const team = Promise.await(Team.create(this.userId, teamData));\n    return API.v1.success({\n      team\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/channels.js"],"names":["_objectSpread","module","link","default","v","Meteor","Match","check","_","Rooms","Subscriptions","Messages","Users","Integrations","Uploads","canAccessRoom","hasPermission","hasAtLeastOnePermission","hasAllPermission","mountIntegrationQueryBasedOnPermissions","normalizeMessagesForUser","API","settings","Team","findUsersOfRoom","findChannelByIdOrName","params","checkedArchived","userId","roomId","trim","roomName","Error","fields","v1","defaultFieldsToExclude","room","findOneById","findOneByName","t","archived","name","lastMessage","addRoute","authRequired","post","findResult","requestParams","runAsUser","call","_id","bodyParams","activeUsersOnly","success","channel","user","getUserFromParams","sub","findOneByRoomIdAndUserId","failure","open","get","access","unreads","userMentions","unreadsFrom","joined","msgs","latest","members","unauthorized","returnUsernames","subscription","lm","_updatedAt","countVisibleByRoomIdBetweenTimestampsInclusive","rid","ls","ts","usersCount","createChannelValidator","value","key","isArray","customFields","teams","Array","createChannel","readOnly","id","extraData","channels","create","validate","execute","error","e","message","canSeeAllTeams","Promise","await","listByNames","projection","teamMembers","team","records","offset","count","Number","MAX_SAFE_INTEGER","uids","map","member","username","push","membersToAdd","Set","addUserObjectToEveryObject","file","insertUserObject","object","getPaginationItems","sort","query","parseJsonQuery","ourQuery","Object","assign","files","find","skip","limit","toArray","length","total","includeAllPublicChannels","queryParams","$in","cursor","_createdAt","integrations","latestDate","Date","oldestDate","undefined","oldest","inclusive","parseInt","showThreadMessages","result","users","getUserListFromParams","u","joinCode","action","hasPermissionToSeeAllPublicChannels","roomIds","findByUserIdAndType","fetch","s","ids","cachedFindByUserId","item","$or","teamId","$exists","rooms","composeRoomWithLastMessage","findBySubscriptionTypeAndUserId","totalCount","broadcast","ObjectIncluding","status","Maybe","String","filter","messages","keys","findOne","getLoggedInUser","online","findUsersNotOffline","onlineInRoom","forEach","includes","toString","toLowerCase","hasOwnProperty","description","purpose","ro","topic","announcement","type","mentions","options","allMentions","roles","moderators","findByRoomIdAndRoles","method","channelId","channelName","subscriptions","findByRoomId","teamData"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { Rooms, Subscriptions, Messages, Users } from '../../../models/server';\nimport { Integrations, Uploads } from '../../../models/server/raw';\nimport { canAccessRoom, hasPermission, hasAtLeastOnePermission, hasAllPermission } from '../../../authorization/server';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { settings } from '../../../settings/server';\nimport { Team } from '../../../../server/sdk';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\n\n// Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nfunction findChannelByIdOrName({ params, checkedArchived = true, userId }) {\n\tif ((!params.roomId || !params.roomId.trim()) && (!params.roomName || !params.roomName.trim())) {\n\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst fields = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif (params.roomId) {\n\t\troom = Rooms.findOneById(params.roomId, { fields });\n\t} else if (params.roomName) {\n\t\troom = Rooms.findOneByName(params.roomName, { fields });\n\t}\n\n\tif (!room || (room.t !== 'c' && room.t !== 'l')) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\tif (userId && room.lastMessage) {\n\t\tconst [lastMessage] = normalizeMessagesForUser([room.lastMessage], userId);\n\t\troom.lastMessage = lastMessage;\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'channels.addAll',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addAllUserToRoom', findResult._id, this.bodyParams.activeUsersOnly);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomModerator', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomOwner', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.archive',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('archiveRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.close',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}.`);\n\t\t\t}\n\n\t\t\tif (!sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('hideRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.counters',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst access = hasPermission(this.userId, 'view-room-administration');\n\t\t\tconst { userId } = this.requestParams();\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = userId;\n\t\t\t}\n\t\t\tconst room = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\treturnUsernames: true,\n\t\t\t});\n\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (typeof subscription !== 'undefined' && subscription.open) {\n\t\t\t\tunreads = Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Channel -> create\n\nfunction createChannelValidator(params) {\n\tif (!hasPermission(params.user.value, 'create-c')) {\n\t\tthrow new Error('unauthorized');\n\t}\n\n\tif (!params.name || !params.name.value) {\n\t\tthrow new Error(`Param \"${params.name.key}\" is required`);\n\t}\n\n\tif (params.members && params.members.value && !_.isArray(params.members.value)) {\n\t\tthrow new Error(`Param \"${params.members.key}\" must be an array if provided`);\n\t}\n\n\tif (params.customFields && params.customFields.value && !(typeof params.customFields.value === 'object')) {\n\t\tthrow new Error(`Param \"${params.customFields.key}\" must be an object if provided`);\n\t}\n\n\tif (params.teams.value && !Array.isArray(params.teams.value)) {\n\t\tthrow new Error(`Param ${params.teams.key} must be an array`);\n\t}\n}\n\nfunction createChannel(userId, params) {\n\tconst readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n\tconst id = Meteor.runAsUser(userId, () =>\n\t\tMeteor.call('createChannel', params.name, params.members ? params.members : [], readOnly, params.customFields, params.extraData),\n\t);\n\n\treturn {\n\t\tchannel: findChannelByIdOrName({ params: { roomId: id.rid }, userId: this.userId }),\n\t};\n}\n\nAPI.channels = {};\nAPI.channels.create = {\n\tvalidate: createChannelValidator,\n\texecute: createChannel,\n};\n\nAPI.v1.addRoute(\n\t'channels.create',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { userId, bodyParams } = this;\n\n\t\t\tlet error;\n\n\t\t\ttry {\n\t\t\t\tAPI.channels.create.validate({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\tvalue: userId,\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: bodyParams.name,\n\t\t\t\t\t\tkey: 'name',\n\t\t\t\t\t},\n\t\t\t\t\tmembers: {\n\t\t\t\t\t\tvalue: bodyParams.members,\n\t\t\t\t\t\tkey: 'members',\n\t\t\t\t\t},\n\t\t\t\t\tteams: {\n\t\t\t\t\t\tvalue: bodyParams.teams,\n\t\t\t\t\t\tkey: 'teams',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tif (e.message === 'unauthorized') {\n\t\t\t\t\terror = API.v1.unauthorized();\n\t\t\t\t} else {\n\t\t\t\t\terror = API.v1.failure(e.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (bodyParams.teams) {\n\t\t\t\tconst canSeeAllTeams = hasPermission(this.userId, 'view-all-teams');\n\t\t\t\tconst teams = Promise.await(Team.listByNames(bodyParams.teams, { projection: { _id: 1 } }));\n\t\t\t\tconst teamMembers = [];\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\tconst { records: members } = Promise.await(\n\t\t\t\t\t\tTeam.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...bodyParams.members]);\n\t\t\t\tbodyParams.members = [...membersToAdd];\n\t\t\t}\n\n\t\t\treturn API.v1.success(API.channels.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.delete',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('eraseRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst addUserObjectToEveryObject = (file) => {\n\t\t\t\tif (file.userId) {\n\t\t\t\t\tfile = this.insertUserObject({ object: file, userId: file.userId });\n\t\t\t\t}\n\t\t\t\treturn file;\n\t\t\t};\n\n\t\t\tif (!canAccessRoom(findResult, { _id: this.userId })) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\tconst files = Promise.await(\n\t\t\t\tUploads.find(ourQuery, {\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields,\n\t\t\t\t}).toArray(),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: files.map(addUserObjectToEveryObject),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: Promise.await(Uploads.find(ourQuery).count()),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getIntegrations',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (\n\t\t\t\t!hasAtLeastOnePermission(this.userId, [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t])\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPublicChannels = true;\n\t\t\tif (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n\t\t\t\tincludeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n\t\t\t}\n\n\t\t\tlet ourQuery = {\n\t\t\t\tchannel: `#${findResult.name}`,\n\t\t\t};\n\n\t\t\tif (includeAllPublicChannels) {\n\t\t\t\tourQuery.channel = {\n\t\t\t\t\t$in: [ourQuery.channel, 'all_public_channels'],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields: projection, query } = this.parseJsonQuery();\n\n\t\t\tourQuery = Object.assign(mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n\t\t\tconst cursor = Integrations.find(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst integrations = Promise.await(cursor.toArray());\n\t\t\tconst total = Promise.await(cursor.count());\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.history',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(this.queryParams.count);\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(this.queryParams.offset);\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = Meteor.call('getChannelHistory', {\n\t\t\t\trid: findResult._id,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.info',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({\n\t\t\t\t\tparams: this.requestParams(),\n\t\t\t\t\tcheckedArchived: false,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.invite',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst users = this.getUserListFromParams();\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addUsersToRoom', { rid: findResult._id, users: users.map((u) => u.username) });\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('joinRoom', findResult._id, this.bodyParams.joinCode);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.kick',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeUserFromRoom', { rid: findResult._id, username: user.username });\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.leave',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('leaveRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list',\n\t{ authRequired: true },\n\t{\n\t\tget: {\n\t\t\t// This is defined as such only to provide an example of how the routes can be defined :X\n\t\t\taction() {\n\t\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\t\t\t\tconst hasPermissionToSeeAllPublicChannels = hasPermission(this.userId, 'view-c-room');\n\n\t\t\t\tconst ourQuery = { ...query, t: 'c' };\n\n\t\t\t\tif (!hasPermissionToSeeAllPublicChannels) {\n\t\t\t\t\tif (!hasPermission(this.userId, 'view-joined-room')) {\n\t\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t\t}\n\t\t\t\t\tconst roomIds = Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tfields: { rid: 1 },\n\t\t\t\t\t})\n\t\t\t\t\t\t.fetch()\n\t\t\t\t\t\t.map((s) => s.rid);\n\t\t\t\t\tourQuery._id = { $in: roomIds };\n\t\t\t\t}\n\n\t\t\t\t// teams filter - I would love to have a way to apply this filter @ db level :(\n\t\t\t\tconst ids = Subscriptions.cachedFindByUserId(this.userId, { fields: { rid: 1 } })\n\t\t\t\t\t.fetch()\n\t\t\t\t\t.map((item) => item.rid);\n\n\t\t\t\tourQuery.$or = [\n\t\t\t\t\t{\n\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t];\n\n\t\t\t\tconst cursor = Rooms.find(ourQuery, {\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields,\n\t\t\t\t});\n\n\t\t\t\tconst total = cursor.count();\n\n\t\t\t\tconst rooms = cursor.fetch();\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tchannels: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\t\tcount: rooms.length,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal,\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list.joined',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields } = this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breacking notice since we removed the query param\n\t\t\tconst cursor = Rooms.findBySubscriptionTypeAndUserId('c', this.userId, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst totalCount = cursor.count();\n\t\t\tconst rooms = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: rooms.map((room) => this.composeRoomWithLastMessage(room, this.userId)),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal: totalCount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.members',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !hasPermission(this.userId, 'view-broadcast-member-list')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = this.getPaginationItems();\n\t\t\tconst { sort = {} } = this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst cursor = findUsersOfRoom({\n\t\t\t\trid: findResult._id,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\t\t\tconst members = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.messages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\t// Special check for the permissions\n\t\t\tif (\n\t\t\t\thasPermission(this.userId, 'view-joined-room') &&\n\t\t\t\t!Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, { fields: { _id: 1 } })\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tif (!hasPermission(this.userId, 'view-c-room')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst cursor = Messages.find(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\t\t\tconst messages = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n// TODO: CACHE: I dont like this method( functionality and how we implemented ) its very expensive\n// TODO check if this code is better or not\n// RocketChat.API.v1.addRoute('channels.online', { authRequired: true }, {\n// \tget() {\n// \t\tconst { query } = this.parseJsonQuery();\n// \t\tconst ourQuery = Object.assign({}, query, { t: 'c' });\n\n// \t\tconst room = RocketChat.models.Rooms.findOne(ourQuery);\n\n// \t\tif (room == null) {\n// \t\t\treturn RocketChat.API.v1.failure('Channel does not exists');\n// \t\t}\n\n// \t\tconst ids = RocketChat.models.Subscriptions.find({ rid: room._id }, { fields: { 'u._id': 1 } }).fetch().map(sub => sub.u._id);\n\n// \t\tconst online = RocketChat.models.Users.find({\n// \t\t\tusername: { $exists: 1 },\n// \t\t\t_id: { $in: ids },\n// \t\t\tstatus: { $in: ['online', 'away', 'busy'] }\n// \t\t}, {\n// \t\t\tfields: { username: 1 }\n// \t\t}).fetch();\n\n// \t\treturn RocketChat.API.v1.success({\n// \t\t\tonline\n// \t\t});\n// \t}\n// });\n\nAPI.v1.addRoute(\n\t'channels.online',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { query } = this.parseJsonQuery();\n\t\t\tif (!query || Object.keys(query).length === 0) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'c' });\n\n\t\t\tconst room = Rooms.findOne(ourQuery);\n\t\t\tif (room == null) {\n\t\t\t\treturn API.v1.failure('Channel does not exists');\n\t\t\t}\n\n\t\t\tconst user = this.getLoggedInUser();\n\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online = Users.findUsersNotOffline({\n\t\t\t\tfields: { username: 1 },\n\t\t\t}).fetch();\n\n\t\t\tconst onlineInRoom = [];\n\t\t\tonline.forEach((user) => {\n\t\t\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tfields: { _id: 1 },\n\t\t\t\t});\n\t\t\t\tif (subscription) {\n\t\t\t\t\tonlineInRoom.push({\n\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.open',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}\".`);\n\t\t\t}\n\n\t\t\tif (sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already open to the sender`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('openRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomModerator', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomOwner', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.rename',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.name || !this.bodyParams.name.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: { roomId: this.bodyParams.roomId } });\n\n\t\t\tif (findResult.name === this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('The channel name is the same as what it would be renamed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomName', this.bodyParams.name);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({\n\t\t\t\t\tparams: { roomId: this.bodyParams.roomId },\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDefault',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (typeof this.bodyParams.default === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.default === this.bodyParams.default) {\n\t\t\t\treturn API.v1.failure(\n\t\t\t\t\t'The channel default setting is the same as what it would be changed to.',\n\t\t\t\t\t'error-channels-setdefault-missing-default-param',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call(\n\t\t\t\t\t'saveRoomSettings',\n\t\t\t\t\tfindResult._id,\n\t\t\t\t\t'default',\n\t\t\t\t\t['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.description === this.bodyParams.description) {\n\t\t\t\treturn API.v1.failure('The channel description is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomDescription', this.bodyParams.description);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.joinCode || !this.bodyParams.joinCode.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"joinCode\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'joinCode', this.bodyParams.joinCode);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.description === this.bodyParams.purpose) {\n\t\t\t\treturn API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomDescription', this.bodyParams.purpose);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setReadOnly',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (typeof this.bodyParams.readOnly === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"readOnly\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'readOnly', this.bodyParams.readOnly);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: findChannelByIdOrName({ params: this.requestParams(), userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.topic === this.bodyParams.topic) {\n\t\t\t\treturn API.v1.failure('The channel topic is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomTopic', this.bodyParams.topic);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setAnnouncement',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('announcement')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"announcement\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomAnnouncement', this.bodyParams.announcement);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setType',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.type || !this.bodyParams.type.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The channel type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('saveRoomSettings', findResult._id, 'roomType', this.bodyParams.type);\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: this.composeRoomWithLastMessage(Rooms.findOneById(findResult._id, { fields: API.v1.defaultFieldsToExclude }), this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.unarchive',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.archived) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is not archived`);\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('unarchiveRoom', findResult._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getAllUserMentionsByChannel',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.requestParams();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure('The request param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst mentions = Meteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('getUserMentionsByChannel', {\n\t\t\t\t\troomId,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\t\tskip: offset,\n\t\t\t\t\t\tlimit: count,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst allMentions = Meteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('getUserMentionsByChannel', {\n\t\t\t\t\troomId,\n\t\t\t\t\toptions: {},\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmentions,\n\t\t\t\tcount: mentions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: allMentions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.roles',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst roles = Meteor.runAsUser(this.userId, () => Meteor.call('getRoomRoles', findResult._id));\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.moderators',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst moderators = Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\tfields: { u: 1 },\n\t\t\t})\n\t\t\t\t.fetch()\n\t\t\t\t.map((sub) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('addRoomLeader', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst findResult = findChannelByIdOrName({ params: this.requestParams() });\n\n\t\t\tconst user = this.getUserFromParams();\n\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('removeRoomLeader', findResult._id, user._id);\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.anonymousread',\n\t{ authRequired: false },\n\t{\n\t\tget() {\n\t\t\tconst findResult = findChannelByIdOrName({\n\t\t\t\tparams: this.requestParams(),\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\tif (!settings.get('Accounts_AllowAnonymousRead')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n\t\t\t\t\tmethod: 'channels.anonymousread',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cursor = Messages.find(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\t\t\tconst messages = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.convertToTeam',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!hasAllPermission(this.userId, ['create-team', 'edit-room'])) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { channelId, channelName } = this.bodyParams;\n\n\t\t\tif (!channelId && !channelName) {\n\t\t\t\treturn API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n\t\t\t}\n\n\t\t\tconst room = findChannelByIdOrName({\n\t\t\t\tparams: {\n\t\t\t\t\troomId: channelId,\n\t\t\t\t\troomName: channelName,\n\t\t\t\t},\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel not found');\n\t\t\t}\n\n\t\t\tconst subscriptions = Subscriptions.findByRoomId(room._id, {\n\t\t\t\tfields: { 'u._id': 1 },\n\t\t\t});\n\n\t\t\tconst members = subscriptions.fetch().map((s) => s.u && s.u._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = Promise.await(Team.create(this.userId, teamData));\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"a2e66a9a3e86a04b36ce1e3c36deb84e7aaa610f"}
