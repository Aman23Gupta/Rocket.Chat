{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/notifyUsersOnMessage.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/lib/notifyUsersOnMessage.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/notifyUsersOnMessage.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/lib/notifyUsersOnMessage.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/lib/notifyUsersOnMessage.js"}},"code":"module.export({\n  messageContainsHighlight: () => messageContainsHighlight,\n  getMentions: () => getMentions,\n  updateUsersSubscriptions: () => updateUsersSubscriptions,\n  updateThreadUsersSubscriptions: () => updateThreadUsersSubscriptions,\n  notifyUsersOnMessage: () => notifyUsersOnMessage\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 1);\nlet Rooms, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\n\nfunction messageContainsHighlight(message, highlights) {\n  if (!highlights || highlights.length === 0) {\n    return false;\n  }\n\n  return highlights.some(function (highlight) {\n    const regexp = new RegExp(escapeRegExp(highlight), 'i');\n    return regexp.test(message.msg);\n  });\n}\n\nfunction getMentions(message) {\n  const {\n    mentions,\n    u: {\n      _id: senderId\n    }\n  } = message;\n\n  if (!mentions) {\n    return {\n      toAll: false,\n      toHere: false,\n      mentionIds: []\n    };\n  }\n\n  const toAll = mentions.some(_ref => {\n    let {\n      _id\n    } = _ref;\n    return _id === 'all';\n  });\n  const toHere = mentions.some(_ref2 => {\n    let {\n      _id\n    } = _ref2;\n    return _id === 'here';\n  });\n  const userMentions = mentions.filter(mention => !mention.type || mention.type === 'user');\n  const otherMentions = mentions.filter(mention => (mention === null || mention === void 0 ? void 0 : mention.type) !== 'user');\n  const filteredMentions = userMentions.filter(_ref3 => {\n    let {\n      _id\n    } = _ref3;\n    return _id !== senderId && !['all', 'here'].includes(_id);\n  }).map(_ref4 => {\n    let {\n      _id\n    } = _ref4;\n    return _id;\n  });\n  const mentionIds = callbacks.run('beforeGetMentions', filteredMentions, {\n    userMentions,\n    otherMentions,\n    message\n  });\n  return {\n    toAll,\n    toHere,\n    mentionIds\n  };\n}\n\nconst incGroupMentions = (rid, roomType, excludeUserId, unreadCount) => {\n  const incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n  const incUnread = roomType === 'd' || incUnreadByGroup ? 1 : 0;\n  Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(rid, excludeUserId, 1, incUnread);\n};\n\nconst incUserMentions = (rid, roomType, uids, unreadCount) => {\n  const incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n  const incUnread = roomType === 'd' || incUnreadByUser ? 1 : 0;\n  Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(rid, uids, 1, incUnread);\n};\n\nconst getUserIdsFromHighlights = (rid, message) => {\n  const highlightOptions = {\n    fields: {\n      'userHighlights': 1,\n      'u._id': 1\n    }\n  };\n  const subs = Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).fetch();\n  return subs.filter(_ref5 => {\n    let {\n      userHighlights,\n      u: {\n        _id: uid\n      }\n    } = _ref5;\n    return userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id;\n  }).map(_ref6 => {\n    let {\n      u: {\n        _id: uid\n      }\n    } = _ref6;\n    return uid;\n  });\n};\n\nfunction updateUsersSubscriptions(message, room) {\n  // Don't increase unread counter on thread messages\n  if (room != null && !message.tmid) {\n    const {\n      toAll,\n      toHere,\n      mentionIds\n    } = getMentions(message);\n    const userIds = new Set(mentionIds);\n    const unreadSetting = room.t === 'd' ? 'Unread_Count_DM' : 'Unread_Count';\n    const unreadCount = settings.get(unreadSetting);\n    getUserIdsFromHighlights(room._id, message).forEach(uid => userIds.add(uid)); // give priority to user mentions over group mentions\n\n    if (userIds.size > 0) {\n      incUserMentions(room._id, room.t, [...userIds], unreadCount);\n    } else if (toAll || toHere) {\n      incGroupMentions(room._id, room.t, message.u._id, unreadCount);\n    } // this shouldn't run only if has group mentions because it will already exclude mentioned users from the query\n\n\n    if (!toAll && !toHere && unreadCount === 'all_messages') {\n      Subscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id]);\n    }\n  } // Update all other subscriptions to alert their owners but without incrementing\n  // the unread counter, as it is only for mentions and direct messages\n  // We now set alert and open properties in two separate update commands. This proved to be more efficient on MongoDB - because it uses a more efficient index.\n\n\n  Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);\n  Subscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id);\n}\n\nfunction updateThreadUsersSubscriptions(message, room, replies) {\n  // const unreadCount = settings.get('Unread_Count');\n  // incUserMentions(room._id, room.t, replies, unreadCount);\n  Subscriptions.setAlertForRoomIdAndUserIds(message.rid, replies);\n  const repliesPlusSender = [...new Set([message.u._id, ...replies])];\n  Subscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender);\n  Subscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date());\n}\n\nfunction notifyUsersOnMessage(message, room) {\n  // skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n  if (message.editedAt) {\n    if (Math.abs(moment(message.editedAt).diff()) > 60000) {\n      // TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n      Rooms.incMsgCountById(message.rid, 1);\n      return message;\n    } // only updates last message if it was edited (skip rest of callback)\n\n\n    if (settings.get('Store_Last_Message') && (!message.tmid || message.tshow) && (!room.lastMessage || room.lastMessage._id === message._id)) {\n      Rooms.setLastMessageById(message.rid, message);\n    }\n\n    return message;\n  }\n\n  if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {\n    Rooms.incMsgCountById(message.rid, 1);\n    return message;\n  } // if message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n\n\n  if (message.tmid && !message.tshow) {\n    Rooms.incMsgCountById(message.rid, 1);\n    return message;\n  } // Update all the room activity tracker fields\n\n\n  Rooms.incMsgCountAndSetLastMessageById(message.rid, 1, message.ts, settings.get('Store_Last_Message') && message);\n  updateUsersSubscriptions(message, room);\n  return message;\n}\n\ncallbacks.add('afterSaveMessage', notifyUsersOnMessage, callbacks.priority.LOW, 'notifyUsersOnMessage');","map":{"version":3,"sources":["app/lib/server/lib/notifyUsersOnMessage.js"],"names":["module","export","messageContainsHighlight","getMentions","updateUsersSubscriptions","updateThreadUsersSubscriptions","notifyUsersOnMessage","moment","link","default","v","escapeRegExp","Rooms","Subscriptions","settings","callbacks","message","highlights","length","some","highlight","regexp","RegExp","test","msg","mentions","u","_id","senderId","toAll","toHere","mentionIds","userMentions","filter","mention","type","otherMentions","filteredMentions","includes","map","run","incGroupMentions","rid","roomType","excludeUserId","unreadCount","incUnreadByGroup","incUnread","incGroupMentionsAndUnreadForRoomIdExcludingUserId","incUserMentions","uids","incUnreadByUser","incUserMentionsAndUnreadForRoomIdAndUserIds","getUserIdsFromHighlights","highlightOptions","fields","subs","findByRoomWithUserHighlights","fetch","userHighlights","uid","room","tmid","userIds","Set","unreadSetting","t","get","forEach","add","size","incUnreadForRoomIdExcludingUserIds","setAlertForRoomIdExcludingUserId","setOpenForRoomIdExcludingUserId","replies","setAlertForRoomIdAndUserIds","repliesPlusSender","setOpenForRoomIdAndUserIds","setLastReplyForRoomIdAndUserIds","Date","editedAt","Math","abs","diff","incMsgCountById","tshow","lastMessage","setLastMessageById","ts","incMsgCountAndSetLastMessageById","priority","LOW"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { Rooms, Subscriptions } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\n\n/**\n * Chechs if a messages contains a user highlight\n *\n * @param {string} message\n * @param {array|undefined} highlights\n *\n * @returns {boolean}\n */\n\nexport function messageContainsHighlight(message, highlights) {\n\tif (!highlights || highlights.length === 0) {\n\t\treturn false;\n\t}\n\n\treturn highlights.some(function (highlight) {\n\t\tconst regexp = new RegExp(escapeRegExp(highlight), 'i');\n\t\treturn regexp.test(message.msg);\n\t});\n}\n\nexport function getMentions(message) {\n\tconst {\n\t\tmentions,\n\t\tu: { _id: senderId },\n\t} = message;\n\n\tif (!mentions) {\n\t\treturn {\n\t\t\ttoAll: false,\n\t\t\ttoHere: false,\n\t\t\tmentionIds: [],\n\t\t};\n\t}\n\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\n\tconst userMentions = mentions.filter((mention) => !mention.type || mention.type === 'user');\n\tconst otherMentions = mentions.filter((mention) => mention?.type !== 'user');\n\n\tconst filteredMentions = userMentions.filter(({ _id }) => _id !== senderId && !['all', 'here'].includes(_id)).map(({ _id }) => _id);\n\n\tconst mentionIds = callbacks.run('beforeGetMentions', filteredMentions, {\n\t\tuserMentions,\n\t\totherMentions,\n\t\tmessage,\n\t});\n\n\treturn {\n\t\ttoAll,\n\t\ttoHere,\n\t\tmentionIds,\n\t};\n}\n\nconst incGroupMentions = (rid, roomType, excludeUserId, unreadCount) => {\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnread = roomType === 'd' || incUnreadByGroup ? 1 : 0;\n\n\tSubscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(rid, excludeUserId, 1, incUnread);\n};\n\nconst incUserMentions = (rid, roomType, uids, unreadCount) => {\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnread = roomType === 'd' || incUnreadByUser ? 1 : 0;\n\n\tSubscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(rid, uids, 1, incUnread);\n};\n\nconst getUserIdsFromHighlights = (rid, message) => {\n\tconst highlightOptions = { fields: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst subs = Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).fetch();\n\n\treturn subs\n\t\t.filter(\n\t\t\t({ userHighlights, u: { _id: uid } }) => userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id,\n\t\t)\n\t\t.map(({ u: { _id: uid } }) => uid);\n};\n\nexport function updateUsersSubscriptions(message, room) {\n\t// Don't increase unread counter on thread messages\n\tif (room != null && !message.tmid) {\n\t\tconst { toAll, toHere, mentionIds } = getMentions(message);\n\n\t\tconst userIds = new Set(mentionIds);\n\n\t\tconst unreadSetting = room.t === 'd' ? 'Unread_Count_DM' : 'Unread_Count';\n\t\tconst unreadCount = settings.get(unreadSetting);\n\n\t\tgetUserIdsFromHighlights(room._id, message).forEach((uid) => userIds.add(uid));\n\n\t\t// give priority to user mentions over group mentions\n\t\tif (userIds.size > 0) {\n\t\t\tincUserMentions(room._id, room.t, [...userIds], unreadCount);\n\t\t} else if (toAll || toHere) {\n\t\t\tincGroupMentions(room._id, room.t, message.u._id, unreadCount);\n\t\t}\n\n\t\t// this shouldn't run only if has group mentions because it will already exclude mentioned users from the query\n\t\tif (!toAll && !toHere && unreadCount === 'all_messages') {\n\t\t\tSubscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id]);\n\t\t}\n\t}\n\n\t// Update all other subscriptions to alert their owners but without incrementing\n\t// the unread counter, as it is only for mentions and direct messages\n\t// We now set alert and open properties in two separate update commands. This proved to be more efficient on MongoDB - because it uses a more efficient index.\n\tSubscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);\n\tSubscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id);\n}\n\nexport function updateThreadUsersSubscriptions(message, room, replies) {\n\t// const unreadCount = settings.get('Unread_Count');\n\n\t// incUserMentions(room._id, room.t, replies, unreadCount);\n\n\tSubscriptions.setAlertForRoomIdAndUserIds(message.rid, replies);\n\n\tconst repliesPlusSender = [...new Set([message.u._id, ...replies])];\n\n\tSubscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender);\n\n\tSubscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date());\n}\n\nexport function notifyUsersOnMessage(message, room) {\n\t// skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n\tif (message.editedAt) {\n\t\tif (Math.abs(moment(message.editedAt).diff()) > 60000) {\n\t\t\t// TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n\t\t\tRooms.incMsgCountById(message.rid, 1);\n\t\t\treturn message;\n\t\t}\n\n\t\t// only updates last message if it was edited (skip rest of callback)\n\t\tif (\n\t\t\tsettings.get('Store_Last_Message') &&\n\t\t\t(!message.tmid || message.tshow) &&\n\t\t\t(!room.lastMessage || room.lastMessage._id === message._id)\n\t\t) {\n\t\t\tRooms.setLastMessageById(message.rid, message);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {\n\t\tRooms.incMsgCountById(message.rid, 1);\n\t\treturn message;\n\t}\n\n\t// if message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n\tif (message.tmid && !message.tshow) {\n\t\tRooms.incMsgCountById(message.rid, 1);\n\t\treturn message;\n\t}\n\n\t// Update all the room activity tracker fields\n\tRooms.incMsgCountAndSetLastMessageById(message.rid, 1, message.ts, settings.get('Store_Last_Message') && message);\n\n\tupdateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\ncallbacks.add('afterSaveMessage', notifyUsersOnMessage, callbacks.priority.LOW, 'notifyUsersOnMessage');\n"]},"sourceType":"module","hash":"d5cb40f122cfee164eb0bdcf8854a9f8241aaa2d"}
