{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/updateIncomingIntegration.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/integrations/server/methods/incoming/updateIncomingIntegration.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/updateIncomingIntegration.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/integrations/server/methods/incoming/updateIncomingIntegration.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/integrations/server/methods/incoming/updateIncomingIntegration.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Babel;\nmodule.link(\"meteor/babel-compiler\", {\n  Babel(v) {\n    Babel = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 3);\nlet Rooms, Users, Subscriptions;\nmodule.link(\"../../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 4);\nlet Integrations, Roles;\nmodule.link(\"../../../../models/server/raw\", {\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 5);\nlet hasAllPermission, hasPermission;\nmodule.link(\"../../../../authorization/server\", {\n  hasAllPermission(v) {\n    hasAllPermission = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 6);\nconst validChannelChars = ['@', '#'];\nMeteor.methods({\n  updateIncomingIntegration(integrationId, integration) {\n    return Promise.asyncApply(() => {\n      if (!_.isString(integration.channel) || integration.channel.trim() === '') {\n        throw new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n          method: 'updateIncomingIntegration'\n        });\n      }\n\n      const channels = _.map(integration.channel.split(','), channel => s.trim(channel));\n\n      for (const channel of channels) {\n        if (!validChannelChars.includes(channel[0])) {\n          throw new Meteor.Error('error-invalid-channel-start-with-chars', 'Invalid channel. Start with @ or #', {\n            method: 'updateIncomingIntegration'\n          });\n        }\n      }\n\n      let currentIntegration;\n\n      if (hasPermission(this.userId, 'manage-incoming-integrations')) {\n        currentIntegration = Promise.await(Integrations.findOneById(integrationId));\n      } else if (hasPermission(this.userId, 'manage-own-incoming-integrations')) {\n        currentIntegration = Promise.await(Integrations.findOne({\n          '_id': integrationId,\n          '_createdBy._id': this.userId\n        }));\n      } else {\n        throw new Meteor.Error('not_authorized', 'Unauthorized', {\n          method: 'updateIncomingIntegration'\n        });\n      }\n\n      if (!currentIntegration) {\n        throw new Meteor.Error('error-invalid-integration', 'Invalid integration', {\n          method: 'updateIncomingIntegration'\n        });\n      }\n\n      if (integration.scriptEnabled === true && integration.script && integration.script.trim() !== '') {\n        try {\n          let babelOptions = Babel.getDefaultOptions({\n            runtime: false\n          });\n          babelOptions = _.extend(babelOptions, {\n            compact: true,\n            minified: true,\n            comments: false\n          });\n          integration.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n          integration.scriptError = undefined;\n          Promise.await(Integrations.updateOne({\n            _id: integrationId\n          }, {\n            $set: {\n              scriptCompiled: integration.scriptCompiled\n            },\n            $unset: {\n              scriptError: 1\n            }\n          }));\n        } catch (e) {\n          integration.scriptCompiled = undefined;\n          integration.scriptError = _.pick(e, 'name', 'message', 'stack');\n          Promise.await(Integrations.updateOne({\n            _id: integrationId\n          }, {\n            $set: {\n              scriptError: integration.scriptError\n            },\n            $unset: {\n              scriptCompiled: 1\n            }\n          }));\n        }\n      }\n\n      for (let channel of channels) {\n        const channelType = channel[0];\n        channel = channel.substr(1);\n        let record;\n\n        switch (channelType) {\n          case '#':\n            record = Rooms.findOne({\n              $or: [{\n                _id: channel\n              }, {\n                name: channel\n              }]\n            });\n            break;\n\n          case '@':\n            record = Users.findOne({\n              $or: [{\n                _id: channel\n              }, {\n                username: channel\n              }]\n            });\n            break;\n        }\n\n        if (!record) {\n          throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n            method: 'updateIncomingIntegration'\n          });\n        }\n\n        if (!hasAllPermission(this.userId, ['manage-incoming-integrations', 'manage-own-incoming-integrations']) && !Subscriptions.findOneByRoomIdAndUserId(record._id, this.userId, {\n          fields: {\n            _id: 1\n          }\n        })) {\n          throw new Meteor.Error('error-invalid-channel', 'Invalid Channel', {\n            method: 'updateIncomingIntegration'\n          });\n        }\n      }\n\n      const user = Users.findOne({\n        username: currentIntegration.username\n      });\n\n      if (!user || !user._id) {\n        throw new Meteor.Error('error-invalid-post-as-user', 'Invalid Post As User', {\n          method: 'updateIncomingIntegration'\n        });\n      }\n\n      Promise.await(Roles.addUserRoles(user._id, 'bot'));\n      Promise.await(Integrations.updateOne({\n        _id: integrationId\n      }, {\n        $set: {\n          enabled: integration.enabled,\n          name: integration.name,\n          avatar: integration.avatar,\n          emoji: integration.emoji,\n          alias: integration.alias,\n          channel: channels,\n          script: integration.script,\n          scriptEnabled: integration.scriptEnabled,\n          _updatedAt: new Date(),\n          _updatedBy: Users.findOne(this.userId, {\n            fields: {\n              username: 1\n            }\n          })\n        }\n      }));\n      return Integrations.findOneById(integrationId);\n    });\n  }\n\n});","map":{"version":3,"sources":["app/integrations/server/methods/incoming/updateIncomingIntegration.js"],"names":["Meteor","module","link","v","Babel","_","default","s","Rooms","Users","Subscriptions","Integrations","Roles","hasAllPermission","hasPermission","validChannelChars","methods","updateIncomingIntegration","integrationId","integration","isString","channel","trim","Error","method","channels","map","split","includes","currentIntegration","userId","findOneById","findOne","scriptEnabled","script","babelOptions","getDefaultOptions","runtime","extend","compact","minified","comments","scriptCompiled","compile","code","scriptError","undefined","updateOne","_id","$set","$unset","e","pick","channelType","substr","record","$or","name","username","findOneByRoomIdAndUserId","fields","user","addUserRoles","enabled","avatar","emoji","alias","_updatedAt","Date","_updatedBy"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Babel } from 'meteor/babel-compiler';\nimport _ from 'underscore';\nimport s from 'underscore.string';\n\nimport { Rooms, Users, Subscriptions } from '../../../../models/server';\nimport { Integrations, Roles } from '../../../../models/server/raw';\nimport { hasAllPermission, hasPermission } from '../../../../authorization/server';\n\nconst validChannelChars = ['@', '#'];\n\nMeteor.methods({\n\tasync updateIncomingIntegration(integrationId, integration) {\n\t\tif (!_.isString(integration.channel) || integration.channel.trim() === '') {\n\t\t\tthrow new Meteor.Error('error-invalid-channel', 'Invalid channel', {\n\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tconst channels = _.map(integration.channel.split(','), (channel) => s.trim(channel));\n\n\t\tfor (const channel of channels) {\n\t\t\tif (!validChannelChars.includes(channel[0])) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-channel-start-with-chars', 'Invalid channel. Start with @ or #', {\n\t\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet currentIntegration;\n\n\t\tif (hasPermission(this.userId, 'manage-incoming-integrations')) {\n\t\t\tcurrentIntegration = await Integrations.findOneById(integrationId);\n\t\t} else if (hasPermission(this.userId, 'manage-own-incoming-integrations')) {\n\t\t\tcurrentIntegration = await Integrations.findOne({\n\t\t\t\t'_id': integrationId,\n\t\t\t\t'_createdBy._id': this.userId,\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Meteor.Error('not_authorized', 'Unauthorized', {\n\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tif (!currentIntegration) {\n\t\t\tthrow new Meteor.Error('error-invalid-integration', 'Invalid integration', {\n\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tif (integration.scriptEnabled === true && integration.script && integration.script.trim() !== '') {\n\t\t\ttry {\n\t\t\t\tlet babelOptions = Babel.getDefaultOptions({ runtime: false });\n\t\t\t\tbabelOptions = _.extend(babelOptions, { compact: true, minified: true, comments: false });\n\n\t\t\t\tintegration.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n\t\t\t\tintegration.scriptError = undefined;\n\t\t\t\tawait Integrations.updateOne(\n\t\t\t\t\t{ _id: integrationId },\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: { scriptCompiled: integration.scriptCompiled },\n\t\t\t\t\t\t$unset: { scriptError: 1 },\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tintegration.scriptCompiled = undefined;\n\t\t\t\tintegration.scriptError = _.pick(e, 'name', 'message', 'stack');\n\t\t\t\tawait Integrations.updateOne(\n\t\t\t\t\t{ _id: integrationId },\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tscriptError: integration.scriptError,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tscriptCompiled: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfor (let channel of channels) {\n\t\t\tconst channelType = channel[0];\n\t\t\tchannel = channel.substr(1);\n\t\t\tlet record;\n\n\t\t\tswitch (channelType) {\n\t\t\t\tcase '#':\n\t\t\t\t\trecord = Rooms.findOne({\n\t\t\t\t\t\t$or: [{ _id: channel }, { name: channel }],\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase '@':\n\t\t\t\t\trecord = Users.findOne({\n\t\t\t\t\t\t$or: [{ _id: channel }, { username: channel }],\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!record) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!hasAllPermission(this.userId, ['manage-incoming-integrations', 'manage-own-incoming-integrations']) &&\n\t\t\t\t!Subscriptions.findOneByRoomIdAndUserId(record._id, this.userId, { fields: { _id: 1 } })\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-channel', 'Invalid Channel', {\n\t\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst user = Users.findOne({ username: currentIntegration.username });\n\n\t\tif (!user || !user._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-post-as-user', 'Invalid Post As User', {\n\t\t\t\tmethod: 'updateIncomingIntegration',\n\t\t\t});\n\t\t}\n\n\t\tawait Roles.addUserRoles(user._id, 'bot');\n\n\t\tawait Integrations.updateOne(\n\t\t\t{ _id: integrationId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tenabled: integration.enabled,\n\t\t\t\t\tname: integration.name,\n\t\t\t\t\tavatar: integration.avatar,\n\t\t\t\t\temoji: integration.emoji,\n\t\t\t\t\talias: integration.alias,\n\t\t\t\t\tchannel: channels,\n\t\t\t\t\tscript: integration.script,\n\t\t\t\t\tscriptEnabled: integration.scriptEnabled,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t\t_updatedBy: Users.findOne(this.userId, { fields: { username: 1 } }),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn Integrations.findOneById(integrationId);\n\t},\n});\n"]},"sourceType":"module","hash":"7c727aff50e0481b3ee394978a7983d0d36aca4c"}
