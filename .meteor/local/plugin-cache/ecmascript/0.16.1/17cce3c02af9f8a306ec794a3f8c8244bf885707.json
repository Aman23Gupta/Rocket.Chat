{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/statistics/LivechatAgentActivityMonitor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/statistics/LivechatAgentActivityMonitor.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/statistics/LivechatAgentActivityMonitor.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/statistics/LivechatAgentActivityMonitor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/statistics/LivechatAgentActivityMonitor.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  LivechatAgentActivityMonitor: () => LivechatAgentActivityMonitor\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 2);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 3);\nlet LivechatAgentActivity, Users;\nmodule.link(\"../../../models/server\", {\n  LivechatAgentActivity(v) {\n    LivechatAgentActivity = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 4);\nlet Sessions;\nmodule.link(\"../../../models/server/raw\", {\n  Sessions(v) {\n    Sessions = v;\n  }\n\n}, 5);\n\nconst formatDate = function () {\n  let dateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  return {\n    date: parseInt(moment(dateTime).format('YYYYMMDD'))\n  };\n};\n\nclass LivechatAgentActivityMonitor {\n  constructor() {\n    this._started = false;\n    this._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n    this._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n    this._name = 'Livechat Agent Activity Monitor';\n  }\n\n  start() {\n    this._setupListeners();\n  }\n\n  stop() {\n    if (!this.isRunning()) {\n      return;\n    }\n\n    SyncedCron.remove(this._name);\n    this._started = false;\n  }\n\n  isRunning() {\n    return this._started;\n  }\n\n  _setupListeners() {\n    if (this.isRunning()) {\n      return;\n    }\n\n    this._startMonitoring();\n\n    Meteor.onConnection(connection => this._handleMeteorConnection(connection));\n    callbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n    callbacks.add('livechat.setUserStatusLivechat', this._handleUserStatusLivechatChanged);\n    this._started = true;\n  }\n\n  _startMonitoring() {\n    SyncedCron.add({\n      name: this._name,\n      schedule: parser => parser.cron('0 0 * * *'),\n      job: () => {\n        this._updateActiveSessions();\n      }\n    });\n  }\n\n  _updateActiveSessions() {\n    const openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions().fetch();\n\n    if (!openLivechatAgentSessions.length) {\n      return;\n    }\n\n    const today = moment(new Date());\n    const startedAt = new Date(today.year(), today.month(), today.date());\n\n    for (const session of openLivechatAgentSessions) {\n      const startDate = moment(session.lastStartedAt);\n      const stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n\n      const data = _objectSpread(_objectSpread({}, formatDate(startDate.toDate())), {}, {\n        agentId: session.agentId\n      });\n\n      const availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n      LivechatAgentActivity.updateLastStoppedAt(_objectSpread(_objectSpread({}, data), {}, {\n        availableTime,\n        lastStoppedAt: stoppedAt\n      }));\n      LivechatAgentActivity.updateServiceHistory(_objectSpread(_objectSpread({}, data), {}, {\n        serviceHistory: {\n          startedAt: session.lastStartedAt,\n          stoppedAt\n        }\n      }));\n\n      this._createOrUpdateSession(session.agentId, startedAt);\n    }\n  }\n\n  _handleMeteorConnection(connection) {\n    return Promise.asyncApply(() => {\n      if (!this.isRunning()) {\n        return;\n      }\n\n      const session = Promise.await(Sessions.findOne({\n        sessionId: connection.id\n      }));\n\n      if (!session) {\n        return;\n      }\n\n      const user = Users.findOneById(session.userId);\n\n      if (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n        this._createOrUpdateSession(user._id);\n      }\n\n      connection.onClose(() => {\n        if (session) {\n          this._updateSessionWhenAgentStop(session.userId);\n        }\n      });\n    });\n  }\n\n  _handleAgentStatusChanged(_ref) {\n    let {\n      userId,\n      status\n    } = _ref;\n\n    if (!this.isRunning()) {\n      return;\n    }\n\n    const user = Users.findOneById(userId);\n\n    if (!user || user.statusLivechat !== 'available') {\n      return;\n    }\n\n    if (status !== 'offline') {\n      this._createOrUpdateSession(userId);\n    } else {\n      this._updateSessionWhenAgentStop(userId);\n    }\n  }\n\n  _handleUserStatusLivechatChanged(_ref2) {\n    let {\n      userId,\n      status\n    } = _ref2;\n\n    if (!this.isRunning()) {\n      return;\n    }\n\n    const user = Users.findOneById(userId);\n\n    if (user && user.status === 'offline') {\n      return;\n    }\n\n    if (status === 'available') {\n      this._createOrUpdateSession(userId);\n    }\n\n    if (status === 'not-available') {\n      this._updateSessionWhenAgentStop(userId);\n    }\n  }\n\n  _createOrUpdateSession(userId, lastStartedAt) {\n    const data = _objectSpread(_objectSpread({}, formatDate(lastStartedAt)), {}, {\n      agentId: userId,\n      lastStartedAt\n    });\n\n    LivechatAgentActivity.createOrUpdate(data);\n  }\n\n  _updateSessionWhenAgentStop(userId) {\n    const data = _objectSpread(_objectSpread({}, formatDate()), {}, {\n      agentId: userId\n    });\n\n    const livechatSession = LivechatAgentActivity.findOne(data);\n\n    if (livechatSession) {\n      const stoppedAt = new Date();\n      const availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n      LivechatAgentActivity.updateLastStoppedAt(_objectSpread(_objectSpread({}, data), {}, {\n        availableTime,\n        lastStoppedAt: stoppedAt\n      }));\n      LivechatAgentActivity.updateServiceHistory(_objectSpread(_objectSpread({}, data), {}, {\n        serviceHistory: {\n          startedAt: livechatSession.lastStartedAt,\n          stoppedAt\n        }\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["app/livechat/server/statistics/LivechatAgentActivityMonitor.js"],"names":["_objectSpread","module","link","default","v","export","LivechatAgentActivityMonitor","moment","Meteor","SyncedCron","callbacks","LivechatAgentActivity","Users","Sessions","formatDate","dateTime","Date","date","parseInt","format","constructor","_started","_handleAgentStatusChanged","bind","_handleUserStatusLivechatChanged","_name","start","_setupListeners","stop","isRunning","remove","_startMonitoring","onConnection","connection","_handleMeteorConnection","add","name","schedule","parser","cron","job","_updateActiveSessions","openLivechatAgentSessions","findOpenSessions","fetch","length","today","startedAt","year","month","session","startDate","lastStartedAt","stoppedAt","data","toDate","agentId","availableTime","diff","updateLastStoppedAt","lastStoppedAt","updateServiceHistory","serviceHistory","_createOrUpdateSession","findOne","sessionId","id","user","findOneById","userId","status","statusLivechat","_id","onClose","_updateSessionWhenAgentStop","createOrUpdate","livechatSession"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { Meteor } from 'meteor/meteor';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { LivechatAgentActivity, Users } from '../../../models/server';\nimport { Sessions } from '../../../models/server/raw';\n\nconst formatDate = (dateTime = new Date()) => ({\n\tdate: parseInt(moment(dateTime).format('YYYYMMDD')),\n});\n\nexport class LivechatAgentActivityMonitor {\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n\t\tthis._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n\t\tthis._name = 'Livechat Agent Activity Monitor';\n\t}\n\n\tstart() {\n\t\tthis._setupListeners();\n\t}\n\n\tstop() {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tSyncedCron.remove(this._name);\n\n\t\tthis._started = false;\n\t}\n\n\tisRunning() {\n\t\treturn this._started;\n\t}\n\n\t_setupListeners() {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._startMonitoring();\n\t\tMeteor.onConnection((connection) => this._handleMeteorConnection(connection));\n\t\tcallbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n\t\tcallbacks.add('livechat.setUserStatusLivechat', this._handleUserStatusLivechatChanged);\n\t\tthis._started = true;\n\t}\n\n\t_startMonitoring() {\n\t\tSyncedCron.add({\n\t\t\tname: this._name,\n\t\t\tschedule: (parser) => parser.cron('0 0 * * *'),\n\t\t\tjob: () => {\n\t\t\t\tthis._updateActiveSessions();\n\t\t\t},\n\t\t});\n\t}\n\n\t_updateActiveSessions() {\n\t\tconst openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions().fetch();\n\t\tif (!openLivechatAgentSessions.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst today = moment(new Date());\n\t\tconst startedAt = new Date(today.year(), today.month(), today.date());\n\t\tfor (const session of openLivechatAgentSessions) {\n\t\t\tconst startDate = moment(session.lastStartedAt);\n\t\t\tconst stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n\t\t\tconst data = { ...formatDate(startDate.toDate()), agentId: session.agentId };\n\t\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n\t\t\tLivechatAgentActivity.updateLastStoppedAt({\n\t\t\t\t...data,\n\t\t\t\tavailableTime,\n\t\t\t\tlastStoppedAt: stoppedAt,\n\t\t\t});\n\t\t\tLivechatAgentActivity.updateServiceHistory({\n\t\t\t\t...data,\n\t\t\t\tserviceHistory: { startedAt: session.lastStartedAt, stoppedAt },\n\t\t\t});\n\t\t\tthis._createOrUpdateSession(session.agentId, startedAt);\n\t\t}\n\t}\n\n\tasync _handleMeteorConnection(connection) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = await Sessions.findOne({ sessionId: connection.id });\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = Users.findOneById(session.userId);\n\t\tif (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n\t\t\tthis._createOrUpdateSession(user._id);\n\t\t}\n\t\tconnection.onClose(() => {\n\t\t\tif (session) {\n\t\t\t\tthis._updateSessionWhenAgentStop(session.userId);\n\t\t\t}\n\t\t});\n\t}\n\n\t_handleAgentStatusChanged({ userId, status }) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = Users.findOneById(userId);\n\t\tif (!user || user.statusLivechat !== 'available') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status !== 'offline') {\n\t\t\tthis._createOrUpdateSession(userId);\n\t\t} else {\n\t\t\tthis._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\t_handleUserStatusLivechatChanged({ userId, status }) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = Users.findOneById(userId);\n\t\tif (user && user.status === 'offline') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status === 'available') {\n\t\t\tthis._createOrUpdateSession(userId);\n\t\t}\n\t\tif (status === 'not-available') {\n\t\t\tthis._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\t_createOrUpdateSession(userId, lastStartedAt) {\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tLivechatAgentActivity.createOrUpdate(data);\n\t}\n\n\t_updateSessionWhenAgentStop(userId) {\n\t\tconst data = { ...formatDate(), agentId: userId };\n\t\tconst livechatSession = LivechatAgentActivity.findOne(data);\n\t\tif (livechatSession) {\n\t\t\tconst stoppedAt = new Date();\n\t\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\t\t\tLivechatAgentActivity.updateLastStoppedAt({\n\t\t\t\t...data,\n\t\t\t\tavailableTime,\n\t\t\t\tlastStoppedAt: stoppedAt,\n\t\t\t});\n\t\t\tLivechatAgentActivity.updateServiceHistory({\n\t\t\t\t...data,\n\t\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },\n\t\t\t});\n\t\t}\n\t}\n}\n"]},"sourceType":"module","hash":"17cce3c02af9f8a306ec794a3f8c8244bf885707"}
