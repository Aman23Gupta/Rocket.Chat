{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/user-data-download/server/cronProcessDownloads.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/user-data-download/server/cronProcessDownloads.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/user-data-download/server/cronProcessDownloads.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/user-data-download/server/cronProcessDownloads.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/user-data-download/server/cronProcessDownloads.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 1);\nmodule.export({\n  getRoomData: () => getRoomData,\n  loadUserSubscriptions: () => loadUserSubscriptions,\n  copyFile: () => copyFile,\n  exportRoomMessages: () => exportRoomMessages,\n  isExportComplete: () => isExportComplete,\n  sendEmail: () => sendEmail,\n  makeZipFile: () => makeZipFile,\n  uploadZipFile: () => uploadZipFile,\n  exportRoomMessagesToFile: () => exportRoomMessagesToFile\n});\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 0);\nlet util;\nmodule.link(\"util\", {\n  default(v) {\n    util = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 4);\nlet SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 5);\nlet archiver;\nmodule.link(\"archiver\", {\n  default(v) {\n    archiver = v;\n  }\n\n}, 6);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 7);\nlet uuidv4;\nmodule.link(\"uuid\", {\n  v4(v) {\n    uuidv4 = v;\n  }\n\n}, 8);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 9);\nlet Subscriptions, Rooms, Users, Messages;\nmodule.link(\"../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 10);\nlet Avatars, ExportOperations, UserDataFiles, Uploads;\nmodule.link(\"../../models/server/raw\", {\n  Avatars(v) {\n    Avatars = v;\n  },\n\n  ExportOperations(v) {\n    ExportOperations = v;\n  },\n\n  UserDataFiles(v) {\n    UserDataFiles = v;\n  },\n\n  Uploads(v) {\n    Uploads = v;\n  }\n\n}, 11);\nlet FileUpload;\nmodule.link(\"../../file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 12);\nlet DataExport;\nmodule.link(\"./DataExport\", {\n  DataExport(v) {\n    DataExport = v;\n  }\n\n}, 13);\nlet Mailer;\nmodule.link(\"../../mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 14);\nlet readSecondaryPreferred;\nmodule.link(\"../../../server/database/readSecondaryPreferred\", {\n  readSecondaryPreferred(v) {\n    readSecondaryPreferred = v;\n  }\n\n}, 15);\nlet joinPath;\nmodule.link(\"../../../server/lib/fileUtils\", {\n  joinPath(v) {\n    joinPath = v;\n  }\n\n}, 16);\nlet getURL;\nmodule.link(\"../../utils/lib/getURL\", {\n  getURL(v) {\n    getURL = v;\n  }\n\n}, 17);\nconst fsStat = util.promisify(fs.stat);\nconst fsOpen = util.promisify(fs.open);\nconst fsExists = util.promisify(fs.exists);\nconst fsUnlink = util.promisify(fs.unlink);\nlet zipFolder = '/tmp/zipFiles';\n\nif (settings.get('UserData_FileSystemZipPath') != null) {\n  if (settings.get('UserData_FileSystemZipPath').trim() !== '') {\n    zipFolder = settings.get('UserData_FileSystemZipPath');\n  }\n}\n\nlet processingFrequency = 2;\n\nif (settings.get('UserData_ProcessingFrequency') > 0) {\n  processingFrequency = settings.get('UserData_ProcessingFrequency');\n}\n\nconst startFile = function (fileName, content) {\n  fs.writeFileSync(fileName, content);\n};\n\nconst writeToFile = function (fileName, content) {\n  fs.appendFileSync(fileName, content);\n};\n\nconst createDir = function (folderName) {\n  if (!fs.existsSync(folderName)) {\n    fs.mkdirSync(folderName, {\n      recursive: true\n    });\n  }\n};\n\nconst getRoomData = (roomId, ownUserId) => {\n  const roomData = Rooms.findOneById(roomId);\n\n  if (!roomData) {\n    return {};\n  }\n\n  const roomName = roomData.name && roomData.t !== 'd' ? roomData.name : roomId;\n  const [userId] = roomData.t === 'd' ? roomData.uids.filter(uid => uid !== ownUserId) : [null];\n  return {\n    roomId,\n    roomName,\n    userId,\n    exportedCount: 0,\n    status: 'pending',\n    type: roomData.t,\n    targetFile: ''\n  };\n};\n\nconst loadUserSubscriptions = function (exportOperation, fileType, userId) {\n  const roomList = [];\n  const cursor = Subscriptions.findByUserId(userId);\n  cursor.forEach(subscription => {\n    const roomData = getRoomData(subscription.rid, userId);\n    const targetFile = \"\".concat(fileType === 'json' && roomData.roomName || subscription.rid, \".\").concat(fileType);\n    roomList.push(_objectSpread(_objectSpread({}, roomData), {}, {\n      targetFile\n    }));\n  });\n  return roomList;\n};\n\nconst getAttachmentData = function (attachment, message) {\n  var _message$file;\n\n  const attachmentData = {\n    type: attachment.type,\n    title: attachment.title,\n    title_link: attachment.title_link,\n    image_url: attachment.image_url,\n    audio_url: attachment.audio_url,\n    video_url: attachment.video_url,\n    message_link: attachment.message_link,\n    image_type: attachment.image_type,\n    image_size: attachment.image_size,\n    video_size: attachment.video_size,\n    video_type: attachment.video_type,\n    audio_size: attachment.audio_size,\n    audio_type: attachment.audio_type,\n    url: null,\n    remote: false,\n    fileId: null,\n    fileName: null\n  };\n  const url = attachment.title_link || attachment.image_url || attachment.audio_url || attachment.video_url || attachment.message_link;\n\n  if (url) {\n    attachmentData.url = url;\n  }\n\n  if ((_message$file = message.file) !== null && _message$file !== void 0 && _message$file._id) {\n    attachmentData.fileId = message.file._id;\n    attachmentData.fileName = message.file.name;\n  } else {\n    attachmentData.remote = true;\n  }\n\n  return attachmentData;\n};\n\nconst hideUserName = function (username, userData, usersMap) {\n  if (!usersMap.userNameTable) {\n    usersMap.userNameTable = {};\n  }\n\n  if (!usersMap.userNameTable[username]) {\n    if (userData && username === userData.username) {\n      usersMap.userNameTable[username] = username;\n    } else {\n      usersMap.userNameTable[username] = \"User_\".concat(Object.keys(usersMap.userNameTable).length + 1);\n    }\n  }\n\n  return usersMap.userNameTable[username];\n};\n\nconst getMessageData = function (msg, hideUsers, userData, usersMap) {\n  const username = hideUsers ? hideUserName(msg.u.username || msg.u.name, userData, usersMap) : msg.u.username;\n\n  const messageObject = _objectSpread({\n    msg: msg.msg,\n    username,\n    ts: msg.ts\n  }, msg.attachments && {\n    attachments: msg.attachments.map(attachment => getAttachmentData(attachment, msg))\n  });\n\n  if (msg.t) {\n    messageObject.type = msg.t;\n\n    switch (msg.t) {\n      case 'uj':\n        messageObject.msg = TAPi18n.__('User_joined_channel');\n        break;\n\n      case 'ul':\n        messageObject.msg = TAPi18n.__('User_left');\n        break;\n\n      case 'ult':\n        messageObject.msg = TAPi18n.__('User_left_team');\n        break;\n\n      case 'au':\n        messageObject.msg = TAPi18n.__('User_added_by', {\n          user_added: hideUserName(msg.msg, userData, usersMap),\n          user_by: username\n        });\n        break;\n\n      case 'r':\n        messageObject.msg = TAPi18n.__('Room_name_changed', {\n          room_name: msg.msg,\n          user_by: username\n        });\n        break;\n\n      case 'ru':\n        messageObject.msg = TAPi18n.__('User_removed_by', {\n          user_removed: hideUserName(msg.msg, userData, usersMap),\n          user_by: username\n        });\n        break;\n\n      case 'wm':\n        messageObject.msg = TAPi18n.__('Welcome', {\n          user: username\n        });\n        break;\n\n      case 'livechat-close':\n        messageObject.msg = TAPi18n.__('Conversation_finished');\n        break;\n\n      case 'livechat-started':\n        messageObject.msg = TAPi18n.__('Chat_started');\n        break;\n    }\n  }\n\n  return messageObject;\n};\n\nconst copyFile = function (attachmentData, assetsPath) {\n  return Promise.asyncApply(() => {\n    const file = Promise.await(Uploads.findOneById(attachmentData._id));\n\n    if (!file) {\n      return;\n    }\n\n    FileUpload.copy(file, joinPath(assetsPath, \"\".concat(attachmentData._id, \"-\").concat(attachmentData.name)));\n  });\n};\n\nconst exportMessageObject = (type, messageObject, messageFile) => {\n  if (type === 'json') {\n    return JSON.stringify(messageObject);\n  }\n\n  const file = [];\n  const messageType = messageObject.type;\n  const timestamp = messageObject.ts ? new Date(messageObject.ts).toUTCString() : '';\n  const italicTypes = ['uj', 'ul', 'au', 'r', 'ru', 'wm', 'livechat-close'];\n  const message = italicTypes.includes(messageType) ? \"<i>\".concat(messageObject.msg, \"</i>\") : messageObject.msg;\n  file.push(\"<p><strong>\".concat(messageObject.username, \"</strong> (\").concat(timestamp, \"):<br/>\"));\n  file.push(message);\n\n  if (messageFile !== null && messageFile !== void 0 && messageFile._id) {\n    const attachment = messageObject.attachments.find(att => att.type === 'file' && att.title_link.includes(messageFile._id));\n\n    const description = (attachment === null || attachment === void 0 ? void 0 : attachment.description) || (attachment === null || attachment === void 0 ? void 0 : attachment.title) || TAPi18n.__('Message_Attachments');\n\n    const assetUrl = \"./assets/\".concat(messageFile._id, \"-\").concat(messageFile.name);\n    const link = \"<br/><a href=\\\"\".concat(assetUrl, \"\\\">\").concat(description, \"</a>\");\n    file.push(link);\n  }\n\n  file.push('</p>');\n  return file.join('\\n');\n};\n\nfunction exportRoomMessages(rid, exportType, skip, limit, assetsPath, exportOpRoomData, userData) {\n  return Promise.asyncApply(() => {\n    let filter = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n    let usersMap = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n    let hideUsers = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n\n    const query = _objectSpread(_objectSpread({}, filter), {}, {\n      rid\n    });\n\n    const cursor = Messages.model.rawCollection().find(query, {\n      sort: {\n        ts: 1\n      },\n      skip,\n      limit,\n      readPreference: readSecondaryPreferred(Messages.model.rawDatabase())\n    });\n    const total = Promise.await(cursor.count());\n    const results = Promise.await(cursor.toArray());\n    const result = {\n      total,\n      exported: results.length,\n      messages: [],\n      uploads: []\n    };\n    results.forEach(Meteor.bindEnvironment(msg => {\n      const messageObject = getMessageData(msg, hideUsers, userData, usersMap);\n\n      if (msg.file) {\n        result.uploads.push(msg.file);\n      }\n\n      result.messages.push(exportMessageObject(exportType, messageObject, msg.file));\n    }));\n    return result;\n  });\n}\n\nconst isExportComplete = function (exportOperation) {\n  const incomplete = exportOperation.roomList.some(exportOpRoomData => exportOpRoomData.status !== 'completed');\n  return !incomplete;\n};\n\nconst sendEmail = function (userData, subject, body) {\n  const emailAddress = \"\".concat(userData.name, \" <\").concat(userData.emails[0].address, \">\");\n  const fromAddress = settings.get('From_Email');\n\n  if (!Mailer.checkAddressFormat(emailAddress)) {\n    return;\n  }\n\n  return Mailer.send({\n    to: emailAddress,\n    from: fromAddress,\n    subject,\n    html: body\n  });\n};\n\nconst makeZipFile = function (folderToZip, targetFile) {\n  return new Promise((resolve, reject) => {\n    const output = fs.createWriteStream(targetFile);\n    const archive = archiver('zip');\n    output.on('close', () => resolve());\n    archive.on('error', err => reject(err));\n    archive.pipe(output);\n    archive.directory(folderToZip, false);\n    archive.finalize();\n  });\n};\n\nconst uploadZipFile = function (filePath, userId, exportType) {\n  return Promise.asyncApply(() => {\n    const stat = Promise.await(fsStat(filePath));\n    const contentType = 'application/zip';\n    const {\n      size\n    } = stat;\n    const user = Users.findOneById(userId);\n    let userDisplayName = userId;\n\n    if (user) {\n      userDisplayName = user.name || user.username || userId;\n    }\n\n    const utcDate = new Date().toISOString().split('T')[0];\n    const fileSuffix = exportType === 'json' ? '-data' : '';\n    const newFileName = encodeURIComponent(\"\".concat(utcDate, \"-\").concat(userDisplayName).concat(fileSuffix, \".zip\"));\n    const details = {\n      userId,\n      type: contentType,\n      size,\n      name: newFileName\n    };\n    const fd = Promise.await(fsOpen(filePath));\n    const stream = fs.createReadStream('', {\n      fd\n    });\n    const userDataStore = FileUpload.getStore('UserDataFiles');\n    const file = userDataStore.insertSync(details, stream);\n    fs.close(fd);\n    return file;\n  });\n};\n\nconst generateChannelsFile = function (type, exportPath, exportOperation) {\n  if (type !== 'json') {\n    return;\n  }\n\n  const fileName = joinPath(exportPath, 'channels.json');\n  startFile(fileName, exportOperation.roomList.map(roomData => JSON.stringify({\n    roomId: roomData.roomId,\n    roomName: roomData.roomName,\n    type: roomData.type\n  })).join('\\n'));\n};\n\nconst exportRoomMessagesToFile = function (exportPath, assetsPath, exportType, roomList, userData) {\n  return Promise.asyncApply(() => {\n    let messagesFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    let usersMap = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    let hideUsers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n    createDir(exportPath);\n    createDir(assetsPath);\n    const result = {\n      fileList: []\n    };\n    const limit = settings.get('UserData_MessageLimitPerRequest') > 0 ? settings.get('UserData_MessageLimitPerRequest') : 1000;\n\n    for (const exportOpRoomData of roomList) {\n      const filePath = joinPath(exportPath, exportOpRoomData.targetFile);\n\n      if (exportOpRoomData.status === 'pending') {\n        exportOpRoomData.status = 'exporting';\n        startFile(filePath, exportType === 'html' ? '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">' : '');\n      }\n\n      const skip = exportOpRoomData.exportedCount;\n      const {\n        total,\n        exported,\n        uploads,\n        messages // eslint-disable-next-line no-await-in-loop\n\n      } = Promise.await(exportRoomMessages(exportOpRoomData.roomId, exportType, skip, limit, assetsPath, exportOpRoomData, userData, messagesFilter, usersMap, hideUsers));\n      result.fileList.push(...uploads);\n      exportOpRoomData.exportedCount += exported;\n\n      if (total <= exportOpRoomData.exportedCount) {\n        exportOpRoomData.status = 'completed';\n      }\n\n      writeToFile(filePath, \"\".concat(messages.join('\\n'), \"\\n\"));\n    }\n\n    return result;\n  });\n};\n\nconst generateUserFile = function (exportOperation, userData) {\n  if (!userData) {\n    return;\n  }\n\n  const {\n    username,\n    name,\n    statusText,\n    emails,\n    roles,\n    services\n  } = userData;\n  const dataToSave = {\n    username,\n    name,\n    statusText,\n    emails: _.pluck(emails, 'address'),\n    roles,\n    services: Object.keys(services)\n  };\n  const fileName = joinPath(exportOperation.exportPath, exportOperation.fullExport ? 'user.json' : 'user.html');\n  startFile(fileName, '');\n\n  if (exportOperation.fullExport) {\n    writeToFile(fileName, JSON.stringify(dataToSave));\n    exportOperation.generatedUserFile = true;\n    return;\n  }\n\n  writeToFile(fileName, '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">');\n\n  for (const key in dataToSave) {\n    if (!dataToSave.hasOwnProperty(key)) {\n      continue;\n    }\n\n    const value = dataToSave[key];\n    writeToFile(fileName, \"<p><strong>\".concat(key, \"</strong>:\"));\n\n    if (typeof value === 'string') {\n      writeToFile(fileName, value);\n    } else if (Array.isArray(value)) {\n      writeToFile(fileName, '<br/>');\n\n      for (const item of value) {\n        writeToFile(fileName, \"\".concat(item, \"<br/>\"));\n      }\n    }\n\n    writeToFile(fileName, '</p>');\n  }\n};\n\nconst generateUserAvatarFile = function (exportOperation, userData) {\n  return Promise.asyncApply(() => {\n    if (!userData) {\n      return;\n    }\n\n    const file = Promise.await(Avatars.findOneByName(userData.username));\n\n    if (!file) {\n      return;\n    }\n\n    const filePath = joinPath(exportOperation.exportPath, 'avatar');\n\n    if (FileUpload.copy(file, filePath)) {\n      exportOperation.generatedAvatar = true;\n    }\n  });\n};\n\nconst continueExportOperation = function (exportOperation) {\n  return Promise.asyncApply(() => {\n    if (exportOperation.status === 'completed') {\n      return;\n    }\n\n    const exportType = exportOperation.fullExport ? 'json' : 'html';\n\n    if (!exportOperation.roomList) {\n      exportOperation.roomList = loadUserSubscriptions(exportOperation, exportType, exportOperation.userId);\n\n      if (exportOperation.fullExport) {\n        exportOperation.status = 'exporting-rooms';\n      } else {\n        exportOperation.status = 'exporting';\n      }\n    }\n\n    try {\n      if (!exportOperation.generatedUserFile) {\n        generateUserFile(exportOperation, exportOperation.userData);\n      }\n\n      if (!exportOperation.generatedAvatar) {\n        Promise.await(generateUserAvatarFile(exportOperation, exportOperation.userData));\n      }\n\n      if (exportOperation.status === 'exporting-rooms') {\n        generateChannelsFile(exportType, exportOperation.exportPath, exportOperation);\n        exportOperation.status = 'exporting';\n      } // Run every room on every request, to avoid missing new messages on the rooms that finished first.\n\n\n      if (exportOperation.status === 'exporting') {\n        const {\n          fileList\n        } = Promise.await(exportRoomMessagesToFile(exportOperation.exportPath, exportOperation.assetsPath, exportType, exportOperation.roomList, exportOperation.userData, {}, exportOperation.userNameTable));\n\n        if (!exportOperation.fileList) {\n          exportOperation.fileList = [];\n        }\n\n        exportOperation.fileList.push(...fileList);\n\n        if (isExportComplete(exportOperation)) {\n          exportOperation.status = 'downloading';\n        }\n      }\n\n      const generatedFileName = uuidv4();\n\n      if (exportOperation.status === 'downloading') {\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n\n        var _iteratorError;\n\n        try {\n          for (var _iterator = _asyncIterator(exportOperation.fileList), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n            const attachmentData = _step.value;\n            Promise.await(copyFile(attachmentData, exportOperation.assetsPath));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              Promise.await(_iterator.return());\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        const targetFile = joinPath(zipFolder, \"\".concat(generatedFileName, \".zip\"));\n\n        if (Promise.await(fsExists(targetFile))) {\n          Promise.await(fsUnlink(targetFile));\n        }\n\n        exportOperation.status = 'compressing';\n      }\n\n      if (exportOperation.status === 'compressing') {\n        createDir(zipFolder);\n        exportOperation.generatedFile = joinPath(zipFolder, \"\".concat(generatedFileName, \".zip\"));\n\n        if (!Promise.await(fsExists(exportOperation.generatedFile))) {\n          Promise.await(makeZipFile(exportOperation.exportPath, exportOperation.generatedFile));\n        }\n\n        exportOperation.status = 'uploading';\n      }\n\n      if (exportOperation.status === 'uploading') {\n        const {\n          _id: fileId\n        } = Promise.await(uploadZipFile(exportOperation.generatedFile, exportOperation.userId, exportType));\n        exportOperation.fileId = fileId;\n        exportOperation.status = 'completed';\n        Promise.await(ExportOperations.updateOperation(exportOperation));\n      }\n\n      Promise.await(ExportOperations.updateOperation(exportOperation));\n    } catch (e) {\n      console.error(e);\n    }\n  });\n};\n\nfunction processDataDownloads() {\n  return Promise.asyncApply(() => {\n    const operation = Promise.await(ExportOperations.findOnePending());\n\n    if (!operation) {\n      return;\n    }\n\n    if (operation.status === 'completed') {\n      return;\n    }\n\n    if (operation.status !== 'pending') {\n      // If the operation has started but was not updated in over a day, then skip it\n      if (operation._updatedAt && moment().diff(moment(operation._updatedAt), 'days') > 1) {\n        operation.status = 'skipped';\n        Promise.await(ExportOperations.updateOperation(operation));\n        return processDataDownloads();\n      }\n    }\n\n    Promise.await(continueExportOperation(operation));\n    Promise.await(ExportOperations.updateOperation(operation));\n\n    if (operation.status === 'completed') {\n      const file = operation.fileId ? Promise.await(UserDataFiles.findOneById(operation.fileId)) : Promise.await(UserDataFiles.findLastFileByUser(operation.userId));\n\n      if (!file) {\n        return;\n      }\n\n      const subject = TAPi18n.__('UserDataDownload_EmailSubject');\n\n      const body = TAPi18n.__('UserDataDownload_EmailBody', {\n        download_link: getURL(DataExport.getPath(file._id), {\n          cdn: false,\n          full: true\n        })\n      });\n\n      sendEmail(operation.userData, subject, body);\n    }\n  });\n}\n\nconst name = 'Generate download files for user data';\nMeteor.startup(function () {\n  let TroubleshootDisableDataExporterProcessor;\n  settings.watch('Troubleshoot_Disable_Data_Exporter_Processor', value => {\n    if (TroubleshootDisableDataExporterProcessor === value) {\n      return;\n    }\n\n    TroubleshootDisableDataExporterProcessor = value;\n\n    if (value) {\n      return SyncedCron.remove(name);\n    }\n\n    SyncedCron.add({\n      name,\n      schedule: parser => parser.cron(\"*/\".concat(processingFrequency, \" * * * *\")),\n      job: processDataDownloads\n    });\n  });\n});","map":{"version":3,"sources":["app/user-data-download/server/cronProcessDownloads.js"],"names":["_objectSpread","module","link","default","v","_asyncIterator","export","getRoomData","loadUserSubscriptions","copyFile","exportRoomMessages","isExportComplete","sendEmail","makeZipFile","uploadZipFile","exportRoomMessagesToFile","fs","util","_","Meteor","TAPi18n","SyncedCron","archiver","moment","uuidv4","v4","settings","Subscriptions","Rooms","Users","Messages","Avatars","ExportOperations","UserDataFiles","Uploads","FileUpload","DataExport","Mailer","readSecondaryPreferred","joinPath","getURL","fsStat","promisify","stat","fsOpen","open","fsExists","exists","fsUnlink","unlink","zipFolder","get","trim","processingFrequency","startFile","fileName","content","writeFileSync","writeToFile","appendFileSync","createDir","folderName","existsSync","mkdirSync","recursive","roomId","ownUserId","roomData","findOneById","roomName","name","t","userId","uids","filter","uid","exportedCount","status","type","targetFile","exportOperation","fileType","roomList","cursor","findByUserId","forEach","subscription","rid","push","getAttachmentData","attachment","message","attachmentData","title","title_link","image_url","audio_url","video_url","message_link","image_type","image_size","video_size","video_type","audio_size","audio_type","url","remote","fileId","file","_id","hideUserName","username","userData","usersMap","userNameTable","Object","keys","length","getMessageData","msg","hideUsers","u","messageObject","ts","attachments","map","__","user_added","user_by","room_name","user_removed","user","assetsPath","copy","exportMessageObject","messageFile","JSON","stringify","messageType","timestamp","Date","toUTCString","italicTypes","includes","find","att","description","assetUrl","join","exportType","skip","limit","exportOpRoomData","query","model","rawCollection","sort","readPreference","rawDatabase","total","count","results","toArray","result","exported","messages","uploads","bindEnvironment","incomplete","some","subject","body","emailAddress","emails","address","fromAddress","checkAddressFormat","send","to","from","html","folderToZip","Promise","resolve","reject","output","createWriteStream","archive","on","err","pipe","directory","finalize","filePath","contentType","size","userDisplayName","utcDate","toISOString","split","fileSuffix","newFileName","encodeURIComponent","details","fd","stream","createReadStream","userDataStore","getStore","insertSync","close","generateChannelsFile","exportPath","messagesFilter","fileList","generateUserFile","statusText","roles","services","dataToSave","pluck","fullExport","generatedUserFile","key","hasOwnProperty","value","Array","isArray","item","generateUserAvatarFile","findOneByName","generatedAvatar","continueExportOperation","generatedFileName","generatedFile","updateOperation","e","console","error","processDataDownloads","operation","findOnePending","_updatedAt","diff","findLastFileByUser","download_link","getPath","cdn","full","startup","TroubleshootDisableDataExporterProcessor","watch","remove","add","schedule","parser","cron","job"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport util from 'util';\n\nimport _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { SyncedCron } from 'meteor/littledata:synced-cron';\nimport archiver from 'archiver';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { settings } from '../../settings/server';\nimport { Subscriptions, Rooms, Users, Messages } from '../../models/server';\nimport { Avatars, ExportOperations, UserDataFiles, Uploads } from '../../models/server/raw';\nimport { FileUpload } from '../../file-upload/server';\nimport { DataExport } from './DataExport';\nimport * as Mailer from '../../mailer';\nimport { readSecondaryPreferred } from '../../../server/database/readSecondaryPreferred';\nimport { joinPath } from '../../../server/lib/fileUtils';\nimport { getURL } from '../../utils/lib/getURL';\n\nconst fsStat = util.promisify(fs.stat);\nconst fsOpen = util.promisify(fs.open);\nconst fsExists = util.promisify(fs.exists);\nconst fsUnlink = util.promisify(fs.unlink);\n\nlet zipFolder = '/tmp/zipFiles';\nif (settings.get('UserData_FileSystemZipPath') != null) {\n\tif (settings.get('UserData_FileSystemZipPath').trim() !== '') {\n\t\tzipFolder = settings.get('UserData_FileSystemZipPath');\n\t}\n}\n\nlet processingFrequency = 2;\nif (settings.get('UserData_ProcessingFrequency') > 0) {\n\tprocessingFrequency = settings.get('UserData_ProcessingFrequency');\n}\n\nconst startFile = function (fileName, content) {\n\tfs.writeFileSync(fileName, content);\n};\n\nconst writeToFile = function (fileName, content) {\n\tfs.appendFileSync(fileName, content);\n};\n\nconst createDir = function (folderName) {\n\tif (!fs.existsSync(folderName)) {\n\t\tfs.mkdirSync(folderName, { recursive: true });\n\t}\n};\n\nexport const getRoomData = (roomId, ownUserId) => {\n\tconst roomData = Rooms.findOneById(roomId);\n\n\tif (!roomData) {\n\t\treturn {};\n\t}\n\n\tconst roomName = roomData.name && roomData.t !== 'd' ? roomData.name : roomId;\n\tconst [userId] = roomData.t === 'd' ? roomData.uids.filter((uid) => uid !== ownUserId) : [null];\n\n\treturn {\n\t\troomId,\n\t\troomName,\n\t\tuserId,\n\t\texportedCount: 0,\n\t\tstatus: 'pending',\n\t\ttype: roomData.t,\n\t\ttargetFile: '',\n\t};\n};\n\nexport const loadUserSubscriptions = function (exportOperation, fileType, userId) {\n\tconst roomList = [];\n\n\tconst cursor = Subscriptions.findByUserId(userId);\n\tcursor.forEach((subscription) => {\n\t\tconst roomData = getRoomData(subscription.rid, userId);\n\t\tconst targetFile = `${(fileType === 'json' && roomData.roomName) || subscription.rid}.${fileType}`;\n\n\t\troomList.push({\n\t\t\t...roomData,\n\t\t\ttargetFile,\n\t\t});\n\t});\n\n\treturn roomList;\n};\n\nconst getAttachmentData = function (attachment, message) {\n\tconst attachmentData = {\n\t\ttype: attachment.type,\n\t\ttitle: attachment.title,\n\t\ttitle_link: attachment.title_link,\n\t\timage_url: attachment.image_url,\n\t\taudio_url: attachment.audio_url,\n\t\tvideo_url: attachment.video_url,\n\t\tmessage_link: attachment.message_link,\n\t\timage_type: attachment.image_type,\n\t\timage_size: attachment.image_size,\n\t\tvideo_size: attachment.video_size,\n\t\tvideo_type: attachment.video_type,\n\t\taudio_size: attachment.audio_size,\n\t\taudio_type: attachment.audio_type,\n\t\turl: null,\n\t\tremote: false,\n\t\tfileId: null,\n\t\tfileName: null,\n\t};\n\n\tconst url = attachment.title_link || attachment.image_url || attachment.audio_url || attachment.video_url || attachment.message_link;\n\tif (url) {\n\t\tattachmentData.url = url;\n\t}\n\n\tif (message.file?._id) {\n\t\tattachmentData.fileId = message.file._id;\n\t\tattachmentData.fileName = message.file.name;\n\t} else {\n\t\tattachmentData.remote = true;\n\t}\n\n\treturn attachmentData;\n};\n\nconst hideUserName = function (username, userData, usersMap) {\n\tif (!usersMap.userNameTable) {\n\t\tusersMap.userNameTable = {};\n\t}\n\n\tif (!usersMap.userNameTable[username]) {\n\t\tif (userData && username === userData.username) {\n\t\t\tusersMap.userNameTable[username] = username;\n\t\t} else {\n\t\t\tusersMap.userNameTable[username] = `User_${Object.keys(usersMap.userNameTable).length + 1}`;\n\t\t}\n\t}\n\n\treturn usersMap.userNameTable[username];\n};\n\nconst getMessageData = function (msg, hideUsers, userData, usersMap) {\n\tconst username = hideUsers ? hideUserName(msg.u.username || msg.u.name, userData, usersMap) : msg.u.username;\n\n\tconst messageObject = {\n\t\tmsg: msg.msg,\n\t\tusername,\n\t\tts: msg.ts,\n\t\t...(msg.attachments && {\n\t\t\tattachments: msg.attachments.map((attachment) => getAttachmentData(attachment, msg)),\n\t\t}),\n\t};\n\n\tif (msg.t) {\n\t\tmessageObject.type = msg.t;\n\n\t\tswitch (msg.t) {\n\t\t\tcase 'uj':\n\t\t\t\tmessageObject.msg = TAPi18n.__('User_joined_channel');\n\t\t\t\tbreak;\n\t\t\tcase 'ul':\n\t\t\t\tmessageObject.msg = TAPi18n.__('User_left');\n\t\t\t\tbreak;\n\t\t\tcase 'ult':\n\t\t\t\tmessageObject.msg = TAPi18n.__('User_left_team');\n\t\t\t\tbreak;\n\t\t\tcase 'au':\n\t\t\t\tmessageObject.msg = TAPi18n.__('User_added_by', {\n\t\t\t\t\tuser_added: hideUserName(msg.msg, userData, usersMap),\n\t\t\t\t\tuser_by: username,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\t\tmessageObject.msg = TAPi18n.__('Room_name_changed', {\n\t\t\t\t\troom_name: msg.msg,\n\t\t\t\t\tuser_by: username,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'ru':\n\t\t\t\tmessageObject.msg = TAPi18n.__('User_removed_by', {\n\t\t\t\t\tuser_removed: hideUserName(msg.msg, userData, usersMap),\n\t\t\t\t\tuser_by: username,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'wm':\n\t\t\t\tmessageObject.msg = TAPi18n.__('Welcome', { user: username });\n\t\t\t\tbreak;\n\t\t\tcase 'livechat-close':\n\t\t\t\tmessageObject.msg = TAPi18n.__('Conversation_finished');\n\t\t\t\tbreak;\n\t\t\tcase 'livechat-started':\n\t\t\t\tmessageObject.msg = TAPi18n.__('Chat_started');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn messageObject;\n};\n\nexport const copyFile = async function (attachmentData, assetsPath) {\n\tconst file = await Uploads.findOneById(attachmentData._id);\n\tif (!file) {\n\t\treturn;\n\t}\n\tFileUpload.copy(file, joinPath(assetsPath, `${attachmentData._id}-${attachmentData.name}`));\n};\n\nconst exportMessageObject = (type, messageObject, messageFile) => {\n\tif (type === 'json') {\n\t\treturn JSON.stringify(messageObject);\n\t}\n\n\tconst file = [];\n\n\tconst messageType = messageObject.type;\n\tconst timestamp = messageObject.ts ? new Date(messageObject.ts).toUTCString() : '';\n\n\tconst italicTypes = ['uj', 'ul', 'au', 'r', 'ru', 'wm', 'livechat-close'];\n\n\tconst message = italicTypes.includes(messageType) ? `<i>${messageObject.msg}</i>` : messageObject.msg;\n\n\tfile.push(`<p><strong>${messageObject.username}</strong> (${timestamp}):<br/>`);\n\tfile.push(message);\n\n\tif (messageFile?._id) {\n\t\tconst attachment = messageObject.attachments.find((att) => att.type === 'file' && att.title_link.includes(messageFile._id));\n\n\t\tconst description = attachment?.description || attachment?.title || TAPi18n.__('Message_Attachments');\n\n\t\tconst assetUrl = `./assets/${messageFile._id}-${messageFile.name}`;\n\t\tconst link = `<br/><a href=\"${assetUrl}\">${description}</a>`;\n\t\tfile.push(link);\n\t}\n\n\tfile.push('</p>');\n\n\treturn file.join('\\n');\n};\n\nexport async function exportRoomMessages(\n\trid,\n\texportType,\n\tskip,\n\tlimit,\n\tassetsPath,\n\texportOpRoomData,\n\tuserData,\n\tfilter = {},\n\tusersMap = {},\n\thideUsers = true,\n) {\n\tconst query = { ...filter, rid };\n\n\tconst cursor = Messages.model.rawCollection().find(query, {\n\t\tsort: { ts: 1 },\n\t\tskip,\n\t\tlimit,\n\t\treadPreference: readSecondaryPreferred(Messages.model.rawDatabase()),\n\t});\n\n\tconst total = await cursor.count();\n\tconst results = await cursor.toArray();\n\n\tconst result = {\n\t\ttotal,\n\t\texported: results.length,\n\t\tmessages: [],\n\t\tuploads: [],\n\t};\n\n\tresults.forEach(\n\t\tMeteor.bindEnvironment((msg) => {\n\t\t\tconst messageObject = getMessageData(msg, hideUsers, userData, usersMap);\n\n\t\t\tif (msg.file) {\n\t\t\t\tresult.uploads.push(msg.file);\n\t\t\t}\n\n\t\t\tresult.messages.push(exportMessageObject(exportType, messageObject, msg.file));\n\t\t}),\n\t);\n\n\treturn result;\n}\n\nexport const isExportComplete = function (exportOperation) {\n\tconst incomplete = exportOperation.roomList.some((exportOpRoomData) => exportOpRoomData.status !== 'completed');\n\n\treturn !incomplete;\n};\n\nexport const sendEmail = function (userData, subject, body) {\n\tconst emailAddress = `${userData.name} <${userData.emails[0].address}>`;\n\tconst fromAddress = settings.get('From_Email');\n\n\tif (!Mailer.checkAddressFormat(emailAddress)) {\n\t\treturn;\n\t}\n\n\treturn Mailer.send({\n\t\tto: emailAddress,\n\t\tfrom: fromAddress,\n\t\tsubject,\n\t\thtml: body,\n\t});\n};\n\nexport const makeZipFile = function (folderToZip, targetFile) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst output = fs.createWriteStream(targetFile);\n\n\t\tconst archive = archiver('zip');\n\n\t\toutput.on('close', () => resolve());\n\n\t\tarchive.on('error', (err) => reject(err));\n\n\t\tarchive.pipe(output);\n\t\tarchive.directory(folderToZip, false);\n\t\tarchive.finalize();\n\t});\n};\n\nexport const uploadZipFile = async function (filePath, userId, exportType) {\n\tconst stat = await fsStat(filePath);\n\n\tconst contentType = 'application/zip';\n\tconst { size } = stat;\n\n\tconst user = Users.findOneById(userId);\n\tlet userDisplayName = userId;\n\tif (user) {\n\t\tuserDisplayName = user.name || user.username || userId;\n\t}\n\n\tconst utcDate = new Date().toISOString().split('T')[0];\n\tconst fileSuffix = exportType === 'json' ? '-data' : '';\n\n\tconst newFileName = encodeURIComponent(`${utcDate}-${userDisplayName}${fileSuffix}.zip`);\n\n\tconst details = {\n\t\tuserId,\n\t\ttype: contentType,\n\t\tsize,\n\t\tname: newFileName,\n\t};\n\n\tconst fd = await fsOpen(filePath);\n\n\tconst stream = fs.createReadStream('', { fd });\n\n\tconst userDataStore = FileUpload.getStore('UserDataFiles');\n\n\tconst file = userDataStore.insertSync(details, stream);\n\n\tfs.close(fd);\n\n\treturn file;\n};\n\nconst generateChannelsFile = function (type, exportPath, exportOperation) {\n\tif (type !== 'json') {\n\t\treturn;\n\t}\n\n\tconst fileName = joinPath(exportPath, 'channels.json');\n\tstartFile(\n\t\tfileName,\n\t\texportOperation.roomList\n\t\t\t.map((roomData) =>\n\t\t\t\tJSON.stringify({\n\t\t\t\t\troomId: roomData.roomId,\n\t\t\t\t\troomName: roomData.roomName,\n\t\t\t\t\ttype: roomData.type,\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.join('\\n'),\n\t);\n};\n\nexport const exportRoomMessagesToFile = async function (\n\texportPath,\n\tassetsPath,\n\texportType,\n\troomList,\n\tuserData,\n\tmessagesFilter = {},\n\tusersMap = {},\n\thideUsers = true,\n) {\n\tcreateDir(exportPath);\n\tcreateDir(assetsPath);\n\n\tconst result = {\n\t\tfileList: [],\n\t};\n\n\tconst limit = settings.get('UserData_MessageLimitPerRequest') > 0 ? settings.get('UserData_MessageLimitPerRequest') : 1000;\n\tfor (const exportOpRoomData of roomList) {\n\t\tconst filePath = joinPath(exportPath, exportOpRoomData.targetFile);\n\t\tif (exportOpRoomData.status === 'pending') {\n\t\t\texportOpRoomData.status = 'exporting';\n\t\t\tstartFile(filePath, exportType === 'html' ? '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">' : '');\n\t\t}\n\n\t\tconst skip = exportOpRoomData.exportedCount;\n\n\t\tconst {\n\t\t\ttotal,\n\t\t\texported,\n\t\t\tuploads,\n\t\t\tmessages,\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t} = await exportRoomMessages(\n\t\t\texportOpRoomData.roomId,\n\t\t\texportType,\n\t\t\tskip,\n\t\t\tlimit,\n\t\t\tassetsPath,\n\t\t\texportOpRoomData,\n\t\t\tuserData,\n\t\t\tmessagesFilter,\n\t\t\tusersMap,\n\t\t\thideUsers,\n\t\t);\n\n\t\tresult.fileList.push(...uploads);\n\n\t\texportOpRoomData.exportedCount += exported;\n\n\t\tif (total <= exportOpRoomData.exportedCount) {\n\t\t\texportOpRoomData.status = 'completed';\n\t\t}\n\n\t\twriteToFile(filePath, `${messages.join('\\n')}\\n`);\n\t}\n\n\treturn result;\n};\n\nconst generateUserFile = function (exportOperation, userData) {\n\tif (!userData) {\n\t\treturn;\n\t}\n\n\tconst { username, name, statusText, emails, roles, services } = userData;\n\n\tconst dataToSave = {\n\t\tusername,\n\t\tname,\n\t\tstatusText,\n\t\temails: _.pluck(emails, 'address'),\n\t\troles,\n\t\tservices: Object.keys(services),\n\t};\n\n\tconst fileName = joinPath(exportOperation.exportPath, exportOperation.fullExport ? 'user.json' : 'user.html');\n\tstartFile(fileName, '');\n\n\tif (exportOperation.fullExport) {\n\t\twriteToFile(fileName, JSON.stringify(dataToSave));\n\n\t\texportOperation.generatedUserFile = true;\n\t\treturn;\n\t}\n\n\twriteToFile(fileName, '<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">');\n\tfor (const key in dataToSave) {\n\t\tif (!dataToSave.hasOwnProperty(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = dataToSave[key];\n\n\t\twriteToFile(fileName, `<p><strong>${key}</strong>:`);\n\t\tif (typeof value === 'string') {\n\t\t\twriteToFile(fileName, value);\n\t\t} else if (Array.isArray(value)) {\n\t\t\twriteToFile(fileName, '<br/>');\n\n\t\t\tfor (const item of value) {\n\t\t\t\twriteToFile(fileName, `${item}<br/>`);\n\t\t\t}\n\t\t}\n\n\t\twriteToFile(fileName, '</p>');\n\t}\n};\n\nconst generateUserAvatarFile = async function (exportOperation, userData) {\n\tif (!userData) {\n\t\treturn;\n\t}\n\n\tconst file = await Avatars.findOneByName(userData.username);\n\tif (!file) {\n\t\treturn;\n\t}\n\n\tconst filePath = joinPath(exportOperation.exportPath, 'avatar');\n\tif (FileUpload.copy(file, filePath)) {\n\t\texportOperation.generatedAvatar = true;\n\t}\n};\n\nconst continueExportOperation = async function (exportOperation) {\n\tif (exportOperation.status === 'completed') {\n\t\treturn;\n\t}\n\n\tconst exportType = exportOperation.fullExport ? 'json' : 'html';\n\n\tif (!exportOperation.roomList) {\n\t\texportOperation.roomList = loadUserSubscriptions(exportOperation, exportType, exportOperation.userId);\n\n\t\tif (exportOperation.fullExport) {\n\t\t\texportOperation.status = 'exporting-rooms';\n\t\t} else {\n\t\t\texportOperation.status = 'exporting';\n\t\t}\n\t}\n\n\ttry {\n\t\tif (!exportOperation.generatedUserFile) {\n\t\t\tgenerateUserFile(exportOperation, exportOperation.userData);\n\t\t}\n\n\t\tif (!exportOperation.generatedAvatar) {\n\t\t\tawait generateUserAvatarFile(exportOperation, exportOperation.userData);\n\t\t}\n\n\t\tif (exportOperation.status === 'exporting-rooms') {\n\t\t\tgenerateChannelsFile(exportType, exportOperation.exportPath, exportOperation);\n\n\t\t\texportOperation.status = 'exporting';\n\t\t}\n\n\t\t// Run every room on every request, to avoid missing new messages on the rooms that finished first.\n\t\tif (exportOperation.status === 'exporting') {\n\t\t\tconst { fileList } = await exportRoomMessagesToFile(\n\t\t\t\texportOperation.exportPath,\n\t\t\t\texportOperation.assetsPath,\n\t\t\t\texportType,\n\t\t\t\texportOperation.roomList,\n\t\t\t\texportOperation.userData,\n\t\t\t\t{},\n\t\t\t\texportOperation.userNameTable,\n\t\t\t);\n\t\t\tif (!exportOperation.fileList) {\n\t\t\t\texportOperation.fileList = [];\n\t\t\t}\n\t\t\texportOperation.fileList.push(...fileList);\n\n\t\t\tif (isExportComplete(exportOperation)) {\n\t\t\t\texportOperation.status = 'downloading';\n\t\t\t}\n\t\t}\n\n\t\tconst generatedFileName = uuidv4();\n\n\t\tif (exportOperation.status === 'downloading') {\n\t\t\tfor await (const attachmentData of exportOperation.fileList) {\n\t\t\t\tawait copyFile(attachmentData, exportOperation.assetsPath);\n\t\t\t}\n\n\t\t\tconst targetFile = joinPath(zipFolder, `${generatedFileName}.zip`);\n\t\t\tif (await fsExists(targetFile)) {\n\t\t\t\tawait fsUnlink(targetFile);\n\t\t\t}\n\n\t\t\texportOperation.status = 'compressing';\n\t\t}\n\n\t\tif (exportOperation.status === 'compressing') {\n\t\t\tcreateDir(zipFolder);\n\n\t\t\texportOperation.generatedFile = joinPath(zipFolder, `${generatedFileName}.zip`);\n\t\t\tif (!(await fsExists(exportOperation.generatedFile))) {\n\t\t\t\tawait makeZipFile(exportOperation.exportPath, exportOperation.generatedFile);\n\t\t\t}\n\n\t\t\texportOperation.status = 'uploading';\n\t\t}\n\n\t\tif (exportOperation.status === 'uploading') {\n\t\t\tconst { _id: fileId } = await uploadZipFile(exportOperation.generatedFile, exportOperation.userId, exportType);\n\t\t\texportOperation.fileId = fileId;\n\n\t\t\texportOperation.status = 'completed';\n\t\t\tawait ExportOperations.updateOperation(exportOperation);\n\t\t}\n\n\t\tawait ExportOperations.updateOperation(exportOperation);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n};\n\nasync function processDataDownloads() {\n\tconst operation = await ExportOperations.findOnePending();\n\tif (!operation) {\n\t\treturn;\n\t}\n\n\tif (operation.status === 'completed') {\n\t\treturn;\n\t}\n\n\tif (operation.status !== 'pending') {\n\t\t// If the operation has started but was not updated in over a day, then skip it\n\t\tif (operation._updatedAt && moment().diff(moment(operation._updatedAt), 'days') > 1) {\n\t\t\toperation.status = 'skipped';\n\t\t\tawait ExportOperations.updateOperation(operation);\n\t\t\treturn processDataDownloads();\n\t\t}\n\t}\n\n\tawait continueExportOperation(operation);\n\tawait ExportOperations.updateOperation(operation);\n\n\tif (operation.status === 'completed') {\n\t\tconst file = operation.fileId\n\t\t\t? await UserDataFiles.findOneById(operation.fileId)\n\t\t\t: await UserDataFiles.findLastFileByUser(operation.userId);\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subject = TAPi18n.__('UserDataDownload_EmailSubject');\n\t\tconst body = TAPi18n.__('UserDataDownload_EmailBody', {\n\t\t\tdownload_link: getURL(DataExport.getPath(file._id), { cdn: false, full: true }),\n\t\t});\n\n\t\tsendEmail(operation.userData, subject, body);\n\t}\n}\n\nconst name = 'Generate download files for user data';\n\nMeteor.startup(function () {\n\tlet TroubleshootDisableDataExporterProcessor;\n\tsettings.watch('Troubleshoot_Disable_Data_Exporter_Processor', (value) => {\n\t\tif (TroubleshootDisableDataExporterProcessor === value) {\n\t\t\treturn;\n\t\t}\n\t\tTroubleshootDisableDataExporterProcessor = value;\n\n\t\tif (value) {\n\t\t\treturn SyncedCron.remove(name);\n\t\t}\n\n\t\tSyncedCron.add({\n\t\t\tname,\n\t\t\tschedule: (parser) => parser.cron(`*/${processingFrequency} * * * *`),\n\t\t\tjob: processDataDownloads,\n\t\t});\n\t});\n});\n"]},"sourceType":"module","hash":"32cb9c6cbb89a86a4b09f3753284b5f3cf351851"}
