{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatDepartmentAgents.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/LivechatDepartmentAgents.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatDepartmentAgents.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatDepartmentAgents.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/LivechatDepartmentAgents.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  LivechatDepartmentAgents: () => LivechatDepartmentAgents\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 2);\nlet Users;\nmodule.link(\"./Users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 3);\n\nclass LivechatDepartmentAgents extends Base {\n  constructor() {\n    super('livechat_department_agents');\n    this.tryEnsureIndex({\n      departmentId: 1\n    });\n    this.tryEnsureIndex({\n      departmentEnabled: 1\n    });\n    this.tryEnsureIndex({\n      agentId: 1\n    });\n    this.tryEnsureIndex({\n      username: 1\n    });\n    const collectionObj = this.model.rawCollection();\n    this.findAndModify = Meteor.wrapAsync(collectionObj.findAndModify, collectionObj);\n  }\n\n  findByDepartmentId(departmentId) {\n    return this.find({\n      departmentId\n    });\n  }\n\n  findByAgentId(agentId) {\n    return this.find({\n      agentId\n    });\n  }\n\n  findOneByAgentIdAndDepartmentId(agentId, departmentId) {\n    return this.findOne({\n      agentId,\n      departmentId\n    });\n  }\n\n  saveAgent(agent) {\n    return this.upsert({\n      agentId: agent.agentId,\n      departmentId: agent.departmentId\n    }, {\n      $set: {\n        username: agent.username,\n        departmentEnabled: agent.departmentEnabled,\n        count: parseInt(agent.count),\n        order: parseInt(agent.order)\n      }\n    });\n  }\n\n  removeByAgentId(agentId) {\n    this.remove({\n      agentId\n    });\n  }\n\n  removeByDepartmentIdAndAgentId(departmentId, agentId) {\n    this.remove({\n      departmentId,\n      agentId\n    });\n  }\n\n  removeByDepartmentId(departmentId) {\n    this.remove({\n      departmentId\n    });\n  }\n\n  getNextAgentForDepartment(departmentId, ignoreAgentId, extraQuery) {\n    const agents = this.findByDepartmentId(departmentId).fetch();\n\n    if (agents.length === 0) {\n      return;\n    }\n\n    const onlineUsers = Users.findOnlineUserFromList(_.pluck(agents, 'username'));\n\n    const onlineUsernames = _.pluck(onlineUsers.fetch(), 'username'); // get fully booked agents, to ignore them from the query\n\n\n    const currentUnavailableAgents = Promise.await(Users.getUnavailableAgents(departmentId, extraQuery)).map(u => u.username);\n\n    const query = _objectSpread({\n      departmentId,\n      username: {\n        $in: onlineUsernames,\n        $nin: currentUnavailableAgents\n      }\n    }, ignoreAgentId && {\n      agentId: {\n        $ne: ignoreAgentId\n      }\n    });\n\n    const sort = {\n      count: 1,\n      order: 1,\n      username: 1\n    };\n    const update = {\n      $inc: {\n        count: 1\n      }\n    };\n    const collectionObj = this.model.rawCollection();\n    const agent = Promise.await(collectionObj.findAndModify(query, sort, update));\n\n    if (agent && agent.value) {\n      return {\n        agentId: agent.value.agentId,\n        username: agent.value.username\n      };\n    }\n\n    return null;\n  }\n\n  checkOnlineForDepartment(departmentId) {\n    const agents = this.findByDepartmentId(departmentId).fetch();\n\n    if (agents.length === 0) {\n      return false;\n    }\n\n    const onlineUser = Users.findOneOnlineAgentByUserList(_.pluck(agents, 'username'));\n    return Boolean(onlineUser);\n  }\n\n  getOnlineForDepartment(departmentId) {\n    const agents = this.findByDepartmentId(departmentId).fetch();\n\n    if (agents.length === 0) {\n      return;\n    }\n\n    const onlineUsers = Users.findOnlineUserFromList(_.pluck(agents, 'username'));\n\n    const onlineUsernames = _.pluck(onlineUsers.fetch(), 'username');\n\n    const query = {\n      departmentId,\n      username: {\n        $in: onlineUsernames\n      }\n    };\n    return this.find(query);\n  }\n\n  getBotsForDepartment(departmentId) {\n    const agents = this.findByDepartmentId(departmentId).fetch();\n\n    if (agents.length === 0) {\n      return;\n    }\n\n    const botUsers = Users.findBotAgents(_.pluck(agents, 'username'));\n\n    const botUsernames = _.pluck(botUsers.fetch(), 'username');\n\n    const query = {\n      departmentId,\n      username: {\n        $in: botUsernames\n      }\n    };\n    return this.find(query);\n  }\n\n  getNextBotForDepartment(departmentId, ignoreAgentId) {\n    const agents = this.findByDepartmentId(departmentId).fetch();\n\n    if (agents.length === 0) {\n      return;\n    }\n\n    const botUsers = Users.findBotAgents(_.pluck(agents, 'username'));\n\n    const botUsernames = _.pluck(botUsers.fetch(), 'username');\n\n    const query = _objectSpread({\n      departmentId,\n      username: {\n        $in: botUsernames\n      }\n    }, ignoreAgentId && {\n      agentId: {\n        $ne: ignoreAgentId\n      }\n    });\n\n    const sort = {\n      count: 1,\n      order: 1,\n      username: 1\n    };\n    const update = {\n      $inc: {\n        count: 1\n      }\n    };\n    const bot = this.findAndModify(query, sort, update);\n\n    if (bot && bot.value) {\n      return {\n        agentId: bot.value.agentId,\n        username: bot.value.username\n      };\n    }\n\n    return null;\n  }\n\n  findUsersInQueue(usersList) {\n    const query = {};\n\n    if (!_.isEmpty(usersList)) {\n      query.username = {\n        $in: usersList\n      };\n    }\n\n    const options = {\n      sort: {\n        departmentId: 1,\n        count: 1,\n        order: 1,\n        username: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  replaceUsernameOfAgentByUserId(userId, username) {\n    const query = {\n      agentId: userId\n    };\n    const update = {\n      $set: {\n        username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setDepartmentEnabledByDepartmentId(departmentId, departmentEnabled) {\n    return this.update({\n      departmentId\n    }, {\n      $set: {\n        departmentEnabled\n      }\n    }, {\n      multi: true\n    });\n  }\n\n}\n\nmodule.exportDefault(new LivechatDepartmentAgents());","map":{"version":3,"sources":["app/models/server/models/LivechatDepartmentAgents.js"],"names":["_objectSpread","module","link","default","v","export","LivechatDepartmentAgents","Meteor","_","Base","Users","constructor","tryEnsureIndex","departmentId","departmentEnabled","agentId","username","collectionObj","model","rawCollection","findAndModify","wrapAsync","findByDepartmentId","find","findByAgentId","findOneByAgentIdAndDepartmentId","findOne","saveAgent","agent","upsert","$set","count","parseInt","order","removeByAgentId","remove","removeByDepartmentIdAndAgentId","removeByDepartmentId","getNextAgentForDepartment","ignoreAgentId","extraQuery","agents","fetch","length","onlineUsers","findOnlineUserFromList","pluck","onlineUsernames","currentUnavailableAgents","Promise","await","getUnavailableAgents","map","u","query","$in","$nin","$ne","sort","update","$inc","value","checkOnlineForDepartment","onlineUser","findOneOnlineAgentByUserList","Boolean","getOnlineForDepartment","getBotsForDepartment","botUsers","findBotAgents","botUsernames","getNextBotForDepartment","bot","findUsersInQueue","usersList","isEmpty","options","replaceUsernameOfAgentByUserId","userId","multi","setDepartmentEnabledByDepartmentId","exportDefault"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { Base } from './_Base';\nimport Users from './Users';\n/**\n * Livechat Department model\n */\nexport class LivechatDepartmentAgents extends Base {\n\tconstructor() {\n\t\tsuper('livechat_department_agents');\n\n\t\tthis.tryEnsureIndex({ departmentId: 1 });\n\t\tthis.tryEnsureIndex({ departmentEnabled: 1 });\n\t\tthis.tryEnsureIndex({ agentId: 1 });\n\t\tthis.tryEnsureIndex({ username: 1 });\n\n\t\tconst collectionObj = this.model.rawCollection();\n\t\tthis.findAndModify = Meteor.wrapAsync(collectionObj.findAndModify, collectionObj);\n\t}\n\n\tfindByDepartmentId(departmentId) {\n\t\treturn this.find({ departmentId });\n\t}\n\n\tfindByAgentId(agentId) {\n\t\treturn this.find({ agentId });\n\t}\n\n\tfindOneByAgentIdAndDepartmentId(agentId, departmentId) {\n\t\treturn this.findOne({ agentId, departmentId });\n\t}\n\n\tsaveAgent(agent) {\n\t\treturn this.upsert(\n\t\t\t{\n\t\t\t\tagentId: agent.agentId,\n\t\t\t\tdepartmentId: agent.departmentId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tusername: agent.username,\n\t\t\t\t\tdepartmentEnabled: agent.departmentEnabled,\n\t\t\t\t\tcount: parseInt(agent.count),\n\t\t\t\t\torder: parseInt(agent.order),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveByAgentId(agentId) {\n\t\tthis.remove({ agentId });\n\t}\n\n\tremoveByDepartmentIdAndAgentId(departmentId, agentId) {\n\t\tthis.remove({ departmentId, agentId });\n\t}\n\n\tremoveByDepartmentId(departmentId) {\n\t\tthis.remove({ departmentId });\n\t}\n\n\tgetNextAgentForDepartment(departmentId, ignoreAgentId, extraQuery) {\n\t\tconst agents = this.findByDepartmentId(departmentId).fetch();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = Users.findOnlineUserFromList(_.pluck(agents, 'username'));\n\n\t\tconst onlineUsernames = _.pluck(onlineUsers.fetch(), 'username');\n\n\t\t// get fully booked agents, to ignore them from the query\n\t\tconst currentUnavailableAgents = Promise.await(Users.getUnavailableAgents(departmentId, extraQuery)).map((u) => u.username);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t\t$nin: currentUnavailableAgents,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst sort = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst collectionObj = this.model.rawCollection();\n\n\t\tconst agent = Promise.await(collectionObj.findAndModify(query, sort, update));\n\t\tif (agent && agent.value) {\n\t\t\treturn {\n\t\t\t\tagentId: agent.value.agentId,\n\t\t\t\tusername: agent.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tcheckOnlineForDepartment(departmentId) {\n\t\tconst agents = this.findByDepartmentId(departmentId).fetch();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlineUser = Users.findOneOnlineAgentByUserList(_.pluck(agents, 'username'));\n\n\t\treturn Boolean(onlineUser);\n\t}\n\n\tgetOnlineForDepartment(departmentId) {\n\t\tconst agents = this.findByDepartmentId(departmentId).fetch();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = Users.findOnlineUserFromList(_.pluck(agents, 'username'));\n\n\t\tconst onlineUsernames = _.pluck(onlineUsers.fetch(), 'username');\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tgetBotsForDepartment(departmentId) {\n\t\tconst agents = this.findByDepartmentId(departmentId).fetch();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsers = Users.findBotAgents(_.pluck(agents, 'username'));\n\t\tconst botUsernames = _.pluck(botUsers.fetch(), 'username');\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tgetNextBotForDepartment(departmentId, ignoreAgentId) {\n\t\tconst agents = this.findByDepartmentId(departmentId).fetch();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsers = Users.findBotAgents(_.pluck(agents, 'username'));\n\t\tconst botUsernames = _.pluck(botUsers.fetch(), 'username');\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst sort = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst bot = this.findAndModify(query, sort, update);\n\t\tif (bot && bot.value) {\n\t\t\treturn {\n\t\t\t\tagentId: bot.value.agentId,\n\t\t\t\tusername: bot.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tfindUsersInQueue(usersList) {\n\t\tconst query = {};\n\n\t\tif (!_.isEmpty(usersList)) {\n\t\t\tquery.username = {\n\t\t\t\t$in: usersList,\n\t\t\t};\n\t\t}\n\n\t\tconst options = {\n\t\t\tsort: {\n\t\t\t\tdepartmentId: 1,\n\t\t\t\tcount: 1,\n\t\t\t\torder: 1,\n\t\t\t\tusername: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\treplaceUsernameOfAgentByUserId(userId, username) {\n\t\tconst query = { agentId: userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tusername,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetDepartmentEnabledByDepartmentId(departmentId, departmentEnabled) {\n\t\treturn this.update({ departmentId }, { $set: { departmentEnabled } }, { multi: true });\n\t}\n}\nexport default new LivechatDepartmentAgents();\n"]},"sourceType":"module","hash":"8b9249f1cc5dcbff954c43d495d4c80aa305b89d"}
