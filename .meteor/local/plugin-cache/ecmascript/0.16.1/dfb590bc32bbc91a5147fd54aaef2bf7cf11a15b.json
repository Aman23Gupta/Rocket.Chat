{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/message-pin/server/pinMessage.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/message-pin/server/pinMessage.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/message-pin/server/pinMessage.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/message-pin/server/pinMessage.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/message-pin/server/pinMessage.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\nlet callbacks;\nmodule.link(\"../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 3);\nlet isTheLastMessage;\nmodule.link(\"../../lib/server\", {\n  isTheLastMessage(v) {\n    isTheLastMessage = v;\n  }\n\n}, 4);\nlet getUserAvatarURL;\nmodule.link(\"../../utils/lib/getUserAvatarURL\", {\n  getUserAvatarURL(v) {\n    getUserAvatarURL = v;\n  }\n\n}, 5);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 6);\nlet Subscriptions, Messages, Users, Rooms;\nmodule.link(\"../../models\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 7);\n\nconst recursiveRemove = function (msg) {\n  let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  if (!msg) {\n    return;\n  }\n\n  if (deep > settings.get('Message_QuoteChainLimit')) {\n    delete msg.attachments;\n    return msg;\n  }\n\n  msg.attachments = Array.isArray(msg.attachments) ? msg.attachments.map(nestedMsg => recursiveRemove(nestedMsg, deep + 1)) : null;\n  return msg;\n};\n\nconst shouldAdd = (attachments, attachment) => !attachments.some(_ref => {\n  let {\n    message_link\n  } = _ref;\n  return message_link && message_link === attachment.message_link;\n});\n\nMeteor.methods({\n  pinMessage(message, pinnedAt) {\n    check(message._id, String);\n    const userId = Meteor.userId();\n\n    if (!userId) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'pinMessage'\n      });\n    }\n\n    if (!settings.get('Message_AllowPinning')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n        method: 'pinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    let originalMessage = Messages.findOneById(message._id);\n\n    if (originalMessage == null || originalMessage._id == null) {\n      throw new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n        method: 'pinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, Meteor.userId(), {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (!subscription) {\n      // If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n      throw new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n        method: 'pinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    if (!hasPermission(Meteor.userId(), 'pin-message', originalMessage.rid)) {\n      throw new Meteor.Error('not-authorized', 'Not Authorized', {\n        method: 'pinMessage'\n      });\n    }\n\n    const me = Users.findOneById(userId); // If we keep history of edits, insert a new message to store history information\n\n    if (settings.get('Message_KeepHistory')) {\n      Messages.cloneAndSaveAsHistoryById(message._id, me);\n    }\n\n    const room = Rooms.findOneById(originalMessage.rid);\n\n    if (!canAccessRoom(room, {\n      _id: Meteor.userId()\n    })) {\n      throw new Meteor.Error('not-authorized', 'Not Authorized', {\n        method: 'pinMessage'\n      });\n    }\n\n    originalMessage.pinned = true;\n    originalMessage.pinnedAt = pinnedAt || Date.now;\n    originalMessage.pinnedBy = {\n      _id: userId,\n      username: me.username\n    };\n    originalMessage = callbacks.run('beforeSaveMessage', originalMessage);\n    Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\n    if (isTheLastMessage(room, message)) {\n      Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n    }\n\n    const attachments = [];\n\n    if (Array.isArray(originalMessage.attachments)) {\n      originalMessage.attachments.forEach(attachment => {\n        if (!attachment.message_link || shouldAdd(attachments, attachment)) {\n          attachments.push(attachment);\n        }\n      });\n    }\n\n    return Messages.createWithTypeRoomIdMessageAndUser('message_pinned', originalMessage.rid, '', me, {\n      attachments: [{\n        text: originalMessage.msg,\n        author_name: originalMessage.u.username,\n        author_icon: getUserAvatarURL(originalMessage.u.username),\n        ts: originalMessage.ts,\n        attachments: recursiveRemove(attachments)\n      }]\n    });\n  },\n\n  unpinMessage(message) {\n    check(message._id, String);\n\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'unpinMessage'\n      });\n    }\n\n    if (!settings.get('Message_AllowPinning')) {\n      throw new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n        method: 'unpinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    let originalMessage = Messages.findOneById(message._id);\n\n    if (originalMessage == null || originalMessage._id == null) {\n      throw new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n        method: 'unpinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, Meteor.userId(), {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (!subscription) {\n      // If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n      throw new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n        method: 'unpinMessage',\n        action: 'Message_pinning'\n      });\n    }\n\n    if (!hasPermission(Meteor.userId(), 'pin-message', originalMessage.rid)) {\n      throw new Meteor.Error('not-authorized', 'Not Authorized', {\n        method: 'unpinMessage'\n      });\n    }\n\n    const me = Users.findOneById(Meteor.userId()); // If we keep history of edits, insert a new message to store history information\n\n    if (settings.get('Message_KeepHistory')) {\n      Messages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n    }\n\n    originalMessage.pinned = false;\n    originalMessage.pinnedBy = {\n      _id: Meteor.userId(),\n      username: me.username\n    };\n    originalMessage = callbacks.run('beforeSaveMessage', originalMessage);\n    const room = Rooms.findOneById(originalMessage.rid, {\n      fields: {\n        lastMessage: 1\n      }\n    });\n\n    if (!canAccessRoom(room, {\n      _id: Meteor.userId()\n    })) {\n      throw new Meteor.Error('not-authorized', 'Not Authorized', {\n        method: 'unpinMessage'\n      });\n    }\n\n    if (isTheLastMessage(room, message)) {\n      Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n    }\n\n    return Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n  }\n\n});","map":{"version":3,"sources":["app/message-pin/server/pinMessage.js"],"names":["Meteor","module","link","v","check","settings","callbacks","isTheLastMessage","getUserAvatarURL","canAccessRoom","hasPermission","Subscriptions","Messages","Users","Rooms","recursiveRemove","msg","deep","get","attachments","Array","isArray","map","nestedMsg","shouldAdd","attachment","some","message_link","methods","pinMessage","message","pinnedAt","_id","String","userId","Error","method","action","originalMessage","findOneById","subscription","findOneByRoomIdAndUserId","rid","fields","me","cloneAndSaveAsHistoryById","room","pinned","Date","now","pinnedBy","username","run","setPinnedByIdAndUserId","setLastMessagePinned","forEach","push","createWithTypeRoomIdMessageAndUser","text","author_name","u","author_icon","ts","unpinMessage","lastMessage"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { settings } from '../../settings/server';\nimport { callbacks } from '../../../lib/callbacks';\nimport { isTheLastMessage } from '../../lib/server';\nimport { getUserAvatarURL } from '../../utils/lib/getUserAvatarURL';\nimport { canAccessRoom, hasPermission } from '../../authorization/server';\nimport { Subscriptions, Messages, Users, Rooms } from '../../models';\n\nconst recursiveRemove = (msg, deep = 1) => {\n\tif (!msg) {\n\t\treturn;\n\t}\n\n\tif (deep > settings.get('Message_QuoteChainLimit')) {\n\t\tdelete msg.attachments;\n\t\treturn msg;\n\t}\n\n\tmsg.attachments = Array.isArray(msg.attachments) ? msg.attachments.map((nestedMsg) => recursiveRemove(nestedMsg, deep + 1)) : null;\n\n\treturn msg;\n};\n\nconst shouldAdd = (attachments, attachment) =>\n\t!attachments.some(({ message_link }) => message_link && message_link === attachment.message_link);\n\nMeteor.methods({\n\tpinMessage(message, pinnedAt) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, Meteor.userId(), { fields: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!hasPermission(Meteor.userId(), 'pin-message', originalMessage.rid)) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tconst me = Users.findOneById(userId);\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory')) {\n\t\t\tMessages.cloneAndSaveAsHistoryById(message._id, me);\n\t\t}\n\n\t\tconst room = Rooms.findOneById(originalMessage.rid);\n\t\tif (!canAccessRoom(room, { _id: Meteor.userId() })) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\toriginalMessage.pinned = true;\n\t\toriginalMessage.pinnedAt = pinnedAt || Date.now;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\toriginalMessage = callbacks.run('beforeSaveMessage', originalMessage);\n\n\t\tMessages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tRooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t}\n\n\t\tconst attachments = [];\n\n\t\tif (Array.isArray(originalMessage.attachments)) {\n\t\t\toriginalMessage.attachments.forEach((attachment) => {\n\t\t\t\tif (!attachment.message_link || shouldAdd(attachments, attachment)) {\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Messages.createWithTypeRoomIdMessageAndUser('message_pinned', originalMessage.rid, '', me, {\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\ttext: originalMessage.msg,\n\t\t\t\t\tauthor_name: originalMessage.u.username,\n\t\t\t\t\tauthor_icon: getUserAvatarURL(originalMessage.u.username),\n\t\t\t\t\tts: originalMessage.ts,\n\t\t\t\t\tattachments: recursiveRemove(attachments),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t},\n\tunpinMessage(message) {\n\t\tcheck(message._id, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, Meteor.userId(), { fields: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!hasPermission(Meteor.userId(), 'pin-message', originalMessage.rid)) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tconst me = Users.findOneById(Meteor.userId());\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory')) {\n\t\t\tMessages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n\t\t}\n\n\t\toriginalMessage.pinned = false;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: Meteor.userId(),\n\t\t\tusername: me.username,\n\t\t};\n\t\toriginalMessage = callbacks.run('beforeSaveMessage', originalMessage);\n\n\t\tconst room = Rooms.findOneById(originalMessage.rid, { fields: { lastMessage: 1 } });\n\t\tif (!canAccessRoom(room, { _id: Meteor.userId() })) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tRooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t}\n\n\t\treturn Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t},\n});\n"]},"sourceType":"module","hash":"dfb590bc32bbc91a5147fd54aaef2bf7cf11a15b"}
