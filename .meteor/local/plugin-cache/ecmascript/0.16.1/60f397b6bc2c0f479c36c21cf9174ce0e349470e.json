{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Users.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/raw/Users.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Users.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/raw/Users.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/raw/Users.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  UsersRaw: () => UsersRaw\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet BaseRaw;\nmodule.link(\"./BaseRaw\", {\n  BaseRaw(v) {\n    BaseRaw = v;\n  }\n\n}, 1);\n\nclass UsersRaw extends BaseRaw {\n  constructor() {\n    super(...arguments);\n    this.defaultFields = {\n      __rooms: 0\n    };\n  }\n\n  addRolesByUserId(uid, roles) {\n    if (!Array.isArray(roles)) {\n      roles = [roles];\n      process.env.NODE_ENV === 'development' && console.warn('[WARN] Users.addRolesByUserId: roles should be an array');\n    }\n\n    const query = {\n      _id: uid\n    };\n    const update = {\n      $addToSet: {\n        roles: {\n          $each: roles\n        }\n      }\n    };\n    return this.updateOne(query, update);\n  }\n\n  findUsersInRoles(roles, scope, options) {\n    roles = [].concat(roles);\n    const query = {\n      roles: {\n        $in: roles\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findOneByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const query = {\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneAgentById(_id, options) {\n    const query = {\n      _id,\n      roles: 'livechat-agent'\n    };\n    return this.findOne(query, options);\n  }\n\n  findUsersInRolesWithQuery(roles, query, options) {\n    roles = [].concat(roles);\n    Object.assign(query, {\n      roles: {\n        $in: roles\n      }\n    });\n    return this.find(query, options);\n  }\n\n  findOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n    if (typeof username === 'string') {\n      username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n    }\n\n    const query = {\n      __rooms: rid,\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByIdAndLoginHashedToken(_id, token) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      _id,\n      'services.resume.loginTokens.hashedToken': token\n    };\n    return this.findOne(query, options);\n  }\n\n  findByActiveUsersExcept(searchTerm, exceptions, options, searchFields) {\n    let extraQuery = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    let {\n      startsWith = false,\n      endsWith = false\n    } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n    if (exceptions == null) {\n      exceptions = [];\n    }\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (!Array.isArray(exceptions)) {\n      exceptions = [exceptions];\n    } // if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\n\n    if (searchTerm === '') {\n      const query = {\n        $and: [{\n          active: true,\n          username: {\n            $exists: true,\n            $nin: exceptions\n          }\n        }, ...extraQuery]\n      };\n      return this.find(query, options);\n    }\n\n    const termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i'); // const searchFields = forcedSearchFields || settings.get('Accounts_SearchFields').trim().split(',');\n\n    const orStmt = (searchFields || []).reduce(function (acc, el) {\n      acc.push({\n        [el.trim()]: termRegex\n      });\n      return acc;\n    }, []);\n    const query = {\n      $and: [{\n        active: true,\n        username: {\n          $exists: true,\n          $nin: exceptions\n        },\n        $or: orStmt\n      }, ...extraQuery]\n    };\n    return this.find(query, options);\n  }\n\n  findActiveByIds(userIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      _id: {\n        $in: userIds\n      },\n      active: true\n    };\n    return this.find(query, options);\n  }\n\n  findByIds(userIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      _id: {\n        $in: userIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findOneByUsernameIgnoringCase(username, options) {\n    if (typeof username === 'string') {\n      username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n    }\n\n    const query = {\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByLDAPId(id) {\n    return Promise.asyncApply(() => {\n      let attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      const query = {\n        'services.ldap.id': id\n      };\n\n      if (attribute) {\n        query['services.ldap.idAttribute'] = attribute;\n      }\n\n      return this.findOne(query);\n    });\n  }\n\n  findLDAPUsers(options) {\n    const query = {\n      ldap: true\n    };\n    return this.find(query, options);\n  }\n\n  findConnectedLDAPUsers(options) {\n    const query = {\n      'ldap': true,\n      'services.resume.loginTokens': {\n        $exists: true,\n        $ne: []\n      }\n    };\n    return this.find(query, options);\n  }\n\n  isUserInRole(userId, roleName) {\n    const query = {\n      _id: userId,\n      roles: roleName\n    };\n    return this.findOne(query, {\n      projection: {\n        roles: 1\n      }\n    });\n  }\n\n  getDistinctFederationDomains() {\n    return this.col.distinct('federation.origin', {\n      federation: {\n        $exists: true\n      }\n    });\n  }\n\n  getNextLeastBusyAgent(department, ignoreAgentId) {\n    return Promise.asyncApply(() => {\n      const aggregate = [{\n        $match: _objectSpread({\n          status: {\n            $exists: true,\n            $ne: 'offline'\n          },\n          statusLivechat: 'available',\n          roles: 'livechat-agent'\n        }, ignoreAgentId && {\n          _id: {\n            $ne: ignoreAgentId\n          }\n        })\n      }, {\n        $lookup: {\n          from: 'rocketchat_subscription',\n          let: {\n            id: '$_id'\n          },\n          pipeline: [{\n            $match: {\n              $expr: {\n                $and: [{\n                  $eq: ['$u._id', '$$id']\n                }, {\n                  $eq: ['$open', true]\n                }, {\n                  $ne: ['$onHold', true]\n                }, _objectSpread({}, department && {\n                  $eq: ['$department', department]\n                })]\n              }\n            }\n          }],\n          as: 'subs'\n        }\n      }, {\n        $lookup: {\n          from: 'rocketchat_livechat_department_agents',\n          localField: '_id',\n          foreignField: 'agentId',\n          as: 'departments'\n        }\n      }, {\n        $project: {\n          agentId: '$_id',\n          username: 1,\n          lastRoutingTime: 1,\n          departments: 1,\n          count: {\n            $size: '$subs'\n          }\n        }\n      }, {\n        $sort: {\n          count: 1,\n          lastRoutingTime: 1,\n          username: 1\n        }\n      }];\n\n      if (department) {\n        aggregate.push({\n          $unwind: '$departments'\n        });\n        aggregate.push({\n          $match: {\n            'departments.departmentId': department\n          }\n        });\n      }\n\n      aggregate.push({\n        $limit: 1\n      });\n      const [agent] = Promise.await(this.col.aggregate(aggregate).toArray());\n\n      if (agent) {\n        Promise.await(this.setLastRoutingTime(agent.agentId));\n      }\n\n      return agent;\n    });\n  }\n\n  getLastAvailableAgentRouted(department, ignoreAgentId) {\n    return Promise.asyncApply(() => {\n      const aggregate = [{\n        $match: _objectSpread({\n          status: {\n            $exists: true,\n            $ne: 'offline'\n          },\n          statusLivechat: 'available',\n          roles: 'livechat-agent'\n        }, ignoreAgentId && {\n          _id: {\n            $ne: ignoreAgentId\n          }\n        })\n      }, {\n        $lookup: {\n          from: 'rocketchat_livechat_department_agents',\n          localField: '_id',\n          foreignField: 'agentId',\n          as: 'departments'\n        }\n      }, {\n        $project: {\n          agentId: '$_id',\n          username: 1,\n          lastRoutingTime: 1,\n          departments: 1\n        }\n      }, {\n        $sort: {\n          lastRoutingTime: 1,\n          username: 1\n        }\n      }];\n\n      if (department) {\n        aggregate.push({\n          $unwind: '$departments'\n        });\n        aggregate.push({\n          $match: {\n            'departments.departmentId': department\n          }\n        });\n      }\n\n      aggregate.push({\n        $limit: 1\n      });\n      const [agent] = Promise.await(this.col.aggregate(aggregate).toArray());\n\n      if (agent) {\n        Promise.await(this.setLastRoutingTime(agent.agentId));\n      }\n\n      return agent;\n    });\n  }\n\n  setLastRoutingTime(userId) {\n    return Promise.asyncApply(() => {\n      const result = Promise.await(this.col.findAndModify({\n        _id: userId\n      }, {\n        sort: {\n          _id: 1\n        }\n      }, {\n        $set: {\n          lastRoutingTime: new Date()\n        }\n      }));\n      return result.value;\n    });\n  }\n\n  setLivechatStatusIf(userId, status) {\n    let conditions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let extraFields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    // TODO: Create class Agent\n    const query = _objectSpread({\n      _id: userId\n    }, conditions);\n\n    const update = {\n      $set: _objectSpread({\n        statusLivechat: status\n      }, extraFields)\n    };\n    return this.update(query, update);\n  }\n\n  getAgentAndAmountOngoingChats(userId) {\n    return Promise.asyncApply(() => {\n      const aggregate = [{\n        $match: {\n          _id: userId,\n          status: {\n            $exists: true,\n            $ne: 'offline'\n          },\n          statusLivechat: 'available',\n          roles: 'livechat-agent'\n        }\n      }, {\n        $lookup: {\n          from: 'rocketchat_subscription',\n          localField: '_id',\n          foreignField: 'u._id',\n          as: 'subs'\n        }\n      }, {\n        $project: {\n          'agentId': '$_id',\n          'username': 1,\n          'lastAssignTime': 1,\n          'lastRoutingTime': 1,\n          'queueInfo.chats': {\n            $size: {\n              $filter: {\n                input: '$subs',\n                as: 'sub',\n                cond: {\n                  $and: [{\n                    $eq: ['$$sub.t', 'l']\n                  }, {\n                    $eq: ['$$sub.open', true]\n                  }, {\n                    $ne: ['$$sub.onHold', true]\n                  }]\n                }\n              }\n            }\n          }\n        }\n      }, {\n        $sort: {\n          'queueInfo.chats': 1,\n          'lastAssignTime': 1,\n          'lastRoutingTime': 1,\n          'username': 1\n        }\n      }];\n      const [agent] = Promise.await(this.col.aggregate(aggregate).toArray());\n      return agent;\n    });\n  }\n\n  findAllResumeTokensByUserId(userId) {\n    return this.col.aggregate([{\n      $match: {\n        _id: userId\n      }\n    }, {\n      $project: {\n        tokens: {\n          $filter: {\n            input: '$services.resume.loginTokens',\n            as: 'token',\n            cond: {\n              $ne: ['$$token.type', 'personalAccessToken']\n            }\n          }\n        }\n      }\n    }, {\n      $unwind: '$tokens'\n    }, {\n      $sort: {\n        'tokens.when': 1\n      }\n    }, {\n      $group: {\n        _id: '$_id',\n        tokens: {\n          $push: '$tokens'\n        }\n      }\n    }]).toArray();\n  }\n\n  findActiveByUsernameOrNameRegexWithExceptionsAndConditions(termRegex, exceptions, conditions, options) {\n    if (exceptions == null) {\n      exceptions = [];\n    }\n\n    if (conditions == null) {\n      conditions = {};\n    }\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (!Array.isArray(exceptions)) {\n      exceptions = [exceptions];\n    }\n\n    const query = _objectSpread({\n      $or: [{\n        username: termRegex\n      }, {\n        name: termRegex\n      }, {\n        nickname: termRegex\n      }],\n      active: true,\n      type: {\n        $in: ['user', 'bot']\n      },\n      $and: [{\n        username: {\n          $exists: true\n        }\n      }, {\n        username: {\n          $nin: exceptions\n        }\n      }]\n    }, conditions);\n\n    return this.find(query, options);\n  }\n\n  countAllAgentsStatus(_ref) {\n    let {\n      departmentId = undefined\n    } = _ref;\n    const match = {\n      $match: {\n        roles: {\n          $in: ['livechat-agent']\n        }\n      }\n    };\n    const group = {\n      $group: {\n        _id: null,\n        offline: {\n          $sum: {\n            $cond: [{\n              $or: [{\n                $and: [{\n                  $eq: ['$status', 'offline']\n                }, {\n                  $eq: ['$statusLivechat', 'available']\n                }]\n              }, {\n                $eq: ['$statusLivechat', 'not-available']\n              }]\n            }, 1, 0]\n          }\n        },\n        away: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $eq: ['$status', 'away']\n              }, {\n                $eq: ['$statusLivechat', 'available']\n              }]\n            }, 1, 0]\n          }\n        },\n        busy: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $eq: ['$status', 'busy']\n              }, {\n                $eq: ['$statusLivechat', 'available']\n              }]\n            }, 1, 0]\n          }\n        },\n        available: {\n          $sum: {\n            $cond: [{\n              $and: [{\n                $eq: ['$status', 'online']\n              }, {\n                $eq: ['$statusLivechat', 'available']\n              }]\n            }, 1, 0]\n          }\n        }\n      }\n    };\n    const lookup = {\n      $lookup: {\n        from: 'rocketchat_livechat_department_agents',\n        localField: '_id',\n        foreignField: 'agentId',\n        as: 'departments'\n      }\n    };\n    const unwind = {\n      $unwind: {\n        path: '$departments',\n        preserveNullAndEmptyArrays: true\n      }\n    };\n    const departmentsMatch = {\n      $match: {\n        'departments.departmentId': departmentId\n      }\n    };\n    const params = [match];\n\n    if (departmentId && departmentId !== 'undefined') {\n      params.push(lookup);\n      params.push(unwind);\n      params.push(departmentsMatch);\n    }\n\n    params.push(group);\n    return this.col.aggregate(params).toArray();\n  }\n\n  getTotalOfRegisteredUsersByDate(_ref2) {\n    let {\n      start,\n      end,\n      options = {}\n    } = _ref2;\n    const params = [{\n      $match: {\n        createdAt: {\n          $gte: start,\n          $lte: end\n        },\n        roles: {\n          $ne: 'anonymous'\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          $concat: [{\n            $substr: ['$createdAt', 0, 4]\n          }, {\n            $substr: ['$createdAt', 5, 2]\n          }, {\n            $substr: ['$createdAt', 8, 2]\n          }]\n        },\n        users: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: '$_id',\n        users: {\n          $sum: '$users'\n        }\n      }\n    }, {\n      $project: {\n        _id: 0,\n        date: '$_id',\n        users: 1,\n        type: 'users'\n      }\n    }];\n\n    if (options.sort) {\n      params.push({\n        $sort: options.sort\n      });\n    }\n\n    if (options.count) {\n      params.push({\n        $limit: options.count\n      });\n    }\n\n    return this.col.aggregate(params).toArray();\n  }\n\n  getUserLanguages() {\n    const pipeline = [{\n      $match: {\n        language: {\n          $exists: true,\n          $ne: ''\n        }\n      }\n    }, {\n      $group: {\n        _id: '$language',\n        total: {\n          $sum: 1\n        }\n      }\n    }];\n    return this.col.aggregate(pipeline).toArray();\n  }\n\n  updateStatusText(_id, statusText) {\n    const update = {\n      $set: {\n        statusText\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  updateStatusByAppId(appId, status) {\n    const query = {\n      appId,\n      status: {\n        $ne: status\n      }\n    };\n    const update = {\n      $set: {\n        status\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  openAgentsBusinessHoursByBusinessHourId(businessHourIds) {\n    const query = {\n      roles: 'livechat-agent'\n    };\n    const update = {\n      $set: {\n        statusLivechat: 'available'\n      },\n      $addToSet: {\n        openBusinessHours: {\n          $each: businessHourIds\n        }\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  openAgentBusinessHoursByBusinessHourIdsAndAgentId(businessHourIds, agentId) {\n    const query = {\n      _id: agentId,\n      roles: 'livechat-agent'\n    };\n    const update = {\n      $set: {\n        statusLivechat: 'available'\n      },\n      $addToSet: {\n        openBusinessHours: {\n          $each: businessHourIds\n        }\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  addBusinessHourByAgentIds() {\n    let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n    const query = {\n      _id: {\n        $in: agentIds\n      },\n      roles: 'livechat-agent'\n    };\n    const update = {\n      $set: {\n        statusLivechat: 'available'\n      },\n      $addToSet: {\n        openBusinessHours: businessHourId\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  removeBusinessHourByAgentIds() {\n    let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n    const query = {\n      _id: {\n        $in: agentIds\n      },\n      roles: 'livechat-agent'\n    };\n    const update = {\n      $pull: {\n        openBusinessHours: businessHourId\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  openBusinessHourToAgentsWithoutDepartment() {\n    let agentIdsWithDepartment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n    const query = {\n      _id: {\n        $nin: agentIdsWithDepartment\n      }\n    };\n    const update = {\n      $set: {\n        statusLivechat: 'available'\n      },\n      $addToSet: {\n        openBusinessHours: businessHourId\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  closeBusinessHourToAgentsWithoutDepartment() {\n    let agentIdsWithDepartment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n    const query = {\n      _id: {\n        $nin: agentIdsWithDepartment\n      }\n    };\n    const update = {\n      $pull: {\n        openBusinessHours: businessHourId\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  closeAgentsBusinessHoursByBusinessHourIds(businessHourIds) {\n    const query = {\n      roles: 'livechat-agent'\n    };\n    const update = {\n      $pull: {\n        openBusinessHours: {\n          $in: businessHourIds\n        }\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateLivechatStatusBasedOnBusinessHours() {\n    let userIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    const query = _objectSpread({\n      $or: [{\n        openBusinessHours: {\n          $exists: false\n        }\n      }, {\n        openBusinessHours: {\n          $size: 0\n        }\n      }],\n      roles: 'livechat-agent'\n    }, Array.isArray(userIds) && userIds.length > 0 && {\n      _id: {\n        $in: userIds\n      }\n    });\n\n    const update = {\n      $set: {\n        statusLivechat: 'not-available'\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setLivechatStatusActiveBasedOnBusinessHours(userId) {\n    const query = {\n      _id: userId,\n      openBusinessHours: {\n        $exists: true,\n        $not: {\n          $size: 0\n        }\n      }\n    };\n    const update = {\n      $set: {\n        statusLivechat: 'available'\n      }\n    };\n    return this.update(query, update);\n  }\n\n  isAgentWithinBusinessHours(agentId) {\n    return Promise.asyncApply(() => {\n      return Promise.await(this.find({\n        _id: agentId,\n        openBusinessHours: {\n          $exists: true,\n          $not: {\n            $size: 0\n          }\n        }\n      }).count()) > 0;\n    });\n  }\n\n  removeBusinessHoursFromAllUsers() {\n    const query = {\n      roles: 'livechat-agent',\n      openBusinessHours: {\n        $exists: true\n      }\n    };\n    const update = {\n      $unset: {\n        openBusinessHours: 1\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  resetTOTPById(userId) {\n    return this.col.updateOne({\n      _id: userId\n    }, {\n      $unset: {\n        'services.totp': 1\n      }\n    });\n  }\n\n  unsetLoginTokens(userId) {\n    return this.col.updateOne({\n      _id: userId\n    }, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  }\n\n  removeNonPATLoginTokensExcept(userId, authToken) {\n    return this.col.updateOne({\n      _id: userId\n    }, {\n      $pull: {\n        'services.resume.loginTokens': {\n          when: {\n            $exists: true\n          },\n          hashedToken: {\n            $ne: authToken\n          }\n        }\n      }\n    });\n  }\n\n  removeRoomsByRoomIdsAndUserId(rids, userId) {\n    return this.update({\n      _id: userId,\n      __rooms: {\n        $in: rids\n      }\n    }, {\n      $pullAll: {\n        __rooms: rids\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  removeRolesByUserId(uid, roles) {\n    const query = {\n      _id: uid\n    };\n    const update = {\n      $pullAll: {\n        roles\n      }\n    };\n    return this.updateOne(query, update);\n  }\n\n  isUserInRoleScope(uid) {\n    return Promise.asyncApply(() => {\n      const query = {\n        _id: uid\n      };\n      const options = {\n        fields: {\n          _id: 1\n        }\n      };\n      const found = Promise.await(this.findOne(query, options));\n      return !!found;\n    });\n  }\n\n  addBannerById(_id, banner) {\n    const query = {\n      _id,\n      [\"banners.\".concat(banner.id, \".read\")]: {\n        $ne: true\n      }\n    };\n    const update = {\n      $set: {\n        [\"banners.\".concat(banner.id)]: banner\n      }\n    };\n    return this.updateOne(query, update);\n  }\n\n}","map":{"version":3,"sources":["app/models/server/raw/Users.js"],"names":["_objectSpread","module","link","default","v","export","UsersRaw","escapeRegExp","BaseRaw","constructor","defaultFields","__rooms","addRolesByUserId","uid","roles","Array","isArray","process","env","NODE_ENV","console","warn","query","_id","update","$addToSet","$each","updateOne","findUsersInRoles","scope","options","concat","$in","find","findOneByUsername","username","findOne","findOneAgentById","findUsersInRolesWithQuery","Object","assign","findOneByUsernameAndRoomIgnoringCase","rid","RegExp","findOneByIdAndLoginHashedToken","token","findByActiveUsersExcept","searchTerm","exceptions","searchFields","extraQuery","startsWith","endsWith","$and","active","$exists","$nin","termRegex","orStmt","reduce","acc","el","push","trim","$or","findActiveByIds","userIds","findByIds","findOneByUsernameIgnoringCase","findOneByLDAPId","id","attribute","undefined","findLDAPUsers","ldap","findConnectedLDAPUsers","$ne","isUserInRole","userId","roleName","projection","getDistinctFederationDomains","col","distinct","federation","getNextLeastBusyAgent","department","ignoreAgentId","aggregate","$match","status","statusLivechat","$lookup","from","let","pipeline","$expr","$eq","as","localField","foreignField","$project","agentId","lastRoutingTime","departments","count","$size","$sort","$unwind","$limit","agent","toArray","setLastRoutingTime","getLastAvailableAgentRouted","result","findAndModify","sort","$set","Date","value","setLivechatStatusIf","conditions","extraFields","getAgentAndAmountOngoingChats","$filter","input","cond","findAllResumeTokensByUserId","tokens","$group","$push","findActiveByUsernameOrNameRegexWithExceptionsAndConditions","name","nickname","type","countAllAgentsStatus","departmentId","match","group","offline","$sum","$cond","away","busy","available","lookup","unwind","path","preserveNullAndEmptyArrays","departmentsMatch","params","getTotalOfRegisteredUsersByDate","start","end","createdAt","$gte","$lte","$concat","$substr","users","date","getUserLanguages","language","total","updateStatusText","statusText","updateStatusByAppId","appId","multi","openAgentsBusinessHoursByBusinessHourId","businessHourIds","openBusinessHours","openAgentBusinessHoursByBusinessHourIdsAndAgentId","addBusinessHourByAgentIds","agentIds","businessHourId","removeBusinessHourByAgentIds","$pull","openBusinessHourToAgentsWithoutDepartment","agentIdsWithDepartment","closeBusinessHourToAgentsWithoutDepartment","closeAgentsBusinessHoursByBusinessHourIds","updateLivechatStatusBasedOnBusinessHours","length","setLivechatStatusActiveBasedOnBusinessHours","$not","isAgentWithinBusinessHours","removeBusinessHoursFromAllUsers","$unset","resetTOTPById","unsetLoginTokens","removeNonPATLoginTokensExcept","authToken","when","hashedToken","removeRoomsByRoomIdsAndUserId","rids","$pullAll","removeRolesByUserId","isUserInRoleScope","fields","found","addBannerById","banner"],"mappings":"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","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class UsersRaw extends BaseRaw {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.defaultFields = {\n\t\t\t__rooms: 0,\n\t\t};\n\t}\n\n\taddRolesByUserId(uid, roles) {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Users.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(roles, scope, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByUsername(username, options = null) {\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneAgentById(_id, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindUsersInRolesWithQuery(roles, query, options) {\n\t\troles = [].concat(roles);\n\n\t\tObject.assign(query, { roles: { $in: roles } });\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = {\n\t\t\t__rooms: rid,\n\t\t\tusername,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndLoginHashedToken(_id, token, options = {}) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'services.resume.loginTokens.hashedToken': token,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByActiveUsersExcept(searchTerm, exceptions, options, searchFields, extraQuery = [], { startsWith = false, endsWith = false } = {}) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\t// if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\t\tif (searchTerm === '') {\n\t\t\tconst query = {\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\tusername: { $exists: true, $nin: exceptions },\n\t\t\t\t\t},\n\t\t\t\t\t...extraQuery,\n\t\t\t\t],\n\t\t\t};\n\n\t\t\treturn this.find(query, options);\n\t\t}\n\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\n\t\t// const searchFields = forcedSearchFields || settings.get('Accounts_SearchFields').trim().split(',');\n\n\t\tconst orStmt = (searchFields || []).reduce(function (acc, el) {\n\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tactive: true,\n\t\t\t\t\tusername: { $exists: true, $nin: exceptions },\n\t\t\t\t\t$or: orStmt,\n\t\t\t\t},\n\t\t\t\t...extraQuery,\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindActiveByIds(userIds, options = {}) {\n\t\tconst query = {\n\t\t\t_id: { $in: userIds },\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(userIds, options = {}) {\n\t\tconst query = {\n\t\t\t_id: { $in: userIds },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByUsernameIgnoringCase(username, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByLDAPId(id, attribute = undefined) {\n\t\tconst query = {\n\t\t\t'services.ldap.id': id,\n\t\t};\n\n\t\tif (attribute) {\n\t\t\tquery['services.ldap.idAttribute'] = attribute;\n\t\t}\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindLDAPUsers(options) {\n\t\tconst query = { ldap: true };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindConnectedLDAPUsers(options) {\n\t\tconst query = {\n\t\t\t'ldap': true,\n\t\t\t'services.resume.loginTokens': {\n\t\t\t\t$exists: true,\n\t\t\t\t$ne: [],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tisUserInRole(userId, roleName) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\troles: roleName,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { roles: 1 } });\n\t}\n\n\tgetDistinctFederationDomains() {\n\t\treturn this.col.distinct('federation.origin', { federation: { $exists: true } });\n\t}\n\n\tasync getNextLeastBusyAgent(department, ignoreAgentId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: { $exists: true, $ne: 'offline' },\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlet: { id: '$_id' },\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t{ $eq: ['$u._id', '$$id'] },\n\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t{ $ne: ['$onHold', true] },\n\t\t\t\t\t\t\t\t\t\t{ ...(department && { $eq: ['$department', department] }) },\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'subs',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'agentId',\n\t\t\t\t\tas: 'departments',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tagentId: '$_id',\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tlastRoutingTime: 1,\n\t\t\t\t\tdepartments: 1,\n\t\t\t\t\tcount: { $size: '$subs' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { count: 1, lastRoutingTime: 1, username: 1 } },\n\t\t];\n\n\t\tif (department) {\n\t\t\taggregate.push({ $unwind: '$departments' });\n\t\t\taggregate.push({ $match: { 'departments.departmentId': department } });\n\t\t}\n\n\t\taggregate.push({ $limit: 1 });\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync getLastAvailableAgentRouted(department, ignoreAgentId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: { $exists: true, $ne: 'offline' },\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'agentId',\n\t\t\t\t\tas: 'departments',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { agentId: '$_id', username: 1, lastRoutingTime: 1, departments: 1 } },\n\t\t\t{ $sort: { lastRoutingTime: 1, username: 1 } },\n\t\t];\n\n\t\tif (department) {\n\t\t\taggregate.push({ $unwind: '$departments' });\n\t\t\taggregate.push({ $match: { 'departments.departmentId': department } });\n\t\t}\n\n\t\taggregate.push({ $limit: 1 });\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync setLastRoutingTime(userId) {\n\t\tconst result = await this.col.findAndModify(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastRoutingTime: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\treturn result.value;\n\t}\n\n\tsetLivechatStatusIf(userId, status, conditions = {}, extraFields = {}) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\t...conditions,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: status,\n\t\t\t\t...extraFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tasync getAgentAndAmountOngoingChats(userId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t_id: userId,\n\t\t\t\t\tstatus: { $exists: true, $ne: 'offline' },\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'u._id',\n\t\t\t\t\tas: 'subs',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t'agentId': '$_id',\n\t\t\t\t\t'username': 1,\n\t\t\t\t\t'lastAssignTime': 1,\n\t\t\t\t\t'lastRoutingTime': 1,\n\t\t\t\t\t'queueInfo.chats': {\n\t\t\t\t\t\t$size: {\n\t\t\t\t\t\t\t$filter: {\n\t\t\t\t\t\t\t\tinput: '$subs',\n\t\t\t\t\t\t\t\tas: 'sub',\n\t\t\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t\t\t$and: [{ $eq: ['$$sub.t', 'l'] }, { $eq: ['$$sub.open', true] }, { $ne: ['$$sub.onHold', true] }],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { 'queueInfo.chats': 1, 'lastAssignTime': 1, 'lastRoutingTime': 1, 'username': 1 } },\n\t\t];\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\treturn agent;\n\t}\n\n\tfindAllResumeTokensByUserId(userId) {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t_id: userId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\ttokens: {\n\t\t\t\t\t\t\t$filter: {\n\t\t\t\t\t\t\t\tinput: '$services.resume.loginTokens',\n\t\t\t\t\t\t\t\tas: 'token',\n\t\t\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t\t\t$ne: ['$$token.type', 'personalAccessToken'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $unwind: '$tokens' },\n\t\t\t\t{ $sort: { 'tokens.when': 1 } },\n\t\t\t\t{ $group: { _id: '$_id', tokens: { $push: '$tokens' } } },\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tfindActiveByUsernameOrNameRegexWithExceptionsAndConditions(termRegex, exceptions, conditions, options) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (conditions == null) {\n\t\t\tconditions = {};\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tusername: termRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: termRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tnickname: termRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t\tactive: true,\n\t\t\ttype: {\n\t\t\t\t$in: ['user', 'bot'],\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$nin: exceptions,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t...conditions,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountAllAgentsStatus({ departmentId = undefined }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\troles: { $in: ['livechat-agent'] },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\toffline: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'offline'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ $eq: ['$statusLivechat', 'not-available'] },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taway: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'away'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbusy: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'busy'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tavailable: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'online'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'agentId',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsMatch = {\n\t\t\t$match: {\n\t\t\t\t'departments.departmentId': departmentId,\n\t\t\t},\n\t\t};\n\t\tconst params = [match];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tparams.push(lookup);\n\t\t\tparams.push(unwind);\n\t\t\tparams.push(departmentsMatch);\n\t\t}\n\t\tparams.push(group);\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tgetTotalOfRegisteredUsersByDate({ start, end, options = {} }) {\n\t\tconst params = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tcreatedAt: { $gte: start, $lte: end },\n\t\t\t\t\troles: { $ne: 'anonymous' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$concat: [{ $substr: ['$createdAt', 0, 4] }, { $substr: ['$createdAt', 5, 2] }, { $substr: ['$createdAt', 8, 2] }],\n\t\t\t\t\t},\n\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tusers: { $sum: '$users' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tdate: '$_id',\n\t\t\t\t\tusers: 1,\n\t\t\t\t\ttype: 'users',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options.sort) {\n\t\t\tparams.push({ $sort: options.sort });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tgetUserLanguages() {\n\t\tconst pipeline = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tlanguage: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$language',\n\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(pipeline).toArray();\n\t}\n\n\tupdateStatusText(_id, statusText) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusText,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tupdateStatusByAppId(appId, status) {\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tstatus: { $ne: status },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\topenAgentsBusinessHoursByBusinessHourId(businessHourIds) {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: { $each: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\topenAgentBusinessHoursByBusinessHourIdsAndAgentId(businessHourIds, agentId) {\n\t\tconst query = {\n\t\t\t_id: agentId,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: { $each: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\taddBusinessHourByAgentIds(agentIds = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $in: agentIds },\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tremoveBusinessHourByAgentIds(agentIds = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $in: agentIds },\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\topenBusinessHourToAgentsWithoutDepartment(agentIdsWithDepartment = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $nin: agentIdsWithDepartment },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tcloseBusinessHourToAgentsWithoutDepartment(agentIdsWithDepartment = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $nin: agentIdsWithDepartment },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tcloseAgentsBusinessHoursByBusinessHourIds(businessHourIds) {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: { $in: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateLivechatStatusBasedOnBusinessHours(userIds = []) {\n\t\tconst query = {\n\t\t\t$or: [{ openBusinessHours: { $exists: false } }, { openBusinessHours: { $size: 0 } }],\n\t\t\troles: 'livechat-agent',\n\t\t\t...(Array.isArray(userIds) && userIds.length > 0 && { _id: { $in: userIds } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'not-available',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetLivechatStatusActiveBasedOnBusinessHours(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\topenBusinessHours: {\n\t\t\t\t$exists: true,\n\t\t\t\t$not: { $size: 0 },\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tasync isAgentWithinBusinessHours(agentId) {\n\t\treturn (\n\t\t\t(await this.find({\n\t\t\t\t_id: agentId,\n\t\t\t\topenBusinessHours: {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$not: { $size: 0 },\n\t\t\t\t},\n\t\t\t}).count()) > 0\n\t\t);\n\t}\n\n\tremoveBusinessHoursFromAllUsers() {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t\topenBusinessHours: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\topenBusinessHours: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tresetTOTPById(userId) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'services.totp': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetLoginTokens(userId) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.resume.loginTokens': [],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveNonPATLoginTokensExcept(userId, authToken) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.resume.loginTokens': {\n\t\t\t\t\t\twhen: { $exists: true },\n\t\t\t\t\t\thashedToken: { $ne: authToken },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomsByRoomIdsAndUserId(rids, userId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t\t__rooms: { $in: rids },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pullAll: { __rooms: rids },\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tremoveRolesByUserId(uid, roles) {\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid) {\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n\n\taddBannerById(_id, banner) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t[`banners.${banner.id}.read`]: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`banners.${banner.id}`]: banner,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"]},"sourceType":"module","hash":"60f397b6bc2c0f479c36c21cf9174ce0e349470e"}
