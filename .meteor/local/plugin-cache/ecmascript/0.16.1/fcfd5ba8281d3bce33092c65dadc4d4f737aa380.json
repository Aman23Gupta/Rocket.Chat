{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack-users/server/importer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-slack-users/server/importer.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack-users/server/importer.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-slack-users/server/importer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-slack-users/server/importer.js"}},"code":"module.export({\n  SlackUsersImporter: () => SlackUsersImporter\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet RawImports, Base, ProgressStep, Selection, SelectionUser;\nmodule.link(\"../../importer/server\", {\n  RawImports(v) {\n    RawImports = v;\n  },\n\n  Base(v) {\n    Base = v;\n  },\n\n  ProgressStep(v) {\n    ProgressStep = v;\n  },\n\n  Selection(v) {\n    Selection = v;\n  },\n\n  SelectionUser(v) {\n    SelectionUser = v;\n  }\n\n}, 3);\nlet RocketChatFile;\nmodule.link(\"../../file\", {\n  RocketChatFile(v) {\n    RocketChatFile = v;\n  }\n\n}, 4);\nlet Users;\nmodule.link(\"../../models\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 5);\n\nclass SlackUsersImporter extends Base {\n  constructor(info, importRecord) {\n    super(info, importRecord);\n    this.csvParser = require('csv-parse/lib/sync');\n    this.userMap = new Map();\n    this.admins = []; // Array of ids of the users which are admins\n  }\n\n  prepare(dataURI, sentContentType, fileName) {\n    super.prepare(dataURI, sentContentType, fileName, true);\n    super.updateProgress(ProgressStep.PREPARING_USERS);\n    const uriResult = RocketChatFile.dataURIParse(dataURI);\n    const buf = Buffer.from(uriResult.image, 'base64');\n    const parsed = this.csvParser(buf.toString());\n    parsed.forEach((user, index) => {\n      // Ignore the first column\n      if (index === 0) {\n        return;\n      }\n\n      const id = Random.id();\n      const username = user[0];\n      const email = user[1];\n      let isBot = false;\n      let isDeleted = false;\n\n      switch (user[2]) {\n        case 'Admin':\n          this.admins.push(id);\n          break;\n\n        case 'Bot':\n          isBot = true;\n          break;\n\n        case 'Deactivated':\n          isDeleted = true;\n          break;\n      }\n\n      this.userMap.set(id, new SelectionUser(id, username, email, isDeleted, isBot, true));\n    });\n    const userArray = Array.from(this.userMap.values());\n    const usersId = this.collection.insert({\n      import: this.importRecord._id,\n      importer: this.name,\n      type: 'users',\n      users: userArray\n    });\n    this.users = this.collection.findOne(usersId);\n    super.updateRecord({\n      'count.users': this.userMap.size\n    });\n    super.addCountToTotal(this.userMap.size);\n\n    if (this.userMap.size === 0) {\n      this.logger.error('No users found in the import file.');\n      super.updateProgress(ProgressStep.ERROR);\n      return super.getProgress();\n    }\n\n    this.collection.insert({\n      import: this.importRecord._id,\n      importer: this.name,\n      type: 'admins',\n      admins: this.admins\n    });\n    super.updateProgress(ProgressStep.USER_SELECTION);\n    return new Selection(this.name, userArray, [], 0);\n  }\n\n  startImport(importSelection) {\n    const admins = this.collection.findOne({\n      import: this.importRecord._id,\n      type: 'admins'\n    });\n\n    if (admins) {\n      this.admins = admins.admins || [];\n    } else {\n      this.admins = [];\n    }\n\n    this.users = RawImports.findOne({\n      import: this.importRecord._id,\n      type: 'users'\n    }); // Recreate the userMap from the collection data\n\n    this.userMap = new Map();\n\n    for (const user of this.users.users) {\n      const obj = new SelectionUser();\n\n      for (const propName in user) {\n        if (user.hasOwnProperty(propName)) {\n          obj[propName] = user[propName];\n        }\n      }\n\n      this.userMap.set(user.user_id, obj);\n    }\n\n    this.reloadCount();\n    super.startImport(importSelection);\n    const started = Date.now();\n\n    for (const user of importSelection.users) {\n      const u = this.userMap.get(user.user_id);\n      u.do_import = user.do_import;\n      this.userMap.set(user.user_id, u);\n    }\n\n    this.collection.update({\n      _id: this.users._id\n    }, {\n      $set: {\n        users: Array.from(this.userMap.values())\n      }\n    });\n    const startedByUserId = Meteor.userId();\n    Meteor.defer(() => {\n      super.updateProgress(ProgressStep.IMPORTING_USERS);\n\n      try {\n        for (const u of this.users.users) {\n          if (!u.do_import) {\n            continue;\n          }\n\n          Meteor.runAsUser(startedByUserId, () => {\n            const existantUser = Users.findOneByEmailAddress(u.email) || Users.findOneByUsernameIgnoringCase(u.username);\n            let userId;\n\n            if (existantUser) {\n              // since we have an existing user, let's try a few things\n              userId = existantUser._id;\n              u.rocketId = existantUser._id;\n              Users.update({\n                _id: u.rocketId\n              }, {\n                $addToSet: {\n                  importIds: u.user_id\n                }\n              });\n              Users.setEmail(existantUser._id, u.email);\n              Users.setEmailVerified(existantUser._id, u.email);\n            } else {\n              userId = Accounts.createUser({\n                username: u.username + Random.id(),\n                password: Date.now() + u.name + u.email.toUpperCase()\n              });\n\n              if (!userId) {\n                console.warn('An error happened while creating a user.');\n                return;\n              }\n\n              Meteor.runAsUser(userId, () => {\n                Meteor.call('setUsername', u.username, {\n                  joinDefaultChannelsSilenced: true\n                });\n                Users.setName(userId, u.name);\n                Users.update({\n                  _id: userId\n                }, {\n                  $addToSet: {\n                    importIds: u.user_id\n                  }\n                });\n                Users.setEmail(userId, u.email);\n                Users.setEmailVerified(userId, u.email);\n                u.rocketId = userId;\n              });\n            }\n\n            if (this.admins.includes(u.user_id)) {\n              Meteor.call('setAdminStatus', userId, true);\n            }\n\n            super.addCountCompleted(1);\n          });\n        }\n\n        super.updateProgress(ProgressStep.FINISHING);\n        super.updateProgress(ProgressStep.DONE);\n      } catch (e) {\n        this.logger.error(e);\n        super.updateProgress(ProgressStep.ERROR);\n      }\n\n      const timeTook = Date.now() - started;\n      this.logger.log(\"Slack Users Import took \".concat(timeTook, \" milliseconds.\"));\n    });\n    return super.getProgress();\n  }\n\n}","map":{"version":3,"sources":["app/importer-slack-users/server/importer.js"],"names":["module","export","SlackUsersImporter","Meteor","link","v","Accounts","Random","RawImports","Base","ProgressStep","Selection","SelectionUser","RocketChatFile","Users","constructor","info","importRecord","csvParser","require","userMap","Map","admins","prepare","dataURI","sentContentType","fileName","updateProgress","PREPARING_USERS","uriResult","dataURIParse","buf","Buffer","from","image","parsed","toString","forEach","user","index","id","username","email","isBot","isDeleted","push","set","userArray","Array","values","usersId","collection","insert","import","_id","importer","name","type","users","findOne","updateRecord","size","addCountToTotal","logger","error","ERROR","getProgress","USER_SELECTION","startImport","importSelection","obj","propName","hasOwnProperty","user_id","reloadCount","started","Date","now","u","get","do_import","update","$set","startedByUserId","userId","defer","IMPORTING_USERS","runAsUser","existantUser","findOneByEmailAddress","findOneByUsernameIgnoringCase","rocketId","$addToSet","importIds","setEmail","setEmailVerified","createUser","password","toUpperCase","console","warn","call","joinDefaultChannelsSilenced","setName","includes","addCountCompleted","FINISHING","DONE","e","timeTook","log"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Random } from 'meteor/random';\n\nimport { RawImports, Base, ProgressStep, Selection, SelectionUser } from '../../importer/server';\nimport { RocketChatFile } from '../../file';\nimport { Users } from '../../models';\n\nexport class SlackUsersImporter extends Base {\n\tconstructor(info, importRecord) {\n\t\tsuper(info, importRecord);\n\n\t\tthis.csvParser = require('csv-parse/lib/sync');\n\t\tthis.userMap = new Map();\n\t\tthis.admins = []; // Array of ids of the users which are admins\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName, true);\n\n\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tconst uriResult = RocketChatFile.dataURIParse(dataURI);\n\t\tconst buf = Buffer.from(uriResult.image, 'base64');\n\t\tconst parsed = this.csvParser(buf.toString());\n\n\t\tparsed.forEach((user, index) => {\n\t\t\t// Ignore the first column\n\t\t\tif (index === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst id = Random.id();\n\t\t\tconst username = user[0];\n\t\t\tconst email = user[1];\n\t\t\tlet isBot = false;\n\t\t\tlet isDeleted = false;\n\n\t\t\tswitch (user[2]) {\n\t\t\t\tcase 'Admin':\n\t\t\t\t\tthis.admins.push(id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Bot':\n\t\t\t\t\tisBot = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Deactivated':\n\t\t\t\t\tisDeleted = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.userMap.set(id, new SelectionUser(id, username, email, isDeleted, isBot, true));\n\t\t});\n\n\t\tconst userArray = Array.from(this.userMap.values());\n\n\t\tconst usersId = this.collection.insert({\n\t\t\timport: this.importRecord._id,\n\t\t\timporter: this.name,\n\t\t\ttype: 'users',\n\t\t\tusers: userArray,\n\t\t});\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tsuper.updateRecord({ 'count.users': this.userMap.size });\n\t\tsuper.addCountToTotal(this.userMap.size);\n\n\t\tif (this.userMap.size === 0) {\n\t\t\tthis.logger.error('No users found in the import file.');\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn super.getProgress();\n\t\t}\n\n\t\tthis.collection.insert({\n\t\t\timport: this.importRecord._id,\n\t\t\timporter: this.name,\n\t\t\ttype: 'admins',\n\t\t\tadmins: this.admins,\n\t\t});\n\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\t\treturn new Selection(this.name, userArray, [], 0);\n\t}\n\n\tstartImport(importSelection) {\n\t\tconst admins = this.collection.findOne({ import: this.importRecord._id, type: 'admins' });\n\t\tif (admins) {\n\t\t\tthis.admins = admins.admins || [];\n\t\t} else {\n\t\t\tthis.admins = [];\n\t\t}\n\n\t\tthis.users = RawImports.findOne({ import: this.importRecord._id, type: 'users' });\n\t\t// Recreate the userMap from the collection data\n\t\tthis.userMap = new Map();\n\t\tfor (const user of this.users.users) {\n\t\t\tconst obj = new SelectionUser();\n\t\t\tfor (const propName in user) {\n\t\t\t\tif (user.hasOwnProperty(propName)) {\n\t\t\t\t\tobj[propName] = user[propName];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.userMap.set(user.user_id, obj);\n\t\t}\n\n\t\tthis.reloadCount();\n\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\tfor (const user of importSelection.users) {\n\t\t\tconst u = this.userMap.get(user.user_id);\n\t\t\tu.do_import = user.do_import;\n\n\t\t\tthis.userMap.set(user.user_id, u);\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: Array.from(this.userMap.values()) } });\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = Users.findOneByEmailAddress(u.email) || Users.findOneByUsernameIgnoringCase(u.username);\n\n\t\t\t\t\t\tlet userId;\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t// since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tuserId = existantUser._id;\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tUsers.update({ _id: u.rocketId }, { $addToSet: { importIds: u.user_id } });\n\n\t\t\t\t\t\t\tUsers.setEmail(existantUser._id, u.email);\n\t\t\t\t\t\t\tUsers.setEmailVerified(existantUser._id, u.email);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuserId = Accounts.createUser({\n\t\t\t\t\t\t\t\tusername: u.username + Random.id(),\n\t\t\t\t\t\t\t\tpassword: Date.now() + u.name + u.email.toUpperCase(),\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!userId) {\n\t\t\t\t\t\t\t\tconsole.warn('An error happened while creating a user.');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, { joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\t\tUsers.setName(userId, u.name);\n\t\t\t\t\t\t\t\tUsers.update({ _id: userId }, { $addToSet: { importIds: u.user_id } });\n\t\t\t\t\t\t\t\tUsers.setEmail(userId, u.email);\n\t\t\t\t\t\t\t\tUsers.setEmailVerified(userId, u.email);\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.admins.includes(u.user_id)) {\n\t\t\t\t\t\t\tMeteor.call('setAdminStatus', userId, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`Slack Users Import took ${timeTook} milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n}\n"]},"sourceType":"module","hash":"fcfd5ba8281d3bce33092c65dadc4d4f737aa380"}
