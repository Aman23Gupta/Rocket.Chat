{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/api-enterprise/server/lib/canned-responses.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/api-enterprise/server/lib/canned-responses.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/api-enterprise/server/lib/canned-responses.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/ee/app/api-enterprise/server/lib/canned-responses.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/api-enterprise/server/lib/canned-responses.js"}},"code":"module.export({\n  findAllCannedResponses: () => findAllCannedResponses,\n  findAllCannedResponsesFilter: () => findAllCannedResponsesFilter,\n  findOneCannedResponse: () => findOneCannedResponse\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet hasPermissionAsync;\nmodule.link(\"../../../../../app/authorization/server/functions/hasPermission\", {\n  hasPermissionAsync(v) {\n    hasPermissionAsync = v;\n  }\n\n}, 1);\nlet CannedResponse;\nmodule.link(\"../../../models/server/raw/CannedResponse\", {\n  default(v) {\n    CannedResponse = v;\n  }\n\n}, 2);\nlet LivechatUnit;\nmodule.link(\"../../../models/server/models/LivechatUnit\", {\n  default(v) {\n    LivechatUnit = v;\n  }\n\n}, 3);\nlet LivechatDepartmentAgents;\nmodule.link(\"../../../../../app/models/server/raw\", {\n  LivechatDepartmentAgents(v) {\n    LivechatDepartmentAgents = v;\n  }\n\n}, 4);\n\nfunction findAllCannedResponses(_ref) {\n  return Promise.asyncApply(() => {\n    let {\n      userId\n    } = _ref;\n\n    if (!Promise.await(hasPermissionAsync(userId, 'view-canned-responses'))) {\n      throw new Error('error-not-authorized');\n    } // If the user is an admin or livechat manager, get his own responses and all responses from all departments\n\n\n    if (Promise.await(hasPermissionAsync(userId, 'view-all-canned-responses'))) {\n      return CannedResponse.find({\n        $or: [{\n          scope: 'user',\n          userId\n        }, {\n          scope: 'department'\n        }, {\n          scope: 'global'\n        }]\n      }).toArray();\n    } // If the user it not any of the previous roles nor an agent, then get only his own responses\n\n\n    if (!Promise.await(hasPermissionAsync(userId, 'view-agent-canned-responses'))) {\n      return CannedResponse.find({\n        scope: 'user',\n        userId\n      }).toArray();\n    } // Last scenario: user is an agente, so get his own responses and those from the departments he is in\n\n\n    const departments = Promise.await(LivechatDepartmentAgents.find({\n      agentId: userId\n    }, {\n      fields: {\n        departmentId: 1\n      }\n    }).toArray());\n    const monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n    const combinedDepartments = [...departments.map(department => department.departmentId), ...monitoredDepartments.map(department => department._id)];\n    return CannedResponse.find({\n      $or: [{\n        scope: 'user',\n        userId\n      }, {\n        scope: 'department',\n        departmentId: {\n          $in: combinedDepartments\n        }\n      }, {\n        scope: 'global'\n      }]\n    }).toArray();\n  });\n}\n\nfunction findAllCannedResponsesFilter(_ref2) {\n  return Promise.asyncApply(() => {\n    let {\n      userId,\n      shortcut,\n      text,\n      departmentId,\n      scope,\n      createdBy,\n      tags = [],\n      options = {}\n    } = _ref2;\n\n    if (!Promise.await(hasPermissionAsync(userId, 'view-canned-responses'))) {\n      throw new Error('error-not-authorized');\n    }\n\n    let extraFilter = []; // if user cannot see all, filter to private + public + departments user is in\n\n    if (!Promise.await(hasPermissionAsync(userId, 'view-all-canned-responses'))) {\n      const departments = Promise.await(LivechatDepartmentAgents.find({\n        agentId: userId\n      }, {\n        fields: {\n          departmentId: 1\n        }\n      }).toArray());\n      const monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n      const combinedDepartments = [...departments.map(department => department.departmentId), ...monitoredDepartments.map(department => department._id)];\n\n      const isDepartmentInScope = departmentId => !!combinedDepartments.includes(departmentId);\n\n      const departmentIds = departmentId && isDepartmentInScope(departmentId) ? [departmentId] : combinedDepartments;\n      extraFilter = [{\n        $or: [{\n          scope: 'user',\n          userId\n        }, {\n          scope: 'department',\n          departmentId: {\n            $in: departmentIds\n          }\n        }, {\n          scope: 'global'\n        }]\n      }];\n    }\n\n    if (departmentId) {\n      extraFilter = [{\n        departmentId\n      }];\n    }\n\n    const textFilter = new RegExp(escapeRegExp(text), 'i');\n    let filter = {\n      $and: [...(shortcut ? [{\n        shortcut\n      }] : []), ...(text ? [{\n        $or: [{\n          shortcut: textFilter\n        }, {\n          text: textFilter\n        }]\n      }] : []), ...(scope ? [{\n        scope\n      }] : []), ...(createdBy ? [{\n        'createdBy._id': createdBy\n      }] : []), ...(tags.length ? [{\n        tags: {\n          $in: tags\n        }\n      }] : []), ...extraFilter]\n    };\n\n    if (!filter.$and.length) {\n      filter = {};\n    }\n\n    const cursor = CannedResponse.find(filter, {\n      sort: options.sort || {\n        shortcut: 1\n      },\n      skip: options.offset,\n      limit: options.count\n    });\n    const total = Promise.await(cursor.count());\n    const cannedResponses = Promise.await(cursor.toArray());\n    return {\n      cannedResponses,\n      total\n    };\n  });\n}\n\nfunction findOneCannedResponse(_ref3) {\n  return Promise.asyncApply(() => {\n    let {\n      userId,\n      _id\n    } = _ref3;\n\n    if (!Promise.await(hasPermissionAsync(userId, 'view-canned-responses'))) {\n      throw new Error('error-not-authorized');\n    }\n\n    if (Promise.await(hasPermissionAsync(userId, 'view-all-canned-responses'))) {\n      return CannedResponse.findOneById(_id);\n    }\n\n    const departments = Promise.await(LivechatDepartmentAgents.find({\n      agentId: userId\n    }, {\n      fields: {\n        departmentId: 1\n      }\n    }).toArray());\n    const monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n    const combinedDepartments = [...departments.map(department => department.departmentId), ...monitoredDepartments.map(department => department._id)];\n    const filter = {\n      _id,\n      $or: [{\n        scope: 'user',\n        userId\n      }, {\n        scope: 'department',\n        departmentId: {\n          $in: combinedDepartments\n        }\n      }, {\n        scope: 'global'\n      }]\n    };\n    return CannedResponse.findOne(filter);\n  });\n}","map":{"version":3,"sources":["ee/app/api-enterprise/server/lib/canned-responses.js"],"names":["module","export","findAllCannedResponses","findAllCannedResponsesFilter","findOneCannedResponse","escapeRegExp","link","v","hasPermissionAsync","CannedResponse","default","LivechatUnit","LivechatDepartmentAgents","userId","Error","find","$or","scope","toArray","departments","agentId","fields","departmentId","monitoredDepartments","findMonitoredDepartmentsByMonitorId","fetch","combinedDepartments","map","department","_id","$in","shortcut","text","createdBy","tags","options","extraFilter","isDepartmentInScope","includes","departmentIds","textFilter","RegExp","filter","$and","length","cursor","sort","skip","offset","limit","count","total","cannedResponses","findOneById","findOne"],"mappings":"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","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { hasPermissionAsync } from '../../../../../app/authorization/server/functions/hasPermission';\nimport CannedResponse from '../../../models/server/raw/CannedResponse';\nimport LivechatUnit from '../../../models/server/models/LivechatUnit';\nimport { LivechatDepartmentAgents } from '../../../../../app/models/server/raw';\n\nexport async function findAllCannedResponses({ userId }) {\n\tif (!(await hasPermissionAsync(userId, 'view-canned-responses'))) {\n\t\tthrow new Error('error-not-authorized');\n\t}\n\n\t// If the user is an admin or livechat manager, get his own responses and all responses from all departments\n\tif (await hasPermissionAsync(userId, 'view-all-canned-responses')) {\n\t\treturn CannedResponse.find({\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tscope: 'user',\n\t\t\t\t\tuserId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'department',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'global',\n\t\t\t\t},\n\t\t\t],\n\t\t}).toArray();\n\t}\n\n\t// If the user it not any of the previous roles nor an agent, then get only his own responses\n\tif (!(await hasPermissionAsync(userId, 'view-agent-canned-responses'))) {\n\t\treturn CannedResponse.find({\n\t\t\tscope: 'user',\n\t\t\tuserId,\n\t\t}).toArray();\n\t}\n\n\t// Last scenario: user is an agente, so get his own responses and those from the departments he is in\n\tconst departments = await LivechatDepartmentAgents.find(\n\t\t{\n\t\t\tagentId: userId,\n\t\t},\n\t\t{\n\t\t\tfields: {\n\t\t\t\tdepartmentId: 1,\n\t\t\t},\n\t\t},\n\t).toArray();\n\n\tconst monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n\tconst combinedDepartments = [\n\t\t...departments.map((department) => department.departmentId),\n\t\t...monitoredDepartments.map((department) => department._id),\n\t];\n\n\treturn CannedResponse.find({\n\t\t$or: [\n\t\t\t{\n\t\t\t\tscope: 'user',\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'department',\n\t\t\t\tdepartmentId: {\n\t\t\t\t\t$in: combinedDepartments,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'global',\n\t\t\t},\n\t\t],\n\t}).toArray();\n}\n\nexport async function findAllCannedResponsesFilter({ userId, shortcut, text, departmentId, scope, createdBy, tags = [], options = {} }) {\n\tif (!(await hasPermissionAsync(userId, 'view-canned-responses'))) {\n\t\tthrow new Error('error-not-authorized');\n\t}\n\n\tlet extraFilter = [];\n\t// if user cannot see all, filter to private + public + departments user is in\n\tif (!(await hasPermissionAsync(userId, 'view-all-canned-responses'))) {\n\t\tconst departments = await LivechatDepartmentAgents.find(\n\t\t\t{\n\t\t\t\tagentId: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\tdepartmentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\tconst monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n\t\tconst combinedDepartments = [\n\t\t\t...departments.map((department) => department.departmentId),\n\t\t\t...monitoredDepartments.map((department) => department._id),\n\t\t];\n\n\t\tconst isDepartmentInScope = (departmentId) => !!combinedDepartments.includes(departmentId);\n\n\t\tconst departmentIds = departmentId && isDepartmentInScope(departmentId) ? [departmentId] : combinedDepartments;\n\n\t\textraFilter = [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tscope: 'user',\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tscope: 'department',\n\t\t\t\t\t\tdepartmentId: {\n\t\t\t\t\t\t\t$in: departmentIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tscope: 'global',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t];\n\t}\n\n\tif (departmentId) {\n\t\textraFilter = [\n\t\t\t{\n\t\t\t\tdepartmentId,\n\t\t\t},\n\t\t];\n\t}\n\n\tconst textFilter = new RegExp(escapeRegExp(text), 'i');\n\n\tlet filter = {\n\t\t$and: [\n\t\t\t...(shortcut ? [{ shortcut }] : []),\n\t\t\t...(text ? [{ $or: [{ shortcut: textFilter }, { text: textFilter }] }] : []),\n\t\t\t...(scope ? [{ scope }] : []),\n\t\t\t...(createdBy ? [{ 'createdBy._id': createdBy }] : []),\n\t\t\t...(tags.length\n\t\t\t\t? [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttags: {\n\t\t\t\t\t\t\t\t$in: tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t  ]\n\t\t\t\t: []),\n\t\t\t...extraFilter,\n\t\t],\n\t};\n\n\tif (!filter.$and.length) {\n\t\tfilter = {};\n\t}\n\n\tconst cursor = CannedResponse.find(filter, {\n\t\tsort: options.sort || { shortcut: 1 },\n\t\tskip: options.offset,\n\t\tlimit: options.count,\n\t});\n\tconst total = await cursor.count();\n\tconst cannedResponses = await cursor.toArray();\n\treturn {\n\t\tcannedResponses,\n\t\ttotal,\n\t};\n}\n\nexport async function findOneCannedResponse({ userId, _id }) {\n\tif (!(await hasPermissionAsync(userId, 'view-canned-responses'))) {\n\t\tthrow new Error('error-not-authorized');\n\t}\n\n\tif (await hasPermissionAsync(userId, 'view-all-canned-responses')) {\n\t\treturn CannedResponse.findOneById(_id);\n\t}\n\n\tconst departments = await LivechatDepartmentAgents.find(\n\t\t{\n\t\t\tagentId: userId,\n\t\t},\n\t\t{\n\t\t\tfields: {\n\t\t\t\tdepartmentId: 1,\n\t\t\t},\n\t\t},\n\t).toArray();\n\n\tconst monitoredDepartments = LivechatUnit.findMonitoredDepartmentsByMonitorId(userId).fetch();\n\tconst combinedDepartments = [\n\t\t...departments.map((department) => department.departmentId),\n\t\t...monitoredDepartments.map((department) => department._id),\n\t];\n\n\tconst filter = {\n\t\t_id,\n\t\t$or: [\n\t\t\t{\n\t\t\t\tscope: 'user',\n\t\t\t\tuserId,\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'department',\n\t\t\t\tdepartmentId: {\n\t\t\t\t\t$in: combinedDepartments,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tscope: 'global',\n\t\t\t},\n\t\t],\n\t};\n\n\treturn CannedResponse.findOne(filter);\n}\n"]},"sourceType":"module","hash":"17d127f831e84e4738c7d8b139aec84b263730e6"}
