{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/retention-policy/server/cronPruneMessages.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/retention-policy/server/cronPruneMessages.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/retention-policy/server/cronPruneMessages.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/retention-policy/server/cronPruneMessages.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/retention-policy/server/cronPruneMessages.js"}},"code":"let SyncedCron;\nmodule.link(\"meteor/littledata:synced-cron\", {\n  SyncedCron(v) {\n    SyncedCron = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet Rooms;\nmodule.link(\"../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 2);\nlet cleanRoomHistory;\nmodule.link(\"../../lib\", {\n  cleanRoomHistory(v) {\n    cleanRoomHistory = v;\n  }\n\n}, 3);\nlet types = [];\nconst oldest = new Date('0001-01-01T00:00:00Z');\nconst maxTimes = {\n  c: 0,\n  p: 0,\n  d: 0\n};\n\nconst toDays = d => d * 1000 * 60 * 60 * 24;\n\nfunction job() {\n  const now = new Date();\n  const filesOnly = settings.get('RetentionPolicy_FilesOnly');\n  const excludePinned = settings.get('RetentionPolicy_DoNotPrunePinned');\n  const ignoreDiscussion = settings.get('RetentionPolicy_DoNotPruneDiscussion');\n  const ignoreThreads = settings.get('RetentionPolicy_DoNotPruneThreads'); // get all rooms with default values\n\n  types.forEach(type => {\n    const maxAge = maxTimes[type] || 0;\n    const latest = new Date(now.getTime() - toDays(maxAge));\n    Rooms.find({\n      't': type,\n      '$or': [{\n        'retention.enabled': {\n          $eq: true\n        }\n      }, {\n        'retention.enabled': {\n          $exists: false\n        }\n      }],\n      'retention.overrideGlobal': {\n        $ne: true\n      }\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).forEach(_ref => {\n      let {\n        _id: rid\n      } = _ref;\n      cleanRoomHistory({\n        rid,\n        latest,\n        oldest,\n        filesOnly,\n        excludePinned,\n        ignoreDiscussion,\n        ignoreThreads\n      });\n    });\n  });\n  Rooms.find({\n    'retention.enabled': {\n      $eq: true\n    },\n    'retention.overrideGlobal': {\n      $eq: true\n    },\n    'retention.maxAge': {\n      $gte: 0\n    }\n  }).forEach(room => {\n    const {\n      maxAge = 30,\n      filesOnly,\n      excludePinned,\n      ignoreThreads\n    } = room.retention;\n    const latest = new Date(now.getTime() - toDays(maxAge));\n    cleanRoomHistory({\n      rid: room._id,\n      latest,\n      oldest,\n      filesOnly,\n      excludePinned,\n      ignoreDiscussion,\n      ignoreThreads\n    });\n  });\n}\n\nfunction getSchedule(precision) {\n  switch (precision) {\n    case '0':\n      return '*/30 * * * *';\n    // 30 minutes\n\n    case '1':\n      return '0 * * * *';\n    // hour\n\n    case '2':\n      return '0 */6 * * *';\n    // 6 hours\n\n    case '3':\n      return '0 0 * * *';\n    // day\n  }\n}\n\nconst pruneCronName = 'Prune old messages by retention policy';\n\nfunction deployCron(precision) {\n  const schedule = parser => parser.cron(precision);\n\n  SyncedCron.remove(pruneCronName);\n  SyncedCron.add({\n    name: pruneCronName,\n    schedule,\n    job\n  });\n}\n\nsettings.watchMultiple(['RetentionPolicy_Enabled', 'RetentionPolicy_AppliesToChannels', 'RetentionPolicy_AppliesToGroups', 'RetentionPolicy_AppliesToDMs', 'RetentionPolicy_MaxAge_Channels', 'RetentionPolicy_MaxAge_Groups', 'RetentionPolicy_MaxAge_DMs', 'RetentionPolicy_Advanced_Precision', 'RetentionPolicy_Advanced_Precision_Cron', 'RetentionPolicy_Precision'], function reloadPolicy() {\n  types = [];\n\n  if (!settings.get('RetentionPolicy_Enabled')) {\n    return SyncedCron.remove(pruneCronName);\n  }\n\n  if (settings.get('RetentionPolicy_AppliesToChannels')) {\n    types.push('c');\n  }\n\n  if (settings.get('RetentionPolicy_AppliesToGroups')) {\n    types.push('p');\n  }\n\n  if (settings.get('RetentionPolicy_AppliesToDMs')) {\n    types.push('d');\n  }\n\n  maxTimes.c = settings.get('RetentionPolicy_MaxAge_Channels');\n  maxTimes.p = settings.get('RetentionPolicy_MaxAge_Groups');\n  maxTimes.d = settings.get('RetentionPolicy_MaxAge_DMs');\n  const precision = settings.get('RetentionPolicy_Advanced_Precision') && settings.get('RetentionPolicy_Advanced_Precision_Cron') || getSchedule(settings.get('RetentionPolicy_Precision'));\n  return deployCron(precision);\n});","map":{"version":3,"sources":["app/retention-policy/server/cronPruneMessages.js"],"names":["SyncedCron","module","link","v","settings","Rooms","cleanRoomHistory","types","oldest","Date","maxTimes","c","p","d","toDays","job","now","filesOnly","get","excludePinned","ignoreDiscussion","ignoreThreads","forEach","type","maxAge","latest","getTime","find","$eq","$exists","$ne","fields","_id","rid","$gte","room","retention","getSchedule","precision","pruneCronName","deployCron","schedule","parser","cron","remove","add","name","watchMultiple","reloadPolicy","push"],"mappings":"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","sourcesContent":["import { SyncedCron } from 'meteor/littledata:synced-cron';\n\nimport { settings } from '../../settings/server';\nimport { Rooms } from '../../models/server';\nimport { cleanRoomHistory } from '../../lib';\n\nlet types = [];\n\nconst oldest = new Date('0001-01-01T00:00:00Z');\n\nconst maxTimes = {\n\tc: 0,\n\tp: 0,\n\td: 0,\n};\n\nconst toDays = (d) => d * 1000 * 60 * 60 * 24;\n\nfunction job() {\n\tconst now = new Date();\n\tconst filesOnly = settings.get('RetentionPolicy_FilesOnly');\n\tconst excludePinned = settings.get('RetentionPolicy_DoNotPrunePinned');\n\tconst ignoreDiscussion = settings.get('RetentionPolicy_DoNotPruneDiscussion');\n\tconst ignoreThreads = settings.get('RetentionPolicy_DoNotPruneThreads');\n\n\t// get all rooms with default values\n\ttypes.forEach((type) => {\n\t\tconst maxAge = maxTimes[type] || 0;\n\t\tconst latest = new Date(now.getTime() - toDays(maxAge));\n\n\t\tRooms.find(\n\t\t\t{\n\t\t\t\t't': type,\n\t\t\t\t'$or': [{ 'retention.enabled': { $eq: true } }, { 'retention.enabled': { $exists: false } }],\n\t\t\t\t'retention.overrideGlobal': { $ne: true },\n\t\t\t},\n\t\t\t{ fields: { _id: 1 } },\n\t\t).forEach(({ _id: rid }) => {\n\t\t\tcleanRoomHistory({\n\t\t\t\trid,\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tfilesOnly,\n\t\t\t\texcludePinned,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tignoreThreads,\n\t\t\t});\n\t\t});\n\t});\n\n\tRooms.find({\n\t\t'retention.enabled': { $eq: true },\n\t\t'retention.overrideGlobal': { $eq: true },\n\t\t'retention.maxAge': { $gte: 0 },\n\t}).forEach((room) => {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = room.retention;\n\t\tconst latest = new Date(now.getTime() - toDays(maxAge));\n\t\tcleanRoomHistory({\n\t\t\trid: room._id,\n\t\t\tlatest,\n\t\t\toldest,\n\t\t\tfilesOnly,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tignoreThreads,\n\t\t});\n\t});\n}\n\nfunction getSchedule(precision) {\n\tswitch (precision) {\n\t\tcase '0':\n\t\t\treturn '*/30 * * * *'; // 30 minutes\n\t\tcase '1':\n\t\t\treturn '0 * * * *'; // hour\n\t\tcase '2':\n\t\t\treturn '0 */6 * * *'; // 6 hours\n\t\tcase '3':\n\t\t\treturn '0 0 * * *'; // day\n\t}\n}\n\nconst pruneCronName = 'Prune old messages by retention policy';\n\nfunction deployCron(precision) {\n\tconst schedule = (parser) => parser.cron(precision);\n\n\tSyncedCron.remove(pruneCronName);\n\tSyncedCron.add({\n\t\tname: pruneCronName,\n\t\tschedule,\n\t\tjob,\n\t});\n}\n\nsettings.watchMultiple(\n\t[\n\t\t'RetentionPolicy_Enabled',\n\t\t'RetentionPolicy_AppliesToChannels',\n\t\t'RetentionPolicy_AppliesToGroups',\n\t\t'RetentionPolicy_AppliesToDMs',\n\t\t'RetentionPolicy_MaxAge_Channels',\n\t\t'RetentionPolicy_MaxAge_Groups',\n\t\t'RetentionPolicy_MaxAge_DMs',\n\t\t'RetentionPolicy_Advanced_Precision',\n\t\t'RetentionPolicy_Advanced_Precision_Cron',\n\t\t'RetentionPolicy_Precision',\n\t],\n\tfunction reloadPolicy() {\n\t\ttypes = [];\n\n\t\tif (!settings.get('RetentionPolicy_Enabled')) {\n\t\t\treturn SyncedCron.remove(pruneCronName);\n\t\t}\n\t\tif (settings.get('RetentionPolicy_AppliesToChannels')) {\n\t\t\ttypes.push('c');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToGroups')) {\n\t\t\ttypes.push('p');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToDMs')) {\n\t\t\ttypes.push('d');\n\t\t}\n\n\t\tmaxTimes.c = settings.get('RetentionPolicy_MaxAge_Channels');\n\t\tmaxTimes.p = settings.get('RetentionPolicy_MaxAge_Groups');\n\t\tmaxTimes.d = settings.get('RetentionPolicy_MaxAge_DMs');\n\n\t\tconst precision =\n\t\t\t(settings.get('RetentionPolicy_Advanced_Precision') && settings.get('RetentionPolicy_Advanced_Precision_Cron')) ||\n\t\t\tgetSchedule(settings.get('RetentionPolicy_Precision'));\n\n\t\treturn deployCron(precision);\n\t},\n);\n"]},"sourceType":"module","hash":"8e9aead041e6ca3b5def8667a3c03bcbda8de10f"}
