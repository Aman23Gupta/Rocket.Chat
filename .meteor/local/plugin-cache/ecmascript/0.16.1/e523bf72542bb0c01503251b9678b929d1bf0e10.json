{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-csv/server/importer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-csv/server/importer.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-csv/server/importer.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/importer-csv/server/importer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-csv/server/importer.js"}},"code":"module.export({\n  CsvImporter: () => CsvImporter\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet Base, ProgressStep, ImporterWebsocket;\nmodule.link(\"../../importer/server\", {\n  Base(v) {\n    Base = v;\n  },\n\n  ProgressStep(v) {\n    ProgressStep = v;\n  },\n\n  ImporterWebsocket(v) {\n    ImporterWebsocket = v;\n  }\n\n}, 1);\nlet Users;\nmodule.link(\"../../models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 2);\n\nclass CsvImporter extends Base {\n  constructor(info, importRecord) {\n    super(info, importRecord);\n    this.csvParser = require('csv-parse/lib/sync');\n  }\n\n  prepareUsingLocalFile(fullFilePath) {\n    this.logger.debug('start preparing import operation');\n    this.converter.clearImportData();\n    const zip = new this.AdmZip(fullFilePath);\n    const totalEntries = zip.getEntryCount();\n    ImporterWebsocket.progressUpdated({\n      rate: 0\n    });\n    let count = 0;\n    let oldRate = 0;\n\n    const increaseProgressCount = () => {\n      try {\n        count++;\n        const rate = Math.floor(count * 1000 / totalEntries) / 10;\n\n        if (rate > oldRate) {\n          ImporterWebsocket.progressUpdated({\n            rate\n          });\n          oldRate = rate;\n        }\n      } catch (e) {\n        this.logger.error(e);\n      }\n    };\n\n    let messagesCount = 0;\n    let usersCount = 0;\n    let channelsCount = 0;\n    const dmRooms = new Map();\n    const roomIds = new Map();\n    const usedUsernames = new Set();\n    const availableUsernames = new Set();\n\n    const getRoomId = roomName => {\n      if (!roomIds.has(roomName)) {\n        roomIds.set(roomName, Random.id());\n      }\n\n      return roomIds.get(roomName);\n    };\n\n    zip.forEach(entry => {\n      this.logger.debug(\"Entry: \".concat(entry.entryName)); // Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\n      if (entry.entryName.indexOf('__MACOSX') > -1) {\n        this.logger.debug(\"Ignoring the file: \".concat(entry.entryName));\n        return increaseProgressCount();\n      } // Directories are ignored, since they are \"virtual\" in a zip file\n\n\n      if (entry.isDirectory) {\n        this.logger.debug(\"Ignoring the directory entry: \".concat(entry.entryName));\n        return increaseProgressCount();\n      } // Parse the channels\n\n\n      if (entry.entryName.toLowerCase() === 'channels.csv') {\n        super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n        const parsedChannels = this.csvParser(entry.getData().toString());\n        channelsCount = parsedChannels.length;\n\n        for (const c of parsedChannels) {\n          const name = c[0].trim();\n          const id = getRoomId(name);\n          const creator = c[1].trim();\n          const isPrivate = c[2].trim().toLowerCase() === 'private';\n          const members = c[3].trim().split(';').map(m => m.trim()).filter(m => m);\n          this.converter.addChannel({\n            importIds: [id],\n            u: {\n              _id: creator\n            },\n            name,\n            users: members,\n            t: isPrivate ? 'p' : 'c'\n          });\n        }\n\n        super.updateRecord({\n          'count.channels': channelsCount\n        });\n        return increaseProgressCount();\n      } // Parse the users\n\n\n      if (entry.entryName.toLowerCase() === 'users.csv') {\n        super.updateProgress(ProgressStep.PREPARING_USERS);\n        const parsedUsers = this.csvParser(entry.getData().toString());\n        usersCount = parsedUsers.length;\n\n        for (const u of parsedUsers) {\n          const username = u[0].trim();\n          availableUsernames.add(username);\n          const email = u[1].trim();\n          const name = u[2].trim();\n          this.converter.addUser({\n            importIds: [username],\n            emails: [email],\n            username,\n            name\n          });\n        }\n\n        super.updateRecord({\n          'count.users': parsedUsers.length\n        });\n        return increaseProgressCount();\n      } // Parse the messages\n\n\n      if (entry.entryName.indexOf('/') > -1) {\n        if (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n          super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n        }\n\n        const item = entry.entryName.split('/'); // random/messages.csv\n\n        const folderName = item[0]; // random\n\n        let msgs = [];\n\n        try {\n          msgs = this.csvParser(entry.getData().toString());\n        } catch (e) {\n          this.logger.warn(\"The file \".concat(entry.entryName, \" contains invalid syntax\"), e);\n          return increaseProgressCount();\n        }\n\n        let data;\n        const msgGroupData = item[1].split('.')[0]; // messages\n\n        let isDirect = false;\n\n        if (folderName.toLowerCase() === 'directmessages') {\n          isDirect = true;\n          data = msgs.map(m => ({\n            username: m[0],\n            ts: m[2],\n            text: m[3],\n            otherUsername: m[1],\n            isDirect: true\n          }));\n        } else {\n          data = msgs.map(m => ({\n            username: m[0],\n            ts: m[1],\n            text: m[2]\n          }));\n        }\n\n        messagesCount += data.length;\n        const channelName = \"\".concat(folderName, \"/\").concat(msgGroupData);\n        super.updateRecord({\n          messagesstatus: channelName\n        });\n\n        if (isDirect) {\n          for (const msg of data) {\n            const sourceId = [msg.username, msg.otherUsername].sort().join('/');\n\n            if (!dmRooms.has(sourceId)) {\n              this.converter.addChannel({\n                importIds: [sourceId],\n                users: [msg.username, msg.otherUsername],\n                t: 'd'\n              });\n              dmRooms.set(sourceId, true);\n            }\n\n            const newMessage = {\n              rid: sourceId,\n              u: {\n                _id: msg.username\n              },\n              ts: new Date(parseInt(msg.ts)),\n              msg: msg.text\n            };\n            usedUsernames.add(msg.username);\n            usedUsernames.add(msg.otherUsername);\n            this.converter.addMessage(newMessage);\n          }\n        } else {\n          const rid = getRoomId(folderName);\n\n          for (const msg of data) {\n            const newMessage = {\n              rid,\n              u: {\n                _id: msg.username\n              },\n              ts: new Date(parseInt(msg.ts)),\n              msg: msg.text\n            };\n            usedUsernames.add(msg.username);\n            this.converter.addMessage(newMessage);\n          }\n        }\n\n        super.updateRecord({\n          'count.messages': messagesCount,\n          'messagesstatus': null\n        });\n        return increaseProgressCount();\n      }\n\n      increaseProgressCount();\n    }); // Check if any of the message usernames was not in the imported list of users\n\n    for (const username of usedUsernames) {\n      var _user$importIds;\n\n      if (availableUsernames.has(username)) {\n        continue;\n      } // Check if an user with that username already exists\n\n\n      const user = Users.findOneByUsername(username);\n\n      if (user && !((_user$importIds = user.importIds) !== null && _user$importIds !== void 0 && _user$importIds.includes(username))) {\n        // Add the username to the local user's importIds so it can be found by the import process\n        // This way we can support importing new messages for existing users\n        Users.addImportIds(user._id, username);\n      }\n    }\n\n    super.addCountToTotal(messagesCount + usersCount + channelsCount);\n    ImporterWebsocket.progressUpdated({\n      rate: 100\n    }); // Ensure we have at least a single user, channel, or message\n\n    if (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n      this.logger.error('No users, channels, or messages found in the import file.');\n      super.updateProgress(ProgressStep.ERROR);\n      return super.getProgress();\n    }\n  }\n\n}","map":{"version":3,"sources":["app/importer-csv/server/importer.js"],"names":["module","export","CsvImporter","Random","link","v","Base","ProgressStep","ImporterWebsocket","Users","constructor","info","importRecord","csvParser","require","prepareUsingLocalFile","fullFilePath","logger","debug","converter","clearImportData","zip","AdmZip","totalEntries","getEntryCount","progressUpdated","rate","count","oldRate","increaseProgressCount","Math","floor","e","error","messagesCount","usersCount","channelsCount","dmRooms","Map","roomIds","usedUsernames","Set","availableUsernames","getRoomId","roomName","has","set","id","get","forEach","entry","entryName","indexOf","isDirectory","toLowerCase","updateProgress","PREPARING_CHANNELS","parsedChannels","getData","toString","length","c","name","trim","creator","isPrivate","members","split","map","m","filter","addChannel","importIds","u","_id","users","t","updateRecord","PREPARING_USERS","parsedUsers","username","add","email","addUser","emails","progress","step","PREPARING_MESSAGES","item","folderName","msgs","warn","data","msgGroupData","isDirect","ts","text","otherUsername","channelName","messagesstatus","msg","sourceId","sort","join","newMessage","rid","Date","parseInt","addMessage","user","findOneByUsername","includes","addImportIds","addCountToTotal","ERROR","getProgress"],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\n\nimport { Base, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport { Users } from '../../models/server';\n\nexport class CsvImporter extends Base {\n\tconstructor(info, importRecord) {\n\t\tsuper(info, importRecord);\n\n\t\tthis.csvParser = require('csv-parse/lib/sync');\n\t}\n\n\tprepareUsingLocalFile(fullFilePath) {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tthis.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\n\t\tlet count = 0;\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgressCount = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\tlet messagesCount = 0;\n\t\tlet usersCount = 0;\n\t\tlet channelsCount = 0;\n\t\tconst dmRooms = new Map();\n\t\tconst roomIds = new Map();\n\t\tconst usedUsernames = new Set();\n\t\tconst availableUsernames = new Set();\n\n\t\tconst getRoomId = (roomName) => {\n\t\t\tif (!roomIds.has(roomName)) {\n\t\t\t\troomIds.set(roomName, Random.id());\n\t\t\t}\n\n\t\t\treturn roomIds.get(roomName);\n\t\t};\n\n\t\tzip.forEach((entry) => {\n\t\t\tthis.logger.debug(`Entry: ${entry.entryName}`);\n\n\t\t\t// Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\treturn increaseProgressCount();\n\t\t\t}\n\n\t\t\t// Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${entry.entryName}`);\n\t\t\t\treturn increaseProgressCount();\n\t\t\t}\n\n\t\t\t// Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\tchannelsCount = parsedChannels.length;\n\n\t\t\t\tfor (const c of parsedChannels) {\n\t\t\t\t\tconst name = c[0].trim();\n\t\t\t\t\tconst id = getRoomId(name);\n\t\t\t\t\tconst creator = c[1].trim();\n\t\t\t\t\tconst isPrivate = c[2].trim().toLowerCase() === 'private';\n\t\t\t\t\tconst members = c[3]\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(';')\n\t\t\t\t\t\t.map((m) => m.trim())\n\t\t\t\t\t\t.filter((m) => m);\n\n\t\t\t\t\tthis.converter.addChannel({\n\t\t\t\t\t\timportIds: [id],\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: creator,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusers: members,\n\t\t\t\t\t\tt: isPrivate ? 'p' : 'c',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.channels': channelsCount });\n\t\t\t\treturn increaseProgressCount();\n\t\t\t}\n\n\t\t\t// Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\tusersCount = parsedUsers.length;\n\n\t\t\t\tfor (const u of parsedUsers) {\n\t\t\t\t\tconst username = u[0].trim();\n\t\t\t\t\tavailableUsernames.add(username);\n\n\t\t\t\t\tconst email = u[1].trim();\n\t\t\t\t\tconst name = u[2].trim();\n\n\t\t\t\t\tthis.converter.addUser({\n\t\t\t\t\t\timportIds: [username],\n\t\t\t\t\t\temails: [email],\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tname,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.users': parsedUsers.length });\n\t\t\t\treturn increaseProgressCount();\n\t\t\t}\n\n\t\t\t// Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t}\n\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${entry.entryName} contains invalid syntax`, e);\n\t\t\t\t\treturn increaseProgressCount();\n\t\t\t\t}\n\n\t\t\t\tlet data;\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tdata = msgs.map((m) => ({ username: m[0], ts: m[1], text: m[2] }));\n\t\t\t\t}\n\n\t\t\t\tmessagesCount += data.length;\n\t\t\t\tconst channelName = `${folderName}/${msgGroupData}`;\n\n\t\t\t\tsuper.updateRecord({ messagesstatus: channelName });\n\n\t\t\t\tif (isDirect) {\n\t\t\t\t\tfor (const msg of data) {\n\t\t\t\t\t\tconst sourceId = [msg.username, msg.otherUsername].sort().join('/');\n\n\t\t\t\t\t\tif (!dmRooms.has(sourceId)) {\n\t\t\t\t\t\t\tthis.converter.addChannel({\n\t\t\t\t\t\t\t\timportIds: [sourceId],\n\t\t\t\t\t\t\t\tusers: [msg.username, msg.otherUsername],\n\t\t\t\t\t\t\t\tt: 'd',\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tdmRooms.set(sourceId, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid: sourceId,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tusedUsernames.add(msg.otherUsername);\n\t\t\t\t\t\tthis.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tthis.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t\treturn increaseProgressCount();\n\t\t\t}\n\n\t\t\tincreaseProgressCount();\n\t\t});\n\n\t\t// Check if any of the message usernames was not in the imported list of users\n\t\tfor (const username of usedUsernames) {\n\t\t\tif (availableUsernames.has(username)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if an user with that username already exists\n\t\t\tconst user = Users.findOneByUsername(username);\n\t\t\tif (user && !user.importIds?.includes(username)) {\n\t\t\t\t// Add the username to the local user's importIds so it can be found by the import process\n\t\t\t\t// This way we can support importing new messages for existing users\n\t\t\t\tUsers.addImportIds(user._id, username);\n\t\t\t}\n\t\t}\n\n\t\tsuper.addCountToTotal(messagesCount + usersCount + channelsCount);\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\n\t\t// Ensure we have at least a single user, channel, or message\n\t\tif (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn super.getProgress();\n\t\t}\n\t}\n}\n"]},"sourceType":"module","hash":"e523bf72542bb0c01503251b9678b929d1bf0e10"}
