{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/imports/message-read-receipt/server/lib/ReadReceipt.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"imports/message-read-receipt/server/lib/ReadReceipt.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/imports/message-read-receipt/server/lib/ReadReceipt.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/imports/message-read-receipt/server/lib/ReadReceipt.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/message-read-receipt/server/lib/ReadReceipt.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  ReadReceipt: () => ReadReceipt\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Subscriptions, Messages, Rooms, Users, LivechatVisitors;\nmodule.link(\"../../../../app/models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  }\n\n}, 2);\nlet ReadReceipts;\nmodule.link(\"../../../../app/models/server/raw\", {\n  ReadReceipts(v) {\n    ReadReceipts = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet roomTypes;\nmodule.link(\"../../../../app/utils/server\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 5);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 6);\n// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\nconst list = {};\n\nconst debounceByRoomId = function (fn) {\n  return function (roomId) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    clearTimeout(list[roomId]);\n    list[roomId] = setTimeout(() => {\n      fn.call(this, roomId, ...args);\n    }, 2000);\n  };\n};\n\nconst updateMessages = debounceByRoomId(Meteor.bindEnvironment(_ref => {\n  let {\n    _id,\n    lm\n  } = _ref;\n  // @TODO maybe store firstSubscription in room object so we don't need to call the above update method\n  const firstSubscription = Subscriptions.getMinimumLastSeenByRoomId(_id);\n\n  if (!firstSubscription) {\n    return;\n  }\n\n  Messages.setAsRead(_id, firstSubscription.ls);\n\n  if (lm <= firstSubscription.ls) {\n    Rooms.setLastMessageAsRead(_id);\n  }\n}));\nconst ReadReceipt = {\n  markMessagesAsRead(roomId, userId, userLastSeen) {\n    if (!settings.get('Message_Read_Receipt_Enabled')) {\n      return;\n    }\n\n    const room = Rooms.findOneById(roomId, {\n      fields: {\n        lm: 1\n      }\n    }); // if users last seen is greadebounceByRoomIdter than room's last message, it means the user already have this room marked as read\n\n    if (userLastSeen > room.lm) {\n      return;\n    }\n\n    if (userLastSeen) {\n      this.storeReadReceipts(Messages.findUnreadMessagesByRoomAndDate(roomId, userLastSeen), roomId, userId);\n    }\n\n    updateMessages(room);\n  },\n\n  markMessageAsReadBySender(message, roomId, userId) {\n    if (!settings.get('Message_Read_Receipt_Enabled')) {\n      return;\n    } // this will usually happens if the message sender is the only one on the room\n\n\n    const firstSubscription = Subscriptions.getMinimumLastSeenByRoomId(roomId);\n\n    if (firstSubscription && message.unread && message.ts < firstSubscription.ls) {\n      Messages.setAsReadById(message._id, firstSubscription.ls);\n    }\n\n    const room = Rooms.findOneById(roomId, {\n      fields: {\n        t: 1\n      }\n    });\n    const extraData = roomTypes.getConfig(room.t).getReadReceiptsExtraData(message);\n    this.storeReadReceipts([{\n      _id: message._id\n    }], roomId, userId, extraData);\n  },\n\n  storeReadReceipts(messages, roomId, userId) {\n    return Promise.asyncApply(() => {\n      let extraData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (settings.get('Message_Read_Receipt_Store_Users')) {\n        const ts = new Date();\n        const receipts = messages.map(message => _objectSpread({\n          _id: Random.id(),\n          roomId,\n          userId,\n          messageId: message._id,\n          ts\n        }, extraData));\n\n        if (receipts.length === 0) {\n          return;\n        }\n\n        try {\n          Promise.await(ReadReceipts.insertMany(receipts));\n        } catch (e) {\n          SystemLogger.error('Error inserting read receipts per user');\n        }\n      }\n    });\n  },\n\n  getReceipts(message) {\n    return Promise.asyncApply(() => {\n      const receipts = Promise.await(ReadReceipts.findByMessageId(message._id).toArray());\n      return receipts.map(receipt => _objectSpread(_objectSpread({}, receipt), {}, {\n        user: receipt.token ? LivechatVisitors.getVisitorByToken(receipt.token, {\n          fields: {\n            username: 1,\n            name: 1\n          }\n        }) : Users.findOneById(receipt.userId, {\n          fields: {\n            username: 1,\n            name: 1\n          }\n        })\n      }));\n    });\n  }\n\n};","map":{"version":3,"sources":["imports/message-read-receipt/server/lib/ReadReceipt.js"],"names":["_objectSpread","module","link","default","v","export","ReadReceipt","Meteor","Random","Subscriptions","Messages","Rooms","Users","LivechatVisitors","ReadReceipts","settings","roomTypes","SystemLogger","list","debounceByRoomId","fn","roomId","args","clearTimeout","setTimeout","call","updateMessages","bindEnvironment","_id","lm","firstSubscription","getMinimumLastSeenByRoomId","setAsRead","ls","setLastMessageAsRead","markMessagesAsRead","userId","userLastSeen","get","room","findOneById","fields","storeReadReceipts","findUnreadMessagesByRoomAndDate","markMessageAsReadBySender","message","unread","ts","setAsReadById","t","extraData","getConfig","getReadReceiptsExtraData","messages","Date","receipts","map","id","messageId","length","insertMany","e","error","getReceipts","findByMessageId","toArray","receipt","user","token","getVisitorByToken","username","name"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport { Subscriptions, Messages, Rooms, Users, LivechatVisitors } from '../../../../app/models/server';\nimport { ReadReceipts } from '../../../../app/models/server/raw';\nimport { settings } from '../../../../app/settings/server';\nimport { roomTypes } from '../../../../app/utils/server';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\n\n// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\nconst list = {};\nconst debounceByRoomId = function (fn) {\n\treturn function (roomId, ...args) {\n\t\tclearTimeout(list[roomId]);\n\t\tlist[roomId] = setTimeout(() => {\n\t\t\tfn.call(this, roomId, ...args);\n\t\t}, 2000);\n\t};\n};\n\nconst updateMessages = debounceByRoomId(\n\tMeteor.bindEnvironment(({ _id, lm }) => {\n\t\t// @TODO maybe store firstSubscription in room object so we don't need to call the above update method\n\t\tconst firstSubscription = Subscriptions.getMinimumLastSeenByRoomId(_id);\n\t\tif (!firstSubscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessages.setAsRead(_id, firstSubscription.ls);\n\n\t\tif (lm <= firstSubscription.ls) {\n\t\t\tRooms.setLastMessageAsRead(_id);\n\t\t}\n\t}),\n);\n\nexport const ReadReceipt = {\n\tmarkMessagesAsRead(roomId, userId, userLastSeen) {\n\t\tif (!settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = Rooms.findOneById(roomId, { fields: { lm: 1 } });\n\n\t\t// if users last seen is greadebounceByRoomIdter than room's last message, it means the user already have this room marked as read\n\t\tif (userLastSeen > room.lm) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (userLastSeen) {\n\t\t\tthis.storeReadReceipts(Messages.findUnreadMessagesByRoomAndDate(roomId, userLastSeen), roomId, userId);\n\t\t}\n\n\t\tupdateMessages(room);\n\t},\n\n\tmarkMessageAsReadBySender(message, roomId, userId) {\n\t\tif (!settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// this will usually happens if the message sender is the only one on the room\n\t\tconst firstSubscription = Subscriptions.getMinimumLastSeenByRoomId(roomId);\n\t\tif (firstSubscription && message.unread && message.ts < firstSubscription.ls) {\n\t\t\tMessages.setAsReadById(message._id, firstSubscription.ls);\n\t\t}\n\n\t\tconst room = Rooms.findOneById(roomId, { fields: { t: 1 } });\n\t\tconst extraData = roomTypes.getConfig(room.t).getReadReceiptsExtraData(message);\n\n\t\tthis.storeReadReceipts([{ _id: message._id }], roomId, userId, extraData);\n\t},\n\n\tasync storeReadReceipts(messages, roomId, userId, extraData = {}) {\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tconst ts = new Date();\n\t\t\tconst receipts = messages.map((message) => ({\n\t\t\t\t_id: Random.id(),\n\t\t\t\troomId,\n\t\t\t\tuserId,\n\t\t\t\tmessageId: message._id,\n\t\t\t\tts,\n\t\t\t\t...extraData,\n\t\t\t}));\n\n\t\t\tif (receipts.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait ReadReceipts.insertMany(receipts);\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error('Error inserting read receipts per user');\n\t\t\t}\n\t\t}\n\t},\n\n\tasync getReceipts(message) {\n\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\n\t\treturn receipts.map((receipt) => ({\n\t\t\t...receipt,\n\t\t\tuser: receipt.token\n\t\t\t\t? LivechatVisitors.getVisitorByToken(receipt.token, { fields: { username: 1, name: 1 } })\n\t\t\t\t: Users.findOneById(receipt.userId, { fields: { username: 1, name: 1 } }),\n\t\t}));\n\t},\n};\n"]},"sourceType":"module","hash":"b5ebf1a5fd8c97539e96e97afee81e4f63c009cd"}
