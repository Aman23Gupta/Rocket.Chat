{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/notifications/mobile.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/notifications/mobile.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/notifications/mobile.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/notifications/mobile.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/notifications/mobile.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  getPushData: () => getPushData,\n  shouldNotifyMobile: () => shouldNotifyMobile\n});\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet Subscriptions;\nmodule.link(\"../../../../models/server/raw\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nlet roomTypes;\nmodule.link(\"../../../../utils\", {\n  roomTypes(v) {\n    roomTypes = v;\n  }\n\n}, 3);\nconst CATEGORY_MESSAGE = 'MESSAGE';\nconst CATEGORY_MESSAGE_NOREPLY = 'MESSAGE_NOREPLY';\n\nfunction enableNotificationReplyButton(room, username) {\n  // Some users may have permission to send messages even on readonly rooms, but we're ok with false negatives here in exchange of better perfomance\n  if (room.ro === true) {\n    return false;\n  }\n\n  if (!room.muted) {\n    return true;\n  }\n\n  return !room.muted.includes(username);\n}\n\nfunction getPushData(_ref) {\n  return Promise.asyncApply(() => {\n    let {\n      room,\n      message,\n      userId,\n      senderUsername,\n      senderName,\n      notificationMessage,\n      receiver,\n      shouldOmitMessage = true\n    } = _ref;\n    const username = settings.get('Push_show_username_room') && settings.get('UI_Use_Real_Name') && senderName || senderUsername;\n    const lng = receiver.language || settings.get('Language') || 'en';\n    let messageText;\n\n    if (shouldOmitMessage && settings.get('Push_request_content_from_server')) {\n      messageText = TAPi18n.__('You_have_a_new_message', {\n        lng\n      });\n    } else if (!settings.get('Push_show_message')) {\n      messageText = TAPi18n.__('You_have_a_new_message', {\n        lng\n      });\n    } else {\n      messageText = notificationMessage;\n    }\n\n    return {\n      payload: _objectSpread({\n        sender: message.u,\n        senderName: username,\n        type: room.t,\n        name: settings.get('Push_show_username_room') ? room.name : '',\n        messageType: message.t,\n        tmid: message.tmid\n      }, message.t === 'e2e' && {\n        msg: message.msg\n      }),\n      roomName: settings.get('Push_show_username_room') && roomTypes.getConfig(room.t).isGroupChat(room) ? \"#\".concat(roomTypes.getRoomName(room.t, room)) : '',\n      username,\n      message: messageText,\n      badge: Promise.await(Subscriptions.getBadgeCount(userId)),\n      category: enableNotificationReplyButton(room, receiver.username) ? CATEGORY_MESSAGE : CATEGORY_MESSAGE_NOREPLY\n    };\n  });\n}\n\nfunction shouldNotifyMobile(_ref2) {\n  let {\n    disableAllMessageNotifications,\n    mobilePushNotifications,\n    hasMentionToAll,\n    isHighlighted,\n    hasMentionToUser,\n    hasReplyToThread,\n    roomType,\n    isThread\n  } = _ref2;\n\n  if (settings.get('Push_enable') !== true) {\n    return false;\n  }\n\n  if (disableAllMessageNotifications && mobilePushNotifications == null && !isHighlighted && !hasMentionToUser && !hasReplyToThread) {\n    return false;\n  }\n\n  if (mobilePushNotifications === 'nothing') {\n    return false;\n  }\n\n  if (!mobilePushNotifications) {\n    if (settings.get('Accounts_Default_User_Preferences_pushNotifications') === 'all' && (!isThread || hasReplyToThread)) {\n      return true;\n    }\n\n    if (settings.get('Accounts_Default_User_Preferences_pushNotifications') === 'nothing') {\n      return false;\n    }\n  }\n\n  return (roomType === 'd' || !disableAllMessageNotifications && hasMentionToAll || isHighlighted || mobilePushNotifications === 'all' || hasMentionToUser) && (!isThread || hasReplyToThread);\n}","map":{"version":3,"sources":["app/lib/server/functions/notifications/mobile.js"],"names":["_objectSpread","module","link","default","v","export","getPushData","shouldNotifyMobile","TAPi18n","settings","Subscriptions","roomTypes","CATEGORY_MESSAGE","CATEGORY_MESSAGE_NOREPLY","enableNotificationReplyButton","room","username","ro","muted","includes","message","userId","senderUsername","senderName","notificationMessage","receiver","shouldOmitMessage","get","lng","language","messageText","__","payload","sender","u","type","t","name","messageType","tmid","msg","roomName","getConfig","isGroupChat","getRoomName","badge","getBadgeCount","category","disableAllMessageNotifications","mobilePushNotifications","hasMentionToAll","isHighlighted","hasMentionToUser","hasReplyToThread","roomType","isThread"],"mappings":"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","sourcesContent":["import { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { settings } from '../../../../settings';\nimport { Subscriptions } from '../../../../models/server/raw';\nimport { roomTypes } from '../../../../utils';\n\nconst CATEGORY_MESSAGE = 'MESSAGE';\nconst CATEGORY_MESSAGE_NOREPLY = 'MESSAGE_NOREPLY';\n\nfunction enableNotificationReplyButton(room, username) {\n\t// Some users may have permission to send messages even on readonly rooms, but we're ok with false negatives here in exchange of better perfomance\n\tif (room.ro === true) {\n\t\treturn false;\n\t}\n\n\tif (!room.muted) {\n\t\treturn true;\n\t}\n\n\treturn !room.muted.includes(username);\n}\n\nexport async function getPushData({\n\troom,\n\tmessage,\n\tuserId,\n\tsenderUsername,\n\tsenderName,\n\tnotificationMessage,\n\treceiver,\n\tshouldOmitMessage = true,\n}) {\n\tconst username = (settings.get('Push_show_username_room') && settings.get('UI_Use_Real_Name') && senderName) || senderUsername;\n\n\tconst lng = receiver.language || settings.get('Language') || 'en';\n\n\tlet messageText;\n\tif (shouldOmitMessage && settings.get('Push_request_content_from_server')) {\n\t\tmessageText = TAPi18n.__('You_have_a_new_message', { lng });\n\t} else if (!settings.get('Push_show_message')) {\n\t\tmessageText = TAPi18n.__('You_have_a_new_message', { lng });\n\t} else {\n\t\tmessageText = notificationMessage;\n\t}\n\n\treturn {\n\t\tpayload: {\n\t\t\tsender: message.u,\n\t\t\tsenderName: username,\n\t\t\ttype: room.t,\n\t\t\tname: settings.get('Push_show_username_room') ? room.name : '',\n\t\t\tmessageType: message.t,\n\t\t\ttmid: message.tmid,\n\t\t\t...(message.t === 'e2e' && { msg: message.msg }),\n\t\t},\n\t\troomName:\n\t\t\tsettings.get('Push_show_username_room') && roomTypes.getConfig(room.t).isGroupChat(room)\n\t\t\t\t? `#${roomTypes.getRoomName(room.t, room)}`\n\t\t\t\t: '',\n\t\tusername,\n\t\tmessage: messageText,\n\t\tbadge: await Subscriptions.getBadgeCount(userId),\n\t\tcategory: enableNotificationReplyButton(room, receiver.username) ? CATEGORY_MESSAGE : CATEGORY_MESSAGE_NOREPLY,\n\t};\n}\n\nexport function shouldNotifyMobile({\n\tdisableAllMessageNotifications,\n\tmobilePushNotifications,\n\thasMentionToAll,\n\tisHighlighted,\n\thasMentionToUser,\n\thasReplyToThread,\n\troomType,\n\tisThread,\n}) {\n\tif (settings.get('Push_enable') !== true) {\n\t\treturn false;\n\t}\n\n\tif (disableAllMessageNotifications && mobilePushNotifications == null && !isHighlighted && !hasMentionToUser && !hasReplyToThread) {\n\t\treturn false;\n\t}\n\n\tif (mobilePushNotifications === 'nothing') {\n\t\treturn false;\n\t}\n\n\tif (!mobilePushNotifications) {\n\t\tif (settings.get('Accounts_Default_User_Preferences_pushNotifications') === 'all' && (!isThread || hasReplyToThread)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (settings.get('Accounts_Default_User_Preferences_pushNotifications') === 'nothing') {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn (\n\t\t(roomType === 'd' ||\n\t\t\t(!disableAllMessageNotifications && hasMentionToAll) ||\n\t\t\tisHighlighted ||\n\t\t\tmobilePushNotifications === 'all' ||\n\t\t\thasMentionToUser) &&\n\t\t(!isThread || hasReplyToThread)\n\t);\n}\n"]},"sourceType":"module","hash":"424775c4806e33bf8aad0195ccdec9b285b8f61f"}
