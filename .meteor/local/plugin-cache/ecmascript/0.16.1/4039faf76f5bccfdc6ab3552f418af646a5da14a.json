{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/gcm.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push/server/gcm.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/gcm.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push/server/gcm.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push/server/gcm.js"}},"code":"module.export({\n  sendGCM: () => sendGCM\n});\nlet gcm;\nmodule.link(\"node-gcm\", {\n  default(v) {\n    gcm = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 2);\n\nconst sendGCM = function (_ref) {\n  let {\n    userTokens,\n    notification,\n    _replaceToken,\n    _removeToken,\n    options\n  } = _ref;\n\n  if (typeof notification.gcm === 'object') {\n    notification = Object.assign({}, notification, notification.gcm);\n  } // Make sure userTokens are an array of strings\n\n\n  if (typeof userTokens === 'string') {\n    userTokens = [userTokens];\n  } // Check if any tokens in there to send\n\n\n  if (!userTokens.length) {\n    logger.debug('sendGCM no push tokens found');\n    return;\n  }\n\n  logger.debug('sendGCM', userTokens, notification); // Allow user to set payload\n\n  const data = notification.payload ? {\n    ejson: EJSON.stringify(notification.payload)\n  } : {};\n  data.title = notification.title;\n  data.message = notification.text; // Set image\n\n  if (notification.image != null) {\n    data.image = notification.image;\n  }\n\n  if (notification.android_channel_id != null) {\n    data.android_channel_id = notification.android_channel_id;\n  } else {\n    logger.debug('For devices running Android 8.0 or later you are required to provide an android_channel_id. See https://github.com/raix/push/issues/341 for more info');\n  } // Set extra details\n\n\n  if (notification.badge != null) {\n    data.msgcnt = notification.badge;\n  }\n\n  if (notification.sound != null) {\n    data.soundname = notification.sound;\n  }\n\n  if (notification.notId != null) {\n    data.notId = notification.notId;\n  }\n\n  if (notification.style != null) {\n    data.style = notification.style;\n  }\n\n  if (notification.summaryText != null) {\n    data.summaryText = notification.summaryText;\n  }\n\n  if (notification.picture != null) {\n    data.picture = notification.picture;\n  } // Action Buttons\n\n\n  if (notification.actions != null) {\n    data.actions = notification.actions;\n  } // Force Start\n\n\n  if (notification.forceStart != null) {\n    data['force-start'] = notification.forceStart;\n  }\n\n  if (notification.contentAvailable != null) {\n    data['content-available'] = notification.contentAvailable;\n  }\n\n  const message = new gcm.Message({\n    collapseKey: notification.from,\n    // Requires delivery of real-time messages to users while device is in Doze or app is in App Standby.\n    // https://developer.android.com/training/monitoring-device-state/doze-standby#exemption-cases\n    priority: 'high',\n    //    delayWhileIdle: true,\n    //    timeToLive: 4,\n    //    restricted_package_name: 'dk.gi2.app'\n    data\n  });\n  logger.debug(\"Create GCM Sender using \\\"\".concat(options.gcm.apiKey, \"\\\"\"));\n  const sender = new gcm.Sender(options.gcm.apiKey);\n  userTokens.forEach(value => logger.debug(\"A:Send message to: \".concat(value)));\n  const userToken = userTokens.length === 1 ? userTokens[0] : null;\n  sender.send(message, userTokens, 5, function (err, result) {\n    if (err) {\n      logger.debug({\n        msg: 'ANDROID ERROR: result of sender',\n        result\n      });\n      return;\n    }\n\n    if (result === null) {\n      logger.debug('ANDROID: Result of sender is null');\n      return;\n    }\n\n    logger.debug({\n      msg: 'ANDROID: Result of sender',\n      result\n    });\n\n    if (result.canonical_ids === 1 && userToken) {\n      // This is an old device, token is replaced\n      try {\n        _replaceToken({\n          gcm: userToken\n        }, {\n          gcm: result.results[0].registration_id\n        });\n      } catch (err) {\n        logger.error({\n          msg: 'Error replacing token',\n          err\n        });\n      }\n    } // We cant send to that token - might not be registered\n    // ask the user to remove the token from the list\n\n\n    if (result.failure !== 0 && userToken) {\n      // This is an old device, token is replaced\n      try {\n        _removeToken({\n          gcm: userToken\n        });\n      } catch (err) {\n        logger.error({\n          msg: 'Error removing token',\n          err\n        });\n      }\n    }\n  });\n};","map":{"version":3,"sources":["app/push/server/gcm.js"],"names":["module","export","sendGCM","gcm","link","default","v","EJSON","logger","userTokens","notification","_replaceToken","_removeToken","options","Object","assign","length","debug","data","payload","ejson","stringify","title","message","text","image","android_channel_id","badge","msgcnt","sound","soundname","notId","style","summaryText","picture","actions","forceStart","contentAvailable","Message","collapseKey","from","priority","apiKey","sender","Sender","forEach","value","userToken","send","err","result","msg","canonical_ids","results","registration_id","error","failure"],"mappings":"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","sourcesContent":["import gcm from 'node-gcm';\nimport { EJSON } from 'meteor/ejson';\n\nimport { logger } from './logger';\n\nexport const sendGCM = function ({ userTokens, notification, _replaceToken, _removeToken, options }) {\n\tif (typeof notification.gcm === 'object') {\n\t\tnotification = Object.assign({}, notification, notification.gcm);\n\t}\n\n\t// Make sure userTokens are an array of strings\n\tif (typeof userTokens === 'string') {\n\t\tuserTokens = [userTokens];\n\t}\n\n\t// Check if any tokens in there to send\n\tif (!userTokens.length) {\n\t\tlogger.debug('sendGCM no push tokens found');\n\t\treturn;\n\t}\n\n\tlogger.debug('sendGCM', userTokens, notification);\n\n\t// Allow user to set payload\n\tconst data = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n\tdata.title = notification.title;\n\tdata.message = notification.text;\n\n\t// Set image\n\tif (notification.image != null) {\n\t\tdata.image = notification.image;\n\t}\n\n\tif (notification.android_channel_id != null) {\n\t\tdata.android_channel_id = notification.android_channel_id;\n\t} else {\n\t\tlogger.debug(\n\t\t\t'For devices running Android 8.0 or later you are required to provide an android_channel_id. See https://github.com/raix/push/issues/341 for more info',\n\t\t);\n\t}\n\n\t// Set extra details\n\tif (notification.badge != null) {\n\t\tdata.msgcnt = notification.badge;\n\t}\n\tif (notification.sound != null) {\n\t\tdata.soundname = notification.sound;\n\t}\n\tif (notification.notId != null) {\n\t\tdata.notId = notification.notId;\n\t}\n\tif (notification.style != null) {\n\t\tdata.style = notification.style;\n\t}\n\tif (notification.summaryText != null) {\n\t\tdata.summaryText = notification.summaryText;\n\t}\n\tif (notification.picture != null) {\n\t\tdata.picture = notification.picture;\n\t}\n\n\t// Action Buttons\n\tif (notification.actions != null) {\n\t\tdata.actions = notification.actions;\n\t}\n\n\t// Force Start\n\tif (notification.forceStart != null) {\n\t\tdata['force-start'] = notification.forceStart;\n\t}\n\n\tif (notification.contentAvailable != null) {\n\t\tdata['content-available'] = notification.contentAvailable;\n\t}\n\n\tconst message = new gcm.Message({\n\t\tcollapseKey: notification.from,\n\t\t// Requires delivery of real-time messages to users while device is in Doze or app is in App Standby.\n\t\t// https://developer.android.com/training/monitoring-device-state/doze-standby#exemption-cases\n\t\tpriority: 'high',\n\t\t//    delayWhileIdle: true,\n\t\t//    timeToLive: 4,\n\t\t//    restricted_package_name: 'dk.gi2.app'\n\t\tdata,\n\t});\n\n\tlogger.debug(`Create GCM Sender using \"${options.gcm.apiKey}\"`);\n\tconst sender = new gcm.Sender(options.gcm.apiKey);\n\n\tuserTokens.forEach((value) => logger.debug(`A:Send message to: ${value}`));\n\n\tconst userToken = userTokens.length === 1 ? userTokens[0] : null;\n\n\tsender.send(message, userTokens, 5, function (err, result) {\n\t\tif (err) {\n\t\t\tlogger.debug({ msg: 'ANDROID ERROR: result of sender', result });\n\t\t\treturn;\n\t\t}\n\n\t\tif (result === null) {\n\t\t\tlogger.debug('ANDROID: Result of sender is null');\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug({ msg: 'ANDROID: Result of sender', result });\n\n\t\tif (result.canonical_ids === 1 && userToken) {\n\t\t\t// This is an old device, token is replaced\n\t\t\ttry {\n\t\t\t\t_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error({ msg: 'Error replacing token', err });\n\t\t\t}\n\t\t}\n\t\t// We cant send to that token - might not be registered\n\t\t// ask the user to remove the token from the list\n\t\tif (result.failure !== 0 && userToken) {\n\t\t\t// This is an old device, token is replaced\n\t\t\ttry {\n\t\t\t\t_removeToken({ gcm: userToken });\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error({ msg: 'Error removing token', err });\n\t\t\t}\n\t\t}\n\t});\n};\n"]},"sourceType":"module","hash":"4039faf76f5bccfdc6ab3552f418af646a5da14a"}
