{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Subscriptions.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/Subscriptions.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Subscriptions.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/Subscriptions.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/Subscriptions.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Subscriptions: () => Subscriptions\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet mem;\nmodule.link(\"mem\", {\n  default(v) {\n    mem = v;\n  }\n\n}, 3);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 4);\nlet Rooms;\nmodule.link(\"./Rooms\", {\n  default(v) {\n    Rooms = v;\n  }\n\n}, 5);\nlet Users;\nmodule.link(\"./Users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 6);\nlet getDefaultSubscriptionPref;\nmodule.link(\"../../../utils/lib/getDefaultSubscriptionPref\", {\n  getDefaultSubscriptionPref(v) {\n    getDefaultSubscriptionPref = v;\n  }\n\n}, 7);\n\nclass Subscriptions extends Base {\n  constructor() {\n    super(...arguments);\n    this.cachedFindByUserId = mem(this.findByUserId.bind(this), {\n      maxAge: 5000\n    });\n    this.tryEnsureIndex({\n      rid: 1\n    });\n    this.tryEnsureIndex({\n      rid: 1,\n      ls: 1\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      'u._id': 1\n    }, {\n      unique: 1\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      'u._id': 1,\n      'open': 1\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      'u.username': 1\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      'alert': 1,\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      rid: 1,\n      roles: 1\n    });\n    this.tryEnsureIndex({\n      'u._id': 1,\n      'name': 1,\n      't': 1\n    });\n    this.tryEnsureIndex({\n      name: 1,\n      t: 1\n    });\n    this.tryEnsureIndex({\n      open: 1\n    });\n    this.tryEnsureIndex({\n      alert: 1\n    });\n    this.tryEnsureIndex({\n      ts: 1\n    });\n    this.tryEnsureIndex({\n      ls: 1\n    });\n    this.tryEnsureIndex({\n      desktopNotifications: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      mobilePushNotifications: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      emailNotifications: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      autoTranslate: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      autoTranslateLanguage: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      'userHighlights.0': 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      prid: 1\n    });\n    this.tryEnsureIndex({\n      'u._id': 1,\n      'open': 1,\n      'department': 1\n    });\n    const collectionObj = this.model.rawCollection();\n    this.distinct = Meteor.wrapAsync(collectionObj.distinct, collectionObj);\n  }\n\n  findByRoomIds(roomIds) {\n    const query = {\n      rid: {\n        $in: roomIds\n      }\n    };\n    const options = {\n      fields: {\n        'u._id': 1,\n        'rid': 1\n      }\n    };\n    return this._db.find(query, options);\n  }\n\n  removeByVisitorToken(token) {\n    const query = {\n      'v.token': token\n    };\n    this.remove(query);\n  }\n\n  updateAutoTranslateById(_id, autoTranslate) {\n    const query = {\n      _id\n    };\n    let update;\n\n    if (autoTranslate) {\n      update = {\n        $set: {\n          autoTranslate\n        }\n      };\n    } else {\n      update = {\n        $unset: {\n          autoTranslate: 1\n        }\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  updateAutoTranslateLanguageById(_id, autoTranslateLanguage) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        autoTranslateLanguage\n      }\n    };\n    return this.update(query, update);\n  }\n\n  getAutoTranslateLanguagesByRoomAndNotUser(rid, userId) {\n    const query = {\n      rid,\n      'u._id': {\n        $ne: userId\n      },\n      'autoTranslate': true\n    };\n    return this.distinct('autoTranslateLanguage', query);\n  }\n\n  roleBaseQuery(userId, scope) {\n    if (scope == null) {\n      return;\n    }\n\n    const query = {\n      'u._id': userId\n    };\n\n    if (!_.isUndefined(scope)) {\n      query.rid = scope;\n    }\n\n    return query;\n  }\n\n  findByRidWithoutE2EKey(rid, options) {\n    const query = {\n      rid,\n      E2EKey: {\n        $exists: false\n      }\n    };\n    return this.find(query, options);\n  }\n\n  updateAudioNotificationValueById(_id, audioNotificationValue) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        audioNotificationValue\n      }\n    };\n    return this.update(query, update);\n  }\n\n  clearAudioNotificationValueById(_id) {\n    const query = {\n      _id\n    };\n    const update = {\n      $unset: {\n        audioNotificationValue: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateNotificationsPrefById(_id, notificationPref, notificationField, notificationPrefOrigin) {\n    const query = {\n      _id\n    };\n    const update = {};\n\n    if (notificationPref === null) {\n      update.$unset = {\n        [notificationField]: 1,\n        [notificationPrefOrigin]: 1\n      };\n    } else {\n      update.$set = {\n        [notificationField]: notificationPref.value,\n        [notificationPrefOrigin]: notificationPref.origin\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  updateUnreadAlertById(_id, unreadAlert) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        unreadAlert\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateDisableNotificationsById(_id, disableNotifications) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        disableNotifications\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateHideUnreadStatusById(_id, hideUnreadStatus) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        hideUnreadStatus\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateMuteGroupMentions(_id, muteGroupMentions) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        muteGroupMentions\n      }\n    };\n    return this.update(query, update);\n  }\n\n  changeDepartmentByRoomId(rid, department) {\n    const query = {\n      rid\n    };\n    const update = {\n      $set: {\n        department\n      }\n    };\n    this.update(query, update);\n  }\n\n  findAlwaysNotifyDesktopUsersByRoomId(roomId) {\n    const query = {\n      rid: roomId,\n      desktopNotifications: 'all'\n    };\n    return this.find(query);\n  }\n\n  findDontNotifyDesktopUsersByRoomId(roomId) {\n    const query = {\n      rid: roomId,\n      desktopNotifications: 'nothing'\n    };\n    return this.find(query);\n  }\n\n  findAlwaysNotifyMobileUsersByRoomId(roomId) {\n    const query = {\n      rid: roomId,\n      mobilePushNotifications: 'all'\n    };\n    return this.find(query);\n  }\n\n  findDontNotifyMobileUsersByRoomId(roomId) {\n    const query = {\n      rid: roomId,\n      mobilePushNotifications: 'nothing'\n    };\n    return this.find(query);\n  }\n\n  findWithSendEmailByRoomId(roomId) {\n    const query = {\n      rid: roomId,\n      emailNotifications: {\n        $exists: true\n      }\n    };\n    return this.find(query, {\n      fields: {\n        emailNotifications: 1,\n        u: 1\n      }\n    });\n  }\n\n  resetUserE2EKey(userId) {\n    this.update({\n      'u._id': userId\n    }, {\n      $unset: {\n        E2EKey: ''\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  findByUserIdWithoutE2E(userId, options) {\n    const query = {\n      'u._id': userId,\n      'E2EKey': {\n        $exists: false\n      }\n    };\n    return this.find(query, options);\n  }\n\n  updateGroupE2EKey(_id, key) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        E2EKey: key\n      }\n    };\n    this.update(query, update);\n    return this.findOne({\n      _id\n    });\n  }\n\n  findUsersInRoles(roles, scope, options) {\n    roles = [].concat(roles);\n    const query = {\n      roles: {\n        $in: roles\n      }\n    };\n\n    if (scope) {\n      query.rid = scope;\n    }\n\n    const subscriptions = this.find(query).fetch();\n\n    const users = _.compact(_.map(subscriptions, function (subscription) {\n      if (typeof subscription.u !== 'undefined' && typeof subscription.u._id !== 'undefined') {\n        return subscription.u._id;\n      }\n    }));\n\n    return Users.find({\n      _id: {\n        $in: users\n      }\n    }, options);\n  } // FIND ONE\n\n\n  findOneByRoomIdAndUserId(roomId, userId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByRoomIdAndUsername(roomId, username, options) {\n    const query = {\n      'rid': roomId,\n      'u.username': username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByRoomNameAndUserId(roomName, userId) {\n    const query = {\n      'name': roomName,\n      'u._id': userId\n    };\n    return this.findOne(query);\n  } // FIND\n\n\n  findByUserId(userId, options) {\n    const query = {\n      'u._id': userId\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdExceptType(userId, typeException, options) {\n    const query = {\n      'u._id': userId,\n      't': {\n        $ne: typeException\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdAndRoomIds(userId, roomIds, options) {\n    const query = {\n      'u._id': userId,\n      'rid': {\n        $in: roomIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdAndType(userId, type, options) {\n    const query = {\n      'u._id': userId,\n      't': type\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdAndTypes(userId, types, options) {\n    const query = {\n      'u._id': userId,\n      't': {\n        $in: types\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdAndRoles(userId, roles, options) {\n    const query = {\n      'u._id': userId,\n      'roles': {\n        $in: roles\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUserIdUpdatedAfter(userId, updatedAt, options) {\n    const query = {\n      'u._id': userId,\n      '_updatedAt': {\n        $gt: updatedAt\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomIdAndRoles(roomId, roles, options) {\n    roles = [].concat(roles);\n    const query = {\n      rid: roomId,\n      roles: {\n        $in: roles\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByType(types, options) {\n    const query = {\n      t: {\n        $in: types\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByTypeAndUserId(type, userId, options) {\n    const query = {\n      't': type,\n      'u._id': userId\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomId(roomId, options) {\n    const query = {\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomIdAndNotUserId(roomId, userId) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $ne: userId\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomWithUserHighlights(roomId, options) {\n    const query = {\n      'rid': roomId,\n      'userHighlights.0': {\n        $exists: true\n      }\n    };\n    return this.find(query, options);\n  }\n\n  getLastSeen() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fields: {\n        _id: 0,\n        ls: 1\n      }\n    };\n    options.sort = {\n      ls: -1\n    };\n    options.limit = 1;\n    const [subscription] = this.find({}, options).fetch();\n    return subscription === null || subscription === void 0 ? void 0 : subscription.ls;\n  }\n\n  findByRoomIdAndUserIds(roomId, userIds, options) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $in: userIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomIdAndUserIdsOrAllMessages(roomId, userIds) {\n    const query = {\n      rid: roomId,\n      $or: [{\n        'u._id': {\n          $in: userIds\n        }\n      }, {\n        emailNotifications: 'all'\n      }]\n    };\n    return this.find(query);\n  }\n\n  findByRoomIdWhenUserIdExists(rid, options) {\n    const query = {\n      rid,\n      'u._id': {\n        $exists: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomIdWhenUsernameExists(rid, options) {\n    const query = {\n      rid,\n      'u.username': {\n        $exists: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findUnreadByUserId(userId) {\n    const query = {\n      'u._id': userId,\n      'unread': {\n        $gt: 0\n      }\n    };\n    return this.find(query, {\n      fields: {\n        unread: 1\n      }\n    });\n  }\n\n  getMinimumLastSeenByRoomId(rid) {\n    return this.db.findOne({\n      rid,\n      ls: {\n        $exists: true\n      }\n    }, {\n      sort: {\n        ls: 1\n      },\n      fields: {\n        ls: 1\n      }\n    });\n  } // UPDATE\n\n\n  archiveByRoomId(roomId) {\n    const query = {\n      rid: roomId\n    };\n    const update = {\n      $set: {\n        alert: false,\n        open: false,\n        archived: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  unarchiveByRoomId(roomId) {\n    const query = {\n      rid: roomId\n    };\n    const update = {\n      $set: {\n        alert: false,\n        open: true,\n        archived: false\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  hideByRoomIdAndUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        alert: false,\n        open: false\n      }\n    };\n    return this.update(query, update);\n  }\n\n  openByRoomIdAndUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        open: true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAsReadByRoomIdAndUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        open: true,\n        alert: false,\n        unread: 0,\n        userMentions: 0,\n        groupMentions: 0,\n        ls: new Date()\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAsUnreadByRoomIdAndUserId(roomId, userId, firstMessageUnreadTimestamp) {\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        open: true,\n        alert: true,\n        ls: firstMessageUnreadTimestamp\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setCustomFieldsDirectMessagesByUserId(userId, fields) {\n    const query = {\n      'u._id': userId,\n      't': 'd'\n    };\n    const update = {\n      $set: {\n        customFields: fields\n      }\n    };\n    const options = {\n      multi: true\n    };\n    return this.update(query, update, options);\n  }\n\n  setFavoriteByRoomIdAndUserId(roomId, userId, favorite) {\n    if (favorite == null) {\n      favorite = true;\n    }\n\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        f: favorite\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateNameAndAlertByRoomId(roomId, name, fname) {\n    const query = {\n      rid: roomId\n    };\n    const update = {\n      $set: {\n        name,\n        fname,\n        alert: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateDisplayNameByRoomId(roomId, fname) {\n    const query = {\n      rid: roomId\n    };\n    const update = {\n      $set: {\n        fname,\n        name: fname\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateFnameByRoomId(rid, fname) {\n    const query = {\n      rid\n    };\n    const update = {\n      $set: {\n        fname\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateNameAndFnameById(_id, name, fname) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        name,\n        fname\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setUserUsernameByUserId(userId, username) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'u.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setNameForDirectRoomsWithOldName(oldName, name) {\n    const query = {\n      name: oldName,\n      t: 'd'\n    };\n    const update = {\n      $set: {\n        name\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateDirectNameAndFnameByName(name, newName, newFname) {\n    const query = {\n      name,\n      t: 'd'\n    };\n    const update = {\n      $set: _objectSpread(_objectSpread({}, newName && {\n        name: newName\n      }), newFname && {\n        fname: newFname\n      })\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  incUnreadForRoomIdExcludingUserIds(roomId, userIds, inc) {\n    if (inc == null) {\n      inc = 1;\n    }\n\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $nin: userIds\n      }\n    };\n    const update = {\n      $set: {\n        alert: true,\n        open: true\n      },\n      $inc: {\n        unread: inc\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  incGroupMentionsAndUnreadForRoomIdExcludingUserId(roomId, userId) {\n    let incGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let incUnread = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $ne: userId\n      }\n    };\n    const update = {\n      $set: {\n        alert: true,\n        open: true\n      },\n      $inc: {\n        unread: incUnread,\n        groupMentions: incGroup\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  incUserMentionsAndUnreadForRoomIdAndUserIds(roomId, userIds) {\n    let incUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let incUnread = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $in: userIds\n      }\n    };\n    const update = {\n      $set: {\n        alert: true,\n        open: true\n      },\n      $inc: {\n        unread: incUnread,\n        userMentions: incUser\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  ignoreUser(_ref) {\n    let {\n      _id,\n      ignoredUser: ignored,\n      ignore = true\n    } = _ref;\n    const query = {\n      _id\n    };\n    const update = {};\n\n    if (ignore) {\n      update.$addToSet = {\n        ignored\n      };\n    } else {\n      update.$pull = {\n        ignored\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  setAlertForRoomIdExcludingUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $ne: userId\n      },\n      'alert': {\n        $ne: true\n      }\n    };\n    const update = {\n      $set: {\n        alert: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setOpenForRoomIdExcludingUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $ne: userId\n      },\n      'open': {\n        $ne: true\n      }\n    };\n    const update = {\n      $set: {\n        open: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setAlertForRoomIdAndUserIds(roomId, uids) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $in: uids\n      },\n      'alert': {\n        $ne: true\n      }\n    };\n    const update = {\n      $set: {\n        alert: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setOpenForRoomIdAndUserIds(roomId, uids) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $in: uids\n      },\n      'open': {\n        $ne: true\n      }\n    };\n    const update = {\n      $set: {\n        open: true\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setLastReplyForRoomIdAndUserIds(roomId, uids, lr) {\n    const query = {\n      'rid': roomId,\n      'u._id': {\n        $in: uids\n      }\n    };\n    const update = {\n      $set: {\n        lr\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setBlockedByRoomId(rid, blocked, blocker) {\n    const query = {\n      rid,\n      'u._id': blocked\n    };\n    const update = {\n      $set: {\n        blocked: true\n      }\n    };\n    const query2 = {\n      rid,\n      'u._id': blocker\n    };\n    const update2 = {\n      $set: {\n        blocker: true\n      }\n    };\n    return this.update(query, update) && this.update(query2, update2);\n  }\n\n  unsetBlockedByRoomId(rid, blocked, blocker) {\n    const query = {\n      rid,\n      'u._id': blocked\n    };\n    const update = {\n      $unset: {\n        blocked: 1\n      }\n    };\n    const query2 = {\n      rid,\n      'u._id': blocker\n    };\n    const update2 = {\n      $unset: {\n        blocker: 1\n      }\n    };\n    return this.update(query, update) && this.update(query2, update2);\n  }\n\n  updateCustomFieldsByRoomId(rid, cfields) {\n    const query = {\n      rid\n    };\n    const customFields = cfields || {};\n    const update = {\n      $set: {\n        customFields\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateTypeByRoomId(roomId, type) {\n    const query = {\n      rid: roomId\n    };\n    const update = {\n      $set: {\n        t: type\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  addRoleById(_id, role) {\n    const query = {\n      _id\n    };\n    const update = {\n      $addToSet: {\n        roles: role\n      }\n    };\n    return this.update(query, update);\n  }\n\n  removeRoleById(_id, role) {\n    const query = {\n      _id\n    };\n    const update = {\n      $pull: {\n        roles: role\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setArchivedByUsername(username, archived) {\n    const query = {\n      t: 'd',\n      name: username\n    };\n    const update = {\n      $set: {\n        archived\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  clearNotificationUserPreferences(userId, notificationField, notificationOriginField) {\n    const query = {\n      'u._id': userId,\n      [notificationOriginField]: 'user'\n    };\n    const update = {\n      $unset: {\n        [notificationOriginField]: 1,\n        [notificationField]: 1\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateNotificationUserPreferences(userId, userPref, notificationField, notificationOriginField) {\n    const query = {\n      'u._id': userId,\n      [notificationOriginField]: {\n        $ne: 'subscription'\n      }\n    };\n    const update = {\n      $set: {\n        [notificationField]: userPref,\n        [notificationOriginField]: 'user'\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateUserHighlights(userId, userHighlights) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        userHighlights\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateDirectFNameByName(name, fname) {\n    const query = {\n      t: 'd',\n      name\n    };\n    let update;\n\n    if (fname) {\n      update = {\n        $set: {\n          fname\n        }\n      };\n    } else {\n      update = {\n        $unset: {\n          fname: true\n        }\n      };\n    }\n\n    return this.update(query, update, {\n      multi: true\n    });\n  } // INSERT\n\n\n  createWithRoomAndUser(room, user, extraData) {\n    const subscription = _objectSpread(_objectSpread({\n      open: false,\n      alert: false,\n      unread: 0,\n      userMentions: 0,\n      groupMentions: 0,\n      ts: room.ts,\n      rid: room._id,\n      name: room.name,\n      fname: room.fname,\n      customFields: room.customFields,\n      t: room.t,\n      u: {\n        _id: user._id,\n        username: user.username,\n        name: user.name\n      }\n    }, getDefaultSubscriptionPref(user)), extraData);\n\n    if (room.prid) {\n      subscription.prid = room.prid;\n    }\n\n    const result = this.insert(subscription);\n    Rooms.incUsersCountById(room._id);\n\n    if (!['d', 'l'].includes(room.t)) {\n      Users.addRoomByUserId(user._id, room._id);\n    }\n\n    return result;\n  } // REMOVE\n\n\n  removeByUserId(userId) {\n    const query = {\n      'u._id': userId\n    };\n    const roomIds = this.findByUserId(userId).map(s => s.rid);\n    const result = this.remove(query);\n\n    if (Match.test(result, Number) && result > 0) {\n      Rooms.incUsersCountNotDMsByIds(roomIds, -1);\n    }\n\n    Users.removeAllRoomsByUserId(userId);\n    return result;\n  }\n\n  removeByRoomId(roomId) {\n    const query = {\n      rid: roomId\n    };\n    const result = this.remove(query);\n\n    if (Match.test(result, Number) && result > 0) {\n      Rooms.incUsersCountById(roomId, -result);\n    }\n\n    Users.removeRoomByRoomId(roomId);\n    return result;\n  }\n\n  removeByRoomIdAndUserId(roomId, userId) {\n    const query = {\n      'rid': roomId,\n      'u._id': userId\n    };\n    const result = this.remove(query);\n\n    if (Match.test(result, Number) && result > 0) {\n      Rooms.incUsersCountById(roomId, -result);\n    }\n\n    Users.removeRoomByUserId(userId, roomId);\n    return result;\n  }\n\n  removeByRoomIds(rids) {\n    const result = this.remove({\n      rid: {\n        $in: rids\n      }\n    });\n    Users.removeRoomByRoomIds(rids);\n    return result;\n  }\n\n  removeByRoomIdsAndUserId(rids, userId) {\n    const result = this.remove({\n      'rid': {\n        $in: rids\n      },\n      'u._id': userId\n    });\n\n    if (Match.test(result, Number) && result > 0) {\n      Rooms.incUsersCountByIds(rids, -1);\n    }\n\n    Users.removeRoomsByRoomIdsAndUserId(rids, userId);\n    return result;\n  } // //////////////////////////////////////////////////////////////////\n  // threads\n\n\n  addUnreadThreadByRoomIdAndUserIds(rid, users, tmid) {\n    let {\n      groupMention = false,\n      userMention = false\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (!users) {\n      return;\n    }\n\n    return this.update({\n      'u._id': {\n        $in: users\n      },\n      rid\n    }, {\n      $addToSet: _objectSpread(_objectSpread({\n        tunread: tmid\n      }, groupMention && {\n        tunreadGroup: tmid\n      }), userMention && {\n        tunreadUser: tmid\n      })\n    }, {\n      multi: true\n    });\n  }\n\n  removeUnreadThreadByRoomIdAndUserId(rid, userId, tmid) {\n    let clearAlert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const update = {\n      $pull: {\n        tunread: tmid,\n        tunreadGroup: tmid,\n        tunreadUser: tmid\n      }\n    };\n\n    if (clearAlert) {\n      update.$set = {\n        alert: false\n      };\n    }\n\n    return this.update({\n      'u._id': userId,\n      rid\n    }, update);\n  }\n\n  removeAllUnreadThreadsByRoomIdAndUserId(rid, userId) {\n    const query = {\n      rid,\n      'u._id': userId\n    };\n    const update = {\n      $unset: {\n        tunread: 1,\n        tunreadUser: 1,\n        tunreadGroup: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  removeUnreadThreadsByRoomId(rid, tunread) {\n    const query = {\n      rid,\n      tunread: {\n        $in: tunread\n      }\n    };\n    const update = {\n      $pullAll: {\n        tunread,\n        tunreadUser: tunread,\n        tunreadGroup: tunread\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setOnHold(roomId) {\n    return this.update({\n      rid: roomId\n    }, {\n      $set: {\n        onHold: true\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  unsetOnHold(roomId) {\n    return this.update({\n      rid: roomId\n    }, {\n      $unset: {\n        onHold: 1\n      }\n    }, {\n      multi: true\n    });\n  }\n\n}\n\nmodule.exportDefault(new Subscriptions('subscription', true));","map":{"version":3,"sources":["app/models/server/models/Subscriptions.js"],"names":["_objectSpread","module","link","default","v","export","Subscriptions","Meteor","Match","_","mem","Base","Rooms","Users","getDefaultSubscriptionPref","constructor","cachedFindByUserId","findByUserId","bind","maxAge","tryEnsureIndex","rid","ls","unique","roles","name","t","open","alert","ts","desktopNotifications","sparse","mobilePushNotifications","emailNotifications","autoTranslate","autoTranslateLanguage","prid","collectionObj","model","rawCollection","distinct","wrapAsync","findByRoomIds","roomIds","query","$in","options","fields","_db","find","removeByVisitorToken","token","remove","updateAutoTranslateById","_id","update","$set","$unset","updateAutoTranslateLanguageById","getAutoTranslateLanguagesByRoomAndNotUser","userId","$ne","roleBaseQuery","scope","isUndefined","findByRidWithoutE2EKey","E2EKey","$exists","updateAudioNotificationValueById","audioNotificationValue","clearAudioNotificationValueById","updateNotificationsPrefById","notificationPref","notificationField","notificationPrefOrigin","value","origin","updateUnreadAlertById","unreadAlert","updateDisableNotificationsById","disableNotifications","updateHideUnreadStatusById","hideUnreadStatus","updateMuteGroupMentions","muteGroupMentions","changeDepartmentByRoomId","department","findAlwaysNotifyDesktopUsersByRoomId","roomId","findDontNotifyDesktopUsersByRoomId","findAlwaysNotifyMobileUsersByRoomId","findDontNotifyMobileUsersByRoomId","findWithSendEmailByRoomId","u","resetUserE2EKey","multi","findByUserIdWithoutE2E","updateGroupE2EKey","key","findOne","findUsersInRoles","concat","subscriptions","fetch","users","compact","map","subscription","findOneByRoomIdAndUserId","findOneByRoomIdAndUsername","username","findOneByRoomNameAndUserId","roomName","findByUserIdExceptType","typeException","findByUserIdAndRoomIds","findByUserIdAndType","type","findByUserIdAndTypes","types","findByUserIdAndRoles","findByUserIdUpdatedAfter","updatedAt","$gt","findByRoomIdAndRoles","findByType","findByTypeAndUserId","findByRoomId","findByRoomIdAndNotUserId","findByRoomWithUserHighlights","getLastSeen","sort","limit","findByRoomIdAndUserIds","userIds","findByRoomIdAndUserIdsOrAllMessages","$or","findByRoomIdWhenUserIdExists","findByRoomIdWhenUsernameExists","findUnreadByUserId","unread","getMinimumLastSeenByRoomId","db","archiveByRoomId","archived","unarchiveByRoomId","hideByRoomIdAndUserId","openByRoomIdAndUserId","setAsReadByRoomIdAndUserId","userMentions","groupMentions","Date","setAsUnreadByRoomIdAndUserId","firstMessageUnreadTimestamp","setCustomFieldsDirectMessagesByUserId","customFields","setFavoriteByRoomIdAndUserId","favorite","f","updateNameAndAlertByRoomId","fname","updateDisplayNameByRoomId","updateFnameByRoomId","updateNameAndFnameById","setUserUsernameByUserId","setNameForDirectRoomsWithOldName","oldName","updateDirectNameAndFnameByName","newName","newFname","incUnreadForRoomIdExcludingUserIds","inc","$nin","$inc","incGroupMentionsAndUnreadForRoomIdExcludingUserId","incGroup","incUnread","incUserMentionsAndUnreadForRoomIdAndUserIds","incUser","ignoreUser","ignoredUser","ignored","ignore","$addToSet","$pull","setAlertForRoomIdExcludingUserId","setOpenForRoomIdExcludingUserId","setAlertForRoomIdAndUserIds","uids","setOpenForRoomIdAndUserIds","setLastReplyForRoomIdAndUserIds","lr","setBlockedByRoomId","blocked","blocker","query2","update2","unsetBlockedByRoomId","updateCustomFieldsByRoomId","cfields","updateTypeByRoomId","addRoleById","role","removeRoleById","setArchivedByUsername","clearNotificationUserPreferences","notificationOriginField","updateNotificationUserPreferences","userPref","updateUserHighlights","userHighlights","updateDirectFNameByName","createWithRoomAndUser","room","user","extraData","result","insert","incUsersCountById","includes","addRoomByUserId","removeByUserId","s","test","Number","incUsersCountNotDMsByIds","removeAllRoomsByUserId","removeByRoomId","removeRoomByRoomId","removeByRoomIdAndUserId","removeRoomByUserId","removeByRoomIds","rids","removeRoomByRoomIds","removeByRoomIdsAndUserId","incUsersCountByIds","removeRoomsByRoomIdsAndUserId","addUnreadThreadByRoomIdAndUserIds","tmid","groupMention","userMention","tunread","tunreadGroup","tunreadUser","removeUnreadThreadByRoomIdAndUserId","clearAlert","removeAllUnreadThreadsByRoomIdAndUserId","removeUnreadThreadsByRoomId","$pullAll","setOnHold","onHold","unsetOnHold","exportDefault"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match } from 'meteor/check';\nimport _ from 'underscore';\nimport mem from 'mem';\n\nimport { Base } from './_Base';\nimport Rooms from './Rooms';\nimport Users from './Users';\nimport { getDefaultSubscriptionPref } from '../../../utils/lib/getDefaultSubscriptionPref';\n\nexport class Subscriptions extends Base {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.tryEnsureIndex({ rid: 1 });\n\t\tthis.tryEnsureIndex({ rid: 1, ls: 1 });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 'u._id': 1 }, { unique: 1 });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 'u._id': 1, 'open': 1 });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 'u.username': 1 });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 'alert': 1, 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ rid: 1, roles: 1 });\n\t\tthis.tryEnsureIndex({ 'u._id': 1, 'name': 1, 't': 1 });\n\t\tthis.tryEnsureIndex({ name: 1, t: 1 });\n\t\tthis.tryEnsureIndex({ open: 1 });\n\t\tthis.tryEnsureIndex({ alert: 1 });\n\t\tthis.tryEnsureIndex({ ts: 1 });\n\t\tthis.tryEnsureIndex({ ls: 1 });\n\t\tthis.tryEnsureIndex({ desktopNotifications: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ mobilePushNotifications: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ emailNotifications: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ autoTranslate: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ autoTranslateLanguage: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ 'userHighlights.0': 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ prid: 1 });\n\t\tthis.tryEnsureIndex({ 'u._id': 1, 'open': 1, 'department': 1 });\n\n\t\tconst collectionObj = this.model.rawCollection();\n\t\tthis.distinct = Meteor.wrapAsync(collectionObj.distinct, collectionObj);\n\t}\n\n\tfindByRoomIds(roomIds) {\n\t\tconst query = {\n\t\t\trid: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t'u._id': 1,\n\t\t\t\t'rid': 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this._db.find(query, options);\n\t}\n\n\tremoveByVisitorToken(token) {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tthis.remove(query);\n\t}\n\n\tupdateAutoTranslateById(_id, autoTranslate) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tlet update;\n\t\tif (autoTranslate) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tautoTranslate,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tautoTranslate: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateAutoTranslateLanguageById(_id, autoTranslateLanguage) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tgetAutoTranslateLanguagesByRoomAndNotUser(rid, userId) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'autoTranslate': true,\n\t\t};\n\t\treturn this.distinct('autoTranslateLanguage', query);\n\t}\n\n\troleBaseQuery(userId, scope) {\n\t\tif (scope == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst query = { 'u._id': userId };\n\t\tif (!_.isUndefined(scope)) {\n\t\t\tquery.rid = scope;\n\t\t}\n\t\treturn query;\n\t}\n\n\tfindByRidWithoutE2EKey(rid, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tE2EKey: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateAudioNotificationValueById(_id, audioNotificationValue) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\taudioNotificationValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tclearAudioNotificationValueById(_id) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\taudioNotificationValue: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateNotificationsPrefById(_id, notificationPref, notificationField, notificationPrefOrigin) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {};\n\n\t\tif (notificationPref === null) {\n\t\t\tupdate.$unset = {\n\t\t\t\t[notificationField]: 1,\n\t\t\t\t[notificationPrefOrigin]: 1,\n\t\t\t};\n\t\t} else {\n\t\t\tupdate.$set = {\n\t\t\t\t[notificationField]: notificationPref.value,\n\t\t\t\t[notificationPrefOrigin]: notificationPref.origin,\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateUnreadAlertById(_id, unreadAlert) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tunreadAlert,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateDisableNotificationsById(_id, disableNotifications) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdisableNotifications,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateHideUnreadStatusById(_id, hideUnreadStatus) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\thideUnreadStatus,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateMuteGroupMentions(_id, muteGroupMentions) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmuteGroupMentions,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tchangeDepartmentByRoomId(rid, department) {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tthis.update(query, update);\n\t}\n\n\tfindAlwaysNotifyDesktopUsersByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyDesktopUsersByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAlwaysNotifyMobileUsersByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyMobileUsersByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindWithSendEmailByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\temailNotifications: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { fields: { emailNotifications: 1, u: 1 } });\n\t}\n\n\tresetUserE2EKey(userId) {\n\t\tthis.update(\n\t\t\t{ 'u._id': userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tE2EKey: '',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByUserIdWithoutE2E(userId, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'E2EKey': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateGroupE2EKey(_id, key) {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key } };\n\t\tthis.update(query, update);\n\t\treturn this.findOne({ _id });\n\t}\n\n\tfindUsersInRoles(roles, scope, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\tif (scope) {\n\t\t\tquery.rid = scope;\n\t\t}\n\n\t\tconst subscriptions = this.find(query).fetch();\n\n\t\tconst users = _.compact(\n\t\t\t_.map(subscriptions, function (subscription) {\n\t\t\t\tif (typeof subscription.u !== 'undefined' && typeof subscription.u._id !== 'undefined') {\n\t\t\t\t\treturn subscription.u._id;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn Users.find({ _id: { $in: users } }, options);\n\t}\n\n\t// FIND ONE\n\tfindOneByRoomIdAndUserId(roomId, userId, options = {}) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRoomIdAndUsername(roomId, username, options) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u.username': username,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRoomNameAndUserId(roomName, userId) {\n\t\tconst query = {\n\t\t\t'name': roomName,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t// FIND\n\tfindByUserId(userId, options) {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcachedFindByUserId = mem(this.findByUserId.bind(this), { maxAge: 5000 });\n\n\tfindByUserIdExceptType(userId, typeException, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': { $ne: typeException },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId, roomIds, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': { $in: roomIds },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndType(userId, type, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndTypes(userId, types, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndRoles(userId, roles, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'roles': { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdUpdatedAfter(userId, updatedAt, options) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'_updatedAt': {\n\t\t\t\t$gt: updatedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndRoles(roomId, roles, options) {\n\t\troles = [].concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByType(types, options) {\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeAndUserId(type, userId, options) {\n\t\tconst query = {\n\t\t\t't': type,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId, options) {\n\t\tconst query = { rid: roomId };\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId, userId, options = {}) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomWithUserHighlights(roomId, options) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'userHighlights.0': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastSeen(options = { fields: { _id: 0, ls: 1 } }) {\n\t\toptions.sort = { ls: -1 };\n\t\toptions.limit = 1;\n\t\tconst [subscription] = this.find({}, options).fetch();\n\t\treturn subscription?.ls;\n\t}\n\n\tfindByRoomIdAndUserIds(roomId, userIds, options) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndUserIdsOrAllMessages(roomId, userIds) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t$or: [{ 'u._id': { $in: userIds } }, { emailNotifications: 'all' }],\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByRoomIdWhenUserIdExists(rid, options) {\n\t\tconst query = { rid, 'u._id': { $exists: 1 } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdWhenUsernameExists(rid, options) {\n\t\tconst query = { rid, 'u.username': { $exists: 1 } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUnreadByUserId(userId) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'unread': {\n\t\t\t\t$gt: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { fields: { unread: 1 } });\n\t}\n\n\tgetMinimumLastSeenByRoomId(rid) {\n\t\treturn this.db.findOne(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tls: {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t\tfields: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// UPDATE\n\tarchiveByRoomId(roomId) {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tunarchiveByRoomId(roomId) {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: true,\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\thideByRoomIdAndUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\topenByRoomIdAndUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAsReadByRoomIdAndUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert: false,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAsUnreadByRoomIdAndUserId(roomId, userId, firstMessageUnreadTimestamp) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tls: firstMessageUnreadTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetCustomFieldsDirectMessagesByUserId(userId, fields) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': 'd',\n\t\t};\n\t\tconst update = { $set: { customFields: fields } };\n\t\tconst options = { multi: true };\n\n\t\treturn this.update(query, update, options);\n\t}\n\n\tsetFavoriteByRoomIdAndUserId(roomId, userId, favorite) {\n\t\tif (favorite == null) {\n\t\t\tfavorite = true;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tf: favorite,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateNameAndAlertByRoomId(roomId, name, fname) {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateDisplayNameByRoomId(roomId, fname) {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t\tname: fname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateFnameByRoomId(rid, fname) {\n\t\tconst query = { rid };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateNameAndFnameById(_id, name, fname) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetUserUsernameByUserId(userId, username) {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetNameForDirectRoomsWithOldName(oldName, name) {\n\t\tconst query = {\n\t\t\tname: oldName,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateDirectNameAndFnameByName(name, newName, newFname) {\n\t\tconst query = {\n\t\t\tname,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...(newName && { name: newName }),\n\t\t\t\t...(newFname && { fname: newFname }),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tincUnreadForRoomIdExcludingUserIds(roomId, userIds, inc) {\n\t\tif (inc == null) {\n\t\t\tinc = 1;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tincGroupMentionsAndUnreadForRoomIdExcludingUserId(roomId, userId, incGroup = 1, incUnread = 1) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tgroupMentions: incGroup,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tincUserMentionsAndUnreadForRoomIdAndUserIds(roomId, userIds, incUser = 1, incUnread = 1) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tuserMentions: incUser,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tignoreUser({ _id, ignoredUser: ignored, ignore = true }) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update = {};\n\t\tif (ignore) {\n\t\t\tupdate.$addToSet = { ignored };\n\t\t} else {\n\t\t\tupdate.$pull = { ignored };\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAlertForRoomIdExcludingUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetOpenForRoomIdExcludingUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetAlertForRoomIdAndUserIds(roomId, uids) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetOpenForRoomIdAndUserIds(roomId, uids) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetLastReplyForRoomIdAndUserIds(roomId, uids, lr) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlr,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetBlockedByRoomId(rid, blocked, blocker) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tblocked: true,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2 = {\n\t\t\t$set: {\n\t\t\t\tblocker: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update) && this.update(query2, update2);\n\t}\n\n\tunsetBlockedByRoomId(rid, blocked, blocker) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tblocked: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2 = {\n\t\t\t$unset: {\n\t\t\t\tblocker: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update) && this.update(query2, update2);\n\t}\n\n\tupdateCustomFieldsByRoomId(rid, cfields) {\n\t\tconst query = { rid };\n\t\tconst customFields = cfields || {};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateTypeByRoomId(roomId, type) {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\taddRoleById(_id, role) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tremoveRoleById(_id, role) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetArchivedByUsername(username, archived) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tname: username,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tarchived,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tclearNotificationUserPreferences(userId, notificationField, notificationOriginField) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: 'user',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t[notificationOriginField]: 1,\n\t\t\t\t[notificationField]: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateNotificationUserPreferences(userId, userPref, notificationField, notificationOriginField) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: {\n\t\t\t\t$ne: 'subscription',\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[notificationField]: userPref,\n\t\t\t\t[notificationOriginField]: 'user',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateUserHighlights(userId, userHighlights) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tuserHighlights,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateDirectFNameByName(name, fname) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tname,\n\t\t};\n\n\t\tlet update;\n\t\tif (fname) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tfname,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tfname: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\t// INSERT\n\tcreateWithRoomAndUser(room, user, extraData) {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\tcustomFields: room.customFields,\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t};\n\n\t\tif (room.prid) {\n\t\t\tsubscription.prid = room.prid;\n\t\t}\n\n\t\tconst result = this.insert(subscription);\n\n\t\tRooms.incUsersCountById(room._id);\n\n\t\tif (!['d', 'l'].includes(room.t)) {\n\t\t\tUsers.addRoomByUserId(user._id, room._id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// REMOVE\n\tremoveByUserId(userId) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst roomIds = this.findByUserId(userId).map((s) => s.rid);\n\n\t\tconst result = this.remove(query);\n\n\t\tif (Match.test(result, Number) && result > 0) {\n\t\t\tRooms.incUsersCountNotDMsByIds(roomIds, -1);\n\t\t}\n\n\t\tUsers.removeAllRoomsByUserId(userId);\n\n\t\treturn result;\n\t}\n\n\tremoveByRoomId(roomId) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tconst result = this.remove(query);\n\n\t\tif (Match.test(result, Number) && result > 0) {\n\t\t\tRooms.incUsersCountById(roomId, -result);\n\t\t}\n\n\t\tUsers.removeRoomByRoomId(roomId);\n\n\t\treturn result;\n\t}\n\n\tremoveByRoomIdAndUserId(roomId, userId) {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst result = this.remove(query);\n\n\t\tif (Match.test(result, Number) && result > 0) {\n\t\t\tRooms.incUsersCountById(roomId, -result);\n\t\t}\n\n\t\tUsers.removeRoomByUserId(userId, roomId);\n\n\t\treturn result;\n\t}\n\n\tremoveByRoomIds(rids) {\n\t\tconst result = this.remove({ rid: { $in: rids } });\n\n\t\tUsers.removeRoomByRoomIds(rids);\n\n\t\treturn result;\n\t}\n\n\tremoveByRoomIdsAndUserId(rids, userId) {\n\t\tconst result = this.remove({ 'rid': { $in: rids }, 'u._id': userId });\n\n\t\tif (Match.test(result, Number) && result > 0) {\n\t\t\tRooms.incUsersCountByIds(rids, -1);\n\t\t}\n\n\t\tUsers.removeRoomsByRoomIdsAndUserId(rids, userId);\n\n\t\treturn result;\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\taddUnreadThreadByRoomIdAndUserIds(rid, users, tmid, { groupMention = false, userMention = false } = {}) {\n\t\tif (!users) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'u._id': { $in: users },\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\ttunread: tmid,\n\t\t\t\t\t...(groupMention && { tunreadGroup: tmid }),\n\t\t\t\t\t...(userMention && { tunreadUser: tmid }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tremoveUnreadThreadByRoomIdAndUserId(rid, userId, tmid, clearAlert = false) {\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\ttunread: tmid,\n\t\t\t\ttunreadGroup: tmid,\n\t\t\t\ttunreadUser: tmid,\n\t\t\t},\n\t\t};\n\n\t\tif (clearAlert) {\n\t\t\tupdate.$set = { alert: false };\n\t\t}\n\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'u._id': userId,\n\t\t\t\trid,\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tremoveAllUnreadThreadsByRoomIdAndUserId(rid, userId) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\ttunread: 1,\n\t\t\t\ttunreadUser: 1,\n\t\t\t\ttunreadGroup: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tremoveUnreadThreadsByRoomId(rid, tunread) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\ttunread,\n\t\t\t\ttunreadUser: tunread,\n\t\t\t\ttunreadGroup: tunread,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetOnHold(roomId) {\n\t\treturn this.update({ rid: roomId }, { $set: { onHold: true } }, { multi: true });\n\t}\n\n\tunsetOnHold(roomId) {\n\t\treturn this.update({ rid: roomId }, { $unset: { onHold: 1 } }, { multi: true });\n\t}\n}\n\nexport default new Subscriptions('subscription', true);\n"]},"sourceType":"module","hash":"bcec0d32ae29c363360fc2af66afb826b90d4760"}
