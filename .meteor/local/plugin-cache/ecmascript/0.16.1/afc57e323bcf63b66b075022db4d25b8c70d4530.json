{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/RoutingManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/RoutingManager.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/RoutingManager.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/RoutingManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/RoutingManager.js"}},"code":"module.export({\n  RoutingManager: () => RoutingManager\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet createLivechatSubscription, dispatchAgentDelegated, dispatchInquiryQueued, forwardRoomToAgent, forwardRoomToDepartment, removeAgentFromSubscription, updateChatDepartment, allowAgentSkipQueue;\nmodule.link(\"./Helper\", {\n  createLivechatSubscription(v) {\n    createLivechatSubscription = v;\n  },\n\n  dispatchAgentDelegated(v) {\n    dispatchAgentDelegated = v;\n  },\n\n  dispatchInquiryQueued(v) {\n    dispatchInquiryQueued = v;\n  },\n\n  forwardRoomToAgent(v) {\n    forwardRoomToAgent = v;\n  },\n\n  forwardRoomToDepartment(v) {\n    forwardRoomToDepartment = v;\n  },\n\n  removeAgentFromSubscription(v) {\n    removeAgentFromSubscription = v;\n  },\n\n  updateChatDepartment(v) {\n    updateChatDepartment = v;\n  },\n\n  allowAgentSkipQueue(v) {\n    allowAgentSkipQueue = v;\n  }\n\n}, 2);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 3);\nlet Logger;\nmodule.link(\"../../../../server/lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nlet LivechatRooms, Rooms, Messages, Users, LivechatInquiry, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 5);\nlet Apps, AppEvents;\nmodule.link(\"../../../apps/server\", {\n  Apps(v) {\n    Apps = v;\n  },\n\n  AppEvents(v) {\n    AppEvents = v;\n  }\n\n}, 6);\nconst logger = new Logger('RoutingManager');\nconst RoutingManager = {\n  methodName: null,\n  methods: {},\n\n  startQueue() {// todo: move to eventemitter or middleware\n    // queue shouldn't start on CE\n  },\n\n  isMethodSet() {\n    return !!this.methodName;\n  },\n\n  setMethodNameAndStartQueue(name) {\n    logger.debug(\"Changing default routing method from \".concat(this.methodName, \" to \").concat(name));\n\n    if (!this.methods[name]) {\n      logger.warn(\"Cannot change routing method to \".concat(name, \". Selected Routing method does not exists. Defaulting to Manual_Selection\"));\n      this.methodName = 'Manual_Selection';\n    } else {\n      this.methodName = name;\n    }\n\n    this.startQueue();\n  },\n\n  registerMethod(name, Method) {\n    logger.debug(\"Registering new routing method with name \".concat(name));\n    this.methods[name] = new Method();\n  },\n\n  getMethod() {\n    if (!this.methods[this.methodName]) {\n      throw new Meteor.Error('error-routing-method-not-available');\n    }\n\n    return this.methods[this.methodName];\n  },\n\n  getConfig() {\n    return this.getMethod().config || {};\n  },\n\n  getNextAgent(department, ignoreAgentId) {\n    return Promise.asyncApply(() => {\n      logger.debug(\"Getting next available agent with method \".concat(this.methodName));\n      return this.getMethod().getNextAgent(department, ignoreAgentId);\n    });\n  },\n\n  delegateInquiry(inquiry, agent) {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      const {\n        department,\n        rid\n      } = inquiry;\n      logger.debug(\"Attempting to delegate inquiry \".concat(inquiry._id));\n\n      if (!agent || agent.username && !Users.findOneOnlineAgentByUserList(agent.username) && !allowAgentSkipQueue(agent)) {\n        logger.debug(\"Agent offline or invalid. Using routing method to get next agent for inquiry \".concat(inquiry._id));\n        agent = Promise.await(this.getNextAgent(department));\n        logger.debug(\"Routing method returned agent \".concat(agent && agent.agentId, \" for inquiry \").concat(inquiry._id));\n      }\n\n      if (!agent) {\n        logger.debug(\"No agents available. Unable to delegate inquiry \".concat(inquiry._id));\n        return LivechatRooms.findOneById(rid);\n      }\n\n      logger.debug(\"Inquiry \".concat(inquiry._id, \" will be taken by agent \").concat(agent.agentId));\n      return this.takeInquiry(inquiry, agent, options);\n    });\n  },\n\n  assignAgent(inquiry, agent) {\n    check(agent, Match.ObjectIncluding({\n      agentId: String,\n      username: String\n    }));\n    logger.debug(\"Assigning agent \".concat(agent.agentId, \" to inquiry \").concat(inquiry._id));\n    const {\n      rid,\n      name,\n      v,\n      department\n    } = inquiry;\n\n    if (!createLivechatSubscription(rid, name, v, agent, department)) {\n      logger.debug(\"Cannot assign agent to inquiry \".concat(inquiry._id, \": Cannot create subscription\"));\n      throw new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n    }\n\n    LivechatRooms.changeAgentByRoomId(rid, agent);\n    Rooms.incUsersCountById(rid);\n    const user = Users.findOneById(agent.agentId);\n    const room = LivechatRooms.findOneById(rid);\n    Messages.createCommandWithRoomIdAndUser('connected', rid, user);\n    dispatchAgentDelegated(rid, agent.agentId);\n    logger.debug(\"Agent \".concat(agent.agentId, \" assigned to inquriy \").concat(inquiry._id, \". Instances notified\"));\n    Apps.getBridges().getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, {\n      room,\n      user\n    });\n    return inquiry;\n  },\n\n  unassignAgent(inquiry, departmentId) {\n    const {\n      rid,\n      department\n    } = inquiry;\n    const room = LivechatRooms.findOneById(rid);\n    logger.debug(\"Removing assignations of inquiry \".concat(inquiry._id));\n\n    if (!room || !room.open) {\n      logger.debug(\"Cannot unassign agent from inquiry \".concat(inquiry._id, \": Room already closed\"));\n      return false;\n    }\n\n    if (departmentId && departmentId !== department) {\n      logger.debug(\"Switching department for inquiry \".concat(inquiry._id, \" [Current: \").concat(department, \" | Next: \").concat(departmentId, \"]\"));\n      updateChatDepartment({\n        rid,\n        newDepartmentId: departmentId,\n        oldDepartmentId: department\n      }); // Fake the department to delegate the inquiry;\n\n      inquiry.department = departmentId;\n    }\n\n    const {\n      servedBy\n    } = room;\n\n    if (servedBy) {\n      logger.debug(\"Unassigning current agent for inquiry \".concat(inquiry._id));\n      LivechatRooms.removeAgentByRoomId(rid);\n      this.removeAllRoomSubscriptions(room);\n      dispatchAgentDelegated(rid, null);\n    }\n\n    dispatchInquiryQueued(inquiry);\n    return true;\n  },\n\n  takeInquiry(inquiry, agent) {\n    return Promise.asyncApply(() => {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        clientAction: false\n      };\n      check(agent, Match.ObjectIncluding({\n        agentId: String,\n        username: String\n      }));\n      check(inquiry, Match.ObjectIncluding({\n        _id: String,\n        rid: String,\n        status: String\n      }));\n      logger.debug(\"Attempting to take Inquiry \".concat(inquiry._id, \" [Agent \").concat(agent.agentId, \"] \"));\n      const {\n        _id,\n        rid\n      } = inquiry;\n      const room = LivechatRooms.findOneById(rid);\n\n      if (!room || !room.open) {\n        logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Room is closed\"));\n        return room;\n      }\n\n      if (room.servedBy && room.servedBy._id === agent.agentId && !room.onHold) {\n        logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Already taken by agent \").concat(room.servedBy._id));\n        return room;\n      }\n\n      agent = Promise.await(callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n        agent,\n        inquiry,\n        options\n      }));\n\n      if (!agent) {\n        logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Precondition failed for agent\"));\n        return callbacks.run('livechat.onAgentAssignmentFailed', {\n          inquiry,\n          room,\n          options\n        });\n      }\n\n      if (room.onHold) {\n        logger.debug(\"Room \".concat(room._id, \" is on hold. Remove current assignments before routing\"));\n        Subscriptions.removeByRoomIdAndUserId(room._id, agent.agentId);\n      }\n\n      LivechatInquiry.takeInquiry(_id);\n      const inq = this.assignAgent(inquiry, agent);\n      logger.debug(\"Inquiry \".concat(inquiry._id, \" taken by agent \").concat(agent.agentId));\n      callbacks.runAsync('livechat.afterTakeInquiry', inq, agent);\n      return LivechatRooms.findOneById(rid);\n    });\n  },\n\n  transferRoom(room, guest, transferData) {\n    return Promise.asyncApply(() => {\n      logger.debug(\"Transfering room \".concat(room._id, \" by \").concat(transferData.transferredBy._id));\n\n      if (transferData.departmentId) {\n        logger.debug(\"Transfering room \".concat(room._id, \" to department \").concat(transferData.departmentId));\n        return forwardRoomToDepartment(room, guest, transferData);\n      }\n\n      if (transferData.userId) {\n        logger.debug(\"Transfering room \".concat(room._id, \" to user \").concat(transferData.userId));\n        return forwardRoomToAgent(room, transferData);\n      }\n\n      logger.debug(\"Unable to transfer room \".concat(room._id, \": No target provided\"));\n      return false;\n    });\n  },\n\n  delegateAgent(agent, inquiry) {\n    logger.debug(\"Delegating Inquiry \".concat(inquiry._id));\n    const defaultAgent = callbacks.run('livechat.beforeDelegateAgent', agent, {\n      department: inquiry === null || inquiry === void 0 ? void 0 : inquiry.department\n    });\n\n    if (defaultAgent) {\n      logger.debug(\"Delegating Inquiry \".concat(inquiry._id, \" to agent \").concat(defaultAgent.username));\n      LivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n    }\n\n    logger.debug(\"Queueing inquiry \".concat(inquiry._id));\n    dispatchInquiryQueued(inquiry, defaultAgent);\n    return defaultAgent;\n  },\n\n  removeAllRoomSubscriptions(room, ignoreUser) {\n    const {\n      _id: roomId\n    } = room;\n    const subscriptions = Subscriptions.findByRoomId(roomId).fetch();\n    subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions.forEach(_ref => {\n      let {\n        u\n      } = _ref;\n\n      if (ignoreUser && ignoreUser._id === u._id) {\n        return;\n      }\n\n      removeAgentFromSubscription(roomId, u);\n    });\n  }\n\n};","map":{"version":3,"sources":["app/livechat/server/lib/RoutingManager.js"],"names":["module","export","RoutingManager","Meteor","link","v","Match","check","createLivechatSubscription","dispatchAgentDelegated","dispatchInquiryQueued","forwardRoomToAgent","forwardRoomToDepartment","removeAgentFromSubscription","updateChatDepartment","allowAgentSkipQueue","callbacks","Logger","LivechatRooms","Rooms","Messages","Users","LivechatInquiry","Subscriptions","Apps","AppEvents","logger","methodName","methods","startQueue","isMethodSet","setMethodNameAndStartQueue","name","debug","warn","registerMethod","Method","getMethod","Error","getConfig","config","getNextAgent","department","ignoreAgentId","delegateInquiry","inquiry","agent","options","rid","_id","username","findOneOnlineAgentByUserList","agentId","findOneById","takeInquiry","assignAgent","ObjectIncluding","String","changeAgentByRoomId","incUsersCountById","user","room","createCommandWithRoomIdAndUser","getBridges","getListenerBridge","livechatEvent","IPostLivechatAgentAssigned","unassignAgent","departmentId","open","newDepartmentId","oldDepartmentId","servedBy","removeAgentByRoomId","removeAllRoomSubscriptions","clientAction","status","onHold","run","removeByRoomIdAndUserId","inq","runAsync","transferRoom","guest","transferData","transferredBy","userId","delegateAgent","defaultAgent","setDefaultAgentById","ignoreUser","roomId","subscriptions","findByRoomId","fetch","forEach","u"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport {\n\tcreateLivechatSubscription,\n\tdispatchAgentDelegated,\n\tdispatchInquiryQueued,\n\tforwardRoomToAgent,\n\tforwardRoomToDepartment,\n\tremoveAgentFromSubscription,\n\tupdateChatDepartment,\n\tallowAgentSkipQueue,\n} from './Helper';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Logger } from '../../../../server/lib/logger/Logger';\nimport { LivechatRooms, Rooms, Messages, Users, LivechatInquiry, Subscriptions } from '../../../models/server';\nimport { Apps, AppEvents } from '../../../apps/server';\n\nconst logger = new Logger('RoutingManager');\n\nexport const RoutingManager = {\n\tmethodName: null,\n\tmethods: {},\n\n\tstartQueue() {\n\t\t// todo: move to eventemitter or middleware\n\t\t// queue shouldn't start on CE\n\t},\n\n\tisMethodSet() {\n\t\treturn !!this.methodName;\n\t},\n\n\tsetMethodNameAndStartQueue(name) {\n\t\tlogger.debug(`Changing default routing method from ${this.methodName} to ${name}`);\n\t\tif (!this.methods[name]) {\n\t\t\tlogger.warn(`Cannot change routing method to ${name}. Selected Routing method does not exists. Defaulting to Manual_Selection`);\n\t\t\tthis.methodName = 'Manual_Selection';\n\t\t} else {\n\t\t\tthis.methodName = name;\n\t\t}\n\n\t\tthis.startQueue();\n\t},\n\n\tregisterMethod(name, Method) {\n\t\tlogger.debug(`Registering new routing method with name ${name}`);\n\t\tthis.methods[name] = new Method();\n\t},\n\n\tgetMethod() {\n\t\tif (!this.methods[this.methodName]) {\n\t\t\tthrow new Meteor.Error('error-routing-method-not-available');\n\t\t}\n\t\treturn this.methods[this.methodName];\n\t},\n\n\tgetConfig() {\n\t\treturn this.getMethod().config || {};\n\t},\n\n\tasync getNextAgent(department, ignoreAgentId) {\n\t\tlogger.debug(`Getting next available agent with method ${this.methodName}`);\n\t\treturn this.getMethod().getNextAgent(department, ignoreAgentId);\n\t},\n\n\tasync delegateInquiry(inquiry, agent, options = {}) {\n\t\tconst { department, rid } = inquiry;\n\t\tlogger.debug(`Attempting to delegate inquiry ${inquiry._id}`);\n\t\tif (!agent || (agent.username && !Users.findOneOnlineAgentByUserList(agent.username) && !allowAgentSkipQueue(agent))) {\n\t\t\tlogger.debug(`Agent offline or invalid. Using routing method to get next agent for inquiry ${inquiry._id}`);\n\t\t\tagent = await this.getNextAgent(department);\n\t\t\tlogger.debug(`Routing method returned agent ${agent && agent.agentId} for inquiry ${inquiry._id}`);\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`No agents available. Unable to delegate inquiry ${inquiry._id}`);\n\t\t\treturn LivechatRooms.findOneById(rid);\n\t\t}\n\n\t\tlogger.debug(`Inquiry ${inquiry._id} will be taken by agent ${agent.agentId}`);\n\t\treturn this.takeInquiry(inquiry, agent, options);\n\t},\n\n\tassignAgent(inquiry, agent) {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Assigning agent ${agent.agentId} to inquiry ${inquiry._id}`);\n\n\t\tconst { rid, name, v, department } = inquiry;\n\t\tif (!createLivechatSubscription(rid, name, v, agent, department)) {\n\t\t\tlogger.debug(`Cannot assign agent to inquiry ${inquiry._id}: Cannot create subscription`);\n\t\t\tthrow new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n\t\t}\n\n\t\tLivechatRooms.changeAgentByRoomId(rid, agent);\n\t\tRooms.incUsersCountById(rid);\n\n\t\tconst user = Users.findOneById(agent.agentId);\n\t\tconst room = LivechatRooms.findOneById(rid);\n\n\t\tMessages.createCommandWithRoomIdAndUser('connected', rid, user);\n\t\tdispatchAgentDelegated(rid, agent.agentId);\n\t\tlogger.debug(`Agent ${agent.agentId} assigned to inquriy ${inquiry._id}. Instances notified`);\n\n\t\tApps.getBridges().getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, { room, user });\n\t\treturn inquiry;\n\t},\n\n\tunassignAgent(inquiry, departmentId) {\n\t\tconst { rid, department } = inquiry;\n\t\tconst room = LivechatRooms.findOneById(rid);\n\n\t\tlogger.debug(`Removing assignations of inquiry ${inquiry._id}`);\n\t\tif (!room || !room.open) {\n\t\t\tlogger.debug(`Cannot unassign agent from inquiry ${inquiry._id}: Room already closed`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (departmentId && departmentId !== department) {\n\t\t\tlogger.debug(`Switching department for inquiry ${inquiry._id} [Current: ${department} | Next: ${departmentId}]`);\n\t\t\tupdateChatDepartment({\n\t\t\t\trid,\n\t\t\t\tnewDepartmentId: departmentId,\n\t\t\t\toldDepartmentId: department,\n\t\t\t});\n\t\t\t// Fake the department to delegate the inquiry;\n\t\t\tinquiry.department = departmentId;\n\t\t}\n\n\t\tconst { servedBy } = room;\n\n\t\tif (servedBy) {\n\t\t\tlogger.debug(`Unassigning current agent for inquiry ${inquiry._id}`);\n\t\t\tLivechatRooms.removeAgentByRoomId(rid);\n\t\t\tthis.removeAllRoomSubscriptions(room);\n\t\t\tdispatchAgentDelegated(rid, null);\n\t\t}\n\n\t\tdispatchInquiryQueued(inquiry);\n\t\treturn true;\n\t},\n\n\tasync takeInquiry(inquiry, agent, options = { clientAction: false }) {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tcheck(\n\t\t\tinquiry,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\trid: String,\n\t\t\t\tstatus: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Attempting to take Inquiry ${inquiry._id} [Agent ${agent.agentId}] `);\n\n\t\tconst { _id, rid } = inquiry;\n\t\tconst room = LivechatRooms.findOneById(rid);\n\t\tif (!room || !room.open) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Room is closed`);\n\t\t\treturn room;\n\t\t}\n\n\t\tif (room.servedBy && room.servedBy._id === agent.agentId && !room.onHold) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Already taken by agent ${room.servedBy._id}`);\n\t\t\treturn room;\n\t\t}\n\n\t\tagent = await callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\tagent,\n\t\t\tinquiry,\n\t\t\toptions,\n\t\t});\n\t\tif (!agent) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Precondition failed for agent`);\n\t\t\treturn callbacks.run('livechat.onAgentAssignmentFailed', { inquiry, room, options });\n\t\t}\n\n\t\tif (room.onHold) {\n\t\t\tlogger.debug(`Room ${room._id} is on hold. Remove current assignments before routing`);\n\t\t\tSubscriptions.removeByRoomIdAndUserId(room._id, agent.agentId);\n\t\t}\n\n\t\tLivechatInquiry.takeInquiry(_id);\n\t\tconst inq = this.assignAgent(inquiry, agent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\n\t\tcallbacks.runAsync('livechat.afterTakeInquiry', inq, agent);\n\n\t\treturn LivechatRooms.findOneById(rid);\n\t},\n\n\tasync transferRoom(room, guest, transferData) {\n\t\tlogger.debug(`Transfering room ${room._id} by ${transferData.transferredBy._id}`);\n\t\tif (transferData.departmentId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to department ${transferData.departmentId}`);\n\t\t\treturn forwardRoomToDepartment(room, guest, transferData);\n\t\t}\n\n\t\tif (transferData.userId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to user ${transferData.userId}`);\n\t\t\treturn forwardRoomToAgent(room, transferData);\n\t\t}\n\n\t\tlogger.debug(`Unable to transfer room ${room._id}: No target provided`);\n\t\treturn false;\n\t},\n\n\tdelegateAgent(agent, inquiry) {\n\t\tlogger.debug(`Delegating Inquiry ${inquiry._id}`);\n\t\tconst defaultAgent = callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\tdepartment: inquiry?.department,\n\t\t});\n\n\t\tif (defaultAgent) {\n\t\t\tlogger.debug(`Delegating Inquiry ${inquiry._id} to agent ${defaultAgent.username}`);\n\t\t\tLivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n\t\t}\n\n\t\tlogger.debug(`Queueing inquiry ${inquiry._id}`);\n\t\tdispatchInquiryQueued(inquiry, defaultAgent);\n\t\treturn defaultAgent;\n\t},\n\n\tremoveAllRoomSubscriptions(room, ignoreUser) {\n\t\tconst { _id: roomId } = room;\n\n\t\tconst subscriptions = Subscriptions.findByRoomId(roomId).fetch();\n\t\tsubscriptions?.forEach(({ u }) => {\n\t\t\tif (ignoreUser && ignoreUser._id === u._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tremoveAgentFromSubscription(roomId, u);\n\t\t});\n\t},\n};\n"]},"sourceType":"module","hash":"afc57e323bcf63b66b075022db4d25b8c70d4530"}
