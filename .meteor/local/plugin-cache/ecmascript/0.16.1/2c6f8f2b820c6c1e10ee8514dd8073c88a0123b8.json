{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/methods/saveNotificationSettings.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push-notifications/server/methods/saveNotificationSettings.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/methods/saveNotificationSettings.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/push-notifications/server/methods/saveNotificationSettings.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push-notifications/server/methods/saveNotificationSettings.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Subscriptions;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\nlet getUserNotificationPreference;\nmodule.link(\"../../../utils/server\", {\n  getUserNotificationPreference(v) {\n    getUserNotificationPreference = v;\n  }\n\n}, 3);\n\nconst saveAudioNotificationValue = (subId, value) => value === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n\nMeteor.methods({\n  saveNotificationSettings(roomId, field, value) {\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'saveNotificationSettings'\n      });\n    }\n\n    check(roomId, String);\n    check(field, String);\n    check(value, String);\n\n    const getNotificationPrefValue = (field, value) => {\n      if (value === 'default') {\n        const userPref = getUserNotificationPreference(Meteor.userId(), field);\n        return userPref.origin === 'server' ? null : userPref;\n      }\n\n      return {\n        value,\n        origin: 'subscription'\n      };\n    };\n\n    const notifications = {\n      desktopNotifications: {\n        updateMethod: (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, getNotificationPrefValue('desktop', value), 'desktopNotifications', 'desktopPrefOrigin')\n      },\n      mobilePushNotifications: {\n        updateMethod: (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, getNotificationPrefValue('mobile', value), 'mobilePushNotifications', 'mobilePrefOrigin')\n      },\n      emailNotifications: {\n        updateMethod: (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, getNotificationPrefValue('email', value), 'emailNotifications', 'emailPrefOrigin')\n      },\n      unreadAlert: {\n        updateMethod: (subscription, value) => Subscriptions.updateUnreadAlertById(subscription._id, value)\n      },\n      disableNotifications: {\n        updateMethod: (subscription, value) => Subscriptions.updateDisableNotificationsById(subscription._id, value === '1')\n      },\n      hideUnreadStatus: {\n        updateMethod: (subscription, value) => Subscriptions.updateHideUnreadStatusById(subscription._id, value === '1')\n      },\n      muteGroupMentions: {\n        updateMethod: (subscription, value) => Subscriptions.updateMuteGroupMentions(subscription._id, value === '1')\n      },\n      audioNotificationValue: {\n        updateMethod: (subscription, value) => saveAudioNotificationValue(subscription._id, value)\n      }\n    };\n    const isInvalidNotification = !Object.keys(notifications).includes(field);\n    const basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n    const fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n\n    if (isInvalidNotification) {\n      throw new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n        method: 'saveNotificationSettings'\n      });\n    }\n\n    if (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n      throw new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n        method: 'saveNotificationSettings'\n      });\n    }\n\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(roomId, Meteor.userId());\n\n    if (!subscription) {\n      throw new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n        method: 'saveNotificationSettings'\n      });\n    }\n\n    notifications[field].updateMethod(subscription, value);\n    return true;\n  },\n\n  saveAudioNotificationValue(rid, value) {\n    const subscription = Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());\n\n    if (!subscription) {\n      throw new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n        method: 'saveAudioNotificationValue'\n      });\n    }\n\n    saveAudioNotificationValue(subscription._id, value);\n    return true;\n  }\n\n});","map":{"version":3,"sources":["app/push-notifications/server/methods/saveNotificationSettings.js"],"names":["Meteor","module","link","v","check","Subscriptions","getUserNotificationPreference","saveAudioNotificationValue","subId","value","clearAudioNotificationValueById","updateAudioNotificationValueById","methods","saveNotificationSettings","roomId","field","userId","Error","method","String","getNotificationPrefValue","userPref","origin","notifications","desktopNotifications","updateMethod","subscription","updateNotificationsPrefById","_id","mobilePushNotifications","emailNotifications","unreadAlert","updateUnreadAlertById","disableNotifications","updateDisableNotificationsById","hideUnreadStatus","updateHideUnreadStatusById","muteGroupMentions","updateMuteGroupMentions","audioNotificationValue","isInvalidNotification","Object","keys","includes","basicValuesForNotifications","fieldsMustHaveBasicValues","findOneByRoomIdAndUserId","rid"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { Subscriptions } from '../../../models/server';\nimport { getUserNotificationPreference } from '../../../utils/server';\n\nconst saveAudioNotificationValue = (subId, value) =>\n\tvalue === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n\nMeteor.methods({\n\tsaveNotificationSettings(roomId, field, value) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\t\tcheck(roomId, String);\n\t\tcheck(field, String);\n\t\tcheck(value, String);\n\n\t\tconst getNotificationPrefValue = (field, value) => {\n\t\t\tif (value === 'default') {\n\t\t\t\tconst userPref = getUserNotificationPreference(Meteor.userId(), field);\n\t\t\t\treturn userPref.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };\n\t\t};\n\n\t\tconst notifications = {\n\t\t\tdesktopNotifications: {\n\t\t\t\tupdateMethod: (subscription, value) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tgetNotificationPrefValue('desktop', value),\n\t\t\t\t\t\t'desktopNotifications',\n\t\t\t\t\t\t'desktopPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tmobilePushNotifications: {\n\t\t\t\tupdateMethod: (subscription, value) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tgetNotificationPrefValue('mobile', value),\n\t\t\t\t\t\t'mobilePushNotifications',\n\t\t\t\t\t\t'mobilePrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\temailNotifications: {\n\t\t\t\tupdateMethod: (subscription, value) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tgetNotificationPrefValue('email', value),\n\t\t\t\t\t\t'emailNotifications',\n\t\t\t\t\t\t'emailPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tunreadAlert: {\n\t\t\t\tupdateMethod: (subscription, value) => Subscriptions.updateUnreadAlertById(subscription._id, value),\n\t\t\t},\n\t\t\tdisableNotifications: {\n\t\t\t\tupdateMethod: (subscription, value) => Subscriptions.updateDisableNotificationsById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideUnreadStatus: {\n\t\t\t\tupdateMethod: (subscription, value) => Subscriptions.updateHideUnreadStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\tmuteGroupMentions: {\n\t\t\t\tupdateMethod: (subscription, value) => Subscriptions.updateMuteGroupMentions(subscription._id, value === '1'),\n\t\t\t},\n\t\t\taudioNotificationValue: {\n\t\t\t\tupdateMethod: (subscription, value) => saveAudioNotificationValue(subscription._id, value),\n\t\t\t},\n\t\t};\n\t\tconst isInvalidNotification = !Object.keys(notifications).includes(field);\n\t\tconst basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n\t\tconst fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n\n\t\tif (isInvalidNotification) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(roomId, Meteor.userId());\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tnotifications[field].updateMethod(subscription, value);\n\n\t\treturn true;\n\t},\n\n\tsaveAudioNotificationValue(rid, value) {\n\t\tconst subscription = Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\t\tsaveAudioNotificationValue(subscription._id, value);\n\t\treturn true;\n\t},\n});\n"]},"sourceType":"module","hash":"2c6f8f2b820c6c1e10ee8514dd8073c88a0123b8"}
