{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomsWithSingleOwner.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/getRoomsWithSingleOwner.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomsWithSingleOwner.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/getRoomsWithSingleOwner.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/getRoomsWithSingleOwner.js"}},"code":"module.export({\n  shouldRemoveOrChangeOwner: () => shouldRemoveOrChangeOwner,\n  getSubscribedRoomsForUserWithDetails: () => getSubscribedRoomsForUserWithDetails\n});\nlet subscriptionHasRole;\nmodule.link(\"../../../authorization/server\", {\n  subscriptionHasRole(v) {\n    subscriptionHasRole = v;\n  }\n\n}, 0);\nlet Users, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 1);\n\nfunction shouldRemoveOrChangeOwner(subscribedRooms) {\n  return subscribedRooms.some(_ref => {\n    let {\n      shouldBeRemoved,\n      shouldChangeOwner\n    } = _ref;\n    return shouldBeRemoved || shouldChangeOwner;\n  });\n}\n\nfunction getSubscribedRoomsForUserWithDetails(userId) {\n  let assignNewOwner = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let roomIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const subscribedRooms = [];\n  const cursor = roomIds.length > 0 ? Subscriptions.findByUserIdAndRoomIds(userId, roomIds) : Subscriptions.findByUserIdExceptType(userId, 'd'); // Iterate through all the rooms the user is subscribed to, to check if he is the last owner of any of them.\n\n  cursor.forEach(subscription => {\n    const roomData = {\n      rid: subscription.rid,\n      t: subscription.t,\n      shouldBeRemoved: false,\n      shouldChangeOwner: false,\n      userIsLastOwner: false,\n      newOwner: null\n    };\n\n    if (subscriptionHasRole(subscription, 'owner')) {\n      // Fetch the number of owners\n      const numOwners = Subscriptions.findByRoomIdAndRoles(subscription.rid, ['owner']).count(); // If it's only one, then this user is the only owner.\n\n      roomData.userIsLastOwner = numOwners === 1;\n\n      if (numOwners === 1 && assignNewOwner) {\n        // Let's check how many subscribers the room has.\n        const options = {\n          fields: {\n            'u._id': 1\n          },\n          sort: {\n            ts: 1\n          }\n        };\n        const subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n        subscribersCursor.forEach(_ref2 => {\n          let {\n            u: {\n              _id: uid\n            }\n          } = _ref2;\n\n          // If we already changed the owner or this subscription is for the user we are removing, then don't try to give it ownership\n          if (roomData.shouldChangeOwner || uid === userId) {\n            return;\n          }\n\n          const newOwner = Users.findOneActiveById(uid, {\n            fields: {\n              _id: 1\n            }\n          });\n\n          if (!newOwner) {\n            return;\n          }\n\n          roomData.newOwner = uid;\n          roomData.shouldChangeOwner = true;\n        }); // If there's no subscriber available to be the new owner and it's not a public room, we can remove it.\n\n        if (!roomData.shouldChangeOwner && roomData.t !== 'c') {\n          roomData.shouldBeRemoved = true;\n        }\n      }\n    } else if (roomData.t !== 'c') {\n      // If the user is not an owner, remove the room if the user is the only subscriber\n      roomData.shouldBeRemoved = Subscriptions.findByRoomId(roomData.rid).count() === 1;\n    }\n\n    subscribedRooms.push(roomData);\n  });\n  return subscribedRooms;\n}","map":{"version":3,"sources":["app/lib/server/functions/getRoomsWithSingleOwner.js"],"names":["module","export","shouldRemoveOrChangeOwner","getSubscribedRoomsForUserWithDetails","subscriptionHasRole","link","v","Users","Subscriptions","subscribedRooms","some","shouldBeRemoved","shouldChangeOwner","userId","assignNewOwner","roomIds","cursor","length","findByUserIdAndRoomIds","findByUserIdExceptType","forEach","subscription","roomData","rid","t","userIsLastOwner","newOwner","numOwners","findByRoomIdAndRoles","count","options","fields","sort","ts","subscribersCursor","findByRoomId","u","_id","uid","findOneActiveById","push"],"mappings":"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","sourcesContent":["import { subscriptionHasRole } from '../../../authorization/server';\nimport { Users, Subscriptions } from '../../../models/server';\n\nexport function shouldRemoveOrChangeOwner(subscribedRooms) {\n\treturn subscribedRooms.some(({ shouldBeRemoved, shouldChangeOwner }) => shouldBeRemoved || shouldChangeOwner);\n}\n\nexport function getSubscribedRoomsForUserWithDetails(userId, assignNewOwner = true, roomIds = []) {\n\tconst subscribedRooms = [];\n\n\tconst cursor =\n\t\troomIds.length > 0 ? Subscriptions.findByUserIdAndRoomIds(userId, roomIds) : Subscriptions.findByUserIdExceptType(userId, 'd');\n\n\t// Iterate through all the rooms the user is subscribed to, to check if he is the last owner of any of them.\n\tcursor.forEach((subscription) => {\n\t\tconst roomData = {\n\t\t\trid: subscription.rid,\n\t\t\tt: subscription.t,\n\t\t\tshouldBeRemoved: false,\n\t\t\tshouldChangeOwner: false,\n\t\t\tuserIsLastOwner: false,\n\t\t\tnewOwner: null,\n\t\t};\n\n\t\tif (subscriptionHasRole(subscription, 'owner')) {\n\t\t\t// Fetch the number of owners\n\t\t\tconst numOwners = Subscriptions.findByRoomIdAndRoles(subscription.rid, ['owner']).count();\n\t\t\t// If it's only one, then this user is the only owner.\n\t\t\troomData.userIsLastOwner = numOwners === 1;\n\t\t\tif (numOwners === 1 && assignNewOwner) {\n\t\t\t\t// Let's check how many subscribers the room has.\n\t\t\t\tconst options = { fields: { 'u._id': 1 }, sort: { ts: 1 } };\n\t\t\t\tconst subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n\n\t\t\t\tsubscribersCursor.forEach(({ u: { _id: uid } }) => {\n\t\t\t\t\t// If we already changed the owner or this subscription is for the user we are removing, then don't try to give it ownership\n\t\t\t\t\tif (roomData.shouldChangeOwner || uid === userId) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst newOwner = Users.findOneActiveById(uid, { fields: { _id: 1 } });\n\t\t\t\t\tif (!newOwner) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\troomData.newOwner = uid;\n\t\t\t\t\troomData.shouldChangeOwner = true;\n\t\t\t\t});\n\n\t\t\t\t// If there's no subscriber available to be the new owner and it's not a public room, we can remove it.\n\t\t\t\tif (!roomData.shouldChangeOwner && roomData.t !== 'c') {\n\t\t\t\t\troomData.shouldBeRemoved = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (roomData.t !== 'c') {\n\t\t\t// If the user is not an owner, remove the room if the user is the only subscriber\n\t\t\troomData.shouldBeRemoved = Subscriptions.findByRoomId(roomData.rid).count() === 1;\n\t\t}\n\n\t\tsubscribedRooms.push(roomData);\n\t});\n\n\treturn subscribedRooms;\n}\n"]},"sourceType":"module","hash":"e1b6e34690356aa84f7a96611ecee413e26dcfae"}
