{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/chat.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/chat.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/chat.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/api/server/v1/chat.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/chat.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Messages;\nmodule.link(\"../../../models\", {\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 3);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 4);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 5);\nlet processWebhookMessage;\nmodule.link(\"../../../lib/server\", {\n  processWebhookMessage(v) {\n    processWebhookMessage = v;\n  }\n\n}, 6);\nlet executeSendMessage;\nmodule.link(\"../../../lib/server/methods/sendMessage\", {\n  executeSendMessage(v) {\n    executeSendMessage = v;\n  }\n\n}, 7);\nlet executeSetReaction;\nmodule.link(\"../../../reactions/server/setReaction\", {\n  executeSetReaction(v) {\n    executeSetReaction = v;\n  }\n\n}, 8);\nlet API;\nmodule.link(\"../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 9);\nlet Rooms;\nmodule.link(\"../../../models/server/models/Rooms\", {\n  default(v) {\n    Rooms = v;\n  }\n\n}, 10);\nlet Users;\nmodule.link(\"../../../models/server/models/Users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 11);\nlet Subscriptions;\nmodule.link(\"../../../models/server/models/Subscriptions\", {\n  default(v) {\n    Subscriptions = v;\n  }\n\n}, 12);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 13);\nlet findMentionedMessages, findStarredMessages, findSnippetedMessageById, findSnippetedMessages, findDiscussionsFromRoom;\nmodule.link(\"../lib/messages\", {\n  findMentionedMessages(v) {\n    findMentionedMessages = v;\n  },\n\n  findStarredMessages(v) {\n    findStarredMessages = v;\n  },\n\n  findSnippetedMessageById(v) {\n    findSnippetedMessageById = v;\n  },\n\n  findSnippetedMessages(v) {\n    findSnippetedMessages = v;\n  },\n\n  findDiscussionsFromRoom(v) {\n    findDiscussionsFromRoom = v;\n  }\n\n}, 14);\nAPI.v1.addRoute('chat.delete', {\n  authRequired: true\n}, {\n  post() {\n    check(this.bodyParams, Match.ObjectIncluding({\n      msgId: String,\n      roomId: String,\n      asUser: Match.Maybe(Boolean)\n    }));\n    const msg = Messages.findOneById(this.bodyParams.msgId, {\n      fields: {\n        u: 1,\n        rid: 1\n      }\n    });\n\n    if (!msg) {\n      return API.v1.failure(\"No message found with the id of \\\"\".concat(this.bodyParams.msgId, \"\\\".\"));\n    }\n\n    if (this.bodyParams.roomId !== msg.rid) {\n      return API.v1.failure('The room id provided does not match where the message is from.');\n    }\n\n    if (this.bodyParams.asUser && msg.u._id !== this.userId && !hasPermission(this.userId, 'force-delete-message', msg.rid)) {\n      return API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n    }\n\n    Meteor.runAsUser(this.bodyParams.asUser ? msg.u._id : this.userId, () => {\n      Meteor.call('deleteMessage', {\n        _id: msg._id\n      });\n    });\n    return API.v1.success({\n      _id: msg._id,\n      ts: Date.now(),\n      message: msg\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.syncMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId,\n      lastUpdate\n    } = this.queryParams;\n\n    if (!roomId) {\n      throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n    }\n\n    if (!lastUpdate) {\n      throw new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n    } else if (isNaN(Date.parse(lastUpdate))) {\n      throw new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n    }\n\n    let result;\n    Meteor.runAsUser(this.userId, () => {\n      result = Meteor.call('messages/get', roomId, {\n        lastUpdate: new Date(lastUpdate)\n      });\n    });\n\n    if (!result) {\n      return API.v1.failure();\n    }\n\n    return API.v1.success({\n      result: {\n        updated: normalizeMessagesForUser(result.updated, this.userId),\n        deleted: result.deleted\n      }\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.getMessage', {\n  authRequired: true\n}, {\n  get() {\n    if (!this.queryParams.msgId) {\n      return API.v1.failure('The \"msgId\" query parameter must be provided.');\n    }\n\n    let msg;\n    Meteor.runAsUser(this.userId, () => {\n      msg = Meteor.call('getSingleMessage', this.queryParams.msgId);\n    });\n\n    if (!msg) {\n      return API.v1.failure();\n    }\n\n    const [message] = normalizeMessagesForUser([msg], this.userId);\n    return API.v1.success({\n      message\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.pinMessage', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n      throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n    }\n\n    const msg = Messages.findOneById(this.bodyParams.messageId);\n\n    if (!msg) {\n      throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n    }\n\n    let pinnedMessage;\n    Meteor.runAsUser(this.userId, () => {\n      pinnedMessage = Meteor.call('pinMessage', msg);\n    });\n    const [message] = normalizeMessagesForUser([pinnedMessage], this.userId);\n    return API.v1.success({\n      message\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.postMessage', {\n  authRequired: true\n}, {\n  post() {\n    const messageReturn = processWebhookMessage(this.bodyParams, this.user)[0];\n\n    if (!messageReturn) {\n      return API.v1.failure('unknown-error');\n    }\n\n    const [message] = normalizeMessagesForUser([messageReturn.message], this.userId);\n    return API.v1.success({\n      ts: Date.now(),\n      channel: messageReturn.channel,\n      message\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.search', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId,\n      searchText\n    } = this.queryParams;\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n    }\n\n    if (!searchText) {\n      throw new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n    }\n\n    let result;\n    Meteor.runAsUser(this.userId, () => {\n      result = Meteor.call('messageSearch', searchText, roomId, count, offset).message.docs;\n    });\n    return API.v1.success({\n      messages: normalizeMessagesForUser(result, this.userId)\n    });\n  }\n\n}); // The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\n\nAPI.v1.addRoute('chat.sendMessage', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.message) {\n      throw new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n    }\n\n    const sent = executeSendMessage(this.userId, this.bodyParams.message);\n    const [message] = normalizeMessagesForUser([sent], this.userId);\n    return API.v1.success({\n      message\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.starMessage', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n      throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n    }\n\n    const msg = Messages.findOneById(this.bodyParams.messageId);\n\n    if (!msg) {\n      throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('starMessage', {\n      _id: msg._id,\n      rid: msg.rid,\n      starred: true\n    }));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.unPinMessage', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n      throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n    }\n\n    const msg = Messages.findOneById(this.bodyParams.messageId);\n\n    if (!msg) {\n      throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('unpinMessage', msg));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.unStarMessage', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n      throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n    }\n\n    const msg = Messages.findOneById(this.bodyParams.messageId);\n\n    if (!msg) {\n      throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('starMessage', {\n      _id: msg._id,\n      rid: msg.rid,\n      starred: false\n    }));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.update', {\n  authRequired: true\n}, {\n  post() {\n    check(this.bodyParams, Match.ObjectIncluding({\n      roomId: String,\n      msgId: String,\n      text: String // Using text to be consistant with chat.postMessage\n\n    }));\n    const msg = Messages.findOneById(this.bodyParams.msgId); // Ensure the message exists\n\n    if (!msg) {\n      return API.v1.failure(\"No message found with the id of \\\"\".concat(this.bodyParams.msgId, \"\\\".\"));\n    }\n\n    if (this.bodyParams.roomId !== msg.rid) {\n      return API.v1.failure('The room id provided does not match where the message is from.');\n    } // Permission checks are already done in the updateMessage method, so no need to duplicate them\n\n\n    Meteor.runAsUser(this.userId, () => {\n      Meteor.call('updateMessage', {\n        _id: msg._id,\n        msg: this.bodyParams.text,\n        rid: msg.rid\n      });\n    });\n    const [message] = normalizeMessagesForUser([Messages.findOneById(msg._id)], this.userId);\n    return API.v1.success({\n      message\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.react', {\n  authRequired: true\n}, {\n  post() {\n    if (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n      throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n    }\n\n    const msg = Messages.findOneById(this.bodyParams.messageId);\n\n    if (!msg) {\n      throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n    }\n\n    const emoji = this.bodyParams.emoji || this.bodyParams.reaction;\n\n    if (!emoji) {\n      throw new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Promise.await(executeSetReaction(emoji, msg._id, this.bodyParams.shouldReact)));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.getMessageReadReceipts', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      messageId\n    } = this.queryParams;\n\n    if (!messageId) {\n      return API.v1.failure({\n        error: \"The required 'messageId' param is missing.\"\n      });\n    }\n\n    try {\n      const messageReadReceipts = Meteor.runAsUser(this.userId, () => Meteor.call('getReadReceipts', {\n        messageId\n      }));\n      return API.v1.success({\n        receipts: messageReadReceipts\n      });\n    } catch (error) {\n      return API.v1.failure({\n        error: error.message\n      });\n    }\n  }\n\n});\nAPI.v1.addRoute('chat.reportMessage', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      messageId,\n      description\n    } = this.bodyParams;\n\n    if (!messageId) {\n      return API.v1.failure('The required \"messageId\" param is missing.');\n    }\n\n    if (!description) {\n      return API.v1.failure('The required \"description\" param is missing.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('reportMessage', messageId, description));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.ignoreUser', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      rid,\n      userId\n    } = this.queryParams;\n    let {\n      ignore = true\n    } = this.queryParams;\n    ignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n\n    if (!rid || !rid.trim()) {\n      throw new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n    }\n\n    if (!userId || !userId.trim()) {\n      throw new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('ignoreUser', {\n      rid,\n      userId,\n      ignore\n    }));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.getDeletedMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId,\n      since\n    } = this.queryParams;\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('The required \"roomId\" query param is missing.');\n    }\n\n    if (!since) {\n      throw new Meteor.Error('The required \"since\" query param is missing.');\n    } else if (isNaN(Date.parse(since))) {\n      throw new Meteor.Error('The \"since\" query parameter must be a valid date.');\n    }\n\n    const cursor = Messages.trashFindDeletedAfter(new Date(since), {\n      rid: roomId\n    }, {\n      skip: offset,\n      limit: count,\n      fields: {\n        _id: 1\n      }\n    });\n    const total = cursor.count();\n    const messages = cursor.fetch();\n    return API.v1.success({\n      messages,\n      count: messages.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.getPinnedMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.queryParams;\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n    }\n\n    if (!canAccessRoom({\n      _id: roomId\n    }, {\n      _id: this.userId\n    })) {\n      throw new Meteor.Error('error-not-allowed', 'Not allowed');\n    }\n\n    const cursor = Messages.findPinnedByRoom(roomId, {\n      skip: offset,\n      limit: count\n    });\n    const total = cursor.count();\n    const messages = cursor.fetch();\n    return API.v1.success({\n      messages,\n      count: messages.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.getThreadsList', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      rid,\n      type,\n      text\n    } = this.queryParams;\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n    const {\n      sort,\n      fields,\n      query\n    } = this.parseJsonQuery();\n\n    if (!rid) {\n      throw new Meteor.Error('The required \"rid\" query param is missing.');\n    }\n\n    if (!settings.get('Threads_enabled')) {\n      throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n    }\n\n    const user = Users.findOneById(this.userId, {\n      fields: {\n        _id: 1\n      }\n    });\n    const room = Rooms.findOneById(rid, {\n      fields: {\n        t: 1,\n        _id: 1\n      }\n    });\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    const typeThread = _objectSpread(_objectSpread(_objectSpread({\n      _hidden: {\n        $ne: true\n      }\n    }, type === 'following' && {\n      replies: {\n        $in: [this.userId]\n      }\n    }), type === 'unread' && {\n      _id: {\n        $in: Subscriptions.findOneByRoomIdAndUserId(room._id, user._id).tunread\n      }\n    }), {}, {\n      msg: new RegExp(escapeRegExp(text), 'i')\n    });\n\n    const threadQuery = _objectSpread(_objectSpread(_objectSpread({}, query), typeThread), {}, {\n      rid,\n      tcount: {\n        $exists: true\n      }\n    });\n\n    const cursor = Messages.find(threadQuery, {\n      sort: sort || {\n        tlm: -1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const total = cursor.count();\n    const threads = cursor.fetch();\n    return API.v1.success({\n      threads,\n      count: threads.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.syncThreadsList', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      rid\n    } = this.queryParams;\n    const {\n      query,\n      fields,\n      sort\n    } = this.parseJsonQuery();\n    const {\n      updatedSince\n    } = this.queryParams;\n    let updatedSinceDate;\n\n    if (!settings.get('Threads_enabled')) {\n      throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n    }\n\n    if (!rid) {\n      throw new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n    }\n\n    if (!updatedSince) {\n      throw new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n    }\n\n    if (isNaN(Date.parse(updatedSince))) {\n      throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n    } else {\n      updatedSinceDate = new Date(updatedSince);\n    }\n\n    const user = Users.findOneById(this.userId, {\n      fields: {\n        _id: 1\n      }\n    });\n    const room = Rooms.findOneById(rid, {\n      fields: {\n        t: 1,\n        _id: 1\n      }\n    });\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    const threadQuery = Object.assign({}, query, {\n      rid,\n      tcount: {\n        $exists: true\n      }\n    });\n    return API.v1.success({\n      threads: {\n        update: Messages.find(_objectSpread(_objectSpread({}, threadQuery), {}, {\n          _updatedAt: {\n            $gt: updatedSinceDate\n          }\n        }), {\n          fields,\n          sort\n        }).fetch(),\n        remove: Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n          fields,\n          sort\n        }).fetch()\n      }\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.getThreadMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      tmid\n    } = this.queryParams;\n    const {\n      query,\n      fields,\n      sort\n    } = this.parseJsonQuery();\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!settings.get('Threads_enabled')) {\n      throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n    }\n\n    if (!tmid) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n    }\n\n    const thread = Messages.findOneById(tmid, {\n      fields: {\n        rid: 1\n      }\n    });\n\n    if (!thread || !thread.rid) {\n      throw new Meteor.Error('error-invalid-message', 'Invalid Message');\n    }\n\n    const user = Users.findOneById(this.userId, {\n      fields: {\n        _id: 1\n      }\n    });\n    const room = Rooms.findOneById(thread.rid, {\n      fields: {\n        t: 1,\n        _id: 1\n      }\n    });\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    const cursor = Messages.find(_objectSpread(_objectSpread({}, query), {}, {\n      tmid\n    }), {\n      sort: sort || {\n        ts: 1\n      },\n      skip: offset,\n      limit: count,\n      fields\n    });\n    const total = cursor.count();\n    const messages = cursor.fetch();\n    return API.v1.success({\n      messages,\n      count: messages.length,\n      offset,\n      total\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.syncThreadMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      tmid\n    } = this.queryParams;\n    const {\n      query,\n      fields,\n      sort\n    } = this.parseJsonQuery();\n    const {\n      updatedSince\n    } = this.queryParams;\n    let updatedSinceDate;\n\n    if (!settings.get('Threads_enabled')) {\n      throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n    }\n\n    if (!tmid) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n    }\n\n    if (!updatedSince) {\n      throw new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n    }\n\n    if (isNaN(Date.parse(updatedSince))) {\n      throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n    } else {\n      updatedSinceDate = new Date(updatedSince);\n    }\n\n    const thread = Messages.findOneById(tmid, {\n      fields: {\n        rid: 1\n      }\n    });\n\n    if (!thread || !thread.rid) {\n      throw new Meteor.Error('error-invalid-message', 'Invalid Message');\n    }\n\n    const user = Users.findOneById(this.userId, {\n      fields: {\n        _id: 1\n      }\n    });\n    const room = Rooms.findOneById(thread.rid, {\n      fields: {\n        t: 1,\n        _id: 1\n      }\n    });\n\n    if (!canAccessRoom(room, user)) {\n      throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n    }\n\n    return API.v1.success({\n      messages: {\n        update: Messages.find(_objectSpread(_objectSpread({}, query), {}, {\n          tmid,\n          _updatedAt: {\n            $gt: updatedSinceDate\n          }\n        }), {\n          fields,\n          sort\n        }).fetch(),\n        remove: Messages.trashFindDeletedAfter(updatedSinceDate, _objectSpread(_objectSpread({}, query), {}, {\n          tmid\n        }), {\n          fields,\n          sort\n        }).fetch()\n      }\n    });\n  }\n\n});\nAPI.v1.addRoute('chat.followMessage', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      mid\n    } = this.bodyParams;\n\n    if (!mid) {\n      throw new Meteor.Error('The required \"mid\" body param is missing.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('followMessage', {\n      mid\n    }));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.unfollowMessage', {\n  authRequired: true\n}, {\n  post() {\n    const {\n      mid\n    } = this.bodyParams;\n\n    if (!mid) {\n      throw new Meteor.Error('The required \"mid\" body param is missing.');\n    }\n\n    Meteor.runAsUser(this.userId, () => Meteor.call('unfollowMessage', {\n      mid\n    }));\n    return API.v1.success();\n  }\n\n});\nAPI.v1.addRoute('chat.getMentionedMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.queryParams;\n    const {\n      sort\n    } = this.parseJsonQuery();\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n    }\n\n    const messages = Promise.await(findMentionedMessages({\n      uid: this.userId,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    }));\n    return API.v1.success(messages);\n  }\n\n});\nAPI.v1.addRoute('chat.getStarredMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.queryParams;\n    const {\n      sort\n    } = this.parseJsonQuery();\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n    }\n\n    const messages = Promise.await(findStarredMessages({\n      uid: this.userId,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    }));\n    messages.messages = normalizeMessagesForUser(messages.messages, this.userId);\n    return API.v1.success(messages);\n  }\n\n});\nAPI.v1.addRoute('chat.getSnippetedMessageById', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      messageId\n    } = this.queryParams;\n\n    if (!messageId) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"messageId\" query param is missing.');\n    }\n\n    const message = Promise.await(findSnippetedMessageById({\n      uid: this.userId,\n      messageId\n    }));\n    return API.v1.success(message);\n  }\n\n});\nAPI.v1.addRoute('chat.getSnippetedMessages', {\n  authRequired: true\n}, {\n  get() {\n    const {\n      roomId\n    } = this.queryParams;\n    const {\n      sort\n    } = this.parseJsonQuery();\n    const {\n      offset,\n      count\n    } = this.getPaginationItems();\n\n    if (!roomId) {\n      throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n    }\n\n    const messages = Promise.await(findSnippetedMessages({\n      uid: this.userId,\n      roomId,\n      pagination: {\n        offset,\n        count,\n        sort\n      }\n    }));\n    return API.v1.success(messages);\n  }\n\n});\nAPI.v1.addRoute('chat.getDiscussions', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        roomId,\n        text\n      } = this.queryParams;\n      const {\n        sort\n      } = this.parseJsonQuery();\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n\n      if (!roomId) {\n        throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n      }\n\n      const messages = Promise.await(findDiscussionsFromRoom({\n        uid: this.userId,\n        roomId,\n        text,\n        pagination: {\n          offset,\n          count,\n          sort\n        }\n      }));\n      return API.v1.success(messages);\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/chat.js"],"names":["_objectSpread","module","link","default","v","escapeRegExp","Meteor","Match","check","Messages","canAccessRoom","hasPermission","normalizeMessagesForUser","processWebhookMessage","executeSendMessage","executeSetReaction","API","Rooms","Users","Subscriptions","settings","findMentionedMessages","findStarredMessages","findSnippetedMessageById","findSnippetedMessages","findDiscussionsFromRoom","v1","addRoute","authRequired","post","bodyParams","ObjectIncluding","msgId","String","roomId","asUser","Maybe","Boolean","msg","findOneById","fields","u","rid","failure","_id","userId","runAsUser","call","success","ts","Date","now","message","get","lastUpdate","queryParams","Error","isNaN","parse","result","updated","deleted","messageId","trim","pinnedMessage","messageReturn","user","channel","searchText","offset","count","getPaginationItems","docs","messages","sent","starred","text","emoji","reaction","Promise","await","shouldReact","error","messageReadReceipts","receipts","description","ignore","test","since","cursor","trashFindDeletedAfter","skip","limit","total","fetch","length","findPinnedByRoom","type","sort","query","parseJsonQuery","room","t","typeThread","_hidden","$ne","replies","$in","findOneByRoomIdAndUserId","tunread","RegExp","threadQuery","tcount","$exists","find","tlm","threads","updatedSince","updatedSinceDate","Object","assign","update","_updatedAt","$gt","remove","tmid","thread","mid","uid","pagination"],"mappings":"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","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\n\nimport { Messages } from '../../../models';\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { processWebhookMessage } from '../../../lib/server';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\nimport { API } from '../api';\nimport Rooms from '../../../models/server/models/Rooms';\nimport Users from '../../../models/server/models/Users';\nimport Subscriptions from '../../../models/server/models/Subscriptions';\nimport { settings } from '../../../settings/server';\nimport {\n\tfindMentionedMessages,\n\tfindStarredMessages,\n\tfindSnippetedMessageById,\n\tfindSnippetedMessages,\n\tfindDiscussionsFromRoom,\n} from '../lib/messages';\n\nAPI.v1.addRoute(\n\t'chat.delete',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tmsgId: String,\n\t\t\t\t\troomId: String,\n\t\t\t\t\tasUser: Match.Maybe(Boolean),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.msgId, { fields: { u: 1, rid: 1 } });\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.asUser && msg.u._id !== this.userId && !hasPermission(this.userId, 'force-delete-message', msg.rid)) {\n\t\t\t\treturn API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.bodyParams.asUser ? msg.u._id : this.userId, () => {\n\t\t\t\tMeteor.call('deleteMessage', { _id: msg._id });\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: msg._id,\n\t\t\t\tts: Date.now(),\n\t\t\t\tmessage: msg,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId, lastUpdate } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!lastUpdate) {\n\t\t\t\tthrow new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(lastUpdate))) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tlet result;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tresult = Meteor.call('messages/get', roomId, { lastUpdate: new Date(lastUpdate) });\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: {\n\t\t\t\t\tupdated: normalizeMessagesForUser(result.updated, this.userId),\n\t\t\t\t\tdeleted: result.deleted,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMessage',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tif (!this.queryParams.msgId) {\n\t\t\t\treturn API.v1.failure('The \"msgId\" query parameter must be provided.');\n\t\t\t}\n\n\t\t\tlet msg;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tmsg = Meteor.call('getSingleMessage', this.queryParams.msgId);\n\t\t\t});\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tconst [message] = normalizeMessagesForUser([msg], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.pinMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tlet pinnedMessage;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tpinnedMessage = Meteor.call('pinMessage', msg);\n\t\t\t});\n\n\t\t\tconst [message] = normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst messageReturn = processWebhookMessage(this.bodyParams, this.user)[0];\n\n\t\t\tif (!messageReturn) {\n\t\t\t\treturn API.v1.failure('unknown-error');\n\t\t\t}\n\n\t\t\tconst [message] = normalizeMessagesForUser([messageReturn.message], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tts: Date.now(),\n\t\t\t\tchannel: messageReturn.channel,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.search',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId, searchText } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!searchText) {\n\t\t\t\tthrow new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n\t\t\t}\n\n\t\t\tlet result;\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tresult = Meteor.call('messageSearch', searchText, roomId, count, offset).message.docs;\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.message) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n\t\t\t}\n\n\t\t\tconst sent = executeSendMessage(this.userId, this.bodyParams.message);\n\t\t\tconst [message] = normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('starMessage', {\n\t\t\t\t\t_id: msg._id,\n\t\t\t\t\trid: msg.rid,\n\t\t\t\t\tstarred: true,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unPinMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('unpinMessage', msg));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unStarMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () =>\n\t\t\t\tMeteor.call('starMessage', {\n\t\t\t\t\t_id: msg._id,\n\t\t\t\t\trid: msg.rid,\n\t\t\t\t\tstarred: false,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.update',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\troomId: String,\n\t\t\t\t\tmsgId: String,\n\t\t\t\t\ttext: String, // Using text to be consistant with chat.postMessage\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.msgId);\n\n\t\t\t// Ensure the message exists\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\t// Permission checks are already done in the updateMessage method, so no need to duplicate them\n\t\t\tMeteor.runAsUser(this.userId, () => {\n\t\t\t\tMeteor.call('updateMessage', { _id: msg._id, msg: this.bodyParams.text, rid: msg.rid });\n\t\t\t});\n\n\t\t\tconst [message] = normalizeMessagesForUser([Messages.findOneById(msg._id)], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tif (!this.bodyParams.messageId || !this.bodyParams.messageId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst emoji = this.bodyParams.emoji || this.bodyParams.reaction;\n\n\t\t\tif (!emoji) {\n\t\t\t\tthrow new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Promise.await(executeSetReaction(emoji, msg._id, this.bodyParams.shouldReact)));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMessageReadReceipts',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { messageId } = this.queryParams;\n\t\t\tif (!messageId) {\n\t\t\t\treturn API.v1.failure({\n\t\t\t\t\terror: \"The required 'messageId' param is missing.\",\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst messageReadReceipts = Meteor.runAsUser(this.userId, () => Meteor.call('getReadReceipts', { messageId }));\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treceipts: messageReadReceipts,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\treturn API.v1.failure({\n\t\t\t\t\terror: error.message,\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.reportMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { messageId, description } = this.bodyParams;\n\t\t\tif (!messageId) {\n\t\t\t\treturn API.v1.failure('The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!description) {\n\t\t\t\treturn API.v1.failure('The required \"description\" param is missing.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('reportMessage', messageId, description));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.ignoreUser',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { rid, userId } = this.queryParams;\n\t\t\tlet { ignore = true } = this.queryParams;\n\n\t\t\tignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n\n\t\t\tif (!rid || !rid.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!userId || !userId.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n\t\t\t}\n\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('ignoreUser', { rid, userId, ignore }));\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDeletedMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId, since } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!since) {\n\t\t\t\tthrow new Meteor.Error('The required \"since\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(since))) {\n\t\t\t\tthrow new Meteor.Error('The \"since\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst cursor = Messages.trashFindDeletedAfter(\n\t\t\t\tnew Date(since),\n\t\t\t\t{ rid: roomId },\n\t\t\t\t{\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields: { _id: 1 },\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst total = cursor.count();\n\n\t\t\tconst messages = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getPinnedMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!canAccessRoom({ _id: roomId }, { _id: this.userId })) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst cursor = Messages.findPinnedByRoom(roomId, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\n\t\t\tconst messages = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadsList',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { rid, type, text } = this.queryParams;\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields, query } = this.parseJsonQuery();\n\n\t\t\tif (!rid) {\n\t\t\t\tthrow new Meteor.Error('The required \"rid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tconst user = Users.findOneById(this.userId, { fields: { _id: 1 } });\n\t\t\tconst room = Rooms.findOneById(rid, { fields: { t: 1, _id: 1 } });\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst typeThread = {\n\t\t\t\t_hidden: { $ne: true },\n\t\t\t\t...(type === 'following' && { replies: { $in: [this.userId] } }),\n\t\t\t\t...(type === 'unread' && {\n\t\t\t\t\t_id: { $in: Subscriptions.findOneByRoomIdAndUserId(room._id, user._id).tunread },\n\t\t\t\t}),\n\t\t\t\tmsg: new RegExp(escapeRegExp(text), 'i'),\n\t\t\t};\n\n\t\t\tconst threadQuery = { ...query, ...typeThread, rid, tcount: { $exists: true } };\n\t\t\tconst cursor = Messages.find(threadQuery, {\n\t\t\t\tsort: sort || { tlm: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tfields,\n\t\t\t});\n\n\t\t\tconst total = cursor.count();\n\n\t\t\tconst threads = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads,\n\t\t\t\tcount: threads.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadsList',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!rid) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst user = Users.findOneById(this.userId, { fields: { _id: 1 } });\n\t\t\tconst room = Rooms.findOneById(rid, { fields: { t: 1, _id: 1 } });\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst threadQuery = Object.assign({}, query, { rid, tcount: { $exists: true } });\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: {\n\t\t\t\t\tupdate: Messages.find({ ...threadQuery, _updatedAt: { $gt: updatedSinceDate } }, { fields, sort }).fetch(),\n\t\t\t\t\tremove: Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n\t\t\t\t\t\tfields,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t}).fetch(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = this.parseJsonQuery();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tconst thread = Messages.findOneById(tmid, { fields: { rid: 1 } });\n\t\t\tif (!thread || !thread.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = Users.findOneById(this.userId, { fields: { _id: 1 } });\n\t\t\tconst room = Rooms.findOneById(thread.rid, { fields: { t: 1, _id: 1 } });\n\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst cursor = Messages.find(\n\t\t\t\t{ ...query, tmid },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tfields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst total = cursor.count();\n\n\t\t\tconst messages = cursor.fetch();\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst thread = Messages.findOneById(tmid, { fields: { rid: 1 } });\n\t\t\tif (!thread || !thread.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = Users.findOneById(this.userId, { fields: { _id: 1 } });\n\t\t\tconst room = Rooms.findOneById(thread.rid, { fields: { t: 1, _id: 1 } });\n\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: {\n\t\t\t\t\tupdate: Messages.find({ ...query, tmid, _updatedAt: { $gt: updatedSinceDate } }, { fields, sort }).fetch(),\n\t\t\t\t\tremove: Messages.trashFindDeletedAfter(updatedSinceDate, { ...query, tmid }, { fields, sort }).fetch(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.followMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('followMessage', { mid }));\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unfollowMessage',\n\t{ authRequired: true },\n\t{\n\t\tpost() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\t\t\tMeteor.runAsUser(this.userId, () => Meteor.call('unfollowMessage', { mid }));\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMentionedMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = Promise.await(\n\t\t\t\tfindMentionedMessages({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\troomId,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getStarredMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = Promise.await(\n\t\t\t\tfindStarredMessages({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\troomId,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tmessages.messages = normalizeMessagesForUser(messages.messages, this.userId);\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getSnippetedMessageById',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { messageId } = this.queryParams;\n\n\t\t\tif (!messageId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"messageId\" query param is missing.');\n\t\t\t}\n\t\t\tconst message = Promise.await(\n\t\t\t\tfindSnippetedMessageById({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tmessageId,\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn API.v1.success(message);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getSnippetedMessages',\n\t{ authRequired: true },\n\t{\n\t\tget() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = Promise.await(\n\t\t\t\tfindSnippetedMessages({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\troomId,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, text } = this.queryParams;\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n"]},"sourceType":"module","hash":"9caacb79d331e3f1a80b86a7c4f1f959adab9ce9"}
