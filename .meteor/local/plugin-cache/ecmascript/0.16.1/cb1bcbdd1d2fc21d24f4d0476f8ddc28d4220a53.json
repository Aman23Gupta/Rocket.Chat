{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/file-upload/server/config/GridFS.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/file-upload/server/config/GridFS.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/file-upload/server/config/GridFS.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/file-upload/server/config/GridFS.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/file-upload/server/config/GridFS.js"}},"code":"let stream;\nmodule.link(\"stream\", {\n  default(v) {\n    stream = v;\n  }\n\n}, 0);\nlet zlib;\nmodule.link(\"zlib\", {\n  default(v) {\n    zlib = v;\n  }\n\n}, 1);\nlet util;\nmodule.link(\"util\", {\n  default(v) {\n    util = v;\n  }\n\n}, 2);\nlet UploadFS;\nmodule.link(\"meteor/jalik:ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 3);\nlet Logger;\nmodule.link(\"../../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 4);\nlet FileUploadClass, FileUpload;\nmodule.link(\"../lib/FileUpload\", {\n  FileUploadClass(v) {\n    FileUploadClass = v;\n  },\n\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 5);\nlet getFileRange, setRangeHeaders;\nmodule.link(\"../lib/ranges\", {\n  getFileRange(v) {\n    getFileRange = v;\n  },\n\n  setRangeHeaders(v) {\n    setRangeHeaders = v;\n  }\n\n}, 6);\nconst logger = new Logger('FileUpload');\n\nfunction ExtractRange(options) {\n  if (!(this instanceof ExtractRange)) {\n    return new ExtractRange(options);\n  }\n\n  this.start = options.start;\n  this.stop = options.stop;\n  this.bytes_read = 0;\n  stream.Transform.call(this, options);\n}\n\nutil.inherits(ExtractRange, stream.Transform);\n\nExtractRange.prototype._transform = function (chunk, enc, cb) {\n  if (this.bytes_read > this.stop) {\n    // done reading\n    this.end();\n  } else if (this.bytes_read + chunk.length < this.start) {// this chunk is still before the start byte\n  } else {\n    let start;\n    let stop;\n\n    if (this.start <= this.bytes_read) {\n      start = 0;\n    } else {\n      start = this.start - this.bytes_read;\n    }\n\n    if (this.stop - this.bytes_read + 1 < chunk.length) {\n      stop = this.stop - this.bytes_read + 1;\n    } else {\n      stop = chunk.length;\n    }\n\n    const newchunk = chunk.slice(start, stop);\n    this.push(newchunk);\n  }\n\n  this.bytes_read += chunk.length;\n  cb();\n}; // code from: https://github.com/jalik/jalik-ufs/blob/master/ufs-server.js#L310\n\n\nconst readFromGridFS = function (storeName, fileId, file, req, res) {\n  const store = UploadFS.getStore(storeName);\n  const rs = store.getReadStream(fileId, file);\n  const ws = new stream.PassThrough();\n  [rs, ws].forEach(stream => stream.on('error', function (err) {\n    store.onReadError.call(store, err, fileId, file);\n    res.end();\n  }));\n  ws.on('close', function () {\n    // Close output stream at the end\n    ws.emit('end');\n  }); // Transform stream\n\n  store.transformRead(rs, ws, fileId, file, req);\n  const range = getFileRange(file, req);\n\n  if (range) {\n    setRangeHeaders(range, file, res);\n\n    if (range.outOfRange) {\n      return;\n    }\n\n    logger.debug('File upload extracting range');\n    ws.pipe(new ExtractRange({\n      start: range.start,\n      stop: range.stop\n    })).pipe(res);\n    return;\n  }\n\n  const accept = req.headers['accept-encoding'] || ''; // Compress data using gzip\n\n  if (accept.match(/\\bgzip\\b/)) {\n    res.setHeader('Content-Encoding', 'gzip');\n    res.removeHeader('Content-Length');\n    res.writeHead(200);\n    ws.pipe(zlib.createGzip()).pipe(res);\n    return;\n  } // Compress data using deflate\n\n\n  if (accept.match(/\\bdeflate\\b/)) {\n    res.setHeader('Content-Encoding', 'deflate');\n    res.removeHeader('Content-Length');\n    res.writeHead(200);\n    ws.pipe(zlib.createDeflate()).pipe(res);\n    return;\n  }\n\n  res.writeHead(200);\n  ws.pipe(res);\n};\n\nconst copyFromGridFS = function (storeName, fileId, file, out) {\n  const store = UploadFS.getStore(storeName);\n  const rs = store.getReadStream(fileId, file);\n  [rs, out].forEach(stream => stream.on('error', function (err) {\n    store.onReadError.call(store, err, fileId, file);\n    out.end();\n  }));\n  rs.pipe(out);\n};\n\nFileUpload.configureUploadsStore('GridFS', 'GridFS:Uploads', {\n  collectionName: 'rocketchat_uploads'\n});\nFileUpload.configureUploadsStore('GridFS', 'GridFS:UserDataFiles', {\n  collectionName: 'rocketchat_userDataFiles'\n}); // DEPRECATED: backwards compatibility (remove)\n\nUploadFS.getStores().rocketchat_uploads = UploadFS.getStores()['GridFS:Uploads'];\nFileUpload.configureUploadsStore('GridFS', 'GridFS:Avatars', {\n  collectionName: 'rocketchat_avatars'\n});\nnew FileUploadClass({\n  name: 'GridFS:Uploads',\n\n  get(file, req, res) {\n    file = FileUpload.addExtensionTo(file);\n    res.setHeader('Content-Disposition', \"attachment; filename*=UTF-8''\".concat(encodeURIComponent(file.name)));\n    res.setHeader('Last-Modified', file.uploadedAt.toUTCString());\n    res.setHeader('Content-Type', file.type || 'application/octet-stream');\n    res.setHeader('Content-Length', file.size);\n    return readFromGridFS(file.store, file._id, file, req, res);\n  },\n\n  copy(file, out) {\n    copyFromGridFS(file.store, file._id, file, out);\n  }\n\n});\nnew FileUploadClass({\n  name: 'GridFS:UserDataFiles',\n\n  get(file, req, res) {\n    file = FileUpload.addExtensionTo(file);\n    res.setHeader('Content-Disposition', \"attachment; filename*=UTF-8''\".concat(encodeURIComponent(file.name)));\n    res.setHeader('Last-Modified', file.uploadedAt.toUTCString());\n    res.setHeader('Content-Type', file.type);\n    res.setHeader('Content-Length', file.size);\n    return readFromGridFS(file.store, file._id, file, req, res);\n  },\n\n  copy(file, out) {\n    copyFromGridFS(file.store, file._id, file, out);\n  }\n\n});\nnew FileUploadClass({\n  name: 'GridFS:Avatars',\n\n  get(file, req, res) {\n    file = FileUpload.addExtensionTo(file);\n    return readFromGridFS(file.store, file._id, file, req, res);\n  },\n\n  copy(file, out) {\n    copyFromGridFS(file.store, file._id, file, out);\n  }\n\n});","map":{"version":3,"sources":["app/file-upload/server/config/GridFS.js"],"names":["stream","module","link","default","v","zlib","util","UploadFS","Logger","FileUploadClass","FileUpload","getFileRange","setRangeHeaders","logger","ExtractRange","options","start","stop","bytes_read","Transform","call","inherits","prototype","_transform","chunk","enc","cb","end","length","newchunk","slice","push","readFromGridFS","storeName","fileId","file","req","res","store","getStore","rs","getReadStream","ws","PassThrough","forEach","on","err","onReadError","emit","transformRead","range","outOfRange","debug","pipe","accept","headers","match","setHeader","removeHeader","writeHead","createGzip","createDeflate","copyFromGridFS","out","configureUploadsStore","collectionName","getStores","rocketchat_uploads","name","get","addExtensionTo","encodeURIComponent","uploadedAt","toUTCString","type","size","_id","copy"],"mappings":"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","sourcesContent":["import stream from 'stream';\nimport zlib from 'zlib';\nimport util from 'util';\n\nimport { UploadFS } from 'meteor/jalik:ufs';\n\nimport { Logger } from '../../../logger';\nimport { FileUploadClass, FileUpload } from '../lib/FileUpload';\nimport { getFileRange, setRangeHeaders } from '../lib/ranges';\n\nconst logger = new Logger('FileUpload');\n\nfunction ExtractRange(options) {\n\tif (!(this instanceof ExtractRange)) {\n\t\treturn new ExtractRange(options);\n\t}\n\n\tthis.start = options.start;\n\tthis.stop = options.stop;\n\tthis.bytes_read = 0;\n\n\tstream.Transform.call(this, options);\n}\nutil.inherits(ExtractRange, stream.Transform);\n\nExtractRange.prototype._transform = function (chunk, enc, cb) {\n\tif (this.bytes_read > this.stop) {\n\t\t// done reading\n\t\tthis.end();\n\t} else if (this.bytes_read + chunk.length < this.start) {\n\t\t// this chunk is still before the start byte\n\t} else {\n\t\tlet start;\n\t\tlet stop;\n\n\t\tif (this.start <= this.bytes_read) {\n\t\t\tstart = 0;\n\t\t} else {\n\t\t\tstart = this.start - this.bytes_read;\n\t\t}\n\t\tif (this.stop - this.bytes_read + 1 < chunk.length) {\n\t\t\tstop = this.stop - this.bytes_read + 1;\n\t\t} else {\n\t\t\tstop = chunk.length;\n\t\t}\n\t\tconst newchunk = chunk.slice(start, stop);\n\t\tthis.push(newchunk);\n\t}\n\tthis.bytes_read += chunk.length;\n\tcb();\n};\n\n// code from: https://github.com/jalik/jalik-ufs/blob/master/ufs-server.js#L310\nconst readFromGridFS = function (storeName, fileId, file, req, res) {\n\tconst store = UploadFS.getStore(storeName);\n\tconst rs = store.getReadStream(fileId, file);\n\tconst ws = new stream.PassThrough();\n\n\t[rs, ws].forEach((stream) =>\n\t\tstream.on('error', function (err) {\n\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\tres.end();\n\t\t}),\n\t);\n\n\tws.on('close', function () {\n\t\t// Close output stream at the end\n\t\tws.emit('end');\n\t});\n\n\t// Transform stream\n\tstore.transformRead(rs, ws, fileId, file, req);\n\n\tconst range = getFileRange(file, req);\n\tif (range) {\n\t\tsetRangeHeaders(range, file, res);\n\n\t\tif (range.outOfRange) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('File upload extracting range');\n\t\tws.pipe(new ExtractRange({ start: range.start, stop: range.stop })).pipe(res);\n\t\treturn;\n\t}\n\n\tconst accept = req.headers['accept-encoding'] || '';\n\n\t// Compress data using gzip\n\tif (accept.match(/\\bgzip\\b/)) {\n\t\tres.setHeader('Content-Encoding', 'gzip');\n\t\tres.removeHeader('Content-Length');\n\t\tres.writeHead(200);\n\t\tws.pipe(zlib.createGzip()).pipe(res);\n\t\treturn;\n\t}\n\n\t// Compress data using deflate\n\tif (accept.match(/\\bdeflate\\b/)) {\n\t\tres.setHeader('Content-Encoding', 'deflate');\n\t\tres.removeHeader('Content-Length');\n\t\tres.writeHead(200);\n\t\tws.pipe(zlib.createDeflate()).pipe(res);\n\t\treturn;\n\t}\n\n\tres.writeHead(200);\n\tws.pipe(res);\n};\n\nconst copyFromGridFS = function (storeName, fileId, file, out) {\n\tconst store = UploadFS.getStore(storeName);\n\tconst rs = store.getReadStream(fileId, file);\n\n\t[rs, out].forEach((stream) =>\n\t\tstream.on('error', function (err) {\n\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\tout.end();\n\t\t}),\n\t);\n\n\trs.pipe(out);\n};\n\nFileUpload.configureUploadsStore('GridFS', 'GridFS:Uploads', {\n\tcollectionName: 'rocketchat_uploads',\n});\n\nFileUpload.configureUploadsStore('GridFS', 'GridFS:UserDataFiles', {\n\tcollectionName: 'rocketchat_userDataFiles',\n});\n\n// DEPRECATED: backwards compatibility (remove)\nUploadFS.getStores().rocketchat_uploads = UploadFS.getStores()['GridFS:Uploads'];\n\nFileUpload.configureUploadsStore('GridFS', 'GridFS:Avatars', {\n\tcollectionName: 'rocketchat_avatars',\n});\n\nnew FileUploadClass({\n\tname: 'GridFS:Uploads',\n\n\tget(file, req, res) {\n\t\tfile = FileUpload.addExtensionTo(file);\n\n\t\tres.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${encodeURIComponent(file.name)}`);\n\t\tres.setHeader('Last-Modified', file.uploadedAt.toUTCString());\n\t\tres.setHeader('Content-Type', file.type || 'application/octet-stream');\n\t\tres.setHeader('Content-Length', file.size);\n\n\t\treturn readFromGridFS(file.store, file._id, file, req, res);\n\t},\n\n\tcopy(file, out) {\n\t\tcopyFromGridFS(file.store, file._id, file, out);\n\t},\n});\n\nnew FileUploadClass({\n\tname: 'GridFS:UserDataFiles',\n\n\tget(file, req, res) {\n\t\tfile = FileUpload.addExtensionTo(file);\n\n\t\tres.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${encodeURIComponent(file.name)}`);\n\t\tres.setHeader('Last-Modified', file.uploadedAt.toUTCString());\n\t\tres.setHeader('Content-Type', file.type);\n\t\tres.setHeader('Content-Length', file.size);\n\n\t\treturn readFromGridFS(file.store, file._id, file, req, res);\n\t},\n\n\tcopy(file, out) {\n\t\tcopyFromGridFS(file.store, file._id, file, out);\n\t},\n});\n\nnew FileUploadClass({\n\tname: 'GridFS:Avatars',\n\n\tget(file, req, res) {\n\t\tfile = FileUpload.addExtensionTo(file);\n\n\t\treturn readFromGridFS(file.store, file._id, file, req, res);\n\t},\n\n\tcopy(file, out) {\n\t\tcopyFromGridFS(file.store, file._id, file, out);\n\t},\n});\n"]},"sourceType":"module","hash":"cb1bcbdd1d2fc21d24f4d0476f8ddc28d4220a53"}
