{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/msTranslate.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/msTranslate.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/msTranslate.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/autotranslate/server/msTranslate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/msTranslate.js"}},"code":"let TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 0);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet TranslationProviderRegistry, AutoTranslate;\nmodule.link(\"./autotranslate\", {\n  TranslationProviderRegistry(v) {\n    TranslationProviderRegistry = v;\n  },\n\n  AutoTranslate(v) {\n    AutoTranslate = v;\n  }\n\n}, 3);\nlet msLogger;\nmodule.link(\"./logger\", {\n  msLogger(v) {\n    msLogger = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\n\n/**\n * Microsoft translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass MsAutoTranslate extends AutoTranslate {\n  /**\n   * setup api reference to Microsoft translate to be used as message translation provider.\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.name = 'microsoft-translate';\n    this.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n    this.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n    this.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n    this.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0'; // Get the service provide API key.\n\n    settings.watch('AutoTranslate_MicrosoftAPIKey', value => {\n      this.apiKey = value;\n    });\n  }\n  /**\n   * Returns metadata information about the service provide\n   * @private implements super abstract method.\n   * @return {object}\n   */\n\n\n  _getProviderMetadata() {\n    return {\n      name: this.name,\n      displayName: TAPi18n.__('AutoTranslate_Microsoft'),\n      settings: this._getSettings()\n    };\n  }\n  /**\n   * Returns necessary settings information about the translation service provider.\n   * @private implements super abstract method.\n   * @return {object}\n   */\n\n\n  _getSettings() {\n    return {\n      apiKey: this.apiKey,\n      apiEndPointUrl: this.apiEndPointUrl\n    };\n  }\n  /**\n   * Returns supported languages for translation by the active service provider.\n   * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n   * So each supported languages are explicitly maintained.\n   * @private implements super abstract method.\n   * @param {string} target\n   * @returns {object} code : value pair\n   */\n\n\n  getSupportedLanguages(target) {\n    if (!this.apiKey) {\n      return;\n    }\n\n    if (this.supportedLanguages[target]) {\n      return this.supportedLanguages[target];\n    }\n\n    const languages = HTTP.get(this.apiGetLanguages);\n    this.supportedLanguages[target] = Object.keys(languages.data.translation).map(language => ({\n      language,\n      name: languages.data.translation[language].name\n    }));\n    return this.supportedLanguages[target || 'en'];\n  }\n  /**\n   * Re-use method for REST API consumption of MS translate.\n   * @private\n   * @param {object} message\n   * @param {object} targetLanguages\n   * @throws Communication Errors\n   * @returns {object} translations: Translated messages for each language\n   */\n\n\n  _translate(data, targetLanguages) {\n    let translations = {};\n    const supportedLanguages = this.getSupportedLanguages('en');\n    targetLanguages = targetLanguages.map(language => {\n      if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n        language\n      })) {\n        language = language.substr(0, 2);\n      }\n\n      return language;\n    });\n    const url = \"\".concat(this.apiEndPointUrl, \"&to=\").concat(targetLanguages.join('&to='));\n    const result = HTTP.post(url, {\n      headers: {\n        'Ocp-Apim-Subscription-Key': this.apiKey,\n        'Content-Type': 'application/json; charset=UTF-8'\n      },\n      data\n    });\n\n    if (result.statusCode === 200 && result.data && result.data.length > 0) {\n      // store translation only when the source and target language are different.\n      translations = Object.assign({}, ...targetLanguages.map(language => ({\n        [language]: result.data.map(line => line.translations.find(translation => translation.to === language).text).join('\\n')\n      })));\n    }\n\n    return translations;\n  }\n  /**\n   * Returns translated message for each target language.\n   * @private\n   * @param {object} message\n   * @param {object} targetLanguages\n   * @returns {object} translations: Translated messages for each language\n   */\n\n\n  _translateMessage(message, targetLanguages) {\n    // There are multi-sentence-messages where multiple sentences come from different languages\n    // This is a problem for translation services since the language detection fails.\n    // Thus, we'll split the message in sentences, get them translated, and join them again after translation\n    const msgs = message.msg.split('\\n').map(msg => ({\n      Text: msg\n    }));\n\n    try {\n      return this._translate(msgs, targetLanguages);\n    } catch (e) {\n      msLogger.error({\n        err: e,\n        msg: 'Error translating message'\n      });\n    }\n\n    return {};\n  }\n  /**\n   * Returns translated message attachment description in target languages.\n   * @private\n   * @param {object} attachment\n   * @param {object} targetLanguages\n   * @returns {object} translated messages for each target language\n   */\n\n\n  _translateAttachmentDescriptions(attachment, targetLanguages) {\n    try {\n      return this._translate([{\n        Text: attachment.description || attachment.text\n      }], targetLanguages);\n    } catch (e) {\n      msLogger.error({\n        err: e,\n        msg: 'Error translating message attachment'\n      });\n    }\n\n    return {};\n  }\n\n} // Register Microsoft translation provider to the registry.\n\n\nTranslationProviderRegistry.registerProvider(new MsAutoTranslate());","map":{"version":3,"sources":["app/autotranslate/server/msTranslate.js"],"names":["TAPi18n","module","link","v","HTTP","_","default","TranslationProviderRegistry","AutoTranslate","msLogger","settings","MsAutoTranslate","constructor","name","apiEndPointUrl","apiDetectText","apiGetLanguages","breakSentence","watch","value","apiKey","_getProviderMetadata","displayName","__","_getSettings","getSupportedLanguages","target","supportedLanguages","languages","get","Object","keys","data","translation","map","language","_translate","targetLanguages","translations","indexOf","findWhere","substr","url","join","result","post","headers","statusCode","length","assign","line","find","to","text","_translateMessage","message","msgs","msg","split","Text","e","error","err","_translateAttachmentDescriptions","attachment","description","registerProvider"],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { HTTP } from 'meteor/http';\nimport _ from 'underscore';\n\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\nimport { msLogger } from './logger';\nimport { settings } from '../../settings/server';\n\n/**\n * Microsoft translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass MsAutoTranslate extends AutoTranslate {\n\t/**\n\t * setup api reference to Microsoft translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'microsoft-translate';\n\t\tthis.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n\t\tthis.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n\t\tthis.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n\t\tthis.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0';\n\t\t// Get the service provide API key.\n\t\tsettings.watch('AutoTranslate_MicrosoftAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: TAPi18n.__('AutoTranslate_Microsoft'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings() {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tgetSupportedLanguages(target) {\n\t\tif (!this.apiKey) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tconst languages = HTTP.get(this.apiGetLanguages);\n\t\tthis.supportedLanguages[target] = Object.keys(languages.data.translation).map((language) => ({\n\t\t\tlanguage,\n\t\t\tname: languages.data.translation[language].name,\n\t\t}));\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Re-use method for REST API consumption of MS translate.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @throws Communication Errors\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\t_translate(data, targetLanguages) {\n\t\tlet translations = {};\n\t\tconst supportedLanguages = this.getSupportedLanguages('en');\n\t\ttargetLanguages = targetLanguages.map((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\treturn language;\n\t\t});\n\t\tconst url = `${this.apiEndPointUrl}&to=${targetLanguages.join('&to=')}`;\n\t\tconst result = HTTP.post(url, {\n\t\t\theaders: {\n\t\t\t\t'Ocp-Apim-Subscription-Key': this.apiKey,\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t},\n\t\t\tdata,\n\t\t});\n\n\t\tif (result.statusCode === 200 && result.data && result.data.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...targetLanguages.map((language) => ({\n\t\t\t\t\t[language]: result.data.map((line) => line.translations.find((translation) => translation.to === language).text).join('\\n'),\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message for each target language.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\t_translateMessage(message, targetLanguages) {\n\t\t// There are multi-sentence-messages where multiple sentences come from different languages\n\t\t// This is a problem for translation services since the language detection fails.\n\t\t// Thus, we'll split the message in sentences, get them translated, and join them again after translation\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\ttry {\n\t\t\treturn this._translate(msgs, targetLanguages);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message' });\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\t_translateAttachmentDescriptions(attachment, targetLanguages) {\n\t\ttry {\n\t\t\treturn this._translate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tText: attachment.description || attachment.text,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttargetLanguages,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message attachment' });\n\t\t}\n\t\treturn {};\n\t}\n}\n\n// Register Microsoft translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new MsAutoTranslate());\n"]},"sourceType":"module","hash":"b2748984b4aa382245cff9949b12c11e9b3966a8"}
