{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/streamBroadcast.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/stream/streamBroadcast.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/streamBroadcast.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/stream/streamBroadcast.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/stream/streamBroadcast.js"}},"code":"!function (module1) {\n  module1.export({\n    connLogger: () => connLogger,\n    authLogger: () => authLogger,\n    streamLogger: () => streamLogger,\n    matrixBroadCastActions: () => matrixBroadCastActions,\n    startStreamBroadcast: () => startStreamBroadcast,\n    getInstanceConnection: () => getInstanceConnection\n  });\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n\n  }, 0);\n  let UserPresence;\n  module1.link(\"meteor/konecty:user-presence\", {\n    UserPresence(v) {\n      UserPresence = v;\n    }\n\n  }, 1);\n  let InstanceStatus;\n  module1.link(\"meteor/konecty:multiple-instances-status\", {\n    InstanceStatus(v) {\n      InstanceStatus = v;\n    }\n\n  }, 2);\n  let check;\n  module1.link(\"meteor/check\", {\n    check(v) {\n      check = v;\n    }\n\n  }, 3);\n  let DDP;\n  module1.link(\"meteor/ddp\", {\n    DDP(v) {\n      DDP = v;\n    }\n\n  }, 4);\n  let Logger;\n  module1.link(\"../lib/logger/Logger\", {\n    Logger(v) {\n      Logger = v;\n    }\n\n  }, 5);\n  let hasPermission;\n  module1.link(\"../../app/authorization/server\", {\n    hasPermission(v) {\n      hasPermission = v;\n    }\n\n  }, 6);\n  let settings;\n  module1.link(\"../../app/settings/server\", {\n    settings(v) {\n      settings = v;\n    }\n\n  }, 7);\n  let isDocker, getURL;\n  module1.link(\"../../app/utils/server\", {\n    isDocker(v) {\n      isDocker = v;\n    },\n\n    getURL(v) {\n      getURL = v;\n    }\n\n  }, 8);\n  let Users;\n  module1.link(\"../../app/models/server\", {\n    Users(v) {\n      Users = v;\n    }\n\n  }, 9);\n  let InstanceStatusRaw;\n  module1.link(\"../../app/models/server/raw\", {\n    InstanceStatus(v) {\n      InstanceStatusRaw = v;\n    }\n\n  }, 10);\n  let StreamerCentral;\n  module1.link(\"../modules/streamer/streamer.module\", {\n    StreamerCentral(v) {\n      StreamerCentral = v;\n    }\n\n  }, 11);\n  let isPresenceMonitorEnabled;\n  module1.link(\"../lib/isPresenceMonitorEnabled\", {\n    isPresenceMonitorEnabled(v) {\n      isPresenceMonitorEnabled = v;\n    }\n\n  }, 12);\n  process.env.PORT = String(process.env.PORT).trim();\n  process.env.INSTANCE_IP = String(process.env.INSTANCE_IP).trim();\n  const connections = {};\n  this.connections = connections;\n  const logger = new Logger('StreamBroadcast');\n  const connLogger = logger.section('Connection');\n  const authLogger = logger.section('Auth');\n  const streamLogger = logger.section('Stream');\n\n  function _authorizeConnection(instance) {\n    authLogger.info(\"Authorizing with \".concat(instance));\n    return connections[instance].call('broadcastAuth', InstanceStatus.id(), connections[instance].instanceId, function (err, ok) {\n      if (err != null) {\n        return authLogger.error({\n          msg: \"broadcastAuth error \".concat(instance, \" \").concat(InstanceStatus.id(), \" \").concat(connections[instance].instanceId),\n          err\n        });\n      }\n\n      connections[instance].broadcastAuth = ok;\n      return authLogger.info({\n        msg: \"broadcastAuth with \".concat(instance),\n        ok\n      });\n    });\n  }\n\n  function authorizeConnection(instance) {\n    const query = {\n      _id: InstanceStatus.id()\n    };\n\n    if (!InstanceStatus.getCollection().findOne(query)) {\n      return Meteor.setTimeout(function () {\n        return authorizeConnection(instance);\n      }, 500);\n    }\n\n    return _authorizeConnection(instance);\n  }\n\n  const cache = new Map();\n  const originalSetDefaultStatus = UserPresence.setDefaultStatus;\n  let matrixBroadCastActions;\n\n  function startMatrixBroadcast() {\n    if (!isPresenceMonitorEnabled()) {\n      UserPresence.setDefaultStatus = originalSetDefaultStatus;\n    }\n\n    module1.runSetters(matrixBroadCastActions = {\n      added: Meteor.bindEnvironment(record => {\n        cache.set(record._id, record);\n        const subPath = getURL('', {\n          cdn: false,\n          full: false\n        });\n        let instance = \"\".concat(record.extraInformation.host, \":\").concat(record.extraInformation.port).concat(subPath);\n\n        if (record.extraInformation.port === process.env.PORT && record.extraInformation.host === process.env.INSTANCE_IP) {\n          authLogger.info({\n            msg: 'prevent self connect',\n            instance\n          });\n          return;\n        }\n\n        if (record.extraInformation.host === process.env.INSTANCE_IP && isDocker() === false) {\n          instance = \"localhost:\".concat(record.extraInformation.port).concat(subPath);\n        }\n\n        if (connections[instance] && connections[instance].instanceRecord) {\n          if (connections[instance].instanceRecord._createdAt < record._createdAt) {\n            connections[instance].disconnect();\n            delete connections[instance];\n          } else {\n            return;\n          }\n        }\n\n        connLogger.info({\n          msg: 'connecting in',\n          instance\n        });\n        connections[instance] = DDP.connect(instance, {\n          _dontPrintErrors: settings.get('Log_Level') !== '2'\n        }); // remove not relevant info from instance record\n\n        delete record.extraInformation.os;\n        connections[instance].instanceRecord = record;\n        connections[instance].instanceId = record._id;\n\n        connections[instance].onReconnect = function () {\n          return authorizeConnection(instance);\n        };\n      }),\n\n      removed(id) {\n        const record = cache.get(id);\n\n        if (!record) {\n          return;\n        }\n\n        cache.delete(id);\n        const subPath = getURL('', {\n          cdn: false,\n          full: false\n        });\n        let instance = \"\".concat(record.extraInformation.host, \":\").concat(record.extraInformation.port).concat(subPath);\n\n        if (record.extraInformation.host === process.env.INSTANCE_IP && isDocker() === false) {\n          instance = \"localhost:\".concat(record.extraInformation.port).concat(subPath);\n        }\n\n        const query = {\n          'extraInformation.host': record.extraInformation.host,\n          'extraInformation.port': record.extraInformation.port\n        };\n\n        if (connections[instance] && !InstanceStatus.getCollection().findOne(query)) {\n          connLogger.info({\n            msg: 'disconnecting from',\n            instance\n          });\n          connections[instance].disconnect();\n          return delete connections[instance];\n        }\n      }\n\n    }, [\"matrixBroadCastActions\"]);\n    InstanceStatusRaw.find({\n      'extraInformation.port': {\n        $exists: true\n      }\n    }, {\n      sort: {\n        _createdAt: -1\n      }\n    }).forEach(matrixBroadCastActions.added);\n  }\n\n  function startStreamCastBroadcast(value) {\n    const instance = 'StreamCast';\n    connLogger.info({\n      msg: 'connecting in',\n      instance,\n      value\n    });\n\n    if (!isPresenceMonitorEnabled()) {\n      UserPresence.setDefaultStatus = (id, status) => {\n        Users.updateDefaultStatus(id, status);\n      };\n    }\n\n    const connection = DDP.connect(value, {\n      _dontPrintErrors: settings.get('Log_Level') !== '2'\n    });\n    connections[instance] = connection;\n    connection.instanceId = instance;\n    connection.instanceRecord = {};\n\n    connection.onReconnect = function () {\n      return authorizeConnection(instance);\n    };\n\n    connection.registerStore('broadcast-stream', {\n      update(_ref) {\n        let {\n          fields\n        } = _ref;\n        const {\n          streamName,\n          eventName,\n          args\n        } = fields;\n\n        if (!streamName || !eventName || !args) {\n          return;\n        }\n\n        if (connection.broadcastAuth !== true) {\n          return 'not-authorized';\n        }\n\n        const instance = StreamerCentral.instances[streamName];\n\n        if (!instance) {\n          return 'stream-not-exists';\n        }\n\n        if (instance.serverOnly) {\n          return instance.__emit(eventName, ...args);\n        }\n\n        return instance._emit(eventName, args);\n      }\n\n    });\n    return connection.subscribe('stream');\n  }\n\n  function startStreamBroadcast() {\n    if (!process.env.INSTANCE_IP) {\n      process.env.INSTANCE_IP = 'localhost';\n    }\n\n    logger.info('startStreamBroadcast');\n    settings.watch('Stream_Cast_Address', function (value) {\n      // var connection, fn, instance;\n      const fn = function (instance, connection) {\n        connection.disconnect();\n        return delete connections[instance];\n      };\n\n      for (const instance of Object.keys(connections)) {\n        const connection = connections[instance];\n        fn(instance, connection);\n      }\n\n      if (value && value.trim() !== '') {\n        return startStreamCastBroadcast(value);\n      }\n\n      return startMatrixBroadcast();\n    });\n\n    function broadcast(streamName, eventName, args\n    /* , userId*/\n    ) {\n      const fromInstance = \"\".concat(process.env.INSTANCE_IP, \":\").concat(process.env.PORT);\n      const results = [];\n\n      for (const instance of Object.keys(connections)) {\n        const connection = connections[instance];\n\n        if (connection.status().connected === true) {\n          connection.call('stream', streamName, eventName, args, function (error, response) {\n            if (error) {\n              logger.error({\n                msg: 'Stream broadcast error',\n                err: error\n              });\n            }\n\n            switch (response) {\n              case 'self-not-authorized':\n                streamLogger.error(\"Stream broadcast from '\".concat(fromInstance, \"' to '\").concat(connection._stream.endpoint, \"' with name \").concat(streamName, \" to self is not authorized\"));\n                streamLogger.debug({\n                  msg: 'self-not-authorized',\n                  broadcastAuth: connection.broadcastAuth,\n                  status: connection.status(),\n                  eventName,\n                  args\n                });\n                return;\n\n              case 'not-authorized':\n                streamLogger.error(\"Stream broadcast from '\".concat(fromInstance, \"' to '\").concat(connection._stream.endpoint, \"' with name \").concat(streamName, \" not authorized\"));\n                streamLogger.debug({\n                  msg: 'not-authorized',\n                  broadcastAuth: connection.broadcastAuth,\n                  status: connection.status(),\n                  eventName,\n                  args\n                });\n                return authorizeConnection(instance);\n\n              case 'stream-not-exists':\n                streamLogger.error(\"Stream broadcast from '\".concat(fromInstance, \"' to '\").concat(connection._stream.endpoint, \"' with name \").concat(streamName, \" does not exist\"));\n                streamLogger.debug({\n                  msg: 'stream-not-exists',\n                  broadcastAuth: connection.broadcastAuth,\n                  status: connection.status(),\n                  eventName,\n                  args\n                });\n            }\n          });\n        }\n      }\n\n      return results;\n    }\n\n    const onBroadcast = Meteor.bindEnvironment(broadcast);\n    let TroubleshootDisableInstanceBroadcast;\n    settings.watch('Troubleshoot_Disable_Instance_Broadcast', value => {\n      if (TroubleshootDisableInstanceBroadcast === value) {\n        return;\n      }\n\n      TroubleshootDisableInstanceBroadcast = value;\n\n      if (value) {\n        return StreamerCentral.removeListener('broadcast', onBroadcast);\n      }\n\n      StreamerCentral.on('broadcast', onBroadcast);\n    });\n  }\n\n  function getConnection(address) {\n    const conn = connections[address];\n\n    if (!conn) {\n      return;\n    }\n\n    const {\n      instanceRecord,\n      broadcastAuth\n    } = conn;\n    return {\n      address,\n      currentStatus: conn._stream.currentStatus,\n      instanceRecord,\n      broadcastAuth\n    };\n  }\n\n  function getInstanceConnection(instance) {\n    const subPath = getURL('', {\n      cdn: false,\n      full: false\n    });\n    const address = \"\".concat(instance.extraInformation.host, \":\").concat(instance.extraInformation.port).concat(subPath);\n    return getConnection(address);\n  }\n\n  Meteor.methods({\n    'broadcastAuth'(remoteId, selfId) {\n      check(selfId, String);\n      check(remoteId, String);\n      const query = {\n        _id: remoteId\n      };\n\n      if (selfId === InstanceStatus.id() && remoteId !== InstanceStatus.id() && InstanceStatus.getCollection().findOne(query)) {\n        this.connection.broadcastAuth = true;\n      }\n\n      return this.connection.broadcastAuth === true;\n    },\n\n    'stream'(streamName, eventName, args) {\n      if (!this.connection) {\n        return 'self-not-authorized';\n      }\n\n      if (this.connection.broadcastAuth !== true) {\n        return 'not-authorized';\n      }\n\n      const instance = StreamerCentral.instances[streamName];\n\n      if (!instance) {\n        return 'stream-not-exists';\n      }\n\n      if (instance.serverOnly) {\n        instance.__emit(eventName, ...args);\n      } else {\n        StreamerCentral.instances[streamName]._emit(eventName, args);\n      }\n    },\n\n    'instances/get'() {\n      if (!hasPermission(Meteor.userId(), 'view-statistics')) {\n        throw new Meteor.Error('error-action-not-allowed', 'List instances is not allowed', {\n          method: 'instances/get'\n        });\n      }\n\n      return Object.keys(connections).map(getConnection);\n    }\n\n  });\n}.call(this, module);","map":{"version":3,"sources":["server/stream/streamBroadcast.js"],"names":["module1","export","connLogger","authLogger","streamLogger","matrixBroadCastActions","startStreamBroadcast","getInstanceConnection","Meteor","link","v","UserPresence","InstanceStatus","check","DDP","Logger","hasPermission","settings","isDocker","getURL","Users","InstanceStatusRaw","StreamerCentral","isPresenceMonitorEnabled","process","env","PORT","String","trim","INSTANCE_IP","connections","logger","section","_authorizeConnection","instance","info","call","id","instanceId","err","ok","error","msg","broadcastAuth","authorizeConnection","query","_id","getCollection","findOne","setTimeout","cache","Map","originalSetDefaultStatus","setDefaultStatus","startMatrixBroadcast","added","bindEnvironment","record","set","subPath","cdn","full","extraInformation","host","port","instanceRecord","_createdAt","disconnect","connect","_dontPrintErrors","get","os","onReconnect","removed","delete","find","$exists","sort","forEach","startStreamCastBroadcast","value","status","updateDefaultStatus","connection","registerStore","update","fields","streamName","eventName","args","instances","serverOnly","__emit","_emit","subscribe","watch","fn","Object","keys","broadcast","fromInstance","results","connected","response","_stream","endpoint","debug","onBroadcast","TroubleshootDisableInstanceBroadcast","removeListener","on","getConnection","address","conn","currentStatus","methods","remoteId","selfId","userId","Error","method","map"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { UserPresence } from 'meteor/konecty:user-presence';\nimport { InstanceStatus } from 'meteor/konecty:multiple-instances-status';\nimport { check } from 'meteor/check';\nimport { DDP } from 'meteor/ddp';\n\nimport { Logger } from '../lib/logger/Logger';\nimport { hasPermission } from '../../app/authorization/server';\nimport { settings } from '../../app/settings/server';\nimport { isDocker, getURL } from '../../app/utils/server';\nimport { Users } from '../../app/models/server';\nimport { InstanceStatus as InstanceStatusRaw } from '../../app/models/server/raw';\nimport { StreamerCentral } from '../modules/streamer/streamer.module';\nimport { isPresenceMonitorEnabled } from '../lib/isPresenceMonitorEnabled';\n\nprocess.env.PORT = String(process.env.PORT).trim();\nprocess.env.INSTANCE_IP = String(process.env.INSTANCE_IP).trim();\n\nconst connections = {};\nthis.connections = connections;\n\nconst logger = new Logger('StreamBroadcast');\n\nexport const connLogger = logger.section('Connection');\nexport const authLogger = logger.section('Auth');\nexport const streamLogger = logger.section('Stream');\n\nfunction _authorizeConnection(instance) {\n\tauthLogger.info(`Authorizing with ${instance}`);\n\n\treturn connections[instance].call('broadcastAuth', InstanceStatus.id(), connections[instance].instanceId, function (err, ok) {\n\t\tif (err != null) {\n\t\t\treturn authLogger.error({\n\t\t\t\tmsg: `broadcastAuth error ${instance} ${InstanceStatus.id()} ${connections[instance].instanceId}`,\n\t\t\t\terr,\n\t\t\t});\n\t\t}\n\n\t\tconnections[instance].broadcastAuth = ok;\n\t\treturn authLogger.info({ msg: `broadcastAuth with ${instance}`, ok });\n\t});\n}\n\nfunction authorizeConnection(instance) {\n\tconst query = {\n\t\t_id: InstanceStatus.id(),\n\t};\n\n\tif (!InstanceStatus.getCollection().findOne(query)) {\n\t\treturn Meteor.setTimeout(function () {\n\t\t\treturn authorizeConnection(instance);\n\t\t}, 500);\n\t}\n\n\treturn _authorizeConnection(instance);\n}\n\nconst cache = new Map();\nconst originalSetDefaultStatus = UserPresence.setDefaultStatus;\nexport let matrixBroadCastActions;\nfunction startMatrixBroadcast() {\n\tif (!isPresenceMonitorEnabled()) {\n\t\tUserPresence.setDefaultStatus = originalSetDefaultStatus;\n\t}\n\n\tmatrixBroadCastActions = {\n\t\tadded: Meteor.bindEnvironment((record) => {\n\t\t\tcache.set(record._id, record);\n\n\t\t\tconst subPath = getURL('', { cdn: false, full: false });\n\t\t\tlet instance = `${record.extraInformation.host}:${record.extraInformation.port}${subPath}`;\n\n\t\t\tif (record.extraInformation.port === process.env.PORT && record.extraInformation.host === process.env.INSTANCE_IP) {\n\t\t\t\tauthLogger.info({ msg: 'prevent self connect', instance });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (record.extraInformation.host === process.env.INSTANCE_IP && isDocker() === false) {\n\t\t\t\tinstance = `localhost:${record.extraInformation.port}${subPath}`;\n\t\t\t}\n\n\t\t\tif (connections[instance] && connections[instance].instanceRecord) {\n\t\t\t\tif (connections[instance].instanceRecord._createdAt < record._createdAt) {\n\t\t\t\t\tconnections[instance].disconnect();\n\t\t\t\t\tdelete connections[instance];\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconnLogger.info({ msg: 'connecting in', instance });\n\n\t\t\tconnections[instance] = DDP.connect(instance, {\n\t\t\t\t_dontPrintErrors: settings.get('Log_Level') !== '2',\n\t\t\t});\n\n\t\t\t// remove not relevant info from instance record\n\t\t\tdelete record.extraInformation.os;\n\n\t\t\tconnections[instance].instanceRecord = record;\n\t\t\tconnections[instance].instanceId = record._id;\n\n\t\t\tconnections[instance].onReconnect = function () {\n\t\t\t\treturn authorizeConnection(instance);\n\t\t\t};\n\t\t}),\n\n\t\tremoved(id) {\n\t\t\tconst record = cache.get(id);\n\t\t\tif (!record) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcache.delete(id);\n\n\t\t\tconst subPath = getURL('', { cdn: false, full: false });\n\t\t\tlet instance = `${record.extraInformation.host}:${record.extraInformation.port}${subPath}`;\n\n\t\t\tif (record.extraInformation.host === process.env.INSTANCE_IP && isDocker() === false) {\n\t\t\t\tinstance = `localhost:${record.extraInformation.port}${subPath}`;\n\t\t\t}\n\n\t\t\tconst query = {\n\t\t\t\t'extraInformation.host': record.extraInformation.host,\n\t\t\t\t'extraInformation.port': record.extraInformation.port,\n\t\t\t};\n\n\t\t\tif (connections[instance] && !InstanceStatus.getCollection().findOne(query)) {\n\t\t\t\tconnLogger.info({ msg: 'disconnecting from', instance });\n\t\t\t\tconnections[instance].disconnect();\n\t\t\t\treturn delete connections[instance];\n\t\t\t}\n\t\t},\n\t};\n\n\tInstanceStatusRaw.find(\n\t\t{\n\t\t\t'extraInformation.port': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsort: {\n\t\t\t\t_createdAt: -1,\n\t\t\t},\n\t\t},\n\t).forEach(matrixBroadCastActions.added);\n}\n\nfunction startStreamCastBroadcast(value) {\n\tconst instance = 'StreamCast';\n\n\tconnLogger.info({ msg: 'connecting in', instance, value });\n\n\tif (!isPresenceMonitorEnabled()) {\n\t\tUserPresence.setDefaultStatus = (id, status) => {\n\t\t\tUsers.updateDefaultStatus(id, status);\n\t\t};\n\t}\n\n\tconst connection = DDP.connect(value, {\n\t\t_dontPrintErrors: settings.get('Log_Level') !== '2',\n\t});\n\n\tconnections[instance] = connection;\n\tconnection.instanceId = instance;\n\tconnection.instanceRecord = {};\n\tconnection.onReconnect = function () {\n\t\treturn authorizeConnection(instance);\n\t};\n\n\tconnection.registerStore('broadcast-stream', {\n\t\tupdate({ fields }) {\n\t\t\tconst { streamName, eventName, args } = fields;\n\n\t\t\tif (!streamName || !eventName || !args) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (connection.broadcastAuth !== true) {\n\t\t\t\treturn 'not-authorized';\n\t\t\t}\n\n\t\t\tconst instance = StreamerCentral.instances[streamName];\n\t\t\tif (!instance) {\n\t\t\t\treturn 'stream-not-exists';\n\t\t\t}\n\n\t\t\tif (instance.serverOnly) {\n\t\t\t\treturn instance.__emit(eventName, ...args);\n\t\t\t}\n\t\t\treturn instance._emit(eventName, args);\n\t\t},\n\t});\n\n\treturn connection.subscribe('stream');\n}\n\nexport function startStreamBroadcast() {\n\tif (!process.env.INSTANCE_IP) {\n\t\tprocess.env.INSTANCE_IP = 'localhost';\n\t}\n\n\tlogger.info('startStreamBroadcast');\n\n\tsettings.watch('Stream_Cast_Address', function (value) {\n\t\t// var connection, fn, instance;\n\t\tconst fn = function (instance, connection) {\n\t\t\tconnection.disconnect();\n\t\t\treturn delete connections[instance];\n\t\t};\n\n\t\tfor (const instance of Object.keys(connections)) {\n\t\t\tconst connection = connections[instance];\n\t\t\tfn(instance, connection);\n\t\t}\n\n\t\tif (value && value.trim() !== '') {\n\t\t\treturn startStreamCastBroadcast(value);\n\t\t}\n\t\treturn startMatrixBroadcast();\n\t});\n\n\tfunction broadcast(streamName, eventName, args /* , userId*/) {\n\t\tconst fromInstance = `${process.env.INSTANCE_IP}:${process.env.PORT}`;\n\t\tconst results = [];\n\n\t\tfor (const instance of Object.keys(connections)) {\n\t\t\tconst connection = connections[instance];\n\n\t\t\tif (connection.status().connected === true) {\n\t\t\t\tconnection.call('stream', streamName, eventName, args, function (error, response) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tlogger.error({ msg: 'Stream broadcast error', err: error });\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (response) {\n\t\t\t\t\t\tcase 'self-not-authorized':\n\t\t\t\t\t\t\tstreamLogger.error(\n\t\t\t\t\t\t\t\t`Stream broadcast from '${fromInstance}' to '${connection._stream.endpoint}' with name ${streamName} to self is not authorized`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstreamLogger.debug({\n\t\t\t\t\t\t\t\tmsg: 'self-not-authorized',\n\t\t\t\t\t\t\t\tbroadcastAuth: connection.broadcastAuth,\n\t\t\t\t\t\t\t\tstatus: connection.status(),\n\t\t\t\t\t\t\t\teventName,\n\t\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tcase 'not-authorized':\n\t\t\t\t\t\t\tstreamLogger.error(\n\t\t\t\t\t\t\t\t`Stream broadcast from '${fromInstance}' to '${connection._stream.endpoint}' with name ${streamName} not authorized`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstreamLogger.debug({\n\t\t\t\t\t\t\t\tmsg: 'not-authorized',\n\t\t\t\t\t\t\t\tbroadcastAuth: connection.broadcastAuth,\n\t\t\t\t\t\t\t\tstatus: connection.status(),\n\t\t\t\t\t\t\t\teventName,\n\t\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn authorizeConnection(instance);\n\t\t\t\t\t\tcase 'stream-not-exists':\n\t\t\t\t\t\t\tstreamLogger.error(\n\t\t\t\t\t\t\t\t`Stream broadcast from '${fromInstance}' to '${connection._stream.endpoint}' with name ${streamName} does not exist`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstreamLogger.debug({\n\t\t\t\t\t\t\t\tmsg: 'stream-not-exists',\n\t\t\t\t\t\t\t\tbroadcastAuth: connection.broadcastAuth,\n\t\t\t\t\t\t\t\tstatus: connection.status(),\n\t\t\t\t\t\t\t\teventName,\n\t\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tconst onBroadcast = Meteor.bindEnvironment(broadcast);\n\n\tlet TroubleshootDisableInstanceBroadcast;\n\tsettings.watch('Troubleshoot_Disable_Instance_Broadcast', (value) => {\n\t\tif (TroubleshootDisableInstanceBroadcast === value) {\n\t\t\treturn;\n\t\t}\n\t\tTroubleshootDisableInstanceBroadcast = value;\n\n\t\tif (value) {\n\t\t\treturn StreamerCentral.removeListener('broadcast', onBroadcast);\n\t\t}\n\n\t\tStreamerCentral.on('broadcast', onBroadcast);\n\t});\n}\n\nfunction getConnection(address) {\n\tconst conn = connections[address];\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\tconst { instanceRecord, broadcastAuth } = conn;\n\n\treturn {\n\t\taddress,\n\t\tcurrentStatus: conn._stream.currentStatus,\n\t\tinstanceRecord,\n\t\tbroadcastAuth,\n\t};\n}\n\nexport function getInstanceConnection(instance) {\n\tconst subPath = getURL('', { cdn: false, full: false });\n\tconst address = `${instance.extraInformation.host}:${instance.extraInformation.port}${subPath}`;\n\n\treturn getConnection(address);\n}\n\nMeteor.methods({\n\t'broadcastAuth'(remoteId, selfId) {\n\t\tcheck(selfId, String);\n\t\tcheck(remoteId, String);\n\n\t\tconst query = {\n\t\t\t_id: remoteId,\n\t\t};\n\n\t\tif (selfId === InstanceStatus.id() && remoteId !== InstanceStatus.id() && InstanceStatus.getCollection().findOne(query)) {\n\t\t\tthis.connection.broadcastAuth = true;\n\t\t}\n\n\t\treturn this.connection.broadcastAuth === true;\n\t},\n\n\t'stream'(streamName, eventName, args) {\n\t\tif (!this.connection) {\n\t\t\treturn 'self-not-authorized';\n\t\t}\n\n\t\tif (this.connection.broadcastAuth !== true) {\n\t\t\treturn 'not-authorized';\n\t\t}\n\n\t\tconst instance = StreamerCentral.instances[streamName];\n\t\tif (!instance) {\n\t\t\treturn 'stream-not-exists';\n\t\t}\n\n\t\tif (instance.serverOnly) {\n\t\t\tinstance.__emit(eventName, ...args);\n\t\t} else {\n\t\t\tStreamerCentral.instances[streamName]._emit(eventName, args);\n\t\t}\n\t},\n\n\t'instances/get'() {\n\t\tif (!hasPermission(Meteor.userId(), 'view-statistics')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'List instances is not allowed', {\n\t\t\t\tmethod: 'instances/get',\n\t\t\t});\n\t\t}\n\t\treturn Object.keys(connections).map(getConnection);\n\t},\n});\n"]},"sourceType":"module","hash":"e585f730acd530ec4b1bcbb53f2de2bdc0e9b5d2"}
