{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js"}},"code":"const _excluded = [\"_id\"];\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 1);\nmodule.export({\n  E2ERoom: () => E2ERoom\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Base64;\nmodule.link(\"meteor/base64\", {\n  Base64(v) {\n    Base64 = v;\n  }\n\n}, 1);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 2);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 3);\nlet Session;\nmodule.link(\"meteor/session\", {\n  Session(v) {\n    Session = v;\n  }\n\n}, 4);\nlet TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync(v) {\n    TimeSync = v;\n  }\n\n}, 5);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 6);\nlet e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e(v) {\n    e2e = v;\n  }\n\n}, 7);\nlet toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer;\nmodule.link(\"./helper\", {\n  toString(v) {\n    toString = v;\n  },\n\n  toArrayBuffer(v) {\n    toArrayBuffer = v;\n  },\n\n  joinVectorAndEcryptedData(v) {\n    joinVectorAndEcryptedData = v;\n  },\n\n  splitVectorAndEcryptedData(v) {\n    splitVectorAndEcryptedData = v;\n  },\n\n  encryptRSA(v) {\n    encryptRSA = v;\n  },\n\n  encryptAES(v) {\n    encryptAES = v;\n  },\n\n  decryptRSA(v) {\n    decryptRSA = v;\n  },\n\n  decryptAES(v) {\n    decryptAES = v;\n  },\n\n  generateAESKey(v) {\n    generateAESKey = v;\n  },\n\n  exportJWKKey(v) {\n    exportJWKKey = v;\n  },\n\n  importAESKey(v) {\n    importAESKey = v;\n  },\n\n  importRSAKey(v) {\n    importRSAKey = v;\n  },\n\n  readFileAsArrayBuffer(v) {\n    readFileAsArrayBuffer = v;\n  }\n\n}, 8);\nlet Notifications;\nmodule.link(\"../../notifications/client\", {\n  Notifications(v) {\n    Notifications = v;\n  }\n\n}, 9);\nlet Rooms, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 10);\nlet roomTypes, RoomSettingsEnum;\nmodule.link(\"../../utils/client\", {\n  roomTypes(v) {\n    roomTypes = v;\n  },\n\n  RoomSettingsEnum(v) {\n    RoomSettingsEnum = v;\n  }\n\n}, 11);\nlet log, logError;\nmodule.link(\"./logger\", {\n  log(v) {\n    log = v;\n  },\n\n  logError(v) {\n    logError = v;\n  }\n\n}, 12);\nlet E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState(v) {\n    E2ERoomState = v;\n  }\n\n}, 13);\nlet call;\nmodule.link(\"../../../client/lib/utils/call\", {\n  call(v) {\n    call = v;\n  }\n\n}, 14);\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\nconst permitedMutations = {\n  [E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n  [E2ERoomState.READY]: [E2ERoomState.DISABLED],\n  [E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n  [E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n  [E2ERoomState.ESTABLISHING]: [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS]\n};\n\nconst filterMutation = (currentState, nextState) => {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n\n  return false;\n};\n\nclass E2ERoom extends Emitter {\n  constructor(userId, roomId, t) {\n    super();\n    this.state = undefined;\n    this[PAUSED] = undefined;\n    this.userId = userId;\n    this.roomId = roomId;\n    this.typeOfRoom = t;\n    this.once(E2ERoomState.READY, () => this.decryptPendingMessages());\n    this.once(E2ERoomState.READY, () => this.decryptSubscription());\n    this.on('STATE_CHANGED', prev => {\n      if (this.roomId === Session.get('openedRoom')) {\n        this.log(\"[PREV: \".concat(prev, \"]\"), 'State CHANGED');\n      }\n    });\n    this.on('STATE_CHANGED', () => this.handshake());\n    this.setState(E2ERoomState.NOT_STARTED);\n  }\n\n  log() {\n    for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n      msg[_key] = arguments[_key];\n    }\n\n    log(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n\n  error() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n\n    logError(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n\n  setState(requestedState) {\n    const currentState = this.state;\n    const nextState = filterMutation(currentState, requestedState);\n\n    if (!nextState) {\n      this.error(\"invalid state \".concat(currentState, \" -> \").concat(requestedState));\n      return;\n    }\n\n    this.state = nextState;\n    this.log(currentState, '->', nextState);\n    this.emit('STATE_CHANGED', currentState, nextState, this);\n    this.emit(nextState, this);\n  }\n\n  isReady() {\n    return this.state === E2ERoomState.READY;\n  }\n\n  isDisabled() {\n    return this.state === E2ERoomState.DISABLED;\n  }\n\n  enable() {\n    if (this.state === E2ERoomState.READY) {\n      return;\n    }\n\n    this.setState(E2ERoomState.READY);\n  }\n\n  disable() {\n    this.setState(E2ERoomState.DISABLED);\n  }\n\n  pause() {\n    this.log('PAUSED', this[PAUSED], '->', true);\n    this[PAUSED] = true;\n    this.emit('PAUSED', true);\n  }\n\n  resume() {\n    this.log('PAUSED', this[PAUSED], '->', false);\n    this[PAUSED] = false;\n    this.emit('PAUSED', false);\n  }\n\n  keyReceived() {\n    this.setState(E2ERoomState.KEYS_RECEIVED);\n  }\n\n  async shouldConvertSentMessages() {\n    if (!this.isReady() || this[PAUSED]) {\n      return false;\n    }\n\n    if (this[PAUSED] === undefined) {\n      return new Promise(resolve => {\n        this.once('PAUSED', resolve);\n      });\n    }\n\n    return true;\n  }\n\n  shouldConvertReceivedMessages() {\n    return this.isReady();\n  }\n\n  isWaitingKeys() {\n    return this.state === E2ERoomState.WAITING_KEYS;\n  }\n\n  get keyID() {\n    return this[KEY_ID];\n  }\n\n  set keyID(keyID) {\n    this[KEY_ID] = keyID;\n  }\n\n  async decryptSubscription() {\n    var _subscription$lastMes;\n\n    const subscription = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    const data = await (((_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.msg) && this.decrypt(subscription.lastMessage.msg));\n\n    if (!(data !== null && data !== void 0 && data.text)) {\n      this.log('decryptSubscriptions nothing to do');\n      return;\n    }\n\n    Subscriptions.direct.update({\n      _id: subscription._id\n    }, {\n      $set: {\n        'lastMessage.msg': data.text,\n        'lastMessage.e2e': 'done'\n      }\n    });\n    this.log('decryptSubscriptions Done');\n  }\n\n  async decryptPendingMessages() {\n    return Messages.find({\n      rid: this.roomId,\n      t: 'e2e',\n      e2e: 'pending'\n    }).forEach(async _ref => {\n      let {\n        _id\n      } = _ref,\n          msg = _objectWithoutProperties(_ref, _excluded);\n\n      Messages.direct.update({\n        _id\n      }, await this.decryptMessage(msg));\n    });\n  } // Initiates E2E Encryption\n\n\n  async handshake() {\n    if (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n      return;\n    }\n\n    this.setState(E2ERoomState.ESTABLISHING);\n\n    try {\n      const groupKey = Subscriptions.findOne({\n        rid: this.roomId\n      }).E2EKey;\n\n      if (groupKey) {\n        await this.importGroupKey(groupKey);\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n    } catch (error) {\n      this.setState(E2ERoomState.ERROR);\n      this.error('Error fetching group key: ', error);\n      return;\n    }\n\n    try {\n      const room = Rooms.findOne({\n        _id: this.roomId\n      });\n\n      if (!room.e2eKeyId) {\n        // TODO CHECK_PERMISSION\n        this.setState(E2ERoomState.CREATING_KEYS);\n        await this.createGroupKey();\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n\n      this.setState(E2ERoomState.WAITING_KEYS);\n      this.log('Requesting room key');\n      Notifications.notifyUsersOfRoom(this.roomId, 'e2ekeyRequest', this.roomId, room.e2eKeyId);\n    } catch (error) {\n      // this.error = error;\n      this.setState(E2ERoomState.ERROR);\n    }\n  }\n\n  isSupportedRoomType(type) {\n    return roomTypes.getConfig(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n  }\n\n  async importGroupKey(groupKey) {\n    this.log('Importing room key ->', this.roomId); // Get existing group key\n    // const keyID = groupKey.slice(0, 12);\n\n    groupKey = groupKey.slice(12);\n    groupKey = Base64.decode(groupKey); // Decrypt obtained encrypted session key\n\n    try {\n      const decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n      this.sessionKeyExportedString = toString(decryptedKey);\n    } catch (error) {\n      return this.error('Error decrypting group key: ', error);\n    }\n\n    this.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12); // Import session key for use.\n\n    try {\n      const key = await importAESKey(JSON.parse(this.sessionKeyExportedString)); // Key has been obtained. E2E is now in session.\n\n      this.groupSessionKey = key;\n    } catch (error) {\n      return this.error('Error importing group key: ', error);\n    }\n  }\n\n  async createGroupKey() {\n    this.log('Creating room key'); // Create group key\n\n    try {\n      this.groupSessionKey = await generateAESKey();\n    } catch (error) {\n      console.error('Error generating group key: ', error);\n      throw error;\n    }\n\n    try {\n      const sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n      this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n      this.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n      await call('e2e.setRoomKeyID', this.roomId, this.keyID);\n      await this.encryptKeyForOtherParticipants();\n    } catch (error) {\n      this.error('Error exporting group key: ', error);\n      throw error;\n    }\n  }\n\n  async encryptKeyForOtherParticipants() {\n    // Encrypt generated session key for every user in room and publish to subscription model.\n    try {\n      const {\n        users\n      } = await call('e2e.getUsersOfRoomWithoutKey', this.roomId);\n      users.forEach(user => this.encryptForParticipant(user));\n    } catch (error) {\n      return this.error('Error getting room users: ', error);\n    }\n  }\n\n  async encryptForParticipant(user) {\n    let userKey;\n\n    try {\n      userKey = await importRSAKey(JSON.parse(user.e2e.public_key), ['encrypt']);\n    } catch (error) {\n      return this.error('Error importing user key: ', error);\n    } // const vector = crypto.getRandomValues(new Uint8Array(16));\n    // Encrypt session key for this user with his/her public key\n\n\n    try {\n      const encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString)); // Key has been encrypted. Publish to that user's subscription model for this room.\n\n      await call('e2e.updateGroupKey', this.roomId, user._id, this.keyID + Base64.encode(new Uint8Array(encryptedUserKey)));\n    } catch (error) {\n      return this.error('Error encrypting user key: ', error);\n    }\n  } // Encrypts files before upload. I/O is in arraybuffers.\n\n\n  async encryptFile(file) {\n    if (!this.isSupportedRoomType(this.typeOfRoom)) {\n      return;\n    }\n\n    const fileArrayBuffer = await readFileAsArrayBuffer(file);\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    let result;\n\n    try {\n      result = await encryptAES(vector, this.groupSessionKey, fileArrayBuffer);\n    } catch (error) {\n      return this.error('Error encrypting group key: ', error);\n    }\n\n    const output = joinVectorAndEcryptedData(vector, result);\n    const encryptedFile = new File([toArrayBuffer(EJSON.stringify(output))], file.name);\n    return encryptedFile;\n  } // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\n\n  async decryptFile(message) {\n    if (message[0] !== '{') {\n      return;\n    }\n\n    const [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(message));\n\n    try {\n      return await decryptAES(vector, this.groupSessionKey, cipherText);\n    } catch (error) {\n      this.error('Error decrypting file: ', error);\n      return false;\n    }\n  } // Encrypts messages\n\n\n  async encryptText(data) {\n    if (!_.isObject(data)) {\n      data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n        text: data,\n        ack: Random.id((Random.fraction() + 1) * 20)\n      }));\n    }\n\n    if (!this.isSupportedRoomType(this.typeOfRoom)) {\n      return data;\n    }\n\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    let result;\n\n    try {\n      result = await encryptAES(vector, this.groupSessionKey, data);\n    } catch (error) {\n      return this.error('Error encrypting message: ', error);\n    }\n\n    return this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n  } // Helper function for encryption of messages\n\n\n  encrypt(message) {\n    let ts;\n\n    if (isNaN(TimeSync.serverOffset())) {\n      ts = new Date();\n    } else {\n      ts = new Date(Date.now() + TimeSync.serverOffset());\n    }\n\n    const data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n      _id: message._id,\n      text: message.msg,\n      userId: this.userId,\n      ts\n    }));\n    return this.encryptText(data);\n  } // Decrypt messages\n\n\n  async decryptMessage(message) {\n    if (message.t !== 'e2e' || message.e2e === 'done') {\n      return message;\n    }\n\n    const data = await this.decrypt(message.msg);\n\n    if (!(data !== null && data !== void 0 && data.text)) {\n      return message;\n    }\n\n    return _objectSpread(_objectSpread({}, message), {}, {\n      msg: data.text,\n      e2e: 'done'\n    });\n  }\n\n  async decrypt(message) {\n    if (!this.isSupportedRoomType(this.typeOfRoom)) {\n      return message;\n    }\n\n    const keyID = message.slice(0, 12);\n\n    if (keyID !== this.keyID) {\n      return message;\n    }\n\n    message = message.slice(12);\n    const [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n    try {\n      const result = await decryptAES(vector, this.groupSessionKey, cipherText);\n      return EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n    } catch (error) {\n      return this.error('Error decrypting message: ', error, message);\n    }\n  }\n\n  provideKeyToUser(keyId) {\n    if (this.keyID !== keyId) {\n      return;\n    }\n\n    this.encryptKeyForOtherParticipants();\n  }\n\n}","map":{"version":3,"sources":["app/e2e/client/rocketchat.e2e.room.js"],"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","export","E2ERoom","_","Base64","EJSON","Random","Session","TimeSync","Emitter","e2e","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","Notifications","Rooms","Subscriptions","Messages","roomTypes","RoomSettingsEnum","log","logError","E2ERoomState","call","KEY_ID","Symbol","PAUSED","permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","ERROR","WAITING_KEYS","filterMutation","currentState","nextState","includes","constructor","userId","roomId","t","state","undefined","typeOfRoom","once","decryptPendingMessages","decryptSubscription","on","prev","get","handshake","setState","msg","error","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","Promise","resolve","shouldConvertReceivedMessages","isWaitingKeys","keyID","subscription","findOne","rid","data","lastMessage","decrypt","text","direct","update","_id","$set","find","forEach","decryptMessage","groupKey","E2EKey","importGroupKey","room","e2eKeyId","CREATING_KEYS","createGroupKey","notifyUsersOfRoom","isSupportedRoomType","type","getConfig","allowRoomSettingChange","E2E","slice","decode","decryptedKey","privateKey","sessionKeyExportedString","encode","key","JSON","parse","groupSessionKey","console","sessionKeyExported","stringify","encryptKeyForOtherParticipants","users","user","encryptForParticipant","userKey","public_key","encryptedUserKey","Uint8Array","encryptFile","file","fileArrayBuffer","vector","crypto","getRandomValues","result","output","encryptedFile","File","name","decryptFile","message","cipherText","encryptText","isObject","TextEncoder","ack","id","fraction","encrypt","ts","isNaN","serverOffset","Date","now","TextDecoder","provideKeyToUser","keyId"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport { Base64 } from 'meteor/base64';\nimport { EJSON } from 'meteor/ejson';\nimport { Random } from 'meteor/random';\nimport { Session } from 'meteor/session';\nimport { TimeSync } from 'meteor/mizzao:timesync';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { e2e } from './rocketchat.e2e';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n} from './helper';\nimport { Notifications } from '../../notifications/client';\nimport { Rooms, Subscriptions, Messages } from '../../models/client';\nimport { roomTypes, RoomSettingsEnum } from '../../utils/client';\nimport { log, logError } from './logger';\nimport { E2ERoomState } from './E2ERoomState';\nimport { call } from '../../../client/lib/utils/call';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState, nextState) => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate = undefined;\n\n\t[PAUSED] = undefined;\n\n\tconstructor(userId, roomId, t) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = roomId;\n\t\tthis.typeOfRoom = t;\n\n\t\tthis.once(E2ERoomState.READY, () => this.decryptPendingMessages());\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === Session.get('openedRoom')) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\tsetState(requestedState) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState, nextState, this);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages() {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tconst data = await (subscription.lastMessage?.msg && this.decrypt(subscription.lastMessage.msg));\n\t\tif (!data?.text) {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tSubscriptions.direct.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'lastMessage.msg': data.text,\n\t\t\t\t\t'lastMessage.e2e': 'done',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.direct.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = Rooms.findOne({ _id: this.roomId });\n\t\t\tif (!room.e2eKeyId) {\n\t\t\t\t// TODO CHECK_PERMISSION\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tNotifications.notifyUsersOfRoom(this.roomId, 'e2ekeyRequest', this.roomId, room.e2eKeyId);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tisSupportedRoomType(type) {\n\t\treturn roomTypes.getConfig(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync importGroupKey(groupKey) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error decrypting group key: ', error);\n\t\t}\n\n\t\tthis.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing group key: ', error);\n\t\t}\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\t// Create group key\n\t\ttry {\n\t\t\tthis.groupSessionKey = await generateAESKey();\n\t\t} catch (error) {\n\t\t\tconsole.error('Error generating group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\n\t\ttry {\n\t\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\t\tthis.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n\n\t\t\tawait call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst { users } = await call('e2e.getUsersOfRoomWithoutKey', this.roomId);\n\t\t\tusers.forEach((user) => this.encryptForParticipant(user));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptForParticipant(user) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(user.e2e.public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\t// Key has been encrypted. Publish to that user's subscription model for this room.\n\t\t\tawait call('e2e.updateGroupKey', this.roomId, user._id, this.keyID + Base64.encode(new Uint8Array(encryptedUserKey)));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst output = joinVectorAndEcryptedData(vector, result);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(EJSON.stringify(output))], file.name);\n\n\t\treturn encryptedFile;\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(message) {\n\t\tif (message[0] !== '{') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(message));\n\n\t\ttry {\n\t\t\treturn await decryptAES(vector, this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting file: ', error);\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data) {\n\t\tif (!_.isObject(data)) {\n\t\t\tdata = new TextEncoder('UTF-8').encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn data;\n\t\t}\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, data);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting message: ', error);\n\t\t}\n\n\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message) {\n\t\tlet ts;\n\t\tif (isNaN(TimeSync.serverOffset())) {\n\t\t\tts = new Date();\n\t\t} else {\n\t\t\tts = new Date(Date.now() + TimeSync.serverOffset());\n\t\t}\n\n\t\tconst data = new TextEncoder('UTF-8').encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\t// Decrypt messages\n\n\tasync decryptMessage(message) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await this.decrypt(message.msg);\n\n\t\tif (!data?.text) {\n\t\t\treturn message;\n\t\t}\n\n\t\treturn {\n\t\t\t...message,\n\t\t\tmsg: data.text,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync decrypt(message) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst keyID = message.slice(0, 12);\n\n\t\tif (keyID !== this.keyID) {\n\t\t\treturn message;\n\t\t}\n\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\ttry {\n\t\t\tconst result = await decryptAES(vector, this.groupSessionKey, cipherText);\n\t\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error decrypting message: ', error, message);\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.encryptKeyForOtherParticipants();\n\t}\n}\n"]},"sourceType":"module","hash":"66c95287596492b374314b4b2c6b5632b9c8fd32"}
