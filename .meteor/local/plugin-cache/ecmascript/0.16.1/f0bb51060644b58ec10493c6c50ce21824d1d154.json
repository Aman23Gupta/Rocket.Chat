{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/server/lib/roomTypes.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/utils/server/lib/roomTypes.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/server/lib/roomTypes.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/utils/server/lib/roomTypes.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/utils/server/lib/roomTypes.js"}},"code":"module.export({\n  roomTypes: () => roomTypes,\n  searchableRoomTypes: () => searchableRoomTypes\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet RoomTypesCommon;\nmodule.link(\"../../lib/RoomTypesCommon\", {\n  RoomTypesCommon(v) {\n    RoomTypesCommon = v;\n  }\n\n}, 1);\nconst roomTypes = new class roomTypesServer extends RoomTypesCommon {\n  /**\n   * Add a publish for a room type\n   *\n   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))\n   * @param {function} callback function that will return the publish's data\n   */\n  setPublish(roomType, callback) {\n    if (this.roomTypes[roomType] && this.roomTypes[roomType].publish != null) {\n      throw new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');\n    }\n\n    if (this.roomTypes[roomType] == null) {\n      this.roomTypes[roomType] = {};\n    }\n\n    this.roomTypes[roomType].publish = callback;\n  }\n\n  setRoomFind(roomType, callback) {\n    if (this.roomTypes[roomType] && this.roomTypes[roomType].roomFind != null) {\n      throw new Meteor.Error('room-find-exists', 'Room find for the given type already exists');\n    }\n\n    if (this.roomTypes[roomType] == null) {\n      this.roomTypes[roomType] = {};\n    }\n\n    this.roomTypes[roomType].roomFind = callback;\n  }\n\n  getRoomFind(roomType) {\n    return this.roomTypes[roomType] && this.roomTypes[roomType].roomFind;\n  }\n\n  getRoomName(roomType, roomData) {\n    return this.roomTypes[roomType] && this.roomTypes[roomType].roomName && this.roomTypes[roomType].roomName(roomData);\n  }\n  /**\n   * Run the publish for a room type\n   *\n   * @param scope Meteor publish scope\n   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))\n   * @param identifier identifier of the room\n   */\n\n\n  runPublish(scope, roomType, identifier) {\n    return this.roomTypes[roomType] && this.roomTypes[roomType].publish && this.roomTypes[roomType].publish.call(scope, identifier);\n  }\n\n}();\n\nconst searchableRoomTypes = () => Object.entries(roomTypes.roomTypes).filter(roomType => roomType[1].includeInRoomSearch()).map(roomType => roomType[0]);","map":{"version":3,"sources":["app/utils/server/lib/roomTypes.js"],"names":["module","export","roomTypes","searchableRoomTypes","Meteor","link","v","RoomTypesCommon","roomTypesServer","setPublish","roomType","callback","publish","Error","setRoomFind","roomFind","getRoomFind","getRoomName","roomData","roomName","runPublish","scope","identifier","call","Object","entries","filter","includeInRoomSearch","map"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,SAAS,EAAC,MAAIA,SAAf;AAAyBC,EAAAA,mBAAmB,EAAC,MAAIA;AAAjD,CAAd;AAAqF,IAAIC,MAAJ;AAAWJ,MAAM,CAACK,IAAP,CAAY,eAAZ,EAA4B;AAACD,EAAAA,MAAM,CAACE,CAAD,EAAG;AAACF,IAAAA,MAAM,GAACE,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIC,eAAJ;AAAoBP,MAAM,CAACK,IAAP,CAAY,2BAAZ,EAAwC;AAACE,EAAAA,eAAe,CAACD,CAAD,EAAG;AAACC,IAAAA,eAAe,GAACD,CAAhB;AAAkB;;AAAtC,CAAxC,EAAgF,CAAhF;AAIlK,MAAMJ,SAAS,GAAG,IAAK,MAAMM,eAAN,SAA8BD,eAA9B,CAA8C;AAC3E;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,UAAU,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC9B,QAAI,KAAKT,SAAL,CAAeQ,QAAf,KAA4B,KAAKR,SAAL,CAAeQ,QAAf,EAAyBE,OAAzB,IAAoC,IAApE,EAA0E;AACzE,YAAM,IAAIR,MAAM,CAACS,KAAX,CAAiB,sBAAjB,EAAyC,2CAAzC,CAAN;AACA;;AACD,QAAI,KAAKX,SAAL,CAAeQ,QAAf,KAA4B,IAAhC,EAAsC;AACrC,WAAKR,SAAL,CAAeQ,QAAf,IAA2B,EAA3B;AACA;;AACD,SAAKR,SAAL,CAAeQ,QAAf,EAAyBE,OAAzB,GAAmCD,QAAnC;AACA;;AAEDG,EAAAA,WAAW,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AAC/B,QAAI,KAAKT,SAAL,CAAeQ,QAAf,KAA4B,KAAKR,SAAL,CAAeQ,QAAf,EAAyBK,QAAzB,IAAqC,IAArE,EAA2E;AAC1E,YAAM,IAAIX,MAAM,CAACS,KAAX,CAAiB,kBAAjB,EAAqC,6CAArC,CAAN;AACA;;AACD,QAAI,KAAKX,SAAL,CAAeQ,QAAf,KAA4B,IAAhC,EAAsC;AACrC,WAAKR,SAAL,CAAeQ,QAAf,IAA2B,EAA3B;AACA;;AACD,SAAKR,SAAL,CAAeQ,QAAf,EAAyBK,QAAzB,GAAoCJ,QAApC;AACA;;AAEDK,EAAAA,WAAW,CAACN,QAAD,EAAW;AACrB,WAAO,KAAKR,SAAL,CAAeQ,QAAf,KAA4B,KAAKR,SAAL,CAAeQ,QAAf,EAAyBK,QAA5D;AACA;;AAEDE,EAAAA,WAAW,CAACP,QAAD,EAAWQ,QAAX,EAAqB;AAC/B,WAAO,KAAKhB,SAAL,CAAeQ,QAAf,KAA4B,KAAKR,SAAL,CAAeQ,QAAf,EAAyBS,QAArD,IAAiE,KAAKjB,SAAL,CAAeQ,QAAf,EAAyBS,QAAzB,CAAkCD,QAAlC,CAAxE;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,UAAU,CAACC,KAAD,EAAQX,QAAR,EAAkBY,UAAlB,EAA8B;AACvC,WAAO,KAAKpB,SAAL,CAAeQ,QAAf,KAA4B,KAAKR,SAAL,CAAeQ,QAAf,EAAyBE,OAArD,IAAgE,KAAKV,SAAL,CAAeQ,QAAf,EAAyBE,OAAzB,CAAiCW,IAAjC,CAAsCF,KAAtC,EAA6CC,UAA7C,CAAvE;AACA;;AA5C0E,CAAnD,EAAlB;;AA+CA,MAAMnB,mBAAmB,GAAG,MAClCqB,MAAM,CAACC,OAAP,CAAevB,SAAS,CAACA,SAAzB,EACEwB,MADF,CACUhB,QAAD,IAAcA,QAAQ,CAAC,CAAD,CAAR,CAAYiB,mBAAZ,EADvB,EAEEC,GAFF,CAEOlB,QAAD,IAAcA,QAAQ,CAAC,CAAD,CAF5B,CADM","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { RoomTypesCommon } from '../../lib/RoomTypesCommon';\n\nexport const roomTypes = new (class roomTypesServer extends RoomTypesCommon {\n\t/**\n\t * Add a publish for a room type\n\t *\n\t * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))\n\t * @param {function} callback function that will return the publish's data\n\t */\n\tsetPublish(roomType, callback) {\n\t\tif (this.roomTypes[roomType] && this.roomTypes[roomType].publish != null) {\n\t\t\tthrow new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');\n\t\t}\n\t\tif (this.roomTypes[roomType] == null) {\n\t\t\tthis.roomTypes[roomType] = {};\n\t\t}\n\t\tthis.roomTypes[roomType].publish = callback;\n\t}\n\n\tsetRoomFind(roomType, callback) {\n\t\tif (this.roomTypes[roomType] && this.roomTypes[roomType].roomFind != null) {\n\t\t\tthrow new Meteor.Error('room-find-exists', 'Room find for the given type already exists');\n\t\t}\n\t\tif (this.roomTypes[roomType] == null) {\n\t\t\tthis.roomTypes[roomType] = {};\n\t\t}\n\t\tthis.roomTypes[roomType].roomFind = callback;\n\t}\n\n\tgetRoomFind(roomType) {\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].roomFind;\n\t}\n\n\tgetRoomName(roomType, roomData) {\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].roomName && this.roomTypes[roomType].roomName(roomData);\n\t}\n\n\t/**\n\t * Run the publish for a room type\n\t *\n\t * @param scope Meteor publish scope\n\t * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))\n\t * @param identifier identifier of the room\n\t */\n\trunPublish(scope, roomType, identifier) {\n\t\treturn this.roomTypes[roomType] && this.roomTypes[roomType].publish && this.roomTypes[roomType].publish.call(scope, identifier);\n\t}\n})();\n\nexport const searchableRoomTypes = () =>\n\tObject.entries(roomTypes.roomTypes)\n\t\t.filter((roomType) => roomType[1].includeInRoomSearch())\n\t\t.map((roomType) => roomType[0]);\n"]},"sourceType":"module","hash":"f0bb51060644b58ec10493c6c50ce21824d1d154"}
