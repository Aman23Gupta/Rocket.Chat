{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v194.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v194.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v194.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/startup/migrations/v194.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v194.js"}},"code":"let Users;\nmodule.link(\"../../../app/models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 0);\nlet Settings;\nmodule.link(\"../../../app/models/server/raw\", {\n  Settings(v) {\n    Settings = v;\n  }\n\n}, 1);\nlet addMigration;\nmodule.link(\"../../lib/migrations\", {\n  addMigration(v) {\n    addMigration = v;\n  }\n\n}, 2);\n\nfunction updateFieldMap() {\n  return Promise.asyncApply(() => {\n    const _id = 'SAML_Custom_Default_user_data_fieldmap';\n    const setting = Promise.await(Settings.findOne({\n      _id\n    }));\n\n    if (!setting || !setting.value) {\n      return;\n    } // Check if there's any user with an 'eppn' attribute. This is a custom identifier that was hardcoded on the old version\n    // If there's any user with the eppn attribute stored on mongo, we will include it on the new json so that it'll continue to be used.\n\n\n    const usedEppn = Boolean(Users.findOne({\n      eppn: {\n        $exists: true\n      }\n    }, {\n      fields: {\n        eppn: 1\n      }\n    })); // if it's using the old default value, simply switch to the new default\n\n    if (setting.value === '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}') {\n      // include de eppn identifier if it was used\n      const value = \"{\\\"username\\\":\\\"username\\\", \\\"email\\\":\\\"email\\\", \\\"name\\\": \\\"cn\\\"\".concat(usedEppn ? ', \"__identifier__\": \"eppn\"' : '', \"}\");\n      Promise.await(Settings.update({\n        _id\n      }, {\n        $set: {\n          value\n        }\n      }));\n      return;\n    }\n\n    let oldMap;\n\n    try {\n      oldMap = JSON.parse(setting.value);\n    } catch (e) {\n      // If the current value wasn't even a proper JSON, we don't need to worry about changing it.\n      return;\n    }\n\n    const newMap = {};\n\n    for (const key in oldMap) {\n      if (!oldMap.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = oldMap[key]; // A simple idpField->spField is converted to spField->idpField\n\n      if (typeof value === 'string') {\n        newMap[value] = key;\n      } else if (typeof value === 'object') {\n        const {\n          field,\n          regex\n        } = value; // If it didn't have a 'field' attribute, it was ignored by SAML, but let's keep it on the JSON anyway\n\n        if (!field) {\n          newMap[\"_\".concat(key)] = {\n            attribute: key,\n            regex\n          };\n          continue;\n        } // { idpField: { field: spField, regex} }  becomes { spField: { attribute: idpField, regex } }\n\n\n        newMap[field] = {\n          attribute: key,\n          regex\n        };\n      }\n    } // eppn was a hardcoded custom identifier, we need to add it to the fieldmap to ensure any existing instances won't break\n\n\n    if (usedEppn) {\n      newMap.__identifier__ = 'eppn';\n    }\n\n    const value = JSON.stringify(newMap);\n    Settings.update({\n      _id\n    }, {\n      $set: {\n        value\n      }\n    });\n  });\n}\n\nfunction updateIdentifierLocation() {\n  Users.update({\n    eppn: {\n      $exists: 1\n    }\n  }, {\n    $rename: {\n      eppn: 'services.saml.eppn'\n    }\n  }, {\n    multi: true\n  });\n}\n\nfunction setOldLogoutResponseTemplate() {\n  // For existing users, use a template compatible with the old SAML implementation instead of the default\n  return Settings.update({\n    _id: 'SAML_Custom_Default_LogoutResponse_template'\n  }, {\n    $set: {\n      value: \"<samlp:LogoutResponse xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" ID=\\\"__newId__\\\" Version=\\\"2.0\\\" IssueInstant=\\\"__instant__\\\" Destination=\\\"__idpSLORedirectURL__\\\">\\n  <saml:Issuer xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">__issuer__</saml:Issuer>\\n  <samlp:StatusCode Value=\\\"urn:oasis:names:tc:SAML:2.0:status:Success\\\"/>\\n</samlp:LogoutResponse>\"\n    }\n  }, {\n    upsert: true\n  });\n}\n\naddMigration({\n  version: 194,\n\n  up() {\n    return Promise.asyncApply(() => {\n      Promise.await(updateFieldMap());\n      Promise.await(updateIdentifierLocation());\n      Promise.await(setOldLogoutResponseTemplate());\n    });\n  }\n\n});","map":{"version":3,"sources":["server/startup/migrations/v194.js"],"names":["Users","module","link","v","Settings","addMigration","updateFieldMap","_id","setting","findOne","value","usedEppn","Boolean","eppn","$exists","fields","update","$set","oldMap","JSON","parse","e","newMap","key","hasOwnProperty","field","regex","attribute","__identifier__","stringify","updateIdentifierLocation","$rename","multi","setOldLogoutResponseTemplate","upsert","version","up"],"mappings":"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","sourcesContent":["import { Users } from '../../../app/models/server';\nimport { Settings } from '../../../app/models/server/raw';\nimport { addMigration } from '../../lib/migrations';\n\nasync function updateFieldMap() {\n\tconst _id = 'SAML_Custom_Default_user_data_fieldmap';\n\tconst setting = await Settings.findOne({ _id });\n\tif (!setting || !setting.value) {\n\t\treturn;\n\t}\n\n\t// Check if there's any user with an 'eppn' attribute. This is a custom identifier that was hardcoded on the old version\n\t// If there's any user with the eppn attribute stored on mongo, we will include it on the new json so that it'll continue to be used.\n\tconst usedEppn = Boolean(Users.findOne({ eppn: { $exists: true } }, { fields: { eppn: 1 } }));\n\n\t// if it's using the old default value, simply switch to the new default\n\tif (setting.value === '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}') {\n\t\t// include de eppn identifier if it was used\n\t\tconst value = `{\"username\":\"username\", \"email\":\"email\", \"name\": \"cn\"${usedEppn ? ', \"__identifier__\": \"eppn\"' : ''}}`;\n\t\tawait Settings.update(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tvalue,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\treturn;\n\t}\n\n\tlet oldMap;\n\n\ttry {\n\t\toldMap = JSON.parse(setting.value);\n\t} catch (e) {\n\t\t// If the current value wasn't even a proper JSON, we don't need to worry about changing it.\n\t\treturn;\n\t}\n\n\tconst newMap = {};\n\tfor (const key in oldMap) {\n\t\tif (!oldMap.hasOwnProperty(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = oldMap[key];\n\t\t// A simple idpField->spField is converted to spField->idpField\n\t\tif (typeof value === 'string') {\n\t\t\tnewMap[value] = key;\n\t\t} else if (typeof value === 'object') {\n\t\t\tconst { field, regex } = value;\n\n\t\t\t// If it didn't have a 'field' attribute, it was ignored by SAML, but let's keep it on the JSON anyway\n\t\t\tif (!field) {\n\t\t\t\tnewMap[`_${key}`] = {\n\t\t\t\t\tattribute: key,\n\t\t\t\t\tregex,\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// { idpField: { field: spField, regex} }  becomes { spField: { attribute: idpField, regex } }\n\t\t\tnewMap[field] = {\n\t\t\t\tattribute: key,\n\t\t\t\tregex,\n\t\t\t};\n\t\t}\n\t}\n\n\t// eppn was a hardcoded custom identifier, we need to add it to the fieldmap to ensure any existing instances won't break\n\tif (usedEppn) {\n\t\tnewMap.__identifier__ = 'eppn';\n\t}\n\n\tconst value = JSON.stringify(newMap);\n\n\tSettings.update(\n\t\t{ _id },\n\t\t{\n\t\t\t$set: {\n\t\t\t\tvalue,\n\t\t\t},\n\t\t},\n\t);\n}\n\nfunction updateIdentifierLocation() {\n\tUsers.update({ eppn: { $exists: 1 } }, { $rename: { eppn: 'services.saml.eppn' } }, { multi: true });\n}\n\nfunction setOldLogoutResponseTemplate() {\n\t// For existing users, use a template compatible with the old SAML implementation instead of the default\n\treturn Settings.update(\n\t\t{\n\t\t\t_id: 'SAML_Custom_Default_LogoutResponse_template',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tvalue: `<samlp:LogoutResponse xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ID=\"__newId__\" Version=\"2.0\" IssueInstant=\"__instant__\" Destination=\"__idpSLORedirectURL__\">\n  <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">__issuer__</saml:Issuer>\n  <samlp:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/>\n</samlp:LogoutResponse>`,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n}\n\naddMigration({\n\tversion: 194,\n\tasync up() {\n\t\tawait updateFieldMap();\n\t\tawait updateIdentifierLocation();\n\t\tawait setOldLogoutResponseTemplate();\n\t},\n});\n"]},"sourceType":"module","hash":"65c56aadfd861184f0533233a9ec598c408fe884"}
