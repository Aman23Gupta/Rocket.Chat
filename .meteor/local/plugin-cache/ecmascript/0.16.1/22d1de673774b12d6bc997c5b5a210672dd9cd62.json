{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/methods/messageSearch.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/methods/messageSearch.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/methods/messageSearch.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/server/methods/messageSearch.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/messageSearch.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 2);\nlet canAccessRoom;\nmodule.link(\"../../app/authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 3);\nlet Subscriptions;\nmodule.link(\"../../app/models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 4);\nlet Messages;\nmodule.link(\"../../app/models/server/raw\", {\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nlet readSecondaryPreferred;\nmodule.link(\"../database/readSecondaryPreferred\", {\n  readSecondaryPreferred(v) {\n    readSecondaryPreferred = v;\n  }\n\n}, 7);\nMeteor.methods({\n  messageSearch(text, rid, limit, offset) {\n    check(text, String);\n    check(rid, Match.Maybe(String));\n    check(limit, Match.Optional(Number));\n    check(offset, Match.Optional(Number)); // TODO: Evaluate why we are returning `users` and `channels`, as the only thing that gets set is the `messages`.\n\n    const result = {\n      message: {\n        docs: []\n      }\n    };\n    const currentUserId = Meteor.userId();\n\n    if (!currentUserId) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'messageSearch'\n      });\n    } // Don't process anything else if the user can't access the room\n\n\n    if (rid) {\n      if (!canAccessRoom({\n        _id: rid\n      }, {\n        _id: currentUserId\n      })) {\n        return false;\n      }\n    } else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n      return result;\n    }\n\n    const user = Meteor.user();\n    const currentUserName = user.username;\n    const currentUserTimezoneOffset = user.utcOffset;\n    const query = {};\n    const options = {\n      projection: {},\n      sort: {\n        ts: -1\n      },\n      skip: offset || 0,\n      limit: limit || 20\n    }; // I would place these methods at the bottom of the file for clarity but travis doesn't appreciate that.\n    // (no-use-before-define)\n\n    function filterStarred() {\n      query['starred._id'] = currentUserId;\n      return '';\n    }\n\n    function filterUrl() {\n      query['urls.0'] = {\n        $exists: true\n      };\n      return '';\n    }\n\n    function filterPinned() {\n      query.pinned = true;\n      return '';\n    }\n\n    function filterLocation() {\n      query.location = {\n        $exist: true\n      };\n      return '';\n    }\n\n    function filterBeforeDate(_, day, month, year) {\n      month--;\n      const beforeDate = new Date(year, month, day);\n      beforeDate.setHours(beforeDate.getUTCHours() + beforeDate.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n      query.ts = {\n        $lte: beforeDate\n      };\n      return '';\n    }\n\n    function filterAfterDate(_, day, month, year) {\n      month--;\n      day++;\n      const afterDate = new Date(year, month, day);\n      afterDate.setUTCHours(afterDate.getUTCHours() + afterDate.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n\n      if (query.ts) {\n        query.ts.$gte = afterDate;\n      } else {\n        query.ts = {\n          $gte: afterDate\n        };\n      }\n\n      return '';\n    }\n\n    function filterOnDate(_, day, month, year) {\n      month--;\n      const date = new Date(year, month, day);\n      date.setUTCHours(date.getUTCHours() + date.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n      const dayAfter = new Date(date);\n      dayAfter.setDate(dayAfter.getDate() + 1);\n      delete query.ts;\n      query.ts = {\n        $gte: date,\n        $lt: dayAfter\n      };\n      return '';\n    }\n\n    function filterLabel(_, tag) {\n      query['attachments.0.labels'] = new RegExp(escapeRegExp(tag), 'i');\n      return '';\n    }\n\n    function filterTitle(_, tag) {\n      query['attachments.title'] = new RegExp(escapeRegExp(tag), 'i');\n      return '';\n    }\n\n    function filterDescription(_, tag) {\n      query['attachments.description'] = new RegExp(escapeRegExp(tag), 'i');\n      return '';\n    }\n\n    function sortByTimestamp(_, direction) {\n      if (direction.startsWith('asc')) {\n        options.sort.ts = 1;\n      } else if (direction.startsWith('desc')) {\n        options.sort.ts = -1;\n      }\n\n      return '';\n    }\n    /*\n     text = 'from:rodrigo mention:gabriel chat'\n     */\n    // Query for senders\n\n\n    const from = [];\n    text = text.replace(/from:([a-z0-9.-_]+)/gi, function (match, username) {\n      if (username === 'me' && !from.includes(currentUserName)) {\n        username = currentUserName;\n      }\n\n      from.push(username);\n      return '';\n    });\n\n    if (from.length > 0) {\n      query['u.username'] = {\n        $regex: from.join('|'),\n        $options: 'i'\n      };\n    } // Query for senders\n\n\n    const mention = [];\n    text = text.replace(/mention:([a-z0-9.-_]+)/gi, function (match, username) {\n      mention.push(username);\n      return '';\n    });\n\n    if (mention.length > 0) {\n      query['mentions.username'] = {\n        $regex: mention.join('|'),\n        $options: 'i'\n      };\n    } // Filter on messages that are starred by the current user.\n\n\n    text = text.replace(/has:star/g, filterStarred); // Filter on messages that have an url.\n\n    text = text.replace(/has:url|has:link/g, filterUrl); // Filter on pinned messages.\n\n    text = text.replace(/is:pinned|has:pin/g, filterPinned); // Filter on messages which have a location attached.\n\n    text = text.replace(/has:location|has:map/g, filterLocation); // Filter image tags\n\n    text = text.replace(/label:(\\w+)/g, filterLabel); // Filter on description of messages.\n\n    text = text.replace(/file-desc:(\\w+)/g, filterDescription); // Filter on title of messages.\n\n    text = text.replace(/file-title:(\\w+)/g, filterTitle); // Filtering before/after/on a date\n    // matches dd-MM-yyyy, dd/MM/yyyy, dd-MM-yyyy, prefixed by before:, after: and on: respectively.\n    // Example: before:15/09/2016 after: 10-08-2016\n    // if \"on:\" is set, \"before:\" and \"after:\" are ignored.\n\n    text = text.replace(/before:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterBeforeDate);\n    text = text.replace(/after:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterAfterDate);\n    text = text.replace(/on:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterOnDate); // Sort order\n\n    text = text.replace(/(?:order|sort):(asc|ascend|ascending|desc|descend|descending)/g, sortByTimestamp); // Query in message text\n\n    text = text.trim().replace(/\\s\\s/g, ' ');\n\n    if (text !== '') {\n      if (/^\\/.+\\/[imxs]*$/.test(text)) {\n        const r = text.split('/');\n        query.msg = {\n          $regex: r[1],\n          $options: r[2]\n        };\n      } else if (settings.get('Message_AlwaysSearchRegExp')) {\n        query.msg = {\n          $regex: text,\n          $options: 'i'\n        };\n      } else {\n        query.$text = {\n          $search: text\n        };\n        options.projection = {\n          score: {\n            $meta: 'textScore'\n          }\n        };\n      }\n    }\n\n    if (Object.keys(query).length > 0) {\n      query.t = {\n        $ne: 'rm' // hide removed messages (useful when searching for user messages)\n\n      };\n      query._hidden = {\n        $ne: true // don't return _hidden messages\n\n      };\n\n      if (rid) {\n        query.rid = rid;\n      } else {\n        query.rid = {\n          $in: Subscriptions.findByUserId(user._id).fetch().map(subscription => subscription.rid)\n        };\n      }\n\n      if (!settings.get('Message_ShowEditedStatus')) {\n        options.projection = {\n          editedAt: 0\n        };\n      }\n\n      result.message.docs = Promise.await(Messages.find(query, _objectSpread({\n        readPreference: readSecondaryPreferred(Messages.col.s.db)\n      }, options)).toArray());\n    }\n\n    return result;\n  }\n\n});","map":{"version":3,"sources":["server/methods/messageSearch.js"],"names":["_objectSpread","module","link","default","v","Meteor","Match","check","escapeRegExp","canAccessRoom","Subscriptions","Messages","settings","readSecondaryPreferred","methods","messageSearch","text","rid","limit","offset","String","Maybe","Optional","Number","result","message","docs","currentUserId","userId","Error","method","_id","get","user","currentUserName","username","currentUserTimezoneOffset","utcOffset","query","options","projection","sort","ts","skip","filterStarred","filterUrl","$exists","filterPinned","pinned","filterLocation","location","$exist","filterBeforeDate","_","day","month","year","beforeDate","Date","setHours","getUTCHours","getTimezoneOffset","$lte","filterAfterDate","afterDate","setUTCHours","$gte","filterOnDate","date","dayAfter","setDate","getDate","$lt","filterLabel","tag","RegExp","filterTitle","filterDescription","sortByTimestamp","direction","startsWith","from","replace","match","includes","push","length","$regex","join","$options","mention","trim","test","r","split","msg","$text","$search","score","$meta","Object","keys","t","$ne","_hidden","$in","findByUserId","fetch","map","subscription","editedAt","Promise","await","find","readPreference","col","s","db","toArray"],"mappings":"AAAA,IAAIA,aAAJ;;AAAkBC,MAAM,CAACC,IAAP,CAAY,sCAAZ,EAAmD;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,aAAa,GAACI,CAAd;AAAgB;;AAA5B,CAAnD,EAAiF,CAAjF;AAAlB,IAAIC,MAAJ;AAAWJ,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACG,EAAAA,MAAM,CAACD,CAAD,EAAG;AAACC,IAAAA,MAAM,GAACD,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIE,KAAJ,EAAUC,KAAV;AAAgBN,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACI,EAAAA,KAAK,CAACF,CAAD,EAAG;AAACE,IAAAA,KAAK,GAACF,CAAN;AAAQ,GAAlB;;AAAmBG,EAAAA,KAAK,CAACH,CAAD,EAAG;AAACG,IAAAA,KAAK,GAACH,CAAN;AAAQ;;AAApC,CAA3B,EAAiE,CAAjE;AAAoE,IAAII,YAAJ;AAAiBP,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACM,EAAAA,YAAY,CAACJ,CAAD,EAAG;AAACI,IAAAA,YAAY,GAACJ,CAAb;AAAe;;AAAhC,CAA1C,EAA4E,CAA5E;AAA+E,IAAIK,aAAJ;AAAkBR,MAAM,CAACC,IAAP,CAAY,gCAAZ,EAA6C;AAACO,EAAAA,aAAa,CAACL,CAAD,EAAG;AAACK,IAAAA,aAAa,GAACL,CAAd;AAAgB;;AAAlC,CAA7C,EAAiF,CAAjF;AAAoF,IAAIM,aAAJ;AAAkBT,MAAM,CAACC,IAAP,CAAY,yBAAZ,EAAsC;AAACQ,EAAAA,aAAa,CAACN,CAAD,EAAG;AAACM,IAAAA,aAAa,GAACN,CAAd;AAAgB;;AAAlC,CAAtC,EAA0E,CAA1E;AAA6E,IAAIO,QAAJ;AAAaV,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACS,EAAAA,QAAQ,CAACP,CAAD,EAAG;AAACO,IAAAA,QAAQ,GAACP,CAAT;AAAW;;AAAxB,CAA1C,EAAoE,CAApE;AAAuE,IAAIQ,QAAJ;AAAaX,MAAM,CAACC,IAAP,CAAY,2BAAZ,EAAwC;AAACU,EAAAA,QAAQ,CAACR,CAAD,EAAG;AAACQ,IAAAA,QAAQ,GAACR,CAAT;AAAW;;AAAxB,CAAxC,EAAkE,CAAlE;AAAqE,IAAIS,sBAAJ;AAA2BZ,MAAM,CAACC,IAAP,CAAY,oCAAZ,EAAiD;AAACW,EAAAA,sBAAsB,CAACT,CAAD,EAAG;AAACS,IAAAA,sBAAsB,GAACT,CAAvB;AAAyB;;AAApD,CAAjD,EAAuG,CAAvG;AAU1nBC,MAAM,CAACS,OAAP,CAAe;AACdC,EAAAA,aAAa,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AACvCZ,IAAAA,KAAK,CAACS,IAAD,EAAOI,MAAP,CAAL;AACAb,IAAAA,KAAK,CAACU,GAAD,EAAMX,KAAK,CAACe,KAAN,CAAYD,MAAZ,CAAN,CAAL;AACAb,IAAAA,KAAK,CAACW,KAAD,EAAQZ,KAAK,CAACgB,QAAN,CAAeC,MAAf,CAAR,CAAL;AACAhB,IAAAA,KAAK,CAACY,MAAD,EAASb,KAAK,CAACgB,QAAN,CAAeC,MAAf,CAAT,CAAL,CAJuC,CAMvC;;AACA,UAAMC,MAAM,GAAG;AACdC,MAAAA,OAAO,EAAE;AACRC,QAAAA,IAAI,EAAE;AADE;AADK,KAAf;AAMA,UAAMC,aAAa,GAAGtB,MAAM,CAACuB,MAAP,EAAtB;;AACA,QAAI,CAACD,aAAL,EAAoB;AACnB,YAAM,IAAItB,MAAM,CAACwB,KAAX,CAAiB,oBAAjB,EAAuC,cAAvC,EAAuD;AAC5DC,QAAAA,MAAM,EAAE;AADoD,OAAvD,CAAN;AAGA,KAlBsC,CAoBvC;;;AACA,QAAIb,GAAJ,EAAS;AACR,UAAI,CAACR,aAAa,CAAC;AAAEsB,QAAAA,GAAG,EAAEd;AAAP,OAAD,EAAe;AAAEc,QAAAA,GAAG,EAAEJ;AAAP,OAAf,CAAlB,EAA0D;AACzD,eAAO,KAAP;AACA;AACD,KAJD,MAIO,IAAIf,QAAQ,CAACoB,GAAT,CAAa,4CAAb,MAA+D,IAAnE,EAAyE;AAC/E,aAAOR,MAAP;AACA;;AAED,UAAMS,IAAI,GAAG5B,MAAM,CAAC4B,IAAP,EAAb;AACA,UAAMC,eAAe,GAAGD,IAAI,CAACE,QAA7B;AACA,UAAMC,yBAAyB,GAAGH,IAAI,CAACI,SAAvC;AAEA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,OAAO,GAAG;AACfC,MAAAA,UAAU,EAAE,EADG;AAEfC,MAAAA,IAAI,EAAE;AACLC,QAAAA,EAAE,EAAE,CAAC;AADA,OAFS;AAKfC,MAAAA,IAAI,EAAExB,MAAM,IAAI,CALD;AAMfD,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAND,KAAhB,CAlCuC,CA2CvC;AACA;;AAEA,aAAS0B,aAAT,GAAyB;AACxBN,MAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBX,aAAvB;AACA,aAAO,EAAP;AACA;;AAED,aAASkB,SAAT,GAAqB;AACpBP,MAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB;AACjBQ,QAAAA,OAAO,EAAE;AADQ,OAAlB;AAGA,aAAO,EAAP;AACA;;AAED,aAASC,YAAT,GAAwB;AACvBT,MAAAA,KAAK,CAACU,MAAN,GAAe,IAAf;AACA,aAAO,EAAP;AACA;;AAED,aAASC,cAAT,GAA0B;AACzBX,MAAAA,KAAK,CAACY,QAAN,GAAiB;AAChBC,QAAAA,MAAM,EAAE;AADQ,OAAjB;AAGA,aAAO,EAAP;AACA;;AAED,aAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,IAAzC,EAA+C;AAC9CD,MAAAA,KAAK;AACL,YAAME,UAAU,GAAG,IAAIC,IAAJ,CAASF,IAAT,EAAeD,KAAf,EAAsBD,GAAtB,CAAnB;AACAG,MAAAA,UAAU,CAACE,QAAX,CAAoBF,UAAU,CAACG,WAAX,KAA2BH,UAAU,CAACI,iBAAX,KAAiC,EAA5D,GAAiEzB,yBAArF;AACAE,MAAAA,KAAK,CAACI,EAAN,GAAW;AACVoB,QAAAA,IAAI,EAAEL;AADI,OAAX;AAGA,aAAO,EAAP;AACA;;AAED,aAASM,eAAT,CAAyBV,CAAzB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8C;AAC7CD,MAAAA,KAAK;AACLD,MAAAA,GAAG;AACH,YAAMU,SAAS,GAAG,IAAIN,IAAJ,CAASF,IAAT,EAAeD,KAAf,EAAsBD,GAAtB,CAAlB;AACAU,MAAAA,SAAS,CAACC,WAAV,CAAsBD,SAAS,CAACJ,WAAV,KAA0BI,SAAS,CAACH,iBAAV,KAAgC,EAA1D,GAA+DzB,yBAArF;;AACA,UAAIE,KAAK,CAACI,EAAV,EAAc;AACbJ,QAAAA,KAAK,CAACI,EAAN,CAASwB,IAAT,GAAgBF,SAAhB;AACA,OAFD,MAEO;AACN1B,QAAAA,KAAK,CAACI,EAAN,GAAW;AACVwB,UAAAA,IAAI,EAAEF;AADI,SAAX;AAGA;;AACD,aAAO,EAAP;AACA;;AAED,aAASG,YAAT,CAAsBd,CAAtB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AAC1CD,MAAAA,KAAK;AACL,YAAMa,IAAI,GAAG,IAAIV,IAAJ,CAASF,IAAT,EAAeD,KAAf,EAAsBD,GAAtB,CAAb;AACAc,MAAAA,IAAI,CAACH,WAAL,CAAiBG,IAAI,CAACR,WAAL,KAAqBQ,IAAI,CAACP,iBAAL,KAA2B,EAAhD,GAAqDzB,yBAAtE;AACA,YAAMiC,QAAQ,GAAG,IAAIX,IAAJ,CAASU,IAAT,CAAjB;AACAC,MAAAA,QAAQ,CAACC,OAAT,CAAiBD,QAAQ,CAACE,OAAT,KAAqB,CAAtC;AACA,aAAOjC,KAAK,CAACI,EAAb;AACAJ,MAAAA,KAAK,CAACI,EAAN,GAAW;AACVwB,QAAAA,IAAI,EAAEE,IADI;AAEVI,QAAAA,GAAG,EAAEH;AAFK,OAAX;AAIA,aAAO,EAAP;AACA;;AAED,aAASI,WAAT,CAAqBpB,CAArB,EAAwBqB,GAAxB,EAA6B;AAC5BpC,MAAAA,KAAK,CAAC,sBAAD,CAAL,GAAgC,IAAIqC,MAAJ,CAAWnE,YAAY,CAACkE,GAAD,CAAvB,EAA8B,GAA9B,CAAhC;AACA,aAAO,EAAP;AACA;;AAED,aAASE,WAAT,CAAqBvB,CAArB,EAAwBqB,GAAxB,EAA6B;AAC5BpC,MAAAA,KAAK,CAAC,mBAAD,CAAL,GAA6B,IAAIqC,MAAJ,CAAWnE,YAAY,CAACkE,GAAD,CAAvB,EAA8B,GAA9B,CAA7B;AACA,aAAO,EAAP;AACA;;AAED,aAASG,iBAAT,CAA2BxB,CAA3B,EAA8BqB,GAA9B,EAAmC;AAClCpC,MAAAA,KAAK,CAAC,yBAAD,CAAL,GAAmC,IAAIqC,MAAJ,CAAWnE,YAAY,CAACkE,GAAD,CAAvB,EAA8B,GAA9B,CAAnC;AACA,aAAO,EAAP;AACA;;AAED,aAASI,eAAT,CAAyBzB,CAAzB,EAA4B0B,SAA5B,EAAuC;AACtC,UAAIA,SAAS,CAACC,UAAV,CAAqB,KAArB,CAAJ,EAAiC;AAChCzC,QAAAA,OAAO,CAACE,IAAR,CAAaC,EAAb,GAAkB,CAAlB;AACA,OAFD,MAEO,IAAIqC,SAAS,CAACC,UAAV,CAAqB,MAArB,CAAJ,EAAkC;AACxCzC,QAAAA,OAAO,CAACE,IAAR,CAAaC,EAAb,GAAkB,CAAC,CAAnB;AACA;;AACD,aAAO,EAAP;AACA;AAED;AACF;AACA;AAEE;;;AACA,UAAMuC,IAAI,GAAG,EAAb;AACAjE,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,uBAAb,EAAsC,UAAUC,KAAV,EAAiBhD,QAAjB,EAA2B;AACvE,UAAIA,QAAQ,KAAK,IAAb,IAAqB,CAAC8C,IAAI,CAACG,QAAL,CAAclD,eAAd,CAA1B,EAA0D;AACzDC,QAAAA,QAAQ,GAAGD,eAAX;AACA;;AACD+C,MAAAA,IAAI,CAACI,IAAL,CAAUlD,QAAV;AACA,aAAO,EAAP;AACA,KANM,CAAP;;AAQA,QAAI8C,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACpBhD,MAAAA,KAAK,CAAC,YAAD,CAAL,GAAsB;AACrBiD,QAAAA,MAAM,EAAEN,IAAI,CAACO,IAAL,CAAU,GAAV,CADa;AAErBC,QAAAA,QAAQ,EAAE;AAFW,OAAtB;AAIA,KAxJsC,CA0JvC;;;AACA,UAAMC,OAAO,GAAG,EAAhB;AACA1E,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,0BAAb,EAAyC,UAAUC,KAAV,EAAiBhD,QAAjB,EAA2B;AAC1EuD,MAAAA,OAAO,CAACL,IAAR,CAAalD,QAAb;AACA,aAAO,EAAP;AACA,KAHM,CAAP;;AAKA,QAAIuD,OAAO,CAACJ,MAAR,GAAiB,CAArB,EAAwB;AACvBhD,MAAAA,KAAK,CAAC,mBAAD,CAAL,GAA6B;AAC5BiD,QAAAA,MAAM,EAAEG,OAAO,CAACF,IAAR,CAAa,GAAb,CADoB;AAE5BC,QAAAA,QAAQ,EAAE;AAFkB,OAA7B;AAIA,KAtKsC,CAwKvC;;;AACAzE,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,WAAb,EAA0BtC,aAA1B,CAAP,CAzKuC,CA0KvC;;AACA5B,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,mBAAb,EAAkCrC,SAAlC,CAAP,CA3KuC,CA4KvC;;AACA7B,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,oBAAb,EAAmCnC,YAAnC,CAAP,CA7KuC,CA8KvC;;AACA/B,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,uBAAb,EAAsCjC,cAAtC,CAAP,CA/KuC,CAgLvC;;AACAjC,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,cAAb,EAA6BT,WAA7B,CAAP,CAjLuC,CAkLvC;;AACAzD,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,kBAAb,EAAiCL,iBAAjC,CAAP,CAnLuC,CAoLvC;;AACA7D,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,mBAAb,EAAkCN,WAAlC,CAAP,CArLuC,CAsLvC;AACA;AACA;AACA;;AACA5D,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,iDAAb,EAAgE9B,gBAAhE,CAAP;AACApC,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,gDAAb,EAA+DnB,eAA/D,CAAP;AACA/C,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,6CAAb,EAA4Df,YAA5D,CAAP,CA5LuC,CA6LvC;;AACAnD,IAAAA,IAAI,GAAGA,IAAI,CAACkE,OAAL,CAAa,gEAAb,EAA+EJ,eAA/E,CAAP,CA9LuC,CAgMvC;;AACA9D,IAAAA,IAAI,GAAGA,IAAI,CAAC2E,IAAL,GAAYT,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAP;;AACA,QAAIlE,IAAI,KAAK,EAAb,EAAiB;AAChB,UAAI,kBAAkB4E,IAAlB,CAAuB5E,IAAvB,CAAJ,EAAkC;AACjC,cAAM6E,CAAC,GAAG7E,IAAI,CAAC8E,KAAL,CAAW,GAAX,CAAV;AACAxD,QAAAA,KAAK,CAACyD,GAAN,GAAY;AACXR,UAAAA,MAAM,EAAEM,CAAC,CAAC,CAAD,CADE;AAEXJ,UAAAA,QAAQ,EAAEI,CAAC,CAAC,CAAD;AAFA,SAAZ;AAIA,OAND,MAMO,IAAIjF,QAAQ,CAACoB,GAAT,CAAa,4BAAb,CAAJ,EAAgD;AACtDM,QAAAA,KAAK,CAACyD,GAAN,GAAY;AACXR,UAAAA,MAAM,EAAEvE,IADG;AAEXyE,UAAAA,QAAQ,EAAE;AAFC,SAAZ;AAIA,OALM,MAKA;AACNnD,QAAAA,KAAK,CAAC0D,KAAN,GAAc;AACbC,UAAAA,OAAO,EAAEjF;AADI,SAAd;AAGAuB,QAAAA,OAAO,CAACC,UAAR,GAAqB;AACpB0D,UAAAA,KAAK,EAAE;AACNC,YAAAA,KAAK,EAAE;AADD;AADa,SAArB;AAKA;AACD;;AAED,QAAIC,MAAM,CAACC,IAAP,CAAY/D,KAAZ,EAAmBgD,MAAnB,GAA4B,CAAhC,EAAmC;AAClChD,MAAAA,KAAK,CAACgE,CAAN,GAAU;AACTC,QAAAA,GAAG,EAAE,IADI,CACE;;AADF,OAAV;AAGAjE,MAAAA,KAAK,CAACkE,OAAN,GAAgB;AACfD,QAAAA,GAAG,EAAE,IADU,CACJ;;AADI,OAAhB;;AAIA,UAAItF,GAAJ,EAAS;AACRqB,QAAAA,KAAK,CAACrB,GAAN,GAAYA,GAAZ;AACA,OAFD,MAEO;AACNqB,QAAAA,KAAK,CAACrB,GAAN,GAAY;AACXwF,UAAAA,GAAG,EAAE/F,aAAa,CAACgG,YAAd,CAA2BzE,IAAI,CAACF,GAAhC,EACH4E,KADG,GAEHC,GAFG,CAEEC,YAAD,IAAkBA,YAAY,CAAC5F,GAFhC;AADM,SAAZ;AAKA;;AAED,UAAI,CAACL,QAAQ,CAACoB,GAAT,CAAa,0BAAb,CAAL,EAA+C;AAC9CO,QAAAA,OAAO,CAACC,UAAR,GAAqB;AACpBsE,UAAAA,QAAQ,EAAE;AADU,SAArB;AAGA;;AAEDtF,MAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBqF,OAAO,CAACC,KAAR,CACrBrG,QAAQ,CAACsG,IAAT,CAAc3E,KAAd;AACC4E,QAAAA,cAAc,EAAErG,sBAAsB,CAACF,QAAQ,CAACwG,GAAT,CAAaC,CAAb,CAAeC,EAAhB;AADvC,SAEI9E,OAFJ,GAGG+E,OAHH,EADqB,CAAtB;AAMA;;AAED,WAAO9F,MAAP;AACA;;AA5Pa,CAAf","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { canAccessRoom } from '../../app/authorization/server';\nimport { Subscriptions } from '../../app/models/server';\nimport { Messages } from '../../app/models/server/raw';\nimport { settings } from '../../app/settings/server';\nimport { readSecondaryPreferred } from '../database/readSecondaryPreferred';\n\nMeteor.methods({\n\tmessageSearch(text, rid, limit, offset) {\n\t\tcheck(text, String);\n\t\tcheck(rid, Match.Maybe(String));\n\t\tcheck(limit, Match.Optional(Number));\n\t\tcheck(offset, Match.Optional(Number));\n\n\t\t// TODO: Evaluate why we are returning `users` and `channels`, as the only thing that gets set is the `messages`.\n\t\tconst result = {\n\t\t\tmessage: {\n\t\t\t\tdocs: [],\n\t\t\t},\n\t\t};\n\n\t\tconst currentUserId = Meteor.userId();\n\t\tif (!currentUserId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'messageSearch',\n\t\t\t});\n\t\t}\n\n\t\t// Don't process anything else if the user can't access the room\n\t\tif (rid) {\n\t\t\tif (!canAccessRoom({ _id: rid }, { _id: currentUserId })) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst user = Meteor.user();\n\t\tconst currentUserName = user.username;\n\t\tconst currentUserTimezoneOffset = user.utcOffset;\n\n\t\tconst query = {};\n\t\tconst options = {\n\t\t\tprojection: {},\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset || 0,\n\t\t\tlimit: limit || 20,\n\t\t};\n\n\t\t// I would place these methods at the bottom of the file for clarity but travis doesn't appreciate that.\n\t\t// (no-use-before-define)\n\n\t\tfunction filterStarred() {\n\t\t\tquery['starred._id'] = currentUserId;\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterUrl() {\n\t\t\tquery['urls.0'] = {\n\t\t\t\t$exists: true,\n\t\t\t};\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterPinned() {\n\t\t\tquery.pinned = true;\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterLocation() {\n\t\t\tquery.location = {\n\t\t\t\t$exist: true,\n\t\t\t};\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterBeforeDate(_, day, month, year) {\n\t\t\tmonth--;\n\t\t\tconst beforeDate = new Date(year, month, day);\n\t\t\tbeforeDate.setHours(beforeDate.getUTCHours() + beforeDate.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n\t\t\tquery.ts = {\n\t\t\t\t$lte: beforeDate,\n\t\t\t};\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterAfterDate(_, day, month, year) {\n\t\t\tmonth--;\n\t\t\tday++;\n\t\t\tconst afterDate = new Date(year, month, day);\n\t\t\tafterDate.setUTCHours(afterDate.getUTCHours() + afterDate.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n\t\t\tif (query.ts) {\n\t\t\t\tquery.ts.$gte = afterDate;\n\t\t\t} else {\n\t\t\t\tquery.ts = {\n\t\t\t\t\t$gte: afterDate,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterOnDate(_, day, month, year) {\n\t\t\tmonth--;\n\t\t\tconst date = new Date(year, month, day);\n\t\t\tdate.setUTCHours(date.getUTCHours() + date.getTimezoneOffset() / 60 + currentUserTimezoneOffset);\n\t\t\tconst dayAfter = new Date(date);\n\t\t\tdayAfter.setDate(dayAfter.getDate() + 1);\n\t\t\tdelete query.ts;\n\t\t\tquery.ts = {\n\t\t\t\t$gte: date,\n\t\t\t\t$lt: dayAfter,\n\t\t\t};\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterLabel(_, tag) {\n\t\t\tquery['attachments.0.labels'] = new RegExp(escapeRegExp(tag), 'i');\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterTitle(_, tag) {\n\t\t\tquery['attachments.title'] = new RegExp(escapeRegExp(tag), 'i');\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction filterDescription(_, tag) {\n\t\t\tquery['attachments.description'] = new RegExp(escapeRegExp(tag), 'i');\n\t\t\treturn '';\n\t\t}\n\n\t\tfunction sortByTimestamp(_, direction) {\n\t\t\tif (direction.startsWith('asc')) {\n\t\t\t\toptions.sort.ts = 1;\n\t\t\t} else if (direction.startsWith('desc')) {\n\t\t\t\toptions.sort.ts = -1;\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\t/*\n\t\t text = 'from:rodrigo mention:gabriel chat'\n\t\t */\n\n\t\t// Query for senders\n\t\tconst from = [];\n\t\ttext = text.replace(/from:([a-z0-9.-_]+)/gi, function (match, username) {\n\t\t\tif (username === 'me' && !from.includes(currentUserName)) {\n\t\t\t\tusername = currentUserName;\n\t\t\t}\n\t\t\tfrom.push(username);\n\t\t\treturn '';\n\t\t});\n\n\t\tif (from.length > 0) {\n\t\t\tquery['u.username'] = {\n\t\t\t\t$regex: from.join('|'),\n\t\t\t\t$options: 'i',\n\t\t\t};\n\t\t}\n\n\t\t// Query for senders\n\t\tconst mention = [];\n\t\ttext = text.replace(/mention:([a-z0-9.-_]+)/gi, function (match, username) {\n\t\t\tmention.push(username);\n\t\t\treturn '';\n\t\t});\n\n\t\tif (mention.length > 0) {\n\t\t\tquery['mentions.username'] = {\n\t\t\t\t$regex: mention.join('|'),\n\t\t\t\t$options: 'i',\n\t\t\t};\n\t\t}\n\n\t\t// Filter on messages that are starred by the current user.\n\t\ttext = text.replace(/has:star/g, filterStarred);\n\t\t// Filter on messages that have an url.\n\t\ttext = text.replace(/has:url|has:link/g, filterUrl);\n\t\t// Filter on pinned messages.\n\t\ttext = text.replace(/is:pinned|has:pin/g, filterPinned);\n\t\t// Filter on messages which have a location attached.\n\t\ttext = text.replace(/has:location|has:map/g, filterLocation);\n\t\t// Filter image tags\n\t\ttext = text.replace(/label:(\\w+)/g, filterLabel);\n\t\t// Filter on description of messages.\n\t\ttext = text.replace(/file-desc:(\\w+)/g, filterDescription);\n\t\t// Filter on title of messages.\n\t\ttext = text.replace(/file-title:(\\w+)/g, filterTitle);\n\t\t// Filtering before/after/on a date\n\t\t// matches dd-MM-yyyy, dd/MM/yyyy, dd-MM-yyyy, prefixed by before:, after: and on: respectively.\n\t\t// Example: before:15/09/2016 after: 10-08-2016\n\t\t// if \"on:\" is set, \"before:\" and \"after:\" are ignored.\n\t\ttext = text.replace(/before:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterBeforeDate);\n\t\ttext = text.replace(/after:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterAfterDate);\n\t\ttext = text.replace(/on:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4})/g, filterOnDate);\n\t\t// Sort order\n\t\ttext = text.replace(/(?:order|sort):(asc|ascend|ascending|desc|descend|descending)/g, sortByTimestamp);\n\n\t\t// Query in message text\n\t\ttext = text.trim().replace(/\\s\\s/g, ' ');\n\t\tif (text !== '') {\n\t\t\tif (/^\\/.+\\/[imxs]*$/.test(text)) {\n\t\t\t\tconst r = text.split('/');\n\t\t\t\tquery.msg = {\n\t\t\t\t\t$regex: r[1],\n\t\t\t\t\t$options: r[2],\n\t\t\t\t};\n\t\t\t} else if (settings.get('Message_AlwaysSearchRegExp')) {\n\t\t\t\tquery.msg = {\n\t\t\t\t\t$regex: text,\n\t\t\t\t\t$options: 'i',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tquery.$text = {\n\t\t\t\t\t$search: text,\n\t\t\t\t};\n\t\t\t\toptions.projection = {\n\t\t\t\t\tscore: {\n\t\t\t\t\t\t$meta: 'textScore',\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(query).length > 0) {\n\t\t\tquery.t = {\n\t\t\t\t$ne: 'rm', // hide removed messages (useful when searching for user messages)\n\t\t\t};\n\t\t\tquery._hidden = {\n\t\t\t\t$ne: true, // don't return _hidden messages\n\t\t\t};\n\n\t\t\tif (rid) {\n\t\t\t\tquery.rid = rid;\n\t\t\t} else {\n\t\t\t\tquery.rid = {\n\t\t\t\t\t$in: Subscriptions.findByUserId(user._id)\n\t\t\t\t\t\t.fetch()\n\t\t\t\t\t\t.map((subscription) => subscription.rid),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!settings.get('Message_ShowEditedStatus')) {\n\t\t\t\toptions.projection = {\n\t\t\t\t\teditedAt: 0,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tresult.message.docs = Promise.await(\n\t\t\t\tMessages.find(query, {\n\t\t\t\t\treadPreference: readSecondaryPreferred(Messages.col.s.db),\n\t\t\t\t\t...options,\n\t\t\t\t}).toArray(),\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t},\n});\n"]},"sourceType":"module","hash":"22d1de673774b12d6bc997c5b5a210672dd9cd62"}
