{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatVisitors.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/models/server/models/LivechatVisitors.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatVisitors.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/models/server/models/LivechatVisitors.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/LivechatVisitors.js"}},"code":"module.export({\n  LivechatVisitors: () => LivechatVisitors\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 1);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 2);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 3);\nlet Settings;\nmodule.link(\"./Settings\", {\n  default(v) {\n    Settings = v;\n  }\n\n}, 4);\n\nclass LivechatVisitors extends Base {\n  constructor() {\n    super('livechat_visitor');\n    this.tryEnsureIndex({\n      token: 1\n    });\n    this.tryEnsureIndex({\n      'phone.phoneNumber': 1\n    }, {\n      sparse: true\n    });\n  }\n  /**\n   * Gets visitor by token\n   * @param {string} token - Visitor token\n   */\n\n\n  getVisitorByToken(token, options) {\n    const query = {\n      token\n    };\n    return this.findOne(query, options);\n  }\n  /**\n   * Find visitors by _id\n   * @param {string} token - Visitor token\n   */\n\n\n  findById(_id, options) {\n    const query = {\n      _id\n    };\n    return this.find(query, options);\n  }\n  /**\n   * Find One visitor by _id\n   */\n\n\n  findOneById(_id, options) {\n    const query = {\n      _id\n    };\n    return this.findOne(query, options);\n  }\n  /**\n   * Gets visitor by token\n   * @param {string} token - Visitor token\n   */\n\n\n  findVisitorByToken(token) {\n    const query = {\n      token\n    };\n    return this.find(query);\n  }\n\n  updateLivechatDataByToken(token, key, value) {\n    let overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const query = {\n      token\n    };\n\n    if (!overwrite) {\n      const user = this.findOne(query, {\n        fields: {\n          livechatData: 1\n        }\n      });\n\n      if (user.livechatData && typeof user.livechatData[key] !== 'undefined') {\n        return true;\n      }\n    }\n\n    const update = {\n      $set: {\n        [\"livechatData.\".concat(key)]: value\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateLastAgentByToken(token, lastAgent) {\n    const query = {\n      token\n    };\n    const update = {\n      $set: {\n        lastAgent\n      }\n    };\n    return this.update(query, update);\n  }\n  /**\n   * Find a visitor by their phone number\n   * @return {object} User from db\n   */\n\n\n  findOneVisitorByPhone(phone) {\n    const query = {\n      'phone.phoneNumber': phone\n    };\n    return this.findOne(query);\n  }\n\n  getVisitorsBetweenDate(date) {\n    const query = {\n      _updatedAt: {\n        $gte: date.gte,\n        // ISO Date, ts >= date.gte\n        $lt: date.lt // ISODate, ts < date.lt\n\n      }\n    };\n    return this.find(query, {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n  /**\n   * Get the next visitor name\n   * @return {string} The next visitor name\n   */\n\n\n  getNextVisitorUsername() {\n    const query = {\n      _id: 'Livechat_guest_count'\n    };\n    const update = {\n      $inc: {\n        value: 1\n      }\n    };\n    const livechatCount = Settings.findAndModify(query, null, update);\n    return \"guest-\".concat(livechatCount.value.value + 1);\n  }\n\n  updateById(_id, update) {\n    return this.update({\n      _id\n    }, update);\n  }\n\n  saveGuestById(_id, data) {\n    const setData = {};\n    const unsetData = {};\n\n    if (data.name) {\n      if (!_.isEmpty(s.trim(data.name))) {\n        setData.name = s.trim(data.name);\n      } else {\n        unsetData.name = 1;\n      }\n    }\n\n    if (data.email) {\n      if (!_.isEmpty(s.trim(data.email))) {\n        setData.visitorEmails = [{\n          address: s.trim(data.email)\n        }];\n      } else {\n        unsetData.visitorEmails = 1;\n      }\n    }\n\n    if (data.phone) {\n      if (!_.isEmpty(s.trim(data.phone))) {\n        setData.phone = [{\n          phoneNumber: s.trim(data.phone)\n        }];\n      } else {\n        unsetData.phone = 1;\n      }\n    }\n\n    if (data.livechatData) {\n      Object.keys(data.livechatData).forEach(key => {\n        const value = s.trim(data.livechatData[key]);\n\n        if (value) {\n          setData[\"livechatData.\".concat(key)] = value;\n        } else {\n          unsetData[\"livechatData.\".concat(key)] = 1;\n        }\n      });\n    }\n\n    const update = {};\n\n    if (!_.isEmpty(setData)) {\n      update.$set = setData;\n    }\n\n    if (!_.isEmpty(unsetData)) {\n      update.$unset = unsetData;\n    }\n\n    if (_.isEmpty(update)) {\n      return true;\n    }\n\n    return this.update({\n      _id\n    }, update);\n  }\n\n  findOneGuestByEmailAddress(emailAddress) {\n    const query = {\n      'visitorEmails.address': new RegExp(\"^\".concat(escapeRegExp(emailAddress), \"$\"), 'i')\n    };\n    return this.findOne(query);\n  }\n\n  saveGuestEmailPhoneById(_id, emails, phones) {\n    const update = {\n      $addToSet: {}\n    };\n    const saveEmail = [].concat(emails).filter(email => email && email.trim()).map(email => ({\n      address: email\n    }));\n\n    if (saveEmail.length > 0) {\n      update.$addToSet.visitorEmails = {\n        $each: saveEmail\n      };\n    }\n\n    const savePhone = [].concat(phones).filter(phone => phone && phone.trim().replace(/[^\\d]/g, '')).map(phone => ({\n      phoneNumber: phone\n    }));\n\n    if (savePhone.length > 0) {\n      update.$addToSet.phone = {\n        $each: savePhone\n      };\n    }\n\n    if (!update.$addToSet.visitorEmails && !update.$addToSet.phone) {\n      return;\n    }\n\n    return this.update({\n      _id\n    }, update);\n  } // REMOVE\n\n\n  removeDepartmentById(_id) {\n    return this.update({\n      _id\n    }, {\n      $unset: {\n        department: 1\n      }\n    });\n  }\n\n  removeById(_id) {\n    const query = {\n      _id\n    };\n    return this.remove(query);\n  }\n\n}\n\nmodule.exportDefault(new LivechatVisitors());","map":{"version":3,"sources":["app/models/server/models/LivechatVisitors.js"],"names":["module","export","LivechatVisitors","_","link","default","v","s","escapeRegExp","Base","Settings","constructor","tryEnsureIndex","token","sparse","getVisitorByToken","options","query","findOne","findById","_id","find","findOneById","findVisitorByToken","updateLivechatDataByToken","key","value","overwrite","user","fields","livechatData","update","$set","updateLastAgentByToken","lastAgent","findOneVisitorByPhone","phone","getVisitorsBetweenDate","date","_updatedAt","$gte","gte","$lt","lt","getNextVisitorUsername","$inc","livechatCount","findAndModify","updateById","saveGuestById","data","setData","unsetData","name","isEmpty","trim","email","visitorEmails","address","phoneNumber","Object","keys","forEach","$unset","findOneGuestByEmailAddress","emailAddress","RegExp","saveGuestEmailPhoneById","emails","phones","$addToSet","saveEmail","concat","filter","map","length","$each","savePhone","replace","removeDepartmentById","department","removeById","remove","exportDefault"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport s from 'underscore.string';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { Base } from './_Base';\nimport Settings from './Settings';\n\nexport class LivechatVisitors extends Base {\n\tconstructor() {\n\t\tsuper('livechat_visitor');\n\n\t\tthis.tryEnsureIndex({ token: 1 });\n\t\tthis.tryEnsureIndex({ 'phone.phoneNumber': 1 }, { sparse: true });\n\t}\n\n\t/**\n\t * Gets visitor by token\n\t * @param {string} token - Visitor token\n\t */\n\tgetVisitorByToken(token, options) {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t/**\n\t * Find visitors by _id\n\t * @param {string} token - Visitor token\n\t */\n\tfindById(_id, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * Find One visitor by _id\n\t */\n\tfindOneById(_id, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t/**\n\t * Gets visitor by token\n\t * @param {string} token - Visitor token\n\t */\n\tfindVisitorByToken(token) {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tupdateLivechatDataByToken(token, key, value, overwrite = true) {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst user = this.findOne(query, { fields: { livechatData: 1 } });\n\t\t\tif (user.livechatData && typeof user.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateLastAgentByToken(token, lastAgent) {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastAgent,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\t/**\n\t * Find a visitor by their phone number\n\t * @return {object} User from db\n\t */\n\tfindOneVisitorByPhone(phone) {\n\t\tconst query = {\n\t\t\t'phone.phoneNumber': phone,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tgetVisitorsBetweenDate(date) {\n\t\tconst query = {\n\t\t\t_updatedAt: {\n\t\t\t\t$gte: date.gte, // ISO Date, ts >= date.gte\n\t\t\t\t$lt: date.lt, // ISODate, ts < date.lt\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { fields: { _id: 1 } });\n\t}\n\n\t/**\n\t * Get the next visitor name\n\t * @return {string} The next visitor name\n\t */\n\tgetNextVisitorUsername() {\n\t\tconst query = {\n\t\t\t_id: 'Livechat_guest_count',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tvalue: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst livechatCount = Settings.findAndModify(query, null, update);\n\n\t\treturn `guest-${livechatCount.value.value + 1}`;\n\t}\n\n\tupdateById(_id, update) {\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tsaveGuestById(_id, data) {\n\t\tconst setData = {};\n\t\tconst unsetData = {};\n\n\t\tif (data.name) {\n\t\t\tif (!_.isEmpty(s.trim(data.name))) {\n\t\t\t\tsetData.name = s.trim(data.name);\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email) {\n\t\t\tif (!_.isEmpty(s.trim(data.email))) {\n\t\t\t\tsetData.visitorEmails = [{ address: s.trim(data.email) }];\n\t\t\t} else {\n\t\t\t\tunsetData.visitorEmails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone) {\n\t\t\tif (!_.isEmpty(s.trim(data.phone))) {\n\t\t\t\tsetData.phone = [{ phoneNumber: s.trim(data.phone) }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.livechatData) {\n\t\t\tObject.keys(data.livechatData).forEach((key) => {\n\t\t\t\tconst value = s.trim(data.livechatData[key]);\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update = {};\n\n\t\tif (!_.isEmpty(setData)) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (!_.isEmpty(unsetData)) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (_.isEmpty(update)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tfindOneGuestByEmailAddress(emailAddress) {\n\t\tconst query = {\n\t\t\t'visitorEmails.address': new RegExp(`^${escapeRegExp(emailAddress)}$`, 'i'),\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tsaveGuestEmailPhoneById(_id, emails, phones) {\n\t\tconst update = {\n\t\t\t$addToSet: {},\n\t\t};\n\n\t\tconst saveEmail = []\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email && email.trim())\n\t\t\t.map((email) => ({ address: email }));\n\n\t\tif (saveEmail.length > 0) {\n\t\t\tupdate.$addToSet.visitorEmails = { $each: saveEmail };\n\t\t}\n\n\t\tconst savePhone = []\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone && phone.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));\n\n\t\tif (savePhone.length > 0) {\n\t\t\tupdate.$addToSet.phone = { $each: savePhone };\n\t\t}\n\n\t\tif (!update.$addToSet.visitorEmails && !update.$addToSet.phone) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\t// REMOVE\n\tremoveDepartmentById(_id) {\n\t\treturn this.update({ _id }, { $unset: { department: 1 } });\n\t}\n\n\tremoveById(_id) {\n\t\tconst query = { _id };\n\t\treturn this.remove(query);\n\t}\n}\n\nexport default new LivechatVisitors();\n"]},"sourceType":"module","hash":"63e81d98b3bf534eddfb3d1fc0d3c0ca0a581e40"}
