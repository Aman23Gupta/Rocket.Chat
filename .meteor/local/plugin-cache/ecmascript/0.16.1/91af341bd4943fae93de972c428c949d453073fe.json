{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/crypt.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/lib/crypt.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/crypt.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/federation/server/lib/crypt.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/lib/crypt.js"}},"code":"module.export({\n  decrypt: () => decrypt,\n  decryptIfNeeded: () => decryptIfNeeded,\n  encrypt: () => encrypt\n});\nlet FederationKeys;\nmodule.link(\"../../../models/server/raw\", {\n  FederationKeys(v) {\n    FederationKeys = v;\n  }\n\n}, 0);\nlet getFederationDomain;\nmodule.link(\"./getFederationDomain\", {\n  getFederationDomain(v) {\n    getFederationDomain = v;\n  }\n\n}, 1);\nlet search;\nmodule.link(\"./dns\", {\n  search(v) {\n    search = v;\n  }\n\n}, 2);\nlet cryptLogger;\nmodule.link(\"./logger\", {\n  cryptLogger(v) {\n    cryptLogger = v;\n  }\n\n}, 3);\n\nfunction decrypt(data, peerKey) {\n  return Promise.asyncApply(() => {\n    //\n    // Decrypt the payload\n    const payloadBuffer = Buffer.from(data); // Decrypt with the peer's public key\n\n    try {\n      data = Promise.await(FederationKeys.loadKey(peerKey, 'public')).decryptPublic(payloadBuffer); // Decrypt with the local private key\n\n      data = Promise.await(FederationKeys.getPrivateKey()).decrypt(data);\n    } catch (err) {\n      cryptLogger.error(err);\n      throw new Error('Could not decrypt');\n    }\n\n    return JSON.parse(data.toString());\n  });\n}\n\nfunction decryptIfNeeded(request, bodyParams) {\n  return Promise.asyncApply(() => {\n    //\n    // Look for the domain that sent this event\n    const remotePeerDomain = request.headers['x-federation-domain'];\n\n    if (!remotePeerDomain) {\n      throw new Error('Domain is unknown, ignoring event');\n    } //\n    // Decrypt payload if needed\n\n\n    if (remotePeerDomain === getFederationDomain()) {\n      return bodyParams;\n    } //\n    // Find the peer's public key\n\n\n    const {\n      publicKey: peerKey\n    } = search(remotePeerDomain);\n\n    if (!peerKey) {\n      throw new Error(\"Could not find the peer's public key to decrypt\");\n    }\n\n    return decrypt(bodyParams, peerKey);\n  });\n}\n\nfunction encrypt(data, peerKey) {\n  return Promise.asyncApply(() => {\n    if (!data) {\n      return data;\n    }\n\n    try {\n      // Encrypt with the peer's public key\n      data = Promise.await(FederationKeys.loadKey(peerKey, 'public')).encrypt(data); // Encrypt with the local private key\n\n      return Promise.await(FederationKeys.getPrivateKey()).encryptPrivate(data);\n    } catch (err) {\n      cryptLogger.error(err);\n      throw new Error('Could not encrypt');\n    }\n  });\n}","map":{"version":3,"sources":["app/federation/server/lib/crypt.js"],"names":["module","export","decrypt","decryptIfNeeded","encrypt","FederationKeys","link","v","getFederationDomain","search","cryptLogger","data","peerKey","payloadBuffer","Buffer","from","loadKey","decryptPublic","getPrivateKey","err","error","Error","JSON","parse","toString","request","bodyParams","remotePeerDomain","headers","publicKey","encryptPrivate"],"mappings":"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","sourcesContent":["import { FederationKeys } from '../../../models/server/raw';\nimport { getFederationDomain } from './getFederationDomain';\nimport { search } from './dns';\nimport { cryptLogger } from './logger';\n\nexport async function decrypt(data, peerKey) {\n\t//\n\t// Decrypt the payload\n\tconst payloadBuffer = Buffer.from(data);\n\n\t// Decrypt with the peer's public key\n\ttry {\n\t\tdata = (await FederationKeys.loadKey(peerKey, 'public')).decryptPublic(payloadBuffer);\n\n\t\t// Decrypt with the local private key\n\t\tdata = (await FederationKeys.getPrivateKey()).decrypt(data);\n\t} catch (err) {\n\t\tcryptLogger.error(err);\n\n\t\tthrow new Error('Could not decrypt');\n\t}\n\n\treturn JSON.parse(data.toString());\n}\n\nexport async function decryptIfNeeded(request, bodyParams) {\n\t//\n\t// Look for the domain that sent this event\n\tconst remotePeerDomain = request.headers['x-federation-domain'];\n\n\tif (!remotePeerDomain) {\n\t\tthrow new Error('Domain is unknown, ignoring event');\n\t}\n\n\t//\n\t// Decrypt payload if needed\n\tif (remotePeerDomain === getFederationDomain()) {\n\t\treturn bodyParams;\n\t}\n\t//\n\t// Find the peer's public key\n\tconst { publicKey: peerKey } = search(remotePeerDomain);\n\n\tif (!peerKey) {\n\t\tthrow new Error(\"Could not find the peer's public key to decrypt\");\n\t}\n\n\treturn decrypt(bodyParams, peerKey);\n}\n\nexport async function encrypt(data, peerKey) {\n\tif (!data) {\n\t\treturn data;\n\t}\n\n\ttry {\n\t\t// Encrypt with the peer's public key\n\t\tdata = (await FederationKeys.loadKey(peerKey, 'public')).encrypt(data);\n\n\t\t// Encrypt with the local private key\n\t\treturn (await FederationKeys.getPrivateKey()).encryptPrivate(data);\n\t} catch (err) {\n\t\tcryptLogger.error(err);\n\n\t\tthrow new Error('Could not encrypt');\n\t}\n}\n"]},"sourceType":"module","hash":"91af341bd4943fae93de972c428c949d453073fe"}
