{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Livechat.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/Livechat.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Livechat.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/livechat/server/lib/Livechat.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/Livechat.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Livechat: () => Livechat\n});\nlet dns;\nmodule.link(\"dns\", {\n  default(v) {\n    dns = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 3);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 4);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 5);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 6);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 7);\nlet moment;\nmodule.link(\"moment-timezone\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 8);\nlet UAParser;\nmodule.link(\"ua-parser-js\", {\n  default(v) {\n    UAParser = v;\n  }\n\n}, 9);\nlet QueueManager;\nmodule.link(\"./QueueManager\", {\n  QueueManager(v) {\n    QueueManager = v;\n  }\n\n}, 10);\nlet RoutingManager;\nmodule.link(\"./RoutingManager\", {\n  RoutingManager(v) {\n    RoutingManager = v;\n  }\n\n}, 11);\nlet Analytics;\nmodule.link(\"./Analytics\", {\n  Analytics(v) {\n    Analytics = v;\n  }\n\n}, 12);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 13);\nlet getTimezone;\nmodule.link(\"../../../utils/server/lib/getTimezone\", {\n  getTimezone(v) {\n    getTimezone = v;\n  }\n\n}, 14);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 15);\nlet Users, LivechatRooms, Messages, Subscriptions, Settings, Rooms, LivechatDepartmentAgents, LivechatDepartment, LivechatCustomField, LivechatVisitors, LivechatInquiry;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  LivechatRooms(v) {\n    LivechatRooms = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Settings(v) {\n    Settings = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  LivechatDepartmentAgents(v) {\n    LivechatDepartmentAgents = v;\n  },\n\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  LivechatCustomField(v) {\n    LivechatCustomField = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  }\n\n}, 16);\nlet Logger;\nmodule.link(\"../../../logger/server\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 17);\nlet addUserRoles, hasPermission, hasRole, removeUserFromRoles, canAccessRoom;\nmodule.link(\"../../../authorization/server\", {\n  addUserRoles(v) {\n    addUserRoles = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  hasRole(v) {\n    hasRole = v;\n  },\n\n  removeUserFromRoles(v) {\n    removeUserFromRoles = v;\n  },\n\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 18);\nlet Mailer;\nmodule.link(\"../../../mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 19);\nlet sendMessage;\nmodule.link(\"../../../lib/server/functions/sendMessage\", {\n  sendMessage(v) {\n    sendMessage = v;\n  }\n\n}, 20);\nlet updateMessage;\nmodule.link(\"../../../lib/server/functions/updateMessage\", {\n  updateMessage(v) {\n    updateMessage = v;\n  }\n\n}, 21);\nlet deleteMessage;\nmodule.link(\"../../../lib/server/functions/deleteMessage\", {\n  deleteMessage(v) {\n    deleteMessage = v;\n  }\n\n}, 22);\nlet FileUpload;\nmodule.link(\"../../../file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 23);\nlet normalizeTransferredByData, parseAgentCustomFields, updateDepartmentAgents, validateEmail;\nmodule.link(\"./Helper\", {\n  normalizeTransferredByData(v) {\n    normalizeTransferredByData = v;\n  },\n\n  parseAgentCustomFields(v) {\n    parseAgentCustomFields = v;\n  },\n\n  updateDepartmentAgents(v) {\n    updateDepartmentAgents = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  }\n\n}, 24);\nlet Apps, AppEvents;\nmodule.link(\"../../../apps/server\", {\n  Apps(v) {\n    Apps = v;\n  },\n\n  AppEvents(v) {\n    AppEvents = v;\n  }\n\n}, 25);\nlet businessHourManager;\nmodule.link(\"../business-hour\", {\n  businessHourManager(v) {\n    businessHourManager = v;\n  }\n\n}, 26);\nlet notifications;\nmodule.link(\"../../../notifications/server/lib/Notifications\", {\n  default(v) {\n    notifications = v;\n  }\n\n}, 27);\nlet UsersRaw;\nmodule.link(\"../../../models/server/raw\", {\n  Users(v) {\n    UsersRaw = v;\n  }\n\n}, 28);\nconst logger = new Logger('Livechat');\nconst dnsResolveMx = Meteor.wrapAsync(dns.resolveMx);\nconst Livechat = {\n  Analytics,\n  historyMonitorType: 'url',\n  logger,\n  webhookLogger: logger.section('Webhook'),\n\n  findGuest(token) {\n    return LivechatVisitors.getVisitorByToken(token, {\n      fields: {\n        name: 1,\n        username: 1,\n        token: 1,\n        visitorEmails: 1,\n        department: 1\n      }\n    });\n  },\n\n  online(department) {\n    let skipNoAgentSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let skipFallbackCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    Livechat.logger.debug(\"Checking online agents \".concat(department ? \"for department \".concat(department) : ''));\n\n    if (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n      Livechat.logger.debug('Can accept without online agents: true');\n      return true;\n    }\n\n    if (settings.get('Livechat_assign_new_conversation_to_bot')) {\n      Livechat.logger.debug(\"Fetching online bot agents for department \".concat(department));\n      const botAgents = Livechat.getBotAgents(department);\n      const onlineBots = botAgents.count();\n      Livechat.logger.debug(\"Found \".concat(onlineBots, \" online\"));\n\n      if (onlineBots > 0) {\n        return true;\n      }\n    }\n\n    const agentsOnline = Livechat.checkOnlineAgents(department, {}, skipFallbackCheck);\n    Livechat.logger.debug(\"Are online agents \".concat(department ? \"for department \".concat(department) : '', \"?: \").concat(agentsOnline));\n    return agentsOnline;\n  },\n\n  getNextAgent(department) {\n    return RoutingManager.getNextAgent(department);\n  },\n\n  getAgents(department) {\n    if (department) {\n      // TODO: This and all others should get the user's info as well\n      return LivechatDepartmentAgents.findByDepartmentId(department);\n    }\n\n    return Users.findAgents();\n  },\n\n  getOnlineAgents(department, agent) {\n    if (agent !== null && agent !== void 0 && agent.agentId) {\n      return Users.findOnlineAgents(agent.agentId);\n    }\n\n    if (department) {\n      return LivechatDepartmentAgents.getOnlineForDepartment(department);\n    }\n\n    return Users.findOnlineAgents();\n  },\n\n  checkOnlineAgents(department, agent) {\n    let skipFallbackCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (agent !== null && agent !== void 0 && agent.agentId) {\n      return Users.checkOnlineAgents(agent.agentId);\n    }\n\n    if (department) {\n      const onlineForDep = LivechatDepartmentAgents.checkOnlineForDepartment(department);\n\n      if (onlineForDep || skipFallbackCheck) {\n        return onlineForDep;\n      }\n\n      const dep = LivechatDepartment.findOneById(department);\n\n      if (!(dep !== null && dep !== void 0 && dep.fallbackForwardDepartment)) {\n        return onlineForDep;\n      }\n\n      return this.checkOnlineAgents(dep === null || dep === void 0 ? void 0 : dep.fallbackForwardDepartment);\n    }\n\n    return Users.checkOnlineAgents();\n  },\n\n  getBotAgents(department) {\n    if (department) {\n      return LivechatDepartmentAgents.getBotsForDepartment(department);\n    }\n\n    return Users.findBotAgents();\n  },\n\n  getRequiredDepartment() {\n    let onlineRequired = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const departments = LivechatDepartment.findEnabledWithAgents();\n    return departments.fetch().find(dept => {\n      if (!dept.showOnRegistration) {\n        return false;\n      }\n\n      if (!onlineRequired) {\n        return true;\n      }\n\n      const onlineAgents = LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n      return onlineAgents && onlineAgents.count() > 0;\n    });\n  },\n\n  getRoom(guest, message, roomInfo, agent, extraData) {\n    return Promise.asyncApply(() => {\n      if (!this.enabled()) {\n        throw new Meteor.Error('error-omnichannel-is-disabled');\n      }\n\n      Livechat.logger.debug(\"Attempting to find or create a room for visitor \".concat(guest._id));\n      let room = LivechatRooms.findOneById(message.rid);\n      let newRoom = false;\n\n      if (room && !room.open) {\n        Livechat.logger.debug(\"Last room for visitor \".concat(guest._id, \" closed. Creating new one\"));\n        message.rid = Random.id();\n        room = null;\n      }\n\n      if (guest.department && !LivechatDepartment.findOneById(guest.department)) {\n        LivechatVisitors.removeDepartmentById(guest._id);\n        guest = LivechatVisitors.findOneById(guest._id);\n      }\n\n      if (room == null) {\n        const defaultAgent = callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, guest); // if no department selected verify if there is at least one active and pick the first\n\n        if (!defaultAgent && !guest.department) {\n          const department = this.getRequiredDepartment();\n          Livechat.logger.debug(\"No department or default agent selected for \".concat(guest._id));\n\n          if (department) {\n            Livechat.logger.debug(\"Assigning \".concat(guest._id, \" to department \").concat(department._id));\n            guest.department = department._id;\n          }\n        } // delegate room creation to QueueManager\n\n\n        Livechat.logger.debug(\"Calling QueueManager to request a room for visitor \".concat(guest._id));\n        room = Promise.await(QueueManager.requestRoom({\n          guest,\n          message,\n          roomInfo,\n          agent: defaultAgent,\n          extraData\n        }));\n        newRoom = true;\n        Livechat.logger.debug(\"Room obtained for visitor \".concat(guest._id, \" -> \").concat(room._id));\n      }\n\n      if (!room || room.v.token !== guest.token) {\n        Livechat.logger.debug(\"Visitor \".concat(guest._id, \" trying to access another visitor's room\"));\n        throw new Meteor.Error('cannot-access-room');\n      }\n\n      if (newRoom) {\n        Messages.setRoomIdByToken(guest.token, room._id);\n      }\n\n      return {\n        room,\n        newRoom\n      };\n    });\n  },\n\n  sendMessage(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        guest,\n        message,\n        roomInfo,\n        agent\n      } = _ref;\n      const {\n        room,\n        newRoom\n      } = Promise.await(this.getRoom(guest, message, roomInfo, agent));\n\n      if (guest.name) {\n        message.alias = guest.name;\n      }\n\n      return _.extend(sendMessage(guest, message, room), {\n        newRoom,\n        showConnecting: this.showConnecting()\n      });\n    });\n  },\n\n  updateMessage(_ref2) {\n    let {\n      guest,\n      message\n    } = _ref2;\n    check(message, Match.ObjectIncluding({\n      _id: String\n    }));\n    const originalMessage = Messages.findOneById(message._id);\n\n    if (!originalMessage || !originalMessage._id) {\n      return;\n    }\n\n    const editAllowed = settings.get('Message_AllowEditing');\n    const editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n\n    if (!editAllowed || !editOwn) {\n      throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n        method: 'livechatUpdateMessage'\n      });\n    }\n\n    updateMessage(message, guest);\n    return true;\n  },\n\n  deleteMessage(_ref3) {\n    return Promise.asyncApply(() => {\n      let {\n        guest,\n        message\n      } = _ref3;\n      Livechat.logger.debug(\"Attempting to delete a message by visitor \".concat(guest._id));\n      check(message, Match.ObjectIncluding({\n        _id: String\n      }));\n      const msg = Messages.findOneById(message._id);\n\n      if (!msg || !msg._id) {\n        return;\n      }\n\n      const deleteAllowed = settings.get('Message_AllowDeleting');\n      const editOwn = msg.u && msg.u._id === guest._id;\n\n      if (!deleteAllowed || !editOwn) {\n        Livechat.logger.debug('Cannot delete message: not allowed');\n        throw new Meteor.Error('error-action-not-allowed', 'Message deleting not allowed', {\n          method: 'livechatDeleteMessage'\n        });\n      }\n\n      Promise.await(deleteMessage(message, guest));\n      return true;\n    });\n  },\n\n  registerGuest() {\n    let {\n      id,\n      token,\n      name,\n      email,\n      department,\n      phone,\n      username,\n      connectionData\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    check(token, String);\n    check(id, Match.Maybe(String));\n    Livechat.logger.debug(\"New incoming conversation: id: \".concat(id, \" | token: \").concat(token));\n    let userId;\n    const updateUser = {\n      $set: _objectSpread(_objectSpread({\n        token\n      }, phone !== null && phone !== void 0 && phone.number ? {\n        phone: [{\n          phoneNumber: phone.number\n        }]\n      } : {}), name ? {\n        name\n      } : {})\n    };\n\n    if (email) {\n      email = email.trim();\n      validateEmail(email);\n      updateUser.$set.visitorEmails = [{\n        address: email\n      }];\n    }\n\n    if (department) {\n      Livechat.logger.debug(\"Attempt to find a department with id/name \".concat(department));\n      const dep = LivechatDepartment.findOneByIdOrName(department);\n\n      if (!dep) {\n        Livechat.logger.debug('Invalid department provided');\n        throw new Meteor.Error('error-invalid-department', 'The provided department is invalid', {\n          method: 'registerGuest'\n        });\n      }\n\n      Livechat.logger.debug(\"Assigning visitor \".concat(token, \" to department \").concat(dep._id));\n      updateUser.$set.department = dep._id;\n    }\n\n    const user = LivechatVisitors.getVisitorByToken(token, {\n      fields: {\n        _id: 1\n      }\n    });\n    let existingUser = null;\n\n    if (user) {\n      Livechat.logger.debug('Found matching user by token');\n      userId = user._id;\n    } else if (email && (existingUser = LivechatVisitors.findOneGuestByEmailAddress(email))) {\n      Livechat.logger.debug('Found matching user by email');\n      userId = existingUser._id;\n    } else {\n      Livechat.logger.debug(\"No matches found. Attempting to create new user with token \".concat(token));\n\n      if (!username) {\n        username = LivechatVisitors.getNextVisitorUsername();\n      }\n\n      const userData = _objectSpread({\n        username,\n        ts: new Date()\n      }, id && {\n        _id: id\n      });\n\n      if (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n        Livechat.logger.debug(\"Saving connection data for visitor \".concat(token));\n        const connection = this.connection || connectionData;\n\n        if (connection && connection.httpHeaders) {\n          userData.userAgent = connection.httpHeaders['user-agent'];\n          userData.ip = connection.httpHeaders['x-real-ip'] || connection.httpHeaders['x-forwarded-for'] || connection.clientAddress;\n          userData.host = connection.httpHeaders.host;\n        }\n      }\n\n      userId = LivechatVisitors.insert(userData);\n    }\n\n    LivechatVisitors.updateById(userId, updateUser);\n    return userId;\n  },\n\n  setDepartmentForGuest() {\n    let {\n      token,\n      department\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    check(token, String);\n    check(department, String);\n    Livechat.logger.debug(\"Switching departments for user with token \".concat(token, \" (to \").concat(department, \")\"));\n    const updateUser = {\n      $set: {\n        department\n      }\n    };\n    const dep = LivechatDepartment.findOneById(department);\n\n    if (!dep) {\n      throw new Meteor.Error('invalid-department', 'Provided department does not exists', {\n        method: 'setDepartmentForGuest'\n      });\n    }\n\n    const user = LivechatVisitors.getVisitorByToken(token, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (user) {\n      return LivechatVisitors.updateById(user._id, updateUser);\n    }\n\n    return false;\n  },\n\n  saveGuest(_ref4, userId) {\n    let {\n      _id,\n      name,\n      email,\n      phone,\n      livechatData = {}\n    } = _ref4;\n    Livechat.logger.debug(\"Saving data for visitor \".concat(_id));\n    const updateData = {};\n\n    if (name) {\n      updateData.name = name;\n    }\n\n    if (email) {\n      updateData.email = email;\n    }\n\n    if (phone) {\n      updateData.phone = phone;\n    }\n\n    const customFields = {};\n    const fields = LivechatCustomField.find({\n      scope: 'visitor'\n    });\n\n    if (!userId || hasPermission(userId, 'edit-livechat-room-customfields')) {\n      fields.forEach(field => {\n        if (!livechatData.hasOwnProperty(field._id)) {\n          return;\n        }\n\n        const value = s.trim(livechatData[field._id]);\n\n        if (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n          const regexp = new RegExp(field.regexp);\n\n          if (!regexp.test(value)) {\n            throw new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', {\n              field: field.label\n            }));\n          }\n        }\n\n        customFields[field._id] = value;\n      });\n      updateData.livechatData = customFields;\n    }\n\n    const ret = LivechatVisitors.saveGuestById(_id, updateData);\n    Meteor.defer(() => {\n      Apps.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id);\n      callbacks.run('livechat.saveGuest', updateData);\n    });\n    return ret;\n  },\n\n  closeRoom(_ref5) {\n    let {\n      user,\n      visitor,\n      room,\n      comment,\n      options = {}\n    } = _ref5;\n    Livechat.logger.debug(\"Attempting to close room \".concat(room._id));\n\n    if (!room || room.t !== 'l' || !room.open) {\n      return false;\n    }\n\n    const params = callbacks.run('livechat.beforeCloseRoom', {\n      room,\n      options\n    });\n    const {\n      extraData\n    } = params;\n    const now = new Date();\n    const {\n      _id: rid,\n      servedBy,\n      transcriptRequest\n    } = room;\n    const serviceTimeDuration = servedBy && (now.getTime() - servedBy.ts) / 1000;\n\n    const closeData = _objectSpread(_objectSpread({\n      closedAt: now,\n      chatDuration: (now.getTime() - room.ts) / 1000\n    }, serviceTimeDuration && {\n      serviceTimeDuration\n    }), extraData);\n\n    Livechat.logger.debug(\"Room \".concat(room._id, \" was closed at \").concat(closeData.closedAt, \" (duration \").concat(closeData.chatDuration, \")\"));\n\n    if (user) {\n      Livechat.logger.debug(\"Closing by user \".concat(user._id));\n      closeData.closer = 'user';\n      closeData.closedBy = {\n        _id: user._id,\n        username: user.username\n      };\n    } else if (visitor) {\n      Livechat.logger.debug(\"Closing by visitor \".concat(visitor._id));\n      closeData.closer = 'visitor';\n      closeData.closedBy = {\n        _id: visitor._id,\n        username: visitor.username\n      };\n    }\n\n    LivechatRooms.closeByRoomId(rid, closeData);\n    LivechatInquiry.removeByRoomId(rid);\n    Subscriptions.removeByRoomId(rid);\n    const message = {\n      t: 'livechat-close',\n      msg: comment,\n      groupable: false,\n      transcriptRequested: !!transcriptRequest\n    }; // Retreive the closed room\n\n    room = LivechatRooms.findOneByIdOrName(rid);\n    Livechat.logger.debug(\"Sending closing message to room \".concat(room._id));\n    sendMessage(user || visitor, message, room);\n    Messages.createCommandWithRoomIdAndUser('promptTranscript', rid, closeData.closedBy);\n    Meteor.defer(() => {\n      /**\n       * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n       * in the next major version of the Apps-Engine\n       */\n      Apps.getBridges().getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, room);\n      Apps.getBridges().getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, room);\n    });\n    callbacks.runAsync('livechat.closeRoom', room);\n    return true;\n  },\n\n  removeRoom(rid) {\n    Livechat.logger.debug(\"Deleting room \".concat(rid));\n    check(rid, String);\n    const room = LivechatRooms.findOneById(rid);\n\n    if (!room) {\n      throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n        method: 'livechat:removeRoom'\n      });\n    }\n\n    Messages.removeByRoomId(rid);\n    Subscriptions.removeByRoomId(rid);\n    LivechatInquiry.removeByRoomId(rid);\n    return LivechatRooms.removeById(rid);\n  },\n\n  setCustomFields() {\n    let {\n      token,\n      key,\n      value,\n      overwrite\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    check(token, String);\n    check(key, String);\n    check(value, String);\n    check(overwrite, Boolean);\n    Livechat.logger.debug(\"Setting custom fields data for visitor with token \".concat(token));\n    const customField = LivechatCustomField.findOneById(key);\n\n    if (!customField) {\n      throw new Meteor.Error('invalid-custom-field');\n    }\n\n    if (customField.regexp !== undefined && customField.regexp !== '') {\n      const regexp = new RegExp(customField.regexp);\n\n      if (!regexp.test(value)) {\n        throw new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', {\n          field: key\n        }));\n      }\n    }\n\n    if (customField.scope === 'room') {\n      return LivechatRooms.updateDataByToken(token, key, value, overwrite);\n    }\n\n    return LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n  },\n\n  enabled() {\n    return settings.get('Livechat_enabled');\n  },\n\n  getInitSettings() {\n    const rcSettings = {};\n    Settings.findNotHiddenPublic(['Livechat_title', 'Livechat_title_color', 'Livechat_enable_message_character_limit', 'Livechat_message_character_limit', 'Message_MaxAllowedSize', 'Livechat_enabled', 'Livechat_registration_form', 'Livechat_allow_switching_departments', 'Livechat_offline_title', 'Livechat_offline_title_color', 'Livechat_offline_message', 'Livechat_offline_success_message', 'Livechat_offline_form_unavailable', 'Livechat_display_offline_form', 'Omnichannel_call_provider', 'Jitsi_Enabled', 'Language', 'Livechat_enable_transcript', 'Livechat_transcript_message', 'Livechat_fileupload_enabled', 'FileUpload_Enabled', 'Livechat_conversation_finished_message', 'Livechat_conversation_finished_text', 'Livechat_name_field_registration_form', 'Livechat_email_field_registration_form', 'Livechat_registration_form_message', 'Livechat_force_accept_data_processing_consent', 'Livechat_data_processing_consent_text', 'Livechat_show_agent_info', 'Livechat_clear_local_storage_when_chat_ended']).forEach(setting => {\n      rcSettings[setting._id] = setting.value;\n    });\n    rcSettings.Livechat_history_monitor_type = settings.get('Livechat_history_monitor_type');\n    rcSettings.Livechat_Show_Connecting = this.showConnecting();\n    return rcSettings;\n  },\n\n  saveRoomInfo(roomData, guestData, userId) {\n    Livechat.logger.debug(\"Saving room information on room \".concat(roomData._id));\n    const {\n      livechatData = {}\n    } = roomData;\n    const customFields = {};\n\n    if (!userId || hasPermission(userId, 'edit-livechat-room-customfields')) {\n      const fields = LivechatCustomField.find({\n        scope: 'room'\n      });\n      fields.forEach(field => {\n        if (!livechatData.hasOwnProperty(field._id)) {\n          return;\n        }\n\n        const value = s.trim(livechatData[field._id]);\n\n        if (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n          const regexp = new RegExp(field.regexp);\n\n          if (!regexp.test(value)) {\n            throw new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', {\n              field: field.label\n            }));\n          }\n        }\n\n        customFields[field._id] = value;\n      });\n      roomData.livechatData = customFields;\n    }\n\n    if (!LivechatRooms.saveRoomById(roomData)) {\n      return false;\n    }\n\n    Meteor.defer(() => {\n      Apps.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id);\n    });\n    callbacks.runAsync('livechat.saveRoom', roomData);\n\n    if (!_.isEmpty(guestData.name)) {\n      const {\n        _id: rid\n      } = roomData;\n      const {\n        name\n      } = guestData;\n      return Rooms.setFnameById(rid, name) && LivechatInquiry.setNameByRoomId(rid, name) && // This one needs to be the last since the agent may not have the subscription\n      // when the conversation is in the queue, then the result will be 0(zero)\n      Subscriptions.updateDisplayNameByRoomId(rid, name);\n    }\n  },\n\n  closeOpenChats(userId, comment) {\n    Livechat.logger.debug(\"Closing open chats for user \".concat(userId));\n    const user = Users.findOneById(userId);\n    LivechatRooms.findOpenByAgent(userId).forEach(room => {\n      this.closeRoom({\n        user,\n        room,\n        comment\n      });\n    });\n  },\n\n  forwardOpenChats(userId) {\n    Livechat.logger.debug(\"Transferring open chats for user \".concat(userId));\n    LivechatRooms.findOpenByAgent(userId).forEach(room => {\n      const guest = LivechatVisitors.findOneById(room.v._id);\n      const user = Users.findOneById(userId);\n      const {\n        _id,\n        username,\n        name\n      } = user;\n      const transferredBy = normalizeTransferredByData({\n        _id,\n        username,\n        name\n      }, room);\n      Promise.await(this.transfer(room, guest, {\n        roomId: room._id,\n        transferredBy,\n        departmentId: guest.department\n      }));\n    });\n  },\n\n  savePageHistory(token, roomId, pageInfo) {\n    Livechat.logger.debug(\"Saving page movement history for visitor with token \".concat(token));\n\n    if (pageInfo.change !== Livechat.historyMonitorType) {\n      return;\n    }\n\n    const user = Users.findOneById('rocket.cat');\n    const pageTitle = pageInfo.title;\n    const pageUrl = pageInfo.location.href;\n    const extraData = {\n      navigation: {\n        page: pageInfo,\n        token\n      }\n    };\n\n    if (!roomId) {\n      // keep history of unregistered visitors for 1 month\n      const keepHistoryMiliseconds = 2592000000;\n      extraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n    }\n\n    if (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n      extraData._hidden = true;\n    }\n\n    return Messages.createNavigationHistoryWithRoomIdMessageAndUser(roomId, \"\".concat(pageTitle, \" - \").concat(pageUrl), user, extraData);\n  },\n\n  saveTransferHistory(room, transferData) {\n    Livechat.logger.debug(\"Saving transfer history for room \".concat(room._id));\n    const {\n      departmentId: previousDepartment\n    } = room;\n    const {\n      department: nextDepartment,\n      transferredBy,\n      transferredTo,\n      scope,\n      comment\n    } = transferData;\n    check(transferredBy, Match.ObjectIncluding({\n      _id: String,\n      username: String,\n      name: Match.Maybe(String),\n      type: String\n    }));\n    const {\n      _id,\n      username\n    } = transferredBy;\n    const scopeData = scope || (nextDepartment ? 'department' : 'agent');\n    Livechat.logger.debug(\"Storing new chat transfer of \".concat(room._id, \" [Transfered by: \").concat(_id, \" to \").concat(scopeData, \"]\"));\n    const transfer = {\n      transferData: _objectSpread(_objectSpread(_objectSpread({\n        transferredBy,\n        ts: new Date(),\n        scope: scopeData,\n        comment\n      }, previousDepartment && {\n        previousDepartment\n      }), nextDepartment && {\n        nextDepartment\n      }), transferredTo && {\n        transferredTo\n      })\n    };\n    return Messages.createTransferHistoryWithRoomIdMessageAndUser(room._id, '', {\n      _id,\n      username\n    }, transfer);\n  },\n\n  transfer(room, guest, transferData) {\n    return Promise.asyncApply(() => {\n      var _transferData$transfe;\n\n      Livechat.logger.debug(\"Transfering room \".concat(room._id, \" [Transfered by: \").concat(transferData === null || transferData === void 0 ? void 0 : (_transferData$transfe = transferData.transferredBy) === null || _transferData$transfe === void 0 ? void 0 : _transferData$transfe._id, \"]\"));\n\n      if (room.onHold) {\n        Livechat.logger.debug('Cannot transfer. Room is on hold');\n        throw new Meteor.Error('error-room-onHold', 'Room On Hold', {\n          method: 'livechat:transfer'\n        });\n      }\n\n      if (transferData.departmentId) {\n        var _transferData$departm;\n\n        transferData.department = LivechatDepartment.findOneById(transferData.departmentId, {\n          fields: {\n            name: 1\n          }\n        });\n        Livechat.logger.debug(\"Transfering room \".concat(room._id, \" to department \").concat((_transferData$departm = transferData.department) === null || _transferData$departm === void 0 ? void 0 : _transferData$departm._id));\n      }\n\n      return RoutingManager.transferRoom(room, guest, transferData);\n    });\n  },\n\n  returnRoomAsInquiry(rid, departmentId) {\n    Livechat.logger.debug(\"Transfering room \".concat(rid, \" to \").concat(departmentId ? 'department' : '', \" queue\"));\n    const room = LivechatRooms.findOneById(rid);\n\n    if (!room) {\n      throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n        method: 'livechat:returnRoomAsInquiry'\n      });\n    }\n\n    if (!room.open) {\n      throw new Meteor.Error('room-closed', 'Room closed', {\n        method: 'livechat:returnRoomAsInquiry'\n      });\n    }\n\n    if (room.onHold) {\n      throw new Meteor.Error('error-room-onHold', 'Room On Hold', {\n        method: 'livechat:returnRoomAsInquiry'\n      });\n    }\n\n    if (!room.servedBy) {\n      return false;\n    }\n\n    const user = Users.findOne(room.servedBy._id);\n\n    if (!user || !user._id) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'livechat:returnRoomAsInquiry'\n      });\n    } // find inquiry corresponding to room\n\n\n    const inquiry = LivechatInquiry.findOne({\n      rid\n    });\n\n    if (!inquiry) {\n      return false;\n    }\n\n    const transferredBy = normalizeTransferredByData(user, room);\n    Livechat.logger.debug(\"Transfering room \".concat(room._id, \" by user \").concat(transferredBy._id));\n    const transferData = {\n      roomId: rid,\n      scope: 'queue',\n      departmentId,\n      transferredBy\n    };\n\n    try {\n      this.saveTransferHistory(room, transferData);\n      RoutingManager.unassignAgent(inquiry, departmentId);\n    } catch (e) {\n      this.logger.error(e);\n      throw new Meteor.Error('error-returning-inquiry', 'Error returning inquiry to the queue', {\n        method: 'livechat:returnRoomAsInquiry'\n      });\n    }\n\n    callbacks.runAsync('livechat:afterReturnRoomAsInquiry', {\n      room\n    });\n    return true;\n  },\n\n  sendRequest(postData, callback) {\n    let attempts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n    if (!attempts) {\n      return;\n    }\n\n    const secretToken = settings.get('Livechat_secret_token');\n    const headers = {\n      'X-RocketChat-Livechat-Token': secretToken\n    };\n\n    const options = _objectSpread({\n      data: postData\n    }, secretToken !== '' && secretToken !== undefined && {\n      headers\n    });\n\n    try {\n      return HTTP.post(settings.get('Livechat_webhookUrl'), options);\n    } catch (e) {\n      Livechat.webhookLogger.error(\"Response error on \".concat(11 - attempts, \" try ->\"), e); // try 10 times after 10 seconds each\n\n      attempts - 1 && Livechat.webhookLogger.warn('Will try again in 10 seconds ...');\n      setTimeout(Meteor.bindEnvironment(function () {\n        Livechat.sendRequest(postData, callback, attempts - 1);\n      }), 10000);\n    }\n  },\n\n  getLivechatRoomGuestInfo(room) {\n    const visitor = LivechatVisitors.findOneById(room.v._id);\n    const agent = Users.findOneById(room.servedBy && room.servedBy._id);\n    const ua = new UAParser();\n    ua.setUA(visitor.userAgent);\n    const postData = {\n      _id: room._id,\n      label: room.fname || room.label,\n      // using same field for compatibility\n      topic: room.topic,\n      createdAt: room.ts,\n      lastMessageAt: room.lm,\n      tags: room.tags,\n      customFields: room.livechatData,\n      visitor: {\n        _id: visitor._id,\n        token: visitor.token,\n        name: visitor.name,\n        username: visitor.username,\n        email: null,\n        phone: null,\n        department: visitor.department,\n        ip: visitor.ip,\n        os: ua.getOS().name && \"\".concat(ua.getOS().name, \" \").concat(ua.getOS().version),\n        browser: ua.getBrowser().name && \"\".concat(ua.getBrowser().name, \" \").concat(ua.getBrowser().version),\n        customFields: visitor.livechatData\n      }\n    };\n\n    if (agent) {\n      const customFields = parseAgentCustomFields(agent.customFields);\n      postData.agent = _objectSpread({\n        _id: agent._id,\n        username: agent.username,\n        name: agent.name,\n        email: null\n      }, customFields && {\n        customFields\n      });\n\n      if (agent.emails && agent.emails.length > 0) {\n        postData.agent.email = agent.emails[0].address;\n      }\n    }\n\n    if (room.crmData) {\n      postData.crmData = room.crmData;\n    }\n\n    if (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n      postData.visitor.email = visitor.visitorEmails;\n    }\n\n    if (visitor.phone && visitor.phone.length > 0) {\n      postData.visitor.phone = visitor.phone;\n    }\n\n    return postData;\n  },\n\n  addAgent(username) {\n    check(username, String);\n    const user = Users.findOneByUsername(username, {\n      fields: {\n        _id: 1,\n        username: 1\n      }\n    });\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'livechat:addAgent'\n      });\n    }\n\n    if (addUserRoles(user._id, 'livechat-agent')) {\n      Users.setOperator(user._id, true);\n      this.setUserStatusLivechat(user._id, user.status !== 'offline' ? 'available' : 'not-available');\n      return user;\n    }\n\n    return false;\n  },\n\n  addManager(username) {\n    check(username, String);\n    const user = Users.findOneByUsername(username, {\n      fields: {\n        _id: 1,\n        username: 1\n      }\n    });\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'livechat:addManager'\n      });\n    }\n\n    if (addUserRoles(user._id, 'livechat-manager')) {\n      return user;\n    }\n\n    return false;\n  },\n\n  removeAgent(username) {\n    check(username, String);\n    const user = Users.findOneByUsername(username, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'livechat:removeAgent'\n      });\n    }\n\n    const {\n      _id\n    } = user;\n\n    if (removeUserFromRoles(_id, 'livechat-agent')) {\n      Users.setOperator(_id, false);\n      Users.removeLivechatData(_id);\n      this.setUserStatusLivechat(_id, 'not-available');\n      LivechatDepartmentAgents.removeByAgentId(_id);\n      return true;\n    }\n\n    return false;\n  },\n\n  removeManager(username) {\n    check(username, String);\n    const user = Users.findOneByUsername(username, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'livechat:removeManager'\n      });\n    }\n\n    return removeUserFromRoles(user._id, 'livechat-manager');\n  },\n\n  removeGuest(_id) {\n    check(_id, String);\n    const guest = LivechatVisitors.findOneById(_id);\n\n    if (!guest) {\n      throw new Meteor.Error('error-invalid-guest', 'Invalid guest', {\n        method: 'livechat:removeGuest'\n      });\n    }\n\n    this.cleanGuestHistory(_id);\n    return LivechatVisitors.removeById(_id);\n  },\n\n  setUserStatusLivechat(userId, status) {\n    const user = Users.setLivechatStatus(userId, status);\n    callbacks.runAsync('livechat.setUserStatusLivechat', {\n      userId,\n      status\n    });\n    return user;\n  },\n\n  setUserStatusLivechatIf(userId, status, condition, fields) {\n    const user = Promise.await(UsersRaw.setLivechatStatusIf(userId, status, condition, fields));\n    callbacks.runAsync('livechat.setUserStatusLivechat', {\n      userId,\n      status\n    });\n    return user;\n  },\n\n  cleanGuestHistory(_id) {\n    const guest = LivechatVisitors.findOneById(_id);\n\n    if (!guest) {\n      throw new Meteor.Error('error-invalid-guest', 'Invalid guest', {\n        method: 'livechat:cleanGuestHistory'\n      });\n    }\n\n    const {\n      token\n    } = guest;\n    check(token, String);\n    LivechatRooms.findByVisitorToken(token).forEach(room => {\n      FileUpload.removeFilesByRoomId(room._id);\n      Messages.removeByRoomId(room._id);\n    });\n    Subscriptions.removeByVisitorToken(token);\n    LivechatRooms.removeByVisitorToken(token);\n    LivechatInquiry.removeByVisitorToken(token);\n  },\n\n  saveDepartmentAgents(_id, departmentAgents) {\n    check(_id, String);\n    check(departmentAgents, {\n      upsert: Match.Maybe([Match.ObjectIncluding({\n        agentId: String,\n        username: String,\n        count: Match.Maybe(Match.Integer),\n        order: Match.Maybe(Match.Integer)\n      })]),\n      remove: Match.Maybe([Match.ObjectIncluding({\n        agentId: String,\n        username: Match.Maybe(String),\n        count: Match.Maybe(Match.Integer),\n        order: Match.Maybe(Match.Integer)\n      })])\n    });\n    const department = LivechatDepartment.findOneById(_id);\n\n    if (!department) {\n      throw new Meteor.Error('error-department-not-found', 'Department not found', {\n        method: 'livechat:saveDepartmentAgents'\n      });\n    }\n\n    return updateDepartmentAgents(_id, departmentAgents, department.enabled);\n  },\n\n  saveDepartment(_id, departmentData, departmentAgents) {\n    check(_id, Match.Maybe(String));\n    const defaultValidations = {\n      enabled: Boolean,\n      name: String,\n      description: Match.Optional(String),\n      showOnRegistration: Boolean,\n      email: String,\n      showOnOfflineForm: Boolean,\n      requestTagBeforeClosingChat: Match.Optional(Boolean),\n      chatClosingTags: Match.Optional([String]),\n      fallbackForwardDepartment: Match.Optional(String)\n    }; // The Livechat Form department support addition/custom fields, so those fields need to be added before validating\n\n    Object.keys(departmentData).forEach(field => {\n      if (!defaultValidations.hasOwnProperty(field)) {\n        defaultValidations[field] = Match.OneOf(String, Match.Integer, Boolean);\n      }\n    });\n    check(departmentData, defaultValidations);\n    check(departmentAgents, Match.Maybe({\n      upsert: Match.Maybe(Array),\n      remove: Match.Maybe(Array)\n    }));\n    const {\n      requestTagBeforeClosingChat,\n      chatClosingTags,\n      fallbackForwardDepartment\n    } = departmentData;\n\n    if (requestTagBeforeClosingChat && (!chatClosingTags || chatClosingTags.length === 0)) {\n      throw new Meteor.Error('error-validating-department-chat-closing-tags', 'At least one closing tag is required when the department requires tag(s) on closing conversations.', {\n        method: 'livechat:saveDepartment'\n      });\n    }\n\n    if (_id) {\n      const department = LivechatDepartment.findOneById(_id);\n\n      if (!department) {\n        throw new Meteor.Error('error-department-not-found', 'Department not found', {\n          method: 'livechat:saveDepartment'\n        });\n      }\n    }\n\n    if (fallbackForwardDepartment === _id) {\n      throw new Meteor.Error('error-fallback-department-circular', 'Cannot save department. Circular reference between fallback department and department');\n    }\n\n    const departmentDB = LivechatDepartment.createOrUpdateDepartment(_id, departmentData);\n\n    if (departmentDB && departmentAgents) {\n      updateDepartmentAgents(departmentDB._id, departmentAgents, departmentDB.enabled);\n    }\n\n    return departmentDB;\n  },\n\n  saveAgentInfo(_id, agentData, agentDepartments) {\n    check(_id, Match.Maybe(String));\n    check(agentData, Object);\n    check(agentDepartments, [String]);\n    const user = Users.findOneById(_id);\n\n    if (!user || !hasRole(_id, 'livechat-agent')) {\n      throw new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent', {\n        method: 'livechat:saveAgentInfo'\n      });\n    }\n\n    Users.setLivechatData(_id, agentData);\n    LivechatDepartment.saveDepartmentsByAgent(user, agentDepartments);\n    return true;\n  },\n\n  removeDepartment(_id) {\n    check(_id, String);\n    const department = LivechatDepartment.findOneById(_id, {\n      fields: {\n        _id: 1\n      }\n    });\n\n    if (!department) {\n      throw new Meteor.Error('department-not-found', 'Department not found', {\n        method: 'livechat:removeDepartment'\n      });\n    }\n\n    const ret = LivechatDepartment.removeById(_id);\n    const agentsIds = LivechatDepartmentAgents.findByDepartmentId(_id).fetch().map(agent => agent.agentId);\n    LivechatDepartmentAgents.removeByDepartmentId(_id);\n    LivechatDepartment.unsetFallbackDepartmentByDepartmentId(_id);\n\n    if (ret) {\n      Meteor.defer(() => {\n        callbacks.run('livechat.afterRemoveDepartment', {\n          department,\n          agentsIds\n        });\n      });\n    }\n\n    return ret;\n  },\n\n  showConnecting() {\n    const {\n      showConnecting\n    } = RoutingManager.getConfig();\n    return showConnecting;\n  },\n\n  sendEmail(from, to, replyTo, subject, html) {\n    Mailer.send({\n      to,\n      from,\n      replyTo,\n      subject,\n      html\n    });\n  },\n\n  sendTranscript(_ref6) {\n    let {\n      token,\n      rid,\n      email,\n      subject,\n      user\n    } = _ref6;\n    check(rid, String);\n    check(email, String);\n    Livechat.logger.debug(\"Sending conversation transcript of room \".concat(rid, \" to user with token \").concat(token));\n    const room = LivechatRooms.findOneById(rid);\n    const visitor = LivechatVisitors.getVisitorByToken(token, {\n      fields: {\n        _id: 1,\n        token: 1,\n        language: 1,\n        username: 1,\n        name: 1\n      }\n    });\n    const userLanguage = visitor && visitor.language || settings.get('Language') || 'en';\n    const timezone = getTimezone(user);\n    Livechat.logger.debug(\"Transcript will be sent using \".concat(timezone, \" as timezone\")); // allow to only user to send transcripts from their own chats\n\n    if (!room || room.t !== 'l' || !room.v || room.v.token !== token) {\n      throw new Meteor.Error('error-invalid-room', 'Invalid room');\n    }\n\n    const showAgentInfo = settings.get('Livechat_show_agent_info');\n    const ignoredMessageTypes = ['livechat_navigation_history', 'livechat_transcript_history', 'command', 'livechat-close', 'livechat-started', 'livechat_video_call'];\n    const messages = Messages.findVisibleByRoomIdNotContainingTypes(rid, ignoredMessageTypes, {\n      sort: {\n        ts: 1\n      }\n    });\n    let html = '<div> <hr>';\n    messages.forEach(message => {\n      let author;\n\n      if (message.u._id === visitor._id) {\n        author = TAPi18n.__('You', {\n          lng: userLanguage\n        });\n      } else {\n        author = showAgentInfo ? message.u.name || message.u.username : TAPi18n.__('Agent', {\n          lng: userLanguage\n        });\n      }\n\n      const datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n      const singleMessage = \"\\n\\t\\t\\t\\t<p><strong>\".concat(author, \"</strong>  <em>\").concat(datetime, \"</em></p>\\n\\t\\t\\t\\t<p>\").concat(message.msg, \"</p>\\n\\t\\t\\t\");\n      html += singleMessage;\n    });\n    html = \"\".concat(html, \"</div>\");\n    let fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n    if (fromEmail) {\n      fromEmail = fromEmail[0];\n    } else {\n      fromEmail = settings.get('From_Email');\n    }\n\n    const mailSubject = subject || TAPi18n.__('Transcript_of_your_livechat_conversation', {\n      lng: userLanguage\n    });\n\n    this.sendEmail(fromEmail, email, fromEmail, mailSubject, html);\n    Meteor.defer(() => {\n      callbacks.run('livechat.sendTranscript', messages, email);\n    });\n    let type = 'user';\n\n    if (!user) {\n      user = Users.findOneById('rocket.cat', {\n        fields: {\n          _id: 1,\n          username: 1,\n          name: 1\n        }\n      });\n      type = 'visitor';\n    }\n\n    Messages.createTranscriptHistoryWithRoomIdMessageAndUser(room._id, '', user, {\n      requestData: {\n        type,\n        visitor,\n        user\n      }\n    });\n    return true;\n  },\n\n  getRoomMessages(_ref7) {\n    let {\n      rid\n    } = _ref7;\n    check(rid, String);\n    const isLivechat = Promise.await(Rooms.findByTypeInIds('l', [rid])).count();\n\n    if (!isLivechat) {\n      throw new Meteor.Error('invalid-room');\n    }\n\n    const ignoredMessageTypes = ['livechat_navigation_history', 'livechat_transcript_history', 'command', 'livechat-close', 'livechat-started', 'livechat_video_call'];\n    return Messages.findVisibleByRoomIdNotContainingTypes(rid, ignoredMessageTypes, {\n      sort: {\n        ts: 1\n      }\n    }).fetch();\n  },\n\n  requestTranscript(_ref8) {\n    let {\n      rid,\n      email,\n      subject,\n      user\n    } = _ref8;\n    check(rid, String);\n    check(email, String);\n    check(subject, String);\n    check(user, Match.ObjectIncluding({\n      _id: String,\n      username: String,\n      utcOffset: Number,\n      name: Match.Maybe(String)\n    }));\n    const room = LivechatRooms.findOneById(rid, {\n      _id: 1,\n      open: 1,\n      transcriptRequest: 1\n    });\n\n    if (!room || !room.open) {\n      throw new Meteor.Error('error-invalid-room', 'Invalid room');\n    }\n\n    if (room.transcriptRequest) {\n      throw new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n    }\n\n    const {\n      _id,\n      username,\n      name,\n      utcOffset\n    } = user;\n    const transcriptRequest = {\n      requestedAt: new Date(),\n      requestedBy: {\n        _id,\n        username,\n        name,\n        utcOffset\n      },\n      email,\n      subject\n    };\n    LivechatRooms.requestTranscriptByRoomId(rid, transcriptRequest);\n    return true;\n  },\n\n  notifyGuestStatusChanged(token, status) {\n    LivechatInquiry.updateVisitorStatus(token, status);\n    LivechatRooms.updateVisitorStatus(token, status);\n  },\n\n  sendOfflineMessage() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!settings.get('Livechat_display_offline_form')) {\n      return false;\n    }\n\n    const {\n      message,\n      name,\n      email,\n      department,\n      host\n    } = data;\n    const emailMessage = \"\".concat(message).replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n    let html = '<h1>New livechat message</h1>';\n\n    if (host && host !== '') {\n      html = html.concat(\"<p><strong>Sent from:</strong><a href='\".concat(host, \"'> \").concat(host, \"</a></p>\"));\n    }\n\n    html = html.concat(\"\\n\\t\\t\\t<p><strong>Visitor name:</strong> \".concat(name, \"</p>\\n\\t\\t\\t<p><strong>Visitor email:</strong> \").concat(email, \"</p>\\n\\t\\t\\t<p><strong>Message:</strong><br>\").concat(emailMessage, \"</p>\"));\n    let fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n    if (fromEmail) {\n      fromEmail = fromEmail[0];\n    } else {\n      fromEmail = settings.get('From_Email');\n    }\n\n    if (settings.get('Livechat_validate_offline_email')) {\n      const emailDomain = email.substr(email.lastIndexOf('@') + 1);\n\n      try {\n        dnsResolveMx(emailDomain);\n      } catch (e) {\n        throw new Meteor.Error('error-invalid-email-address', 'Invalid email address', {\n          method: 'livechat:sendOfflineMessage'\n        });\n      }\n    }\n\n    let emailTo = settings.get('Livechat_offline_email');\n\n    if (department && department !== '') {\n      const dep = LivechatDepartment.findOneByIdOrName(department);\n      emailTo = dep.email || emailTo;\n    }\n\n    const from = \"\".concat(name, \" - \").concat(email, \" <\").concat(fromEmail, \">\");\n    const replyTo = \"\".concat(name, \" <\").concat(email, \">\");\n    const subject = \"Livechat offline message from \".concat(name, \": \").concat(\"\".concat(emailMessage).substring(0, 20));\n    this.sendEmail(from, emailTo, replyTo, subject, html);\n    Meteor.defer(() => {\n      callbacks.run('livechat.offlineMessage', data);\n    });\n    return true;\n  },\n\n  notifyAgentStatusChanged(userId, status) {\n    callbacks.runAsync('livechat.agentStatusChanged', {\n      userId,\n      status\n    });\n\n    if (!settings.get('Livechat_show_agent_info')) {\n      return;\n    }\n\n    LivechatRooms.findOpenByAgent(userId).forEach(room => {\n      notifications.streamLivechatRoom.emit(room._id, {\n        type: 'agentStatus',\n        status\n      });\n    });\n  },\n\n  allowAgentChangeServiceStatus(statusLivechat, agentId) {\n    if (statusLivechat !== 'available') {\n      return true;\n    }\n\n    return Promise.await(businessHourManager.allowAgentChangeServiceStatus(agentId));\n  },\n\n  notifyRoomVisitorChange(roomId, visitor) {\n    notifications.streamLivechatRoom.emit(roomId, {\n      type: 'visitorData',\n      visitor\n    });\n  },\n\n  changeRoomVisitor(userId, roomId, visitor) {\n    const user = Promise.await(Users.findOneById(userId));\n\n    if (!user) {\n      throw new Error('error-user-not-found');\n    }\n\n    if (!hasPermission(userId, 'change-livechat-room-visitor')) {\n      throw new Error('error-not-authorized');\n    }\n\n    const room = Promise.await(LivechatRooms.findOneById(roomId, {\n      _id: 1,\n      t: 1\n    }));\n\n    if (!room) {\n      throw new Meteor.Error('invalid-room');\n    }\n\n    if (!canAccessRoom(room, user)) {\n      throw new Error('error-not-allowed');\n    }\n\n    LivechatRooms.changeVisitorByRoomId(room._id, visitor);\n    Livechat.notifyRoomVisitorChange(room._id, visitor);\n    return LivechatRooms.findOneById(roomId);\n  },\n\n  updateLastChat(contactId, lastChat) {\n    const updateUser = {\n      $set: {\n        lastChat\n      }\n    };\n    LivechatVisitors.updateById(contactId, updateUser);\n  },\n\n  updateCallStatus(callId, rid, status, user) {\n    Rooms.setCallStatus(rid, status);\n\n    if (status === 'ended' || status === 'declined') {\n      return updateMessage({\n        _id: callId,\n        msg: status,\n        actionLinks: [],\n        webRtcCallEndTs: new Date()\n      }, user);\n    }\n  }\n\n};\nsettings.watch('Livechat_history_monitor_type', value => {\n  Livechat.historyMonitorType = value;\n});","map":{"version":3,"sources":["app/livechat/server/lib/Livechat.js"],"names":["_objectSpread","module","link","default","v","export","Livechat","dns","Meteor","Match","check","Random","TAPi18n","HTTP","_","s","moment","UAParser","QueueManager","RoutingManager","Analytics","settings","getTimezone","callbacks","Users","LivechatRooms","Messages","Subscriptions","Settings","Rooms","LivechatDepartmentAgents","LivechatDepartment","LivechatCustomField","LivechatVisitors","LivechatInquiry","Logger","addUserRoles","hasPermission","hasRole","removeUserFromRoles","canAccessRoom","Mailer","sendMessage","updateMessage","deleteMessage","FileUpload","normalizeTransferredByData","parseAgentCustomFields","updateDepartmentAgents","validateEmail","Apps","AppEvents","businessHourManager","notifications","UsersRaw","logger","dnsResolveMx","wrapAsync","resolveMx","historyMonitorType","webhookLogger","section","findGuest","token","getVisitorByToken","fields","name","username","visitorEmails","department","online","skipNoAgentSetting","skipFallbackCheck","debug","get","botAgents","getBotAgents","onlineBots","count","agentsOnline","checkOnlineAgents","getNextAgent","getAgents","findByDepartmentId","findAgents","getOnlineAgents","agent","agentId","findOnlineAgents","getOnlineForDepartment","onlineForDep","checkOnlineForDepartment","dep","findOneById","fallbackForwardDepartment","getBotsForDepartment","findBotAgents","getRequiredDepartment","onlineRequired","departments","findEnabledWithAgents","fetch","find","dept","showOnRegistration","onlineAgents","_id","getRoom","guest","message","roomInfo","extraData","enabled","Error","room","rid","newRoom","open","id","removeDepartmentById","defaultAgent","run","requestRoom","setRoomIdByToken","alias","extend","showConnecting","ObjectIncluding","String","originalMessage","editAllowed","editOwn","u","method","msg","deleteAllowed","registerGuest","email","phone","connectionData","Maybe","userId","updateUser","$set","number","phoneNumber","trim","address","findOneByIdOrName","user","existingUser","findOneGuestByEmailAddress","getNextVisitorUsername","userData","ts","Date","connection","httpHeaders","userAgent","ip","clientAddress","host","insert","updateById","setDepartmentForGuest","saveGuest","livechatData","updateData","customFields","scope","forEach","field","hasOwnProperty","value","regexp","undefined","RegExp","test","__","label","ret","saveGuestById","defer","triggerEvent","IPostLivechatGuestSaved","closeRoom","visitor","comment","options","t","params","now","servedBy","transcriptRequest","serviceTimeDuration","getTime","closeData","closedAt","chatDuration","closer","closedBy","closeByRoomId","removeByRoomId","groupable","transcriptRequested","createCommandWithRoomIdAndUser","getBridges","getListenerBridge","livechatEvent","ILivechatRoomClosedHandler","IPostLivechatRoomClosed","runAsync","removeRoom","removeById","setCustomFields","key","overwrite","Boolean","customField","updateDataByToken","updateLivechatDataByToken","getInitSettings","rcSettings","findNotHiddenPublic","setting","Livechat_history_monitor_type","Livechat_Show_Connecting","saveRoomInfo","roomData","guestData","saveRoomById","IPostLivechatRoomSaved","isEmpty","setFnameById","setNameByRoomId","updateDisplayNameByRoomId","closeOpenChats","findOpenByAgent","forwardOpenChats","transferredBy","Promise","await","transfer","roomId","departmentId","savePageHistory","pageInfo","change","pageTitle","title","pageUrl","location","href","navigation","page","keepHistoryMiliseconds","expireAt","_hidden","createNavigationHistoryWithRoomIdMessageAndUser","saveTransferHistory","transferData","previousDepartment","nextDepartment","transferredTo","type","scopeData","createTransferHistoryWithRoomIdMessageAndUser","onHold","transferRoom","returnRoomAsInquiry","findOne","inquiry","unassignAgent","e","error","sendRequest","postData","callback","attempts","secretToken","headers","data","post","warn","setTimeout","bindEnvironment","getLivechatRoomGuestInfo","ua","setUA","fname","topic","createdAt","lastMessageAt","lm","tags","os","getOS","version","browser","getBrowser","emails","length","crmData","addAgent","findOneByUsername","setOperator","setUserStatusLivechat","status","addManager","removeAgent","removeLivechatData","removeByAgentId","removeManager","removeGuest","cleanGuestHistory","setLivechatStatus","setUserStatusLivechatIf","condition","setLivechatStatusIf","findByVisitorToken","removeFilesByRoomId","removeByVisitorToken","saveDepartmentAgents","departmentAgents","upsert","Integer","order","remove","saveDepartment","departmentData","defaultValidations","description","Optional","showOnOfflineForm","requestTagBeforeClosingChat","chatClosingTags","Object","keys","OneOf","Array","departmentDB","createOrUpdateDepartment","saveAgentInfo","agentData","agentDepartments","setLivechatData","saveDepartmentsByAgent","removeDepartment","agentsIds","map","removeByDepartmentId","unsetFallbackDepartmentByDepartmentId","getConfig","sendEmail","from","to","replyTo","subject","html","send","sendTranscript","language","userLanguage","timezone","showAgentInfo","ignoredMessageTypes","messages","findVisibleByRoomIdNotContainingTypes","sort","author","lng","datetime","tz","locale","format","singleMessage","fromEmail","match","mailSubject","createTranscriptHistoryWithRoomIdMessageAndUser","requestData","getRoomMessages","isLivechat","findByTypeInIds","requestTranscript","utcOffset","Number","requestedAt","requestedBy","requestTranscriptByRoomId","notifyGuestStatusChanged","updateVisitorStatus","sendOfflineMessage","emailMessage","replace","concat","emailDomain","substr","lastIndexOf","emailTo","substring","notifyAgentStatusChanged","streamLivechatRoom","emit","allowAgentChangeServiceStatus","statusLivechat","notifyRoomVisitorChange","changeRoomVisitor","changeVisitorByRoomId","updateLastChat","contactId","lastChat","updateCallStatus","callId","setCallStatus","actionLinks","webRtcCallEndTs","watch"],"mappings":"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","sourcesContent":["import dns from 'dns';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Random } from 'meteor/random';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { HTTP } from 'meteor/http';\nimport _ from 'underscore';\nimport s from 'underscore.string';\nimport moment from 'moment-timezone';\nimport UAParser from 'ua-parser-js';\n\nimport { QueueManager } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport { Analytics } from './Analytics';\nimport { settings } from '../../../settings/server';\nimport { getTimezone } from '../../../utils/server/lib/getTimezone';\nimport { callbacks } from '../../../../lib/callbacks';\nimport {\n\tUsers,\n\tLivechatRooms,\n\tMessages,\n\tSubscriptions,\n\tSettings,\n\tRooms,\n\tLivechatDepartmentAgents,\n\tLivechatDepartment,\n\tLivechatCustomField,\n\tLivechatVisitors,\n\tLivechatInquiry,\n} from '../../../models/server';\nimport { Logger } from '../../../logger/server';\nimport { addUserRoles, hasPermission, hasRole, removeUserFromRoles, canAccessRoom } from '../../../authorization/server';\nimport * as Mailer from '../../../mailer';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { FileUpload } from '../../../file-upload/server';\nimport { normalizeTransferredByData, parseAgentCustomFields, updateDepartmentAgents, validateEmail } from './Helper';\nimport { Apps, AppEvents } from '../../../apps/server';\nimport { businessHourManager } from '../business-hour';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { Users as UsersRaw } from '../../../models/server/raw';\n\nconst logger = new Logger('Livechat');\n\nconst dnsResolveMx = Meteor.wrapAsync(dns.resolveMx);\n\nexport const Livechat = {\n\tAnalytics,\n\thistoryMonitorType: 'url',\n\n\tlogger,\n\twebhookLogger: logger.section('Webhook'),\n\n\tfindGuest(token) {\n\t\treturn LivechatVisitors.getVisitorByToken(token, {\n\t\t\tfields: {\n\t\t\t\tname: 1,\n\t\t\t\tusername: 1,\n\t\t\t\ttoken: 1,\n\t\t\t\tvisitorEmails: 1,\n\t\t\t\tdepartment: 1,\n\t\t\t},\n\t\t});\n\t},\n\n\tonline(department, skipNoAgentSetting = false, skipFallbackCheck = false) {\n\t\tLivechat.logger.debug(`Checking online agents ${department ? `for department ${department}` : ''}`);\n\t\tif (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tLivechat.logger.debug('Can accept without online agents: true');\n\t\t\treturn true;\n\t\t}\n\n\t\tif (settings.get('Livechat_assign_new_conversation_to_bot')) {\n\t\t\tLivechat.logger.debug(`Fetching online bot agents for department ${department}`);\n\t\t\tconst botAgents = Livechat.getBotAgents(department);\n\t\t\tconst onlineBots = botAgents.count();\n\t\t\tLivechat.logger.debug(`Found ${onlineBots} online`);\n\t\t\tif (onlineBots > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst agentsOnline = Livechat.checkOnlineAgents(department, {}, skipFallbackCheck);\n\t\tLivechat.logger.debug(`Are online agents ${department ? `for department ${department}` : ''}?: ${agentsOnline}`);\n\t\treturn agentsOnline;\n\t},\n\n\tgetNextAgent(department) {\n\t\treturn RoutingManager.getNextAgent(department);\n\t},\n\n\tgetAgents(department) {\n\t\tif (department) {\n\t\t\t// TODO: This and all others should get the user's info as well\n\t\t\treturn LivechatDepartmentAgents.findByDepartmentId(department);\n\t\t}\n\t\treturn Users.findAgents();\n\t},\n\n\tgetOnlineAgents(department, agent) {\n\t\tif (agent?.agentId) {\n\t\t\treturn Users.findOnlineAgents(agent.agentId);\n\t\t}\n\n\t\tif (department) {\n\t\t\treturn LivechatDepartmentAgents.getOnlineForDepartment(department);\n\t\t}\n\t\treturn Users.findOnlineAgents();\n\t},\n\n\tcheckOnlineAgents(department, agent, skipFallbackCheck = false) {\n\t\tif (agent?.agentId) {\n\t\t\treturn Users.checkOnlineAgents(agent.agentId);\n\t\t}\n\n\t\tif (department) {\n\t\t\tconst onlineForDep = LivechatDepartmentAgents.checkOnlineForDepartment(department);\n\t\t\tif (onlineForDep || skipFallbackCheck) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\tconst dep = LivechatDepartment.findOneById(department);\n\t\t\tif (!dep?.fallbackForwardDepartment) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\treturn this.checkOnlineAgents(dep?.fallbackForwardDepartment);\n\t\t}\n\n\t\treturn Users.checkOnlineAgents();\n\t},\n\n\tgetBotAgents(department) {\n\t\tif (department) {\n\t\t\treturn LivechatDepartmentAgents.getBotsForDepartment(department);\n\t\t}\n\n\t\treturn Users.findBotAgents();\n\t},\n\n\tgetRequiredDepartment(onlineRequired = true) {\n\t\tconst departments = LivechatDepartment.findEnabledWithAgents();\n\n\t\treturn departments.fetch().find((dept) => {\n\t\t\tif (!dept.showOnRegistration) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!onlineRequired) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst onlineAgents = LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n\t\t\treturn onlineAgents && onlineAgents.count() > 0;\n\t\t});\n\t},\n\n\tasync getRoom(guest, message, roomInfo, agent, extraData) {\n\t\tif (!this.enabled()) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\t\tLivechat.logger.debug(`Attempting to find or create a room for visitor ${guest._id}`);\n\t\tlet room = LivechatRooms.findOneById(message.rid);\n\t\tlet newRoom = false;\n\n\t\tif (room && !room.open) {\n\t\t\tLivechat.logger.debug(`Last room for visitor ${guest._id} closed. Creating new one`);\n\t\t\tmessage.rid = Random.id();\n\t\t\troom = null;\n\t\t}\n\n\t\tif (guest.department && !LivechatDepartment.findOneById(guest.department)) {\n\t\t\tLivechatVisitors.removeDepartmentById(guest._id);\n\t\t\tguest = LivechatVisitors.findOneById(guest._id);\n\t\t}\n\n\t\tif (room == null) {\n\t\t\tconst defaultAgent = callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, guest);\n\t\t\t// if no department selected verify if there is at least one active and pick the first\n\t\t\tif (!defaultAgent && !guest.department) {\n\t\t\t\tconst department = this.getRequiredDepartment();\n\t\t\t\tLivechat.logger.debug(`No department or default agent selected for ${guest._id}`);\n\n\t\t\t\tif (department) {\n\t\t\t\t\tLivechat.logger.debug(`Assigning ${guest._id} to department ${department._id}`);\n\t\t\t\t\tguest.department = department._id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// delegate room creation to QueueManager\n\t\t\tLivechat.logger.debug(`Calling QueueManager to request a room for visitor ${guest._id}`);\n\t\t\troom = await QueueManager.requestRoom({\n\t\t\t\tguest,\n\t\t\t\tmessage,\n\t\t\t\troomInfo,\n\t\t\t\tagent: defaultAgent,\n\t\t\t\textraData,\n\t\t\t});\n\t\t\tnewRoom = true;\n\n\t\t\tLivechat.logger.debug(`Room obtained for visitor ${guest._id} -> ${room._id}`);\n\t\t}\n\n\t\tif (!room || room.v.token !== guest.token) {\n\t\t\tLivechat.logger.debug(`Visitor ${guest._id} trying to access another visitor's room`);\n\t\t\tthrow new Meteor.Error('cannot-access-room');\n\t\t}\n\n\t\tif (newRoom) {\n\t\t\tMessages.setRoomIdByToken(guest.token, room._id);\n\t\t}\n\n\t\treturn { room, newRoom };\n\t},\n\n\tasync sendMessage({ guest, message, roomInfo, agent }) {\n\t\tconst { room, newRoom } = await this.getRoom(guest, message, roomInfo, agent);\n\t\tif (guest.name) {\n\t\t\tmessage.alias = guest.name;\n\t\t}\n\t\treturn _.extend(sendMessage(guest, message, room), {\n\t\t\tnewRoom,\n\t\t\tshowConnecting: this.showConnecting(),\n\t\t});\n\t},\n\n\tupdateMessage({ guest, message }) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\n\t\tconst originalMessage = Messages.findOneById(message._id);\n\t\tif (!originalMessage || !originalMessage._id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editAllowed = settings.get('Message_AllowEditing');\n\t\tconst editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n\n\t\tif (!editAllowed || !editOwn) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n\t\t\t\tmethod: 'livechatUpdateMessage',\n\t\t\t});\n\t\t}\n\n\t\tupdateMessage(message, guest);\n\n\t\treturn true;\n\t},\n\n\tasync deleteMessage({ guest, message }) {\n\t\tLivechat.logger.debug(`Attempting to delete a message by visitor ${guest._id}`);\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\n\t\tconst msg = Messages.findOneById(message._id);\n\t\tif (!msg || !msg._id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deleteAllowed = settings.get('Message_AllowDeleting');\n\t\tconst editOwn = msg.u && msg.u._id === guest._id;\n\n\t\tif (!deleteAllowed || !editOwn) {\n\t\t\tLivechat.logger.debug('Cannot delete message: not allowed');\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message deleting not allowed', {\n\t\t\t\tmethod: 'livechatDeleteMessage',\n\t\t\t});\n\t\t}\n\n\t\tawait deleteMessage(message, guest);\n\n\t\treturn true;\n\t},\n\n\tregisterGuest({ id, token, name, email, department, phone, username, connectionData } = {}) {\n\t\tcheck(token, String);\n\t\tcheck(id, Match.Maybe(String));\n\n\t\tLivechat.logger.debug(`New incoming conversation: id: ${id} | token: ${token}`);\n\n\t\tlet userId;\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\ttoken,\n\t\t\t\t...(phone?.number ? { phone: [{ phoneNumber: phone.number }] } : {}),\n\t\t\t\t...(name ? { name } : {}),\n\t\t\t},\n\t\t};\n\n\t\tif (email) {\n\t\t\temail = email.trim();\n\t\t\tvalidateEmail(email);\n\t\t\tupdateUser.$set.visitorEmails = [{ address: email }];\n\t\t}\n\n\t\tif (department) {\n\t\t\tLivechat.logger.debug(`Attempt to find a department with id/name ${department}`);\n\t\t\tconst dep = LivechatDepartment.findOneByIdOrName(department);\n\t\t\tif (!dep) {\n\t\t\t\tLivechat.logger.debug('Invalid department provided');\n\t\t\t\tthrow new Meteor.Error('error-invalid-department', 'The provided department is invalid', {\n\t\t\t\t\tmethod: 'registerGuest',\n\t\t\t\t});\n\t\t\t}\n\t\t\tLivechat.logger.debug(`Assigning visitor ${token} to department ${dep._id}`);\n\t\t\tupdateUser.$set.department = dep._id;\n\t\t}\n\n\t\tconst user = LivechatVisitors.getVisitorByToken(token, { fields: { _id: 1 } });\n\t\tlet existingUser = null;\n\n\t\tif (user) {\n\t\t\tLivechat.logger.debug('Found matching user by token');\n\t\t\tuserId = user._id;\n\t\t} else if (email && (existingUser = LivechatVisitors.findOneGuestByEmailAddress(email))) {\n\t\t\tLivechat.logger.debug('Found matching user by email');\n\t\t\tuserId = existingUser._id;\n\t\t} else {\n\t\t\tLivechat.logger.debug(`No matches found. Attempting to create new user with token ${token}`);\n\t\t\tif (!username) {\n\t\t\t\tusername = LivechatVisitors.getNextVisitorUsername();\n\t\t\t}\n\n\t\t\tconst userData = {\n\t\t\t\tusername,\n\t\t\t\tts: new Date(),\n\t\t\t\t...(id && { _id: id }),\n\t\t\t};\n\n\t\t\tif (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n\t\t\t\tLivechat.logger.debug(`Saving connection data for visitor ${token}`);\n\t\t\t\tconst connection = this.connection || connectionData;\n\t\t\t\tif (connection && connection.httpHeaders) {\n\t\t\t\t\tuserData.userAgent = connection.httpHeaders['user-agent'];\n\t\t\t\t\tuserData.ip = connection.httpHeaders['x-real-ip'] || connection.httpHeaders['x-forwarded-for'] || connection.clientAddress;\n\t\t\t\t\tuserData.host = connection.httpHeaders.host;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuserId = LivechatVisitors.insert(userData);\n\t\t}\n\n\t\tLivechatVisitors.updateById(userId, updateUser);\n\n\t\treturn userId;\n\t},\n\n\tsetDepartmentForGuest({ token, department } = {}) {\n\t\tcheck(token, String);\n\t\tcheck(department, String);\n\n\t\tLivechat.logger.debug(`Switching departments for user with token ${token} (to ${department})`);\n\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tconst dep = LivechatDepartment.findOneById(department);\n\t\tif (!dep) {\n\t\t\tthrow new Meteor.Error('invalid-department', 'Provided department does not exists', {\n\t\t\t\tmethod: 'setDepartmentForGuest',\n\t\t\t});\n\t\t}\n\n\t\tconst user = LivechatVisitors.getVisitorByToken(token, { fields: { _id: 1 } });\n\t\tif (user) {\n\t\t\treturn LivechatVisitors.updateById(user._id, updateUser);\n\t\t}\n\t\treturn false;\n\t},\n\n\tsaveGuest({ _id, name, email, phone, livechatData = {} }, userId) {\n\t\tLivechat.logger.debug(`Saving data for visitor ${_id}`);\n\t\tconst updateData = {};\n\n\t\tif (name) {\n\t\t\tupdateData.name = name;\n\t\t}\n\t\tif (email) {\n\t\t\tupdateData.email = email;\n\t\t}\n\t\tif (phone) {\n\t\t\tupdateData.phone = phone;\n\t\t}\n\n\t\tconst customFields = {};\n\t\tconst fields = LivechatCustomField.find({ scope: 'visitor' });\n\n\t\tif (!userId || hasPermission(userId, 'edit-livechat-room-customfields')) {\n\t\t\tfields.forEach((field) => {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst value = s.trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', { field: field.label }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t});\n\t\t\tupdateData.livechatData = customFields;\n\t\t}\n\t\tconst ret = LivechatVisitors.saveGuestById(_id, updateData);\n\n\t\tMeteor.defer(() => {\n\t\t\tApps.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id);\n\t\t\tcallbacks.run('livechat.saveGuest', updateData);\n\t\t});\n\n\t\treturn ret;\n\t},\n\n\tcloseRoom({ user, visitor, room, comment, options = {} }) {\n\t\tLivechat.logger.debug(`Attempting to close room ${room._id}`);\n\t\tif (!room || room.t !== 'l' || !room.open) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst params = callbacks.run('livechat.beforeCloseRoom', { room, options });\n\t\tconst { extraData } = params;\n\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy, transcriptRequest } = room;\n\t\tconst serviceTimeDuration = servedBy && (now.getTime() - servedBy.ts) / 1000;\n\n\t\tconst closeData = {\n\t\t\tclosedAt: now,\n\t\t\tchatDuration: (now.getTime() - room.ts) / 1000,\n\t\t\t...(serviceTimeDuration && { serviceTimeDuration }),\n\t\t\t...extraData,\n\t\t};\n\t\tLivechat.logger.debug(`Room ${room._id} was closed at ${closeData.closedAt} (duration ${closeData.chatDuration})`);\n\n\t\tif (user) {\n\t\t\tLivechat.logger.debug(`Closing by user ${user._id}`);\n\t\t\tcloseData.closer = 'user';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t} else if (visitor) {\n\t\t\tLivechat.logger.debug(`Closing by visitor ${visitor._id}`);\n\t\t\tcloseData.closer = 'visitor';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t};\n\t\t}\n\n\t\tLivechatRooms.closeByRoomId(rid, closeData);\n\t\tLivechatInquiry.removeByRoomId(rid);\n\t\tSubscriptions.removeByRoomId(rid);\n\n\t\tconst message = {\n\t\t\tt: 'livechat-close',\n\t\t\tmsg: comment,\n\t\t\tgroupable: false,\n\t\t\ttranscriptRequested: !!transcriptRequest,\n\t\t};\n\n\t\t// Retreive the closed room\n\t\troom = LivechatRooms.findOneByIdOrName(rid);\n\n\t\tLivechat.logger.debug(`Sending closing message to room ${room._id}`);\n\t\tsendMessage(user || visitor, message, room);\n\n\t\tMessages.createCommandWithRoomIdAndUser('promptTranscript', rid, closeData.closedBy);\n\n\t\tMeteor.defer(() => {\n\t\t\t/**\n\t\t\t * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n\t\t\t * in the next major version of the Apps-Engine\n\t\t\t */\n\t\t\tApps.getBridges().getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, room);\n\t\t\tApps.getBridges().getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, room);\n\t\t});\n\t\tcallbacks.runAsync('livechat.closeRoom', room);\n\n\t\treturn true;\n\t},\n\n\tremoveRoom(rid) {\n\t\tLivechat.logger.debug(`Deleting room ${rid}`);\n\t\tcheck(rid, String);\n\t\tconst room = LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\tmethod: 'livechat:removeRoom',\n\t\t\t});\n\t\t}\n\n\t\tMessages.removeByRoomId(rid);\n\t\tSubscriptions.removeByRoomId(rid);\n\t\tLivechatInquiry.removeByRoomId(rid);\n\t\treturn LivechatRooms.removeById(rid);\n\t},\n\n\tsetCustomFields({ token, key, value, overwrite } = {}) {\n\t\tcheck(token, String);\n\t\tcheck(key, String);\n\t\tcheck(value, String);\n\t\tcheck(overwrite, Boolean);\n\t\tLivechat.logger.debug(`Setting custom fields data for visitor with token ${token}`);\n\n\t\tconst customField = LivechatCustomField.findOneById(key);\n\t\tif (!customField) {\n\t\t\tthrow new Meteor.Error('invalid-custom-field');\n\t\t}\n\n\t\tif (customField.regexp !== undefined && customField.regexp !== '') {\n\t\t\tconst regexp = new RegExp(customField.regexp);\n\t\t\tif (!regexp.test(value)) {\n\t\t\t\tthrow new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', { field: key }));\n\t\t\t}\n\t\t}\n\n\t\tif (customField.scope === 'room') {\n\t\t\treturn LivechatRooms.updateDataByToken(token, key, value, overwrite);\n\t\t}\n\t\treturn LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n\t},\n\n\tenabled() {\n\t\treturn settings.get('Livechat_enabled');\n\t},\n\n\tgetInitSettings() {\n\t\tconst rcSettings = {};\n\n\t\tSettings.findNotHiddenPublic([\n\t\t\t'Livechat_title',\n\t\t\t'Livechat_title_color',\n\t\t\t'Livechat_enable_message_character_limit',\n\t\t\t'Livechat_message_character_limit',\n\t\t\t'Message_MaxAllowedSize',\n\t\t\t'Livechat_enabled',\n\t\t\t'Livechat_registration_form',\n\t\t\t'Livechat_allow_switching_departments',\n\t\t\t'Livechat_offline_title',\n\t\t\t'Livechat_offline_title_color',\n\t\t\t'Livechat_offline_message',\n\t\t\t'Livechat_offline_success_message',\n\t\t\t'Livechat_offline_form_unavailable',\n\t\t\t'Livechat_display_offline_form',\n\t\t\t'Omnichannel_call_provider',\n\t\t\t'Jitsi_Enabled',\n\t\t\t'Language',\n\t\t\t'Livechat_enable_transcript',\n\t\t\t'Livechat_transcript_message',\n\t\t\t'Livechat_fileupload_enabled',\n\t\t\t'FileUpload_Enabled',\n\t\t\t'Livechat_conversation_finished_message',\n\t\t\t'Livechat_conversation_finished_text',\n\t\t\t'Livechat_name_field_registration_form',\n\t\t\t'Livechat_email_field_registration_form',\n\t\t\t'Livechat_registration_form_message',\n\t\t\t'Livechat_force_accept_data_processing_consent',\n\t\t\t'Livechat_data_processing_consent_text',\n\t\t\t'Livechat_show_agent_info',\n\t\t\t'Livechat_clear_local_storage_when_chat_ended',\n\t\t]).forEach((setting) => {\n\t\t\trcSettings[setting._id] = setting.value;\n\t\t});\n\n\t\trcSettings.Livechat_history_monitor_type = settings.get('Livechat_history_monitor_type');\n\n\t\trcSettings.Livechat_Show_Connecting = this.showConnecting();\n\n\t\treturn rcSettings;\n\t},\n\n\tsaveRoomInfo(roomData, guestData, userId) {\n\t\tLivechat.logger.debug(`Saving room information on room ${roomData._id}`);\n\t\tconst { livechatData = {} } = roomData;\n\t\tconst customFields = {};\n\n\t\tif (!userId || hasPermission(userId, 'edit-livechat-room-customfields')) {\n\t\t\tconst fields = LivechatCustomField.find({ scope: 'room' });\n\t\t\tfields.forEach((field) => {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst value = s.trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Meteor.Error(TAPi18n.__('error-invalid-custom-field-value', { field: field.label }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t});\n\t\t\troomData.livechatData = customFields;\n\t\t}\n\n\t\tif (!LivechatRooms.saveRoomById(roomData)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tMeteor.defer(() => {\n\t\t\tApps.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id);\n\t\t});\n\t\tcallbacks.runAsync('livechat.saveRoom', roomData);\n\n\t\tif (!_.isEmpty(guestData.name)) {\n\t\t\tconst { _id: rid } = roomData;\n\t\t\tconst { name } = guestData;\n\t\t\treturn (\n\t\t\t\tRooms.setFnameById(rid, name) &&\n\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name) &&\n\t\t\t\t// This one needs to be the last since the agent may not have the subscription\n\t\t\t\t// when the conversation is in the queue, then the result will be 0(zero)\n\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name)\n\t\t\t);\n\t\t}\n\t},\n\n\tcloseOpenChats(userId, comment) {\n\t\tLivechat.logger.debug(`Closing open chats for user ${userId}`);\n\t\tconst user = Users.findOneById(userId);\n\t\tLivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tthis.closeRoom({ user, room, comment });\n\t\t});\n\t},\n\n\tforwardOpenChats(userId) {\n\t\tLivechat.logger.debug(`Transferring open chats for user ${userId}`);\n\t\tLivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tconst guest = LivechatVisitors.findOneById(room.v._id);\n\t\t\tconst user = Users.findOneById(userId);\n\t\t\tconst { _id, username, name } = user;\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tPromise.await(\n\t\t\t\tthis.transfer(room, guest, {\n\t\t\t\t\troomId: room._id,\n\t\t\t\t\ttransferredBy,\n\t\t\t\t\tdepartmentId: guest.department,\n\t\t\t\t}),\n\t\t\t);\n\t\t});\n\t},\n\n\tsavePageHistory(token, roomId, pageInfo) {\n\t\tLivechat.logger.debug(`Saving page movement history for visitor with token ${token}`);\n\t\tif (pageInfo.change !== Livechat.historyMonitorType) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = Users.findOneById('rocket.cat');\n\n\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst extraData = {\n\t\t\tnavigation: {\n\t\t\t\tpage: pageInfo,\n\t\t\t\ttoken,\n\t\t\t},\n\t\t};\n\n\t\tif (!roomId) {\n\t\t\t// keep history of unregistered visitors for 1 month\n\t\t\tconst keepHistoryMiliseconds = 2592000000;\n\t\t\textraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n\t\t}\n\n\t\tif (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n\t\t\textraData._hidden = true;\n\t\t}\n\n\t\treturn Messages.createNavigationHistoryWithRoomIdMessageAndUser(roomId, `${pageTitle} - ${pageUrl}`, user, extraData);\n\t},\n\n\tsaveTransferHistory(room, transferData) {\n\t\tLivechat.logger.debug(`Saving transfer history for room ${room._id}`);\n\t\tconst { departmentId: previousDepartment } = room;\n\t\tconst { department: nextDepartment, transferredBy, transferredTo, scope, comment } = transferData;\n\n\t\tcheck(\n\t\t\ttransferredBy,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\ttype: String,\n\t\t\t}),\n\t\t);\n\n\t\tconst { _id, username } = transferredBy;\n\t\tconst scopeData = scope || (nextDepartment ? 'department' : 'agent');\n\t\tLivechat.logger.debug(`Storing new chat transfer of ${room._id} [Transfered by: ${_id} to ${scopeData}]`);\n\n\t\tconst transfer = {\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),\n\t\t\t\t...(nextDepartment && { nextDepartment }),\n\t\t\t\t...(transferredTo && { transferredTo }),\n\t\t\t},\n\t\t};\n\n\t\treturn Messages.createTransferHistoryWithRoomIdMessageAndUser(room._id, '', { _id, username }, transfer);\n\t},\n\n\tasync transfer(room, guest, transferData) {\n\t\tLivechat.logger.debug(`Transfering room ${room._id} [Transfered by: ${transferData?.transferredBy?._id}]`);\n\t\tif (room.onHold) {\n\t\t\tLivechat.logger.debug('Cannot transfer. Room is on hold');\n\t\t\tthrow new Meteor.Error('error-room-onHold', 'Room On Hold', { method: 'livechat:transfer' });\n\t\t}\n\n\t\tif (transferData.departmentId) {\n\t\t\ttransferData.department = LivechatDepartment.findOneById(transferData.departmentId, {\n\t\t\t\tfields: { name: 1 },\n\t\t\t});\n\t\t\tLivechat.logger.debug(`Transfering room ${room._id} to department ${transferData.department?._id}`);\n\t\t}\n\n\t\treturn RoutingManager.transferRoom(room, guest, transferData);\n\t},\n\n\treturnRoomAsInquiry(rid, departmentId) {\n\t\tLivechat.logger.debug(`Transfering room ${rid} to ${departmentId ? 'department' : ''} queue`);\n\t\tconst room = LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\t\tmethod: 'livechat:returnRoomAsInquiry',\n\t\t\t});\n\t\t}\n\n\t\tif (!room.open) {\n\t\t\tthrow new Meteor.Error('room-closed', 'Room closed', {\n\t\t\t\tmethod: 'livechat:returnRoomAsInquiry',\n\t\t\t});\n\t\t}\n\n\t\tif (room.onHold) {\n\t\t\tthrow new Meteor.Error('error-room-onHold', 'Room On Hold', {\n\t\t\t\tmethod: 'livechat:returnRoomAsInquiry',\n\t\t\t});\n\t\t}\n\n\t\tif (!room.servedBy) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst user = Users.findOne(room.servedBy._id);\n\t\tif (!user || !user._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'livechat:returnRoomAsInquiry',\n\t\t\t});\n\t\t}\n\n\t\t// find inquiry corresponding to room\n\t\tconst inquiry = LivechatInquiry.findOne({ rid });\n\t\tif (!inquiry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst transferredBy = normalizeTransferredByData(user, room);\n\t\tLivechat.logger.debug(`Transfering room ${room._id} by user ${transferredBy._id}`);\n\t\tconst transferData = { roomId: rid, scope: 'queue', departmentId, transferredBy };\n\t\ttry {\n\t\t\tthis.saveTransferHistory(room, transferData);\n\t\t\tRoutingManager.unassignAgent(inquiry, departmentId);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow new Meteor.Error('error-returning-inquiry', 'Error returning inquiry to the queue', {\n\t\t\t\tmethod: 'livechat:returnRoomAsInquiry',\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat:afterReturnRoomAsInquiry', { room });\n\n\t\treturn true;\n\t},\n\n\tsendRequest(postData, callback, attempts = 10) {\n\t\tif (!attempts) {\n\t\t\treturn;\n\t\t}\n\t\tconst secretToken = settings.get('Livechat_secret_token');\n\t\tconst headers = { 'X-RocketChat-Livechat-Token': secretToken };\n\t\tconst options = {\n\t\t\tdata: postData,\n\t\t\t...(secretToken !== '' && secretToken !== undefined && { headers }),\n\t\t};\n\t\ttry {\n\t\t\treturn HTTP.post(settings.get('Livechat_webhookUrl'), options);\n\t\t} catch (e) {\n\t\t\tLivechat.webhookLogger.error(`Response error on ${11 - attempts} try ->`, e);\n\t\t\t// try 10 times after 10 seconds each\n\t\t\tattempts - 1 && Livechat.webhookLogger.warn('Will try again in 10 seconds ...');\n\t\t\tsetTimeout(\n\t\t\t\tMeteor.bindEnvironment(function () {\n\t\t\t\t\tLivechat.sendRequest(postData, callback, attempts - 1);\n\t\t\t\t}),\n\t\t\t\t10000,\n\t\t\t);\n\t\t}\n\t},\n\n\tgetLivechatRoomGuestInfo(room) {\n\t\tconst visitor = LivechatVisitors.findOneById(room.v._id);\n\t\tconst agent = Users.findOneById(room.servedBy && room.servedBy._id);\n\n\t\tconst ua = new UAParser();\n\t\tua.setUA(visitor.userAgent);\n\n\t\tconst postData = {\n\t\t\t_id: room._id,\n\t\t\tlabel: room.fname || room.label, // using same field for compatibility\n\t\t\ttopic: room.topic,\n\t\t\tcreatedAt: room.ts,\n\t\t\tlastMessageAt: room.lm,\n\t\t\ttags: room.tags,\n\t\t\tcustomFields: room.livechatData,\n\t\t\tvisitor: {\n\t\t\t\t_id: visitor._id,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tname: visitor.name,\n\t\t\t\tusername: visitor.username,\n\t\t\t\temail: null,\n\t\t\t\tphone: null,\n\t\t\t\tdepartment: visitor.department,\n\t\t\t\tip: visitor.ip,\n\t\t\t\tos: ua.getOS().name && `${ua.getOS().name} ${ua.getOS().version}`,\n\t\t\t\tbrowser: ua.getBrowser().name && `${ua.getBrowser().name} ${ua.getBrowser().version}`,\n\t\t\t\tcustomFields: visitor.livechatData,\n\t\t\t},\n\t\t};\n\n\t\tif (agent) {\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\temail: null,\n\t\t\t\t...(customFields && { customFields }),\n\t\t\t};\n\n\t\t\tif (agent.emails && agent.emails.length > 0) {\n\t\t\t\tpostData.agent.email = agent.emails[0].address;\n\t\t\t}\n\t\t}\n\n\t\tif (room.crmData) {\n\t\t\tpostData.crmData = room.crmData;\n\t\t}\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n\t\t\tpostData.visitor.email = visitor.visitorEmails;\n\t\t}\n\t\tif (visitor.phone && visitor.phone.length > 0) {\n\t\t\tpostData.visitor.phone = visitor.phone;\n\t\t}\n\n\t\treturn postData;\n\t},\n\n\taddAgent(username) {\n\t\tcheck(username, String);\n\n\t\tconst user = Users.findOneByUsername(username, { fields: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'livechat:addAgent' });\n\t\t}\n\n\t\tif (addUserRoles(user._id, 'livechat-agent')) {\n\t\t\tUsers.setOperator(user._id, true);\n\t\t\tthis.setUserStatusLivechat(user._id, user.status !== 'offline' ? 'available' : 'not-available');\n\t\t\treturn user;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\taddManager(username) {\n\t\tcheck(username, String);\n\n\t\tconst user = Users.findOneByUsername(username, { fields: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'livechat:addManager',\n\t\t\t});\n\t\t}\n\n\t\tif (addUserRoles(user._id, 'livechat-manager')) {\n\t\t\treturn user;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tremoveAgent(username) {\n\t\tcheck(username, String);\n\n\t\tconst user = Users.findOneByUsername(username, { fields: { _id: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'livechat:removeAgent',\n\t\t\t});\n\t\t}\n\n\t\tconst { _id } = user;\n\n\t\tif (removeUserFromRoles(_id, 'livechat-agent')) {\n\t\t\tUsers.setOperator(_id, false);\n\t\t\tUsers.removeLivechatData(_id);\n\t\t\tthis.setUserStatusLivechat(_id, 'not-available');\n\t\t\tLivechatDepartmentAgents.removeByAgentId(_id);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tremoveManager(username) {\n\t\tcheck(username, String);\n\n\t\tconst user = Users.findOneByUsername(username, { fields: { _id: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'livechat:removeManager',\n\t\t\t});\n\t\t}\n\n\t\treturn removeUserFromRoles(user._id, 'livechat-manager');\n\t},\n\n\tremoveGuest(_id) {\n\t\tcheck(_id, String);\n\t\tconst guest = LivechatVisitors.findOneById(_id);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('error-invalid-guest', 'Invalid guest', {\n\t\t\t\tmethod: 'livechat:removeGuest',\n\t\t\t});\n\t\t}\n\n\t\tthis.cleanGuestHistory(_id);\n\t\treturn LivechatVisitors.removeById(_id);\n\t},\n\n\tsetUserStatusLivechat(userId, status) {\n\t\tconst user = Users.setLivechatStatus(userId, status);\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\t\treturn user;\n\t},\n\n\tsetUserStatusLivechatIf(userId, status, condition, fields) {\n\t\tconst user = Promise.await(UsersRaw.setLivechatStatusIf(userId, status, condition, fields));\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\t\treturn user;\n\t},\n\n\tcleanGuestHistory(_id) {\n\t\tconst guest = LivechatVisitors.findOneById(_id);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('error-invalid-guest', 'Invalid guest', {\n\t\t\t\tmethod: 'livechat:cleanGuestHistory',\n\t\t\t});\n\t\t}\n\n\t\tconst { token } = guest;\n\t\tcheck(token, String);\n\n\t\tLivechatRooms.findByVisitorToken(token).forEach((room) => {\n\t\t\tFileUpload.removeFilesByRoomId(room._id);\n\t\t\tMessages.removeByRoomId(room._id);\n\t\t});\n\n\t\tSubscriptions.removeByVisitorToken(token);\n\t\tLivechatRooms.removeByVisitorToken(token);\n\t\tLivechatInquiry.removeByVisitorToken(token);\n\t},\n\n\tsaveDepartmentAgents(_id, departmentAgents) {\n\t\tcheck(_id, String);\n\t\tcheck(departmentAgents, {\n\t\t\tupsert: Match.Maybe([\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tagentId: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t\t}),\n\t\t\t]),\n\t\t\tremove: Match.Maybe([\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tagentId: String,\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t\t}),\n\t\t\t]),\n\t\t});\n\n\t\tconst department = LivechatDepartment.findOneById(_id);\n\t\tif (!department) {\n\t\t\tthrow new Meteor.Error('error-department-not-found', 'Department not found', {\n\t\t\t\tmethod: 'livechat:saveDepartmentAgents',\n\t\t\t});\n\t\t}\n\n\t\treturn updateDepartmentAgents(_id, departmentAgents, department.enabled);\n\t},\n\n\tsaveDepartment(_id, departmentData, departmentAgents) {\n\t\tcheck(_id, Match.Maybe(String));\n\n\t\tconst defaultValidations = {\n\t\t\tenabled: Boolean,\n\t\t\tname: String,\n\t\t\tdescription: Match.Optional(String),\n\t\t\tshowOnRegistration: Boolean,\n\t\t\temail: String,\n\t\t\tshowOnOfflineForm: Boolean,\n\t\t\trequestTagBeforeClosingChat: Match.Optional(Boolean),\n\t\t\tchatClosingTags: Match.Optional([String]),\n\t\t\tfallbackForwardDepartment: Match.Optional(String),\n\t\t};\n\n\t\t// The Livechat Form department support addition/custom fields, so those fields need to be added before validating\n\t\tObject.keys(departmentData).forEach((field) => {\n\t\t\tif (!defaultValidations.hasOwnProperty(field)) {\n\t\t\t\tdefaultValidations[field] = Match.OneOf(String, Match.Integer, Boolean);\n\t\t\t}\n\t\t});\n\n\t\tcheck(departmentData, defaultValidations);\n\t\tcheck(\n\t\t\tdepartmentAgents,\n\t\t\tMatch.Maybe({\n\t\t\t\tupsert: Match.Maybe(Array),\n\t\t\t\tremove: Match.Maybe(Array),\n\t\t\t}),\n\t\t);\n\n\t\tconst { requestTagBeforeClosingChat, chatClosingTags, fallbackForwardDepartment } = departmentData;\n\t\tif (requestTagBeforeClosingChat && (!chatClosingTags || chatClosingTags.length === 0)) {\n\t\t\tthrow new Meteor.Error(\n\t\t\t\t'error-validating-department-chat-closing-tags',\n\t\t\t\t'At least one closing tag is required when the department requires tag(s) on closing conversations.',\n\t\t\t\t{ method: 'livechat:saveDepartment' },\n\t\t\t);\n\t\t}\n\n\t\tif (_id) {\n\t\t\tconst department = LivechatDepartment.findOneById(_id);\n\t\t\tif (!department) {\n\t\t\t\tthrow new Meteor.Error('error-department-not-found', 'Department not found', {\n\t\t\t\t\tmethod: 'livechat:saveDepartment',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (fallbackForwardDepartment === _id) {\n\t\t\tthrow new Meteor.Error(\n\t\t\t\t'error-fallback-department-circular',\n\t\t\t\t'Cannot save department. Circular reference between fallback department and department',\n\t\t\t);\n\t\t}\n\n\t\tconst departmentDB = LivechatDepartment.createOrUpdateDepartment(_id, departmentData);\n\t\tif (departmentDB && departmentAgents) {\n\t\t\tupdateDepartmentAgents(departmentDB._id, departmentAgents, departmentDB.enabled);\n\t\t}\n\n\t\treturn departmentDB;\n\t},\n\n\tsaveAgentInfo(_id, agentData, agentDepartments) {\n\t\tcheck(_id, Match.Maybe(String));\n\t\tcheck(agentData, Object);\n\t\tcheck(agentDepartments, [String]);\n\n\t\tconst user = Users.findOneById(_id);\n\t\tif (!user || !hasRole(_id, 'livechat-agent')) {\n\t\t\tthrow new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent', {\n\t\t\t\tmethod: 'livechat:saveAgentInfo',\n\t\t\t});\n\t\t}\n\n\t\tUsers.setLivechatData(_id, agentData);\n\t\tLivechatDepartment.saveDepartmentsByAgent(user, agentDepartments);\n\n\t\treturn true;\n\t},\n\n\tremoveDepartment(_id) {\n\t\tcheck(_id, String);\n\n\t\tconst department = LivechatDepartment.findOneById(_id, { fields: { _id: 1 } });\n\n\t\tif (!department) {\n\t\t\tthrow new Meteor.Error('department-not-found', 'Department not found', {\n\t\t\t\tmethod: 'livechat:removeDepartment',\n\t\t\t});\n\t\t}\n\t\tconst ret = LivechatDepartment.removeById(_id);\n\t\tconst agentsIds = LivechatDepartmentAgents.findByDepartmentId(_id)\n\t\t\t.fetch()\n\t\t\t.map((agent) => agent.agentId);\n\t\tLivechatDepartmentAgents.removeByDepartmentId(_id);\n\t\tLivechatDepartment.unsetFallbackDepartmentByDepartmentId(_id);\n\t\tif (ret) {\n\t\t\tMeteor.defer(() => {\n\t\t\t\tcallbacks.run('livechat.afterRemoveDepartment', { department, agentsIds });\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t},\n\n\tshowConnecting() {\n\t\tconst { showConnecting } = RoutingManager.getConfig();\n\t\treturn showConnecting;\n\t},\n\n\tsendEmail(from, to, replyTo, subject, html) {\n\t\tMailer.send({\n\t\t\tto,\n\t\t\tfrom,\n\t\t\treplyTo,\n\t\t\tsubject,\n\t\t\thtml,\n\t\t});\n\t},\n\n\tsendTranscript({ token, rid, email, subject, user }) {\n\t\tcheck(rid, String);\n\t\tcheck(email, String);\n\t\tLivechat.logger.debug(`Sending conversation transcript of room ${rid} to user with token ${token}`);\n\n\t\tconst room = LivechatRooms.findOneById(rid);\n\n\t\tconst visitor = LivechatVisitors.getVisitorByToken(token, {\n\t\t\tfields: { _id: 1, token: 1, language: 1, username: 1, name: 1 },\n\t\t});\n\t\tconst userLanguage = (visitor && visitor.language) || settings.get('Language') || 'en';\n\t\tconst timezone = getTimezone(user);\n\t\tLivechat.logger.debug(`Transcript will be sent using ${timezone} as timezone`);\n\n\t\t// allow to only user to send transcripts from their own chats\n\t\tif (!room || room.t !== 'l' || !room.v || room.v.token !== token) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tconst showAgentInfo = settings.get('Livechat_show_agent_info');\n\t\tconst ignoredMessageTypes = [\n\t\t\t'livechat_navigation_history',\n\t\t\t'livechat_transcript_history',\n\t\t\t'command',\n\t\t\t'livechat-close',\n\t\t\t'livechat-started',\n\t\t\t'livechat_video_call',\n\t\t];\n\t\tconst messages = Messages.findVisibleByRoomIdNotContainingTypes(rid, ignoredMessageTypes, {\n\t\t\tsort: { ts: 1 },\n\t\t});\n\n\t\tlet html = '<div> <hr>';\n\t\tmessages.forEach((message) => {\n\t\t\tlet author;\n\t\t\tif (message.u._id === visitor._id) {\n\t\t\t\tauthor = TAPi18n.__('You', { lng: userLanguage });\n\t\t\t} else {\n\t\t\t\tauthor = showAgentInfo ? message.u.name || message.u.username : TAPi18n.__('Agent', { lng: userLanguage });\n\t\t\t}\n\n\t\t\tconst datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n\t\t\tconst singleMessage = `\n\t\t\t\t<p><strong>${author}</strong>  <em>${datetime}</em></p>\n\t\t\t\t<p>${message.msg}</p>\n\t\t\t`;\n\t\t\thtml += singleMessage;\n\t\t});\n\n\t\thtml = `${html}</div>`;\n\n\t\tlet fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n\t\tif (fromEmail) {\n\t\t\tfromEmail = fromEmail[0];\n\t\t} else {\n\t\t\tfromEmail = settings.get('From_Email');\n\t\t}\n\n\t\tconst mailSubject = subject || TAPi18n.__('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\n\t\tthis.sendEmail(fromEmail, email, fromEmail, mailSubject, html);\n\n\t\tMeteor.defer(() => {\n\t\t\tcallbacks.run('livechat.sendTranscript', messages, email);\n\t\t});\n\n\t\tlet type = 'user';\n\t\tif (!user) {\n\t\t\tuser = Users.findOneById('rocket.cat', { fields: { _id: 1, username: 1, name: 1 } });\n\t\t\ttype = 'visitor';\n\t\t}\n\n\t\tMessages.createTranscriptHistoryWithRoomIdMessageAndUser(room._id, '', user, {\n\t\t\trequestData: { type, visitor, user },\n\t\t});\n\t\treturn true;\n\t},\n\n\tgetRoomMessages({ rid }) {\n\t\tcheck(rid, String);\n\n\t\tconst isLivechat = Promise.await(Rooms.findByTypeInIds('l', [rid])).count();\n\n\t\tif (!isLivechat) {\n\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t}\n\n\t\tconst ignoredMessageTypes = [\n\t\t\t'livechat_navigation_history',\n\t\t\t'livechat_transcript_history',\n\t\t\t'command',\n\t\t\t'livechat-close',\n\t\t\t'livechat-started',\n\t\t\t'livechat_video_call',\n\t\t];\n\n\t\treturn Messages.findVisibleByRoomIdNotContainingTypes(rid, ignoredMessageTypes, {\n\t\t\tsort: { ts: 1 },\n\t\t}).fetch();\n\t},\n\n\trequestTranscript({ rid, email, subject, user }) {\n\t\tcheck(rid, String);\n\t\tcheck(email, String);\n\t\tcheck(subject, String);\n\t\tcheck(\n\t\t\tuser,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tutcOffset: Number,\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t}),\n\t\t);\n\n\t\tconst room = LivechatRooms.findOneById(rid, { _id: 1, open: 1, transcriptRequest: 1 });\n\n\t\tif (!room || !room.open) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tif (room.transcriptRequest) {\n\t\t\tthrow new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n\t\t}\n\n\t\tconst { _id, username, name, utcOffset } = user;\n\t\tconst transcriptRequest = {\n\t\t\trequestedAt: new Date(),\n\t\t\trequestedBy: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\tname,\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t\temail,\n\t\t\tsubject,\n\t\t};\n\n\t\tLivechatRooms.requestTranscriptByRoomId(rid, transcriptRequest);\n\t\treturn true;\n\t},\n\n\tnotifyGuestStatusChanged(token, status) {\n\t\tLivechatInquiry.updateVisitorStatus(token, status);\n\t\tLivechatRooms.updateVisitorStatus(token, status);\n\t},\n\n\tsendOfflineMessage(data = {}) {\n\t\tif (!settings.get('Livechat_display_offline_form')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { message, name, email, department, host } = data;\n\t\tconst emailMessage = `${message}`.replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n\n\t\tlet html = '<h1>New livechat message</h1>';\n\t\tif (host && host !== '') {\n\t\t\thtml = html.concat(`<p><strong>Sent from:</strong><a href='${host}'> ${host}</a></p>`);\n\t\t}\n\t\thtml = html.concat(`\n\t\t\t<p><strong>Visitor name:</strong> ${name}</p>\n\t\t\t<p><strong>Visitor email:</strong> ${email}</p>\n\t\t\t<p><strong>Message:</strong><br>${emailMessage}</p>`);\n\n\t\tlet fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n\t\tif (fromEmail) {\n\t\t\tfromEmail = fromEmail[0];\n\t\t} else {\n\t\t\tfromEmail = settings.get('From_Email');\n\t\t}\n\n\t\tif (settings.get('Livechat_validate_offline_email')) {\n\t\t\tconst emailDomain = email.substr(email.lastIndexOf('@') + 1);\n\n\t\t\ttry {\n\t\t\t\tdnsResolveMx(emailDomain);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-email-address', 'Invalid email address', {\n\t\t\t\t\tmethod: 'livechat:sendOfflineMessage',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet emailTo = settings.get('Livechat_offline_email');\n\t\tif (department && department !== '') {\n\t\t\tconst dep = LivechatDepartment.findOneByIdOrName(department);\n\t\t\temailTo = dep.email || emailTo;\n\t\t}\n\n\t\tconst from = `${name} - ${email} <${fromEmail}>`;\n\t\tconst replyTo = `${name} <${email}>`;\n\t\tconst subject = `Livechat offline message from ${name}: ${`${emailMessage}`.substring(0, 20)}`;\n\t\tthis.sendEmail(from, emailTo, replyTo, subject, html);\n\n\t\tMeteor.defer(() => {\n\t\t\tcallbacks.run('livechat.offlineMessage', data);\n\t\t});\n\n\t\treturn true;\n\t},\n\n\tnotifyAgentStatusChanged(userId, status) {\n\t\tcallbacks.runAsync('livechat.agentStatusChanged', { userId, status });\n\t\tif (!settings.get('Livechat_show_agent_info')) {\n\t\t\treturn;\n\t\t}\n\n\t\tLivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tnotifications.streamLivechatRoom.emit(room._id, {\n\t\t\t\ttype: 'agentStatus',\n\t\t\t\tstatus,\n\t\t\t});\n\t\t});\n\t},\n\n\tallowAgentChangeServiceStatus(statusLivechat, agentId) {\n\t\tif (statusLivechat !== 'available') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn Promise.await(businessHourManager.allowAgentChangeServiceStatus(agentId));\n\t},\n\n\tnotifyRoomVisitorChange(roomId, visitor) {\n\t\tnotifications.streamLivechatRoom.emit(roomId, {\n\t\t\ttype: 'visitorData',\n\t\t\tvisitor,\n\t\t});\n\t},\n\n\tchangeRoomVisitor(userId, roomId, visitor) {\n\t\tconst user = Promise.await(Users.findOneById(userId));\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-not-found');\n\t\t}\n\n\t\tif (!hasPermission(userId, 'change-livechat-room-visitor')) {\n\t\t\tthrow new Error('error-not-authorized');\n\t\t}\n\n\t\tconst room = Promise.await(LivechatRooms.findOneById(roomId, { _id: 1, t: 1 }));\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('invalid-room');\n\t\t}\n\n\t\tif (!canAccessRoom(room, user)) {\n\t\t\tthrow new Error('error-not-allowed');\n\t\t}\n\n\t\tLivechatRooms.changeVisitorByRoomId(room._id, visitor);\n\n\t\tLivechat.notifyRoomVisitorChange(room._id, visitor);\n\n\t\treturn LivechatRooms.findOneById(roomId);\n\t},\n\tupdateLastChat(contactId, lastChat) {\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\tlastChat,\n\t\t\t},\n\t\t};\n\t\tLivechatVisitors.updateById(contactId, updateUser);\n\t},\n\tupdateCallStatus(callId, rid, status, user) {\n\t\tRooms.setCallStatus(rid, status);\n\t\tif (status === 'ended' || status === 'declined') {\n\t\t\treturn updateMessage({ _id: callId, msg: status, actionLinks: [], webRtcCallEndTs: new Date() }, user);\n\t\t}\n\t},\n};\n\nsettings.watch('Livechat_history_monitor_type', (value) => {\n\tLivechat.historyMonitorType = value;\n});\n"]},"sourceType":"module","hash":"ec38edf5ef7da509575fddba86c7e1c8d7c23f4a"}
