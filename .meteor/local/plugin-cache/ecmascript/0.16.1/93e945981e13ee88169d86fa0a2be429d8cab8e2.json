{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateMessage.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/updateMessage.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateMessage.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/functions/updateMessage.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/updateMessage.js"}},"code":"module.export({\n  updateMessage: () => updateMessage\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet parser;\nmodule.link(\"@rocket.chat/message-parser\", {\n  parser(v) {\n    parser = v;\n  }\n\n}, 1);\nlet Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 5);\nlet Apps;\nmodule.link(\"../../../apps/server\", {\n  Apps(v) {\n    Apps = v;\n  }\n\n}, 6);\nlet parseUrlsInMessage;\nmodule.link(\"./parseUrlsInMessage\", {\n  parseUrlsInMessage(v) {\n    parseUrlsInMessage = v;\n  }\n\n}, 7);\nconst {\n  DISABLE_MESSAGE_PARSER = 'false'\n} = process.env;\n\nconst updateMessage = function (message, user, originalMessage) {\n  if (!originalMessage) {\n    originalMessage = Messages.findOneById(message._id);\n  } // For the Rocket.Chat Apps :)\n\n\n  if (message && Apps && Apps.isLoaded()) {\n    const appMessage = Object.assign({}, originalMessage, message);\n    const prevent = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));\n\n    if (prevent) {\n      throw new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n    }\n\n    let result;\n    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));\n    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));\n\n    if (typeof result === 'object') {\n      message = Object.assign(appMessage, result);\n    }\n  } // If we keep history of edits, insert a new message to store history information\n\n\n  if (settings.get('Message_KeepHistory')) {\n    Messages.cloneAndSaveAsHistoryById(message._id, user);\n  }\n\n  message.editedAt = new Date();\n  message.editedBy = {\n    _id: user._id,\n    username: user.username\n  };\n  parseUrlsInMessage(message);\n  message = callbacks.run('beforeSaveMessage', message);\n\n  try {\n    if (message.msg && DISABLE_MESSAGE_PARSER !== 'true') {\n      message.md = parser(message.msg);\n    }\n  } catch (e) {\n    SystemLogger.error(e); // errors logged while the parser is at experimental stage\n  }\n\n  const tempid = message._id;\n  delete message._id;\n  Messages.update({\n    _id: tempid\n  }, {\n    $set: message\n  });\n  const room = Rooms.findOneById(message.rid);\n\n  if (Apps && Apps.isLoaded()) {\n    // This returns a promise, but it won't mutate anything about the message\n    // so, we don't really care if it is successful or fails\n    Apps.getBridges().getListenerBridge().messageEvent('IPostMessageUpdated', message);\n  }\n\n  Meteor.defer(function () {\n    callbacks.run('afterSaveMessage', Messages.findOneById(tempid), room, user._id);\n  });\n};","map":{"version":3,"sources":["app/lib/server/functions/updateMessage.js"],"names":["module","export","updateMessage","Meteor","link","v","parser","Messages","Rooms","settings","callbacks","SystemLogger","Apps","parseUrlsInMessage","DISABLE_MESSAGE_PARSER","process","env","message","user","originalMessage","findOneById","_id","isLoaded","appMessage","Object","assign","prevent","Promise","await","getBridges","getListenerBridge","messageEvent","Error","result","get","cloneAndSaveAsHistoryById","editedAt","Date","editedBy","username","run","msg","md","e","error","tempid","update","$set","room","rid","defer"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { parser } from '@rocket.chat/message-parser';\n\nimport { Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { Apps } from '../../../apps/server';\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\n\nconst { DISABLE_MESSAGE_PARSER = 'false' } = process.env;\n\nexport const updateMessage = function (message, user, originalMessage) {\n\tif (!originalMessage) {\n\t\toriginalMessage = Messages.findOneById(message._id);\n\t}\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps && Apps.isLoaded()) {\n\t\tconst appMessage = Object.assign({}, originalMessage, message);\n\n\t\tconst prevent = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result;\n\t\tresult = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));\n\t\tresult = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));\n\n\t\tif (typeof result === 'object') {\n\t\t\tmessage = Object.assign(appMessage, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tMessages.cloneAndSaveAsHistoryById(message._id, user);\n\t}\n\n\tmessage.editedAt = new Date();\n\tmessage.editedBy = {\n\t\t_id: user._id,\n\t\tusername: user.username,\n\t};\n\n\tparseUrlsInMessage(message);\n\n\tmessage = callbacks.run('beforeSaveMessage', message);\n\n\ttry {\n\t\tif (message.msg && DISABLE_MESSAGE_PARSER !== 'true') {\n\t\t\tmessage.md = parser(message.msg);\n\t\t}\n\t} catch (e) {\n\t\tSystemLogger.error(e); // errors logged while the parser is at experimental stage\n\t}\n\n\tconst tempid = message._id;\n\tdelete message._id;\n\n\tMessages.update({ _id: tempid }, { $set: message });\n\n\tconst room = Rooms.findOneById(message.rid);\n\n\tif (Apps && Apps.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tApps.getBridges().getListenerBridge().messageEvent('IPostMessageUpdated', message);\n\t}\n\n\tMeteor.defer(function () {\n\t\tcallbacks.run('afterSaveMessage', Messages.findOneById(tempid), room, user._id);\n\t});\n};\n"]},"sourceType":"module","hash":"93e945981e13ee88169d86fa0a2be429d8cab8e2"}
