{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/startup/rateLimiter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/startup/rateLimiter.js","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/startup/rateLimiter.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/app/lib/server/startup/rateLimiter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/startup/rateLimiter.js"}},"code":"let _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet DDPRateLimiter;\nmodule.link(\"meteor/ddp-rate-limiter\", {\n  DDPRateLimiter(v) {\n    DDPRateLimiter = v;\n  }\n\n}, 2);\nlet RateLimiter;\nmodule.link(\"meteor/rate-limit\", {\n  RateLimiter(v) {\n    RateLimiter = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet metrics;\nmodule.link(\"../../../metrics\", {\n  metrics(v) {\n    metrics = v;\n  }\n\n}, 5);\nlet Logger;\nmodule.link(\"../../../logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 6);\nconst logger = new Logger('RateLimiter'); // Get initial set of names already registered for rules\n\nconst names = new Set(Object.values(DDPRateLimiter.printRules()).map(rule => rule._matchers).filter(match => typeof match.name === 'string').map(match => match.name)); // Override the addRule to save new names added after this point\n\nconst {\n  addRule\n} = DDPRateLimiter;\n\nDDPRateLimiter.addRule = (matcher, calls, time, callback) => {\n  if (matcher && typeof matcher.name === 'string') {\n    names.add(matcher.name);\n  }\n\n  return addRule.call(DDPRateLimiter, matcher, calls, time, callback);\n};\n\nconst {\n  _increment\n} = DDPRateLimiter;\n\nDDPRateLimiter._increment = function (input) {\n  const session = Meteor.server.sessions.get(input.connectionId);\n  input.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n  return _increment.call(DDPRateLimiter, input);\n}; // Need to override the meteor's code duo to a problem with the callback reply\n// being shared among all matchs\n\n\nRateLimiter.prototype.check = function (input) {\n  // ==== BEGIN OVERRIDE ====\n  const session = Meteor.server.sessions.get(input.connectionId);\n  input.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true; // ==== END OVERRIDE ====\n\n  const self = this;\n  const reply = {\n    allowed: true,\n    timeToReset: 0,\n    numInvocationsLeft: Infinity\n  };\n\n  const matchedRules = self._findAllMatchingRules(input);\n\n  _.each(matchedRules, function (rule) {\n    // ==== BEGIN OVERRIDE ====\n    const callbackReply = {\n      allowed: true,\n      timeToReset: 0,\n      numInvocationsLeft: Infinity\n    }; // ==== END OVERRIDE ====\n\n    const ruleResult = rule.apply(input);\n    let numInvocations = rule.counters[ruleResult.key];\n\n    if (ruleResult.timeToNextReset < 0) {\n      // Reset all the counters since the rule has reset\n      rule.resetCounter();\n      ruleResult.timeSinceLastReset = new Date().getTime() - rule._lastResetTime;\n      ruleResult.timeToNextReset = rule.options.intervalTime;\n      numInvocations = 0;\n    }\n\n    if (numInvocations > rule.options.numRequestsAllowed) {\n      // Only update timeToReset if the new time would be longer than the\n      // previously set time. This is to ensure that if this input triggers\n      // multiple rules, we return the longest period of time until they can\n      // successfully make another call\n      if (reply.timeToReset < ruleResult.timeToNextReset) {\n        reply.timeToReset = ruleResult.timeToNextReset;\n      }\n\n      reply.allowed = false;\n      reply.numInvocationsLeft = 0; // ==== BEGIN OVERRIDE ====\n\n      callbackReply.timeToReset = ruleResult.timeToNextReset;\n      callbackReply.allowed = false;\n      callbackReply.numInvocationsLeft = 0;\n\n      rule._executeCallback(callbackReply, input); // ==== END OVERRIDE ====\n\n    } else {\n      // If this is an allowed attempt and we haven't failed on any of the\n      // other rules that match, update the reply field.\n      if (rule.options.numRequestsAllowed - numInvocations < reply.numInvocationsLeft && reply.allowed) {\n        reply.timeToReset = ruleResult.timeToNextReset;\n        reply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n      } // ==== BEGIN OVERRIDE ====\n\n\n      callbackReply.timeToReset = ruleResult.timeToNextReset;\n      callbackReply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n\n      rule._executeCallback(callbackReply, input); // ==== END OVERRIDE ====\n\n    }\n  });\n\n  return reply;\n};\n\nconst checkNameNonStream = name => name && !names.has(name) && !name.startsWith('stream-');\n\nconst checkNameForStream = name => name && !names.has(name) && name.startsWith('stream-');\n\nconst ruleIds = {};\n\nconst callback = (msg, name) => (reply, input) => {\n  if (reply.allowed === false) {\n    logger.info({\n      msg,\n      reply,\n      input\n    });\n    metrics.ddpRateLimitExceeded.inc({\n      limit_name: name,\n      user_id: input.userId,\n      client_address: input.clientAddress,\n      type: input.type,\n      name: input.name,\n      connection_id: input.connectionId\n    }); // } else {\n    // \tconsole.log('DDP RATE LIMIT:', message);\n    // \tconsole.log(JSON.stringify({ ...reply, ...input }, null, 2));\n  }\n};\n\nconst messages = {\n  IP: 'address',\n  User: 'userId',\n  Connection: 'connectionId',\n  User_By_Method: 'userId per method',\n  Connection_By_Method: 'connectionId per method'\n};\nconst reconfigureLimit = Meteor.bindEnvironment(function (name, rules) {\n  let factor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (ruleIds[name + factor]) {\n    DDPRateLimiter.removeRule(ruleIds[name + factor]);\n  }\n\n  if (!settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Enabled\"))) {\n    return;\n  }\n\n  ruleIds[name + factor] = addRule(rules, settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Requests_Allowed\")) * factor, settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Interval_Time\")) * factor, callback(\"limit by \".concat(messages[name]), name));\n});\n\nconst configIP = _.debounce(() => {\n  reconfigureLimit('IP', {\n    broadcastAuth: false,\n    clientAddress: clientAddress => clientAddress !== '127.0.0.1'\n  });\n}, 1000);\n\nconst configUser = _.debounce(() => {\n  reconfigureLimit('User', {\n    broadcastAuth: false,\n    userId: userId => userId != null\n  });\n}, 1000);\n\nconst configConnection = _.debounce(() => {\n  reconfigureLimit('Connection', {\n    broadcastAuth: false,\n    connectionId: () => true\n  });\n}, 1000);\n\nconst configUserByMethod = _.debounce(() => {\n  reconfigureLimit('User_By_Method', {\n    broadcastAuth: false,\n    type: () => true,\n    name: checkNameNonStream,\n    userId: userId => userId != null\n  });\n  reconfigureLimit('User_By_Method', {\n    broadcastAuth: false,\n    type: () => true,\n    name: checkNameForStream,\n    userId: userId => userId != null\n  }, 4);\n}, 1000);\n\nconst configConnectionByMethod = _.debounce(() => {\n  reconfigureLimit('Connection_By_Method', {\n    broadcastAuth: false,\n    type: () => true,\n    name: checkNameNonStream,\n    connectionId: () => true\n  });\n  reconfigureLimit('Connection_By_Method', {\n    broadcastAuth: false,\n    type: () => true,\n    name: checkNameForStream,\n    connectionId: () => true\n  }, 4);\n}, 1000);\n\nif (!process.env.TEST_MODE) {\n  settings.watchByRegex(/^DDP_Rate_Limit_IP_.+/, configIP);\n  settings.watchByRegex(/^DDP_Rate_Limit_User_[^B].+/, configUser);\n  settings.watchByRegex(/^DDP_Rate_Limit_Connection_[^B].+/, configConnection);\n  settings.watchByRegex(/^DDP_Rate_Limit_User_By_Method_.+/, configUserByMethod);\n  settings.watchByRegex(/^DDP_Rate_Limit_Connection_By_Method_.+/, configConnectionByMethod);\n}","map":{"version":3,"sources":["app/lib/server/startup/rateLimiter.js"],"names":["_","module","link","default","v","Meteor","DDPRateLimiter","RateLimiter","settings","metrics","Logger","logger","names","Set","Object","values","printRules","map","rule","_matchers","filter","match","name","addRule","matcher","calls","time","callback","add","call","_increment","input","session","server","sessions","get","connectionId","broadcastAuth","connectionHandle","prototype","check","self","reply","allowed","timeToReset","numInvocationsLeft","Infinity","matchedRules","_findAllMatchingRules","each","callbackReply","ruleResult","apply","numInvocations","counters","key","timeToNextReset","resetCounter","timeSinceLastReset","Date","getTime","_lastResetTime","options","intervalTime","numRequestsAllowed","_executeCallback","checkNameNonStream","has","startsWith","checkNameForStream","ruleIds","msg","info","ddpRateLimitExceeded","inc","limit_name","user_id","userId","client_address","clientAddress","type","connection_id","messages","IP","User","Connection","User_By_Method","Connection_By_Method","reconfigureLimit","bindEnvironment","rules","factor","removeRule","configIP","debounce","configUser","configConnection","configUserByMethod","configConnectionByMethod","process","env","TEST_MODE","watchByRegex"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { RateLimiter } from 'meteor/rate-limit';\n\nimport { settings } from '../../../settings/server';\nimport { metrics } from '../../../metrics';\nimport { Logger } from '../../../logger';\n\nconst logger = new Logger('RateLimiter');\n\n// Get initial set of names already registered for rules\nconst names = new Set(\n\tObject.values(DDPRateLimiter.printRules())\n\t\t.map((rule) => rule._matchers)\n\t\t.filter((match) => typeof match.name === 'string')\n\t\t.map((match) => match.name),\n);\n\n// Override the addRule to save new names added after this point\nconst { addRule } = DDPRateLimiter;\nDDPRateLimiter.addRule = (matcher, calls, time, callback) => {\n\tif (matcher && typeof matcher.name === 'string') {\n\t\tnames.add(matcher.name);\n\t}\n\treturn addRule.call(DDPRateLimiter, matcher, calls, time, callback);\n};\n\nconst { _increment } = DDPRateLimiter;\nDDPRateLimiter._increment = function (input) {\n\tconst session = Meteor.server.sessions.get(input.connectionId);\n\tinput.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n\n\treturn _increment.call(DDPRateLimiter, input);\n};\n\n// Need to override the meteor's code duo to a problem with the callback reply\n// being shared among all matchs\nRateLimiter.prototype.check = function (input) {\n\t// ==== BEGIN OVERRIDE ====\n\tconst session = Meteor.server.sessions.get(input.connectionId);\n\tinput.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n\t// ==== END OVERRIDE ====\n\n\tconst self = this;\n\tconst reply = {\n\t\tallowed: true,\n\t\ttimeToReset: 0,\n\t\tnumInvocationsLeft: Infinity,\n\t};\n\n\tconst matchedRules = self._findAllMatchingRules(input);\n\t_.each(matchedRules, function (rule) {\n\t\t// ==== BEGIN OVERRIDE ====\n\t\tconst callbackReply = {\n\t\t\tallowed: true,\n\t\t\ttimeToReset: 0,\n\t\t\tnumInvocationsLeft: Infinity,\n\t\t};\n\t\t// ==== END OVERRIDE ====\n\n\t\tconst ruleResult = rule.apply(input);\n\t\tlet numInvocations = rule.counters[ruleResult.key];\n\n\t\tif (ruleResult.timeToNextReset < 0) {\n\t\t\t// Reset all the counters since the rule has reset\n\t\t\trule.resetCounter();\n\t\t\truleResult.timeSinceLastReset = new Date().getTime() - rule._lastResetTime;\n\t\t\truleResult.timeToNextReset = rule.options.intervalTime;\n\t\t\tnumInvocations = 0;\n\t\t}\n\n\t\tif (numInvocations > rule.options.numRequestsAllowed) {\n\t\t\t// Only update timeToReset if the new time would be longer than the\n\t\t\t// previously set time. This is to ensure that if this input triggers\n\t\t\t// multiple rules, we return the longest period of time until they can\n\t\t\t// successfully make another call\n\t\t\tif (reply.timeToReset < ruleResult.timeToNextReset) {\n\t\t\t\treply.timeToReset = ruleResult.timeToNextReset;\n\t\t\t}\n\t\t\treply.allowed = false;\n\t\t\treply.numInvocationsLeft = 0;\n\n\t\t\t// ==== BEGIN OVERRIDE ====\n\t\t\tcallbackReply.timeToReset = ruleResult.timeToNextReset;\n\t\t\tcallbackReply.allowed = false;\n\t\t\tcallbackReply.numInvocationsLeft = 0;\n\t\t\trule._executeCallback(callbackReply, input);\n\t\t\t// ==== END OVERRIDE ====\n\t\t} else {\n\t\t\t// If this is an allowed attempt and we haven't failed on any of the\n\t\t\t// other rules that match, update the reply field.\n\t\t\tif (rule.options.numRequestsAllowed - numInvocations < reply.numInvocationsLeft && reply.allowed) {\n\t\t\t\treply.timeToReset = ruleResult.timeToNextReset;\n\t\t\t\treply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n\t\t\t}\n\n\t\t\t// ==== BEGIN OVERRIDE ====\n\t\t\tcallbackReply.timeToReset = ruleResult.timeToNextReset;\n\t\t\tcallbackReply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n\t\t\trule._executeCallback(callbackReply, input);\n\t\t\t// ==== END OVERRIDE ====\n\t\t}\n\t});\n\treturn reply;\n};\n\nconst checkNameNonStream = (name) => name && !names.has(name) && !name.startsWith('stream-');\nconst checkNameForStream = (name) => name && !names.has(name) && name.startsWith('stream-');\n\nconst ruleIds = {};\n\nconst callback = (msg, name) => (reply, input) => {\n\tif (reply.allowed === false) {\n\t\tlogger.info({ msg, reply, input });\n\t\tmetrics.ddpRateLimitExceeded.inc({\n\t\t\tlimit_name: name,\n\t\t\tuser_id: input.userId,\n\t\t\tclient_address: input.clientAddress,\n\t\t\ttype: input.type,\n\t\t\tname: input.name,\n\t\t\tconnection_id: input.connectionId,\n\t\t});\n\t\t// } else {\n\t\t// \tconsole.log('DDP RATE LIMIT:', message);\n\t\t// \tconsole.log(JSON.stringify({ ...reply, ...input }, null, 2));\n\t}\n};\n\nconst messages = {\n\tIP: 'address',\n\tUser: 'userId',\n\tConnection: 'connectionId',\n\tUser_By_Method: 'userId per method',\n\tConnection_By_Method: 'connectionId per method',\n};\n\nconst reconfigureLimit = Meteor.bindEnvironment((name, rules, factor = 1) => {\n\tif (ruleIds[name + factor]) {\n\t\tDDPRateLimiter.removeRule(ruleIds[name + factor]);\n\t}\n\n\tif (!settings.get(`DDP_Rate_Limit_${name}_Enabled`)) {\n\t\treturn;\n\t}\n\n\truleIds[name + factor] = addRule(\n\t\trules,\n\t\tsettings.get(`DDP_Rate_Limit_${name}_Requests_Allowed`) * factor,\n\t\tsettings.get(`DDP_Rate_Limit_${name}_Interval_Time`) * factor,\n\t\tcallback(`limit by ${messages[name]}`, name),\n\t);\n});\n\nconst configIP = _.debounce(() => {\n\treconfigureLimit('IP', {\n\t\tbroadcastAuth: false,\n\t\tclientAddress: (clientAddress) => clientAddress !== '127.0.0.1',\n\t});\n}, 1000);\n\nconst configUser = _.debounce(() => {\n\treconfigureLimit('User', {\n\t\tbroadcastAuth: false,\n\t\tuserId: (userId) => userId != null,\n\t});\n}, 1000);\n\nconst configConnection = _.debounce(() => {\n\treconfigureLimit('Connection', {\n\t\tbroadcastAuth: false,\n\t\tconnectionId: () => true,\n\t});\n}, 1000);\n\nconst configUserByMethod = _.debounce(() => {\n\treconfigureLimit('User_By_Method', {\n\t\tbroadcastAuth: false,\n\t\ttype: () => true,\n\t\tname: checkNameNonStream,\n\t\tuserId: (userId) => userId != null,\n\t});\n\treconfigureLimit(\n\t\t'User_By_Method',\n\t\t{\n\t\t\tbroadcastAuth: false,\n\t\t\ttype: () => true,\n\t\t\tname: checkNameForStream,\n\t\t\tuserId: (userId) => userId != null,\n\t\t},\n\t\t4,\n\t);\n}, 1000);\n\nconst configConnectionByMethod = _.debounce(() => {\n\treconfigureLimit('Connection_By_Method', {\n\t\tbroadcastAuth: false,\n\t\ttype: () => true,\n\t\tname: checkNameNonStream,\n\t\tconnectionId: () => true,\n\t});\n\treconfigureLimit(\n\t\t'Connection_By_Method',\n\t\t{\n\t\t\tbroadcastAuth: false,\n\t\t\ttype: () => true,\n\t\t\tname: checkNameForStream,\n\t\t\tconnectionId: () => true,\n\t\t},\n\t\t4,\n\t);\n}, 1000);\n\nif (!process.env.TEST_MODE) {\n\tsettings.watchByRegex(/^DDP_Rate_Limit_IP_.+/, configIP);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_User_[^B].+/, configUser);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_Connection_[^B].+/, configConnection);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_User_By_Method_.+/, configUserByMethod);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_Connection_By_Method_.+/, configConnectionByMethod);\n}\n"]},"sourceType":"module","hash":"57897c6f7444c9961ea0d13a06ab0e0c53de6000"}
