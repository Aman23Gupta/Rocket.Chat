{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nmodule.export({\n  TAPi18nServer: () => TAPi18nServer\n});\nlet TAPi18nBase;\nmodule.link(\"./tap_i18n-common\", {\n  TAPi18nBase(v) {\n    TAPi18nBase = v;\n  }\n\n}, 0);\nlet globals;\nmodule.link(\"./globals\", {\n  globals(v) {\n    globals = v;\n  }\n\n}, 1);\nvar indexOf = [].indexOf;\n\nvar TAPi18nServer = function () {\n  class TAPi18nServer extends TAPi18nBase {\n    _registerServerTranslator(lang_tag, package_name) {\n      if (this._enabled()) {\n        if (!(lang_tag in this.server_translators)) {\n          this.server_translators[lang_tag] = this._getSpecificLangTranslator(lang_tag);\n        } // fallback language is integrated, and isn't part of @translations\n\n\n        if (lang_tag !== this._fallback_language) {\n          this.addResourceBundle(lang_tag, package_name, this.translations[lang_tag][package_name]);\n        }\n      }\n\n      if (!(this._fallback_language in this.server_translators)) {\n        return this.server_translators[this._fallback_language] = this._getSpecificLangTranslator(this._fallback_language);\n      }\n    }\n\n    _registerAllServerTranslators() {\n      var i, lang_tag, len, package_name, ref, results;\n      ref = this._getProjectLanguages();\n      results = [];\n\n      for (i = 0, len = ref.length; i < len; i++) {\n        lang_tag = ref[i];\n        results.push(function () {\n          var results1;\n          results1 = [];\n\n          for (package_name in this.translations[lang_tag]) {\n            results1.push(this._registerServerTranslator(lang_tag, package_name));\n          }\n\n          return results1;\n        }.call(this));\n      }\n\n      return results;\n    }\n\n    _getPackageI18nextProxy(package_name) {\n      // A proxy to TAPi18next.t where the namespace is preset to the package's\n      return (key, options, lang_tag = null) => {\n        if (lang_tag == null) {\n          // translate to fallback_language\n          return this.server_translators[this._fallback_language](`${this._getPackageDomain(package_name)}:${key}`, options);\n        } else if (!(lang_tag in this.server_translators)) {\n          console.log(`Warning: language ${lang_tag} is not supported in this project, fallback language (${this._fallback_language})`);\n          return this.server_translators[this._fallback_language](`${this._getPackageDomain(package_name)}:${key}`, options);\n        } else {\n          return this.server_translators[lang_tag](`${this._getPackageDomain(package_name)}:${key}`, options);\n        }\n      };\n    }\n\n    _registerHTTPMethod() {\n      var methods, self;\n      self = this;\n      methods = {};\n\n      if (!self._enabled()) {\n        throw new Meteor.Error(500, \"tap-i18n has to be enabled in order to register the HTTP method\");\n      }\n\n      JsonRoutes.add('get', `${self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs`, function (req, res, next) {\n        var i, lang_tag, langs, language_translations, len, output;\n\n        if (!RegExp(`^((${globals.langauges_tags_regex},)*${globals.langauges_tags_regex}|all).json$`).test(req.params.langs)) {\n          return JsonRoutes.sendResult(res, {\n            code: 401\n          });\n        }\n\n        langs = req.params.langs.replace(\".json\", \"\");\n\n        if (langs === \"all\") {\n          output = self.translations;\n        } else {\n          output = {};\n          langs = langs.split(\",\");\n\n          for (i = 0, len = langs.length; i < len; i++) {\n            lang_tag = langs[i];\n\n            if (indexOf.call(self._getProjectLanguages(), lang_tag) >= 0 && lang_tag !== self._fallback_language) {\n              // fallback language is integrated to the bundle\n              language_translations = self.translations[lang_tag];\n\n              if (language_translations != null) {\n                output[lang_tag] = language_translations;\n              }\n            }\n          }\n        }\n\n        return JsonRoutes.sendResult(res, {\n          data: output\n        });\n      });\n      return JsonRoutes.add('get', `${self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang`, function (req, res, next) {\n        var lang_tag, language_translations;\n\n        if (!RegExp(`^${globals.langauges_tags_regex}.json$`).test(req.params.lang)) {\n          return JsonRoutes.sendResult(res, {\n            code: 401\n          });\n        }\n\n        lang_tag = req.params.lang.replace(\".json\", \"\");\n\n        if (indexOf.call(self._getProjectLanguages(), lang_tag) < 0 || lang_tag === self._fallback_language) {\n          // fallback language is integrated to the bundle\n          return JsonRoutes.sendResult(res, {\n            code: 404 // not found\n\n          });\n        }\n\n        language_translations = self.translations[lang_tag]; // returning {} if lang_tag is not in translations allows the project\n        // developer to force a language supporte with project-tap.i18n's\n        // supported_languages property, even if that language has no lang\n        // files.\n\n        return JsonRoutes.sendResult(res, {\n          data: language_translations != null ? language_translations : {}\n        });\n      });\n    }\n\n    _onceEnabled() {\n      return this._registerAllServerTranslators();\n    }\n\n  }\n\n  ;\n  TAPi18nServer.prototype.server_translators = null;\n  return TAPi18nServer;\n}.call(this);","sourceMap":{"version":3,"sources":["/packages/rocketchat_tap-i18n/lib/tap_i18n/tap_i18n-server.coffee","/lib/tap_i18n/tap_i18n-server.coffee"],"names":["module","export","TAPi18nServer","TAPi18nBase","link","v","globals","indexOf","_registerServerTranslator","lang_tag","package_name","_enabled","server_translators","_getSpecificLangTranslator","_fallback_language","addResourceBundle","translations","_registerAllServerTranslators","i","len","ref","results","_getProjectLanguages","length","push","results1","call","_getPackageI18nextProxy","key","options","_getPackageDomain","console","log","_registerHTTPMethod","methods","self","Meteor","Error","JsonRoutes","add","conf","i18n_files_route","replace","req","res","next","langs","language_translations","output","RegExp","langauges_tags_regex","test","params","sendResult","code","split","data","lang","_onceEnabled","prototype"],"mappings":"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","file":"packages/rocketchat:tap-i18n/lib/tap_i18n/tap_i18n-server.coffee.map","sourcesContent":["import { TAPi18nBase } from './tap_i18n-common';\nimport { globals } from './globals';\n\nexport class TAPi18nServer extends TAPi18nBase\n  server_translators: null\n\n  _registerServerTranslator: (lang_tag, package_name) ->\n    if @_enabled()\n      if not(lang_tag of @server_translators)\n        @server_translators[lang_tag] = @_getSpecificLangTranslator(lang_tag)\n\n      # fallback language is integrated, and isn't part of @translations\n      if lang_tag != @_fallback_language\n        @addResourceBundle(lang_tag, package_name, @translations[lang_tag][package_name])\n\n    if not(@_fallback_language of @server_translators)\n      @server_translators[@_fallback_language] = @_getSpecificLangTranslator(@_fallback_language)\n\n  _registerAllServerTranslators: () ->\n    for lang_tag in @_getProjectLanguages()\n      for package_name of @translations[lang_tag]\n        @_registerServerTranslator(lang_tag, package_name)\n\n  _getPackageI18nextProxy: (package_name) ->\n    # A proxy to TAPi18next.t where the namespace is preset to the package's\n    (key, options, lang_tag=null) =>\n      if not lang_tag?\n        # translate to fallback_language\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else if not(lang_tag of @server_translators)\n        console.log \"Warning: language #{lang_tag} is not supported in this project, fallback language (#{@_fallback_language})\"\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else\n        return @server_translators[lang_tag] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n\n  _registerHTTPMethod: ->\n    self = @\n\n    methods = {}\n\n    if not self._enabled()\n      throw new Meteor.Error 500, \"tap-i18n has to be enabled in order to register the HTTP method\"\n\n    JsonRoutes.add 'get', \"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs\", (req, res, next) ->\n      if not RegExp(\"^((#{globals.langauges_tags_regex},)*#{globals.langauges_tags_regex}|all).json$\").test(req.params.langs)\n        return JsonRoutes.sendResult res,\n          code: 401\n\n      langs = req.params.langs.replace \".json\", \"\"\n\n      if langs == \"all\"\n        output = self.translations\n      else\n        output = {}\n\n        langs = langs.split(\",\")\n        for lang_tag in langs\n          if lang_tag in self._getProjectLanguages() and \\\n              lang_tag != self._fallback_language # fallback language is integrated to the bundle\n            language_translations = self.translations[lang_tag]\n\n            if language_translations?\n              output[lang_tag] = language_translations\n\n      return JsonRoutes.sendResult res,\n        data: output\n\n    JsonRoutes.add 'get', \"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang\",  (req, res, next) ->\n      if not RegExp(\"^#{globals.langauges_tags_regex}.json$\").test(req.params.lang)\n        return JsonRoutes.sendResult res,\n          code: 401\n\n      lang_tag = req.params.lang.replace \".json\", \"\"\n\n      if lang_tag not in self._getProjectLanguages() or \\\n          lang_tag == self._fallback_language # fallback language is integrated to the bundle\n        return JsonRoutes.sendResult res,\n          code: 404 # not found\n\n      language_translations = self.translations[lang_tag]\n      # returning {} if lang_tag is not in translations allows the project\n      # developer to force a language supporte with project-tap.i18n's\n      # supported_languages property, even if that language has no lang\n      # files.\n      return JsonRoutes.sendResult res,\n        data: (if language_translations? then language_translations else {})\n\n  _onceEnabled: ->\n    @_registerAllServerTranslators()\n","var indexOf = [].indexOf;\n\nimport {\n  TAPi18nBase\n} from './tap_i18n-common';\n\nimport {\n  globals\n} from './globals';\n\nexport var TAPi18nServer = (function() {\n  class TAPi18nServer extends TAPi18nBase {\n    _registerServerTranslator(lang_tag, package_name) {\n      if (this._enabled()) {\n        if (!(lang_tag in this.server_translators)) {\n          this.server_translators[lang_tag] = this._getSpecificLangTranslator(lang_tag);\n        }\n        // fallback language is integrated, and isn't part of @translations\n        if (lang_tag !== this._fallback_language) {\n          this.addResourceBundle(lang_tag, package_name, this.translations[lang_tag][package_name]);\n        }\n      }\n      if (!(this._fallback_language in this.server_translators)) {\n        return this.server_translators[this._fallback_language] = this._getSpecificLangTranslator(this._fallback_language);\n      }\n    }\n\n    _registerAllServerTranslators() {\n      var i, lang_tag, len, package_name, ref, results;\n      ref = this._getProjectLanguages();\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        lang_tag = ref[i];\n        results.push((function() {\n          var results1;\n          results1 = [];\n          for (package_name in this.translations[lang_tag]) {\n            results1.push(this._registerServerTranslator(lang_tag, package_name));\n          }\n          return results1;\n        }).call(this));\n      }\n      return results;\n    }\n\n    _getPackageI18nextProxy(package_name) {\n      // A proxy to TAPi18next.t where the namespace is preset to the package's\n      return (key, options, lang_tag = null) => {\n        if (lang_tag == null) {\n          // translate to fallback_language\n          return this.server_translators[this._fallback_language](`${this._getPackageDomain(package_name)}:${key}`, options);\n        } else if (!(lang_tag in this.server_translators)) {\n          console.log(`Warning: language ${lang_tag} is not supported in this project, fallback language (${this._fallback_language})`);\n          return this.server_translators[this._fallback_language](`${this._getPackageDomain(package_name)}:${key}`, options);\n        } else {\n          return this.server_translators[lang_tag](`${this._getPackageDomain(package_name)}:${key}`, options);\n        }\n      };\n    }\n\n    _registerHTTPMethod() {\n      var methods, self;\n      self = this;\n      methods = {};\n      if (!self._enabled()) {\n        throw new Meteor.Error(500, \"tap-i18n has to be enabled in order to register the HTTP method\");\n      }\n      JsonRoutes.add('get', `${self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs`, function(req, res, next) {\n        var i, lang_tag, langs, language_translations, len, output;\n        if (!RegExp(`^((${globals.langauges_tags_regex},)*${globals.langauges_tags_regex}|all).json$`).test(req.params.langs)) {\n          return JsonRoutes.sendResult(res, {\n            code: 401\n          });\n        }\n        langs = req.params.langs.replace(\".json\", \"\");\n        if (langs === \"all\") {\n          output = self.translations;\n        } else {\n          output = {};\n          langs = langs.split(\",\");\n          for (i = 0, len = langs.length; i < len; i++) {\n            lang_tag = langs[i];\n            if (indexOf.call(self._getProjectLanguages(), lang_tag) >= 0 && lang_tag !== self._fallback_language) { // fallback language is integrated to the bundle\n              language_translations = self.translations[lang_tag];\n              if (language_translations != null) {\n                output[lang_tag] = language_translations;\n              }\n            }\n          }\n        }\n        return JsonRoutes.sendResult(res, {\n          data: output\n        });\n      });\n      return JsonRoutes.add('get', `${self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang`, function(req, res, next) {\n        var lang_tag, language_translations;\n        if (!RegExp(`^${globals.langauges_tags_regex}.json$`).test(req.params.lang)) {\n          return JsonRoutes.sendResult(res, {\n            code: 401\n          });\n        }\n        lang_tag = req.params.lang.replace(\".json\", \"\");\n        if (indexOf.call(self._getProjectLanguages(), lang_tag) < 0 || lang_tag === self._fallback_language) { // fallback language is integrated to the bundle\n          return JsonRoutes.sendResult(res, {\n            code: 404 // not found\n          });\n        }\n        language_translations = self.translations[lang_tag];\n        // returning {} if lang_tag is not in translations allows the project\n        // developer to force a language supporte with project-tap.i18n's\n        // supported_languages property, even if that language has no lang\n        // files.\n        return JsonRoutes.sendResult(res, {\n          data: (language_translations != null ? language_translations : {})\n        });\n      });\n    }\n\n    _onceEnabled() {\n      return this._registerAllServerTranslators();\n    }\n\n  };\n\n  TAPi18nServer.prototype.server_translators = null;\n\n  return TAPi18nServer;\n\n}).call(this);\n"]}}