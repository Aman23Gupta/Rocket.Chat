{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/restivus.coffee","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/rocketchat:restivus/lib/restivus.coffee","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/restivus.coffee","passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/restivus.coffee","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/rocketchat:restivus/lib/restivus.coffee"}},"code":"var indexOf = [].indexOf;\n\nthis.Restivus = function () {\n  class Restivus {\n    constructor(options) {\n      var corsHeaders;\n      this._routes = [];\n      this._config = {\n        paths: [],\n        useDefaultAuth: false,\n        apiPath: 'api/',\n        version: null,\n        prettyJson: false,\n        auth: {\n          token: 'services.resume.loginTokens.hashedToken',\n          user: function () {\n            var token;\n\n            if (this.request.headers['x-auth-token']) {\n              token = Accounts._hashLoginToken(this.request.headers['x-auth-token']);\n            }\n\n            return {\n              userId: this.request.headers['x-user-id'],\n              token: token\n            };\n          }\n        },\n        defaultHeaders: {\n          'Content-Type': 'application/json'\n        },\n        enableCors: true\n      }; // Configure API with the given options\n\n      _.extend(this._config, options);\n\n      if (this._config.enableCors) {\n        corsHeaders = {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n        };\n\n        if (this._config.useDefaultAuth) {\n          corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token';\n        } // Set default header to enable CORS if configured\n\n\n        _.extend(this._config.defaultHeaders, corsHeaders);\n\n        if (!this._config.defaultOptionsEndpoint) {\n          this._config.defaultOptionsEndpoint = function () {\n            this.response.writeHead(200, corsHeaders);\n            return this.done();\n          };\n        }\n      } // Normalize the API path\n\n\n      if (this._config.apiPath[0] === '/') {\n        this._config.apiPath = this._config.apiPath.slice(1);\n      }\n\n      if (_.last(this._config.apiPath) !== '/') {\n        this._config.apiPath = this._config.apiPath + '/';\n      } // URL path versioning is the only type of API versioning currently available, so if a version is\n      // provided, append it to the base path of the API\n\n\n      if (this._config.version) {\n        this._config.apiPath += this._config.version + '/';\n      } // Add default login and logout endpoints if auth is configured\n\n\n      if (this._config.useDefaultAuth) {\n        this._initAuth();\n      } else if (this._config.useAuth) {\n        this._initAuth();\n\n        console.warn('Warning: useAuth API config option will be removed in Restivus v1.0 ' + '\\n    Use the useDefaultAuth option instead');\n      }\n\n      return this;\n    }\n    /**\n    Add endpoints for the given HTTP methods at the given path\n     @param path {String} The extended URL path (will be appended to base path of the API)\n    @param options {Object} Route configuration options\n    @param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n    @param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n    @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n    @param endpoints.<method> {Function or Object} If a function is provided, all default route\n      configuration options will be applied to the endpoint. Otherwise an object with an `action`\n      and all other route config options available. An `action` must be provided with the object.\n    */\n\n\n    addRoute(path, options, endpoints) {\n      var route; // Create a new route and add it to our list of existing routes\n\n      route = new share.Route(this, path, options, endpoints);\n\n      this._routes.push(route);\n\n      route.addToApi();\n      return this;\n    }\n    /**\n    Generate routes for the Meteor Collection with the given name\n    */\n\n\n    addCollection(collection, options = {}) {\n      var collectionEndpoints, collectionRouteEndpoints, endpointsAwaitingConfiguration, entityRouteEndpoints, excludedEndpoints, methods, methodsOnCollection, path, routeOptions;\n      methods = ['get', 'post', 'put', 'patch', 'delete', 'getAll'];\n      methodsOnCollection = ['post', 'getAll']; // Grab the set of endpoints\n\n      if (collection === Meteor.users) {\n        collectionEndpoints = this._userCollectionEndpoints;\n      } else {\n        collectionEndpoints = this._collectionEndpoints;\n      } // Flatten the options and set defaults if necessary\n\n\n      endpointsAwaitingConfiguration = options.endpoints || {};\n      routeOptions = options.routeOptions || {};\n      excludedEndpoints = options.excludedEndpoints || []; // Use collection name as default path\n\n      path = options.path || collection._name; // Separate the requested endpoints by the route they belong to (one for operating on the entire\n      // collection and one for operating on a single entity within the collection)\n\n      collectionRouteEndpoints = {};\n      entityRouteEndpoints = {};\n\n      if (_.isEmpty(endpointsAwaitingConfiguration) && _.isEmpty(excludedEndpoints)) {\n        // Generate all endpoints on this collection\n        _.each(methods, function (method) {\n          // Partition the endpoints into their respective routes\n          if (indexOf.call(methodsOnCollection, method) >= 0) {\n            _.extend(collectionRouteEndpoints, collectionEndpoints[method].call(this, collection));\n          } else {\n            _.extend(entityRouteEndpoints, collectionEndpoints[method].call(this, collection));\n          }\n        }, this);\n      } else {\n        // Generate any endpoints that haven't been explicitly excluded\n        _.each(methods, function (method) {\n          var configuredEndpoint, endpointOptions;\n\n          if (indexOf.call(excludedEndpoints, method) < 0 && endpointsAwaitingConfiguration[method] !== false) {\n            // Configure endpoint and map to it's http method\n            // TODO: Consider predefining a map of methods to their http method type (e.g., getAll: get)\n            endpointOptions = endpointsAwaitingConfiguration[method];\n            configuredEndpoint = {};\n\n            _.each(collectionEndpoints[method].call(this, collection), function (action, methodType) {\n              return configuredEndpoint[methodType] = _.chain(action).clone().extend(endpointOptions).value();\n            }); // Partition the endpoints into their respective routes\n\n\n            if (indexOf.call(methodsOnCollection, method) >= 0) {\n              _.extend(collectionRouteEndpoints, configuredEndpoint);\n            } else {\n              _.extend(entityRouteEndpoints, configuredEndpoint);\n            }\n          }\n        }, this);\n      } // Add the routes to the API\n\n\n      this.addRoute(path, routeOptions, collectionRouteEndpoints);\n      this.addRoute(`${path}/:id`, routeOptions, entityRouteEndpoints);\n      return this;\n    }\n    /*\n      Add /login and /logout endpoints to the API\n    */\n\n\n    _initAuth() {\n      var logout, self;\n      self = this;\n      /*\n        Add a login endpoint to the API\n         After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n        adding hook).\n      */\n\n      this.addRoute('login', {\n        authRequired: false\n      }, {\n        post: function () {\n          var auth, e, extraData, password, ref, ref1, response, searchQuery, user; // Grab the username or email that the user is logging in with\n\n          user = {};\n\n          if (this.bodyParams.user) {\n            if (this.bodyParams.user.indexOf('@') === -1) {\n              user.username = this.bodyParams.user;\n            } else {\n              user.email = this.bodyParams.user;\n            }\n          } else if (this.bodyParams.username) {\n            user.username = this.bodyParams.username;\n          } else if (this.bodyParams.email) {\n            user.email = this.bodyParams.email;\n          }\n\n          password = this.bodyParams.password;\n\n          if (this.bodyParams.hashed) {\n            password = {\n              digest: password,\n              algorithm: 'sha-256'\n            };\n          }\n\n          try {\n            // Try to log the user into the user's account (if successful we'll get an auth token back)\n            auth = Auth.loginWithPassword(user, password);\n          } catch (error) {\n            e = error;\n            return ({} = {\n              statusCode: e.error,\n              body: {\n                status: 'error',\n                message: e.reason\n              }\n            });\n          } // Get the authenticated user\n          // TODO: Consider returning the user in Auth.loginWithPassword(), instead of fetching it again here\n\n\n          if (auth.userId && auth.authToken) {\n            searchQuery = {};\n            searchQuery[self._config.auth.token] = Accounts._hashLoginToken(auth.authToken);\n            this.user = Meteor.users.findOne({\n              '_id': auth.userId\n            }, searchQuery);\n            this.userId = (ref = this.user) != null ? ref._id : void 0;\n          }\n\n          response = {\n            status: 'success',\n            data: auth\n          }; // Call the login hook with the authenticated user attached\n\n          extraData = (ref1 = self._config.onLoggedIn) != null ? ref1.call(this) : void 0;\n\n          if (extraData != null) {\n            _.extend(response.data, {\n              extra: extraData\n            });\n          }\n\n          return response;\n        }\n      });\n\n      logout = function () {\n        var authToken, extraData, hashedToken, index, ref, response, tokenFieldName, tokenLocation, tokenPath, tokenRemovalQuery, tokenToRemove; // Remove the given auth token from the user's account\n\n        authToken = this.request.headers['x-auth-token'];\n        hashedToken = Accounts._hashLoginToken(authToken);\n        tokenLocation = self._config.auth.token;\n        index = tokenLocation.lastIndexOf('.');\n        tokenPath = tokenLocation.substring(0, index);\n        tokenFieldName = tokenLocation.substring(index + 1);\n        tokenToRemove = {};\n        tokenToRemove[tokenFieldName] = hashedToken;\n        tokenRemovalQuery = {};\n        tokenRemovalQuery[tokenPath] = tokenToRemove;\n        Meteor.users.update(this.user._id, {\n          $pull: tokenRemovalQuery\n        });\n        response = {\n          status: 'success',\n          data: {\n            message: 'You\\'ve been logged out!'\n          }\n        }; // Call the logout hook with the authenticated user attached\n\n        extraData = (ref = self._config.onLoggedOut) != null ? ref.call(this) : void 0;\n\n        if (extraData != null) {\n          _.extend(response.data, {\n            extra: extraData\n          });\n        }\n\n        return response;\n      };\n      /*\n      Add a logout endpoint to the API\n       After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n      adding hook).\n      */\n\n\n      return this.addRoute('logout', {\n        authRequired: true\n      }, {\n        get: function () {\n          console.warn(\"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\");\n          console.warn(\"    See https://github.com/kahmali/meteor-restivus/issues/100\");\n          return logout.call(this);\n        },\n        post: logout\n      });\n    }\n\n  }\n\n  ;\n  /**\n  A set of endpoints that can be applied to a Collection Route\n  */\n\n  Restivus.prototype._collectionEndpoints = {\n    get: function (collection) {\n      return {\n        get: {\n          action: function () {\n            var entity;\n            entity = collection.findOne(this.urlParams.id);\n\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function (collection) {\n      return {\n        put: {\n          action: function () {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, this.bodyParams);\n\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    patch: function (collection) {\n      return {\n        patch: {\n          action: function () {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: this.bodyParams\n            });\n\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    delete: function (collection) {\n      return {\n        delete: {\n          action: function () {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'Item removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function (collection) {\n      return {\n        post: {\n          action: function () {\n            var entity, entityId;\n            entityId = collection.insert(this.bodyParams);\n            entity = collection.findOne(entityId);\n\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              return {\n                statusCode: 400,\n                body: {\n                  status: 'fail',\n                  message: 'No item added'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function (collection) {\n      return {\n        get: {\n          action: function () {\n            var entities;\n            entities = collection.find().fetch();\n\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve items from collection'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n  /**\n    A set of endpoints that can be applied to a Meteor.users Collection Route\n  */\n\n  Restivus.prototype._userCollectionEndpoints = {\n    get: function (collection) {\n      return {\n        get: {\n          action: function () {\n            var entity;\n            entity = collection.findOne(this.urlParams.id, {\n              fields: {\n                profile: 1\n              }\n            });\n\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function (collection) {\n      return {\n        put: {\n          action: function () {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: {\n                profile: this.bodyParams\n              }\n            });\n\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id, {\n                fields: {\n                  profile: 1\n                }\n              });\n              return {\n                status: \"success\",\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    delete: function (collection) {\n      return {\n        delete: {\n          action: function () {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'User removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function (collection) {\n      return {\n        post: {\n          action: function () {\n            var entity, entityId; // Create a new user account\n\n            entityId = Accounts.createUser(this.bodyParams);\n            entity = collection.findOne(entityId, {\n              fields: {\n                profile: 1\n              }\n            });\n\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              ({\n                statusCode: 400\n              });\n              return {\n                status: 'fail',\n                message: 'No user added'\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function (collection) {\n      return {\n        get: {\n          action: function () {\n            var entities;\n            entities = collection.find({}, {\n              fields: {\n                profile: 1\n              }\n            }).fetch();\n\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve users'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n  return Restivus;\n}.call(this);\n\nRestivus = this.Restivus;","map":{"version":3,"sources":["packages/rocketchat:restivus/lib/restivus.coffee"],"names":["indexOf","Restivus","constructor","options","corsHeaders","_routes","_config","paths","useDefaultAuth","apiPath","version","prettyJson","auth","token","user","request","headers","Accounts","_hashLoginToken","userId","defaultHeaders","enableCors","_","extend","defaultOptionsEndpoint","response","writeHead","done","slice","last","_initAuth","useAuth","console","warn","addRoute","path","endpoints","route","share","Route","push","addToApi","addCollection","collection","collectionEndpoints","collectionRouteEndpoints","endpointsAwaitingConfiguration","entityRouteEndpoints","excludedEndpoints","methods","methodsOnCollection","routeOptions","Meteor","users","_userCollectionEndpoints","_collectionEndpoints","_name","isEmpty","each","method","call","configuredEndpoint","endpointOptions","action","methodType","chain","clone","value","logout","self","authRequired","post","e","extraData","password","ref","ref1","searchQuery","bodyParams","username","email","hashed","digest","algorithm","Auth","loginWithPassword","error","statusCode","body","status","message","reason","authToken","findOne","_id","data","onLoggedIn","extra","hashedToken","index","tokenFieldName","tokenLocation","tokenPath","tokenRemovalQuery","tokenToRemove","lastIndexOf","substring","update","$pull","onLoggedOut","get","prototype","entity","urlParams","id","put","entityIsUpdated","patch","$set","delete","remove","entityId","insert","getAll","entities","find","fetch","fields","profile","createUser"],"mappings":"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","sourcesContent":["var          \n  indexOf = [].indexOf;\n\nthis.Restivus = (function() {\n  class Restivus {\n    constructor(options) {\n      var corsHeaders;\n      this._routes = [];\n      this._config = {\n        paths: [],\n        useDefaultAuth: false,\n        apiPath: 'api/',\n        version: null,\n        prettyJson: false,\n        auth: {\n          token: 'services.resume.loginTokens.hashedToken',\n          user: function() {\n            var token;\n            if (this.request.headers['x-auth-token']) {\n              token = Accounts._hashLoginToken(this.request.headers['x-auth-token']);\n            }\n            return {\n              userId: this.request.headers['x-user-id'],\n              token: token\n            };\n          }\n        },\n        defaultHeaders: {\n          'Content-Type': 'application/json'\n        },\n        enableCors: true\n      };\n      // Configure API with the given options\n      _.extend(this._config, options);\n      if (this._config.enableCors) {\n        corsHeaders = {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n        };\n        if (this._config.useDefaultAuth) {\n          corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token';\n        }\n        // Set default header to enable CORS if configured\n        _.extend(this._config.defaultHeaders, corsHeaders);\n        if (!this._config.defaultOptionsEndpoint) {\n          this._config.defaultOptionsEndpoint = function() {\n            this.response.writeHead(200, corsHeaders);\n            return this.done();\n          };\n        }\n      }\n      // Normalize the API path\n      if (this._config.apiPath[0] === '/') {\n        this._config.apiPath = this._config.apiPath.slice(1);\n      }\n      if (_.last(this._config.apiPath) !== '/') {\n        this._config.apiPath = this._config.apiPath + '/';\n      }\n      // URL path versioning is the only type of API versioning currently available, so if a version is\n      // provided, append it to the base path of the API\n      if (this._config.version) {\n        this._config.apiPath += this._config.version + '/';\n      }\n      // Add default login and logout endpoints if auth is configured\n      if (this._config.useDefaultAuth) {\n        this._initAuth();\n      } else if (this._config.useAuth) {\n        this._initAuth();\n        console.warn('Warning: useAuth API config option will be removed in Restivus v1.0 ' + '\\n    Use the useDefaultAuth option instead');\n      }\n      return this;\n    }\n\n    /**\n    Add endpoints for the given HTTP methods at the given path\n\n    @param path {String} The extended URL path (will be appended to base path of the API)\n    @param options {Object} Route configuration options\n    @param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n    @param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n    @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n    @param endpoints.<method> {Function or Object} If a function is provided, all default route\n      configuration options will be applied to the endpoint. Otherwise an object with an `action`\n      and all other route config options available. An `action` must be provided with the object.\n    */\n    addRoute(path, options, endpoints) {\n      var route;\n      // Create a new route and add it to our list of existing routes\n      route = new share.Route(this, path, options, endpoints);\n      this._routes.push(route);\n      route.addToApi();\n      return this;\n    }\n\n    /**\n    Generate routes for the Meteor Collection with the given name\n    */\n    addCollection(collection, options = {}) {\n      var collectionEndpoints, collectionRouteEndpoints, endpointsAwaitingConfiguration, entityRouteEndpoints, excludedEndpoints, methods, methodsOnCollection, path, routeOptions;\n      methods = ['get', 'post', 'put', 'patch', 'delete', 'getAll'];\n      methodsOnCollection = ['post', 'getAll'];\n      // Grab the set of endpoints\n      if (collection === Meteor.users) {\n        collectionEndpoints = this._userCollectionEndpoints;\n      } else {\n        collectionEndpoints = this._collectionEndpoints;\n      }\n      // Flatten the options and set defaults if necessary\n      endpointsAwaitingConfiguration = options.endpoints || {};\n      routeOptions = options.routeOptions || {};\n      excludedEndpoints = options.excludedEndpoints || [];\n      // Use collection name as default path\n      path = options.path || collection._name;\n      // Separate the requested endpoints by the route they belong to (one for operating on the entire\n      // collection and one for operating on a single entity within the collection)\n      collectionRouteEndpoints = {};\n      entityRouteEndpoints = {};\n      if (_.isEmpty(endpointsAwaitingConfiguration) && _.isEmpty(excludedEndpoints)) {\n        // Generate all endpoints on this collection\n        _.each(methods, function(method) {\n          // Partition the endpoints into their respective routes\n          if (indexOf.call(methodsOnCollection, method) >= 0) {\n            _.extend(collectionRouteEndpoints, collectionEndpoints[method].call(this, collection));\n          } else {\n            _.extend(entityRouteEndpoints, collectionEndpoints[method].call(this, collection));\n          }\n        }, this);\n      } else {\n        // Generate any endpoints that haven't been explicitly excluded\n        _.each(methods, function(method) {\n          var configuredEndpoint, endpointOptions;\n          if (indexOf.call(excludedEndpoints, method) < 0 && endpointsAwaitingConfiguration[method] !== false) {\n            // Configure endpoint and map to it's http method\n            // TODO: Consider predefining a map of methods to their http method type (e.g., getAll: get)\n            endpointOptions = endpointsAwaitingConfiguration[method];\n            configuredEndpoint = {};\n            _.each(collectionEndpoints[method].call(this, collection), function(action, methodType) {\n              return configuredEndpoint[methodType] = _.chain(action).clone().extend(endpointOptions).value();\n            });\n            // Partition the endpoints into their respective routes\n            if (indexOf.call(methodsOnCollection, method) >= 0) {\n              _.extend(collectionRouteEndpoints, configuredEndpoint);\n            } else {\n              _.extend(entityRouteEndpoints, configuredEndpoint);\n            }\n          }\n        }, this);\n      }\n      // Add the routes to the API\n      this.addRoute(path, routeOptions, collectionRouteEndpoints);\n      this.addRoute(`${path}/:id`, routeOptions, entityRouteEndpoints);\n      return this;\n    }\n\n    /*\n      Add /login and /logout endpoints to the API\n    */\n    _initAuth() {\n      var logout, self;\n      self = this;\n      /*\n        Add a login endpoint to the API\n\n        After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n        adding hook).\n      */\n      this.addRoute('login', {\n        authRequired: false\n      }, {\n        post: function() {\n          var auth, e, extraData, password, ref, ref1, response, searchQuery, user;\n          // Grab the username or email that the user is logging in with\n          user = {};\n          if (this.bodyParams.user) {\n            if (this.bodyParams.user.indexOf('@') === -1) {\n              user.username = this.bodyParams.user;\n            } else {\n              user.email = this.bodyParams.user;\n            }\n          } else if (this.bodyParams.username) {\n            user.username = this.bodyParams.username;\n          } else if (this.bodyParams.email) {\n            user.email = this.bodyParams.email;\n          }\n          password = this.bodyParams.password;\n          if (this.bodyParams.hashed) {\n            password = {\n              digest: password,\n              algorithm: 'sha-256'\n            };\n          }\n          try {\n            // Try to log the user into the user's account (if successful we'll get an auth token back)\n            auth = Auth.loginWithPassword(user, password);\n          } catch (error) {\n            e = error;\n            return ({} = {\n              statusCode: e.error,\n              body: {\n                status: 'error',\n                message: e.reason\n              }\n            });\n          }\n          // Get the authenticated user\n          // TODO: Consider returning the user in Auth.loginWithPassword(), instead of fetching it again here\n          if (auth.userId && auth.authToken) {\n            searchQuery = {};\n            searchQuery[self._config.auth.token] = Accounts._hashLoginToken(auth.authToken);\n            this.user = Meteor.users.findOne({\n              '_id': auth.userId\n            }, searchQuery);\n            this.userId = (ref = this.user) != null ? ref._id : void 0;\n          }\n          response = {\n            status: 'success',\n            data: auth\n          };\n          // Call the login hook with the authenticated user attached\n          extraData = (ref1 = self._config.onLoggedIn) != null ? ref1.call(this) : void 0;\n          if (extraData != null) {\n            _.extend(response.data, {\n              extra: extraData\n            });\n          }\n          return response;\n        }\n      });\n      logout = function() {\n        var authToken, extraData, hashedToken, index, ref, response, tokenFieldName, tokenLocation, tokenPath, tokenRemovalQuery, tokenToRemove;\n        // Remove the given auth token from the user's account\n        authToken = this.request.headers['x-auth-token'];\n        hashedToken = Accounts._hashLoginToken(authToken);\n        tokenLocation = self._config.auth.token;\n        index = tokenLocation.lastIndexOf('.');\n        tokenPath = tokenLocation.substring(0, index);\n        tokenFieldName = tokenLocation.substring(index + 1);\n        tokenToRemove = {};\n        tokenToRemove[tokenFieldName] = hashedToken;\n        tokenRemovalQuery = {};\n        tokenRemovalQuery[tokenPath] = tokenToRemove;\n        Meteor.users.update(this.user._id, {\n          $pull: tokenRemovalQuery\n        });\n        response = {\n          status: 'success',\n          data: {\n            message: 'You\\'ve been logged out!'\n          }\n        };\n        // Call the logout hook with the authenticated user attached\n        extraData = (ref = self._config.onLoggedOut) != null ? ref.call(this) : void 0;\n        if (extraData != null) {\n          _.extend(response.data, {\n            extra: extraData\n          });\n        }\n        return response;\n      };\n      /*\n      Add a logout endpoint to the API\n\n      After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n      adding hook).\n      */\n      return this.addRoute('logout', {\n        authRequired: true\n      }, {\n        get: function() {\n          console.warn(\"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\");\n          console.warn(\"    See https://github.com/kahmali/meteor-restivus/issues/100\");\n          return logout.call(this);\n        },\n        post: logout\n      });\n    }\n\n  };\n\n  /**\n  A set of endpoints that can be applied to a Collection Route\n  */\n  Restivus.prototype._collectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity;\n            entity = collection.findOne(this.urlParams.id);\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, this.bodyParams);\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    patch: function(collection) {\n      return {\n        patch: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: this.bodyParams\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    delete: function(collection) {\n      return {\n        delete: {\n          action: function() {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'Item removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            entityId = collection.insert(this.bodyParams);\n            entity = collection.findOne(entityId);\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              return {\n                statusCode: 400,\n                body: {\n                  status: 'fail',\n                  message: 'No item added'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities;\n            entities = collection.find().fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve items from collection'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n  /**\n    A set of endpoints that can be applied to a Meteor.users Collection Route\n  */\n  Restivus.prototype._userCollectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity;\n            entity = collection.findOne(this.urlParams.id, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: {\n                profile: this.bodyParams\n              }\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id, {\n                fields: {\n                  profile: 1\n                }\n              });\n              return {\n                status: \"success\",\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    delete: function(collection) {\n      return {\n        delete: {\n          action: function() {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'User removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            // Create a new user account\n            entityId = Accounts.createUser(this.bodyParams);\n            entity = collection.findOne(entityId, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              ({\n                statusCode: 400\n              });\n              return {\n                status: 'fail',\n                message: 'No user added'\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities;\n            entities = collection.find({}, {\n              fields: {\n                profile: 1\n              }\n            }).fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve users'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n  return Restivus;\n\n}).call(this);\n\nRestivus = this.Restivus;\n"]},"sourceType":"script","hash":"98a21b2b693450d92b029f1110cc99cceba5e504"}
