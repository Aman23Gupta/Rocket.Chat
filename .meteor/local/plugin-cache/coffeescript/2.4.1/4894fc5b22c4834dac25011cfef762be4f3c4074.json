{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/auth.coffee","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/rocketchat:restivus/lib/auth.coffee","filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/auth.coffee","passPerPreset":false,"envName":"development","cwd":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","root":"/Users/amangupta/Documents/Open-Source/Rocket.Chat","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/amangupta/Documents/Open-Source/Rocket.Chat/packages/rocketchat:restivus/lib/auth.coffee","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/rocketchat:restivus/lib/auth.coffee"}},"code":"/*\n  Return a MongoDB query selector for finding the given user\n*/\n\n/*\nA password can be either in plain text or hashed\n*/\n\n/*\n  A valid user will have exactly one of the following identification fields: id, username, or email\n*/\nvar getUserQuerySelector, passwordValidator, userValidator;\nthis.Auth || (this.Auth = {});\nuserValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(String),\n    username: Match.Optional(String),\n    email: Match.Optional(String)\n  });\n\n  if (_.keys(user).length === !1) {\n    throw new Match.Error('User must have exactly one identifier field');\n  }\n\n  return true;\n});\npasswordValidator = Match.OneOf(String, {\n  digest: String,\n  algorithm: String\n});\n\ngetUserQuerySelector = function (user) {\n  if (user.id) {\n    return {\n      '_id': user.id\n    };\n  } else if (user.username) {\n    return {\n      'username': user.username\n    };\n  } else if (user.email) {\n    return {\n      'emails.address': user.email\n    };\n  } // We shouldn't be here if the user object was properly validated\n\n\n  throw new Error('Cannot create selector from invalid user');\n};\n/*\nLog a user in with their password\n*/\n\n\nthis.Auth.loginWithPassword = function (user, password) {\n  var authToken, authenticatingUser, authenticatingUserSelector, hashedToken, passwordVerification, ref;\n\n  if (!user || !password) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  } // Validate the login input types\n\n\n  check(user, userValidator);\n  check(password, passwordValidator); // Retrieve the user from the database\n\n  authenticatingUserSelector = getUserQuerySelector(user);\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector);\n\n  if (!authenticatingUser) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n\n  if (!((ref = authenticatingUser.services) != null ? ref.password : void 0)) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  } // Authenticate the user's password\n\n\n  passwordVerification = Accounts._checkPassword(authenticatingUser, password);\n\n  if (passwordVerification.error) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  } // Add a new auth token to the user's account\n\n\n  authToken = Accounts._generateStampedLoginToken();\n  hashedToken = Accounts._hashLoginToken(authToken.token);\n\n  Accounts._insertHashedLoginToken(authenticatingUser._id, {\n    hashedToken\n  });\n\n  return {\n    authToken: authToken.token,\n    userId: authenticatingUser._id\n  };\n};","map":{"version":3,"sources":["packages/rocketchat:restivus/lib/auth.coffee"],"names":["getUserQuerySelector","passwordValidator","userValidator","Auth","Match","Where","user","check","id","Optional","String","username","email","_","keys","length","Error","OneOf","digest","algorithm","loginWithPassword","password","authToken","authenticatingUser","authenticatingUserSelector","hashedToken","passwordVerification","ref","Meteor","users","findOne","services","Accounts","_checkPassword","error","_generateStampedLoginToken","_hashLoginToken","token","_insertHashedLoginToken","_id","userId"],"mappings":"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","sourcesContent":["\n/*\n  Return a MongoDB query selector for finding the given user\n*/\n  /*\n  A password can be either in plain text or hashed\n  */\n  /*\n    A valid user will have exactly one of the following identification fields: id, username, or email\n  */\nvar getUserQuerySelector, passwordValidator, userValidator;\n\nthis.Auth || (this.Auth = {});\n\nuserValidator = Match.Where(function(user) {\n  check(user, {\n    id: Match.Optional(String),\n    username: Match.Optional(String),\n    email: Match.Optional(String)\n  });\n  if (_.keys(user).length === !1) {\n    throw new Match.Error('User must have exactly one identifier field');\n  }\n  return true;\n});\n\npasswordValidator = Match.OneOf(String, {\n  digest: String,\n  algorithm: String\n});\n\ngetUserQuerySelector = function(user) {\n  if (user.id) {\n    return {\n      '_id': user.id\n    };\n  } else if (user.username) {\n    return {\n      'username': user.username\n    };\n  } else if (user.email) {\n    return {\n      'emails.address': user.email\n    };\n  }\n  // We shouldn't be here if the user object was properly validated\n  throw new Error('Cannot create selector from invalid user');\n};\n\n/*\nLog a user in with their password\n*/\nthis.Auth.loginWithPassword = function(user, password) {\n  var authToken, authenticatingUser, authenticatingUserSelector, hashedToken, passwordVerification, ref;\n  if (!user || !password) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  // Validate the login input types\n  check(user, userValidator);\n  check(password, passwordValidator);\n  // Retrieve the user from the database\n  authenticatingUserSelector = getUserQuerySelector(user);\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector);\n  if (!authenticatingUser) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  if (!((ref = authenticatingUser.services) != null ? ref.password : void 0)) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  // Authenticate the user's password\n  passwordVerification = Accounts._checkPassword(authenticatingUser, password);\n  if (passwordVerification.error) {\n    throw new Meteor.Error(401, 'Unauthorized');\n  }\n  // Add a new auth token to the user's account\n  authToken = Accounts._generateStampedLoginToken();\n  hashedToken = Accounts._hashLoginToken(authToken.token);\n  Accounts._insertHashedLoginToken(authenticatingUser._id, {hashedToken});\n  return {\n    authToken: authToken.token,\n    userId: authenticatingUser._id\n  };\n};\n"]},"sourceType":"script","hash":"4894fc5b22c4834dac25011cfef762be4f3c4074"}
