{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar express, oauthserver;\noauthserver = Npm.require('oauth2-server');\nexpress = Npm.require('express'); // WebApp.rawConnectHandlers.use app\n// JsonRoutes.Middleware.use app\n\nOAuth2Server = class OAuth2Server {\n  constructor(config = {}) {\n    this.config = config;\n    this.app = express();\n    this.routes = express();\n    this.model = new Model(this.config);\n    this.oauth = oauthserver({\n      model: this.model,\n      grants: ['authorization_code', 'refresh_token'],\n      debug: this.config.debug\n    });\n    this.publishAuhorizedClients();\n    this.initRoutes();\n    return this;\n  }\n\n  publishAuhorizedClients() {\n    return Meteor.publish('authorizedOAuth', function () {\n      if (this.userId == null) {\n        return this.ready();\n      }\n\n      return Meteor.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          'oauth.authorizedClients': 1\n        }\n      });\n      return typeof user !== \"undefined\" && user !== null;\n    });\n  }\n\n  initRoutes() {\n    var debugMiddleware, self, transformRequestsNotUsingFormUrlencodedType;\n    self = this;\n\n    debugMiddleware = function (req, res, next) {\n      if (self.config.debug === true) {\n        console.log('[OAuth2Server]', req.method, req.url);\n      }\n\n      return next();\n    }; // Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n    // and they pass the required information as query strings\n\n\n    transformRequestsNotUsingFormUrlencodedType = function (req, res, next) {\n      if (!req.is('application/x-www-form-urlencoded') && req.method === 'POST') {\n        if (self.config.debug === true) {\n          console.log('[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.');\n        }\n\n        req.headers['content-type'] = 'application/x-www-form-urlencoded';\n        req.body = Object.assign({}, req.body, req.query);\n      }\n\n      return next();\n    };\n\n    this.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, this.oauth.grant());\n    this.app.get('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function (req, res, next) {\n      var client;\n      client = self.model.Clients.findOne({\n        active: true,\n        clientId: req.query.client_id\n      });\n\n      if (client == null) {\n        return res.redirect('/oauth/error/404');\n      }\n\n      if (![].concat(client.redirectUri).includes(req.query.redirect_uri)) {\n        return res.redirect('/oauth/error/invalid_redirect_uri');\n      }\n\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function (req, res, next) {\n      var user;\n\n      if (req.body.token == null) {\n        return res.sendStatus(401).send('No token');\n      }\n\n      user = Meteor.users.findOne({\n        'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.token)\n      });\n\n      if (user == null) {\n        return res.sendStatus(401).send('Invalid token');\n      }\n\n      req.user = {\n        id: user._id\n      };\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, this.oauth.authCodeGrant(function (req, next) {\n      if (req.body.allow === 'yes') {\n        Meteor.users.update(req.user.id, {\n          $addToSet: {\n            'oauth.authorizedClients': this.clientId\n          }\n        });\n      }\n\n      return next(null, req.body.allow === 'yes', req.user);\n    }));\n    this.app.use(this.routes);\n    return this.app.all('/oauth/*', this.oauth.errorHandler());\n  }\n\n};","sourceMap":{"version":3,"sources":["/packages/rocketchat_oauth2-server/oauth.coffee","/oauth.coffee"],"names":["express","oauthserver","Npm","require","OAuth2Server","constructor","config","app","routes","model","Model","oauth","grants","debug","publishAuhorizedClients","initRoutes","Meteor","publish","userId","ready","users","find","_id","fields","user","debugMiddleware","self","transformRequestsNotUsingFormUrlencodedType","req","res","next","console","log","method","url","is","headers","body","Object","assign","query","all","grant","get","bindEnvironment","client","Clients","findOne","active","clientId","client_id","redirect","concat","redirectUri","includes","redirect_uri","post","token","sendStatus","send","Accounts","_hashLoginToken","id","authCodeGrant","allow","update","$addToSet","use","errorHandler"],"mappings":"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","file":"packages/rocketchat:oauth2-server/oauth.coffee.map","sourcesContent":["oauthserver = Npm.require('oauth2-server')\nexpress = Npm.require('express')\n\n# WebApp.rawConnectHandlers.use app\n# JsonRoutes.Middleware.use app\n\n\nclass OAuth2Server\n\tconstructor: (@config={}) ->\n\t\t@app = express()\n\n\t\t@routes = express()\n\n\t\t@model = new Model(@config)\n\n\t\t@oauth = oauthserver\n\t\t\tmodel: @model\n\t\t\tgrants: ['authorization_code', 'refresh_token']\n\t\t\tdebug: @config.debug\n\n\t\t@publishAuhorizedClients()\n\t\t@initRoutes()\n\n\t\treturn @\n\n\n\tpublishAuhorizedClients: ->\n\t\tMeteor.publish 'authorizedOAuth', ->\n\t\t\t\tif not @userId?\n\t\t\t\t\treturn @ready()\n\n\t\t\t\treturn Meteor.users.find\n\t\t\t\t\t_id: @userId\n\t\t\t\t,\n\t\t\t\t\tfields:\n\t\t\t\t\t\t'oauth.authorizedClients': 1\n\n\t\t\t\treturn user?\n\n\n\tinitRoutes: ->\n\t\tself = @\n\t\tdebugMiddleware = (req, res, next) ->\n\t\t\tif self.config.debug is true\n\t\t\t\tconsole.log '[OAuth2Server]', req.method, req.url\n\t\t\tnext()\n\n\t\t# Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n\t\t# and they pass the required information as query strings\n\t\ttransformRequestsNotUsingFormUrlencodedType = (req, res, next) ->\n\t\t\tif not req.is('application/x-www-form-urlencoded') and req.method is 'POST'\n\t\t\t\tif self.config.debug is true\n\t\t\t\t\tconsole.log '[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.'\n\t\t\t\treq.headers['content-type'] = 'application/x-www-form-urlencoded'\n\t\t\t\treq.body = Object.assign {}, req.body, req.query\n\t\t\tnext()\n\n\t\t@app.all '/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, @oauth.grant()\n\n\t\t@app.get '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tclient = self.model.Clients.findOne({ active: true, clientId: req.query.client_id })\n\t\t\tif not client?\n\t\t\t\treturn res.redirect '/oauth/error/404'\n\n\t\t\tif not [].concat(client.redirectUri).includes(req.query.redirect_uri)\n\t\t\t\treturn res.redirect '/oauth/error/invalid_redirect_uri'\n\n\t\t\tnext()\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tif not req.body.token?\n\t\t\t\treturn res.sendStatus(401).send('No token')\n\n\t\t\tuser = Meteor.users.findOne\n\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken req.body.token\n\n\t\t\tif not user?\n\t\t\t\treturn res.sendStatus(401).send('Invalid token')\n\n\t\t\treq.user =\n\t\t\t\tid: user._id\n\n\t\t\tnext()\n\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, @oauth.authCodeGrant (req, next) ->\n\t\t\tif req.body.allow is 'yes'\n\t\t\t\tMeteor.users.update req.user.id, {$addToSet: {'oauth.authorizedClients': @clientId}}\n\n\t\t\tnext(null, req.body.allow is 'yes', req.user)\n\n\t\t@app.use @routes\n\n\t\t@app.all '/oauth/*', @oauth.errorHandler()\n","var express, oauthserver;              \n\noauthserver = Npm.require('oauth2-server');\n\nexpress = Npm.require('express');\n\n// WebApp.rawConnectHandlers.use app\n// JsonRoutes.Middleware.use app\nOAuth2Server = class OAuth2Server {\n  constructor(config = {}) {\n    this.config = config;\n    this.app = express();\n    this.routes = express();\n    this.model = new Model(this.config);\n    this.oauth = oauthserver({\n      model: this.model,\n      grants: ['authorization_code', 'refresh_token'],\n      debug: this.config.debug\n    });\n    this.publishAuhorizedClients();\n    this.initRoutes();\n    return this;\n  }\n\n  publishAuhorizedClients() {\n    return Meteor.publish('authorizedOAuth', function() {\n      if (this.userId == null) {\n        return this.ready();\n      }\n      return Meteor.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          'oauth.authorizedClients': 1\n        }\n      });\n      return typeof user !== \"undefined\" && user !== null;\n    });\n  }\n\n  initRoutes() {\n    var debugMiddleware, self, transformRequestsNotUsingFormUrlencodedType;\n    self = this;\n    debugMiddleware = function(req, res, next) {\n      if (self.config.debug === true) {\n        console.log('[OAuth2Server]', req.method, req.url);\n      }\n      return next();\n    };\n    // Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n    // and they pass the required information as query strings\n    transformRequestsNotUsingFormUrlencodedType = function(req, res, next) {\n      if (!req.is('application/x-www-form-urlencoded') && req.method === 'POST') {\n        if (self.config.debug === true) {\n          console.log('[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.');\n        }\n        req.headers['content-type'] = 'application/x-www-form-urlencoded';\n        req.body = Object.assign({}, req.body, req.query);\n      }\n      return next();\n    };\n    this.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, this.oauth.grant());\n    this.app.get('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var client;\n      client = self.model.Clients.findOne({\n        active: true,\n        clientId: req.query.client_id\n      });\n      if (client == null) {\n        return res.redirect('/oauth/error/404');\n      }\n      if (![].concat(client.redirectUri).includes(req.query.redirect_uri)) {\n        return res.redirect('/oauth/error/invalid_redirect_uri');\n      }\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var user;\n      if (req.body.token == null) {\n        return res.sendStatus(401).send('No token');\n      }\n      user = Meteor.users.findOne({\n        'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.token)\n      });\n      if (user == null) {\n        return res.sendStatus(401).send('Invalid token');\n      }\n      req.user = {\n        id: user._id\n      };\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, this.oauth.authCodeGrant(function(req, next) {\n      if (req.body.allow === 'yes') {\n        Meteor.users.update(req.user.id, {\n          $addToSet: {\n            'oauth.authorizedClients': this.clientId\n          }\n        });\n      }\n      return next(null, req.body.allow === 'yes', req.user);\n    }));\n    this.app.use(this.routes);\n    return this.app.all('/oauth/*', this.oauth.errorHandler());\n  }\n\n};\n"]}}