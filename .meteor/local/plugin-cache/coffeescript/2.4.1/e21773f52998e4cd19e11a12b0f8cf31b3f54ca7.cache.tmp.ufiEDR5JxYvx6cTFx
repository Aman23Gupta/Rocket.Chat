{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar AccessTokens, AuthCodes, Clients, Model, RefreshTokens, debug;\nAccessTokens = void 0;\nRefreshTokens = void 0;\nClients = void 0;\nAuthCodes = void 0;\ndebug = void 0;\n\nthis.Model = Model = function () {\n  class Model {\n    constructor(config = {}) {\n      if (config.accessTokensCollectionName == null) {\n        config.accessTokensCollectionName = 'oauth_access_tokens';\n      }\n\n      if (config.refreshTokensCollectionName == null) {\n        config.refreshTokensCollectionName = 'oauth_refresh_tokens';\n      }\n\n      if (config.clientsCollectionName == null) {\n        config.clientsCollectionName = 'oauth_clients';\n      }\n\n      if (config.authCodesCollectionName == null) {\n        config.authCodesCollectionName = 'oauth_auth_codes';\n      }\n\n      this.debug = debug = config.debug;\n      this.AccessTokens = AccessTokens = config.accessTokensCollection || new Meteor.Collection(config.accessTokensCollectionName);\n      this.RefreshTokens = RefreshTokens = config.refreshTokensCollection || new Meteor.Collection(config.refreshTokensCollectionName);\n      this.Clients = Clients = config.clientsCollection || new Meteor.Collection(config.clientsCollectionName);\n      this.AuthCodes = AuthCodes = config.authCodesCollection || new Meteor.Collection(config.authCodesCollectionName);\n    }\n\n    grantTypeAllowed(clientId, grantType, callback) {\n      if (debug === true) {\n        console.log('[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')');\n      }\n\n      return callback(false, grantType === 'authorization_code' || grantType === 'refresh_token');\n    }\n\n  }\n\n  ;\n  Model.prototype.getAccessToken = Meteor.bindEnvironment(function (bearerToken, callback) {\n    var e, token;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')');\n    }\n\n    try {\n      token = AccessTokens.findOne({\n        accessToken: bearerToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.getClient = Meteor.bindEnvironment(function (clientId, clientSecret, callback) {\n    var client, e;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')');\n    }\n\n    try {\n      if (clientSecret == null) {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId\n        });\n      } else {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId,\n          clientSecret: clientSecret\n        });\n      }\n\n      return callback(null, client);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.saveAccessToken = Meteor.bindEnvironment(function (token, clientId, expires, user, callback) {\n    var e, tokenId;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n\n    try {\n      tokenId = AccessTokens.insert({\n        accessToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, tokenId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.getAuthCode = Meteor.bindEnvironment(function (authCode, callback) {\n    var code, e;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')');\n    }\n\n    try {\n      code = AuthCodes.findOne({\n        authCode: authCode\n      });\n      return callback(null, code);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.saveAuthCode = Meteor.bindEnvironment(function (code, clientId, expires, user, callback) {\n    var codeId, e;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')');\n    }\n\n    try {\n      codeId = AuthCodes.upsert({\n        authCode: code\n      }, {\n        authCode: code,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, codeId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.saveRefreshToken = Meteor.bindEnvironment(function (token, clientId, expires, user, callback) {\n    var e, tokenId;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n\n    try {\n      return tokenId = RefreshTokens.insert({\n        refreshToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      }, callback(null, tokenId));\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  Model.prototype.getRefreshToken = Meteor.bindEnvironment(function (refreshToken, callback) {\n    var e, token;\n\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')');\n    }\n\n    try {\n      token = RefreshTokens.findOne({\n        refreshToken: refreshToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n  return Model;\n}.call(this);","sourceMap":{"version":3,"sources":["/packages/rocketchat_oauth2-server/model.coffee","/model.coffee"],"names":["AccessTokens","AuthCodes","Clients","Model","RefreshTokens","debug","constructor","config","accessTokensCollectionName","refreshTokensCollectionName","clientsCollectionName","authCodesCollectionName","accessTokensCollection","Meteor","Collection","refreshTokensCollection","clientsCollection","authCodesCollection","grantTypeAllowed","clientId","grantType","callback","console","log","prototype","getAccessToken","bindEnvironment","bearerToken","e","token","findOne","accessToken","error","getClient","clientSecret","client","active","saveAccessToken","expires","user","tokenId","insert","userId","id","getAuthCode","authCode","code","saveAuthCode","codeId","upsert","saveRefreshToken","refreshToken","getRefreshToken","call"],"mappings":"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","file":"packages/rocketchat:oauth2-server/model.coffee.map","sourcesContent":["AccessTokens = undefined\nRefreshTokens = undefined\nClients = undefined\nAuthCodes = undefined\ndebug = undefined\n\n@Model = class Model\n\tconstructor: (config={}) ->\n\t\tconfig.accessTokensCollectionName ?= 'oauth_access_tokens'\n\t\tconfig.refreshTokensCollectionName ?= 'oauth_refresh_tokens'\n\t\tconfig.clientsCollectionName ?= 'oauth_clients'\n\t\tconfig.authCodesCollectionName ?= 'oauth_auth_codes'\n\n\t\t@debug = debug = config.debug\n\n\t\t@AccessTokens = AccessTokens = config.accessTokensCollection or new Meteor.Collection config.accessTokensCollectionName\n\t\t@RefreshTokens = RefreshTokens = config.refreshTokensCollection or new Meteor.Collection config.refreshTokensCollectionName\n\t\t@Clients = Clients = config.clientsCollection or new Meteor.Collection config.clientsCollectionName\n\t\t@AuthCodes = AuthCodes = config.authCodesCollection or new Meteor.Collection config.authCodesCollectionName\n\n\n\tgetAccessToken: Meteor.bindEnvironment (bearerToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')'\n\n\t\ttry\n\t\t\ttoken = AccessTokens.findOne accessToken: bearerToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetClient: Meteor.bindEnvironment (clientId, clientSecret, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')'\n\n\t\ttry\n\t\t\tif not clientSecret?\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId }\n\t\t\telse\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId, clientSecret: clientSecret }\n\t\t\tcallback null, client\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgrantTypeAllowed: (clientId, grantType, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')'\n\n\t\treturn callback(false, grantType in ['authorization_code', 'refresh_token'])\n\n\n\tsaveAccessToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = AccessTokens.insert\n\t\t\t\taccessToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetAuthCode: Meteor.bindEnvironment (authCode, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')'\n\n\t\ttry\n\t\t\tcode = AuthCodes.findOne authCode: authCode\n\t\t\tcallback null, code\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveAuthCode: Meteor.bindEnvironment (code, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')'\n\n\t\ttry\n\t\t\tcodeId = AuthCodes.upsert\n\t\t\t\tauthCode: code\n\t\t\t,\n\t\t\t\tauthCode: code\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, codeId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveRefreshToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = RefreshTokens.insert\n\t\t\t\trefreshToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetRefreshToken: Meteor.bindEnvironment (refreshToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')'\n\n\t\ttry\n\t\t\ttoken = RefreshTokens.findOne refreshToken: refreshToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n","var AccessTokens, AuthCodes, Clients, Model, RefreshTokens, debug;\n\nAccessTokens = void 0;\n\nRefreshTokens = void 0;\n\nClients = void 0;\n\nAuthCodes = void 0;\n\ndebug = void 0;\n\nthis.Model = Model = (function() {\n  class Model {\n    constructor(config = {}) {\n      if (config.accessTokensCollectionName == null) {\n        config.accessTokensCollectionName = 'oauth_access_tokens';\n      }\n      if (config.refreshTokensCollectionName == null) {\n        config.refreshTokensCollectionName = 'oauth_refresh_tokens';\n      }\n      if (config.clientsCollectionName == null) {\n        config.clientsCollectionName = 'oauth_clients';\n      }\n      if (config.authCodesCollectionName == null) {\n        config.authCodesCollectionName = 'oauth_auth_codes';\n      }\n      this.debug = debug = config.debug;\n      this.AccessTokens = AccessTokens = config.accessTokensCollection || new Meteor.Collection(config.accessTokensCollectionName);\n      this.RefreshTokens = RefreshTokens = config.refreshTokensCollection || new Meteor.Collection(config.refreshTokensCollectionName);\n      this.Clients = Clients = config.clientsCollection || new Meteor.Collection(config.clientsCollectionName);\n      this.AuthCodes = AuthCodes = config.authCodesCollection || new Meteor.Collection(config.authCodesCollectionName);\n    }\n\n    grantTypeAllowed(clientId, grantType, callback) {\n      if (debug === true) {\n        console.log('[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')');\n      }\n      return callback(false, grantType === 'authorization_code' || grantType === 'refresh_token');\n    }\n\n  };\n\n  Model.prototype.getAccessToken = Meteor.bindEnvironment(function(bearerToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')');\n    }\n    try {\n      token = AccessTokens.findOne({\n        accessToken: bearerToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getClient = Meteor.bindEnvironment(function(clientId, clientSecret, callback) {\n    var client, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')');\n    }\n    try {\n      if (clientSecret == null) {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId\n        });\n      } else {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId,\n          clientSecret: clientSecret\n        });\n      }\n      return callback(null, client);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAccessToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      tokenId = AccessTokens.insert({\n        accessToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, tokenId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getAuthCode = Meteor.bindEnvironment(function(authCode, callback) {\n    var code, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')');\n    }\n    try {\n      code = AuthCodes.findOne({\n        authCode: authCode\n      });\n      return callback(null, code);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAuthCode = Meteor.bindEnvironment(function(code, clientId, expires, user, callback) {\n    var codeId, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')');\n    }\n    try {\n      codeId = AuthCodes.upsert({\n        authCode: code\n      }, {\n        authCode: code,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, codeId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveRefreshToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      return tokenId = RefreshTokens.insert({\n        refreshToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      }, callback(null, tokenId));\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getRefreshToken = Meteor.bindEnvironment(function(refreshToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')');\n    }\n    try {\n      token = RefreshTokens.findOne({\n        refreshToken: refreshToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  return Model;\n\n}).call(this);\n"]}}