[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar OAuth = Package.oauth.OAuth;\nvar fetch = Package.fetch.fetch;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Github;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"github-oauth\":{\"github_server.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/github-oauth/github_server.js                                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nGithub = {};\nOAuth.registerService('github', 2, null, query => {\n  const accessTokenCall = Meteor.wrapAsync(getAccessToken);\n  const accessToken = accessTokenCall(query);\n  const identityCall = Meteor.wrapAsync(getIdentity);\n  const identity = identityCall(accessToken);\n  const emailsCall = Meteor.wrapAsync(getEmails);\n  const emails = emailsCall(accessToken);\n  const primaryEmail = emails.find(email => email.primary);\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: OAuth.sealSecret(accessToken),\n      email: identity.email || primaryEmail && primaryEmail.email || '',\n      username: identity.login,\n      emails\n    },\n    options: {\n      profile: {\n        name: identity.name\n      }\n    }\n  };\n}); // http://developer.github.com/v3/#user-agent-required\n\nlet userAgent = 'Meteor';\nif (Meteor.release) userAgent += \"/\".concat(Meteor.release);\n\nconst getAccessToken = (query, callback) => Promise.asyncApply(() => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'github'\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n  let response;\n\n  try {\n    const content = new URLSearchParams({\n      client_id: config.clientId,\n      client_secret: config.secret,\n      code: query.code,\n      redirect_uri: OAuth._redirectUri('github', config)\n    });\n    const request = Promise.await(fetch(\"https://github.com/login/oauth/access_token?\".concat(content.toString()), {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': userAgent\n      }\n    }));\n    response = Promise.await(request.json());\n  } catch (err) {\n    throw Object.assign(new Error(\"Failed to complete OAuth handshake with Github. \".concat(err.message)), {\n      response: err.response\n    });\n  }\n\n  if (response.error) {\n    callback(response.error); // if the http response was a json object with an error attribute\n\n    throw new Error(\"Failed to complete OAuth handshake with GitHub. \".concat(response.error));\n  } else {\n    callback(null, response.access_token);\n    return response.access_token;\n  }\n});\n\nconst getIdentity = (accessToken, callback) => Promise.asyncApply(() => {\n  try {\n    const request = Promise.await(fetch('https://api.github.com/user', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': userAgent,\n        Authorization: \"token \".concat(accessToken)\n      } // http://developer.github.com/v3/#user-agent-required\n\n    }));\n    const response = Promise.await(request.json());\n    callback(null, response);\n    return response;\n  } catch (err) {\n    callback(err.message);\n    throw Object.assign(new Error(\"Failed to fetch identity from Github. \".concat(err.message)), {\n      response: err.response\n    });\n  }\n});\n\nconst getEmails = (accessToken, callback) => Promise.asyncApply(() => {\n  try {\n    const request = Promise.await(fetch('https://api.github.com/user/emails', {\n      method: 'GET',\n      headers: {\n        'User-Agent': userAgent,\n        Accept: 'application/json',\n        Authorization: \"token \".concat(accessToken)\n      } // http://developer.github.com/v3/#user-agent-required\n\n    }));\n    const response = Promise.await(request.json());\n    callback(null, response);\n    return response;\n  } catch (err) {\n    callback(err.message, []);\n    return [];\n  }\n});\n\nGithub.retrieveCredential = (credentialToken, credentialSecret) => OAuth.retrieveCredential(credentialToken, credentialSecret);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/github-oauth/github_server.js\");\n\n/* Exports */\nPackage._define(\"github-oauth\", {\n  Github: Github\n});\n\n})();\n","servePath":"/packages/github-oauth.js","sourceMap":{"version":3,"sources":["packages/github-oauth/github_server.js"],"names":["Github","OAuth","registerService","query","accessTokenCall","Meteor","wrapAsync","getAccessToken","accessToken","identityCall","getIdentity","identity","emailsCall","getEmails","emails","primaryEmail","find","email","primary","serviceData","id","sealSecret","username","login","options","profile","name","userAgent","release","callback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","content","URLSearchParams","client_id","clientId","client_secret","secret","code","redirect_uri","_redirectUri","request","fetch","toString","method","headers","Accept","json","err","Object","assign","Error","message","error","access_token","Authorization","retrieveCredential","credentialToken","credentialSecret"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,GAAG,EAAT;AAEAC,KAAK,CAACC,eAAN,CAAsB,QAAtB,EAAgC,CAAhC,EAAmC,IAAnC,EAA0CC,KAAD,IAAW;AAClD,QAAMC,eAAe,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAxB;AACA,QAAMC,WAAW,GAAGJ,eAAe,CAACD,KAAD,CAAnC;AACA,QAAMM,YAAY,GAAGJ,MAAM,CAACC,SAAP,CAAiBI,WAAjB,CAArB;AACA,QAAMC,QAAQ,GAAGF,YAAY,CAACD,WAAD,CAA7B;AACA,QAAMI,UAAU,GAAGP,MAAM,CAACC,SAAP,CAAiBO,SAAjB,CAAnB;AACA,QAAMC,MAAM,GAAGF,UAAU,CAACJ,WAAD,CAAzB;AACA,QAAMO,YAAY,GAAGD,MAAM,CAACE,IAAP,CAAaC,KAAD,IAAWA,KAAK,CAACC,OAA7B,CAArB;AAEA,SAAO;AACLC,eAAW,EAAE;AACXC,QAAE,EAAET,QAAQ,CAACS,EADF;AAEXZ,iBAAW,EAAEP,KAAK,CAACoB,UAAN,CAAiBb,WAAjB,CAFF;AAGXS,WAAK,EAAEN,QAAQ,CAACM,KAAT,IAAmBF,YAAY,IAAIA,YAAY,CAACE,KAAhD,IAA0D,EAHtD;AAIXK,cAAQ,EAAEX,QAAQ,CAACY,KAJR;AAKXT;AALW,KADR;AAQLU,WAAO,EAAE;AAAEC,aAAO,EAAE;AAAEC,YAAI,EAAEf,QAAQ,CAACe;AAAjB;AAAX;AARJ,GAAP;AAUD,CAnBD,E,CAqBA;;AACA,IAAIC,SAAS,GAAG,QAAhB;AACA,IAAItB,MAAM,CAACuB,OAAX,EAAoBD,SAAS,eAAQtB,MAAM,CAACuB,OAAf,CAAT;;AAEpB,MAAMrB,cAAc,GAAG,CAAOJ,KAAP,EAAc0B,QAAd,8BAA2B;AAChD,QAAMC,MAAM,GAAGC,oBAAoB,CAACC,cAArB,CAAoCC,OAApC,CAA4C;AACzDC,WAAO,EAAE;AADgD,GAA5C,CAAf;AAGA,MAAI,CAACJ,MAAL,EAAa,MAAM,IAAIC,oBAAoB,CAACI,WAAzB,EAAN;AAEb,MAAIC,QAAJ;;AACA,MAAI;AACF,UAAMC,OAAO,GAAG,IAAIC,eAAJ,CAAoB;AAClCC,eAAS,EAAET,MAAM,CAACU,QADgB;AAElCC,mBAAa,EAAEX,MAAM,CAACY,MAFY;AAGlCC,UAAI,EAAExC,KAAK,CAACwC,IAHsB;AAIlCC,kBAAY,EAAE3C,KAAK,CAAC4C,YAAN,CACZ,QADY,EAEZf,MAFY;AAJoB,KAApB,CAAhB;AASA,UAAMgB,OAAO,iBAASC,KAAK,uDACsBV,OAAO,CAACW,QAAR,EADtB,GAEzB;AACEC,YAAM,EAAE,MADV;AAEEC,aAAO,EAAE;AACPC,cAAM,EAAE,kBADD;AAEP,sBAAcxB;AAFP;AAFX,KAFyB,CAAd,CAAb;AAUAS,YAAQ,iBAASU,OAAO,CAACM,IAAR,EAAT,CAAR;AACD,GArBD,CAqBE,OAAOC,GAAP,EAAY;AACZ,UAAMC,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,2DACqDH,GAAG,CAACI,OADzD,EADI,EAIJ;AAAErB,cAAQ,EAAEiB,GAAG,CAACjB;AAAhB,KAJI,CAAN;AAMD;;AACD,MAAIA,QAAQ,CAACsB,KAAb,EAAoB;AAClB7B,YAAQ,CAACO,QAAQ,CAACsB,KAAV,CAAR,CADkB,CAElB;;AACA,UAAM,IAAIF,KAAJ,2DAC+CpB,QAAQ,CAACsB,KADxD,EAAN;AAGD,GAND,MAMO;AACL7B,YAAQ,CAAC,IAAD,EAAOO,QAAQ,CAACuB,YAAhB,CAAR;AACA,WAAOvB,QAAQ,CAACuB,YAAhB;AACD;AACF,CA9CsB,CAAvB;;AAgDA,MAAMjD,WAAW,GAAG,CAAOF,WAAP,EAAoBqB,QAApB,8BAAiC;AACnD,MAAI;AACF,UAAMiB,OAAO,iBAASC,KAAK,CAAC,6BAAD,EAAgC;AACzDE,YAAM,EAAE,KADiD;AAEzDC,aAAO,EAAE;AACPC,cAAM,EAAE,kBADD;AAEP,sBAAcxB,SAFP;AAGPiC,qBAAa,kBAAWpD,WAAX;AAHN,OAFgD,CAMvD;;AANuD,KAAhC,CAAd,CAAb;AAQA,UAAM4B,QAAQ,iBAASU,OAAO,CAACM,IAAR,EAAT,CAAd;AACAvB,YAAQ,CAAC,IAAD,EAAOO,QAAP,CAAR;AACA,WAAOA,QAAP;AACD,GAZD,CAYE,OAAOiB,GAAP,EAAY;AACZxB,YAAQ,CAACwB,GAAG,CAACI,OAAL,CAAR;AACA,UAAMH,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,iDAAmDH,GAAG,CAACI,OAAvD,EADI,EAEJ;AAAErB,cAAQ,EAAEiB,GAAG,CAACjB;AAAhB,KAFI,CAAN;AAID;AACF,CApBmB,CAApB;;AAsBA,MAAMvB,SAAS,GAAG,CAAOL,WAAP,EAAoBqB,QAApB,8BAAiC;AACjD,MAAI;AACF,UAAMiB,OAAO,iBAASC,KAAK,CAAC,oCAAD,EAAuC;AAChEE,YAAM,EAAE,KADwD;AAEhEC,aAAO,EAAE;AACP,sBAAcvB,SADP;AAEPwB,cAAM,EAAE,kBAFD;AAGPS,qBAAa,kBAAWpD,WAAX;AAHN,OAFuD,CAM9D;;AAN8D,KAAvC,CAAd,CAAb;AAQA,UAAM4B,QAAQ,iBAASU,OAAO,CAACM,IAAR,EAAT,CAAd;AACAvB,YAAQ,CAAC,IAAD,EAAOO,QAAP,CAAR;AACA,WAAOA,QAAP;AACD,GAZD,CAYE,OAAOiB,GAAP,EAAY;AACZxB,YAAQ,CAACwB,GAAG,CAACI,OAAL,EAAc,EAAd,CAAR;AACA,WAAO,EAAP;AACD;AACF,CAjBiB,CAAlB;;AAmBAzD,MAAM,CAAC6D,kBAAP,GAA4B,CAACC,eAAD,EAAkBC,gBAAlB,KAC1B9D,KAAK,CAAC4D,kBAAN,CAAyBC,eAAzB,EAA0CC,gBAA1C,CADF,C","file":"/packages/github-oauth.js","sourcesContent":["Github = {};\n\nOAuth.registerService('github', 2, null, (query) => {\n  const accessTokenCall = Meteor.wrapAsync(getAccessToken);\n  const accessToken = accessTokenCall(query);\n  const identityCall = Meteor.wrapAsync(getIdentity);\n  const identity = identityCall(accessToken);\n  const emailsCall = Meteor.wrapAsync(getEmails);\n  const emails = emailsCall(accessToken);\n  const primaryEmail = emails.find((email) => email.primary);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: OAuth.sealSecret(accessToken),\n      email: identity.email || (primaryEmail && primaryEmail.email) || '',\n      username: identity.login,\n      emails\n    },\n    options: { profile: { name: identity.name } }\n  };\n});\n\n// http://developer.github.com/v3/#user-agent-required\nlet userAgent = 'Meteor';\nif (Meteor.release) userAgent += `/${Meteor.release}`;\n\nconst getAccessToken = async (query, callback) => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'github'\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n\n  let response;\n  try {\n    const content = new URLSearchParams({\n      client_id: config.clientId,\n      client_secret: config.secret,\n      code: query.code,\n      redirect_uri: OAuth._redirectUri(\n        'github',\n        config\n      )\n    });\n    const request = await fetch(\n      `https://github.com/login/oauth/access_token?${content.toString()}`,\n      {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'User-Agent': userAgent\n        }\n      }\n    );\n    response = await request.json();\n  } catch (err) {\n    throw Object.assign(\n      new Error(\n        `Failed to complete OAuth handshake with Github. ${err.message}`\n      ),\n      { response: err.response }\n    );\n  }\n  if (response.error) {\n    callback(response.error);\n    // if the http response was a json object with an error attribute\n    throw new Error(\n      `Failed to complete OAuth handshake with GitHub. ${response.error}`\n    );\n  } else {\n    callback(null, response.access_token);\n    return response.access_token;\n  }\n};\n\nconst getIdentity = async (accessToken, callback) => {\n  try {\n    const request = await fetch('https://api.github.com/user', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': userAgent,\n        Authorization: `token ${accessToken}`\n      } // http://developer.github.com/v3/#user-agent-required\n    });\n    const response = await request.json();\n    callback(null, response);\n    return response;\n  } catch (err) {\n    callback(err.message);\n    throw Object.assign(\n      new Error(`Failed to fetch identity from Github. ${err.message}`),\n      { response: err.response }\n    );\n  }\n};\n\nconst getEmails = async (accessToken, callback) => {\n  try {\n    const request = await fetch('https://api.github.com/user/emails', {\n      method: 'GET',\n      headers: {\n        'User-Agent': userAgent,\n        Accept: 'application/json',\n        Authorization: `token ${accessToken}`\n      } // http://developer.github.com/v3/#user-agent-required\n    });\n    const response = await request.json();\n    callback(null, response);\n    return response;\n  } catch (err) {\n    callback(err.message, []);\n    return [];\n  }\n};\n\nGithub.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]}}]