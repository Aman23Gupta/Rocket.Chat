[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar extension, options, path;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"jalik:ufs\":{\"ufs.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs.js                                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n!function (module1) {\n  module1.export({\n    UploadFS: () => UploadFS\n  });\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n\n  }, 0);\n  let Random;\n  module1.link(\"meteor/random\", {\n    Random(v) {\n      Random = v;\n    }\n\n  }, 1);\n  let Config;\n  module1.link(\"./ufs-config\", {\n    Config(v) {\n      Config = v;\n    }\n\n  }, 2);\n  let Filter;\n  module1.link(\"./ufs-filter\", {\n    Filter(v) {\n      Filter = v;\n    }\n\n  }, 3);\n  let MIME;\n  module1.link(\"./ufs-mime\", {\n    MIME(v) {\n      MIME = v;\n    }\n\n  }, 4);\n  let Store;\n  module1.link(\"./ufs-store\", {\n    Store(v) {\n      Store = v;\n    }\n\n  }, 5);\n  let StorePermissions;\n  module1.link(\"./ufs-store-permissions\", {\n    StorePermissions(v) {\n      StorePermissions = v;\n    }\n\n  }, 6);\n  let Tokens;\n  module1.link(\"./ufs-tokens\", {\n    Tokens(v) {\n      Tokens = v;\n    }\n\n  }, 7);\n  let Uploader;\n  module1.link(\"./ufs-uploader\", {\n    Uploader(v) {\n      Uploader = v;\n    }\n\n  }, 8);\n  const stores = {};\n  const UploadFS = {\n    /**\n     * Contains all stores\n     */\n    store: {},\n\n    /**\n     * Collection of tokens\n     */\n    tokens: Tokens,\n\n    /**\n     * Adds the \"etag\" attribute to files\n     * @param where\n     */\n    addETagAttributeToFiles(where) {\n      this.getStores().forEach(store => {\n        const files = store.getCollection(); // By default update only files with no path set\n\n        files.find(where || {\n          etag: null\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).forEach(file => {\n          files.direct.update(file._id, {\n            $set: {\n              etag: this.generateEtag()\n            }\n          });\n        });\n      });\n    },\n\n    /**\n     * Adds the MIME type for an extension\n     * @param extension\n     * @param mime\n     */\n    addMimeType(extension, mime) {\n      MIME[extension.toLowerCase()] = mime;\n    },\n\n    /**\n     * Adds the \"path\" attribute to files\n     * @param where\n     */\n    addPathAttributeToFiles(where) {\n      this.getStores().forEach(store => {\n        const files = store.getCollection(); // By default update only files with no path set\n\n        files.find(where || {\n          path: null\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).forEach(file => {\n          files.direct.update(file._id, {\n            $set: {\n              path: store.getFileRelativeURL(file._id)\n            }\n          });\n        });\n      });\n    },\n\n    /**\n     * Registers the store\n     * @param store\n     */\n    addStore(store) {\n      if (!(store instanceof Store)) {\n        throw new TypeError('ufs: store is not an instance of UploadFS.Store.');\n      }\n\n      stores[store.getName()] = store;\n    },\n\n    /**\n     * Generates a unique ETag\n     * @return {string}\n     */\n    generateEtag() {\n      return Random.id();\n    },\n\n    /**\n     * Returns the MIME type of the extension\n     * @param extension\n     * @returns {*}\n     */\n    getMimeType(extension) {\n      extension = extension.toLowerCase();\n      return MIME[extension];\n    },\n\n    /**\n     * Returns all MIME types\n     */\n    getMimeTypes() {\n      return MIME;\n    },\n\n    /**\n     * Returns the store by its name\n     * @param name\n     * @return {UploadFS.Store}\n     */\n    getStore(name) {\n      return stores[name];\n    },\n\n    /**\n     * Returns all stores\n     * @return {object}\n     */\n    getStores() {\n      return stores;\n    },\n\n    /**\n     * Returns the temporary file path\n     * @param fileId\n     * @return {string}\n     */\n    getTempFilePath(fileId) {\n      return \"\".concat(this.config.tmpDir, \"/\").concat(fileId);\n    },\n\n    /**\n     * Imports a file from a URL\n     * @param url\n     * @param file\n     * @param store\n     * @param callback\n     */\n    importFromURL(url, file, store, callback) {\n      if (typeof store === 'string') {\n        Meteor.call('ufsImportURL', url, file, store, callback);\n      } else if (typeof store === 'object') {\n        store.importFromURL(url, file, callback);\n      }\n    },\n\n    /**\n     * Returns file and data as ArrayBuffer for each files in the event\n     * @deprecated\n     * @param event\n     * @param callback\n     */\n    readAsArrayBuffer() {\n      console.error('UploadFS.readAsArrayBuffer is deprecated, see https://github.com/jalik/jalik-ufs#uploading-from-a-file');\n    },\n\n    /**\n     * Opens a dialog to select a single file\n     * @param callback\n     */\n    selectFile(callback) {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.multiple = false;\n\n      input.onchange = ev => {\n        const {\n          files\n        } = ev.target;\n        callback.call(UploadFS, files[0]);\n      }; // Fix for iOS/Safari\n\n\n      const div = document.createElement('div');\n      div.className = 'ufs-file-selector';\n      div.style = 'display:none; height:0; width:0; overflow: hidden;';\n      div.appendChild(input);\n      document.body.appendChild(div); // Trigger file selection\n\n      input.click();\n    },\n\n    /**\n     * Opens a dialog to select multiple files\n     * @param callback\n     */\n    selectFiles(callback) {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.multiple = true;\n\n      input.onchange = ev => {\n        const {\n          files\n        } = ev.target;\n\n        for (let i = 0; i < files.length; i += 1) {\n          callback.call(UploadFS, files[i]);\n        }\n      }; // Fix for iOS/Safari\n\n\n      const div = document.createElement('div');\n      div.className = 'ufs-file-selector';\n      div.style = 'display:none; height:0; width:0; overflow: hidden;';\n      div.appendChild(input);\n      document.body.appendChild(div); // Trigger file selection\n\n      input.click();\n    }\n\n  };\n\n  if (Meteor.isServer) {\n    require('./ufs-methods');\n\n    require('./ufs-server');\n  }\n  /**\n   * UploadFS Configuration\n   * @type {Config}\n   */\n\n\n  UploadFS.config = new Config(); // Add classes to global namespace\n\n  UploadFS.Config = Config;\n  UploadFS.Filter = Filter;\n  UploadFS.Store = Store;\n  UploadFS.StorePermissions = StorePermissions;\n  UploadFS.Uploader = Uploader;\n\n  if (Meteor.isServer) {\n    // Expose the module globally\n    if (typeof global !== 'undefined') {\n      global.UploadFS = UploadFS;\n    }\n  } else if (Meteor.isClient) {\n    // Expose the module globally\n    if (typeof window !== 'undefined') {\n      window.UploadFS = UploadFS;\n    }\n  }\n}.call(this, module);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-config.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-config.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  Config: () => Config\n});\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet StorePermissions;\nmodule.link(\"./ufs-store-permissions\", {\n  StorePermissions(v) {\n    StorePermissions = v;\n  }\n\n}, 1);\n\nclass Config {\n  constructor(options) {\n    // Default options\n    options = _.extend({\n      defaultStorePermissions: null,\n      https: false,\n      simulateReadDelay: 0,\n      simulateUploadSpeed: 0,\n      simulateWriteDelay: 0,\n      storesPath: 'ufs',\n      tmpDir: '/tmp/ufs',\n      tmpDirPermissions: '0700'\n    }, options); // Check options\n\n    if (options.defaultStorePermissions && !(options.defaultStorePermissions instanceof StorePermissions)) {\n      throw new TypeError('Config: defaultStorePermissions is not an instance of StorePermissions');\n    }\n\n    if (typeof options.https !== 'boolean') {\n      throw new TypeError('Config: https is not a function');\n    }\n\n    if (typeof options.simulateReadDelay !== 'number') {\n      throw new TypeError('Config: simulateReadDelay is not a number');\n    }\n\n    if (typeof options.simulateUploadSpeed !== 'number') {\n      throw new TypeError('Config: simulateUploadSpeed is not a number');\n    }\n\n    if (typeof options.simulateWriteDelay !== 'number') {\n      throw new TypeError('Config: simulateWriteDelay is not a number');\n    }\n\n    if (typeof options.storesPath !== 'string') {\n      throw new TypeError('Config: storesPath is not a string');\n    }\n\n    if (typeof options.tmpDir !== 'string') {\n      throw new TypeError('Config: tmpDir is not a string');\n    }\n\n    if (typeof options.tmpDirPermissions !== 'string') {\n      throw new TypeError('Config: tmpDirPermissions is not a string');\n    }\n    /**\n     * Default store permissions\n     * @type {UploadFS.StorePermissions}\n     */\n\n\n    this.defaultStorePermissions = options.defaultStorePermissions;\n    /**\n     * Use or not secured protocol in URLS\n     * @type {boolean}\n     */\n\n    this.https = options.https;\n    /**\n     * The simulation read delay\n     * @type {Number}\n     */\n\n    this.simulateReadDelay = parseInt(options.simulateReadDelay);\n    /**\n     * The simulation upload speed\n     * @type {Number}\n     */\n\n    this.simulateUploadSpeed = parseInt(options.simulateUploadSpeed);\n    /**\n     * The simulation write delay\n     * @type {Number}\n     */\n\n    this.simulateWriteDelay = parseInt(options.simulateWriteDelay);\n    /**\n     * The URL root path of stores\n     * @type {string}\n     */\n\n    this.storesPath = options.storesPath;\n    /**\n     * The temporary directory of uploading files\n     * @type {string}\n     */\n\n    this.tmpDir = options.tmpDir;\n    /**\n     * The permissions of the temporary directory\n     * @type {string}\n     */\n\n    this.tmpDirPermissions = options.tmpDirPermissions;\n  }\n\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-filter.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-filter.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  Filter: () => Filter\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 1);\n\nclass Filter {\n  constructor(options) {\n    const self = this; // Default options\n\n    options = _.extend({\n      contentTypes: null,\n      extensions: null,\n      minSize: 1,\n      maxSize: 0,\n      invalidFileError: () => new Meteor.Error('invalid-file', 'File is not valid'),\n      fileTooSmallError: (fileSize, minFileSize) => new Meteor.Error('file-too-small', \"File size (size = \".concat(fileSize, \") is too small (min = \").concat(minFileSize, \")\")),\n      fileTooLargeError: (fileSize, maxFileSize) => new Meteor.Error('file-too-large', \"File size (size = \".concat(fileSize, \") is too large (max = \").concat(maxFileSize, \")\")),\n      invalidFileExtension: (fileExtension, allowedExtensions) => new Meteor.Error('invalid-file-extension', \"File extension \\\"\".concat(fileExtension, \"\\\" is not accepted (\").concat(allowedExtensions, \")\")),\n      invalidFileType: (fileType, allowedContentTypes) => new Meteor.Error('invalid-file-type', \"File type \\\"\".concat(fileType, \"\\\" is not accepted (\").concat(allowedContentTypes, \")\")),\n      onCheck: this.onCheck\n    }, options); // Check options\n\n    if (options.contentTypes && !(options.contentTypes instanceof Array)) {\n      throw new TypeError('Filter: contentTypes is not an Array');\n    }\n\n    if (options.extensions && !(options.extensions instanceof Array)) {\n      throw new TypeError('Filter: extensions is not an Array');\n    }\n\n    if (typeof options.minSize !== 'number') {\n      throw new TypeError('Filter: minSize is not a number');\n    }\n\n    if (typeof options.maxSize !== 'number') {\n      throw new TypeError('Filter: maxSize is not a number');\n    }\n\n    if (options.onCheck && typeof options.onCheck !== 'function') {\n      throw new TypeError('Filter: onCheck is not a function');\n    } // Public attributes\n\n\n    self.options = options;\n    ['onCheck'].forEach(method => {\n      if (typeof options[method] === 'function') {\n        self[method] = options[method];\n      }\n    });\n  }\n  /**\n   * Checks the file\n   * @param file\n   */\n\n\n  check(file) {\n    let error = null;\n\n    if (typeof file !== 'object' || !file) {\n      error = this.options.invalidFileError();\n    } // Check size\n\n\n    const fileSize = file.size;\n    const minSize = this.getMinSize();\n\n    if (fileSize <= 0 || fileSize < minSize) {\n      error = this.options.fileTooSmallError(fileSize, minSize);\n    }\n\n    const maxSize = this.getMaxSize();\n\n    if (maxSize > 0 && fileSize > maxSize) {\n      error = this.options.fileTooLargeError(fileSize, maxSize);\n    } // Check extension\n\n\n    const allowedExtensions = this.getExtensions();\n    const fileExtension = file.extension;\n\n    if (allowedExtensions && !allowedExtensions.includes(fileExtension)) {\n      error = this.options.invalidFileExtension(fileExtension, allowedExtensions);\n    } // Check content type\n\n\n    const allowedContentTypes = this.getContentTypes();\n    const fileTypes = file.type;\n\n    if (allowedContentTypes && !this.isContentTypeInList(fileTypes, allowedContentTypes)) {\n      error = this.options.invalidFileType(fileTypes, allowedContentTypes);\n    } // Apply custom check\n\n\n    if (typeof this.onCheck === 'function' && !this.onCheck(file)) {\n      error = new Meteor.Error('invalid-file', 'File does not match filter');\n    }\n\n    if (error) {\n      throw error;\n    }\n  }\n  /**\n   * Returns the allowed content types\n   * @return {Array}\n   */\n\n\n  getContentTypes() {\n    return this.options.contentTypes;\n  }\n  /**\n   * Returns the allowed extensions\n   * @return {Array}\n   */\n\n\n  getExtensions() {\n    return this.options.extensions;\n  }\n  /**\n   * Returns the maximum file size\n   * @return {Number}\n   */\n\n\n  getMaxSize() {\n    return this.options.maxSize;\n  }\n  /**\n   * Returns the minimum file size\n   * @return {Number}\n   */\n\n\n  getMinSize() {\n    return this.options.minSize;\n  }\n  /**\n   * Checks if content type is in the given list\n   * @param type\n   * @param list\n   * @return {boolean}\n   */\n\n\n  isContentTypeInList(type, list) {\n    if (typeof type === 'string' && list instanceof Array) {\n      if (list.includes(type)) {\n        return true;\n      }\n\n      const wildCardGlob = '/*';\n      const wildcards = list.filter(item => item.indexOf(wildCardGlob) > 0);\n\n      if (wildcards.includes(type.replace(/(\\/.*)$/, wildCardGlob))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Checks if the file matches filter\n   * @param file\n   * @return {boolean}\n   */\n\n\n  isValid(file) {\n    let result = true;\n\n    try {\n      this.check(file);\n    } catch (err) {\n      result = false;\n    }\n\n    return result;\n  }\n  /**\n   * Executes custom checks\n   * @param file\n   * @return {boolean}\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onCheck(file) {\n    return true;\n  }\n\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-methods.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-methods.js                                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet UploadFS;\nmodule.link(\"./ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 2);\nlet Filter;\nmodule.link(\"./ufs-filter\", {\n  Filter(v) {\n    Filter = v;\n  }\n\n}, 3);\nlet Tokens;\nmodule.link(\"./ufs-tokens\", {\n  Tokens(v) {\n    Tokens = v;\n  }\n\n}, 4);\n\nconst fs = Npm.require('fs');\n\nconst http = Npm.require('http');\n\nconst https = Npm.require('https');\n\nconst Future = Npm.require('fibers/future');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    /**\n     * Completes the file transfer\n     * @param fileId\n     * @param storeName\n     * @param token\n     */\n    ufsComplete(fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Get store\n\n      const store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      const fut = new Future();\n      const tmpFile = UploadFS.getTempFilePath(fileId);\n\n      const removeTempFile = function () {\n        fs.unlink(tmpFile, function (err) {\n          err && console.error(\"ufs: cannot delete temp file \\\"\".concat(tmpFile, \"\\\" (\").concat(err.message, \")\"));\n        });\n      };\n\n      try {\n        // todo check if temp file exists\n        // Get file\n        const file = store.getCollection().findOne({\n          _id: fileId\n        }); // Validate file before moving to the store\n\n        store.validate(file); // Get the temp file\n\n        const rs = fs.createReadStream(tmpFile, {\n          flags: 'r',\n          encoding: null,\n          autoClose: true\n        }); // Clean upload if error occurs\n\n        rs.on('error', Meteor.bindEnvironment(function (err) {\n          console.error(err);\n          store.getCollection().remove({\n            _id: fileId\n          });\n          fut.throw(err);\n        })); // Save file in the store\n\n        store.write(rs, fileId, Meteor.bindEnvironment(function (err, file) {\n          removeTempFile();\n\n          if (err) {\n            fut.throw(err);\n          } else {\n            // File has been fully uploaded\n            // so we don't need to keep the token anymore.\n            // Also this ensure that the file cannot be modified with extra chunks later.\n            Tokens.remove({\n              fileId\n            });\n            fut.return(file);\n          }\n        })); // catch will not work if fut.wait() is outside try/catch\n\n        return fut.wait();\n      } catch (err) {\n        // If write failed, remove the file\n        store.getCollection().remove({\n          _id: fileId\n        }); // removeTempFile(); // todo remove temp file on error or try again ?\n\n        throw new Meteor.Error('ufs: cannot upload file', err);\n      }\n    },\n\n    /**\n     * Creates the file and returns the file upload token\n     * @param file\n     * @return {{fileId: string, token: *, url: *}}\n     */\n    ufsCreate(file) {\n      check(file, Object);\n\n      if (typeof file.name !== 'string' || !file.name.length) {\n        throw new Meteor.Error('invalid-file-name', 'file name is not valid');\n      }\n\n      if (typeof file.store !== 'string' || !file.store.length) {\n        throw new Meteor.Error('invalid-store', 'store is not valid');\n      } // Get store\n\n\n      const store = UploadFS.getStore(file.store);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Set default info\n\n\n      file.complete = false;\n      file.uploading = false;\n      file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase(); // Assign file MIME type based on the extension\n\n      if (file.extension && !file.type) {\n        file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n      }\n\n      file.progress = 0;\n      file.size = parseInt(file.size) || 0;\n      file.userId = file.userId || this.userId; // Check if the file matches store filter\n\n      const filter = store.getFilter();\n\n      if (filter instanceof Filter) {\n        filter.check(file);\n      } // Create the file\n\n\n      const fileId = store.create(file);\n      const token = store.createToken(fileId);\n      const uploadUrl = store.getURL(\"\".concat(fileId, \"?token=\").concat(token));\n      return {\n        fileId,\n        token,\n        url: uploadUrl\n      };\n    },\n\n    /**\n     * Deletes a file\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsDelete(fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Check store\n\n      const store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Ignore files that does not exist\n\n\n      if (store.getCollection().find({\n        _id: fileId\n      }).count() === 0) {\n        return 1;\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      return store.getCollection().remove({\n        _id: fileId\n      });\n    },\n\n    /**\n     * Imports a file from the URL\n     * @param url\n     * @param file\n     * @param storeName\n     * @return {*}\n     */\n    ufsImportURL(url, file, storeName) {\n      check(url, String);\n      check(file, Object);\n      check(storeName, String); // Check URL\n\n      if (typeof url !== 'string' || url.length <= 0) {\n        throw new Meteor.Error('invalid-url', 'The url is not valid');\n      } // Check file\n\n\n      if (typeof file !== 'object' || file === null) {\n        throw new Meteor.Error('invalid-file', 'The file is not valid');\n      } // Check store\n\n\n      const store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'The store does not exist');\n      }\n\n      let parsedUrl;\n\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        throw new Meteor.Error('invalid-url', 'The url is not valid');\n      }\n\n      if (['localhost', '127.0.0.1', '0.0.0.0'].includes(parsedUrl.hostname)) {\n        throw new Meteor.Error('invalid-url', 'URL cannot reference localhost');\n      } // Extract file info\n\n\n      if (!file.name) {\n        file.name = url.replace(/\\?.*$/, '').split('/').pop();\n      }\n\n      if (file.name && !file.extension) {\n        file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n      }\n\n      if (file.extension && !file.type) {\n        // Assign file MIME type based on the extension\n        file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n      } // Check if file is valid\n\n\n      if (store.getFilter() instanceof Filter) {\n        store.getFilter().check(file);\n      }\n\n      if (file.originalUrl) {\n        console.warn('ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL');\n      } // Add original URL\n\n\n      file.originalUrl = url; // Create the file\n\n      file.complete = false;\n      file.uploading = true;\n      file.progress = 0;\n      file._id = store.create(file);\n      const fut = new Future();\n      let proto; // Detect protocol to use\n\n      if (/http:\\/\\//i.test(url)) {\n        proto = http;\n      } else if (/https:\\/\\//i.test(url)) {\n        proto = https;\n      }\n\n      this.unblock(); // Download file\n\n      proto.get(url, Meteor.bindEnvironment(function (res) {\n        // Save the file in the store\n        store.write(res, file._id, function (err, file) {\n          if (err) {\n            fut.throw(err);\n          } else {\n            fut.return(file);\n          }\n        });\n      })).on('error', function (err) {\n        fut.throw(err);\n      });\n      return fut.wait();\n    },\n\n    /**\n     * Marks the file uploading as stopped\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsStop(fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Check store\n\n      const store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Check file\n\n\n      const file = store.getCollection().find({\n        _id: fileId\n      }, {\n        fields: {\n          userId: 1\n        }\n      });\n\n      if (!file) {\n        throw new Meteor.Error('invalid-file', 'File not found');\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      return store.getCollection().update({\n        _id: fileId\n      }, {\n        $set: {\n          uploading: false\n        }\n      });\n    }\n\n  });\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-mime.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-mime.js                                                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  MIME: () => MIME\n});\nconst MIME = {\n  // application\n  '7z': 'application/x-7z-compressed',\n  'arc': 'application/octet-stream',\n  'ai': 'application/postscript',\n  'bin': 'application/octet-stream',\n  'bz': 'application/x-bzip',\n  'bz2': 'application/x-bzip2',\n  'eps': 'application/postscript',\n  'exe': 'application/octet-stream',\n  'gz': 'application/x-gzip',\n  'gzip': 'application/x-gzip',\n  'js': 'application/javascript',\n  'json': 'application/json',\n  'ogx': 'application/ogg',\n  'pdf': 'application/pdf',\n  'ps': 'application/postscript',\n  'psd': 'application/octet-stream',\n  'rar': 'application/x-rar-compressed',\n  'rev': 'application/x-rar-compressed',\n  'swf': 'application/x-shockwave-flash',\n  'tar': 'application/x-tar',\n  'xhtml': 'application/xhtml+xml',\n  'xml': 'application/xml',\n  'zip': 'application/zip',\n  // audio\n  'aif': 'audio/aiff',\n  'aifc': 'audio/aiff',\n  'aiff': 'audio/aiff',\n  'au': 'audio/basic',\n  'flac': 'audio/flac',\n  'midi': 'audio/midi',\n  'mp2': 'audio/mpeg',\n  'mp3': 'audio/mpeg',\n  'mpa': 'audio/mpeg',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'opus': 'audio/ogg',\n  'ra': 'audio/vnd.rn-realaudio',\n  'spx': 'audio/ogg',\n  'wav': 'audio/x-wav',\n  'weba': 'audio/webm',\n  'wma': 'audio/x-ms-wma',\n  // image\n  'avs': 'image/avs-video',\n  'bmp': 'image/x-windows-bmp',\n  'gif': 'image/gif',\n  'ico': 'image/vnd.microsoft.icon',\n  'jpeg': 'image/jpeg',\n  'jpg': 'image/jpg',\n  'mjpg': 'image/x-motion-jpeg',\n  'pic': 'image/pic',\n  'png': 'image/png',\n  'svg': 'image/svg+xml',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  // text\n  'css': 'text/css',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'txt': 'text/plain',\n  // video\n  'avi': 'video/avi',\n  'dv': 'video/x-dv',\n  'flv': 'video/x-flv',\n  'mov': 'video/quicktime',\n  'mp4': 'video/mp4',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpg',\n  'ogv': 'video/ogg',\n  'vdo': 'video/vdo',\n  'webm': 'video/webm',\n  'wmv': 'video/x-ms-wmv',\n  // specific to vendors\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'odb': 'application/vnd.oasis.opendocument.database',\n  'odc': 'application/vnd.oasis.opendocument.chart',\n  'odf': 'application/vnd.oasis.opendocument.formula',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n  'odi': 'application/vnd.oasis.opendocument.image',\n  'odm': 'application/vnd.oasis.opendocument.text-master',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'otg': 'application/vnd.oasis.opendocument.graphics-template',\n  'otp': 'application/vnd.oasis.opendocument.presentation-template',\n  'ots': 'application/vnd.oasis.opendocument.spreadsheet-template',\n  'ott': 'application/vnd.oasis.opendocument.text-template',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-server.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-server.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet WebApp;\nmodule.link(\"meteor/webapp\", {\n  WebApp(v) {\n    WebApp = v;\n  }\n\n}, 1);\nlet SparkMD5;\nmodule.link(\"spark-md5\", {\n  default(v) {\n    SparkMD5 = v;\n  }\n\n}, 2);\nlet UploadFS;\nmodule.link(\"./ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 3);\n\nif (Meteor.isServer) {\n  const domain = Npm.require('domain');\n\n  const fs = Npm.require('fs'); // eslint-disable-next-line no-unused-vars\n\n\n  const http = Npm.require('http'); // eslint-disable-next-line no-unused-vars\n\n\n  const https = Npm.require('https');\n\n  const mkdirp = Npm.require('mkdirp');\n\n  const stream = Npm.require('stream');\n\n  const URL = Npm.require('url');\n\n  const zlib = Npm.require('zlib');\n\n  Meteor.startup(() => {\n    const path = UploadFS.config.tmpDir;\n    const mode = UploadFS.config.tmpDirPermissions;\n    fs.stat(path, err => {\n      if (err) {\n        // Create the temp directory\n        mkdirp(path, {\n          mode\n        }, err => {\n          if (err) {\n            console.error(\"ufs: cannot create temp directory at \\\"\".concat(path, \"\\\" (\").concat(err.message, \")\"));\n          } else {\n            console.log(\"ufs: temp directory created at \\\"\".concat(path, \"\\\"\"));\n          }\n        });\n      } else {\n        // Set directory permissions\n        fs.chmod(path, mode, err => {\n          err && console.error(\"ufs: cannot set temp directory permissions \".concat(mode, \" (\").concat(err.message, \")\"));\n        });\n      }\n    });\n  }); // Create domain to handle errors\n  // and possibly avoid server crashes.\n\n  const d = domain.create();\n  d.on('error', err => {\n    console.error(\"ufs: \".concat(err.message));\n  }); // Listen HTTP requests to serve files\n\n  WebApp.connectHandlers.use((req, res, next) => {\n    // Quick check to see if request should be caught\n    if (!req.url.includes(\"/\".concat(UploadFS.config.storesPath, \"/\"))) {\n      next();\n      return;\n    } // Remove store path\n\n\n    const parsedUrl = URL.parse(req.url);\n    const path = parsedUrl.pathname.substr(UploadFS.config.storesPath.length + 1);\n\n    const allowCORS = () => {\n      // res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\n      res.setHeader('Access-Control-Allow-Methods', 'POST');\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    };\n\n    if (req.method === 'OPTIONS') {\n      const regExp = new RegExp('^/([^/?]+)/([^/?]+)$');\n      const match = regExp.exec(path); // Request is not valid\n\n      if (match === null) {\n        res.writeHead(400);\n        res.end();\n        return;\n      } // Get store\n\n\n      const store = UploadFS.getStore(match[1]);\n\n      if (!store) {\n        res.writeHead(404);\n        res.end();\n        return;\n      } // If a store is found, go ahead and allow the origin\n\n\n      allowCORS();\n      next();\n    } else if (req.method === 'POST') {\n      // Get store\n      const regExp = new RegExp('^/([^/?]+)/([^/?]+)$');\n      const match = regExp.exec(path); // Request is not valid\n\n      if (match === null) {\n        res.writeHead(400);\n        res.end();\n        return;\n      } // Get store\n\n\n      const store = UploadFS.getStore(match[1]);\n\n      if (!store) {\n        res.writeHead(404);\n        res.end();\n        return;\n      } // If a store is found, go ahead and allow the origin\n\n\n      allowCORS(); // Get file\n\n      const fileId = match[2];\n\n      if (store.getCollection().find({\n        _id: fileId\n      }).count() === 0) {\n        res.writeHead(404);\n        res.end();\n        return;\n      } // Check upload token\n\n\n      if (!store.checkToken(req.query.token, fileId)) {\n        res.writeHead(403);\n        res.end();\n        return;\n      } // Check if duplicate\n\n\n      const unique = function (hash) {\n        const originalId = store.getCollection().findOne({\n          hash,\n          _id: {\n            $ne: fileId\n          }\n        });\n        return originalId ? originalId._id : false;\n      };\n\n      const spark = new SparkMD5.ArrayBuffer();\n      const tmpFile = UploadFS.getTempFilePath(fileId);\n      const ws = fs.createWriteStream(tmpFile, {\n        flags: 'a'\n      });\n      const fields = {\n        uploading: true\n      };\n      const progress = parseFloat(req.query.progress);\n\n      if (!isNaN(progress) && progress > 0) {\n        fields.progress = Math.min(progress, 1);\n      }\n\n      req.on('data', chunk => {\n        ws.write(chunk);\n        spark.append(chunk);\n      }); // eslint-disable-next-line no-unused-vars\n\n      req.on('error', err => {\n        res.writeHead(500);\n        res.end();\n      });\n      req.on('end', Meteor.bindEnvironment(() => {\n        // Update completed state without triggering hooks\n        fields.hash = spark.end();\n        fields.originalId = unique(fields.hash);\n        store.getCollection().direct.update({\n          _id: fileId\n        }, {\n          $set: fields\n        });\n        ws.end();\n      }));\n      ws.on('error', err => {\n        console.error(\"ufs: cannot write chunk of file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"));\n        fs.unlink(tmpFile, err => {\n          err && console.error(\"ufs: cannot delete temp file \\\"\".concat(tmpFile, \"\\\" (\").concat(err.message, \")\"));\n        });\n        res.writeHead(500);\n        res.end();\n      });\n      ws.on('finish', () => {\n        res.writeHead(204, {\n          'Content-Type': 'text/plain'\n        });\n        res.end();\n      });\n    } else if (req.method === 'GET') {\n      // Get store, file Id and file name\n      const regExp = new RegExp('^/([^/?]+)/([^/?]+)(?:/([^/?]+))?$');\n      const match = regExp.exec(path); // Avoid 504 Gateway timeout error\n      // if file is not handled by UploadFS.\n\n      if (match === null) {\n        next();\n        return;\n      } // Get store\n\n\n      const storeName = match[1];\n      const store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        res.writeHead(404);\n        res.end();\n        return;\n      }\n\n      if (store.onRead !== null && store.onRead !== undefined && typeof store.onRead !== 'function') {\n        console.error(\"ufs: Store.onRead is not a function in store \\\"\".concat(storeName, \"\\\"\"));\n        res.writeHead(500);\n        res.end();\n        return;\n      } // Remove file extension from file Id\n\n\n      const index = match[2].indexOf('.');\n      const fileId = index !== -1 ? match[2].substr(0, index) : match[2]; // Get file from database\n\n      const file = store.getCollection().findOne({\n        _id: fileId\n      });\n\n      if (!file) {\n        res.writeHead(404);\n        res.end();\n        return;\n      } // Simulate read speed\n\n\n      if (UploadFS.config.simulateReadDelay) {\n        Meteor._sleepForMs(UploadFS.config.simulateReadDelay);\n      }\n\n      d.run(() => {\n        // Check if the file can be accessed\n        if (store.onRead.call(store, fileId, file, req, res) !== false) {\n          const options = {};\n          let status = 200; // Prepare response headers\n\n          const headers = {\n            'Content-Type': file.type,\n            'Content-Length': file.size\n          }; // Add ETag header\n\n          if (typeof file.etag === 'string') {\n            headers.ETag = file.etag;\n          } // Add Last-Modified header\n\n\n          if (file.modifiedAt instanceof Date) {\n            headers['Last-Modified'] = file.modifiedAt.toUTCString();\n          } else if (file.uploadedAt instanceof Date) {\n            headers['Last-Modified'] = file.uploadedAt.toUTCString();\n          } // Parse request headers\n\n\n          if (typeof req.headers === 'object') {\n            // Compare ETag\n            if (req.headers['if-none-match']) {\n              if (file.etag === req.headers['if-none-match']) {\n                res.writeHead(304); // Not Modified\n\n                res.end();\n                return;\n              }\n            } // Compare file modification date\n\n\n            if (req.headers['if-modified-since']) {\n              const modifiedSince = new Date(req.headers['if-modified-since']);\n\n              if (file.modifiedAt instanceof Date && file.modifiedAt > modifiedSince || // eslint-disable-next-line no-mixed-operators\n              file.uploadedAt instanceof Date && file.uploadedAt > modifiedSince) {\n                res.writeHead(304); // Not Modified\n\n                res.end();\n                return;\n              }\n            } // Support range request\n\n\n            if (typeof req.headers.range === 'string') {\n              const {\n                range\n              } = req.headers; // Range is not valid\n\n              if (!range) {\n                res.writeHead(416);\n                res.end();\n                return;\n              }\n\n              const total = file.size;\n              const unit = range.substr(0, range.indexOf('='));\n\n              if (unit !== 'bytes') {\n                res.writeHead(416);\n                res.end();\n                return;\n              }\n\n              const ranges = range.substr(unit.length).replace(/[^0-9\\-,]/, '').split(',');\n\n              if (ranges.length > 1) {// todo: support multipart ranges: https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\n              } else {\n                const r = ranges[0].split('-');\n                const start = parseInt(r[0], 10);\n                const end = r[1] ? parseInt(r[1], 10) : total - 1; // Range is not valid\n\n                if (start < 0 || end >= total || start > end) {\n                  res.writeHead(416);\n                  res.end();\n                  return;\n                } // Update headers\n\n\n                headers['Content-Range'] = \"bytes \".concat(start, \"-\").concat(end, \"/\").concat(total);\n                headers['Content-Length'] = end - start + 1;\n                options.start = start;\n                options.end = end;\n              }\n\n              status = 206; // partial content\n            }\n          } else {\n            headers['Accept-Ranges'] = 'bytes';\n          } // Open the file stream\n\n\n          const rs = store.getReadStream(fileId, file, options);\n          const ws = new stream.PassThrough();\n          rs.on('error', Meteor.bindEnvironment(err => {\n            store.onReadError.call(store, err, fileId, file);\n            res.end();\n          }));\n          ws.on('error', Meteor.bindEnvironment(err => {\n            store.onReadError.call(store, err, fileId, file);\n            res.end();\n          }));\n          ws.on('close', () => {\n            // Close output stream at the end\n            ws.emit('end');\n          }); // Transform stream\n\n          store.transformRead(rs, ws, fileId, file, req, headers); // Parse request headers\n\n          if (typeof req.headers === 'object') {\n            // Compress data using if needed (ignore audio/video as they are already compressed)\n            if (typeof req.headers['accept-encoding'] === 'string' && !/^(audio|video)/.test(file.type)) {\n              const accept = req.headers['accept-encoding']; // Compress with gzip\n\n              if (accept.match(/\\bgzip\\b/)) {\n                headers['Content-Encoding'] = 'gzip';\n                delete headers['Content-Length'];\n                res.writeHead(status, headers);\n                ws.pipe(zlib.createGzip()).pipe(res);\n                return;\n              } // Compress with deflate\n\n\n              if (accept.match(/\\bdeflate\\b/)) {\n                headers['Content-Encoding'] = 'deflate';\n                delete headers['Content-Length'];\n                res.writeHead(status, headers);\n                ws.pipe(zlib.createDeflate()).pipe(res);\n                return;\n              }\n            }\n          } // Send raw data\n\n\n          if (!headers['Content-Encoding']) {\n            res.writeHead(status, headers);\n            ws.pipe(res);\n          }\n        } else {\n          res.end();\n        }\n      });\n    } else {\n      next();\n    }\n  });\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-store-permissions.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-store-permissions.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  StorePermissions: () => StorePermissions\n});\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\n\nclass StorePermissions {\n  constructor(options) {\n    // Default options\n    options = _.extend({\n      insert: null,\n      remove: null,\n      update: null\n    }, options); // Check options\n\n    if (options.insert && typeof options.insert !== 'function') {\n      throw new TypeError('StorePermissions: insert is not a function');\n    }\n\n    if (options.remove && typeof options.remove !== 'function') {\n      throw new TypeError('StorePermissions: remove is not a function');\n    }\n\n    if (options.update && typeof options.update !== 'function') {\n      throw new TypeError('StorePermissions: update is not a function');\n    } // Public attributes\n\n\n    this.actions = {\n      insert: options.insert,\n      remove: options.remove,\n      update: options.update\n    };\n  }\n  /**\n   * Checks the permission for the action\n   * @param action\n   * @param userId\n   * @param file\n   * @param fields\n   * @param modifiers\n   * @return {*}\n   */\n\n\n  check(action, userId, file, fields, modifiers) {\n    if (typeof this.actions[action] === 'function') {\n      return this.actions[action](userId, file, fields, modifiers);\n    }\n\n    return true; // by default allow all\n  }\n  /**\n   * Checks the insert permission\n   * @param userId\n   * @param file\n   * @returns {*}\n   */\n\n\n  checkInsert(userId, file) {\n    return this.check('insert', userId, file);\n  }\n  /**\n   * Checks the remove permission\n   * @param userId\n   * @param file\n   * @returns {*}\n   */\n\n\n  checkRemove(userId, file) {\n    return this.check('remove', userId, file);\n  }\n  /**\n   * Checks the update permission\n   * @param userId\n   * @param file\n   * @param fields\n   * @param modifiers\n   * @returns {*}\n   */\n\n\n  checkUpdate(userId, file, fields, modifiers) {\n    return this.check('update', userId, file, fields, modifiers);\n  }\n\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-store.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-store.js                                                                                   //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nconst _excluded = [\"_id\", \"url\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nmodule.export({\n  Store: () => Store\n});\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 3);\nlet UploadFS;\nmodule.link(\"./ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 4);\nlet Filter;\nmodule.link(\"./ufs-filter\", {\n  Filter(v) {\n    Filter = v;\n  }\n\n}, 5);\nlet StorePermissions;\nmodule.link(\"./ufs-store-permissions\", {\n  StorePermissions(v) {\n    StorePermissions = v;\n  }\n\n}, 6);\nlet Tokens;\nmodule.link(\"./ufs-tokens\", {\n  Tokens(v) {\n    Tokens = v;\n  }\n\n}, 7);\n\nclass Store {\n  constructor(options) {\n    const self = this; // Default options\n\n    options = _.extend({\n      collection: null,\n      filter: null,\n      name: null,\n      onCopyError: this.onCopyError,\n      onFinishUpload: this.onFinishUpload,\n      onRead: this.onRead,\n      onReadError: this.onReadError,\n      onValidate: this.onValidate,\n      onWriteError: this.onWriteError,\n      permissions: null,\n      transformRead: null,\n      transformWrite: null\n    }, options); // Check options\n\n    if (!(options.collection instanceof Mongo.Collection)) {\n      throw new TypeError('Store: collection is not a Mongo.Collection');\n    }\n\n    if (options.filter && !(options.filter instanceof Filter)) {\n      throw new TypeError('Store: filter is not a UploadFS.Filter');\n    }\n\n    if (typeof options.name !== 'string') {\n      throw new TypeError('Store: name is not a string');\n    }\n\n    if (UploadFS.getStore(options.name)) {\n      throw new TypeError('Store: name already exists');\n    }\n\n    if (options.onCopyError && typeof options.onCopyError !== 'function') {\n      throw new TypeError('Store: onCopyError is not a function');\n    }\n\n    if (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\n      throw new TypeError('Store: onFinishUpload is not a function');\n    }\n\n    if (options.onRead && typeof options.onRead !== 'function') {\n      throw new TypeError('Store: onRead is not a function');\n    }\n\n    if (options.onReadError && typeof options.onReadError !== 'function') {\n      throw new TypeError('Store: onReadError is not a function');\n    }\n\n    if (options.onWriteError && typeof options.onWriteError !== 'function') {\n      throw new TypeError('Store: onWriteError is not a function');\n    }\n\n    if (options.permissions && !(options.permissions instanceof StorePermissions)) {\n      throw new TypeError('Store: permissions is not a UploadFS.StorePermissions');\n    }\n\n    if (options.transformRead && typeof options.transformRead !== 'function') {\n      throw new TypeError('Store: transformRead is not a function');\n    }\n\n    if (options.transformWrite && typeof options.transformWrite !== 'function') {\n      throw new TypeError('Store: transformWrite is not a function');\n    }\n\n    if (options.onValidate && typeof options.onValidate !== 'function') {\n      throw new TypeError('Store: onValidate is not a function');\n    } // Public attributes\n\n\n    self.options = options;\n    self.permissions = options.permissions;\n    ['onCopyError', 'onFinishUpload', 'onRead', 'onReadError', 'onWriteError', 'onValidate'].forEach(method => {\n      if (typeof options[method] === 'function') {\n        self[method] = options[method];\n      }\n    }); // Add the store to the list\n\n    UploadFS.addStore(self); // Set default permissions\n\n    if (!(self.permissions instanceof StorePermissions)) {\n      // Uses custom default permissions or UFS default permissions\n      if (UploadFS.config.defaultStorePermissions instanceof StorePermissions) {\n        self.permissions = UploadFS.config.defaultStorePermissions;\n      } else {\n        self.permissions = new StorePermissions();\n        console.warn(\"ufs: permissions are not defined for store \\\"\".concat(options.name, \"\\\"\"));\n      }\n    }\n\n    if (Meteor.isServer) {\n      /**\n       * Checks token validity\n       * @param token\n       * @param fileId\n       * @returns {boolean}\n       */\n      self.checkToken = function (token, fileId) {\n        check(token, String);\n        check(fileId, String);\n        return Tokens.find({\n          value: token,\n          fileId\n        }).count() === 1;\n      };\n      /**\n       * Copies the file to a store\n       * @param fileId\n       * @param store\n       * @param callback\n       */\n\n\n      self.copy = function (fileId, store, callback) {\n        check(fileId, String);\n\n        if (!(store instanceof Store)) {\n          throw new TypeError('store is not an instance of UploadFS.Store');\n        } // Get original file\n\n\n        const file = self.getCollection().findOne({\n          _id: fileId\n        });\n\n        if (!file) {\n          throw new Meteor.Error('file-not-found', 'File not found');\n        } // Silently ignore the file if it does not match filter\n\n\n        const filter = store.getFilter();\n\n        if (filter instanceof Filter && !filter.isValid(file)) {\n          return;\n        } // Prepare copy\n\n\n        const {\n          _id,\n          url\n        } = file,\n              copy = _objectWithoutProperties(file, _excluded);\n\n        copy.originalStore = self.getName();\n        copy.originalId = fileId; // Create the copy\n\n        const copyId = store.create(copy); // Get original stream\n\n        const rs = self.getReadStream(fileId, file); // Catch errors to avoid app crashing\n\n        rs.on('error', Meteor.bindEnvironment(function (err) {\n          callback.call(self, err, null);\n        })); // Copy file data\n\n        store.write(rs, copyId, Meteor.bindEnvironment(function (err) {\n          if (err) {\n            self.getCollection().remove({\n              _id: copyId\n            });\n            self.onCopyError.call(self, err, fileId, file);\n          }\n\n          if (typeof callback === 'function') {\n            callback.call(self, err, copyId, copy, store);\n          }\n        }));\n      };\n      /**\n       * Creates the file in the collection\n       * @param file\n       * @param callback\n       * @return {string}\n       */\n\n\n      self.create = function (file, callback) {\n        check(file, Object);\n        file.store = self.options.name; // assign store to file\n\n        return self.getCollection().insert(file, callback);\n      };\n      /**\n       * Creates a token for the file (only needed for client side upload)\n       * @param fileId\n       * @returns {*}\n       */\n\n\n      self.createToken = function (fileId) {\n        const token = self.generateToken(); // Check if token exists\n\n        if (Tokens.find({\n          fileId\n        }).count()) {\n          Tokens.update({\n            fileId\n          }, {\n            $set: {\n              createdAt: new Date(),\n              value: token\n            }\n          });\n        } else {\n          Tokens.insert({\n            createdAt: new Date(),\n            fileId,\n            value: token\n          });\n        }\n\n        return token;\n      };\n      /**\n       * Writes the file to the store\n       * @param rs\n       * @param fileId\n       * @param callback\n       */\n\n\n      self.write = function (rs, fileId, callback) {\n        const file = self.getCollection().findOne({\n          _id: fileId\n        });\n        const errorHandler = Meteor.bindEnvironment(function (err) {\n          self.onWriteError.call(self, err, fileId, file);\n          callback.call(self, err);\n        });\n        const finishHandler = Meteor.bindEnvironment(function () {\n          let size = 0;\n          const readStream = self.getReadStream(fileId, file);\n          readStream.on('error', Meteor.bindEnvironment(function (error) {\n            callback.call(self, error, null);\n          }));\n          readStream.on('data', Meteor.bindEnvironment(function (data) {\n            size += data.length;\n          }));\n          readStream.on('end', Meteor.bindEnvironment(function () {\n            if (file.complete) {\n              return;\n            } // Set file attribute\n\n\n            file.complete = true;\n            file.etag = UploadFS.generateEtag();\n            file.path = self.getFileRelativeURL(fileId);\n            file.progress = 1;\n            file.size = size;\n            file.token = self.generateToken();\n            file.uploading = false;\n            file.uploadedAt = new Date();\n            file.url = self.getFileURL(fileId); // Execute callback\n\n            if (typeof self.onFinishUpload === 'function') {\n              self.onFinishUpload.call(self, file);\n            } // Sets the file URL when file transfer is complete,\n            // this way, the image will loads entirely.\n\n\n            self.getCollection().direct.update({\n              _id: fileId\n            }, {\n              $set: {\n                complete: file.complete,\n                etag: file.etag,\n                path: file.path,\n                progress: file.progress,\n                size: file.size,\n                token: file.token,\n                uploading: file.uploading,\n                uploadedAt: file.uploadedAt,\n                url: file.url\n              }\n            }); // Return file info\n\n            callback.call(self, null, file); // Simulate write speed\n\n            if (UploadFS.config.simulateWriteDelay) {\n              Meteor._sleepForMs(UploadFS.config.simulateWriteDelay);\n            } // Copy file to other stores\n\n\n            if (self.options.copyTo instanceof Array) {\n              for (let i = 0; i < self.options.copyTo.length; i += 1) {\n                const store = self.options.copyTo[i];\n\n                if (!store.getFilter() || store.getFilter().isValid(file)) {\n                  self.copy(fileId, store);\n                }\n              }\n            }\n          }));\n        });\n        const ws = self.getWriteStream(fileId, file);\n        ws.on('error', errorHandler);\n        ws.once('finish', finishHandler); // Execute transformation\n\n        self.transformWrite(rs, ws, fileId, file);\n      };\n    }\n\n    if (Meteor.isServer) {\n      // eslint-disable-next-line no-undef\n      const fs = Npm.require('fs');\n\n      const collection = self.getCollection(); // Code executed after removing file\n\n      collection.after.remove(function (userId, file) {\n        // Remove associated tokens\n        Tokens.remove({\n          fileId: file._id\n        });\n\n        if (self.options.copyTo instanceof Array) {\n          for (let i = 0; i < self.options.copyTo.length; i += 1) {\n            // Remove copies in stores\n            self.options.copyTo[i].getCollection().remove({\n              originalId: file._id\n            });\n          }\n        }\n      }); // Code executed before inserting file\n\n      collection.before.insert(function (userId, file) {\n        if (!self.permissions.checkInsert(userId, file)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        }\n      }); // Code executed before updating file\n\n      collection.before.update(function (userId, file, fields, modifiers) {\n        if (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        }\n      }); // Code executed before removing file\n\n      collection.before.remove(function (userId, file) {\n        if (!self.permissions.checkRemove(userId, file)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        } // Delete the physical file in the store\n\n\n        self.delete(file._id);\n        const tmpFile = UploadFS.getTempFilePath(file._id); // Delete the temp file\n\n        fs.stat(tmpFile, function (err) {\n          !err && fs.unlink(tmpFile, function (err) {\n            err && console.error(\"ufs: cannot delete temp file at \".concat(tmpFile, \" (\").concat(err.message, \")\"));\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Deletes a file async\n   * @param fileId\n   * @param callback\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  delete(fileId, callback) {\n    throw new Error('delete is not implemented');\n  }\n  /**\n   * Generates a random token\n   * @param pattern\n   * @return {string}\n   */\n\n\n  generateToken(pattern) {\n    return (pattern || 'xyxyxyxyxy').replace(/[xy]/g, c => {\n      // eslint-disable-next-line no-mixed-operators\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      const s = v.toString(16);\n      return Math.round(Math.random()) ? s.toUpperCase() : s;\n    });\n  }\n  /**\n   * Returns the collection\n   * @return {Mongo.Collection}\n   */\n\n\n  getCollection() {\n    return this.options.collection;\n  }\n  /**\n   * Returns the file URL\n   * @param fileId\n   * @return {string|null}\n   */\n\n\n  getFileRelativeURL(fileId) {\n    const file = this.getCollection().findOne(fileId, {\n      fields: {\n        name: 1\n      }\n    });\n    return file ? this.getRelativeURL(\"\".concat(fileId, \"/\").concat(file.name)) : null;\n  }\n  /**\n   * Returns the file URL\n   * @param fileId\n   * @return {string|null}\n   */\n\n\n  getFileURL(fileId) {\n    const file = this.getCollection().findOne(fileId, {\n      fields: {\n        name: 1\n      }\n    });\n    return file ? this.getURL(\"\".concat(fileId, \"/\").concat(file.name)) : null;\n  }\n  /**\n   * Returns the file filter\n   * @return {UploadFS.Filter}\n   */\n\n\n  getFilter() {\n    return this.options.filter;\n  }\n  /**\n   * Returns the store name\n   * @return {string}\n   */\n\n\n  getName() {\n    return this.options.name;\n  }\n  /**\n   * Returns the file read stream\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  getReadStream(fileId, file) {\n    throw new Error('Store.getReadStream is not implemented');\n  }\n  /**\n   * Returns the store relative URL\n   * @param path\n   * @return {string}\n   */\n\n\n  getRelativeURL(path) {\n    const rootUrl = Meteor.absoluteUrl().replace(/\\/+$/, '');\n    const rootPath = rootUrl.replace(/^[a-z]+:\\/\\/[^/]+\\/*/gi, '');\n    const storeName = this.getName();\n    path = String(path).replace(/\\/$/, '').trim();\n    return encodeURI(\"\".concat(rootPath, \"/\").concat(UploadFS.config.storesPath, \"/\").concat(storeName, \"/\").concat(path));\n  }\n  /**\n   * Returns the store absolute URL\n   * @param path\n   * @return {string}\n   */\n\n\n  getURL(path) {\n    const rootUrl = Meteor.absoluteUrl({\n      secure: UploadFS.config.https\n    }).replace(/\\/+$/, '');\n    const storeName = this.getName();\n    path = String(path).replace(/\\/$/, '').trim();\n    return encodeURI(\"\".concat(rootUrl, \"/\").concat(UploadFS.config.storesPath, \"/\").concat(storeName, \"/\").concat(path));\n  }\n  /**\n   * Returns the file write stream\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  getWriteStream(fileId, file) {\n    throw new Error('getWriteStream is not implemented');\n  }\n  /**\n   * Completes the file upload\n   * @param url\n   * @param file\n   * @param callback\n   */\n\n\n  importFromURL(url, file, callback) {\n    Meteor.call('ufsImportURL', url, file, this.getName(), callback);\n  }\n  /**\n   * Called when a copy error happened\n   * @param err\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onCopyError(err, fileId, file) {\n    console.error(\"ufs: cannot copy file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Called when a file has been uploaded\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onFinishUpload(file) {}\n  /**\n   * Called when a file is read from the store\n   * @param fileId\n   * @param file\n   * @param request\n   * @param response\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onRead(fileId, file, request, response) {\n    return true;\n  }\n  /**\n   * Called when a read error happened\n   * @param err\n   * @param fileId\n   * @param file\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onReadError(err, fileId, file) {\n    console.error(\"ufs: cannot read file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Called when file is being validated\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onValidate(file) {}\n  /**\n   * Called when a write error happened\n   * @param err\n   * @param fileId\n   * @param file\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onWriteError(err, fileId, file) {\n    console.error(\"ufs: cannot write file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Sets the store permissions\n   * @param permissions\n   */\n\n\n  setPermissions(permissions) {\n    if (!(permissions instanceof StorePermissions)) {\n      throw new TypeError('Permissions is not an instance of UploadFS.StorePermissions');\n    }\n\n    this.permissions = permissions;\n  }\n  /**\n   * Transforms the file on reading\n   * @param readStream\n   * @param writeStream\n   * @param fileId\n   * @param file\n   * @param request\n   * @param headers\n   */\n\n\n  transformRead(readStream, writeStream, fileId, file, request, headers) {\n    if (typeof this.options.transformRead === 'function') {\n      this.options.transformRead.call(this, readStream, writeStream, fileId, file, request, headers);\n    } else {\n      readStream.pipe(writeStream);\n    }\n  }\n  /**\n   * Transforms the file on writing\n   * @param readStream\n   * @param writeStream\n   * @param fileId\n   * @param file\n   */\n\n\n  transformWrite(readStream, writeStream, fileId, file) {\n    if (typeof this.options.transformWrite === 'function') {\n      this.options.transformWrite.call(this, readStream, writeStream, fileId, file);\n    } else {\n      readStream.pipe(writeStream);\n    }\n  }\n  /**\n   * Validates the file\n   * @param file\n   */\n\n\n  validate(file) {\n    if (typeof this.onValidate === 'function') {\n      this.onValidate(file);\n    }\n  }\n\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-tokens.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-tokens.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  Tokens: () => Tokens\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Tokens = new Mongo.Collection('ufsTokens');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ufs-uploader.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/jalik_ufs/ufs-uploader.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  Uploader: () => Uploader\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Store;\nmodule.link(\"./ufs-store\", {\n  Store(v) {\n    Store = v;\n  }\n\n}, 2);\n\nclass Uploader {\n  constructor(options) {\n    const self = this; // Set default options\n\n    options = _.extend({\n      adaptive: true,\n      capacity: 0.9,\n      chunkSize: 16 * 1024,\n      data: null,\n      file: null,\n      maxChunkSize: 4 * 1024 * 1000,\n      maxTries: 5,\n      onAbort: this.onAbort,\n      onComplete: this.onComplete,\n      onCreate: this.onCreate,\n      onError: this.onError,\n      onProgress: this.onProgress,\n      onStart: this.onStart,\n      onStop: this.onStop,\n      retryDelay: 2000,\n      store: null,\n      transferDelay: 100\n    }, options); // Check options\n\n    if (typeof options.adaptive !== 'boolean') {\n      throw new TypeError('adaptive is not a number');\n    }\n\n    if (typeof options.capacity !== 'number') {\n      throw new TypeError('capacity is not a number');\n    }\n\n    if (options.capacity <= 0 || options.capacity > 1) {\n      throw new RangeError('capacity must be a float between 0.1 and 1.0');\n    }\n\n    if (typeof options.chunkSize !== 'number') {\n      throw new TypeError('chunkSize is not a number');\n    }\n\n    if (!(options.data instanceof Blob) && !(options.data instanceof File)) {\n      throw new TypeError('data is not an Blob or File');\n    }\n\n    if (options.file === null || typeof options.file !== 'object') {\n      throw new TypeError('file is not an object');\n    }\n\n    if (typeof options.maxChunkSize !== 'number') {\n      throw new TypeError('maxChunkSize is not a number');\n    }\n\n    if (typeof options.maxTries !== 'number') {\n      throw new TypeError('maxTries is not a number');\n    }\n\n    if (typeof options.retryDelay !== 'number') {\n      throw new TypeError('retryDelay is not a number');\n    }\n\n    if (typeof options.transferDelay !== 'number') {\n      throw new TypeError('transferDelay is not a number');\n    }\n\n    if (typeof options.onAbort !== 'function') {\n      throw new TypeError('onAbort is not a function');\n    }\n\n    if (typeof options.onComplete !== 'function') {\n      throw new TypeError('onComplete is not a function');\n    }\n\n    if (typeof options.onCreate !== 'function') {\n      throw new TypeError('onCreate is not a function');\n    }\n\n    if (typeof options.onError !== 'function') {\n      throw new TypeError('onError is not a function');\n    }\n\n    if (typeof options.onProgress !== 'function') {\n      throw new TypeError('onProgress is not a function');\n    }\n\n    if (typeof options.onStart !== 'function') {\n      throw new TypeError('onStart is not a function');\n    }\n\n    if (typeof options.onStop !== 'function') {\n      throw new TypeError('onStop is not a function');\n    }\n\n    if (typeof options.store !== 'string' && !(options.store instanceof Store)) {\n      throw new TypeError('store must be the name of the store or an instance of UploadFS.Store');\n    } // Public attributes\n\n\n    self.adaptive = options.adaptive;\n    self.capacity = parseFloat(options.capacity);\n    self.chunkSize = parseInt(options.chunkSize);\n    self.maxChunkSize = parseInt(options.maxChunkSize);\n    self.maxTries = parseInt(options.maxTries);\n    self.retryDelay = parseInt(options.retryDelay);\n    self.transferDelay = parseInt(options.transferDelay);\n    self.onAbort = options.onAbort;\n    self.onComplete = options.onComplete;\n    self.onCreate = options.onCreate;\n    self.onError = options.onError;\n    self.onProgress = options.onProgress;\n    self.onStart = options.onStart;\n    self.onStop = options.onStop; // Private attributes\n\n    let {\n      store\n    } = options;\n    const {\n      data\n    } = options;\n    const capacityMargin = 0.1;\n    let {\n      file\n    } = options;\n    let fileId = null;\n    let offset = 0;\n    let loaded = 0;\n    const total = data.size;\n    let tries = 0;\n    let postUrl = null;\n    let token = null;\n    let complete = false;\n    let uploading = false;\n    let timeA = null;\n    let timeB = null;\n    let elapsedTime = 0;\n    let startTime = 0; // Keep only the name of the store\n\n    if (store instanceof Store) {\n      store = store.getName();\n    } // Assign file to store\n\n\n    file.store = store;\n\n    function finish() {\n      // Finish the upload by telling the store the upload is complete\n      Meteor.call('ufsComplete', fileId, store, token, function (err, uploadedFile) {\n        if (err) {\n          self.onError(err, file);\n          self.abort();\n        } else if (uploadedFile) {\n          uploading = false;\n          complete = true;\n          file = uploadedFile;\n          self.onComplete(uploadedFile);\n        }\n      });\n    }\n    /**\n     * Aborts the current transfer\n     */\n\n\n    self.abort = function () {\n      // Remove the file from database\n      // eslint-disable-next-line no-unused-vars\n      Meteor.call('ufsDelete', fileId, store, token, function (err, result) {\n        if (err) {\n          self.onError(err, file);\n        }\n      }); // Reset uploader status\n\n      uploading = false;\n      fileId = null;\n      offset = 0;\n      tries = 0;\n      loaded = 0;\n      complete = false;\n      startTime = null;\n      self.onAbort(file);\n    };\n    /**\n     * Returns the average speed in bytes per second\n     * @returns {number}\n     */\n\n\n    self.getAverageSpeed = function () {\n      const seconds = self.getElapsedTime() / 1000;\n      return self.getLoaded() / seconds;\n    };\n    /**\n     * Returns the elapsed time in milliseconds\n     * @returns {number}\n     */\n\n\n    self.getElapsedTime = function () {\n      if (startTime && self.isUploading()) {\n        return elapsedTime + (Date.now() - startTime);\n      }\n\n      return elapsedTime;\n    };\n    /**\n     * Returns the file\n     * @return {object}\n     */\n\n\n    self.getFile = function () {\n      return file;\n    };\n    /**\n     * Returns the loaded bytes\n     * @return {number}\n     */\n\n\n    self.getLoaded = function () {\n      return loaded;\n    };\n    /**\n     * Returns current progress\n     * @return {number}\n     */\n\n\n    self.getProgress = function () {\n      return Math.min(loaded / total * 100 / 100, 1.0);\n    };\n    /**\n     * Returns the remaining time in milliseconds\n     * @returns {number}\n     */\n\n\n    self.getRemainingTime = function () {\n      const averageSpeed = self.getAverageSpeed();\n      const remainingBytes = total - self.getLoaded();\n      return averageSpeed && remainingBytes ? Math.max(remainingBytes / averageSpeed, 0) : 0;\n    };\n    /**\n     * Returns the upload speed in bytes per second\n     * @returns {number}\n     */\n\n\n    self.getSpeed = function () {\n      if (timeA && timeB && self.isUploading()) {\n        const seconds = (timeB - timeA) / 1000;\n        return self.chunkSize / seconds;\n      }\n\n      return 0;\n    };\n    /**\n     * Returns the total bytes\n     * @return {number}\n     */\n\n\n    self.getTotal = function () {\n      return total;\n    };\n    /**\n     * Checks if the transfer is complete\n     * @return {boolean}\n     */\n\n\n    self.isComplete = function () {\n      return complete;\n    };\n    /**\n     * Checks if the transfer is active\n     * @return {boolean}\n     */\n\n\n    self.isUploading = function () {\n      return uploading;\n    };\n    /**\n     * Reads a portion of file\n     * @param start\n     * @param length\n     * @param callback\n     * @returns {Blob}\n     */\n\n\n    self.readChunk = function (start, length, callback) {\n      if (typeof callback !== 'function') {\n        throw new Error('readChunk is missing callback');\n      }\n\n      try {\n        let end; // Calculate the chunk size\n\n        if (length && start + length > total) {\n          end = total;\n        } else {\n          end = start + length;\n        } // Get chunk\n\n\n        const chunk = data.slice(start, end); // Pass chunk to callback\n\n        callback.call(self, null, chunk);\n      } catch (err) {\n        console.error('read error', err); // Retry to read chunk\n\n        Meteor.setTimeout(function () {\n          if (tries < self.maxTries) {\n            tries += 1;\n            self.readChunk(start, length, callback);\n          }\n        }, self.retryDelay);\n      }\n    };\n    /**\n     * Sends a file chunk to the store\n     */\n\n\n    self.sendChunk = function () {\n      if (!complete && startTime !== null) {\n        if (offset < total) {\n          let {\n            chunkSize\n          } = self; // Use adaptive length\n\n          if (self.adaptive && timeA && timeB && timeB > timeA) {\n            const duration = (timeB - timeA) / 1000;\n            const max = self.capacity * (1 + capacityMargin);\n            const min = self.capacity * (1 - capacityMargin);\n\n            if (duration >= max) {\n              chunkSize = Math.abs(Math.round(chunkSize * (max - duration)));\n            } else if (duration < min) {\n              chunkSize = Math.round(chunkSize * (min / duration));\n            } // Limit to max chunk size\n\n\n            if (self.maxChunkSize > 0 && chunkSize > self.maxChunkSize) {\n              chunkSize = self.maxChunkSize;\n            }\n          } // Reduce chunk size to fit total\n\n\n          if (offset + chunkSize > total) {\n            chunkSize = total - offset;\n          } // Prepare the chunk\n\n\n          self.readChunk(offset, chunkSize, function (err, chunk) {\n            if (err) {\n              self.onError(err, file);\n              return;\n            }\n\n            const xhr = new XMLHttpRequest();\n\n            xhr.onreadystatechange = function () {\n              if (xhr.readyState === 4) {\n                if ([200, 201, 202, 204].includes(xhr.status)) {\n                  timeB = Date.now();\n                  offset += chunkSize;\n                  loaded += chunkSize; // Send next chunk\n\n                  self.onProgress(file, self.getProgress()); // Finish upload\n\n                  if (loaded >= total) {\n                    elapsedTime = Date.now() - startTime;\n                    finish();\n                  } else {\n                    Meteor.setTimeout(self.sendChunk, self.transferDelay);\n                  }\n                } else if (![402, 403, 404, 500].includes(xhr.status)) {\n                  // Retry until max tries is reach\n                  // But don't retry if these errors occur\n                  if (tries <= self.maxTries) {\n                    tries += 1; // Wait before retrying\n\n                    Meteor.setTimeout(self.sendChunk, self.retryDelay);\n                  } else {\n                    self.abort();\n                  }\n                } else {\n                  self.abort();\n                }\n              }\n            }; // Calculate upload progress\n\n\n            const progress = (offset + chunkSize) / total; // let formData = new FormData();\n            // formData.append('progress', progress);\n            // formData.append('chunk', chunk);\n\n            const url = \"\".concat(postUrl, \"&progress=\").concat(progress);\n            timeA = Date.now();\n            timeB = null;\n            uploading = true; // Send chunk to the store\n\n            xhr.open('POST', url, true);\n            xhr.send(chunk);\n          });\n        }\n      }\n    };\n    /**\n     * Starts or resumes the transfer\n     */\n\n\n    self.start = function () {\n      if (!fileId) {\n        // Create the file document and get the token\n        // that allows the user to send chunks to the store.\n        Meteor.call('ufsCreate', _.extend({}, file), function (err, result) {\n          if (err) {\n            self.onError(err, file);\n          } else if (result) {\n            token = result.token;\n            postUrl = result.url;\n            fileId = result.fileId;\n            file._id = result.fileId;\n            self.onCreate(file);\n            tries = 0;\n            startTime = Date.now();\n            self.onStart(file);\n            self.sendChunk();\n          }\n        });\n      } else if (!uploading && !complete) {\n        // Resume uploading\n        tries = 0;\n        startTime = Date.now();\n        self.onStart(file);\n        self.sendChunk();\n      }\n    };\n    /**\n     * Stops the transfer\n     */\n\n\n    self.stop = function () {\n      if (uploading) {\n        // Update elapsed time\n        elapsedTime = Date.now() - startTime;\n        startTime = null;\n        uploading = false;\n        self.onStop(file); // eslint-disable-next-line no-unused-vars\n\n        Meteor.call('ufsStop', fileId, store, token, function (err, result) {\n          if (err) {\n            self.onError(err, file);\n          }\n        });\n      }\n    };\n  }\n  /**\n   * Called when the file upload is aborted\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onAbort(file) {}\n  /**\n   * Called when the file upload is complete\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onComplete(file) {}\n  /**\n   * Called when the file is created in the collection\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onCreate(file) {}\n  /**\n   * Called when an error occurs during file upload\n   * @param err\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onError(err, file) {\n    console.error(\"ufs: \".concat(err.message));\n  }\n  /**\n   * Called when a file chunk has been sent\n   * @param file\n   * @param progress is a float from 0.0 to 1.0\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onProgress(file, progress) {}\n  /**\n   * Called when the file upload starts\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onStart(file) {}\n  /**\n   * Called when the file upload stops\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onStop(file) {}\n\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"spark-md5\":{\"package.json\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/jalik_ufs/node_modules/spark-md5/package.json                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.exports = {\n  \"name\": \"spark-md5\",\n  \"version\": \"3.0.0\",\n  \"main\": \"spark-md5.js\"\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"spark-md5.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/jalik_ufs/node_modules/spark-md5/spark-md5.js                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.useNode();\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/jalik:ufs/ufs.js\");\n\n/* Exports */\nPackage._define(\"jalik:ufs\", exports);\n\n})();\n","servePath":"/packages/jalik_ufs.js","sourceMap":{"version":3,"sources":["packages/jalik:ufs/ufs.js","packages/jalik:ufs/ufs-config.js","packages/jalik:ufs/ufs-filter.js","packages/jalik:ufs/ufs-methods.js","packages/jalik:ufs/ufs-mime.js","packages/jalik:ufs/ufs-server.js","packages/jalik:ufs/ufs-store-permissions.js","packages/jalik:ufs/ufs-store.js","packages/jalik:ufs/ufs-tokens.js","packages/jalik:ufs/ufs-uploader.js"],"names":["module1","export","UploadFS","Meteor","link","v","Random","Config","Filter","MIME","Store","StorePermissions","Tokens","Uploader","stores","store","tokens","addETagAttributeToFiles","where","getStores","forEach","files","getCollection","find","etag","fields","_id","file","direct","update","$set","generateEtag","addMimeType","extension","mime","toLowerCase","addPathAttributeToFiles","path","getFileRelativeURL","addStore","TypeError","getName","id","getMimeType","getMimeTypes","getStore","name","getTempFilePath","fileId","config","tmpDir","importFromURL","url","callback","call","readAsArrayBuffer","console","error","selectFile","input","document","createElement","type","multiple","onchange","ev","target","div","className","style","appendChild","body","click","selectFiles","i","length","isServer","require","global","isClient","window","module","_","constructor","options","extend","defaultStorePermissions","https","simulateReadDelay","simulateUploadSpeed","simulateWriteDelay","storesPath","tmpDirPermissions","parseInt","self","contentTypes","extensions","minSize","maxSize","invalidFileError","Error","fileTooSmallError","fileSize","minFileSize","fileTooLargeError","maxFileSize","invalidFileExtension","fileExtension","allowedExtensions","invalidFileType","fileType","allowedContentTypes","onCheck","Array","method","check","size","getMinSize","getMaxSize","getExtensions","includes","getContentTypes","fileTypes","isContentTypeInList","list","wildCardGlob","wildcards","filter","item","indexOf","replace","isValid","result","err","fs","Npm","http","Future","methods","ufsComplete","storeName","token","String","checkToken","fut","tmpFile","removeTempFile","unlink","message","findOne","validate","rs","createReadStream","flags","encoding","autoClose","on","bindEnvironment","remove","throw","write","return","wait","ufsCreate","Object","complete","uploading","substr","lastIndexOf","progress","userId","getFilter","create","createToken","uploadUrl","getURL","ufsDelete","count","ufsImportURL","parsedUrl","URL","e","hostname","split","pop","originalUrl","warn","proto","test","unblock","get","res","ufsStop","WebApp","SparkMD5","default","domain","mkdirp","stream","zlib","startup","mode","stat","log","chmod","d","connectHandlers","use","req","next","parse","pathname","allowCORS","setHeader","regExp","RegExp","match","exec","writeHead","end","query","unique","hash","originalId","$ne","spark","ArrayBuffer","ws","createWriteStream","parseFloat","isNaN","Math","min","chunk","append","onRead","undefined","index","_sleepForMs","run","status","headers","ETag","modifiedAt","Date","toUTCString","uploadedAt","modifiedSince","range","total","unit","ranges","r","start","getReadStream","PassThrough","onReadError","emit","transformRead","accept","pipe","createGzip","createDeflate","insert","actions","action","modifiers","checkInsert","checkRemove","checkUpdate","_objectWithoutProperties","Mongo","collection","onCopyError","onFinishUpload","onValidate","onWriteError","permissions","transformWrite","Collection","value","copy","originalStore","copyId","generateToken","createdAt","errorHandler","finishHandler","readStream","data","getFileURL","copyTo","getWriteStream","once","after","before","delete","pattern","c","random","s","toString","round","toUpperCase","getRelativeURL","rootUrl","absoluteUrl","rootPath","trim","encodeURI","secure","request","response","setPermissions","writeStream","adaptive","capacity","chunkSize","maxChunkSize","maxTries","onAbort","onComplete","onCreate","onError","onProgress","onStart","onStop","retryDelay","transferDelay","RangeError","Blob","File","capacityMargin","offset","loaded","tries","postUrl","timeA","timeB","elapsedTime","startTime","finish","uploadedFile","abort","getAverageSpeed","seconds","getElapsedTime","getLoaded","isUploading","now","getFile","getProgress","getRemainingTime","averageSpeed","remainingBytes","max","getSpeed","getTotal","isComplete","readChunk","slice","setTimeout","sendChunk","duration","abs","xhr","XMLHttpRequest","onreadystatechange","readyState","open","send","stop"],"mappings":"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","file":"/packages/jalik_ufs.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport { Config } from './ufs-config';\nimport { Filter } from './ufs-filter';\nimport { MIME } from './ufs-mime';\nimport { Store } from './ufs-store';\nimport { StorePermissions } from './ufs-store-permissions';\nimport { Tokens } from './ufs-tokens';\nimport { Uploader } from './ufs-uploader';\n\nconst stores = {};\n\nexport const UploadFS = {\n\t/**\n\t * Contains all stores\n\t */\n\tstore: {},\n\n\t/**\n\t * Collection of tokens\n\t */\n\ttokens: Tokens,\n\n\t/**\n\t * Adds the \"etag\" attribute to files\n\t * @param where\n\t */\n\taddETagAttributeToFiles(where) {\n\t\tthis.getStores().forEach((store) => {\n\t\t\tconst files = store.getCollection();\n\n\t\t\t// By default update only files with no path set\n\t\t\tfiles.find(where || { etag: null }, { fields: { _id: 1 } }).forEach((file) => {\n\t\t\t\tfiles.direct.update(file._id, { $set: { etag: this.generateEtag() } });\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * Adds the MIME type for an extension\n\t * @param extension\n\t * @param mime\n\t */\n\taddMimeType(extension, mime) {\n\t\tMIME[extension.toLowerCase()] = mime;\n\t},\n\n\t/**\n\t * Adds the \"path\" attribute to files\n\t * @param where\n\t */\n\taddPathAttributeToFiles(where) {\n\t\tthis.getStores().forEach((store) => {\n\t\t\tconst files = store.getCollection();\n\n\t\t\t// By default update only files with no path set\n\t\t\tfiles.find(where || { path: null }, { fields: { _id: 1 } }).forEach((file) => {\n\t\t\t\tfiles.direct.update(file._id, { $set: { path: store.getFileRelativeURL(file._id) } });\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * Registers the store\n\t * @param store\n\t */\n\taddStore(store) {\n\t\tif (!(store instanceof Store)) {\n\t\t\tthrow new TypeError('ufs: store is not an instance of UploadFS.Store.');\n\t\t}\n\t\tstores[store.getName()] = store;\n\t},\n\n\t/**\n\t * Generates a unique ETag\n\t * @return {string}\n\t */\n\tgenerateEtag() {\n\t\treturn Random.id();\n\t},\n\n\t/**\n\t * Returns the MIME type of the extension\n\t * @param extension\n\t * @returns {*}\n\t */\n\tgetMimeType(extension) {\n\t\textension = extension.toLowerCase();\n\t\treturn MIME[extension];\n\t},\n\n\t/**\n\t * Returns all MIME types\n\t */\n\tgetMimeTypes() {\n\t\treturn MIME;\n\t},\n\n\t/**\n\t * Returns the store by its name\n\t * @param name\n\t * @return {UploadFS.Store}\n\t */\n\tgetStore(name) {\n\t\treturn stores[name];\n\t},\n\n\t/**\n\t * Returns all stores\n\t * @return {object}\n\t */\n\tgetStores() {\n\t\treturn stores;\n\t},\n\n\t/**\n\t * Returns the temporary file path\n\t * @param fileId\n\t * @return {string}\n\t */\n\tgetTempFilePath(fileId) {\n\t\treturn `${this.config.tmpDir}/${fileId}`;\n\t},\n\n\t/**\n\t * Imports a file from a URL\n\t * @param url\n\t * @param file\n\t * @param store\n\t * @param callback\n\t */\n\timportFromURL(url, file, store, callback) {\n\t\tif (typeof store === 'string') {\n\t\t\tMeteor.call('ufsImportURL', url, file, store, callback);\n\t\t} else if (typeof store === 'object') {\n\t\t\tstore.importFromURL(url, file, callback);\n\t\t}\n\t},\n\n\t/**\n\t * Returns file and data as ArrayBuffer for each files in the event\n\t * @deprecated\n\t * @param event\n\t * @param callback\n\t */\n\treadAsArrayBuffer() {\n\t\tconsole.error('UploadFS.readAsArrayBuffer is deprecated, see https://github.com/jalik/jalik-ufs#uploading-from-a-file');\n\t},\n\n\t/**\n\t * Opens a dialog to select a single file\n\t * @param callback\n\t */\n\tselectFile(callback) {\n\t\tconst input = document.createElement('input');\n\t\tinput.type = 'file';\n\t\tinput.multiple = false;\n\t\tinput.onchange = (ev) => {\n\t\t\tconst { files } = ev.target;\n\t\t\tcallback.call(UploadFS, files[0]);\n\t\t};\n\t\t// Fix for iOS/Safari\n\t\tconst div = document.createElement('div');\n\t\tdiv.className = 'ufs-file-selector';\n\t\tdiv.style = 'display:none; height:0; width:0; overflow: hidden;';\n\t\tdiv.appendChild(input);\n\t\tdocument.body.appendChild(div);\n\t\t// Trigger file selection\n\t\tinput.click();\n\t},\n\n\t/**\n\t * Opens a dialog to select multiple files\n\t * @param callback\n\t */\n\tselectFiles(callback) {\n\t\tconst input = document.createElement('input');\n\t\tinput.type = 'file';\n\t\tinput.multiple = true;\n\t\tinput.onchange = (ev) => {\n\t\t\tconst { files } = ev.target;\n\n\t\t\tfor (let i = 0; i < files.length; i += 1) {\n\t\t\t\tcallback.call(UploadFS, files[i]);\n\t\t\t}\n\t\t};\n\t\t// Fix for iOS/Safari\n\t\tconst div = document.createElement('div');\n\t\tdiv.className = 'ufs-file-selector';\n\t\tdiv.style = 'display:none; height:0; width:0; overflow: hidden;';\n\t\tdiv.appendChild(input);\n\t\tdocument.body.appendChild(div);\n\t\t// Trigger file selection\n\t\tinput.click();\n\t},\n};\n\nif (Meteor.isServer) {\n\trequire('./ufs-methods');\n\trequire('./ufs-server');\n}\n\n/**\n * UploadFS Configuration\n * @type {Config}\n */\nUploadFS.config = new Config();\n\n// Add classes to global namespace\nUploadFS.Config = Config;\nUploadFS.Filter = Filter;\nUploadFS.Store = Store;\nUploadFS.StorePermissions = StorePermissions;\nUploadFS.Uploader = Uploader;\n\nif (Meteor.isServer) {\n\t// Expose the module globally\n\tif (typeof global !== 'undefined') {\n\t\tglobal.UploadFS = UploadFS;\n\t}\n} else if (Meteor.isClient) {\n\t// Expose the module globally\n\tif (typeof window !== 'undefined') {\n\t\twindow.UploadFS = UploadFS;\n\t}\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { _ } from 'meteor/underscore';\n\nimport { StorePermissions } from './ufs-store-permissions';\n\n/**\n * UploadFS configuration\n */\nexport class Config {\n\tconstructor(options) {\n\t\t// Default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tdefaultStorePermissions: null,\n\t\t\t\thttps: false,\n\t\t\t\tsimulateReadDelay: 0,\n\t\t\t\tsimulateUploadSpeed: 0,\n\t\t\t\tsimulateWriteDelay: 0,\n\t\t\t\tstoresPath: 'ufs',\n\t\t\t\ttmpDir: '/tmp/ufs',\n\t\t\t\ttmpDirPermissions: '0700',\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (options.defaultStorePermissions && !(options.defaultStorePermissions instanceof StorePermissions)) {\n\t\t\tthrow new TypeError('Config: defaultStorePermissions is not an instance of StorePermissions');\n\t\t}\n\t\tif (typeof options.https !== 'boolean') {\n\t\t\tthrow new TypeError('Config: https is not a function');\n\t\t}\n\t\tif (typeof options.simulateReadDelay !== 'number') {\n\t\t\tthrow new TypeError('Config: simulateReadDelay is not a number');\n\t\t}\n\t\tif (typeof options.simulateUploadSpeed !== 'number') {\n\t\t\tthrow new TypeError('Config: simulateUploadSpeed is not a number');\n\t\t}\n\t\tif (typeof options.simulateWriteDelay !== 'number') {\n\t\t\tthrow new TypeError('Config: simulateWriteDelay is not a number');\n\t\t}\n\t\tif (typeof options.storesPath !== 'string') {\n\t\t\tthrow new TypeError('Config: storesPath is not a string');\n\t\t}\n\t\tif (typeof options.tmpDir !== 'string') {\n\t\t\tthrow new TypeError('Config: tmpDir is not a string');\n\t\t}\n\t\tif (typeof options.tmpDirPermissions !== 'string') {\n\t\t\tthrow new TypeError('Config: tmpDirPermissions is not a string');\n\t\t}\n\n\t\t/**\n\t\t * Default store permissions\n\t\t * @type {UploadFS.StorePermissions}\n\t\t */\n\t\tthis.defaultStorePermissions = options.defaultStorePermissions;\n\t\t/**\n\t\t * Use or not secured protocol in URLS\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.https = options.https;\n\t\t/**\n\t\t * The simulation read delay\n\t\t * @type {Number}\n\t\t */\n\t\tthis.simulateReadDelay = parseInt(options.simulateReadDelay);\n\t\t/**\n\t\t * The simulation upload speed\n\t\t * @type {Number}\n\t\t */\n\t\tthis.simulateUploadSpeed = parseInt(options.simulateUploadSpeed);\n\t\t/**\n\t\t * The simulation write delay\n\t\t * @type {Number}\n\t\t */\n\t\tthis.simulateWriteDelay = parseInt(options.simulateWriteDelay);\n\t\t/**\n\t\t * The URL root path of stores\n\t\t * @type {string}\n\t\t */\n\t\tthis.storesPath = options.storesPath;\n\t\t/**\n\t\t * The temporary directory of uploading files\n\t\t * @type {string}\n\t\t */\n\t\tthis.tmpDir = options.tmpDir;\n\t\t/**\n\t\t * The permissions of the temporary directory\n\t\t * @type {string}\n\t\t */\n\t\tthis.tmpDirPermissions = options.tmpDirPermissions;\n\t}\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\n\n/**\n * File filter\n */\nexport class Filter {\n\tconstructor(options) {\n\t\tconst self = this;\n\n\t\t// Default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tcontentTypes: null,\n\t\t\t\textensions: null,\n\t\t\t\tminSize: 1,\n\t\t\t\tmaxSize: 0,\n\t\t\t\tinvalidFileError: () => new Meteor.Error('invalid-file', 'File is not valid'),\n\t\t\t\tfileTooSmallError: (fileSize, minFileSize) =>\n\t\t\t\t\tnew Meteor.Error('file-too-small', `File size (size = ${fileSize}) is too small (min = ${minFileSize})`),\n\t\t\t\tfileTooLargeError: (fileSize, maxFileSize) =>\n\t\t\t\t\tnew Meteor.Error('file-too-large', `File size (size = ${fileSize}) is too large (max = ${maxFileSize})`),\n\t\t\t\tinvalidFileExtension: (fileExtension, allowedExtensions) =>\n\t\t\t\t\tnew Meteor.Error('invalid-file-extension', `File extension \"${fileExtension}\" is not accepted (${allowedExtensions})`),\n\t\t\t\tinvalidFileType: (fileType, allowedContentTypes) =>\n\t\t\t\t\tnew Meteor.Error('invalid-file-type', `File type \"${fileType}\" is not accepted (${allowedContentTypes})`),\n\t\t\t\tonCheck: this.onCheck,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (options.contentTypes && !(options.contentTypes instanceof Array)) {\n\t\t\tthrow new TypeError('Filter: contentTypes is not an Array');\n\t\t}\n\t\tif (options.extensions && !(options.extensions instanceof Array)) {\n\t\t\tthrow new TypeError('Filter: extensions is not an Array');\n\t\t}\n\t\tif (typeof options.minSize !== 'number') {\n\t\t\tthrow new TypeError('Filter: minSize is not a number');\n\t\t}\n\t\tif (typeof options.maxSize !== 'number') {\n\t\t\tthrow new TypeError('Filter: maxSize is not a number');\n\t\t}\n\t\tif (options.onCheck && typeof options.onCheck !== 'function') {\n\t\t\tthrow new TypeError('Filter: onCheck is not a function');\n\t\t}\n\n\t\t// Public attributes\n\t\tself.options = options;\n\t\t['onCheck'].forEach((method) => {\n\t\t\tif (typeof options[method] === 'function') {\n\t\t\t\tself[method] = options[method];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks the file\n\t * @param file\n\t */\n\tcheck(file) {\n\t\tlet error = null;\n\t\tif (typeof file !== 'object' || !file) {\n\t\t\terror = this.options.invalidFileError();\n\t\t}\n\t\t// Check size\n\t\tconst fileSize = file.size;\n\t\tconst minSize = this.getMinSize();\n\t\tif (fileSize <= 0 || fileSize < minSize) {\n\t\t\terror = this.options.fileTooSmallError(fileSize, minSize);\n\t\t}\n\t\tconst maxSize = this.getMaxSize();\n\t\tif (maxSize > 0 && fileSize > maxSize) {\n\t\t\terror = this.options.fileTooLargeError(fileSize, maxSize);\n\t\t}\n\t\t// Check extension\n\t\tconst allowedExtensions = this.getExtensions();\n\t\tconst fileExtension = file.extension;\n\t\tif (allowedExtensions && !allowedExtensions.includes(fileExtension)) {\n\t\t\terror = this.options.invalidFileExtension(fileExtension, allowedExtensions);\n\t\t}\n\t\t// Check content type\n\t\tconst allowedContentTypes = this.getContentTypes();\n\t\tconst fileTypes = file.type;\n\t\tif (allowedContentTypes && !this.isContentTypeInList(fileTypes, allowedContentTypes)) {\n\t\t\terror = this.options.invalidFileType(fileTypes, allowedContentTypes);\n\t\t}\n\t\t// Apply custom check\n\t\tif (typeof this.onCheck === 'function' && !this.onCheck(file)) {\n\t\t\terror = new Meteor.Error('invalid-file', 'File does not match filter');\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the allowed content types\n\t * @return {Array}\n\t */\n\tgetContentTypes() {\n\t\treturn this.options.contentTypes;\n\t}\n\n\t/**\n\t * Returns the allowed extensions\n\t * @return {Array}\n\t */\n\tgetExtensions() {\n\t\treturn this.options.extensions;\n\t}\n\n\t/**\n\t * Returns the maximum file size\n\t * @return {Number}\n\t */\n\tgetMaxSize() {\n\t\treturn this.options.maxSize;\n\t}\n\n\t/**\n\t * Returns the minimum file size\n\t * @return {Number}\n\t */\n\tgetMinSize() {\n\t\treturn this.options.minSize;\n\t}\n\n\t/**\n\t * Checks if content type is in the given list\n\t * @param type\n\t * @param list\n\t * @return {boolean}\n\t */\n\tisContentTypeInList(type, list) {\n\t\tif (typeof type === 'string' && list instanceof Array) {\n\t\t\tif (list.includes(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst wildCardGlob = '/*';\n\t\t\tconst wildcards = list.filter((item) => item.indexOf(wildCardGlob) > 0);\n\n\t\t\tif (wildcards.includes(type.replace(/(\\/.*)$/, wildCardGlob))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if the file matches filter\n\t * @param file\n\t * @return {boolean}\n\t */\n\tisValid(file) {\n\t\tlet result = true;\n\t\ttry {\n\t\t\tthis.check(file);\n\t\t} catch (err) {\n\t\t\tresult = false;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Executes custom checks\n\t * @param file\n\t * @return {boolean}\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonCheck(file) {\n\t\treturn true;\n\t}\n}\n","/* eslint-disable no-undef */\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { UploadFS } from './ufs';\nimport { Filter } from './ufs-filter';\nimport { Tokens } from './ufs-tokens';\n\nconst fs = Npm.require('fs');\nconst http = Npm.require('http');\nconst https = Npm.require('https');\nconst Future = Npm.require('fibers/future');\n\nif (Meteor.isServer) {\n\tMeteor.methods({\n\t\t/**\n\t\t * Completes the file transfer\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t */\n\t\tufsComplete(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\n\t\t\tconst fut = new Future();\n\t\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\n\t\t\tconst removeTempFile = function () {\n\t\t\t\tfs.unlink(tmpFile, function (err) {\n\t\t\t\t\terr && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\t// todo check if temp file exists\n\n\t\t\t\t// Get file\n\t\t\t\tconst file = store.getCollection().findOne({ _id: fileId });\n\n\t\t\t\t// Validate file before moving to the store\n\t\t\t\tstore.validate(file);\n\n\t\t\t\t// Get the temp file\n\t\t\t\tconst rs = fs.createReadStream(tmpFile, {\n\t\t\t\t\tflags: 'r',\n\t\t\t\t\tencoding: null,\n\t\t\t\t\tautoClose: true,\n\t\t\t\t});\n\n\t\t\t\t// Clean upload if error occurs\n\t\t\t\trs.on(\n\t\t\t\t\t'error',\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\tstore.getCollection().remove({ _id: fileId });\n\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Save file in the store\n\t\t\t\tstore.write(\n\t\t\t\t\trs,\n\t\t\t\t\tfileId,\n\t\t\t\t\tMeteor.bindEnvironment(function (err, file) {\n\t\t\t\t\t\tremoveTempFile();\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// File has been fully uploaded\n\t\t\t\t\t\t\t// so we don't need to keep the token anymore.\n\t\t\t\t\t\t\t// Also this ensure that the file cannot be modified with extra chunks later.\n\t\t\t\t\t\t\tTokens.remove({ fileId });\n\t\t\t\t\t\t\tfut.return(file);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// catch will not work if fut.wait() is outside try/catch\n\t\t\t\treturn fut.wait();\n\t\t\t} catch (err) {\n\t\t\t\t// If write failed, remove the file\n\t\t\t\tstore.getCollection().remove({ _id: fileId });\n\t\t\t\t// removeTempFile(); // todo remove temp file on error or try again ?\n\t\t\t\tthrow new Meteor.Error('ufs: cannot upload file', err);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Creates the file and returns the file upload token\n\t\t * @param file\n\t\t * @return {{fileId: string, token: *, url: *}}\n\t\t */\n\t\tufsCreate(file) {\n\t\t\tcheck(file, Object);\n\n\t\t\tif (typeof file.name !== 'string' || !file.name.length) {\n\t\t\t\tthrow new Meteor.Error('invalid-file-name', 'file name is not valid');\n\t\t\t}\n\t\t\tif (typeof file.store !== 'string' || !file.store.length) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'store is not valid');\n\t\t\t}\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(file.store);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\n\t\t\t// Set default info\n\t\t\tfile.complete = false;\n\t\t\tfile.uploading = false;\n\t\t\tfile.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n\t\t\t// Assign file MIME type based on the extension\n\t\t\tif (file.extension && !file.type) {\n\t\t\t\tfile.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n\t\t\t}\n\t\t\tfile.progress = 0;\n\t\t\tfile.size = parseInt(file.size) || 0;\n\t\t\tfile.userId = file.userId || this.userId;\n\n\t\t\t// Check if the file matches store filter\n\t\t\tconst filter = store.getFilter();\n\t\t\tif (filter instanceof Filter) {\n\t\t\t\tfilter.check(file);\n\t\t\t}\n\n\t\t\t// Create the file\n\t\t\tconst fileId = store.create(file);\n\t\t\tconst token = store.createToken(fileId);\n\t\t\tconst uploadUrl = store.getURL(`${fileId}?token=${token}`);\n\n\t\t\treturn {\n\t\t\t\tfileId,\n\t\t\t\ttoken,\n\t\t\t\turl: uploadUrl,\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Deletes a file\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t * @returns {*}\n\t\t */\n\t\tufsDelete(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Ignore files that does not exist\n\t\t\tif (store.getCollection().find({ _id: fileId }).count() === 0) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\t\t\treturn store.getCollection().remove({ _id: fileId });\n\t\t},\n\n\t\t/**\n\t\t * Imports a file from the URL\n\t\t * @param url\n\t\t * @param file\n\t\t * @param storeName\n\t\t * @return {*}\n\t\t */\n\t\tufsImportURL(url, file, storeName) {\n\t\t\tcheck(url, String);\n\t\t\tcheck(file, Object);\n\t\t\tcheck(storeName, String);\n\n\t\t\t// Check URL\n\t\t\tif (typeof url !== 'string' || url.length <= 0) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'The url is not valid');\n\t\t\t}\n\t\t\t// Check file\n\t\t\tif (typeof file !== 'object' || file === null) {\n\t\t\t\tthrow new Meteor.Error('invalid-file', 'The file is not valid');\n\t\t\t}\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'The store does not exist');\n\t\t\t}\n\n\t\t\tlet parsedUrl;\n\t\t\ttry {\n\t\t\t\tparsedUrl = new URL(url);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'The url is not valid');\n\t\t\t}\n\n\t\t\tif (['localhost', '127.0.0.1', '0.0.0.0'].includes(parsedUrl.hostname)) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'URL cannot reference localhost');\n\t\t\t}\n\n\t\t\t// Extract file info\n\t\t\tif (!file.name) {\n\t\t\t\tfile.name = url.replace(/\\?.*$/, '').split('/').pop();\n\t\t\t}\n\t\t\tif (file.name && !file.extension) {\n\t\t\t\tfile.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n\t\t\t}\n\t\t\tif (file.extension && !file.type) {\n\t\t\t\t// Assign file MIME type based on the extension\n\t\t\t\tfile.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n\t\t\t}\n\t\t\t// Check if file is valid\n\t\t\tif (store.getFilter() instanceof Filter) {\n\t\t\t\tstore.getFilter().check(file);\n\t\t\t}\n\n\t\t\tif (file.originalUrl) {\n\t\t\t\tconsole.warn('ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL');\n\t\t\t}\n\n\t\t\t// Add original URL\n\t\t\tfile.originalUrl = url;\n\n\t\t\t// Create the file\n\t\t\tfile.complete = false;\n\t\t\tfile.uploading = true;\n\t\t\tfile.progress = 0;\n\t\t\tfile._id = store.create(file);\n\n\t\t\tconst fut = new Future();\n\t\t\tlet proto;\n\n\t\t\t// Detect protocol to use\n\t\t\tif (/http:\\/\\//i.test(url)) {\n\t\t\t\tproto = http;\n\t\t\t} else if (/https:\\/\\//i.test(url)) {\n\t\t\t\tproto = https;\n\t\t\t}\n\n\t\t\tthis.unblock();\n\n\t\t\t// Download file\n\t\t\tproto\n\t\t\t\t.get(\n\t\t\t\t\turl,\n\t\t\t\t\tMeteor.bindEnvironment(function (res) {\n\t\t\t\t\t\t// Save the file in the store\n\t\t\t\t\t\tstore.write(res, file._id, function (err, file) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfut.return(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.on('error', function (err) {\n\t\t\t\t\tfut.throw(err);\n\t\t\t\t});\n\t\t\treturn fut.wait();\n\t\t},\n\n\t\t/**\n\t\t * Marks the file uploading as stopped\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t * @returns {*}\n\t\t */\n\t\tufsStop(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Check file\n\t\t\tconst file = store.getCollection().find({ _id: fileId }, { fields: { userId: 1 } });\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-file', 'File not found');\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\n\t\t\treturn store.getCollection().update(\n\t\t\t\t{ _id: fileId },\n\t\t\t\t{\n\t\t\t\t\t$set: { uploading: false },\n\t\t\t\t},\n\t\t\t);\n\t\t},\n\t});\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\n/**\n * MIME types and extensions\n */\nexport const MIME = {\n\t// application\n\t'7z': 'application/x-7z-compressed',\n\t'arc': 'application/octet-stream',\n\t'ai': 'application/postscript',\n\t'bin': 'application/octet-stream',\n\t'bz': 'application/x-bzip',\n\t'bz2': 'application/x-bzip2',\n\t'eps': 'application/postscript',\n\t'exe': 'application/octet-stream',\n\t'gz': 'application/x-gzip',\n\t'gzip': 'application/x-gzip',\n\t'js': 'application/javascript',\n\t'json': 'application/json',\n\t'ogx': 'application/ogg',\n\t'pdf': 'application/pdf',\n\t'ps': 'application/postscript',\n\t'psd': 'application/octet-stream',\n\t'rar': 'application/x-rar-compressed',\n\t'rev': 'application/x-rar-compressed',\n\t'swf': 'application/x-shockwave-flash',\n\t'tar': 'application/x-tar',\n\t'xhtml': 'application/xhtml+xml',\n\t'xml': 'application/xml',\n\t'zip': 'application/zip',\n\n\t// audio\n\t'aif': 'audio/aiff',\n\t'aifc': 'audio/aiff',\n\t'aiff': 'audio/aiff',\n\t'au': 'audio/basic',\n\t'flac': 'audio/flac',\n\t'midi': 'audio/midi',\n\t'mp2': 'audio/mpeg',\n\t'mp3': 'audio/mpeg',\n\t'mpa': 'audio/mpeg',\n\t'oga': 'audio/ogg',\n\t'ogg': 'audio/ogg',\n\t'opus': 'audio/ogg',\n\t'ra': 'audio/vnd.rn-realaudio',\n\t'spx': 'audio/ogg',\n\t'wav': 'audio/x-wav',\n\t'weba': 'audio/webm',\n\t'wma': 'audio/x-ms-wma',\n\n\t// image\n\t'avs': 'image/avs-video',\n\t'bmp': 'image/x-windows-bmp',\n\t'gif': 'image/gif',\n\t'ico': 'image/vnd.microsoft.icon',\n\t'jpeg': 'image/jpeg',\n\t'jpg': 'image/jpg',\n\t'mjpg': 'image/x-motion-jpeg',\n\t'pic': 'image/pic',\n\t'png': 'image/png',\n\t'svg': 'image/svg+xml',\n\t'tif': 'image/tiff',\n\t'tiff': 'image/tiff',\n\n\t// text\n\t'css': 'text/css',\n\t'csv': 'text/csv',\n\t'html': 'text/html',\n\t'txt': 'text/plain',\n\n\t// video\n\t'avi': 'video/avi',\n\t'dv': 'video/x-dv',\n\t'flv': 'video/x-flv',\n\t'mov': 'video/quicktime',\n\t'mp4': 'video/mp4',\n\t'mpeg': 'video/mpeg',\n\t'mpg': 'video/mpg',\n\t'ogv': 'video/ogg',\n\t'vdo': 'video/vdo',\n\t'webm': 'video/webm',\n\t'wmv': 'video/x-ms-wmv',\n\n\t// specific to vendors\n\t'doc': 'application/msword',\n\t'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t'odb': 'application/vnd.oasis.opendocument.database',\n\t'odc': 'application/vnd.oasis.opendocument.chart',\n\t'odf': 'application/vnd.oasis.opendocument.formula',\n\t'odg': 'application/vnd.oasis.opendocument.graphics',\n\t'odi': 'application/vnd.oasis.opendocument.image',\n\t'odm': 'application/vnd.oasis.opendocument.text-master',\n\t'odp': 'application/vnd.oasis.opendocument.presentation',\n\t'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n\t'odt': 'application/vnd.oasis.opendocument.text',\n\t'otg': 'application/vnd.oasis.opendocument.graphics-template',\n\t'otp': 'application/vnd.oasis.opendocument.presentation-template',\n\t'ots': 'application/vnd.oasis.opendocument.spreadsheet-template',\n\t'ott': 'application/vnd.oasis.opendocument.text-template',\n\t'ppt': 'application/vnd.ms-powerpoint',\n\t'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t'xls': 'application/vnd.ms-excel',\n\t'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n};\n","/* eslint-disable no-undef */\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\n// eslint-disable-next-line import/no-unresolved\nimport SparkMD5 from 'spark-md5';\n\nimport { UploadFS } from './ufs';\n\nif (Meteor.isServer) {\n\tconst domain = Npm.require('domain');\n\tconst fs = Npm.require('fs');\n\t// eslint-disable-next-line no-unused-vars\n\tconst http = Npm.require('http');\n\t// eslint-disable-next-line no-unused-vars\n\tconst https = Npm.require('https');\n\tconst mkdirp = Npm.require('mkdirp');\n\tconst stream = Npm.require('stream');\n\tconst URL = Npm.require('url');\n\tconst zlib = Npm.require('zlib');\n\n\tMeteor.startup(() => {\n\t\tconst path = UploadFS.config.tmpDir;\n\t\tconst mode = UploadFS.config.tmpDirPermissions;\n\n\t\tfs.stat(path, (err) => {\n\t\t\tif (err) {\n\t\t\t\t// Create the temp directory\n\t\t\t\tmkdirp(path, { mode }, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tconsole.error(`ufs: cannot create temp directory at \"${path}\" (${err.message})`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`ufs: temp directory created at \"${path}\"`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Set directory permissions\n\t\t\t\tfs.chmod(path, mode, (err) => {\n\t\t\t\t\terr && console.error(`ufs: cannot set temp directory permissions ${mode} (${err.message})`);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\t// Create domain to handle errors\n\t// and possibly avoid server crashes.\n\tconst d = domain.create();\n\n\td.on('error', (err) => {\n\t\tconsole.error(`ufs: ${err.message}`);\n\t});\n\n\t// Listen HTTP requests to serve files\n\tWebApp.connectHandlers.use((req, res, next) => {\n\t\t// Quick check to see if request should be caught\n\t\tif (!req.url.includes(`/${UploadFS.config.storesPath}/`)) {\n\t\t\tnext();\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove store path\n\t\tconst parsedUrl = URL.parse(req.url);\n\t\tconst path = parsedUrl.pathname.substr(UploadFS.config.storesPath.length + 1);\n\n\t\tconst allowCORS = () => {\n\t\t\t// res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\n\t\t\tres.setHeader('Access-Control-Allow-Methods', 'POST');\n\t\t\tres.setHeader('Access-Control-Allow-Origin', '*');\n\t\t\tres.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\t\t};\n\n\t\tif (req.method === 'OPTIONS') {\n\t\t\tconst regExp = new RegExp('^/([^/?]+)/([^/?]+)$');\n\t\t\tconst match = regExp.exec(path);\n\n\t\t\t// Request is not valid\n\t\t\tif (match === null) {\n\t\t\t\tres.writeHead(400);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(match[1]);\n\t\t\tif (!store) {\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a store is found, go ahead and allow the origin\n\t\t\tallowCORS();\n\n\t\t\tnext();\n\t\t} else if (req.method === 'POST') {\n\t\t\t// Get store\n\t\t\tconst regExp = new RegExp('^/([^/?]+)/([^/?]+)$');\n\t\t\tconst match = regExp.exec(path);\n\n\t\t\t// Request is not valid\n\t\t\tif (match === null) {\n\t\t\t\tres.writeHead(400);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(match[1]);\n\t\t\tif (!store) {\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a store is found, go ahead and allow the origin\n\t\t\tallowCORS();\n\n\t\t\t// Get file\n\t\t\tconst fileId = match[2];\n\t\t\tif (store.getCollection().find({ _id: fileId }).count() === 0) {\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check upload token\n\t\t\tif (!store.checkToken(req.query.token, fileId)) {\n\t\t\t\tres.writeHead(403);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if duplicate\n\t\t\tconst unique = function (hash) {\n\t\t\t\tconst originalId = store.getCollection().findOne({ hash, _id: { $ne: fileId } });\n\t\t\t\treturn originalId ? originalId._id : false;\n\t\t\t};\n\n\t\t\tconst spark = new SparkMD5.ArrayBuffer();\n\t\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\t\t\tconst ws = fs.createWriteStream(tmpFile, { flags: 'a' });\n\t\t\tconst fields = { uploading: true };\n\t\t\tconst progress = parseFloat(req.query.progress);\n\t\t\tif (!isNaN(progress) && progress > 0) {\n\t\t\t\tfields.progress = Math.min(progress, 1);\n\t\t\t}\n\n\t\t\treq.on('data', (chunk) => {\n\t\t\t\tws.write(chunk);\n\t\t\t\tspark.append(chunk);\n\t\t\t});\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\treq.on('error', (err) => {\n\t\t\t\tres.writeHead(500);\n\t\t\t\tres.end();\n\t\t\t});\n\t\t\treq.on(\n\t\t\t\t'end',\n\t\t\t\tMeteor.bindEnvironment(() => {\n\t\t\t\t\t// Update completed state without triggering hooks\n\t\t\t\t\tfields.hash = spark.end();\n\t\t\t\t\tfields.originalId = unique(fields.hash);\n\t\t\t\t\tstore.getCollection().direct.update({ _id: fileId }, { $set: fields });\n\t\t\t\t\tws.end();\n\t\t\t\t}),\n\t\t\t);\n\t\t\tws.on('error', (err) => {\n\t\t\t\tconsole.error(`ufs: cannot write chunk of file \"${fileId}\" (${err.message})`);\n\t\t\t\tfs.unlink(tmpFile, (err) => {\n\t\t\t\t\terr && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\n\t\t\t\t});\n\t\t\t\tres.writeHead(500);\n\t\t\t\tres.end();\n\t\t\t});\n\t\t\tws.on('finish', () => {\n\t\t\t\tres.writeHead(204, { 'Content-Type': 'text/plain' });\n\t\t\t\tres.end();\n\t\t\t});\n\t\t} else if (req.method === 'GET') {\n\t\t\t// Get store, file Id and file name\n\t\t\tconst regExp = new RegExp('^/([^/?]+)/([^/?]+)(?:/([^/?]+))?$');\n\t\t\tconst match = regExp.exec(path);\n\n\t\t\t// Avoid 504 Gateway timeout error\n\t\t\t// if file is not handled by UploadFS.\n\t\t\tif (match === null) {\n\t\t\t\tnext();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get store\n\t\t\tconst storeName = match[1];\n\t\t\tconst store = UploadFS.getStore(storeName);\n\n\t\t\tif (!store) {\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (store.onRead !== null && store.onRead !== undefined && typeof store.onRead !== 'function') {\n\t\t\t\tconsole.error(`ufs: Store.onRead is not a function in store \"${storeName}\"`);\n\t\t\t\tres.writeHead(500);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remove file extension from file Id\n\t\t\tconst index = match[2].indexOf('.');\n\t\t\tconst fileId = index !== -1 ? match[2].substr(0, index) : match[2];\n\n\t\t\t// Get file from database\n\t\t\tconst file = store.getCollection().findOne({ _id: fileId });\n\t\t\tif (!file) {\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Simulate read speed\n\t\t\tif (UploadFS.config.simulateReadDelay) {\n\t\t\t\tMeteor._sleepForMs(UploadFS.config.simulateReadDelay);\n\t\t\t}\n\n\t\t\td.run(() => {\n\t\t\t\t// Check if the file can be accessed\n\t\t\t\tif (store.onRead.call(store, fileId, file, req, res) !== false) {\n\t\t\t\t\tconst options = {};\n\t\t\t\t\tlet status = 200;\n\n\t\t\t\t\t// Prepare response headers\n\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t'Content-Type': file.type,\n\t\t\t\t\t\t'Content-Length': file.size,\n\t\t\t\t\t};\n\n\t\t\t\t\t// Add ETag header\n\t\t\t\t\tif (typeof file.etag === 'string') {\n\t\t\t\t\t\theaders.ETag = file.etag;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add Last-Modified header\n\t\t\t\t\tif (file.modifiedAt instanceof Date) {\n\t\t\t\t\t\theaders['Last-Modified'] = file.modifiedAt.toUTCString();\n\t\t\t\t\t} else if (file.uploadedAt instanceof Date) {\n\t\t\t\t\t\theaders['Last-Modified'] = file.uploadedAt.toUTCString();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Parse request headers\n\t\t\t\t\tif (typeof req.headers === 'object') {\n\t\t\t\t\t\t// Compare ETag\n\t\t\t\t\t\tif (req.headers['if-none-match']) {\n\t\t\t\t\t\t\tif (file.etag === req.headers['if-none-match']) {\n\t\t\t\t\t\t\t\tres.writeHead(304); // Not Modified\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Compare file modification date\n\t\t\t\t\t\tif (req.headers['if-modified-since']) {\n\t\t\t\t\t\t\tconst modifiedSince = new Date(req.headers['if-modified-since']);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(file.modifiedAt instanceof Date && file.modifiedAt > modifiedSince) ||\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-mixed-operators\n\t\t\t\t\t\t\t\t(file.uploadedAt instanceof Date && file.uploadedAt > modifiedSince)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tres.writeHead(304); // Not Modified\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Support range request\n\t\t\t\t\t\tif (typeof req.headers.range === 'string') {\n\t\t\t\t\t\t\tconst { range } = req.headers;\n\n\t\t\t\t\t\t\t// Range is not valid\n\t\t\t\t\t\t\tif (!range) {\n\t\t\t\t\t\t\t\tres.writeHead(416);\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst total = file.size;\n\t\t\t\t\t\t\tconst unit = range.substr(0, range.indexOf('='));\n\n\t\t\t\t\t\t\tif (unit !== 'bytes') {\n\t\t\t\t\t\t\t\tres.writeHead(416);\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst ranges = range\n\t\t\t\t\t\t\t\t.substr(unit.length)\n\t\t\t\t\t\t\t\t.replace(/[^0-9\\-,]/, '')\n\t\t\t\t\t\t\t\t.split(',');\n\n\t\t\t\t\t\t\tif (ranges.length > 1) {\n\t\t\t\t\t\t\t\t// todo: support multipart ranges: https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst r = ranges[0].split('-');\n\t\t\t\t\t\t\t\tconst start = parseInt(r[0], 10);\n\t\t\t\t\t\t\t\tconst end = r[1] ? parseInt(r[1], 10) : total - 1;\n\n\t\t\t\t\t\t\t\t// Range is not valid\n\t\t\t\t\t\t\t\tif (start < 0 || end >= total || start > end) {\n\t\t\t\t\t\t\t\t\tres.writeHead(416);\n\t\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Update headers\n\t\t\t\t\t\t\t\theaders['Content-Range'] = `bytes ${start}-${end}/${total}`;\n\t\t\t\t\t\t\t\theaders['Content-Length'] = end - start + 1;\n\t\t\t\t\t\t\t\toptions.start = start;\n\t\t\t\t\t\t\t\toptions.end = end;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstatus = 206; // partial content\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\theaders['Accept-Ranges'] = 'bytes';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Open the file stream\n\t\t\t\t\tconst rs = store.getReadStream(fileId, file, options);\n\t\t\t\t\tconst ws = new stream.PassThrough();\n\n\t\t\t\t\trs.on(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\tMeteor.bindEnvironment((err) => {\n\t\t\t\t\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tws.on(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\tMeteor.bindEnvironment((err) => {\n\t\t\t\t\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tws.on('close', () => {\n\t\t\t\t\t\t// Close output stream at the end\n\t\t\t\t\t\tws.emit('end');\n\t\t\t\t\t});\n\n\t\t\t\t\t// Transform stream\n\t\t\t\t\tstore.transformRead(rs, ws, fileId, file, req, headers);\n\n\t\t\t\t\t// Parse request headers\n\t\t\t\t\tif (typeof req.headers === 'object') {\n\t\t\t\t\t\t// Compress data using if needed (ignore audio/video as they are already compressed)\n\t\t\t\t\t\tif (typeof req.headers['accept-encoding'] === 'string' && !/^(audio|video)/.test(file.type)) {\n\t\t\t\t\t\t\tconst accept = req.headers['accept-encoding'];\n\n\t\t\t\t\t\t\t// Compress with gzip\n\t\t\t\t\t\t\tif (accept.match(/\\bgzip\\b/)) {\n\t\t\t\t\t\t\t\theaders['Content-Encoding'] = 'gzip';\n\t\t\t\t\t\t\t\tdelete headers['Content-Length'];\n\t\t\t\t\t\t\t\tres.writeHead(status, headers);\n\t\t\t\t\t\t\t\tws.pipe(zlib.createGzip()).pipe(res);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compress with deflate\n\t\t\t\t\t\t\tif (accept.match(/\\bdeflate\\b/)) {\n\t\t\t\t\t\t\t\theaders['Content-Encoding'] = 'deflate';\n\t\t\t\t\t\t\t\tdelete headers['Content-Length'];\n\t\t\t\t\t\t\t\tres.writeHead(status, headers);\n\t\t\t\t\t\t\t\tws.pipe(zlib.createDeflate()).pipe(res);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Send raw data\n\t\t\t\t\tif (!headers['Content-Encoding']) {\n\t\t\t\t\t\tres.writeHead(status, headers);\n\t\t\t\t\t\tws.pipe(res);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres.end();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tnext();\n\t\t}\n\t});\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { _ } from 'meteor/underscore';\n\n/**\n * Store permissions\n */\nexport class StorePermissions {\n\tconstructor(options) {\n\t\t// Default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tinsert: null,\n\t\t\t\tremove: null,\n\t\t\t\tupdate: null,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (options.insert && typeof options.insert !== 'function') {\n\t\t\tthrow new TypeError('StorePermissions: insert is not a function');\n\t\t}\n\t\tif (options.remove && typeof options.remove !== 'function') {\n\t\t\tthrow new TypeError('StorePermissions: remove is not a function');\n\t\t}\n\t\tif (options.update && typeof options.update !== 'function') {\n\t\t\tthrow new TypeError('StorePermissions: update is not a function');\n\t\t}\n\n\t\t// Public attributes\n\t\tthis.actions = {\n\t\t\tinsert: options.insert,\n\t\t\tremove: options.remove,\n\t\t\tupdate: options.update,\n\t\t};\n\t}\n\n\t/**\n\t * Checks the permission for the action\n\t * @param action\n\t * @param userId\n\t * @param file\n\t * @param fields\n\t * @param modifiers\n\t * @return {*}\n\t */\n\tcheck(action, userId, file, fields, modifiers) {\n\t\tif (typeof this.actions[action] === 'function') {\n\t\t\treturn this.actions[action](userId, file, fields, modifiers);\n\t\t}\n\t\treturn true; // by default allow all\n\t}\n\n\t/**\n\t * Checks the insert permission\n\t * @param userId\n\t * @param file\n\t * @returns {*}\n\t */\n\tcheckInsert(userId, file) {\n\t\treturn this.check('insert', userId, file);\n\t}\n\n\t/**\n\t * Checks the remove permission\n\t * @param userId\n\t * @param file\n\t * @returns {*}\n\t */\n\tcheckRemove(userId, file) {\n\t\treturn this.check('remove', userId, file);\n\t}\n\n\t/**\n\t * Checks the update permission\n\t * @param userId\n\t * @param file\n\t * @param fields\n\t * @param modifiers\n\t * @returns {*}\n\t */\n\tcheckUpdate(userId, file, fields, modifiers) {\n\t\treturn this.check('update', userId, file, fields, modifiers);\n\t}\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\n\nimport { UploadFS } from './ufs';\nimport { Filter } from './ufs-filter';\nimport { StorePermissions } from './ufs-store-permissions';\nimport { Tokens } from './ufs-tokens';\n\n/**\n * File store\n */\nexport class Store {\n\tconstructor(options) {\n\t\tconst self = this;\n\n\t\t// Default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tcollection: null,\n\t\t\t\tfilter: null,\n\t\t\t\tname: null,\n\t\t\t\tonCopyError: this.onCopyError,\n\t\t\t\tonFinishUpload: this.onFinishUpload,\n\t\t\t\tonRead: this.onRead,\n\t\t\t\tonReadError: this.onReadError,\n\t\t\t\tonValidate: this.onValidate,\n\t\t\t\tonWriteError: this.onWriteError,\n\t\t\t\tpermissions: null,\n\t\t\t\ttransformRead: null,\n\t\t\t\ttransformWrite: null,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (!(options.collection instanceof Mongo.Collection)) {\n\t\t\tthrow new TypeError('Store: collection is not a Mongo.Collection');\n\t\t}\n\t\tif (options.filter && !(options.filter instanceof Filter)) {\n\t\t\tthrow new TypeError('Store: filter is not a UploadFS.Filter');\n\t\t}\n\t\tif (typeof options.name !== 'string') {\n\t\t\tthrow new TypeError('Store: name is not a string');\n\t\t}\n\t\tif (UploadFS.getStore(options.name)) {\n\t\t\tthrow new TypeError('Store: name already exists');\n\t\t}\n\t\tif (options.onCopyError && typeof options.onCopyError !== 'function') {\n\t\t\tthrow new TypeError('Store: onCopyError is not a function');\n\t\t}\n\t\tif (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\n\t\t\tthrow new TypeError('Store: onFinishUpload is not a function');\n\t\t}\n\t\tif (options.onRead && typeof options.onRead !== 'function') {\n\t\t\tthrow new TypeError('Store: onRead is not a function');\n\t\t}\n\t\tif (options.onReadError && typeof options.onReadError !== 'function') {\n\t\t\tthrow new TypeError('Store: onReadError is not a function');\n\t\t}\n\t\tif (options.onWriteError && typeof options.onWriteError !== 'function') {\n\t\t\tthrow new TypeError('Store: onWriteError is not a function');\n\t\t}\n\t\tif (options.permissions && !(options.permissions instanceof StorePermissions)) {\n\t\t\tthrow new TypeError('Store: permissions is not a UploadFS.StorePermissions');\n\t\t}\n\t\tif (options.transformRead && typeof options.transformRead !== 'function') {\n\t\t\tthrow new TypeError('Store: transformRead is not a function');\n\t\t}\n\t\tif (options.transformWrite && typeof options.transformWrite !== 'function') {\n\t\t\tthrow new TypeError('Store: transformWrite is not a function');\n\t\t}\n\t\tif (options.onValidate && typeof options.onValidate !== 'function') {\n\t\t\tthrow new TypeError('Store: onValidate is not a function');\n\t\t}\n\n\t\t// Public attributes\n\t\tself.options = options;\n\t\tself.permissions = options.permissions;\n\t\t['onCopyError', 'onFinishUpload', 'onRead', 'onReadError', 'onWriteError', 'onValidate'].forEach((method) => {\n\t\t\tif (typeof options[method] === 'function') {\n\t\t\t\tself[method] = options[method];\n\t\t\t}\n\t\t});\n\n\t\t// Add the store to the list\n\t\tUploadFS.addStore(self);\n\n\t\t// Set default permissions\n\t\tif (!(self.permissions instanceof StorePermissions)) {\n\t\t\t// Uses custom default permissions or UFS default permissions\n\t\t\tif (UploadFS.config.defaultStorePermissions instanceof StorePermissions) {\n\t\t\t\tself.permissions = UploadFS.config.defaultStorePermissions;\n\t\t\t} else {\n\t\t\t\tself.permissions = new StorePermissions();\n\t\t\t\tconsole.warn(`ufs: permissions are not defined for store \"${options.name}\"`);\n\t\t\t}\n\t\t}\n\n\t\tif (Meteor.isServer) {\n\t\t\t/**\n\t\t\t * Checks token validity\n\t\t\t * @param token\n\t\t\t * @param fileId\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tself.checkToken = function (token, fileId) {\n\t\t\t\tcheck(token, String);\n\t\t\t\tcheck(fileId, String);\n\t\t\t\treturn Tokens.find({ value: token, fileId }).count() === 1;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Copies the file to a store\n\t\t\t * @param fileId\n\t\t\t * @param store\n\t\t\t * @param callback\n\t\t\t */\n\t\t\tself.copy = function (fileId, store, callback) {\n\t\t\t\tcheck(fileId, String);\n\n\t\t\t\tif (!(store instanceof Store)) {\n\t\t\t\t\tthrow new TypeError('store is not an instance of UploadFS.Store');\n\t\t\t\t}\n\t\t\t\t// Get original file\n\t\t\t\tconst file = self.getCollection().findOne({ _id: fileId });\n\t\t\t\tif (!file) {\n\t\t\t\t\tthrow new Meteor.Error('file-not-found', 'File not found');\n\t\t\t\t}\n\t\t\t\t// Silently ignore the file if it does not match filter\n\t\t\t\tconst filter = store.getFilter();\n\t\t\t\tif (filter instanceof Filter && !filter.isValid(file)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare copy\n\t\t\t\tconst { _id, url, ...copy } = file;\n\t\t\t\tcopy.originalStore = self.getName();\n\t\t\t\tcopy.originalId = fileId;\n\n\t\t\t\t// Create the copy\n\t\t\t\tconst copyId = store.create(copy);\n\n\t\t\t\t// Get original stream\n\t\t\t\tconst rs = self.getReadStream(fileId, file);\n\n\t\t\t\t// Catch errors to avoid app crashing\n\t\t\t\trs.on(\n\t\t\t\t\t'error',\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tcallback.call(self, err, null);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Copy file data\n\t\t\t\tstore.write(\n\t\t\t\t\trs,\n\t\t\t\t\tcopyId,\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tself.getCollection().remove({ _id: copyId });\n\t\t\t\t\t\t\tself.onCopyError.call(self, err, fileId, file);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\t\tcallback.call(self, err, copyId, copy, store);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates the file in the collection\n\t\t\t * @param file\n\t\t\t * @param callback\n\t\t\t * @return {string}\n\t\t\t */\n\t\t\tself.create = function (file, callback) {\n\t\t\t\tcheck(file, Object);\n\t\t\t\tfile.store = self.options.name; // assign store to file\n\t\t\t\treturn self.getCollection().insert(file, callback);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates a token for the file (only needed for client side upload)\n\t\t\t * @param fileId\n\t\t\t * @returns {*}\n\t\t\t */\n\t\t\tself.createToken = function (fileId) {\n\t\t\t\tconst token = self.generateToken();\n\n\t\t\t\t// Check if token exists\n\t\t\t\tif (Tokens.find({ fileId }).count()) {\n\t\t\t\t\tTokens.update(\n\t\t\t\t\t\t{ fileId },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\t\t\tvalue: token,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tTokens.insert({\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tfileId,\n\t\t\t\t\t\tvalue: token,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn token;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Writes the file to the store\n\t\t\t * @param rs\n\t\t\t * @param fileId\n\t\t\t * @param callback\n\t\t\t */\n\t\t\tself.write = function (rs, fileId, callback) {\n\t\t\t\tconst file = self.getCollection().findOne({ _id: fileId });\n\n\t\t\t\tconst errorHandler = Meteor.bindEnvironment(function (err) {\n\t\t\t\t\tself.onWriteError.call(self, err, fileId, file);\n\t\t\t\t\tcallback.call(self, err);\n\t\t\t\t});\n\n\t\t\t\tconst finishHandler = Meteor.bindEnvironment(function () {\n\t\t\t\t\tlet size = 0;\n\t\t\t\t\tconst readStream = self.getReadStream(fileId, file);\n\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\tMeteor.bindEnvironment(function (error) {\n\t\t\t\t\t\t\tcallback.call(self, error, null);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'data',\n\t\t\t\t\t\tMeteor.bindEnvironment(function (data) {\n\t\t\t\t\t\t\tsize += data.length;\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'end',\n\t\t\t\t\t\tMeteor.bindEnvironment(function () {\n\t\t\t\t\t\t\tif (file.complete) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Set file attribute\n\t\t\t\t\t\t\tfile.complete = true;\n\t\t\t\t\t\t\tfile.etag = UploadFS.generateEtag();\n\t\t\t\t\t\t\tfile.path = self.getFileRelativeURL(fileId);\n\t\t\t\t\t\t\tfile.progress = 1;\n\t\t\t\t\t\t\tfile.size = size;\n\t\t\t\t\t\t\tfile.token = self.generateToken();\n\t\t\t\t\t\t\tfile.uploading = false;\n\t\t\t\t\t\t\tfile.uploadedAt = new Date();\n\t\t\t\t\t\t\tfile.url = self.getFileURL(fileId);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (typeof self.onFinishUpload === 'function') {\n\t\t\t\t\t\t\t\tself.onFinishUpload.call(self, file);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Sets the file URL when file transfer is complete,\n\t\t\t\t\t\t\t// this way, the image will loads entirely.\n\t\t\t\t\t\t\tself.getCollection().direct.update(\n\t\t\t\t\t\t\t\t{ _id: fileId },\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\t\t\tcomplete: file.complete,\n\t\t\t\t\t\t\t\t\t\tetag: file.etag,\n\t\t\t\t\t\t\t\t\t\tpath: file.path,\n\t\t\t\t\t\t\t\t\t\tprogress: file.progress,\n\t\t\t\t\t\t\t\t\t\tsize: file.size,\n\t\t\t\t\t\t\t\t\t\ttoken: file.token,\n\t\t\t\t\t\t\t\t\t\tuploading: file.uploading,\n\t\t\t\t\t\t\t\t\t\tuploadedAt: file.uploadedAt,\n\t\t\t\t\t\t\t\t\t\turl: file.url,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Return file info\n\t\t\t\t\t\t\tcallback.call(self, null, file);\n\n\t\t\t\t\t\t\t// Simulate write speed\n\t\t\t\t\t\t\tif (UploadFS.config.simulateWriteDelay) {\n\t\t\t\t\t\t\t\tMeteor._sleepForMs(UploadFS.config.simulateWriteDelay);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Copy file to other stores\n\t\t\t\t\t\t\tif (self.options.copyTo instanceof Array) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < self.options.copyTo.length; i += 1) {\n\t\t\t\t\t\t\t\t\tconst store = self.options.copyTo[i];\n\n\t\t\t\t\t\t\t\t\tif (!store.getFilter() || store.getFilter().isValid(file)) {\n\t\t\t\t\t\t\t\t\t\tself.copy(fileId, store);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconst ws = self.getWriteStream(fileId, file);\n\t\t\t\tws.on('error', errorHandler);\n\t\t\t\tws.once('finish', finishHandler);\n\n\t\t\t\t// Execute transformation\n\t\t\t\tself.transformWrite(rs, ws, fileId, file);\n\t\t\t};\n\t\t}\n\n\t\tif (Meteor.isServer) {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tconst fs = Npm.require('fs');\n\t\t\tconst collection = self.getCollection();\n\n\t\t\t// Code executed after removing file\n\t\t\tcollection.after.remove(function (userId, file) {\n\t\t\t\t// Remove associated tokens\n\t\t\t\tTokens.remove({ fileId: file._id });\n\n\t\t\t\tif (self.options.copyTo instanceof Array) {\n\t\t\t\t\tfor (let i = 0; i < self.options.copyTo.length; i += 1) {\n\t\t\t\t\t\t// Remove copies in stores\n\t\t\t\t\t\tself.options.copyTo[i].getCollection().remove({ originalId: file._id });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before inserting file\n\t\t\tcollection.before.insert(function (userId, file) {\n\t\t\t\tif (!self.permissions.checkInsert(userId, file)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before updating file\n\t\t\tcollection.before.update(function (userId, file, fields, modifiers) {\n\t\t\t\tif (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before removing file\n\t\t\tcollection.before.remove(function (userId, file) {\n\t\t\t\tif (!self.permissions.checkRemove(userId, file)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\n\t\t\t\t// Delete the physical file in the store\n\t\t\t\tself.delete(file._id);\n\n\t\t\t\tconst tmpFile = UploadFS.getTempFilePath(file._id);\n\n\t\t\t\t// Delete the temp file\n\t\t\t\tfs.stat(tmpFile, function (err) {\n\t\t\t\t\t!err &&\n\t\t\t\t\t\tfs.unlink(tmpFile, function (err) {\n\t\t\t\t\t\t\terr && console.error(`ufs: cannot delete temp file at ${tmpFile} (${err.message})`);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a file async\n\t * @param fileId\n\t * @param callback\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tdelete(fileId, callback) {\n\t\tthrow new Error('delete is not implemented');\n\t}\n\n\t/**\n\t * Generates a random token\n\t * @param pattern\n\t * @return {string}\n\t */\n\tgenerateToken(pattern) {\n\t\treturn (pattern || 'xyxyxyxyxy').replace(/[xy]/g, (c) => {\n\t\t\t// eslint-disable-next-line no-mixed-operators\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\n\t\t\tconst s = v.toString(16);\n\t\t\treturn Math.round(Math.random()) ? s.toUpperCase() : s;\n\t\t});\n\t}\n\n\t/**\n\t * Returns the collection\n\t * @return {Mongo.Collection}\n\t */\n\tgetCollection() {\n\t\treturn this.options.collection;\n\t}\n\n\t/**\n\t * Returns the file URL\n\t * @param fileId\n\t * @return {string|null}\n\t */\n\tgetFileRelativeURL(fileId) {\n\t\tconst file = this.getCollection().findOne(fileId, { fields: { name: 1 } });\n\t\treturn file ? this.getRelativeURL(`${fileId}/${file.name}`) : null;\n\t}\n\n\t/**\n\t * Returns the file URL\n\t * @param fileId\n\t * @return {string|null}\n\t */\n\tgetFileURL(fileId) {\n\t\tconst file = this.getCollection().findOne(fileId, { fields: { name: 1 } });\n\t\treturn file ? this.getURL(`${fileId}/${file.name}`) : null;\n\t}\n\n\t/**\n\t * Returns the file filter\n\t * @return {UploadFS.Filter}\n\t */\n\tgetFilter() {\n\t\treturn this.options.filter;\n\t}\n\n\t/**\n\t * Returns the store name\n\t * @return {string}\n\t */\n\tgetName() {\n\t\treturn this.options.name;\n\t}\n\n\t/**\n\t * Returns the file read stream\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tgetReadStream(fileId, file) {\n\t\tthrow new Error('Store.getReadStream is not implemented');\n\t}\n\n\t/**\n\t * Returns the store relative URL\n\t * @param path\n\t * @return {string}\n\t */\n\tgetRelativeURL(path) {\n\t\tconst rootUrl = Meteor.absoluteUrl().replace(/\\/+$/, '');\n\t\tconst rootPath = rootUrl.replace(/^[a-z]+:\\/\\/[^/]+\\/*/gi, '');\n\t\tconst storeName = this.getName();\n\t\tpath = String(path).replace(/\\/$/, '').trim();\n\t\treturn encodeURI(`${rootPath}/${UploadFS.config.storesPath}/${storeName}/${path}`);\n\t}\n\n\t/**\n\t * Returns the store absolute URL\n\t * @param path\n\t * @return {string}\n\t */\n\tgetURL(path) {\n\t\tconst rootUrl = Meteor.absoluteUrl({ secure: UploadFS.config.https }).replace(/\\/+$/, '');\n\t\tconst storeName = this.getName();\n\t\tpath = String(path).replace(/\\/$/, '').trim();\n\t\treturn encodeURI(`${rootUrl}/${UploadFS.config.storesPath}/${storeName}/${path}`);\n\t}\n\n\t/**\n\t * Returns the file write stream\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tgetWriteStream(fileId, file) {\n\t\tthrow new Error('getWriteStream is not implemented');\n\t}\n\n\t/**\n\t * Completes the file upload\n\t * @param url\n\t * @param file\n\t * @param callback\n\t */\n\timportFromURL(url, file, callback) {\n\t\tMeteor.call('ufsImportURL', url, file, this.getName(), callback);\n\t}\n\n\t/**\n\t * Called when a copy error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonCopyError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot copy file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Called when a file has been uploaded\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonFinishUpload(file) {}\n\n\t/**\n\t * Called when a file is read from the store\n\t * @param fileId\n\t * @param file\n\t * @param request\n\t * @param response\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonRead(fileId, file, request, response) {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Called when a read error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonReadError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot read file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Called when file is being validated\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonValidate(file) {}\n\n\t/**\n\t * Called when a write error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonWriteError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot write file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Sets the store permissions\n\t * @param permissions\n\t */\n\tsetPermissions(permissions) {\n\t\tif (!(permissions instanceof StorePermissions)) {\n\t\t\tthrow new TypeError('Permissions is not an instance of UploadFS.StorePermissions');\n\t\t}\n\t\tthis.permissions = permissions;\n\t}\n\n\t/**\n\t * Transforms the file on reading\n\t * @param readStream\n\t * @param writeStream\n\t * @param fileId\n\t * @param file\n\t * @param request\n\t * @param headers\n\t */\n\ttransformRead(readStream, writeStream, fileId, file, request, headers) {\n\t\tif (typeof this.options.transformRead === 'function') {\n\t\t\tthis.options.transformRead.call(this, readStream, writeStream, fileId, file, request, headers);\n\t\t} else {\n\t\t\treadStream.pipe(writeStream);\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the file on writing\n\t * @param readStream\n\t * @param writeStream\n\t * @param fileId\n\t * @param file\n\t */\n\ttransformWrite(readStream, writeStream, fileId, file) {\n\t\tif (typeof this.options.transformWrite === 'function') {\n\t\t\tthis.options.transformWrite.call(this, readStream, writeStream, fileId, file);\n\t\t} else {\n\t\t\treadStream.pipe(writeStream);\n\t\t}\n\t}\n\n\t/**\n\t * Validates the file\n\t * @param file\n\t */\n\tvalidate(file) {\n\t\tif (typeof this.onValidate === 'function') {\n\t\t\tthis.onValidate(file);\n\t\t}\n\t}\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { Mongo } from 'meteor/mongo';\n\n/**\n * Collection of upload tokens\n * @type {Mongo.Collection}\n */\nexport const Tokens = new Mongo.Collection('ufsTokens');\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\n\nimport { Store } from './ufs-store';\n\n/**\n * File uploader\n */\nexport class Uploader {\n\tconstructor(options) {\n\t\tconst self = this;\n\n\t\t// Set default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tadaptive: true,\n\t\t\t\tcapacity: 0.9,\n\t\t\t\tchunkSize: 16 * 1024,\n\t\t\t\tdata: null,\n\t\t\t\tfile: null,\n\t\t\t\tmaxChunkSize: 4 * 1024 * 1000,\n\t\t\t\tmaxTries: 5,\n\t\t\t\tonAbort: this.onAbort,\n\t\t\t\tonComplete: this.onComplete,\n\t\t\t\tonCreate: this.onCreate,\n\t\t\t\tonError: this.onError,\n\t\t\t\tonProgress: this.onProgress,\n\t\t\t\tonStart: this.onStart,\n\t\t\t\tonStop: this.onStop,\n\t\t\t\tretryDelay: 2000,\n\t\t\t\tstore: null,\n\t\t\t\ttransferDelay: 100,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (typeof options.adaptive !== 'boolean') {\n\t\t\tthrow new TypeError('adaptive is not a number');\n\t\t}\n\t\tif (typeof options.capacity !== 'number') {\n\t\t\tthrow new TypeError('capacity is not a number');\n\t\t}\n\t\tif (options.capacity <= 0 || options.capacity > 1) {\n\t\t\tthrow new RangeError('capacity must be a float between 0.1 and 1.0');\n\t\t}\n\t\tif (typeof options.chunkSize !== 'number') {\n\t\t\tthrow new TypeError('chunkSize is not a number');\n\t\t}\n\t\tif (!(options.data instanceof Blob) && !(options.data instanceof File)) {\n\t\t\tthrow new TypeError('data is not an Blob or File');\n\t\t}\n\t\tif (options.file === null || typeof options.file !== 'object') {\n\t\t\tthrow new TypeError('file is not an object');\n\t\t}\n\t\tif (typeof options.maxChunkSize !== 'number') {\n\t\t\tthrow new TypeError('maxChunkSize is not a number');\n\t\t}\n\t\tif (typeof options.maxTries !== 'number') {\n\t\t\tthrow new TypeError('maxTries is not a number');\n\t\t}\n\t\tif (typeof options.retryDelay !== 'number') {\n\t\t\tthrow new TypeError('retryDelay is not a number');\n\t\t}\n\t\tif (typeof options.transferDelay !== 'number') {\n\t\t\tthrow new TypeError('transferDelay is not a number');\n\t\t}\n\t\tif (typeof options.onAbort !== 'function') {\n\t\t\tthrow new TypeError('onAbort is not a function');\n\t\t}\n\t\tif (typeof options.onComplete !== 'function') {\n\t\t\tthrow new TypeError('onComplete is not a function');\n\t\t}\n\t\tif (typeof options.onCreate !== 'function') {\n\t\t\tthrow new TypeError('onCreate is not a function');\n\t\t}\n\t\tif (typeof options.onError !== 'function') {\n\t\t\tthrow new TypeError('onError is not a function');\n\t\t}\n\t\tif (typeof options.onProgress !== 'function') {\n\t\t\tthrow new TypeError('onProgress is not a function');\n\t\t}\n\t\tif (typeof options.onStart !== 'function') {\n\t\t\tthrow new TypeError('onStart is not a function');\n\t\t}\n\t\tif (typeof options.onStop !== 'function') {\n\t\t\tthrow new TypeError('onStop is not a function');\n\t\t}\n\t\tif (typeof options.store !== 'string' && !(options.store instanceof Store)) {\n\t\t\tthrow new TypeError('store must be the name of the store or an instance of UploadFS.Store');\n\t\t}\n\n\t\t// Public attributes\n\t\tself.adaptive = options.adaptive;\n\t\tself.capacity = parseFloat(options.capacity);\n\t\tself.chunkSize = parseInt(options.chunkSize);\n\t\tself.maxChunkSize = parseInt(options.maxChunkSize);\n\t\tself.maxTries = parseInt(options.maxTries);\n\t\tself.retryDelay = parseInt(options.retryDelay);\n\t\tself.transferDelay = parseInt(options.transferDelay);\n\t\tself.onAbort = options.onAbort;\n\t\tself.onComplete = options.onComplete;\n\t\tself.onCreate = options.onCreate;\n\t\tself.onError = options.onError;\n\t\tself.onProgress = options.onProgress;\n\t\tself.onStart = options.onStart;\n\t\tself.onStop = options.onStop;\n\n\t\t// Private attributes\n\t\tlet { store } = options;\n\t\tconst { data } = options;\n\t\tconst capacityMargin = 0.1;\n\t\tlet { file } = options;\n\t\tlet fileId = null;\n\t\tlet offset = 0;\n\t\tlet loaded = 0;\n\t\tconst total = data.size;\n\t\tlet tries = 0;\n\t\tlet postUrl = null;\n\t\tlet token = null;\n\t\tlet complete = false;\n\t\tlet uploading = false;\n\n\t\tlet timeA = null;\n\t\tlet timeB = null;\n\n\t\tlet elapsedTime = 0;\n\t\tlet startTime = 0;\n\n\t\t// Keep only the name of the store\n\t\tif (store instanceof Store) {\n\t\t\tstore = store.getName();\n\t\t}\n\n\t\t// Assign file to store\n\t\tfile.store = store;\n\n\t\tfunction finish() {\n\t\t\t// Finish the upload by telling the store the upload is complete\n\t\t\tMeteor.call('ufsComplete', fileId, store, token, function (err, uploadedFile) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.onError(err, file);\n\t\t\t\t\tself.abort();\n\t\t\t\t} else if (uploadedFile) {\n\t\t\t\t\tuploading = false;\n\t\t\t\t\tcomplete = true;\n\t\t\t\t\tfile = uploadedFile;\n\t\t\t\t\tself.onComplete(uploadedFile);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Aborts the current transfer\n\t\t */\n\t\tself.abort = function () {\n\t\t\t// Remove the file from database\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\tMeteor.call('ufsDelete', fileId, store, token, function (err, result) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.onError(err, file);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Reset uploader status\n\t\t\tuploading = false;\n\t\t\tfileId = null;\n\t\t\toffset = 0;\n\t\t\ttries = 0;\n\t\t\tloaded = 0;\n\t\t\tcomplete = false;\n\t\t\tstartTime = null;\n\t\t\tself.onAbort(file);\n\t\t};\n\n\t\t/**\n\t\t * Returns the average speed in bytes per second\n\t\t * @returns {number}\n\t\t */\n\t\tself.getAverageSpeed = function () {\n\t\t\tconst seconds = self.getElapsedTime() / 1000;\n\t\t\treturn self.getLoaded() / seconds;\n\t\t};\n\n\t\t/**\n\t\t * Returns the elapsed time in milliseconds\n\t\t * @returns {number}\n\t\t */\n\t\tself.getElapsedTime = function () {\n\t\t\tif (startTime && self.isUploading()) {\n\t\t\t\treturn elapsedTime + (Date.now() - startTime);\n\t\t\t}\n\t\t\treturn elapsedTime;\n\t\t};\n\n\t\t/**\n\t\t * Returns the file\n\t\t * @return {object}\n\t\t */\n\t\tself.getFile = function () {\n\t\t\treturn file;\n\t\t};\n\n\t\t/**\n\t\t * Returns the loaded bytes\n\t\t * @return {number}\n\t\t */\n\t\tself.getLoaded = function () {\n\t\t\treturn loaded;\n\t\t};\n\n\t\t/**\n\t\t * Returns current progress\n\t\t * @return {number}\n\t\t */\n\t\tself.getProgress = function () {\n\t\t\treturn Math.min(((loaded / total) * 100) / 100, 1.0);\n\t\t};\n\n\t\t/**\n\t\t * Returns the remaining time in milliseconds\n\t\t * @returns {number}\n\t\t */\n\t\tself.getRemainingTime = function () {\n\t\t\tconst averageSpeed = self.getAverageSpeed();\n\t\t\tconst remainingBytes = total - self.getLoaded();\n\t\t\treturn averageSpeed && remainingBytes ? Math.max(remainingBytes / averageSpeed, 0) : 0;\n\t\t};\n\n\t\t/**\n\t\t * Returns the upload speed in bytes per second\n\t\t * @returns {number}\n\t\t */\n\t\tself.getSpeed = function () {\n\t\t\tif (timeA && timeB && self.isUploading()) {\n\t\t\t\tconst seconds = (timeB - timeA) / 1000;\n\t\t\t\treturn self.chunkSize / seconds;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t\t/**\n\t\t * Returns the total bytes\n\t\t * @return {number}\n\t\t */\n\t\tself.getTotal = function () {\n\t\t\treturn total;\n\t\t};\n\n\t\t/**\n\t\t * Checks if the transfer is complete\n\t\t * @return {boolean}\n\t\t */\n\t\tself.isComplete = function () {\n\t\t\treturn complete;\n\t\t};\n\n\t\t/**\n\t\t * Checks if the transfer is active\n\t\t * @return {boolean}\n\t\t */\n\t\tself.isUploading = function () {\n\t\t\treturn uploading;\n\t\t};\n\n\t\t/**\n\t\t * Reads a portion of file\n\t\t * @param start\n\t\t * @param length\n\t\t * @param callback\n\t\t * @returns {Blob}\n\t\t */\n\t\tself.readChunk = function (start, length, callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\tthrow new Error('readChunk is missing callback');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet end;\n\n\t\t\t\t// Calculate the chunk size\n\t\t\t\tif (length && start + length > total) {\n\t\t\t\t\tend = total;\n\t\t\t\t} else {\n\t\t\t\t\tend = start + length;\n\t\t\t\t}\n\t\t\t\t// Get chunk\n\t\t\t\tconst chunk = data.slice(start, end);\n\t\t\t\t// Pass chunk to callback\n\t\t\t\tcallback.call(self, null, chunk);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('read error', err);\n\t\t\t\t// Retry to read chunk\n\t\t\t\tMeteor.setTimeout(function () {\n\t\t\t\t\tif (tries < self.maxTries) {\n\t\t\t\t\t\ttries += 1;\n\t\t\t\t\t\tself.readChunk(start, length, callback);\n\t\t\t\t\t}\n\t\t\t\t}, self.retryDelay);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Sends a file chunk to the store\n\t\t */\n\t\tself.sendChunk = function () {\n\t\t\tif (!complete && startTime !== null) {\n\t\t\t\tif (offset < total) {\n\t\t\t\t\tlet { chunkSize } = self;\n\n\t\t\t\t\t// Use adaptive length\n\t\t\t\t\tif (self.adaptive && timeA && timeB && timeB > timeA) {\n\t\t\t\t\t\tconst duration = (timeB - timeA) / 1000;\n\t\t\t\t\t\tconst max = self.capacity * (1 + capacityMargin);\n\t\t\t\t\t\tconst min = self.capacity * (1 - capacityMargin);\n\n\t\t\t\t\t\tif (duration >= max) {\n\t\t\t\t\t\t\tchunkSize = Math.abs(Math.round(chunkSize * (max - duration)));\n\t\t\t\t\t\t} else if (duration < min) {\n\t\t\t\t\t\t\tchunkSize = Math.round(chunkSize * (min / duration));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Limit to max chunk size\n\t\t\t\t\t\tif (self.maxChunkSize > 0 && chunkSize > self.maxChunkSize) {\n\t\t\t\t\t\t\tchunkSize = self.maxChunkSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reduce chunk size to fit total\n\t\t\t\t\tif (offset + chunkSize > total) {\n\t\t\t\t\t\tchunkSize = total - offset;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prepare the chunk\n\t\t\t\t\tself.readChunk(offset, chunkSize, function (err, chunk) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tself.onError(err, file);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\t\t\t\txhr.onreadystatechange = function () {\n\t\t\t\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\t\t\t\tif ([200, 201, 202, 204].includes(xhr.status)) {\n\t\t\t\t\t\t\t\t\ttimeB = Date.now();\n\t\t\t\t\t\t\t\t\toffset += chunkSize;\n\t\t\t\t\t\t\t\t\tloaded += chunkSize;\n\n\t\t\t\t\t\t\t\t\t// Send next chunk\n\t\t\t\t\t\t\t\t\tself.onProgress(file, self.getProgress());\n\n\t\t\t\t\t\t\t\t\t// Finish upload\n\t\t\t\t\t\t\t\t\tif (loaded >= total) {\n\t\t\t\t\t\t\t\t\t\telapsedTime = Date.now() - startTime;\n\t\t\t\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tMeteor.setTimeout(self.sendChunk, self.transferDelay);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (![402, 403, 404, 500].includes(xhr.status)) {\n\t\t\t\t\t\t\t\t\t// Retry until max tries is reach\n\t\t\t\t\t\t\t\t\t// But don't retry if these errors occur\n\t\t\t\t\t\t\t\t\tif (tries <= self.maxTries) {\n\t\t\t\t\t\t\t\t\t\ttries += 1;\n\t\t\t\t\t\t\t\t\t\t// Wait before retrying\n\t\t\t\t\t\t\t\t\t\tMeteor.setTimeout(self.sendChunk, self.retryDelay);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tself.abort();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tself.abort();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Calculate upload progress\n\t\t\t\t\t\tconst progress = (offset + chunkSize) / total;\n\t\t\t\t\t\t// let formData = new FormData();\n\t\t\t\t\t\t// formData.append('progress', progress);\n\t\t\t\t\t\t// formData.append('chunk', chunk);\n\t\t\t\t\t\tconst url = `${postUrl}&progress=${progress}`;\n\n\t\t\t\t\t\ttimeA = Date.now();\n\t\t\t\t\t\ttimeB = null;\n\t\t\t\t\t\tuploading = true;\n\n\t\t\t\t\t\t// Send chunk to the store\n\t\t\t\t\t\txhr.open('POST', url, true);\n\t\t\t\t\t\txhr.send(chunk);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Starts or resumes the transfer\n\t\t */\n\t\tself.start = function () {\n\t\t\tif (!fileId) {\n\t\t\t\t// Create the file document and get the token\n\t\t\t\t// that allows the user to send chunks to the store.\n\t\t\t\tMeteor.call('ufsCreate', _.extend({}, file), function (err, result) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tself.onError(err, file);\n\t\t\t\t\t} else if (result) {\n\t\t\t\t\t\ttoken = result.token;\n\t\t\t\t\t\tpostUrl = result.url;\n\t\t\t\t\t\tfileId = result.fileId;\n\t\t\t\t\t\tfile._id = result.fileId;\n\t\t\t\t\t\tself.onCreate(file);\n\t\t\t\t\t\ttries = 0;\n\t\t\t\t\t\tstartTime = Date.now();\n\t\t\t\t\t\tself.onStart(file);\n\t\t\t\t\t\tself.sendChunk();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (!uploading && !complete) {\n\t\t\t\t// Resume uploading\n\t\t\t\ttries = 0;\n\t\t\t\tstartTime = Date.now();\n\t\t\t\tself.onStart(file);\n\t\t\t\tself.sendChunk();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Stops the transfer\n\t\t */\n\t\tself.stop = function () {\n\t\t\tif (uploading) {\n\t\t\t\t// Update elapsed time\n\t\t\t\telapsedTime = Date.now() - startTime;\n\t\t\t\tstartTime = null;\n\t\t\t\tuploading = false;\n\t\t\t\tself.onStop(file);\n\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\tMeteor.call('ufsStop', fileId, store, token, function (err, result) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tself.onError(err, file);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Called when the file upload is aborted\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonAbort(file) {}\n\n\t/**\n\t * Called when the file upload is complete\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonComplete(file) {}\n\n\t/**\n\t * Called when the file is created in the collection\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonCreate(file) {}\n\n\t/**\n\t * Called when an error occurs during file upload\n\t * @param err\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonError(err, file) {\n\t\tconsole.error(`ufs: ${err.message}`);\n\t}\n\n\t/**\n\t * Called when a file chunk has been sent\n\t * @param file\n\t * @param progress is a float from 0.0 to 1.0\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonProgress(file, progress) {}\n\n\t/**\n\t * Called when the file upload starts\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonStart(file) {}\n\n\t/**\n\t * Called when the file upload stops\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonStop(file) {}\n}\n"]}}]