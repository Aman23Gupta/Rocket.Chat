[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Random = Package.random.Random;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Github;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"github-oauth\":{\"github_client.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/github-oauth/github_client.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nGithub = {}; // Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\n\nGithub.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'github'\n  });\n\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  const credentialToken = Random.secret();\n  const scope = options && options.requestPermissions || ['user:email'];\n  const flatScope = scope.map(encodeURIComponent).join('+');\n\n  const loginStyle = OAuth._loginStyle('github', config, options);\n\n  const loginUrl = 'https://github.com/login/oauth/authorize' + \"?client_id=\".concat(config.clientId) + \"&scope=\".concat(flatScope) + \"&redirect_uri=\".concat(OAuth._redirectUri('github', config)) + \"&state=\".concat(OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl));\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: {\n      width: 900,\n      height: 450\n    }\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/github-oauth/github_client.js\");\n\n/* Exports */\nPackage._define(\"github-oauth\", {\n  Github: Github\n});\n\n})();\n","servePath":"/packages/github-oauth.js","sourceMap":{"version":3,"sources":["packages/github-oauth/github_client.js"],"names":["Github","requestCredential","options","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","scope","requestPermissions","flatScope","map","encodeURIComponent","join","loginStyle","OAuth","_loginStyle","loginUrl","clientId","_redirectUri","_stateParam","redirectUrl","launchLogin","loginService","popupOptions","width","height"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,GAAG,EAAT,C,CAEA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,iBAAP,GAA2B,CAACC,OAAD,EAAUC,iCAAV,KAAgD;AACzE;AACA,MAAI,CAACA,iCAAD,IAAsC,OAAOD,OAAP,KAAmB,UAA7D,EAAyE;AACvEC,qCAAiC,GAAGD,OAApC;AACAA,WAAO,GAAG,EAAV;AACD;;AAED,QAAME,MAAM,GAAGC,oBAAoB,CAACC,cAArB,CAAoCC,OAApC,CAA4C;AAACC,WAAO,EAAE;AAAV,GAA5C,CAAf;;AACA,MAAI,CAACJ,MAAL,EAAa;AACXD,qCAAiC,IAAIA,iCAAiC,CACpE,IAAIE,oBAAoB,CAACI,WAAzB,EADoE,CAAtE;AAEA;AACD;;AACD,QAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,EAAxB;AAEA,QAAMC,KAAK,GAAIX,OAAO,IAAIA,OAAO,CAACY,kBAApB,IAA2C,CAAC,YAAD,CAAzD;AACA,QAAMC,SAAS,GAAGF,KAAK,CAACG,GAAN,CAAUC,kBAAV,EAA8BC,IAA9B,CAAmC,GAAnC,CAAlB;;AAEA,QAAMC,UAAU,GAAGC,KAAK,CAACC,WAAN,CAAkB,QAAlB,EAA4BjB,MAA5B,EAAoCF,OAApC,CAAnB;;AAEA,QAAMoB,QAAQ,GACZ,kEACclB,MAAM,CAACmB,QADrB,qBAEUR,SAFV,4BAGiBK,KAAK,CAACI,YAAN,CAAmB,QAAnB,EAA6BpB,MAA7B,CAHjB,qBAIUgB,KAAK,CAACK,WAAN,CAAkBN,UAAlB,EAA8BT,eAA9B,EAA+CR,OAAO,IAAIA,OAAO,CAACwB,WAAlE,CAJV,CADF;AAOAN,OAAK,CAACO,WAAN,CAAkB;AAChBC,gBAAY,EAAE,QADE;AAEhBT,cAFgB;AAGhBG,YAHgB;AAIhBnB,qCAJgB;AAKhBO,mBALgB;AAMhBmB,gBAAY,EAAE;AAACC,WAAK,EAAE,GAAR;AAAaC,YAAM,EAAE;AAArB;AANE,GAAlB;AAQD,CAnCD,C","file":"/packages/github-oauth.js","sourcesContent":["Github = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n  const credentialToken = Random.secret();\n\n  const scope = (options && options.requestPermissions) || ['user:email'];\n  const flatScope = scope.map(encodeURIComponent).join('+');\n\n  const loginStyle = OAuth._loginStyle('github', config, options);\n\n  const loginUrl =\n    'https://github.com/login/oauth/authorize' +\n    `?client_id=${config.clientId}` +\n    `&scope=${flatScope}` +\n    `&redirect_uri=${OAuth._redirectUri('github', config)}` +\n    `&state=${OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)}`;\n\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: {width: 900, height: 450}\n  });\n};\n"]}}]