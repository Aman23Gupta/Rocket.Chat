[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar HTTP = Package.http.HTTP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mizzao:timesync\":{\"client\":{\"index.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/mizzao_timesync/client/index.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  TimeSync: () => TimeSync,\n  SyncInternals: () => SyncInternals\n});\nlet TimeSync, SyncInternals;\nmodule.link(\"./timesync-client\", {\n  TimeSync(v) {\n    TimeSync = v;\n  },\n\n  SyncInternals(v) {\n    SyncInternals = v;\n  }\n\n}, 0);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"timesync-client.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/mizzao_timesync/client/timesync-client.js                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  TimeSync: () => TimeSync,\n  SyncInternals: () => SyncInternals\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 1);\nlet HTTP;\nmodule.link(\"meteor/http\", {\n  HTTP(v) {\n    HTTP = v;\n  }\n\n}, 2);\n\n//IE8 doesn't have Date.now()\nDate.now = Date.now || function () {\n  return +new Date();\n};\n\nconst TimeSync = {\n  loggingEnabled: true\n};\n\nfunction\n  /* arguments */\nlog() {\n  if (TimeSync.loggingEnabled) {\n    Meteor._debug.apply(this, arguments);\n  }\n}\n\nvar defaultInterval = 1000; // Internal values, exported for testing\n\nconst SyncInternals = {\n  offset: undefined,\n  roundTripTime: undefined,\n  offsetDep: new Tracker.Dependency(),\n  timeTick: {},\n  timeCheck: function (lastTime, currentTime, interval, tolerance) {\n    if (Math.abs(currentTime - lastTime - interval) < tolerance) {\n      // Everything is A-OK\n      return true;\n    } // We're no longer in sync.\n\n\n    return false;\n  }\n};\nSyncInternals.timeTick[defaultInterval] = new Tracker.Dependency();\nvar maxAttempts = 5;\nvar attempts = 0;\n/*\n  This is an approximation of\n  http://en.wikipedia.org/wiki/Network_Time_Protocol\n\n  If this turns out to be more accurate under the connect handlers,\n  we should try taking multiple measurements.\n */\n\nvar syncUrl = \"/_timesync\";\n\nif (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX) {\n  syncUrl = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + syncUrl;\n}\n\nvar updateOffset = function () {\n  var t0 = Date.now();\n  HTTP.get(syncUrl, function (err, response) {\n    var t3 = Date.now(); // Grab this now\n\n    if (err) {\n      //  We'll still use our last computed offset if is defined\n      log(\"Error syncing to server time: \", err);\n      if (++attempts <= maxAttempts) Meteor.setTimeout(TimeSync.resync, 1000);else log(\"Max number of time sync attempts reached. Giving up.\");\n      return;\n    }\n\n    attempts = 0; // It worked\n\n    var ts = parseInt(response.content);\n    SyncInternals.offset = Math.round((ts - t0 + (ts - t3)) / 2);\n    SyncInternals.roundTripTime = t3 - t0; // - (ts - ts) which is 0\n\n    SyncInternals.offsetDep.changed();\n  });\n}; // Reactive variable for server time that updates every second.\n\n\nTimeSync.serverTime = function (clientTime, interval) {\n  check(interval, Match.Optional(Match.Integer)); // If we don't know the offset, we can't provide the server time.\n\n  if (!TimeSync.isSynced()) return undefined; // If a client time is provided, we don't need to depend on the tick.\n\n  if (!clientTime) getTickDependency(interval || defaultInterval).depend(); // SyncInternals.offsetDep.depend(); implicit as we call isSynced()\n  // Convert Date argument to epoch as necessary\n\n  return (+clientTime || Date.now()) + SyncInternals.offset;\n}; // Reactive variable for the difference between server and client time.\n\n\nTimeSync.serverOffset = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset;\n};\n\nTimeSync.roundTripTime = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.roundTripTime;\n};\n\nTimeSync.isSynced = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset !== undefined;\n};\n\nvar resyncIntervalId = null;\n\nTimeSync.resync = function () {\n  if (resyncIntervalId !== null) Meteor.clearInterval(resyncIntervalId);\n  updateOffset();\n  resyncIntervalId = Meteor.setInterval(updateOffset, 600000);\n}; // Run this as soon as we load, even before Meteor.startup()\n// Run again whenever we reconnect after losing connection\n\n\nvar wasConnected = false;\nTracker.autorun(function () {\n  var connected = Meteor.status().connected;\n  if (connected && !wasConnected) TimeSync.resync();\n  wasConnected = connected;\n}); // Resync if unexpected change by more than a few seconds. This needs to be\n// somewhat lenient, or a CPU-intensive operation can trigger a re-sync even\n// when the offset is still accurate. In any case, we're not going to be able to\n// catch very small system-initiated NTP adjustments with this, anyway.\n\nvar tickCheckTolerance = 5000;\nvar lastClientTime = Date.now(); // Set up a new interval for any amount of reactivity.\n\nfunction getTickDependency(interval) {\n  if (!SyncInternals.timeTick[interval]) {\n    var dep = new Tracker.Dependency();\n    Meteor.setInterval(function () {\n      dep.changed();\n    }, interval);\n    SyncInternals.timeTick[interval] = dep;\n  }\n\n  return SyncInternals.timeTick[interval];\n} // Set up special interval for the default tick, which also watches for re-sync\n\n\nMeteor.setInterval(function () {\n  var currentClientTime = Date.now();\n\n  if (SyncInternals.timeCheck(lastClientTime, currentClientTime, defaultInterval, tickCheckTolerance)) {\n    // No problem here, just keep ticking along\n    SyncInternals.timeTick[defaultInterval].changed();\n  } else {\n    // resync on major client clock changes\n    // based on http://stackoverflow.com/a/3367542/1656818\n    log(\"Clock discrepancy detected. Attempting re-sync.\"); // Refuse to compute server time.\n\n    SyncInternals.offset = undefined;\n    SyncInternals.offsetDep.changed();\n    TimeSync.resync();\n  }\n\n  lastClientTime = currentClientTime;\n}, defaultInterval);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/mizzao:timesync/client/index.js\");\n\n/* Exports */\nPackage._define(\"mizzao:timesync\", exports);\n\n})();\n","servePath":"/packages/mizzao_timesync.js","sourceMap":{"version":3,"sources":["packages/mizzao:timesync/client/index.js","packages/mizzao:timesync/client/timesync-client.js"],"names":["module","export","TimeSync","SyncInternals","link","v","Meteor","Tracker","HTTP","Date","now","loggingEnabled","log","_debug","apply","arguments","defaultInterval","offset","undefined","roundTripTime","offsetDep","Dependency","timeTick","timeCheck","lastTime","currentTime","interval","tolerance","Math","abs","maxAttempts","attempts","syncUrl","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","updateOffset","t0","get","err","response","t3","setTimeout","resync","ts","parseInt","content","round","changed","serverTime","clientTime","check","Match","Optional","Integer","isSynced","getTickDependency","depend","serverOffset","resyncIntervalId","clearInterval","setInterval","wasConnected","autorun","connected","status","tickCheckTolerance","lastClientTime","dep","currentClientTime"],"mappings":"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","file":"/packages/mizzao_timesync.js","sourcesContent":["import { TimeSync, SyncInternals } from './timesync-client';\n\nexport {\n\tTimeSync,\n\tSyncInternals,\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\nimport { HTTP } from 'meteor/http';\n\n//IE8 doesn't have Date.now()\nDate.now = Date.now || function() { return +new Date; };\n\nexport const TimeSync = {\n  loggingEnabled: true\n};\n\nfunction log(/* arguments */) {\n  if (TimeSync.loggingEnabled) {\n    Meteor._debug.apply(this, arguments);\n  }\n}\n\nvar defaultInterval = 1000;\n\n// Internal values, exported for testing\nexport const SyncInternals = {\n  offset: undefined,\n  roundTripTime: undefined,\n  offsetDep: new Tracker.Dependency(),\n  timeTick: {},\n\n  timeCheck: function (lastTime, currentTime, interval, tolerance) {\n    if (Math.abs(currentTime - lastTime - interval) < tolerance) {\n      // Everything is A-OK\n      return true;\n    }\n    // We're no longer in sync.\n    return false;\n  }\n};\n\nSyncInternals.timeTick[defaultInterval] = new Tracker.Dependency();\n\nvar maxAttempts = 5;\nvar attempts = 0;\n\n/*\n  This is an approximation of\n  http://en.wikipedia.org/wiki/Network_Time_Protocol\n\n  If this turns out to be more accurate under the connect handlers,\n  we should try taking multiple measurements.\n */\n\nvar syncUrl = \"/_timesync\";\nif (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX) {\n\tsyncUrl = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + syncUrl;\n}\n\nvar updateOffset = function() {\n  var t0 = Date.now();\n\n  HTTP.get(syncUrl, function(err, response) {\n    var t3 = Date.now(); // Grab this now\n    if (err) {\n      //  We'll still use our last computed offset if is defined\n      log(\"Error syncing to server time: \", err);\n      if (++attempts <= maxAttempts)\n        Meteor.setTimeout(TimeSync.resync, 1000);\n      else\n        log(\"Max number of time sync attempts reached. Giving up.\");\n      return;\n    }\n\n    attempts = 0; // It worked\n\n    var ts = parseInt(response.content);\n    SyncInternals.offset = Math.round(((ts - t0) + (ts - t3)) / 2);\n    SyncInternals.roundTripTime = t3 - t0; // - (ts - ts) which is 0\n    SyncInternals.offsetDep.changed();\n  });\n};\n\n// Reactive variable for server time that updates every second.\nTimeSync.serverTime = function(clientTime, interval) {\n  check(interval, Match.Optional(Match.Integer));\n  // If we don't know the offset, we can't provide the server time.\n  if ( !TimeSync.isSynced() ) return undefined;\n  // If a client time is provided, we don't need to depend on the tick.\n  if ( !clientTime ) getTickDependency(interval || defaultInterval).depend();\n\n  // SyncInternals.offsetDep.depend(); implicit as we call isSynced()\n  // Convert Date argument to epoch as necessary\n  return (+clientTime || Date.now()) + SyncInternals.offset;\n};\n\n// Reactive variable for the difference between server and client time.\nTimeSync.serverOffset = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset;\n};\n\nTimeSync.roundTripTime = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.roundTripTime;\n};\n\nTimeSync.isSynced = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset !== undefined;\n};\n\nvar resyncIntervalId = null;\n\nTimeSync.resync = function() {\n  if (resyncIntervalId !== null) Meteor.clearInterval(resyncIntervalId);\n  updateOffset();\n  resyncIntervalId = Meteor.setInterval(updateOffset, 600000);\n};\n\n// Run this as soon as we load, even before Meteor.startup()\n// Run again whenever we reconnect after losing connection\nvar wasConnected = false;\n\nTracker.autorun(function() {\n  var connected = Meteor.status().connected;\n  if ( connected && !wasConnected ) TimeSync.resync();\n  wasConnected = connected;\n});\n\n// Resync if unexpected change by more than a few seconds. This needs to be\n// somewhat lenient, or a CPU-intensive operation can trigger a re-sync even\n// when the offset is still accurate. In any case, we're not going to be able to\n// catch very small system-initiated NTP adjustments with this, anyway.\nvar tickCheckTolerance = 5000;\n\nvar lastClientTime = Date.now();\n\n// Set up a new interval for any amount of reactivity.\nfunction getTickDependency(interval) {\n\n  if ( !SyncInternals.timeTick[interval] ) {\n    var dep  = new Tracker.Dependency();\n\n    Meteor.setInterval(function() {\n      dep.changed();\n    }, interval);\n\n    SyncInternals.timeTick[interval] = dep;\n  }\n\n  return SyncInternals.timeTick[interval];\n}\n\n// Set up special interval for the default tick, which also watches for re-sync\nMeteor.setInterval(function() {\n  var currentClientTime = Date.now();\n\n  if ( SyncInternals.timeCheck(\n    lastClientTime, currentClientTime, defaultInterval, tickCheckTolerance) ) {\n    // No problem here, just keep ticking along\n    SyncInternals.timeTick[defaultInterval].changed();\n  }\n  else {\n    // resync on major client clock changes\n    // based on http://stackoverflow.com/a/3367542/1656818\n    log(\"Clock discrepancy detected. Attempting re-sync.\");\n    // Refuse to compute server time.\n    SyncInternals.offset = undefined;\n    SyncInternals.offsetDep.changed();\n    TimeSync.resync();\n  }\n\n  lastClientTime = currentClientTime;\n}, defaultInterval);\n\n"]}}]